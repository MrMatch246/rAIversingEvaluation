{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfUnset_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_unset_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPtr)\n\n{\n  int returnValue;\n  \n  *dataPtr = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPtr + 6)) {\n    update_parameter_value_00081210(*(byte *)((int)dataPtr + 6),1);\n    update_parameter_value_00081318(*(undefined *)((int)dataPtr + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPtr + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPtr + 0x49) = 0;\n  *(undefined *)((int)dataPtr + 0x4a) = 0;\n  *(undefined2 *)(dataPtr + 0x15) = 0;\n  *(undefined2 *)((int)dataPtr + 0x52) = 0;\n  *(undefined2 *)(dataPtr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPtr",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "update_parameter_value_000801b0",
            "code": "\nint updateParameterValue_000801b0(int **parameter)\n\n{\n  bool isMaxLengthReached;\n  undefined parameterValue;\n  char currentChar;\n  int resultCode;\n  byte currentIndex;\n  \n  if (1 < *(byte *)((int)parameter + 6)) {\n    update_parameter_value_00081318(*(byte *)((int)parameter + 6),0);\n  }\n  isMaxLengthReached = false;\n  *(undefined *)((int)parameter + 0x49) = 0;\n  if (*(byte *)((int)parameter + 5) < 4) {\n    while (resultCode = (**(code **)(**parameter + 8))(), resultCode != 0) {\n      currentIndex = *(byte *)((int)parameter + 0x49);\n      parameterValue = (**(code **)(**parameter + 0xc))();\n      currentChar = *(char *)((int)parameter + 0x49);\n      *(undefined *)((int)parameter + currentIndex + 9) = parameterValue;\n      currentIndex = currentChar + 1;\n      *(byte *)((int)parameter + 0x49) = currentIndex;\n      if (0x3f < currentIndex) {\n        isMaxLengthReached = true;\n      }\n    }\n  }\n  *(short *)(parameter + 0x14) = *(short *)(parameter + 0x14) + 1;\n  if (isMaxLengthReached) {\n    currentChar = -3;\n    *(short *)(parameter + 0x15) = *(short *)(parameter + 0x15) + 1;\n  }\n  else {\n    currentChar = *(char *)((int)parameter + 0x49);\n  }\n  return (int)currentChar;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "update_parameter_value_000801b0",
                "param_1": "parameter",
                "bVar1": "isMaxLengthReached",
                "uVar2": "parameterValue",
                "cVar3": "currentChar",
                "iVar4": "resultCode",
                "bVar5": "currentIndex"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int inputAddress,uint length)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitCount;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentIndex = inputAddress; (currentIndex - inputAddress & 0xffU) < length; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitCount = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "inputAddress",
                "param_2": "length",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitCount",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_values_00080258",
            "code": "\nvoid updateChecksumAndValues_00080258(int **inputArray,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  byte byteValue;\n  undefined2 calculatedChecksum;\n  int result;\n  uint convertedByteValue;\n  \n  byteValue = *(byte *)((int)inputArray + 0x49);\n  convertedByteValue = (uint)byteValue;\n  calculatedChecksum = calculate_checksum_0008021c(inputArray,convertedByteValue,param2,param3,param3);\n  *(char *)((int)inputArray + convertedByteValue + 9) = (char)((ushort)calculatedChecksum >> 8);\n  *(char *)((int)inputArray + (convertedByteValue + 1 & 0xff) + 9) = (char)calculatedChecksum;\n  *(byte *)((int)inputArray + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)inputArray + 6)) {\n    update_parameter_value_00081318(*(byte *)((int)inputArray + 6),1);\n  }\n  if (*(byte *)((int)inputArray + 5) < 4) {\n    (**(code **)(**inputArray + 4))(*inputArray,(int)inputArray + 9,*(undefined *)((int)inputArray + 0x49));\n  }\n  if (1 < *(byte *)((int)inputArray + 6)) {\n    update_parameter_value_00081318(*(byte *)((int)inputArray + 6),0);\n  }\n  if (*(byte *)((int)inputArray + 5) < 4) {\n    do {\n      result = (**(code **)(**inputArray + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)inputArray + 0x49) = 0;\n  result = get_global_var_thunk_00081714();\n  inputArray[0x17] = (int *)(result + (uint)*(ushort *)((int)inputArray + 0x56));\n  *(short *)((int)inputArray + 0x52) = *(short *)((int)inputArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_values_00080258",
                "param_1": "inputArray",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "bVar1": "byteValue",
                "uVar2": "calculatedChecksum",
                "iVar3": "result",
                "uVar4": "convertedByteValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "initialize_data_structure_000802da",
            "code": "\nint initializeDataStructure_000802da(int dataStructure,uint value1,uint value2,ushort *ptrToData)\n\n{\n  char errorCode;\n  byte byteVar;\n  undefined tempVar;\n  ushort tempVar2;\n  uint tempVar3;\n  ushort *ptrToDataIter;\n  undefined lowerByteValue1;\n  undefined higherByteValue1;\n  ushort value2AsUShort;\n  \n  lowerByteValue1 = (undefined)value1;\n  higherByteValue1 = (undefined)(value1 >> 8);\n  value2AsUShort = (ushort)value2;\n  tempVar3 = value2 & 0xffff;\n  if (*(char *)(dataStructure + 4) != '\\0') {\n    errorCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(dataStructure + 7) != '\\0') {\n    errorCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((value1 & 0xff) - 1 & 0xff)) {\n    errorCode = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(dataStructure + 9) = lowerByteValue1;\n  *(undefined *)(dataStructure + 10) = higherByteValue1;\n  *(ushort **)(dataStructure + 0x4c) = ptrToData;\n  *(char *)(dataStructure + 0xb) = (char)(value1 >> 0x18);\n  *(char *)(dataStructure + 0xc) = (char)(value1 >> 0x10);\n  tempVar = (undefined)(value2 >> 8);\n  switch(higherByteValue1) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(dataStructure + 0xd) = tempVar;\n    break;\n  case 5:\n    tempVar2 = *ptrToData;\n    if (tempVar2 != 0) {\n      tempVar2 = 1;\n    }\n    *(char *)(dataStructure + 0xd) = -(char)tempVar2;\n    tempVar3 = 0;\n    break;\n  case 6:\n    *(char *)(dataStructure + 0xd) = (char)(*ptrToData >> 8);\n    tempVar3 = (uint)*ptrToData;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(value2AsUShort >> 3) & 0xfe;\n    if ((value2 & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(dataStructure + 0xe) = (char)value2;\n    *(undefined *)(dataStructure + 0xd) = tempVar;\n    *(byte *)(dataStructure + 0xf) = byteVar;\n    tempVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(dataStructure + 0xd) = tempVar;\n    *(char *)(dataStructure + 0xe) = (char)value2;\n    ptrToData = ptrToData + -1;\n    *(char *)(dataStructure + 0xf) = (char)tempVar3 * '\\x02';\n    *(undefined *)(dataStructure + 0x49) = 7;\n    ptrToDataIter = ptrToData + tempVar3;\n    while (ptrToData != ptrToDataIter) {\n      byteVar = *(byte *)(dataStructure + 0x49);\n      *(char *)(dataStructure + (uint)byteVar + 9) = (char)(ptrToData[1] >> 8);\n      tempVar3 = byteVar + 1 & 0xff;\n      *(char *)(dataStructure + 0x49) = (char)tempVar3;\n      ptrToData = ptrToData + 1;\n      *(char *)(tempVar3 + dataStructure + 9) = (char)*ptrToData;\n      *(byte *)(dataStructure + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(dataStructure + 0xe) = (char)tempVar3;\n  tempVar = 6;\nLAB_0008034a:\n  *(undefined *)(dataStructure + 0x49) = tempVar;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_values_00080258(dataStructure);\n  *(undefined *)(dataStructure + 7) = 1;\n  errorCode = '\\0';\nLAB_000803cc:\n  return (int)errorCode;\n}\n\n",
            "renaming": {
                "FUN_000802da": "initialize_data_structure_000802da",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "ptrToData",
                "cVar1": "errorCode",
                "bVar2": "byteVar",
                "uVar3": "tempVar",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "puVar6": "ptrToDataIter",
                "local_1c": "lowerByteValue1",
                "local_1b": "higherByteValue1",
                "local_18": "value2AsUShort"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_increment_value_000803d4",
            "code": "\nundefined4 checkAndIncrementValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_increment_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPtr,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined2 combinedResult;\n  int computedValue;\n  byte counter;\n  uint convertedCounter;\n  int arrayPtr;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPtr + 0xb) >> 1 <= convertedCounter) break;\n    computedValue = (convertedCounter * 2 + 3 & 0xff) + dataPtr;\n    arrayPtr = *(int *)(dataPtr + 0x4c);\n    combinedResult = combine_params_000815f8(*(undefined *)(computedValue + 9),*(undefined *)(computedValue + 10),computedValue,\n                         *(byte *)(dataPtr + 0xb),param3);\n    *(undefined2 *)(arrayPtr + convertedCounter * 2) = combinedResult;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPtr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "combinedResult",
                "iVar2": "computedValue",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "arrayPtr"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_update_value_0008043e",
            "code": "\nint checkAndUpdateValue_0008043e(int **dataArray)\n\n{\n  char result;\n  uint returnValue;\n  int *globalVar;\n  int checkResult;\n  uint parameterValue;\n  \n  if (*(byte *)((int)dataArray + 5) < 4) {\n    returnValue = (**(code **)(**dataArray + 8))();\n    parameterValue = returnValue & 0xff;\n  }\n  globalVar = (int *)get_global_var_thunk_00081714();\n  if (dataArray[0x17] < globalVar) {\n    *(undefined *)(dataArray + 2) = 0xff;\n    *(undefined *)((int)dataArray + 7) = 0;\n    *(short *)(dataArray + 0x15) = *(short *)(dataArray + 0x15) + 1;\n  }\n  else if (7 < parameterValue) {\n    update_parameter_value_000801b0(dataArray);\n    checkResult = check_and_increment_value_000803d4(dataArray);\n    if (checkResult == 0) {\n      if (*(byte *)((int)dataArray + 10) - 3 < 2) {\n        process_data_00080410(dataArray);\n      }\n      *(undefined *)((int)dataArray + 7) = 0;\n      result = *(char *)((int)dataArray + 0x49);\n    }\n    else {\n      *(undefined *)((int)dataArray + 7) = 0;\n      result = (char)checkResult;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_update_value_0008043e",
                "param_1": "dataArray",
                "cVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "globalVar",
                "iVar4": "checkResult",
                "unaff_r6": "parameterValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initializeSystem_000804a8(void)\n\n{\n  int updatedValue;\n  \n  updateParameterValue(1,0);\n  updateParameterValue(6,1);\n  updateParameterValue(0,1);\n  updateParameterValue(1,1);\n  updateAnotherParameterValue(0,0);\n  updateAnotherParameterValue(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initializeData(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = getGlobalVarThunk();\n  updatedValue = getGlobalVarThunk();\n  DAT_200709e0 = updatedValue + 1000;\n  updatedValue = getGlobalVarThunk();\n  DAT_20070a48 = updatedValue + 1000;\n  updatedValue = getGlobalVarThunk();\n  DAT_20070934 = updatedValue + 1000;\n  updatedValue = getGlobalVarThunk();\n  DAT_200708c0 = updatedValue + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    softwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "update_parameter_value_00081210": "updateParameterValue",
                "update_parameter_value_00081318": "updateAnotherParameterValue",
                "initialize_data_00080164": "initializeData",
                "get_global_var_thunk_00081714": "getGlobalVarThunk",
                "software_interrupt": "softwareInterrupt",
                "iVar1": "updatedValue"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "update_data_structure_000805d0",
            "code": "\n\n\nvoid updateDataStructure_000805d0(void)\n\n{\n  uint globalVar;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  int integerVar;\n  uint *ptrVar;\n  undefined4 *ptrVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    globalVar = get_global_var_thunk_00081714();\n    if (DAT_200708c8 < globalVar) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    check_and_update_value_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      initialize_data_structure_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_var_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_value_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_value_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = calculate_value_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    check_and_update_value_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_var_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    check_and_update_value_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      initialize_data_structure_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_var_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    check_and_update_value_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      initialize_data_structure_000802da(&DAT_200709e4,*ptrVar2,ptrVar2[1],ptrVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    check_and_update_value_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    check_and_update_value_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      initialize_data_structure_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_var_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrVar = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrVar = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (globalVar = get_global_var_thunk_00081714(), DAT_200708c0 < globalVar))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      integerVar = get_global_var_thunk_00081714();\n      DAT_200708c0 = integerVar + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      globalVar = get_global_var_thunk_00081714();\n      if (DAT_200708c0 < globalVar) {\n        DAT_2007090c = DAT_2007090c + 1;\n        integerVar = get_global_var_thunk_00081714();\n        DAT_200708c0 = integerVar + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrVar = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      globalVar = get_global_var_thunk_00081714();\n      if (DAT_200708c0 < globalVar) {\n        DAT_2007090c = DAT_2007090c + 1;\n        integerVar = get_global_var_thunk_00081714();\n        DAT_200708c0 = integerVar + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  globalVar = get_global_var_thunk_00081714();\n  if (DAT_200709e0 < globalVar) {\n    value1 = calculate_value_0008189c(DAT_20070940);\n    value2 = calculate_float_00081730(value1,DAT_200709c8);\n    value1 = DAT_200708c4;\n    DAT_20070930 = value2;\n    value3 = calculate_floating_point_00081734(value2,DAT_200708c4);\n    value3 = calculate_floating_point_00081944(value3,DAT_2007094c);\n    value3 = calculate_floating_point_00081734(value3,DAT_20070914);\n    DAT_2007094c = value3;\n    value1 = calculate_float_00081730(value2,value1);\n    value1 = calculate_floating_point_00081944(value1,DAT_200709c4);\n    value1 = calculate_float_00081730(value1,DAT_2007096c);\n    DAT_200709c4 = value1;\n    value4 = calculate_floating_point_00081944(value2,DAT_20070a4c);\n    value4 = calculate_floating_point_00081734(value4,value3);\n    calculate_floating_point_00081734(value4,value1);\n    DAT_20070910 = convert_to_float_00081cd0();\n    DAT_2007091c = calculate_value_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = value2;\n    DAT_20070914 = value3;\n    DAT_2007096c = value1;\n    integerVar = get_global_var_thunk_00081714();\n    DAT_200709e0 = integerVar + DAT_20070970;\n  }\n  value1 = calculate_value_0008189c(DAT_20070970);\n  integerVar = check_concatenation_result_00081ca8(DAT_2007091c,value1);\n  if (integerVar != 0) {\n    DAT_2007091c = value1;\n  }\n  integerVar = check_condition_00081c94(DAT_2007091c,0);\n  if (integerVar != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = check_parameter_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "update_data_structure_000805d0",
                "uVar1": "globalVar",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4",
                "iVar6": "integerVar",
                "puVar7": "ptrVar",
                "puVar8": "ptrVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_memory_and_transmission_00080a68",
            "code": "\nvoid initializeMemoryAndTransmission_00080a68(void)\n\n{\n  initializeMemory(&DAT_20070954,\"\");\n  initializeTransmission(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_memory_and_transmission_00080a68",
                "initialize_memory_00081682": "initializeMemory",
                "initialize_transmission_00081d5c": "initializeTransmission"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_and_update_parameters_00080ae4",
            "code": "\n\n\nvoid initialize_and_update_parameters_00080ae4(void)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  initialize_function_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_code_blocks_00081d7c();\n  iVar1 = 0;\n  do {\n    iVar2 = iVar1 + 1;\n    update_single_parameter(iVar1,0);\n    iVar1 = iVar2;\n  } while (iVar2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_multiple_parameters(0x400e0e00,1,0x300,0);\n  update_single_parameter(0,1);\n  update_multiple_parameters(0x400e0e00,1,0xc00,0);\n  update_multiple_parameters(0x400e0e00,1,0x3000,0);\n  update_multiple_parameters(0x400e1400,2,0x30,0);\n  update_multiple_parameters(0x400e1000,1,0xc00,0);\n  update_multiple_parameters(0x400e0e00,1,3,0);\n  update_multiple_parameters(0x400e1000,1,0xc000,0);\n  check_and_update_bitmask(0x25);\n  calculate_threshold(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_parameters(0x400c0000,0,0x300000,1);\n  update_flags(0x400c0000,0,0);\n  set_parameter_value(0x400c0000,0xffffffff);\n  set_default_value(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_and_update_parameters_00080ae4",
                "update_parameter_value_00081318": "update_single_parameter",
                "update_parameter_value_00080da0": "update_multiple_parameters",
                "check_and_update_bitmask_00080e18": "check_and_update_bitmask",
                "calculate_threshold_00080f9c": "calculate_threshold",
                "update_parameters_00081042": "update_parameters",
                "update_flags_00081034": "update_flags",
                "set_param_value_0008106e": "set_parameter_value",
                "set_default_value_00081066": "set_default_value"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_memory_and_values_00080c0c",
            "code": "\nvoid initializeMemoryAndValues_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initMemory(&DAT_20070b84);\n  initMemory(&DAT_20070ad8);\n  initFunction(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initMemory(&DAT_20070de4);\n  initMemory(&DAT_20070e6c);\n  initMemory(&DAT_20070ef4);\n  initMemory(&DAT_20070a50);\n  initMemory(&DAT_20070c84);\n  initMemory(&DAT_20070d0c);\n  initWithValue(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initWithValue(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initWithValue(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_memory_and_values_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "initialize_memory_000813a8": "initMemory",
                "initialize_function_000814e4": "initFunction",
                "initialize_and_assign_value_000815d4": "initWithValue"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_difference_calculations_00080ce0",
            "code": "\nvoid checkAndExecuteDifferenceCalculations_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculateDifference(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculateDifference(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculateDifference(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_difference_calculations_00080ce0",
                "calculate_difference_000813e4": "calculateDifference",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_value_00080d2e",
            "code": "\nvoid updateParameterValue_00080d2e(int dataPointer,undefined4 caseNumber,uint newParameterValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(dataPointer + 0x44) = newParameterValue;\n  switch(caseNumber) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(dataPointer + 0x70) & *(uint *)(dataPointer + 0x70) & ~newParameterValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(dataPointer + 0x70) | newParameterValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(dataPointer + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(dataPointer + 4) = newParameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_value_00080d2e",
                "param_1": "dataPointer",
                "param_2": "caseNumber",
                "param_3": "newParameterValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_values_based_on_flags_00080d54",
            "code": "\nvoid setValuesBasedOnFlags_00080d54(undefined4 *values,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  values[0x11] = newValue;\n  if (isNegative) {\n    values[0x19] = newValue;\n  }\n  if (!isNegative) {\n    values[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    values[8] = newValue;\n  }\n  if (!isNegative) {\n    values[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    values[0x20] = newValue;\n  }\n  values[5] = newValue;\n  *values = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_values_based_on_flags_00080d54",
                "param_1": "values",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_params_00080d7a",
            "code": "\nvoid setParams_00080d7a(undefined4 *outputArray,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  outputArray[0x11] = newValue;\n  if (condition3 == 0) {\n    outputArray[0x18] = newValue;\n  }\n  else {\n    outputArray[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    outputArray[0x15] = newValue;\n  }\n  else {\n    outputArray[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    outputArray[0xd] = newValue;\n  }\n  else {\n    outputArray[0xc] = newValue;\n  }\n  outputArray[4] = newValue;\n  *outputArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_params_00080d7a",
                "param_1": "outputArray",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_value_00080da0",
            "code": "\nundefined4 updateParameterValue_00080da0(int device,int paramType,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(paramType) {\n  case 1:\n  case 2:\n    updateParameterValue_00080da0Helper(device,paramType,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    setValuesBasedOnFlags(device,value,flag,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    setParameters(device,value,paramType == 5,(flag << 0x1d) >> 0x1f,flag & 1,paramType,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_value_00080da0",
                "param_1": "device",
                "param_2": "paramType",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative",
                "update_parameter_value_00080d2e": "updateParameterValueHelper",
                "set_values_based_on_flags_00080d54": "setValuesBasedOnFlags",
                "set_params_00080d7a": "setParameters"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_conditions_00080e04",
            "code": "\nuint check_bitwise_conditions_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_conditions_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bitmask_00080e18",
            "code": "\n\n\nundefined4 checkAndUpdateBitmask_00080e18(uint inputValue)\n\n{\n  uint bitmask;\n  \n  if (inputValue < 0x2d) {\n    if (inputValue < 0x20) {\n      bitmask = 1 << (inputValue & 0xff);\n      if ((bitmask & _DAT_400e0618) != bitmask) {\n        _DAT_400e0610 = bitmask;\n      }\n    }\n    else {\n      bitmask = 1 << (inputValue - 0x20 & 0xff);\n      if ((bitmask & _DAT_400e0708) != bitmask) {\n        _DAT_400e0700 = bitmask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bitmask_00080e18",
                "param_1": "inputValue",
                "uVar1": "bitmask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_function_00080e9c",
            "code": "\n\n\nvoid initializeFunction_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  symbolTableEntryArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_function_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "symbolTableEntryArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_main_loop_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *output_values,uint input_value,int multiplier,int target_value)\n\n{\n  uint divisions;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output_values = 1;\n  output_values[1] = 0;\n  output_values[72] = 0x202;\n  output_values[65] = 0;\n  output_values[69] = 0;\n  divisions = input_value / (uint)(multiplier * 2);\n  if (input_value == multiplier * 2 * divisions) {\n    divisions = divisions - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(target_value * (int)(((ulonglong)input_value / (ulonglong)((divisions + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output_values[1] = (index & 0xf) << 0x10 | (divisions & 0xff) << 8 | output_values[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output_values",
                "param_2": "input_value",
                "param_3": "multiplier",
                "param_4": "target_value",
                "local_58": "thresholds",
                "param_1[1]": "output_values[1]",
                "param_1[0x48]": "output_values[72]",
                "param_1[0x41]": "output_values[65]",
                "param_1[0x45]": "output_values[69]",
                "uVar1": "divisions",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_flags_00081034",
            "code": "\nvoid updateFlags_00081034(int flags,uint value,uint bit)\n\n{\n  *(uint *)(flags + 4) = value | *(uint *)(flags + 4) | (bit & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "flags",
                "param_2": "value",
                "param_3": "bit"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_parameters_00081042",
            "code": "\nvoid updateParameters_00081042(int dataPointer,uint input1,uint input2,uint input3)\n\n{\n  *(uint *)(dataPointer + 4) =\n       input2 | *(uint *)(dataPointer + 4) | (input1 & 0xf) << 0x18 | (input3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_parameters_00081042",
                "param_1": "dataPointer",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_value_0008105c",
            "code": "\nvoid setBitValue_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_value_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_00081066",
            "code": "\nvoid setDefaultValue_00081066(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_system_00081184",
            "code": "\nundefined4 initializeSystem_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_system_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_updated_value_0008118c",
            "code": "\nint calculateUpdatedValue_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_updated_value_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_negative_one_000811ae",
            "code": "\nundefined4 getNegativeOne_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_negative_one_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_memory_value_000811b4",
            "code": "\nundefined4 setMemoryValue_000811b4(undefined4 value,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_memory_value_000811b4",
                "param_1": "value",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_return_value_000811be",
            "code": "\nint checkReturnValue_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_return_value_000811be",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_default_value_000811c2",
            "code": "\nundefined4 getDefaultValue_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_default_value_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_app_000811c6",
            "code": "\nundefined4 initializeApp_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_app_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param1,int inputArray,uint length)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)length; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(inputArray + i);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param1",
                "param_2": "inputArray",
                "param_3": "length",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_var_thunk_00081714",
            "code": "\nundefined4 get_global_var_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_var_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_parameter_value_00081210",
            "code": "\n\n\nint updateParameterValue_00081210(int inputValue,int mode)\n\n{\n  int result;\n  uint bitMask;\n  undefined4 updateType;\n  uint tempMask;\n  byte originalMode;\n  byte updatedMode;\n  int offset;\n  int parameter;\n  \n  result = inputValue;\n  if ((&DAT_00084d24)[inputValue * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputValue] & 0xf) == 4) {\n      result = set_bit_value_0008105c(0x400c0000,(&DAT_00084d31)[inputValue * 0x1c]);\n    }\n    updatedMode = (&DAT_20070d94)[inputValue];\n    originalMode = updatedMode & 0xf;\n    if ((originalMode < 3) && (updatedMode != 0)) {\n      if (originalMode == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (originalMode == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (originalMode == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = inputValue * 0x1c;\n        checkAndUpdateBitmask(*(undefined4 *)(&DAT_00084d20 + result));\n        result = updateParameterValue_00081210(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        updatedMode = (&DAT_20070d94)[inputValue] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = inputValue * 0x1c;\n        checkAndUpdateBitmask(*(undefined4 *)(&DAT_00084d20 + result));\n        result = updateParameterValue_00081210(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        updatedMode = (&DAT_20070d94)[inputValue] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[inputValue] = updatedMode;\n      return result;\n    }\n    offset = inputValue * 0x1c;\n    parameter = *(int *)(&DAT_00084d18 + offset);\n    if (updatedMode >> 4 == 0) {\n      updateType = 4;\n    }\n    else {\n      updateType = 5;\n    }\n    result = updateParameterValue_00081210(parameter,updateType,*(undefined4 *)(&DAT_00084d1c + offset),\n                         *(undefined4 *)(&DAT_00084d28 + offset));\n    (&DAT_20070d94)[inputValue] = (&DAT_20070d94)[inputValue] & 0xf0 | 3;\n    if (*(int *)(parameter + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084d20 + offset);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        tempMask = _DAT_400e0618 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0614 = tempMask;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        tempMask = _DAT_400e0708 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0704 = tempMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_parameter_value_00081210",
                "param_1": "inputValue",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "bitMask",
                "uVar3": "updateType",
                "uVar4": "tempMask",
                "bVar5": "originalMode",
                "bVar6": "updatedMode",
                "iVar7": "offset",
                "iVar8": "parameter",
                "check_and_update_bitmask_00080e18": "checkAndUpdateBitmask",
                "update_parameter_value_00080da0": "updateParameterValue"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_parameter_value_00081318",
            "code": "\nvoid updateParameterValue_00081318(int index,int value,undefined4 paramValue)\n\n{\n  int conditionResult;\n  undefined4 paramValue2;\n  int paramAddress;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      updateParameter(index,1,paramValue,5,index,value,paramValue);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    paramAddress = *(int *)(&DAT_00084d18 + index * 0x1c);\n    paramValue2 = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    conditionResult = checkConditions(paramAddress,paramValue2);\n    if (conditionResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(paramAddress + 100) = paramValue2;\n        return;\n      }\n      *(undefined4 *)(paramAddress + 0x60) = paramValue2;\n      return;\n    }\n    setParameters(paramAddress,paramValue2,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_parameter_value_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "paramValue",
                "iVar1": "conditionResult",
                "uVar2": "paramValue2",
                "iVar3": "paramAddress",
                "update_parameter_value_00081210": "updateParameter",
                "check_bitwise_conditions_00080e04": "checkConditions",
                "set_params_00080d7a": "setParameters"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_zero_rel_info_00081388",
            "code": "\nvoid execute_if_zero_rel_info_00081388(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(code *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_zero_rel_info_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  fillMemoryWithByte(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress",
                "fill_memory_with_byte_00082504": "fillMemoryWithByte"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_param_and_value_000813c2",
            "code": "\nvoid updateParamAndValue_000813c2(int param,undefined value)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *(int *)(param + 0x80) + 1U & 0x7f;\n  if (updatedValue != *(uint *)(param + 0x84)) {\n    *(undefined *)(param + *(int *)(param + 0x80)) = value;\n    *(uint *)(param + 0x80) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_param_and_value_000813c2",
                "param_1": "param",
                "param_2": "value",
                "uVar1": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_value_00081454",
            "code": "\nundefined4 updateValue_00081454(int ptr1,undefined4 newValue)\n\n{\n  int ptr2;\n  uint updatedIndex;\n  \n  ptr2 = *(int *)(ptr1 + 0x14);\n  if ((*(int *)(*(int *)(ptr1 + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr2 + 0x84) == *(int *)(ptr2 + 0x80))) {\n    *(undefined4 *)(*(int *)(ptr1 + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedIndex = *(int *)(ptr2 + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedIndex < 0) {\n      updatedIndex = (updatedIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr2 + 0x84) == updatedIndex);\n    *(char *)(ptr2 + *(int *)(ptr2 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(ptr1 + 0x14) + 0x80) = updatedIndex;\n    *(undefined4 *)(*(int *)(ptr1 + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_value_00081454",
                "param_1": "ptr1",
                "param_2": "newValue",
                "iVar1": "ptr2",
                "uVar2": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *array,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  array[1] = 0;\n  array[2] = 1000;\n  array[6] = value2;\n  *array = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(array + 7) = value3;\n  array[4] = value5;\n  array[8] = value4;\n  array[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "array",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "update_bitmask_00081508",
            "code": "\nvoid updateBitmask_00081508(int inputParam1,uint inputParam2,undefined4 inputParam3)\n\n{\n  int localVar1;\n  undefined4 *localVar2;\n  \n  check_and_update_bitmask_00080e18(*(undefined4 *)(inputParam1 + 0x20));\n  localVar2 = *(undefined4 **)(inputParam1 + 0x18);\n  localVar2[0x48] = 0x202;\n  *localVar2 = 0xac;\n  localVar2[1] = inputParam3;\n  localVar2[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / inputParam2 >> 4;\n  localVar2[3] = 0xffffffff;\n  localVar2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(inputParam1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(inputParam1 + 0x1c) & 0x1f);\n  localVar1 = *(int *)(inputParam1 + 0x10);\n  *(undefined4 *)(localVar1 + 0x84) = 0;\n  *(undefined4 *)(localVar1 + 0x80) = 0;\n  localVar1 = *(int *)(inputParam1 + 0x14);\n  *(undefined4 *)(localVar1 + 0x84) = 0;\n  *(undefined4 *)(localVar1 + 0x80) = 0;\n  *localVar2 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "update_bitmask_00081508",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "iVar1": "localVar1",
                "puVar2": "localVar2"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_assign_value_000815d4",
            "code": "\nundefined4 * initialize_and_assign_value_000815d4(undefined4 *output,undefined4 input_value)\n\n{\n  initialize_function_000814e4();\n  *output = &PTR_update_value_00081454_1_000857d8;\n  output[9] = input_value;\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_assign_value_000815d4",
                "param_1": "output",
                "param_2": "input_value",
                "param_1[9]": "output[9]"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_params_000815f8",
            "code": "\nuint combineParams_000815f8(int input,uint flags)\n\n{\n  return flags | input << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_params_000815f8",
                "param_1": "input",
                "param_2": "flags"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "update_relocation_offset_000815fe",
            "code": "\nundefined4 * update_relocation_offset_000815fe(undefined4 *relocation_offset_ptr)\n\n{\n  update_relocation_offset_000815fe_00081e04(*relocation_offset_ptr);\n  return relocation_offset_ptr;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "update_relocation_offset_000815fe",
                "param_1": "relocation_offset_ptr"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameters_0008160c",
            "code": "\nvoid resetParameters_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    updateRelocationOffset();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "param_1": "param",
                "update_relocation_offset_00081e04": "updateRelocationOffset"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "relocate_and_update_memory_00081622",
            "code": "\nint relocate_and_update_memory_00081622(int *memory,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  result = relocate_memory_allocation_000825a0(*memory,size + 1,param_3,param_4,param_4);\n  if (result != 0) {\n    *memory = result;\n    memory[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "relocate_and_update_memory_00081622",
                "param_1": "memory",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_memory_0008163a",
            "code": "\nundefined4 checkAndUpdateMemory_0008163a(int *dataPointer,uint requiredSize)\n\n{\n  int relocateResult;\n  \n  if ((*dataPointer == 0) || ((uint)dataPointer[1] < requiredSize)) {\n    relocateResult = relocate_and_update_memory_00081622(dataPointer);\n    if (relocateResult == 0) {\n      return 0;\n    }\n    if (dataPointer[2] == 0) {\n      *(undefined *)*dataPointer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_memory_0008163a",
                "param_1": "dataPointer",
                "param_2": "requiredSize",
                "iVar1": "relocateResult"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_memory_and_copy_string_0008165c",
            "code": "\nundefined4 * updateMemoryAndCopyString_0008165c(undefined4 *updatedMemory,undefined4 inputString,undefined4 newMemoryValue)\n\n{\n  int memoryCheck;\n  \n  memoryCheck = check_and_update_memory_0008163a(updatedMemory,newMemoryValue);\n  if (memoryCheck == 0) {\n    resetMemory(updatedMemory);\n  }\n  else {\n    updatedMemory[2] = newMemoryValue;\n    copyString(*updatedMemory,inputString);\n  }\n  return updatedMemory;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_memory_and_copy_string_0008165c",
                "param_1": "updatedMemory",
                "param_2": "inputString",
                "param_3": "newMemoryValue",
                "iVar1": "memoryCheck",
                "reset_parameters_0008160c": "resetMemory",
                "copy_string_00082994": "copyString"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_memory_00081682",
            "code": "\nundefined4 * initializeMemory_00081682(undefined4 *memoryPointer,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *memoryPointer = 0;\n  memoryPointer[1] = 0;\n  memoryPointer[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082a50(inputValue);\n    update_memory_and_copy_string_0008165c(memoryPointer,inputValue,leadingZerosCount);\n  }\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_memory_00081682",
                "param_1": "memoryPointer",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_main_loop_000816a8",
            "code": "\nvoid runMainLoop_000816a8(void)\n\n{\n  initializeDefaultSettings();\n  initializeAndUpdateParameters();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeSystem();\n  do {\n    updateDataStructure();\n    checkAndExecuteDifferenceCalculations();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_main_loop_000816a8",
                "initialize_default_settings_000816d4": "initializeDefaultSettings",
                "initialize_and_update_parameters_00080ae4": "initializeAndUpdateParameters",
                "initialize_system_000804a8": "initializeSystem",
                "update_data_structure_000805d0": "updateDataStructure",
                "check_and_execute_difference_calculations_00080ce0": "checkAndExecuteDifferenceCalculations"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_default_settings_000816d4",
            "code": "\n\n\nvoid initializeDefaultSettings_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_default_settings_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_variable_00081714",
            "code": "\nundefined4 get_global_variable_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_variable_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculate_float_00081730(uint input_value,uint exponent,undefined4 undefined_value,uint power_two)\n\n{\n  int shifted_value1;\n  int shifted_value2;\n  uint input_value_shift;\n  uint result_shift;\n  uint result_accum;\n  uint accum_start;\n  uint difference;\n  bool is_equal;\n  \n  input_value_shift = exponent ^ 0x80000000;\n  result_accum = input_value << 1;\n  is_equal = result_accum == 0;\n  if (!is_equal) {\n    power_two = exponent << 1;\n    is_equal = power_two == 0;\n  }\n  if (!is_equal) {\n    is_equal = result_accum == power_two;\n  }\n  shifted_value1 = (int)result_accum >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_value1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)power_two >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_value2 = (int)(exponent << 1) >> 0x18;\n    if (shifted_value1 == -1 || shifted_value2 == -1) {\n      result_accum = input_value_shift;\n      if (shifted_value1 == -1) {\n        result_accum = input_value;\n      }\n      if (shifted_value1 != -1 || shifted_value2 != -1) {\n        input_value_shift = result_accum;\n      }\n      is_equal = (result_accum & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input_value_shift & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result_accum == input_value_shift;\n      }\n      if (!is_equal) {\n        result_accum = result_accum | 0x400000;\n      }\n      return result_accum;\n    }\n    if (((input_value ^ input_value_shift) & 0x7fffffff) != 0) {\n      if (result_accum == 0) {\n        input_value = input_value_shift;\n      }\n      return input_value;\n    }\n    if (input_value != input_value_shift) {\n      return 0;\n    }\n    if ((result_accum & 0xff000000) == 0) {\n      input_value_shift = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        input_value_shift = input_value_shift | 0x80000000;\n      }\n      return input_value_shift;\n    }\n    if (result_accum < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_0008186a:\n    return input_value | 0x7f800000;\n  }\n  result_accum = result_accum >> 0x18;\n  power_two = power_two >> 0x18;\n  difference = power_two - result_accum;\n  is_equal = difference != 0;\n  accum_start = result_accum;\n  if (is_equal && result_accum <= power_two) {\n    accum_start = result_accum + difference;\n  }\n  if (is_equal && result_accum <= power_two) {\n    input_value_shift = input_value_shift ^ input_value;\n  }\n  if (is_equal && result_accum <= power_two) {\n    input_value = input_value ^ input_value_shift;\n  }\n  if (is_equal && result_accum <= power_two) {\n    input_value_shift = input_value_shift ^ input_value;\n  }\n  if (power_two < result_accum) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_value;\n  }\n  result_accum = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    result_accum = -result_accum;\n  }\n  result_shift = input_value_shift & 0xffffff | 0x800000;\n  if ((input_value_shift & 0x80000000) != 0) {\n    result_shift = -result_shift;\n  }\n  if (accum_start == difference) {\n    result_shift = result_shift ^ 0x800000;\n    if (accum_start == 0) {\n      result_accum = result_accum ^ 0x800000;\n      accum_start = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result_accum = result_accum + ((int)result_shift >> (difference & 0xff));\n  result_shift = result_shift << (0x20 - difference & 0xff);\n  input_value = result_accum & 0x80000000;\n  if ((int)result_accum < 0) {\n    is_equal = result_shift != 0;\n    result_shift = -result_shift;\n    result_accum = -result_accum - (uint)is_equal;\n  }\n  if (result_accum < 0x800000) {\n    input_value_shift = result_shift & 0x80000000;\n    result_shift = result_shift << 1;\n    result_accum = result_accum * 2 + (uint)(input_value_shift != 0);\n    input_value_shift = accum_start - 2;\n    if ((result_accum & 0x800000) == 0) {\n      difference = LZCOUNT(result_accum) - 8;\n      result_accum = result_accum << (difference & 0xff);\n      if ((int)input_value_shift < (int)difference) {\n        result_accum = result_accum >> (-(input_value_shift - difference) & 0xff);\n      }\n      else {\n        result_accum = result_accum + (input_value_shift - difference) * 0x800000;\n      }\n      return result_accum | input_value;\n    }\n  }\n  else {\n    input_value_shift = accum_start - 1;\n    if (0xffffff < result_accum) {\n      input_value_shift = result_accum & 1;\n      result_accum = result_accum >> 1;\n      result_shift = (uint)(input_value_shift != 0) << 0x1f | result_shift >> 1;\n      input_value_shift = accum_start;\n      if (0xfd < accum_start) goto LAB_0008186a;\n    }\n  }\n  result_accum = result_accum + input_value_shift * 0x800000 + (uint)(0x7fffffff < result_shift);\n  if (result_shift == 0x80000000) {\n    result_accum = result_accum & 0xfffffffe;\n  }\n  return result_accum | input_value;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input_value",
                "param_2": "exponent",
                "param_3": "undefined_value",
                "param_4": "power_two",
                "iVar1": "shifted_value1",
                "iVar2": "shifted_value2",
                "uVar3": "input_value_shift",
                "uVar4": "result_shift",
                "uVar5": "result_accum",
                "uVar6": "accum_start",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint result1;\n  uint result2;\n  uint tempResult1;\n  uint tempResult2;\n  bool isZero;\n  \n  result2 = value1 << 1;\n  isZero = result2 == 0;\n  if (!isZero) {\n    param4 = value2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = result2 == param4;\n  }\n  shiftedValue1 = (int)result2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedValue2 = (int)(value2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      result2 = value2;\n      if (shiftedValue1 == -1) {\n        result2 = value1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        value2 = result2;\n      }\n      isZero = (result2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (value2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result2 == value2;\n      }\n      if (!isZero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((value1 ^ value2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        value1 = value2;\n      }\n      return value1;\n    }\n    if (value1 != value2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = value1 << 1;\n      if ((value1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return value1 + 0x800000;\n    }\n    value1 = value1 & 0x80000000;\nLAB_0008186a:\n    return value1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  param4 = param4 >> 0x18;\n  tempResult2 = param4 - result2;\n  isZero = tempResult2 != 0;\n  tempResult1 = result2;\n  if (isZero && result2 <= param4) {\n    tempResult1 = result2 + tempResult2;\n  }\n  if (isZero && result2 <= param4) {\n    value2 = value2 ^ value1;\n  }\n  if (isZero && result2 <= param4) {\n    value1 = value1 ^ value2;\n  }\n  if (isZero && result2 <= param4) {\n    value2 = value2 ^ value1;\n  }\n  if (param4 < result2) {\n    tempResult2 = -tempResult2;\n  }\n  if (0x19 < tempResult2) {\n    return value1;\n  }\n  result2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = value2 & 0xffffff | 0x800000;\n  if ((value2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (tempResult1 == tempResult2) {\n    result1 = result1 ^ 0x800000;\n    if (tempResult1 == 0) {\n      result2 = result2 ^ 0x800000;\n      tempResult1 = 1;\n    }\n    else {\n      tempResult2 = tempResult2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (tempResult2 & 0xff));\n  result1 = result1 << (0x20 - tempResult2 & 0xff);\n  value1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isZero;\n  }\n  if (result2 < 0x800000) {\n    tempResult2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(tempResult2 != 0);\n    tempResult2 = tempResult1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      tempResult1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (tempResult1 & 0xff);\n      if ((int)tempResult2 < (int)tempResult1) {\n        result2 = result2 >> (-(tempResult2 - tempResult1) & 0xff);\n      }\n      else {\n        result2 = result2 + (tempResult2 - tempResult1) * 0x800000;\n      }\n      return result2 | value1;\n    }\n  }\n  else {\n    tempResult2 = tempResult1 - 1;\n    if (0xffffff < result2) {\n      tempResult2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(tempResult2 != 0) << 0x1f | result1 >> 1;\n      tempResult2 = tempResult1;\n      if (0xfd < tempResult1) goto LAB_0008186a;\n    }\n  }\n  result2 = result2 + tempResult2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | value1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "tempResult1",
                "uVar6": "tempResult2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_value_00081894",
            "code": "\nuint calculateValue_00081894(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constant;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constant + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_value_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_value_0008189c",
            "code": "\nuint calculate_value_0008189c(uint input_value)\n\n{\n  uint leading_zeroes;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zero_bits(input_value);\n  shift_amount = leading_zeroes - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes) {\n    leading_zeroes = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeroes);\n    if (leading_zeroes == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeroes + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeroes + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_value_0008189c",
                "param_1": "input_value",
                "uVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zero_bits"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint firstFloat,uint secondFloat,undefined4 undefined,uint flag)\n\n{\n  longlong result;\n  uint floatBits;\n  uint firstFloatMSB;\n  int sumMSB;\n  int adjustedSumMSB;\n  uint multipliedMSB;\n  int shiftDistance;\n  uint adjustedFloatBits;\n  bool condition1;\n  bool condition2;\n  \n  firstFloatMSB = firstFloat >> 0x17 & 0xff;\n  condition1 = firstFloatMSB == 0;\n  if (!condition1) {\n    flag = secondFloat >> 0x17 & 0xff;\n    condition1 = flag == 0;\n  }\n  if (!condition1) {\n    condition1 = firstFloatMSB == 0xff;\n  }\n  if (!condition1) {\n    condition1 = flag == 0xff;\n  }\n  if (condition1) {\n    flag = secondFloat >> 0x17 & 0xff;\n    if (firstFloatMSB == 0xff || flag == 0xff) {\n      condition1 = firstFloat == 0 || firstFloat == 0x80000000;\n      floatBits = secondFloat;\n      if (firstFloat != 0 && firstFloat != 0x80000000) {\n        condition1 = secondFloat == 0;\n        floatBits = firstFloat;\n      }\n      if (!condition1) {\n        condition1 = secondFloat == 0x80000000;\n      }\n      adjustedFloatBits = floatBits;\n      if (((condition1) || ((firstFloatMSB == 0xff && ((floatBits & 0x7fffff) != 0)))) ||\n         ((flag == 0xff && (adjustedFloatBits = secondFloat, (secondFloat & 0x7fffff) != 0)))) {\n        return adjustedFloatBits | 0x7fc00000;\n      }\n      floatBits = floatBits ^ secondFloat;\n      goto LAB_00081a94;\n    }\n    condition1 = (firstFloat & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (secondFloat & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (firstFloat ^ secondFloat) & 0x80000000;\n    }\n    condition1 = firstFloatMSB == 0;\n    floatBits = firstFloat & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        firstFloat = firstFloat << 1;\n        condition1 = (firstFloat & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      firstFloatMSB = firstFloatMSB - 1;\n    }\n    firstFloat = firstFloat | floatBits;\n    condition1 = flag == 0;\n    floatBits = secondFloat & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        secondFloat = secondFloat << 1;\n        condition1 = (secondFloat & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      flag = flag - 1;\n    }\n    secondFloat = secondFloat | floatBits;\n  }\n  sumMSB = firstFloatMSB + flag;\n  adjustedFloatBits = firstFloat ^ secondFloat;\n  firstFloatMSB = firstFloat << 9;\n  condition1 = firstFloatMSB == 0;\n  if (!condition1) {\n    secondFloat = secondFloat << 9;\n    condition1 = secondFloat == 0;\n  }\n  if (condition1) {\n    if (firstFloatMSB == 0) {\n      secondFloat = secondFloat << 9;\n    }\n    floatBits = adjustedFloatBits & 0x80000000 | firstFloat & 0x7fffff | secondFloat >> 9;\n    condition2 = SBORROW4(sumMSB,0x7f);\n    adjustedSumMSB = sumMSB + -0x7f;\n    condition1 = adjustedSumMSB == 0;\n    shiftDistance = adjustedSumMSB;\n    if (!condition1 && 0x7e < sumMSB) {\n      condition2 = SBORROW4(0xff,adjustedSumMSB);\n      shiftDistance = 0xff - adjustedSumMSB;\n      condition1 = adjustedSumMSB == 0xff;\n    }\n    if (!condition1 && shiftDistance < 0 == condition2) {\n      floatBits = floatBits | adjustedSumMSB * 0x800000;\n    }\n    if (!condition1 && shiftDistance < 0 == condition2) {\n      return floatBits;\n    }\n    floatBits = floatBits | 0x800000;\n    multipliedMSB = 0;\n    condition2 = SBORROW4(adjustedSumMSB,1);\n    adjustedFloatBits = sumMSB - 0x80;\n    condition1 = adjustedFloatBits == 0;\n    firstFloatMSB = adjustedFloatBits;\n  }\n  else {\n    result = (ulonglong)(firstFloatMSB >> 5 | 0x8000000) * (ulonglong)(secondFloat >> 5 | 0x8000000);\n    multipliedMSB = (uint)result;\n    floatBits = (uint)((ulonglong)result >> 0x20);\n    condition1 = floatBits < 0x800000;\n    if (condition1) {\n      floatBits = floatBits << 1;\n    }\n    if (condition1) {\n      floatBits = floatBits | multipliedMSB >> 0x1f;\n      multipliedMSB = multipliedMSB << 1;\n    }\n    floatBits = adjustedFloatBits & 0x80000000 | floatBits;\n    adjustedFloatBits = (sumMSB + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(adjustedFloatBits,0xfd);\n    condition1 = adjustedFloatBits == 0xfd;\n    firstFloatMSB = adjustedFloatBits - 0xfd;\n    if (adjustedFloatBits < 0xfe) {\n      floatBits = floatBits + adjustedFloatBits * 0x800000 + (uint)(0x7fffffff < multipliedMSB);\n      if (multipliedMSB == 0x80000000) {\n        floatBits = floatBits & 0xfffffffe;\n      }\n      return floatBits;\n    }\n  }\n  if (condition1 || (int)firstFloatMSB < 0 != condition2) {\n    condition1 = (int)(adjustedFloatBits + 0x19) < 0;\n    if (adjustedFloatBits == 0xffffffe7 || condition1 != SCARRY4(adjustedFloatBits,0x19)) {\n      floatBits = floatBits & 0x80000000;\n    }\n    if (adjustedFloatBits != 0xffffffe7 && condition1 == SCARRY4(adjustedFloatBits,0x19)) {\n      firstFloatMSB = (floatBits << 1) >> (-adjustedFloatBits & 0xff);\n      adjustedFloatBits = floatBits << (adjustedFloatBits + 0x20 & 0xff);\n      firstFloatMSB = ((uint)((floatBits & 0x80000000) != 0) << 0x1f | firstFloatMSB >> 1) + (uint)((byte)firstFloatMSB & 1);\n      if ((multipliedMSB | adjustedFloatBits << 1) == 0) {\n        firstFloatMSB = firstFloatMSB & ~(adjustedFloatBits >> 0x1f);\n      }\n      return firstFloatMSB;\n    }\n    return floatBits;\n  }\nLAB_00081a94:\n  return floatBits & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "firstFloat",
                "param_2": "secondFloat",
                "param_3": "undefined",
                "param_4": "flag",
                "lVar1": "result",
                "uVar2": "floatBits",
                "uVar3": "firstFloatMSB",
                "iVar4": "sumMSB",
                "iVar5": "adjustedSumMSB",
                "uVar6": "multipliedMSB",
                "iVar7": "shiftDistance",
                "uVar8": "adjustedFloatBits",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculate_integer_comparison_00081bf4",
            "code": "\nuint calculate_integer_comparison_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint multiplied_input_1;\n  uint multiplied_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  multiplied_input_1 = input_1 * 2;\n  multiplied_input_2 = input_2 * 2;\n  if (((int)multiplied_input_1 >> 0x18 == -1 || (int)multiplied_input_2 >> 0x18 == -1) &&\n     ((((int)multiplied_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)multiplied_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = multiplied_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = multiplied_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && multiplied_input_2 <= multiplied_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || multiplied_input_2 > multiplied_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculate_integer_comparison_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "multiplied_input_1",
                "uVar3": "multiplied_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_values_00081c54",
            "code": "\nvoid concatenateValues_00081c54(undefined4 dest,undefined4 src)\n\n{\n  concatenate_param_values_00081c5c(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_values_00081c54",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_param_values_00081c5c",
            "code": "\nundefined8 concatenateParamValues_00081c5c(undefined4 value1,undefined4 value2)\n\n{\n  calculate_integer_comparison_00081bf4();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_param_values_00081c5c",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_condition_00081c94",
            "code": "\nbool check_condition_00081c94(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  concatenate_param_values_00081c5c();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_condition_00081c94",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concatenation_result_00081ca8",
            "code": "\nbool checkConcatenationResult_00081ca8(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarryResult;\n  \n  concatenate_values_00081c54();\n  return !(bool)isCarryResult || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concatenation_result_00081ca8",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarryResult"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_float_00081cd0",
            "code": "\nuint convertToFloat_00081cd0(uint input)\n\n{\n  uint shiftedInput;\n  uint shiftAmount;\n  \n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedInput = (input << 1) >> 0x18;\n  shiftAmount = 0x9e - shiftedInput;\n  if (shiftedInput < 0x9f && shiftAmount != 0) {\n    shiftedInput = (input << 8 | 0x80000000) >> (shiftAmount & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shiftedInput = -shiftedInput;\n    }\n    return shiftedInput;\n  }\n  if ((shiftAmount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_float_00081cd0",
                "param_1": "input",
                "uVar1": "shiftedInput",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_parameter_00081d1c",
            "code": "\nuint checkParameter_00081d1c(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_parameter_00081d1c",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "initialize_transmission_00081d5c",
            "code": "\nundefined4 initializeTransmission_00081d5c(dword dataPacket,dword transmissionStatus,dword destinationAddress)\n\n{\n  dword *packetBuffer;\n  uint index;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  packetBuffer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    packetBuffer = (dword *)process_relocation_00081df4(400);\n    if (packetBuffer == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *packetBuffer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    packetBuffer[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)packetBuffer;\n    packetBuffer[0x62] = 0;\n    packetBuffer[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  packetBuffer[index + 0x22] = dataPacket;\n  packetBuffer[0x62] = packetBuffer[0x62] | bitMask;\n  packetBuffer[index + 0x42] = destinationAddress;\n  packetBuffer[99] = bitMask | packetBuffer[99];\n  packetBuffer[1] = index + 1;\n  packetBuffer[index + 2] = transmissionStatus;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "initialize_transmission_00081d5c",
                "param_1": "dataPacket",
                "param_2": "transmissionStatus",
                "param_3": "destinationAddress",
                "pdVar1": "packetBuffer",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_code_blocks_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeCodeBlocks_00081d7c(void)\n\n{\n  int iterationCount;\n  code **codeBlockArray;\n  \n  FUNC_00085858();\n  codeBlockArray = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    codeBlockArray = codeBlockArray + 1;\n    (**codeBlockArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_code_blocks_00081d7c",
                "ppcVar2": "codeBlockArray",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "process_relocation_00081df4",
            "code": "\nvoid processRelocation_00081df4(undefined4 input)\n\n{\n  process_relocation_00081e14(relocationArray[140].r_offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "process_relocation_00081df4",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "update_relocation_offset_00081e04",
            "code": "\nvoid update_relocation_offset_00081e04(undefined4 offset_pointer)\n\n{\n  update_relocation_info_00083d9c(relocation_info_array[140].r_offset,offset_pointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "update_relocation_offset_00081e04",
                "param_1": "offset_pointer",
                "Elf32_Rel_ARRAY_20070000": "relocation_info_array"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "process_relocation_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * processRelocation_00081e14(undefined4 *relocationBase,uint relocationSize)\n\n{\n  dword currentOffset;\n  int tempVariable1;\n  uint tempVariable2;\n  uint tempVariable3;\n  int tempVariable4;\n  uint tempVariable5;\n  dword tempOffset1;\n  uint tempVariable6;\n  int tempVariable7;\n  undefined *tempPointer1;\n  dword tempOffset2;\n  dword tempOffset3;\n  int tempVariable8;\n  dword *tempPointer2;\n  uint tempVariable9;\n  undefined *tempPointer3;\n  dword *tempPointer4;\n  uint tempVariable10;\n  \n  if (relocationSize + 0xb < 0x17) {\n    tempVariable9 = 0x10;\n    if (0x10 < relocationSize) goto LAB_00081e7a;\n  }\n  else {\n    tempVariable9 = relocationSize + 0xb & 0xfffffff8;\n    if (((int)tempVariable9 < 0) || (tempVariable9 < relocationSize)) {\nLAB_00081e7a:\n      *relocationBase = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(relocationBase);\n  currentOffset = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (tempVariable9 < 0x1f8) {\n    tempVariable8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + tempVariable9);\n    if ((tempVariable8 != tempVariable9 + 0x20070464) ||\n       (tempVariable1 = tempVariable8 + 8, tempVariable8 = *(int *)(tempVariable8 + 0x14), tempVariable1 != tempVariable8)) {\n      tempVariable4 = *(int *)(tempVariable8 + 0xc);\n      tempVariable7 = (*(uint *)(tempVariable8 + 4) & 0xfffffffc) + tempVariable8;\n      tempVariable9 = *(uint *)(tempVariable7 + 4);\n      tempVariable1 = *(int *)(tempVariable8 + 8);\n      *(int *)(tempVariable1 + 0xc) = tempVariable4;\n      *(int *)(tempVariable4 + 8) = tempVariable1;\n      *(uint *)(tempVariable7 + 4) = tempVariable9 | 1;\n      FUNC_0008259c(relocationBase);\n      return (int *)(tempVariable8 + 8);\n    }\n    tempVariable10 = (tempVariable9 >> 3) + 2;\n  }\n  else {\n    tempVariable10 = tempVariable9 >> 9;\n    if (tempVariable10 == 0) {\n      tempVariable1 = 0x7e;\n      tempVariable8 = 0x3f;\n    }\n    else if (tempVariable10 < 5) {\n      tempVariable8 = (tempVariable9 >> 6) + 0x38;\n      tempVariable1 = tempVariable8 * 2;\n    }\n    else if (tempVariable10 < 0x15) {\n      tempVariable8 = tempVariable10 + 0x5b;\n      tempVariable1 = tempVariable8 * 2;\n    }\n    else if (tempVariable10 < 0x55) {\n      tempVariable8 = (tempVariable9 >> 0xc) + 0x6e;\n      tempVariable1 = tempVariable8 * 2;\n    }\n    else if (tempVariable10 < 0x155) {\n      tempVariable8 = (tempVariable9 >> 0xf) + 0x77;\n      tempVariable1 = tempVariable8 * 2;\n    }\n    else if (tempVariable10 < 0x555) {\n      tempVariable8 = (tempVariable9 >> 0x12) + 0x7c;\n      tempVariable1 = tempVariable8 * 2;\n    }\n    else {\n      tempVariable1 = 0xfc;\n      tempVariable8 = 0x7e;\n    }\n    for (tempOffset1 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[tempVariable1]; tempVariable1 * 4 + 0x20070464U != tempOffset1\n        ; tempOffset1 = *(dword *)(tempOffset1 + 0xc)) {\n      tempVariable10 = *(uint *)(tempOffset1 + 4) & 0xfffffffc;\n      tempVariable4 = tempVariable10 - tempVariable9;\n      if (0xf < tempVariable4) {\n        tempVariable8 = tempVariable8 + -1;\n        break;\n      }\n      if (-1 < tempVariable4) {\n        tempVariable1 = tempVariable10 + tempOffset1;\n        tempVariable9 = *(uint *)(tempVariable1 + 4);\n        tempVariable4 = *(int *)(tempOffset1 + 0xc);\n        tempVariable8 = *(int *)(tempOffset1 + 8);\n        *(int *)(tempVariable8 + 0xc) = tempVariable4;\n        *(int *)(tempVariable4 + 8) = tempVariable8;\n        *(uint *)(tempVariable1 + 4) = tempVariable9 | 1;\n        FUNC_0008259c(relocationBase);\n        return (int *)(tempOffset1 + 8);\n      }\n    }\n    tempVariable10 = tempVariable8 + 1;\n  }\n  tempOffset1 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    tempVariable2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    tempVariable3 = tempVariable2 & 0xfffffffc;\n    tempVariable5 = tempVariable3 - tempVariable9;\n    if (0xf < (int)tempVariable5) {\n      tempOffset1 = tempVariable9 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = tempVariable9 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = tempOffset1;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = tempOffset1;\n      *(undefined4 *)(tempOffset1 + 0xc) = 0x2007046c;\n      *(undefined4 *)(tempOffset1 + 8) = 0x2007046c;\n      *(uint *)(tempOffset1 + 4) = tempVariable5 | 1;\n      *(uint *)(tempOffset1 + tempVariable5) = tempVariable5;\n      FUNC_0008259c(relocationBase);\n      return (int *)(currentOffset + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)tempVariable5) {\n      *(uint *)(tempVariable3 + currentOffset + 4) = *(uint *)(tempVariable3 + currentOffset + 4) | 1;\n      FUNC_0008259c(relocationBase);\n      return (int *)(currentOffset + 8);\n    }\n    if (tempVariable3 < 0x200) {\n      tempVariable3 = tempVariable2 & 0xfffffff8;\n      tempVariable8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + tempVariable3);\n      tempOffset1 = 1 << ((int)(tempVariable2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(currentOffset + 8) = tempVariable8;\n      *(uint *)(currentOffset + 0xc) = tempVariable3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = tempOffset1;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + tempVariable3) = currentOffset;\n      *(dword *)(tempVariable8 + 0xc) = currentOffset;\n    }\n    else {\n      tempVariable5 = tempVariable2 >> 9;\n      if (tempVariable5 < 5) {\n        tempVariable1 = (tempVariable2 >> 6) + 0x38;\n        tempVariable8 = tempVariable1 * 2;\n      }\n      else if (tempVariable5 < 0x15) {\n        tempVariable1 = tempVariable5 + 0x5b;\n        tempVariable8 = tempVariable1 * 2;\n      }\n      else if (tempVariable5 < 0x55) {\n        tempVariable1 = (tempVariable2 >> 0xc) + 0x6e;\n        tempVariable8 = tempVariable1 * 2;\n      }\n      else if (tempVariable5 < 0x155) {\n        tempVariable1 = (tempVariable2 >> 0xf) + 0x77;\n        tempVariable8 = tempVariable1 * 2;\n      }\n      else if (tempVariable5 < 0x555) {\n        tempVariable1 = (tempVariable2 >> 0x12) + 0x7c;\n        tempVariable8 = tempVariable1 * 2;\n      }\n      else {\n        tempVariable8 = 0xfc;\n        tempVariable1 = 0x7e;\n      }\n      tempOffset1 = tempVariable8 * 4 + 0x20070464;\n      tempOffset2 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tempVariable8];\n      if (tempOffset2 == tempOffset1) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (tempVariable1 >> 2 & 0xffU);\n        tempOffset3 = tempOffset2;\n      }\n      else {\n        do {\n          tempOffset3 = tempOffset2;\n          if ((*(uint *)(tempOffset2 + 4) & 0xfffffffc) <= tempVariable3) break;\n          tempOffset2 = *(dword *)(tempOffset2 + 8);\n          tempOffset3 = tempOffset2;\n        } while (tempOffset1 != tempOffset2);\n        tempOffset2 = *(dword *)(tempOffset3 + 0xc);\n      }\n      tempOffset1 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(currentOffset + 0xc) = tempOffset2;\n      *(dword *)(currentOffset + 8) = tempOffset3;\n      *(dword *)(tempOffset2 + 8) = currentOffset;\n      *(dword *)(tempOffset3 + 0xc) = currentOffset;\n    }\n  }\n  currentOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  tempVariable2 = 1 << ((int)tempVariable10 >> 2 & 0xffU);\n  if (tempVariable2 <= tempOffset1) {\n    if ((tempOffset1 & tempVariable2) == 0) {\n      tempVariable10 = tempVariable10 & 0xfffffffc;\n      do {\n        tempVariable2 = tempVariable2 << 1;\n        tempVariable10 = tempVariable10 + 4;\n      } while ((tempOffset1 & tempVariable2) == 0);\n    }\n    do {\n      tempPointer4 = &Elf32_Rel_ARRAY_20070000[tempVariable10 + 0x8c].r_info;\n      tempPointer2 = tempPointer4;\n      tempVariable3 = tempVariable10;\n      do {\n        for (tempPointer1 = (undefined *)tempPointer2[3]; tempPointer2 != (dword *)tempPointer1;\n            tempPointer1 = *(undefined **)(tempPointer1 + 0xc)) {\n          tempVariable5 = *(uint *)(tempPointer1 + 4) & 0xfffffffc;\n          tempVariable6 = tempVariable5 - tempVariable9;\n          if (0xf < (int)tempVariable6) {\n            tempVariable1 = *(int *)(tempPointer1 + 8);\n            tempVariable8 = *(int *)(tempPointer1 + 0xc);\n            tempPointer3 = tempPointer1 + tempVariable9;\n            *(uint *)(tempPointer1 + 4) = tempVariable9 | 1;\n            *(int *)(tempVariable1 + 0xc) = tempVariable8;\n            *(int *)(tempVariable8 + 8) = tempVariable1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)tempPointer3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)tempPointer3;\n            *(undefined4 *)(tempPointer3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(tempPointer3 + 8) = 0x2007046c;\n            *(uint *)(tempPointer3 + 4) = tempVariable6 | 1;\n            *(uint *)(tempPointer3 + tempVariable6) = tempVariable6;\n            FUNC_0008259c(relocationBase);\n            return (int *)(tempPointer1 + 8);\n          }\n          if (-1 < (int)tempVariable6) {\n            tempVariable8 = *(int *)(tempPointer1 + 8);\n            tempVariable1 = *(int *)(tempPointer1 + 0xc);\n            *(uint *)(tempPointer1 + tempVariable5 + 4) = *(uint *)(tempPointer1 + tempVariable5 + 4) | 1;\n            *(int *)(tempVariable8 + 0xc) = tempVariable1;\n            *(int *)(tempVariable1 + 8) = tempVariable8;\n            FUNC_0008259c(relocationBase);\n            return (int *)(tempPointer1 + 8);\n          }\n        }\n        tempVariable3 = tempVariable3 + 1;\n        tempPointer2 = tempPointer2 + 2;\n      } while ((tempVariable3 & 3) != 0);\n      do {\n        tempVariable5 = tempVariable10 & 3;\n        tempPointer1 = (undefined *)(tempPointer4 + -2);\n        tempVariable10 = tempVariable10 - 1;\n        if (tempVariable5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~tempVariable2;\n          break;\n        }\n        tempPointer4 = (dword *)*tempPointer4;\n      } while (tempPointer4 == (dword *)tempPointer1);\n      tempVariable2 = tempVariable2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= tempVariable2 &&\n           tempVariable2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (tempVariable10 = tempVariable3, tempVariable2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & tempVariable2) == 0; tempVariable2 = tempVariable2 << 1) {\n        tempVariable10 = tempVariable10 + 4;\n      }\n    } while( true );\n  }\n  tempVariable10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((tempVariable9 <= tempVariable10) &&\n     (tempVariable2 = tempVariable10 - tempVariable9, tempOffset1 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)tempVariable2))\n  goto LAB_0008211e;\n  tempVariable2 = Elf32_Rel_ARRAY_20070000[141].r_info + tempVariable10;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    tempVariable3 = tempVariable9 + DAT_20071190 + 0x10;\n  }\n  else {\n    tempVariable3 = tempVariable9 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  tempOffset1 = update_value_00082970(relocationBase,tempVariable3);\n  if ((tempOffset1 == 0xffffffff) || ((tempOffset1 < tempVariable2 && (currentOffset != 0x20070464)))) {\n    tempVariable10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    tempOffset1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    tempVariable5 = DAT_20071194 + tempVariable3;\n    DAT_20071194 = tempVariable5;\n    if ((tempVariable2 == tempOffset1) && ((tempVariable2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = tempVariable3 + tempVariable10 | 1;\n    }\n    else {\n      tempOffset2 = tempOffset1;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        tempOffset2 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = tempVariable5 + (tempOffset1 - tempVariable2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = tempOffset2;\n      tempVariable2 = tempOffset1 & 7;\n      if (tempVariable2 == 0) {\n        tempVariable8 = 0x1000;\n      }\n      else {\n        tempOffset1 = tempOffset1 + (8 - tempVariable2);\n        tempVariable8 = 0x1008 - tempVariable2;\n      }\n      tempVariable8 = tempVariable8 - (tempVariable3 + tempOffset1 & 0xfff);\n      tempVariable1 = update_value_00082970(relocationBase,tempVariable8);\n      if (tempVariable1 == -1) {\n        tempVariable2 = 1;\n        tempVariable8 = 0;\n      }\n      else {\n        tempVariable2 = (tempVariable1 - tempOffset1) + tempVariable8 | 1;\n      }\n      tempVariable5 = DAT_20071194 + tempVariable8;\n      Elf32_Rel_ARRAY_20070000[141].r_info = tempOffset1;\n      DAT_20071194 = tempVariable5;\n      *(uint *)(tempOffset1 + 4) = tempVariable2;\n      if (currentOffset != 0x20070464) {\n        if (tempVariable10 < 0x10) {\n          *(undefined4 *)(tempOffset1 + 4) = 1;\n          tempVariable10 = 0;\n          goto LAB_00082108;\n        }\n        tempVariable10 = tempVariable10 - 0xc & 0xfffffff8;\n        *(uint *)(currentOffset + 4) = tempVariable10 | *(uint *)(currentOffset + 4) & 1;\n        *(undefined4 *)(currentOffset + tempVariable10 + 4) = 5;\n        *(undefined4 *)(currentOffset + tempVariable10 + 8) = 5;\n        if (0xf < tempVariable10) {\n          update_relocation_info_00083d9c(relocationBase,currentOffset + 8);\n          tempVariable5 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < tempVariable5) {\n      DAT_2007118c = tempVariable5;\n    }\n    if (DAT_20071188 < tempVariable5) {\n      DAT_20071188 = tempVariable5;\n    }\n    tempVariable10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    tempOffset1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  tempVariable2 = tempVariable10 - tempVariable9;\n  if ((tempVariable10 < tempVariable9) || ((int)tempVariable2 < 0x10)) {\n    FUNC_0008259c(relocationBase);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = tempVariable9 + tempOffset1;\n  *(uint *)(tempOffset1 + 4) = tempVariable9 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = tempVariable2 | 1;\n  FUNC_0008259c(relocationBase);\n  return (int *)(tempOffset1 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "process_relocation_00081e14",
                "param_1": "relocationBase",
                "param_2": "relocationSize",
                "dVar1": "currentOffset",
                "iVar2": "tempVariable1",
                "uVar3": "tempVariable2",
                "uVar4": "tempVariable3",
                "iVar5": "tempVariable4",
                "uVar6": "tempVariable5",
                "dVar7": "tempOffset1",
                "uVar8": "tempVariable6",
                "iVar9": "tempVariable7",
                "puVar10": "tempPointer1",
                "dVar11": "tempOffset2",
                "dVar12": "tempOffset3",
                "iVar13": "tempVariable8",
                "pdVar14": "tempPointer2",
                "uVar15": "tempVariable9",
                "puVar16": "tempPointer3",
                "pdVar17": "tempPointer4",
                "uVar18": "tempVariable10"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destHead;\n  undefined4 *srcPtr;\n  uint remainingLength;\n  uint copyLength;\n  bool continueCopying;\n  \n  destHead = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copyLength = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcPtr = destHead;\n          continueCopying = copyLength != 0;\n          copyLength = copyLength - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destHead = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (continueCopying);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copyLength = 4 - ((uint)destination & 3);\n      length = length - copyLength;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destHead = destPtr;\n      source = srcPtr;\n      if ((copyLength & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destHead = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destHead = *source;\n    destHead[1] = source[1];\n    destHead[2] = source[2];\n    destHead[3] = source[3];\n    destHead[4] = source[4];\n    destHead[5] = source[5];\n    destHead[6] = source[6];\n    destHead[7] = source[7];\n    destHead[8] = source[8];\n    destHead[9] = source[9];\n    destHead[10] = source[10];\n    destHead[0xb] = source[0xb];\n    destHead[0xc] = source[0xc];\n    destHead[0xd] = source[0xd];\n    destHead[0xe] = source[0xe];\n    destHead[0xf] = source[0xf];\n    destHead = destHead + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destHead = *source;\n      destHead[1] = source[1];\n      destHead[2] = source[2];\n      destHead[3] = source[3];\n      destHead = destHead + 4;\n      source = source + 4;\n      continueCopying = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (continueCopying);\n  }\n  copyLength = remainingLength + 0xc;\n  srcPtr = destHead;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      continueCopying = 3 < copyLength;\n      copyLength = copyLength - 4;\n      destHead = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (continueCopying);\n  }\nLAB_000823d0:\n  if (copyLength + 4 != 0) {\n    destPtr = destHead;\n    srcPtr = source;\n    if ((copyLength & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destHead + 1);\n      *(undefined *)destHead = *(undefined *)source;\n    }\n    if ((copyLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destHead",
                "puVar3": "srcPtr",
                "uVar4": "remainingLength",
                "uVar5": "copyLength",
                "bVar6": "continueCopying"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int count;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *srcEnd;\n  uint temp;\n  undefined *destEnd;\n  uint remainder;\n  \n  if ((src < dest) && (srcEnd = (undefined4 *)((int)src + size), dest < srcEnd)) {\n    destEnd = (undefined *)((int)dest + size);\n    count = size - 1;\n    if (size != 0) {\n      do {\n        srcEnd = (undefined4 *)((int)srcEnd + -1);\n        count = count + -1;\n        destEnd = destEnd + -1;\n        *destEnd = *(undefined *)srcEnd;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    srcEnd = dest;\n    srcPtr = src;\n    do {\n      destPtr = srcEnd + 4;\n      *srcEnd = *srcPtr;\n      srcEnd[1] = srcPtr[1];\n      srcEnd[2] = srcPtr[2];\n      srcEnd[3] = srcPtr[3];\n      srcEnd = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    count = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + count * 4;\n    dest = dest + count * 4;\n    temp = remainder;\n    srcEnd = dest;\n    srcPtr = src;\n    if (3 < remainder) {\n      do {\n        temp = temp - 4;\n        *srcEnd = *srcPtr;\n        srcEnd = srcEnd + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < temp);\n      count = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + count);\n      src = (undefined4 *)((int)src + count);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  srcEnd = dest;\n  do {\n    srcPtr = (undefined4 *)((int)srcEnd + 1);\n    *(undefined *)srcEnd = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    srcEnd = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "count",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "srcEnd",
                "uVar5": "temp",
                "puVar6": "destEnd",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_with_byte_00082504",
            "code": "\nvoid fillMemoryWithByte_00082504(undefined4 *data,undefined byte,uint length)\n\n{\n  undefined4 *ptr;\n  undefined4 *ptr2;\n  undefined4 pattern;\n  uint remainingLength;\n  bool isLengthZero;\n  \n  if (((uint)data & 3) != 0) {\n    isLengthZero = length == 0;\n    ptr = data;\n    length = length - 1;\n    if (isLengthZero) {\n      return;\n    }\n    while( true ) {\n      data = (undefined4 *)((int)ptr + 1);\n      *(undefined *)ptr = byte;\n      if (((uint)data & 3) == 0) break;\n      isLengthZero = length == 0;\n      ptr = data;\n      length = length - 1;\n      if (isLengthZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    pattern = CONCAT22(CONCAT11(byte,byte),CONCAT11(byte,byte));\n    remainingLength = length;\n    ptr = data;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      do {\n        *ptr = pattern;\n        ptr[1] = pattern;\n        ptr[2] = pattern;\n        ptr[3] = pattern;\n        ptr = ptr + 4;\n      } while (ptr != (undefined4 *)((int)data + (remainingLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      data = data + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      ptr = data;\n      if (length < 4) goto LAB_00082580;\n    }\n    do {\n      length = length - 4;\n      *data = pattern;\n      data = data + 1;\n    } while (3 < length);\n    data = (undefined4 *)((int)ptr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_00082580:\n  if (length != 0) {\n    ptr = data;\n    do {\n      ptr2 = (undefined4 *)((int)ptr + 1);\n      *(undefined *)ptr = byte;\n      ptr = ptr2;\n    } while (ptr2 != (undefined4 *)(length + (int)data));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "param_1": "data",
                "param_2": "byte",
                "param_3": "length",
                "puVar1": "ptr",
                "puVar2": "ptr2",
                "uVar3": "pattern",
                "uVar4": "remainingLength",
                "bVar5": "isLengthZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "relocate_memory_allocation_000825a0",
            "code": "\nvoid relocateMemoryAllocation_000825a0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  relocated_memory_allocation_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,inputParam1,inputParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "relocate_memory_allocation_000825a0",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "relocated_memory_allocation_000825b0",
            "code": "\nint * relocatedMemoryAllocation_000825b0(undefined4 *relocationBase,int *oldMemoryAllocation,uint size)\n\n{\n  dword relocationOffset;\n  int *newMemoryAllocation;\n  uint relocatedSize;\n  int tempVar1;\n  uint tempVar2;\n  int tempVar3;\n  int *tempVar4;\n  uint adjustedSize;\n  uint alignedSize;\n  int *tempVar5;\n  \n  if (oldMemoryAllocation == (int *)0x0) {\n    newMemoryAllocation = (int *)process_relocation_00081e14(relocationBase,size);\n    return newMemoryAllocation;\n  }\n  FUNC_00082598();\n  tempVar2 = oldMemoryAllocation[-1];\n  adjustedSize = tempVar2 & 0xfffffffc;\n  newMemoryAllocation = oldMemoryAllocation + -2;\n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto LAB_0008267c;\n  }\n  if (alignedSize < size) {\nLAB_0008267c:\n    *relocationBase = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjustedSize < (int)alignedSize) {\n    relocationOffset = (int)newMemoryAllocation + adjustedSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == relocationOffset) {\n      relocatedSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      relocationOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(alignedSize + 0x10) <= (int)(relocatedSize + adjustedSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemoryAllocation + alignedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (relocatedSize + adjustedSize) - alignedSize | 1;\n        oldMemoryAllocation[-1] = alignedSize | oldMemoryAllocation[-1] & 1U;\n        FUNC_0008259c(relocationBase);\n        return oldMemoryAllocation;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(relocationOffset + 4) & 0xfffffffe) + relocationOffset + 4) & 1) == 0) {\n      relocatedSize = *(uint *)(relocationOffset + 4) & 0xfffffffc;\n      if ((int)alignedSize <= (int)(relocatedSize + adjustedSize)) {\n        tempVar3 = *(int *)(relocationOffset + 0xc);\n        tempVar1 = *(int *)(relocationOffset + 8);\n        *(int *)(tempVar1 + 0xc) = tempVar3;\n        *(int *)(tempVar3 + 8) = tempVar1;\n        adjustedSize = relocatedSize + adjustedSize;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      relocatedSize = 0;\n      relocationOffset = 0;\n    }\n    if (-1 < (int)(tempVar2 << 0x1f)) {\n      tempVar5 = (int *)((int)newMemoryAllocation - oldMemoryAllocation[-2]);\n      tempVar2 = (tempVar5[1] & 0xfffffffcU) + adjustedSize;\n      if (relocationOffset != 0) {\n        if (relocationOffset == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(alignedSize + 0x10) <= (int)(relocatedSize + tempVar2)) {\n            newMemoryAllocation = tempVar5 + 2;\n            tempVar1 = *newMemoryAllocation;\n            tempVar3 = tempVar5[3];\n            adjustedSize = adjustedSize - 4;\n            *(int *)(tempVar1 + 0xc) = tempVar3;\n            *(int *)(tempVar3 + 8) = tempVar1;\n            if (adjustedSize < 0x25) {\n              tempVar4 = newMemoryAllocation;\n              if (0x13 < adjustedSize) {\n                tempVar5[2] = *oldMemoryAllocation;\n                tempVar5[3] = oldMemoryAllocation[1];\n                if (adjustedSize < 0x1c) {\n                  oldMemoryAllocation = oldMemoryAllocation + 2;\n                  tempVar4 = tempVar5 + 4;\n                }\n                else {\n                  tempVar5[4] = oldMemoryAllocation[2];\n                  tempVar5[5] = oldMemoryAllocation[3];\n                  if (adjustedSize == 0x24) {\n                    tempVar5[6] = oldMemoryAllocation[4];\n                    tempVar4 = oldMemoryAllocation + 5;\n                    oldMemoryAllocation = oldMemoryAllocation + 6;\n                    tempVar5[7] = *tempVar4;\n                    tempVar4 = tempVar5 + 8;\n                  }\n                  else {\n                    oldMemoryAllocation = oldMemoryAllocation + 4;\n                    tempVar4 = tempVar5 + 6;\n                  }\n                }\n              }\n              *tempVar4 = *oldMemoryAllocation;\n              tempVar4[1] = oldMemoryAllocation[1];\n              tempVar4[2] = oldMemoryAllocation[2];\n            }\n            else {\n              copy_memory_00082438(newMemoryAllocation,oldMemoryAllocation);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)tempVar5 + alignedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (relocatedSize + tempVar2) - alignedSize | 1;\n            tempVar5[1] = alignedSize | tempVar5[1] & 1U;\n            FUNC_0008259c(relocationBase);\n            return newMemoryAllocation;\n          }\n        }\n        else {\n          relocatedSize = relocatedSize + tempVar2;\n          if ((int)alignedSize <= (int)relocatedSize) {\n            tempVar3 = *(int *)(relocationOffset + 0xc);\n            tempVar1 = *(int *)(relocationOffset + 8);\n            *(int *)(tempVar1 + 0xc) = tempVar3;\n            *(int *)(tempVar3 + 8) = tempVar1;\n            tempVar4 = tempVar5 + 2;\n            tempVar1 = *tempVar4;\n            tempVar3 = tempVar5[3];\n            tempVar2 = adjustedSize - 4;\n            *(int *)(tempVar1 + 0xc) = tempVar3;\n            *(int *)(tempVar3 + 8) = tempVar1;\n            adjustedSize = relocatedSize;\n            if (tempVar2 < 0x25) {\n              newMemoryAllocation = tempVar4;\n              if (0x13 < tempVar2) {\n                tempVar5[2] = *oldMemoryAllocation;\n                tempVar5[3] = oldMemoryAllocation[1];\n                if (tempVar2 < 0x1c) {\n                  oldMemoryAllocation = oldMemoryAllocation + 2;\n                  newMemoryAllocation = tempVar5 + 4;\n                }\n                else {\n                  tempVar5[4] = oldMemoryAllocation[2];\n                  tempVar5[5] = oldMemoryAllocation[3];\n                  if (tempVar2 == 0x24) {\n                    tempVar5[6] = oldMemoryAllocation[4];\n                    newMemoryAllocation = oldMemoryAllocation + 5;\n                    oldMemoryAllocation = oldMemoryAllocation + 6;\n                    tempVar5[7] = *newMemoryAllocation;\n                    newMemoryAllocation = tempVar5 + 8;\n                  }\n                  else {\n                    oldMemoryAllocation = oldMemoryAllocation + 4;\n                    newMemoryAllocation = tempVar5 + 6;\n                  }\n                }\n              }\n              *newMemoryAllocation = *oldMemoryAllocation;\n              newMemoryAllocation[1] = oldMemoryAllocation[1];\n              newMemoryAllocation[2] = oldMemoryAllocation[2];\n              tempVar2 = tempVar5[1];\n              newMemoryAllocation = tempVar5;\n              oldMemoryAllocation = tempVar4;\n            }\n            else {\n              copy_memory_00082438(tempVar4,oldMemoryAllocation);\n              tempVar2 = tempVar5[1];\n              newMemoryAllocation = tempVar5;\n              oldMemoryAllocation = tempVar4;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)alignedSize <= (int)tempVar2) {\n        tempVar4 = tempVar5 + 2;\n        tempVar1 = *tempVar4;\n        tempVar3 = tempVar5[3];\n        relocatedSize = adjustedSize - 4;\n        *(int *)(tempVar1 + 0xc) = tempVar3;\n        *(int *)(tempVar3 + 8) = tempVar1;\n        adjustedSize = tempVar2;\n        if (relocatedSize < 0x25) {\n          newMemoryAllocation = tempVar4;\n          if (0x13 < relocatedSize) {\n            tempVar5[2] = *oldMemoryAllocation;\n            tempVar5[3] = oldMemoryAllocation[1];\n            if (relocatedSize < 0x1c) {\n              oldMemoryAllocation = oldMemoryAllocation + 2;\n              newMemoryAllocation = tempVar5 + 4;\n            }\n            else {\n              tempVar5[4] = oldMemoryAllocation[2];\n              tempVar5[5] = oldMemoryAllocation[3];\n              if (relocatedSize == 0x24) {\n                tempVar5[6] = oldMemoryAllocation[4];\n                newMemoryAllocation = oldMemoryAllocation + 5;\n                oldMemoryAllocation = oldMemoryAllocation + 6;\n                tempVar5[7] = *newMemoryAllocation;\n                newMemoryAllocation = tempVar5 + 8;\n              }\n              else {\n                oldMemoryAllocation = oldMemoryAllocation + 4;\n                newMemoryAllocation = tempVar5 + 6;\n              }\n            }\n          }\n          *newMemoryAllocation = *oldMemoryAllocation;\n          newMemoryAllocation[1] = oldMemoryAllocation[1];\n          newMemoryAllocation[2] = oldMemoryAllocation[2];\n          tempVar2 = tempVar5[1];\n          newMemoryAllocation = tempVar5;\n          oldMemoryAllocation = tempVar4;\n        }\n        else {\n          copy_memory_00082438(tempVar4,oldMemoryAllocation);\n          tempVar2 = tempVar5[1];\n          newMemoryAllocation = tempVar5;\n          oldMemoryAllocation = tempVar4;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    tempVar5 = (int *)process_relocation_00081e14(relocationBase,size);\n    if (tempVar5 == (int *)0x0) goto LAB_000826a4;\n    tempVar2 = oldMemoryAllocation[-1];\n    if (tempVar5 + -2 != (int *)((tempVar2 & 0xfffffffe) + (int)newMemoryAllocation)) {\n      adjustedSize = adjustedSize - 4;\n      if (adjustedSize < 0x25) {\n        newMemoryAllocation = oldMemoryAllocation;\n        tempVar4 = tempVar5;\n        if (0x13 < adjustedSize) {\n          *tempVar5 = *oldMemoryAllocation;\n          tempVar5[1] = oldMemoryAllocation[1];\n          if (adjustedSize < 0x1c) {\n            newMemoryAllocation = oldMemoryAllocation + 2;\n            tempVar4 = tempVar5 + 2;\n          }\n          else {\n            tempVar5[2] = oldMemoryAllocation[2];\n            tempVar5[3] = oldMemoryAllocation[3];\n            if (adjustedSize == 0x24) {\n              tempVar5[4] = oldMemoryAllocation[4];\n              tempVar5[5] = oldMemoryAllocation[5];\n              newMemoryAllocation = oldMemoryAllocation + 6;\n              tempVar4 = tempVar5 + 6;\n            }\n            else {\n              newMemoryAllocation = oldMemoryAllocation + 4;\n              tempVar4 = tempVar5 + 4;\n            }\n          }\n        }\n        *tempVar4 = *newMemoryAllocation;\n        tempVar4[1] = newMemoryAllocation[1];\n        tempVar4[2] = newMemoryAllocation[2];\n      }\n      else {\n        copy_memory_00082438(tempVar5,oldMemoryAllocation);\n      }\n      update_relocation_info_00083d9c(relocationBase,oldMemoryAllocation);\n      goto LAB_000826a4;\n    }\n    adjustedSize = adjustedSize + (tempVar5[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  relocatedSize = adjustedSize - alignedSize;\n  tempVar5 = oldMemoryAllocation;\n  if (relocatedSize < 0x10) {\n    newMemoryAllocation[1] = tempVar2 & 1 | adjustedSize;\n    *(uint *)((int)newMemoryAllocation + adjustedSize + 4) = *(uint *)((int)newMemoryAllocation + adjustedSize + 4) | 1;\n  }\n  else {\n    newMemoryAllocation[1] = tempVar2 & 1 | alignedSize;\n    *(uint *)((int)newMemoryAllocation + alignedSize + 4) = relocatedSize | 1;\n    *(uint *)((int)newMemoryAllocation + relocatedSize + alignedSize + 4) = *(uint *)((int)newMemoryAllocation + relocatedSize + alignedSize + 4) | 1;\n    update_relocation_info_00083d9c(relocationBase,(int)newMemoryAllocation + alignedSize + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(relocationBase);\n  return tempVar5;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "relocated_memory_allocation_000825b0",
                "param_1": "relocationBase",
                "param_2": "oldMemoryAllocation",
                "param_3": "size",
                "dVar1": "relocationOffset",
                "piVar2": "newMemoryAllocation",
                "uVar3": "relocatedSize",
                "iVar4": "tempVar1",
                "uVar5": "tempVar2",
                "iVar6": "tempVar3",
                "piVar7": "tempVar4",
                "uVar8": "adjustedSize",
                "uVar9": "alignedSize",
                "piVar10": "tempVar5"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "update_value_00082970",
            "code": "\nvoid updateValue_00082970(int *output,undefined4 input)\n\n{\n  int updatedValue;\n  \n  DAT_200711bc = 0;\n  updatedValue = calculate_updated_value_0008118c(input);\n  if ((updatedValue == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "update_value_00082970",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "updatedValue"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *destination,uint *source)\n\n{\n  char currentCharacter;\n  ushort currentCharacterShort;\n  uint *nextSource;\n  uint *nextSourceChar;\n  uint currentSourceValue;\n  uint currentSourceByte;\n  uint *nextDestination;\n  bool isShortFlag;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentCharacter = *(char *)source;\n      *(char *)destination = currentCharacter;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentCharacter != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextSourceChar = source;\n    if (((uint)source & 1) != 0) {\n      nextSourceChar = (uint *)((int)source + 1);\n      currentCharacter = *(char *)source;\n      *(char *)destination = currentCharacter;\n      destination = (uint *)((int)destination + 1);\n      if (currentCharacter == '\\0') {\n        return;\n      }\n    }\n    source = nextSourceChar;\n    if (((uint)nextSourceChar & 2) != 0) {\n      source = (uint *)((int)nextSourceChar + 2);\n      currentCharacterShort = *(ushort *)nextSourceChar;\n      isShortFlag = (currentCharacterShort & 0xff) == 0;\n      if (isShortFlag) {\n        *(char *)destination = (char)currentCharacterShort;\n      }\n      else {\n        *(ushort *)destination = currentCharacterShort;\n        isShortFlag = (currentCharacterShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isShortFlag) {\n        return;\n      }\n    }\n  }\n  currentSourceValue = *source;\n  nextSourceChar = source + 1;\n  nextDestination = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentSourceValue + 0xfefefeff & ~currentSourceValue & 0x80808080) != 0) goto LAB_000829f8;\n    nextDestination = destination + 1;\n    *destination = currentSourceValue;\n    nextSourceChar = source + 2;\n    currentSourceValue = source[1];\n  }\n  while( true ) {\n    nextSource = nextSourceChar + 1;\n    currentSourceByte = *nextSourceChar;\n    destination = nextDestination;\n    if ((currentSourceValue + 0xfefefeff & ~currentSourceValue & 0x80808080) != 0) break;\n    destination = nextDestination + 1;\n    *nextDestination = currentSourceValue;\n    currentSourceValue = currentSourceByte;\n    if ((currentSourceByte + 0xfefefeff & ~currentSourceByte & 0x80808080) != 0) break;\n    nextSourceChar = nextSourceChar + 2;\n    currentSourceValue = *nextSource;\n    nextDestination = nextDestination + 2;\n    *destination = currentSourceByte;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentSourceValue;\n    currentSourceByte = currentSourceValue & 0xff;\n    currentSourceValue = currentSourceValue >> 8 | currentSourceValue << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentSourceByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentCharacter",
                "uVar2": "currentCharacterShort",
                "puVar3": "nextSource",
                "puVar4": "nextSourceChar",
                "uVar5": "currentSourceValue",
                "uVar6": "currentSourceByte",
                "puVar7": "nextDestination",
                "bVar8": "isShortFlag"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 data,int size,int **dataPtr)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr2;\n  uint count1;\n  undefined4 *ptr3;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = process_data_00083f34();\n    dataPtr[2] = (int *)0x0;\n    dataPtr[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = dataPtr[2];\n  ptr1 = *dataPtr;\n  while (ptr2 != (int *)0x0) {\n    value1 = ptr1[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      count1 = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = process_data_00083c40(data,*ptr3,size);\n        count1 = count1 + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != count1);\n      ptr2 = dataPtr[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value1 & 0xfffffffc));\n    dataPtr[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  dataPtr[2] = (int *)0x0;\n  dataPtr[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "dataPtr",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr2",
                "uVar4": "count1",
                "puVar5": "ptr3",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = process_relocation_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_and_check_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_char_in_array_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          check_input_and_get_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = check_input_and_get_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_and_check_data_0008378c",
            "code": "\nint process_and_check_data_0008378c(undefined4 status,int data_ptr)\n\n{\n  int result;\n  int processing_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort flags;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_length;\n  undefined4 counter;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined stack_data [1024];\n  \n  value_3 = *(undefined4 *)(data_ptr + 100);\n  value_1 = *(undefined4 *)(data_ptr + 0x1c);\n  value = *(undefined2 *)(data_ptr + 0xe);\n  value_2 = *(undefined4 *)(data_ptr + 0x24);\n  buffer_array[0] = stack_data;\n  flags = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_length = 0x400;\n  counter = 0;\n  buffer = buffer_array[0];\n  result = FUNC_00082b38(status,buffer_array);\n  if ((-1 < result) && (processing_result = process_data_00083adc(status,buffer_array), processing_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flags << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_and_check_data_0008378c",
                "param_1": "status",
                "param_2": "data_ptr",
                "iVar1": "result",
                "iVar2": "processing_result",
                "local_488": "buffer_array",
                "local_480": "buffer_size",
                "local_47c": "flags",
                "local_47a": "value",
                "local_478": "buffer",
                "local_474": "buffer_length",
                "local_470": "counter",
                "local_46c": "value_1",
                "local_464": "value_2",
                "local_424": "value_3",
                "auStack_420": "stack_data"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_relocation_00083808",
            "code": "\nundefined4 process_relocation_00083808(undefined4 *result,int *data)\n\n{\n  int auxiliaryVar1;\n  int auxiliaryVar2;\n  uint mask;\n  ushort value;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initializeDataStructures();\n  }\n  value = *(ushort *)(data + 3);\n  mask = (uint)value;\n  if ((int)(mask << 0x1c) < 0) {\n    auxiliaryVar2 = data[4];\n  }\n  else {\n    if (-1 < (int)(mask << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = value | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(mask << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          updateRelocationInfo(result);\n          value = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      auxiliaryVar2 = data[4];\n      value = value & 0xffdb;\n      *data = auxiliaryVar2;\n      data[1] = 0;\n    }\n    else {\n      auxiliaryVar2 = data[4];\n    }\n    *(ushort *)(data + 3) = value | 8;\n    mask = (uint)(value | 8);\n  }\n  if ((auxiliaryVar2 == 0) && ((mask & 0x280) != 0x200)) {\n    initializeMemoryAndProcessRelocation(result,data);\n    mask = (uint)*(ushort *)(data + 3);\n    auxiliaryVar2 = data[4];\n  }\n  if ((mask & 1) == 0) {\n    auxiliaryVar1 = 0;\n    if (-1 < (int)(mask << 0x1e)) {\n      auxiliaryVar1 = data[5];\n    }\n    data[2] = auxiliaryVar1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((auxiliaryVar2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_relocation_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "auxiliaryVar1",
                "iVar2": "auxiliaryVar2",
                "uVar3": "mask",
                "uVar4": "value",
                "initialize_data_structures_00083b14": "initializeDataStructures",
                "update_relocation_info_00083d9c": "updateRelocationInfo",
                "initialize_memory_and_process_relocation_000842a4": "initializeMemoryAndProcessRelocation"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "copy_return_value_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 copyReturnValue_00083974(undefined4 inputValue)\n\n{\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00083974": "copy_return_value_00083974",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *data,int *info)\n\n{\n  int *pointer;\n  int value;\n  ushort flags;\n  uint temp;\n  int length;\n  code *functionPtr;\n  undefined4 result;\n  int temp2;\n  \n  if ((data != (int *)0x0) && (data[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(info + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(info + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp2 = info[4];\n    if (temp2 == 0) {\n      return 0;\n    }\n    value = *info;\n    if ((flags & 3) == 0) {\n      length = info[5];\n    }\n    else {\n      length = 0;\n    }\n    *info = temp2;\n    value = value - temp2;\n    info[2] = length;\n    do {\n      if (value < 1) {\n        return 0;\n      }\n      length = (*(code *)info[9])(data,info[7],temp2,value,result);\n      value = value - length;\n      temp2 = temp2 + length;\n    } while (0 < length);\nLAB_00083a54:\n    *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info + 3) = flags | 0x800;\n  if ((info[1] < 1) && (info[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)info[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp2 = *data;\n  *data = 0;\n  if ((flags & 0x1000) == 0) {\n    value = (*functionPtr)(data,info[7],temp & 0x1000,1);\n    if ((value == -1) && (length = *data, length != 0)) {\n      if ((length == 0x1d) || (length == 0x16)) {\n        *data = temp2;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(info + 3);\n    functionPtr = (code *)info[10];\n  }\n  else {\n    value = info[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (value = value - info[1], info[0xc] != 0)) {\n    value = value - info[0xf];\n  }\n  value = (*functionPtr)(data,info[7],value,0);\n  if (value == -1) {\n    length = *data;\n    if (length != 0) {\n      if ((length != 0x1d) && (length != 0x16)) {\n        *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xf7ff;\n      *info = info[4];\n      info[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(info + 3) & 0xf7ff;\n    info[1] = 0;\n    *(ushort *)(info + 3) = flags;\n    *info = info[4];\n  }\n  else {\n    flags = *(ushort *)(info + 3) & 0xf7ff;\n    *info = info[4];\n    *(ushort *)(info + 3) = flags;\n    info[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    info[0x14] = value;\n  }\nLAB_00083a00:\n  pointer = (int *)info[0xc];\n  *data = temp2;\n  if (pointer == (int *)0x0) {\n    return 0;\n  }\n  if (pointer != info + 0x10) {\n    update_relocation_info_00083d9c(data);\n  }\n  info[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "data",
                "param_2": "info",
                "piVar1": "pointer",
                "iVar2": "value",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar5": "length",
                "pcVar6": "functionPtr",
                "unaff_r4": "result",
                "iVar7": "temp2"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructAddress)\n\n{\n  undefined4 *firstDataStructPtr;\n  undefined4 *secondDataStructPtr;\n  \n  if (*(int *)(dataStructAddress + 0x38) == 0) {\n    firstDataStructPtr = *(undefined4 **)(dataStructAddress + 4);\n    *(undefined **)(dataStructAddress + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructAddress + 0x2e4) = 3;\n    *(int *)(dataStructAddress + 0x2e8) = dataStructAddress + 0x2ec;\n    *(undefined4 *)(dataStructAddress + 0x2e0) = 0;\n    *(undefined2 *)(firstDataStructPtr + 3) = 4;\n    *firstDataStructPtr = 0;\n    firstDataStructPtr[1] = 0;\n    firstDataStructPtr[2] = 0;\n    firstDataStructPtr[0x19] = 0;\n    *(undefined2 *)((int)firstDataStructPtr + 0xe) = 0;\n    firstDataStructPtr[4] = 0;\n    firstDataStructPtr[5] = 0;\n    firstDataStructPtr[6] = 0;\n    fill_memory_with_byte_00082504(firstDataStructPtr + 0x17,0,8);\n    secondDataStructPtr = *(undefined4 **)(dataStructAddress + 8);\n    firstDataStructPtr[7] = firstDataStructPtr;\n    firstDataStructPtr[8] = &LAB_00084440_1;\n    firstDataStructPtr[9] = 0x84465;\n    firstDataStructPtr[10] = 0x8449d;\n    firstDataStructPtr[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)secondDataStructPtr + 0xe) = 1;\n    *(undefined2 *)(secondDataStructPtr + 3) = 9;\n    *secondDataStructPtr = 0;\n    secondDataStructPtr[1] = 0;\n    secondDataStructPtr[2] = 0;\n    secondDataStructPtr[0x19] = 0;\n    secondDataStructPtr[4] = 0;\n    secondDataStructPtr[5] = 0;\n    secondDataStructPtr[6] = 0;\n    fill_memory_with_byte_00082504(secondDataStructPtr + 0x17,0,8);\n    firstDataStructPtr = *(undefined4 **)(dataStructAddress + 0xc);\n    secondDataStructPtr[7] = secondDataStructPtr;\n    secondDataStructPtr[8] = &LAB_00084440_1;\n    secondDataStructPtr[9] = 0x84465;\n    secondDataStructPtr[10] = 0x8449d;\n    secondDataStructPtr[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(firstDataStructPtr + 3) = 0x12;\n    *(undefined2 *)((int)firstDataStructPtr + 0xe) = 2;\n    *firstDataStructPtr = 0;\n    firstDataStructPtr[1] = 0;\n    firstDataStructPtr[2] = 0;\n    firstDataStructPtr[0x19] = 0;\n    firstDataStructPtr[4] = 0;\n    firstDataStructPtr[5] = 0;\n    firstDataStructPtr[6] = 0;\n    fill_memory_with_byte_00082504(firstDataStructPtr + 0x17,0,8);\n    firstDataStructPtr[7] = firstDataStructPtr;\n    firstDataStructPtr[8] = &LAB_00084440_1;\n    firstDataStructPtr[9] = 0x84465;\n    firstDataStructPtr[10] = 0x8449d;\n    firstDataStructPtr[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructAddress",
                "puVar1": "firstDataStructPtr",
                "puVar2": "secondDataStructPtr"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint process_data_00083c40(undefined4 param_ptr,uint data_length,byte **data_ptr)\n\n{\n  int relocation_info;\n  uint result;\n  uint data_value;\n  byte *data_byte;\n  uint index;\n  byte data_byte_tmp;\n  byte stack_data [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x12)) {\n    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x2000;\n    data_ptr[0x19] = (byte *)((uint)data_ptr[0x19] | 0x2000);\n  }\n  relocation_info = get_relocation_info_00084298();\n  if ((relocation_info == 1) && (data_length - 1 < 0xff)) {\n    data_value = data_length & 0xff;\n    data_byte_tmp = (byte)data_value;\n    result = 1;\n  }\n  else {\n    result = process_data_00083c40_0008456c(param_ptr,&data_byte_tmp,data_length,data_ptr + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return data_length;\n    }\n    data_value = (uint)data_byte_tmp;\n  }\n  index = 0;\n  do {\n    data_byte = data_ptr[2] + -1;\n    data_ptr[2] = data_byte;\n    if ((int)data_byte < 0) {\n      if ((int)data_ptr[6] <= (int)data_byte) {\n        **data_ptr = (byte)data_value;\n        data_byte = *data_ptr;\n        data_value = (uint)*data_byte;\n        if (data_value != 10) goto LAB_00083c90;\n      }\n      relocation_info = process_and_modify_data_000844c4(param_ptr,data_value,data_ptr);\n      if (relocation_info == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data_ptr = (byte)data_value;\n      data_byte = *data_ptr;\nLAB_00083c90:\n      *data_ptr = data_byte + 1;\n    }\n    if (result <= index + 1) {\n      return data_length;\n    }\n    data_value = (uint)stack_data[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param_ptr",
                "param_2": "data_length",
                "param_3": "data_ptr",
                "iVar1": "relocation_info",
                "uVar2": "result",
                "uVar3": "data_value",
                "pbVar4": "data_byte",
                "uVar5": "index",
                "local_1c": "data_byte_tmp",
                "abStack_1b": "stack_data"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_relocation_info_00083d00",
            "code": "\nundefined4 updateRelocationInfo_00083d00(undefined4 param,int offset)\n\n{\n  int result;\n  uint relOffset;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  relOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((relOffset - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = update_value_00082970(param,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relOffset) {\n      result = update_value_00082970(param,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relOffset - adjustedOffset | 1;\n        FUNC_0008259c(param);\n        return 1;\n      }\n      adjustedOffset = update_value_00082970(param,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_relocation_info_00083d00",
                "param_1": "param",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "relOffset",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_info_00083d9c",
            "code": "\nvoid updateRelocationInfo_00083d9c(undefined4 unused,int relocationEntry)\n\n{\n  int previousEntryOffset;\n  bool isFirstEntry;\n  uint relocationLength;\n  dword currentEntryOffset;\n  int previousEntryNext;\n  uint relocationOffset;\n  dword currentEntry;\n  uint nextEntryOffset;\n  dword nextEntry;\n  \n  if (relocationEntry == 0) {\n    return;\n  }\n  FUNC_00082598();\n  relocationLength = *(uint *)(relocationEntry + -4);\n  currentEntry = relocationEntry - 8;\n  relocationOffset = relocationLength & 0xfffffffe;\n  currentEntryOffset = currentEntry + relocationOffset;\n  nextEntryOffset = *(uint *)(currentEntryOffset + 4) & 0xfffffffc;\n  if (relocationArray[141].r_info == currentEntryOffset) {\n    nextEntryOffset = nextEntryOffset + relocationOffset;\n    if (-1 < (int)(relocationLength << 0x1f)) {\n      currentEntry = currentEntry - *(int *)(relocationEntry + -8);\n      previousEntryNext = *(int *)(currentEntry + 0xc);\n      previousEntryOffset = *(int *)(currentEntry + 8);\n      nextEntryOffset = nextEntryOffset + *(int *)(relocationEntry + -8);\n      *(int *)(previousEntryOffset + 0xc) = previousEntryNext;\n      *(int *)(previousEntryNext + 8) = previousEntryOffset;\n    }\n    currentEntryOffset = relocationArray[269].r_info;\n    *(uint *)(currentEntry + 4) = nextEntryOffset | 1;\n    relocationArray[141].r_info = currentEntry;\n    if (currentEntryOffset <= nextEntryOffset) {\n      update_relocation_info_00083d00(unused,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentEntryOffset + 4) = nextEntryOffset;\n    if ((relocationLength & 1) == 0) {\n      currentEntry = currentEntry - *(int *)(relocationEntry + -8);\n      previousEntryOffset = *(int *)(currentEntry + 8);\n      relocationOffset = relocationOffset + *(int *)(relocationEntry + -8);\n      if (previousEntryOffset == 0x2007046c) {\n        isFirstEntry = true;\n      }\n      else {\n        previousEntryNext = *(int *)(currentEntry + 0xc);\n        *(int *)(previousEntryOffset + 0xc) = previousEntryNext;\n        *(int *)(previousEntryNext + 8) = previousEntryOffset;\n        isFirstEntry = false;\n      }\n    }\n    else {\n      isFirstEntry = false;\n    }\n    if (-1 < *(int *)(currentEntryOffset + nextEntryOffset + 4) << 0x1f) {\n      relocationOffset = relocationOffset + nextEntryOffset;\n      previousEntryOffset = *(int *)(currentEntryOffset + 8);\n      if ((!isFirstEntry) && (previousEntryOffset == 0x2007046c)) {\n        relocationArray[142].r_info = currentEntry;\n        relocationArray[143].r_offset = currentEntry;\n        *(undefined4 *)(currentEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(currentEntry + 8) = 0x2007046c;\n        *(uint *)(currentEntry + 4) = relocationOffset | 1;\n        *(uint *)(currentEntry + relocationOffset) = relocationOffset;\n        goto LAB_00083e30;\n      }\n      previousEntryNext = *(int *)(currentEntryOffset + 0xc);\n      *(int *)(previousEntryOffset + 0xc) = previousEntryNext;\n      *(int *)(previousEntryNext + 8) = previousEntryOffset;\n    }\n    *(uint *)(currentEntry + 4) = relocationOffset | 1;\n    *(uint *)(currentEntry + relocationOffset) = relocationOffset;\n    if (!isFirstEntry) {\n      if (relocationOffset < 0x200) {\n        relocationLength = relocationOffset & 0xfffffff8;\n        previousEntryOffset = *(int *)((int)&relocationArray[0x8d].r_info + relocationLength);\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << ((int)(relocationOffset >> 3) >> 2 & 0xffU);\n        *(int *)(currentEntry + 8) = previousEntryOffset;\n        *(uint *)(currentEntry + 0xc) = relocationLength + 0x20070464;\n        *(dword *)((int)&relocationArray[0x8d].r_info + relocationLength) = currentEntry;\n        *(dword *)(previousEntryOffset + 0xc) = currentEntry;\n        FUNC_0008259c(unused);\n        return;\n      }\n      relocationLength = relocationOffset >> 9;\n      if (relocationLength < 5) {\n        previousEntryOffset = (relocationOffset >> 6) + 0x38;\n        previousEntryNext = previousEntryOffset * 2;\n      }\n      else if (relocationLength < 0x15) {\n        previousEntryOffset = relocationLength + 0x5b;\n        previousEntryNext = previousEntryOffset * 2;\n      }\n      else if (relocationLength < 0x55) {\n        previousEntryOffset = (relocationOffset >> 0xc) + 0x6e;\n        previousEntryNext = previousEntryOffset * 2;\n      }\n      else if (relocationLength < 0x155) {\n        previousEntryOffset = (relocationOffset >> 0xf) + 0x77;\n        previousEntryNext = previousEntryOffset * 2;\n      }\n      else if (relocationLength < 0x555) {\n        previousEntryOffset = (relocationOffset >> 0x12) + 0x7c;\n        previousEntryNext = previousEntryOffset * 2;\n      }\n      else {\n        previousEntryNext = 0xfc;\n        previousEntryOffset = 0x7e;\n      }\n      nextEntry = previousEntryNext * 4 + 0x20070464;\n      currentEntryOffset = (&relocationArray[0x8d].r_info)[previousEntryNext];\n      if (currentEntryOffset == nextEntry) {\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << (previousEntryOffset >> 2 & 0xffU);\n        nextEntry = currentEntryOffset;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentEntryOffset + 4) & 0xfffffffc) <= relocationOffset) break;\n          currentEntryOffset = *(dword *)(currentEntryOffset + 8);\n        } while (nextEntry != currentEntryOffset);\n        nextEntry = *(dword *)(currentEntryOffset + 0xc);\n      }\n      *(dword *)(currentEntry + 0xc) = nextEntry;\n      *(dword *)(currentEntry + 8) = currentEntryOffset;\n      *(dword *)(nextEntry + 8) = currentEntry;\n      *(dword *)(currentEntryOffset + 0xc) = currentEntry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(unused);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_info_00083d9c",
                "param_1": "unused",
                "param_2": "relocationEntry",
                "iVar1": "previousEntryOffset",
                "bVar2": "isFirstEntry",
                "uVar3": "relocationLength",
                "dVar4": "currentEntryOffset",
                "iVar5": "previousEntryNext",
                "uVar6": "relocationOffset",
                "dVar7": "currentEntry",
                "uVar8": "nextEntryOffset",
                "dVar9": "nextEntry",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *result,uint *data,uint **relocation)\n\n{\n  int returnValue;\n  uint relocationData1;\n  uint relocationData2;\n  ushort dataFlag;\n  uint dataCount;\n  uint *arrayPointer;\n  uint *arrayIter;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint localVar;\n  \n  if (relocation[2] != (uint *)0x0) {\n    dataFlag = *(ushort *)(data + 3);\n    dataCount = (uint)dataFlag;\n    if (((int)(dataCount << 0x1c) < 0) && (data[4] != 0)) {\n      arrayIter = *relocation;\n    }\n    else {\n      returnValue = relocateData(result,data);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      dataFlag = *(ushort *)(data + 3);\n      dataCount = (uint)dataFlag;\n      arrayIter = *relocation;\n    }\n    if ((dataFlag & 2) == 0) {\n      relocationData1 = dataCount & 2;\n      tempVar3 = relocationData1;\n      tempVar1 = relocationData1;\n      localVar = relocationData1;\n      if ((dataCount & 1) == 0) {\n        relocationData1 = 0;\n        tempVar3 = 0;\n        while( true ) {\n          while (relocationData1 == 0) {\n            tempVar3 = *arrayIter;\n            arrayPointer = arrayIter + 1;\n            arrayIter = arrayIter + 2;\n            relocationData1 = *arrayPointer;\n          }\n          tempVar1 = data[2];\n          if ((int)(dataCount << 0x16) < 0) {\n            if (relocationData1 < tempVar1) {\n              dataCount = *data;\n              tempVar1 = relocationData1;\n            }\n            else if ((dataCount & 0x480) == 0) {\n              dataCount = *data;\n            }\n            else {\n              returnValue = *data - data[4];\n              tempVar1 = returnValue + 1 + relocationData1;\n              tempVar2 = (int)(data[5] * 3) / 2;\n              if (tempVar1 <= tempVar2) {\n                tempVar1 = tempVar2;\n              }\n              if ((int)(dataCount << 0x15) < 0) {\n                tempVar2 = relocateMemory(result,tempVar1);\n                if (tempVar2 == 0) {\n                  *result = 0xc;\n                  dataFlag = *(ushort *)(data + 3);\n                  goto LAB_00084030;\n                }\n                copyMemory(tempVar2,data[4],returnValue);\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempVar2 = allocateMemory(result);\n                if (tempVar2 == 0) {\n                  updateRelocationInfo(result,data[4]);\n                  dataFlag = *(ushort *)(data + 3) & 0xff7f;\n                  *result = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              dataCount = tempVar2 + returnValue;\n              data[4] = tempVar2;\n              data[5] = tempVar1;\n              *data = dataCount;\n              data[2] = tempVar1 - returnValue;\n              tempVar1 = relocationData1;\n            }\n            copy_memory_00082438(dataCount,tempVar3,tempVar1);\n            data[2] = data[2] - tempVar1;\n            *data = *data + tempVar1;\n            tempVar1 = relocationData1;\n          }\n          else if ((data[4] < *data) || (dataCount = data[5], relocationData1 < dataCount)) {\n            if (relocationData1 < tempVar1) {\n              tempVar1 = relocationData1;\n            }\n            copy_memory_00082438(*data,tempVar3,tempVar1);\n            dataCount = data[2];\n            data[2] = dataCount - tempVar1;\n            *data = *data + tempVar1;\n            if ((dataCount - tempVar1 == 0) && (returnValue = processData_00083f34(result,data), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            tempVar1 = 0x7fffffff;\n            if (relocationData1 < 0x7fffffff) {\n              tempVar1 = relocationData1;\n            }\n            tempVar1 = (*(code *)data[9])(result,data[7],tempVar3,(tempVar1 / dataCount) * dataCount);\n            if ((int)tempVar1 < 1) goto LAB_0008402e;\n          }\n          arrayPointer = relocation[2];\n          tempVar3 = tempVar3 + tempVar1;\n          relocationData1 = relocationData1 - tempVar1;\n          relocation[2] = (uint *)((int)arrayPointer - tempVar1);\n          if ((uint *)((int)arrayPointer - tempVar1) == (uint *)0x0) break;\n          dataCount = (uint)*(ushort *)(data + 3);\n        }\n      }\n      else {\n        do {\n          while (relocationData1 == 0) {\n            tempVar1 = *arrayIter;\n            relocationData1 = arrayIter[1];\n            localVar = 0;\n            arrayIter = arrayIter + 2;\n          }\n          if (localVar == 0) {\n            returnValue = findCharInArray(tempVar1,10,relocationData1);\n            if (returnValue == 0) {\n              tempVar3 = relocationData1 + 1;\n              localVar = 1;\n            }\n            else {\n              tempVar3 = (returnValue + 1) - tempVar1;\n              localVar = 1;\n            }\n          }\n          tempVar2 = *data;\n          dataCount = tempVar3;\n          if (relocationData1 <= tempVar3) {\n            dataCount = relocationData1;\n          }\n          relocationData2 = data[5];\n          if ((data[4] < tempVar2) && (tempVar4 = data[2] + relocationData2, (int)tempVar4 < (int)dataCount)) {\n            copy_memory_00082438(tempVar2,tempVar1,tempVar4);\n            *data = *data + tempVar4;\n            returnValue = processData_00083f34(result,data);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)dataCount < (int)relocationData2) {\n            copy_memory_00082438(tempVar2,tempVar1,dataCount);\n            data[2] = data[2] - dataCount;\n            *data = dataCount + *data;\n            tempVar4 = dataCount;\n          }\n          else {\n            tempVar4 = (*(code *)data[9])(result,data[7],tempVar1,relocationData2);\n            if ((int)tempVar4 < 1) goto LAB_0008402e;\n          }\n          tempVar3 = tempVar3 - tempVar4;\n          if (tempVar3 == 0) {\n            returnValue = processData_00083f34(result,data);\n            if (returnValue != 0) goto LAB_0008402e;\n            localVar = 0;\n          }\n          arrayPointer = relocation[2];\n          tempVar1 = tempVar1 + tempVar4;\n          relocationData1 = relocationData1 - tempVar4;\n          relocation[2] = (uint *)((int)arrayPointer - tempVar4);\n        } while ((uint *)((int)arrayPointer - tempVar4) != (uint *)0x0);\n      }\n    }\n    else {\n      relocationData1 = 0;\n      dataCount = 0;\n      do {\n        while( true ) {\n          tempVar3 = dataCount;\n          if (0x7ffffbff < dataCount) {\n            tempVar3 = 0x7ffffc00;\n          }\n          if (dataCount != 0) break;\n          relocationData1 = *arrayIter;\n          dataCount = arrayIter[1];\n          arrayIter = arrayIter + 2;\n        }\n        returnValue = (*(code *)data[9])(result,data[7],relocationData1,tempVar3);\n        if (returnValue < 1) {\nLAB_0008402e:\n          dataFlag = *(ushort *)(data + 3);\nLAB_00084030:\n          *(ushort *)(data + 3) = dataFlag | 0x40;\n          return 0xffffffff;\n        }\n        arrayPointer = relocation[2];\n        relocationData1 = relocationData1 + returnValue;\n        dataCount = dataCount - returnValue;\n        relocation[2] = (uint *)((int)arrayPointer - returnValue);\n      } while ((uint *)((int)arrayPointer - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "result",
                "param_2": "data",
                "param_3": "relocation",
                "iVar1": "returnValue",
                "uVar2": "relocationData1",
                "uVar3": "relocationData2",
                "uVar4": "dataFlag",
                "uVar5": "dataCount",
                "puVar6": "arrayPointer",
                "puVar7": "arrayIter",
                "uVar8": "tempVar1",
                "uVar9": "tempVar2",
                "uVar10": "tempVar3",
                "uVar11": "tempVar4",
                "local_2c": "localVar",
                "process_relocation_00083808": "relocateData",
                "process_relocation_00081e14": "relocateMemory",
                "copy_memory_0008234c": "copyMemory",
                "relocated_memory_allocation_000825b0": "allocateMemory",
                "update_relocation_info_00083d9c": "updateRelocationInfo",
                "process_data_00083adc": "processData",
                "find_char_in_array_00084384": "findCharInArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_magic_number_00084290",
            "code": "\nundefined4 get_magic_number_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_magic_number_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relArray[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_memory_and_process_relocation_000842a4",
            "code": "\nvoid initializeMemoryAndProcessRelocation_000842a4(int param1,int *param2)\n\n{\n  ushort ushortValue;\n  int result;\n  int relocationResult;\n  uint uintValue;\n  bool isFlagSet;\n  undefined stackArray [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(param2 + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    result = initialize_memory_000846b4(param1,(int)*(short *)((int)param2 + 0xe),stackArray);\n    if (-1 < result) {\n      isFlagSet = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (param2[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushortValue = *(ushort *)(param2 + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(param2 + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isFlagSet = false;\nLAB_00084300:\n  relocationResult = process_relocation_00081e14(param1,result);\n  ushortValue = *(ushort *)(param2 + 3);\n  if (relocationResult == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(param2 + 3) = ushortValue | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(param2 + 3) = ushortValue | 0x80;\n    *param2 = relocationResult;\n    param2[4] = relocationResult;\n    param2[5] = result;\n    if ((isFlagSet) && (result = update_return_value_000846dc(param1,(int)*(short *)((int)param2 + 0xe)), result != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_memory_and_process_relocation_000842a4",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushortValue",
                "iVar2": "result",
                "iVar3": "relocationResult",
                "uVar4": "uintValue",
                "bVar5": "isFlagSet",
                "auStack_54": "stackArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_char_in_array_00084384",
            "code": "\nuint * find_char_in_array_00084384(uint *array,char target,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_char_in_array_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "temp",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "update_and_copy_data_00084464",
            "code": "\nvoid updateAndCopyData_00084464(int *outputArray,int inputData,undefined4 value1,undefined4 value2)\n\n{\n  int copyResult;\n  ushort dataValue;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  dataValue = *(ushort *)(inputData + 0xc);\n  if ((int)((uint)dataValue << 0x17) < 0) {\n    update_default_value_00084700(outputArray,(int)*(short *)(inputData + 0xe),0,2);\n    dataValue = *(ushort *)(inputData + 0xc);\n  }\n  *(ushort *)(inputData + 0xc) = dataValue & 0xefff;\n  DAT_200711bc = 0;\n  copyResult = copy_bytes_000811cc((int)*(short *)(inputData + 0xe),value1,value2,value2,tempVar1,tempVar2,\n                       tempVar3,tempVar4);\n  if ((copyResult == -1) && (DAT_200711bc != 0)) {\n    *outputArray = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "update_and_copy_data_00084464",
                "param_1": "outputArray",
                "param_2": "inputData",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "copyResult",
                "uVar2": "dataValue",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "unaff_r6": "tempVar3",
                "in_lr": "tempVar4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_value_0008449c",
            "code": "\nvoid updateValue_0008449c(undefined4 value,int data)\n\n{\n  int result;\n  ushort flag;\n  \n  result = update_default_value_00084700(value,(int)*(short *)(data + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_value_0008449c",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_and_modify_data_000844c4",
            "code": "\nuint process_and_modify_data_000844c4(int data_param,uint value_param,undefined4 *data_struct_param,undefined4 control_param)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *undefined_value;\n  int index_value;\n  \n  if ((data_param != 0) && (*(int *)(data_param + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  ushort_value = *(ushort *)(data_struct_param + 3);\n  uint_value = (uint)ushort_value;\n  data_struct_param[2] = data_struct_param[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index_value = data_struct_param[4], index_value == 0)) {\n    index_value = process_relocation_00083808(data_param,data_struct_param,ushort_value,uint_value,control_param);\n    if (index_value != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_struct_param + 3);\n    index_value = data_struct_param[4];\n    uint_value = (uint)ushort_value;\n  }\n  value_param = value_param & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    undefined_value = (undefined *)*data_struct_param;\n    index_value = (int)undefined_value - index_value;\n    if (index_value < (int)data_struct_param[5]) {\nLAB_000844f6:\n      index_value = index_value + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_struct_param[0x19] = data_struct_param[0x19] & 0xffffdfff;\n    undefined_value = (undefined *)*data_struct_param;\n    *(ushort *)(data_struct_param + 3) = ushort_value | 0x2000;\n    index_value = (int)undefined_value - index_value;\n    if (index_value < (int)data_struct_param[5]) goto LAB_000844f6;\n  }\n  index_value = process_data_00083adc(data_param,data_struct_param);\n  if (index_value != 0) {\n    return 0xffffffff;\n  }\n  undefined_value = (undefined *)*data_struct_param;\n  index_value = 1;\nLAB_000844f8:\n  data_struct_param[2] = data_struct_param[2] + -1;\n  *data_struct_param = undefined_value + 1;\n  *undefined_value = (char)value_param;\n  if (((data_struct_param[5] == index_value) ||\n      (((int)((uint)*(ushort *)(data_struct_param + 3) << 0x1f) < 0 && (value_param == 10)))) &&\n     (index_value = process_data_00083adc(data_param,data_struct_param), index_value != 0)) {\n    return 0xffffffff;\n  }\n  return value_param;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_and_modify_data_000844c4",
                "param_1": "data_param",
                "param_2": "value_param",
                "param_3": "data_struct_param",
                "param_4": "control_param",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "undefined_value",
                "iVar4": "index_value"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid process_data_0008456c(undefined4 *data_ptr,int data_length,undefined4 magic_number_1,undefined4 *result_ptr)\n\n{\n  code *function_ptr;\n  undefined4 magic_number_2;\n  int result;\n  undefined auStack_24 [12];\n  \n  function_ptr = DAT_20070898;\n  if (data_length == 0) {\n    magic_number_2 = get_magic_number_00084290();\n    result = (*function_ptr)(data_ptr,auStack_24,0,magic_number_2,result_ptr);\n  }\n  else {\n    magic_number_2 = get_magic_number_00084290();\n    result = (*function_ptr)(data_ptr,data_length,magic_number_1,magic_number_2,result_ptr);\n  }\n  if (result == -1) {\n    *result_ptr = 0;\n    *data_ptr = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "magic_number_1",
                "param_4": "result_ptr",
                "pcVar1": "function_ptr",
                "uVar2": "magic_number_2",
                "iVar3": "result"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "store_byte_or_error_000845bc",
            "code": "\nundefined4 store_byte_or_error_000845bc(undefined4 *result_ptr,undefined *buffer_ptr,uint value)\n\n{\n  if (buffer_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer_ptr = (char)value;\n    return 1;\n  }\n  *result_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "store_byte_or_error_000845bc",
                "param_1": "result_ptr",
                "param_2": "buffer_ptr",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_data_000846a4",
            "code": "\nundefined4 processData_000846a4(int input)\n\n{\n  dword relocationOffset;\n  undefined4 returnValue;\n  int result;\n  \n  relocationOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initializeDataStructures();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      returnValue = processData_000846a4Item(relocationOffset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(input + 0x2c))(relocationOffset,*(undefined4 *)(input + 0x1c)), result < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        updateRelocationInfo(relocationOffset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          updateRelocationInfo(relocationOffset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        updateRelocationInfo(relocationOffset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083c0c();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "input",
                "dVar1": "relocationOffset",
                "uVar2": "returnValue",
                "iVar3": "result",
                "initialize_data_structures_00083b14": "initializeDataStructures",
                "process_data_00083adc": "processDataItem",
                "update_relocation_info_00083d9c": "updateRelocationInfo"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_memory_000846b4",
            "code": "\nvoid initializeMemory_000846b4(int *result,undefined4 value,undefined4 startAddress,undefined4 endAddress)\n\n{\n  int resultStatus;\n  \n  DAT_200711bc = 0;\n  resultStatus = set_memory_value_000811b4(value,startAddress,startAddress,0,endAddress);\n  if ((resultStatus == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_memory_000846b4",
                "param_1": "result",
                "param_2": "value",
                "param_3": "startAddress",
                "param_4": "endAddress",
                "iVar1": "resultStatus"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "update_return_value_000846dc",
            "code": "\nvoid updateReturnValue_000846dc(int *outputPointer,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = check_return_value_000811be(inputValue);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *outputPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "update_return_value_000846dc",
                "param_1": "outputPointer",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "update_default_value_00084700",
            "code": "\nvoid updateDefaultValue_00084700(int *output,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = get_default_value_000811c2(value1,value2,value3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "update_default_value_00084700",
                "param_1": "output",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "initialize_and_check_app_error_code_00084728",
            "code": "\nvoid initializeAndCheckAppErrorCode_00084728(int *appErrorCode,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = initialize_app_000811c6(param2,param3,param4);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *appErrorCode = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "initialize_and_check_app_error_code_00084728",
                "param_1": "appErrorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_input_and_get_result_00084750",
            "code": "\nint checkInputAndGetResult_00084750(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = subtract_and_store_result_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_input_and_get_result_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculateDifference_0008477c(uint inputValue,int intValue,undefined4 firstOperand,undefined4 secondOperand,int *resultArray)\n\n{\n  uint multipliedValue;\n  longlong product;\n  \n  product = divided_unsigned_integers_000847e0();\n  product = product * CONCAT44(secondOperand,firstOperand);\n  multipliedValue = (uint)product;\n  *resultArray = inputValue - multipliedValue;\n  resultArray[1] = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < multipliedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "inputValue",
                "param_2": "intValue",
                "param_3": "firstOperand",
                "param_4": "secondOperand",
                "param_5": "resultArray",
                "uVar1": "multipliedValue",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_store_result_000847ac",
            "code": "\nvoid subtractAndStoreResult_000847ac(uint inputValue,int paramValue,undefined4 param3,undefined4 param4,int *resultArray)\n\n{\n  uint result;\n  longlong multiplicationResult;\n  \n  multiplicationResult = division_with_overflow_00084a80();\n  multiplicationResult = multiplicationResult * CONCAT44(param4,param3);\n  result = (uint)multiplicationResult;\n  *resultArray = inputValue - result;\n  resultArray[1] = (paramValue - (int)((ulonglong)multiplicationResult >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_store_result_000847ac",
                "param_1": "inputValue",
                "param_2": "paramValue",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "resultArray",
                "uVar1": "result",
                "lVar2": "multiplicationResult"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divided_unsigned_integers_000847e0",
            "code": "\nundefined8 dividedUnsignedIntegers_000847e0(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong temp_long;\n  uint quotient;\n  uint quotient_upper;\n  uint remainder;\n  uint remainder_upper;\n  int iVar6;\n  uint temp;\n  uint temp2;\n  uint is_negative_dividend;\n  uint is_negative_divisor;\n  uint is_negative_remainder;\n  uint temp3;\n  bool is_carry_set;\n  \n  if ((int)dividend_upper < 0) {\n    is_carry_set = dividend != 0;\n    dividend = -dividend;\n    dividend_upper = -dividend_upper - (uint)is_carry_set;\n    is_negative_dividend = 0xffffffff;\n  }\n  else {\n    is_negative_dividend = 0;\n  }\n  if ((int)divisor_upper < 0) {\n    is_negative_dividend = ~is_negative_dividend;\n    is_carry_set = divisor != 0;\n    divisor = -divisor;\n    divisor_upper = -divisor_upper - (uint)is_carry_set;\n  }\n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      iVar6 = LZCOUNT(divisor);\n      if (iVar6 != 0) {\n        quotient_upper = dividend >> (0x20U - iVar6 & 0xff);\n        divisor = divisor << iVar6;\n        dividend = dividend << iVar6;\n        dividend_upper = dividend_upper << iVar6 | quotient_upper;\n      }\n      quotient = divisor >> 0x10;\n      remainder = dividend_upper / quotient;\n      temp = (divisor & 0xffff) * remainder;\n      is_negative_divisor = dividend >> 0x10 | (dividend_upper - quotient * remainder) * 0x10000;\n      quotient_upper = remainder;\n      if (is_negative_divisor <= temp && temp - is_negative_divisor != 0) {\n        is_carry_set = CARRY4(is_negative_divisor,divisor);\n        is_negative_divisor = is_negative_divisor + divisor;\n        quotient_upper = remainder - 1;\n        if ((is_carry_set == false) && (is_negative_divisor <= temp && temp - is_negative_divisor != 0)) {\n          quotient_upper = remainder - 2;\n          is_negative_divisor = is_negative_divisor + divisor;\n        }\n      }\n      temp2 = (is_negative_divisor - temp) / quotient;\n      remainder = (divisor & 0xffff) * temp2;\n      temp = dividend & 0xffff | ((is_negative_divisor - temp) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp <= remainder && remainder - temp != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp,divisor) == false) &&\n           (temp + divisor <= remainder && remainder - (temp + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotient_upper << 0x10;\n      quotient_upper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      iVar6 = LZCOUNT(divisor);\n      if (iVar6 == 0) {\n        dividend_upper = dividend_upper - divisor;\n        remainder = divisor >> 0x10;\n        temp3 = divisor & 0xffff;\n        quotient_upper = 1;\n      }\n      else {\n        divisor = divisor << iVar6;\n        quotient_upper = dividend_upper >> (0x20U - iVar6 & 0xff);\n        remainder = divisor >> 0x10;\n        is_negative_divisor = quotient_upper / remainder;\n        temp3 = divisor & 0xffff;\n        temp = temp3 * is_negative_divisor;\n        temp2 = dividend >> (0x20U - iVar6 & 0xff) | dividend_upper << iVar6;\n        quotient_upper = temp2 >> 0x10 | (quotient_upper - remainder * is_negative_divisor) * 0x10000;\n        dividend = dividend << iVar6;\n        quotient = is_negative_divisor;\n        if (quotient_upper <= temp && temp - quotient_upper != 0) {\n          is_carry_set = CARRY4(quotient_upper,divisor);\n          quotient_upper = quotient_upper + divisor;\n          quotient = is_negative_divisor - 1;\n          if ((is_carry_set == false) && (quotient_upper <= temp && temp - quotient_upper != 0)) {\n            quotient = is_negative_divisor - 2;\n            quotient_upper = quotient_upper + divisor;\n          }\n        }\n        remainder_upper = (quotient_upper - temp) / remainder;\n        is_negative_divisor = temp3 * remainder_upper;\n        dividend_upper = temp2 & 0xffff | ((quotient_upper - temp) - remainder * remainder_upper) * 0x10000;\n        quotient_upper = remainder_upper;\n        if (dividend_upper <= is_negative_divisor && is_negative_divisor - dividend_upper != 0) {\n          is_carry_set = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_upper = remainder_upper - 1;\n          if ((is_carry_set == false) && (dividend_upper <= is_negative_divisor && is_negative_divisor - dividend_upper != 0)) {\n            quotient_upper = remainder_upper - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - is_negative_divisor;\n        quotient_upper = quotient_upper | quotient << 0x10;\n      }\n      quotient = dividend_upper / remainder;\n      is_negative_divisor = temp3 * quotient;\n      temp2 = dividend >> 0x10 | (dividend_upper - remainder * quotient) * 0x10000;\n      temp = quotient;\n      if (temp2 <= is_negative_divisor && is_negative_divisor - temp2 != 0) {\n        is_carry_set = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp = quotient - 1;\n        if ((is_carry_set == false) && (temp2 <= is_negative_divisor && is_negative_divisor - temp2 != 0)) {\n          temp = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      remainder_upper = (temp2 - is_negative_divisor) / remainder;\n      temp3 = temp3 * remainder_upper;\n      remainder = dividend & 0xffff | ((temp2 - is_negative_divisor) - remainder * remainder_upper) * 0x10000;\n      quotient = remainder_upper;\n      if (remainder <= temp3 && temp3 - remainder != 0) {\n        quotient = remainder_upper - 1;\n        if ((CARRY4(remainder,divisor) == false) &&\n           (remainder + divisor <= temp3 && temp3 - (remainder + divisor) != 0)) {\n          quotient = remainder_upper - 2;\n        }\n      }\n      quotient = quotient | temp << 0x10;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    quotient_upper = 0;\n    quotient = 0;\n  }\n  else {\n    iVar6 = LZCOUNT(divisor_upper);\n    if (iVar6 == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        quotient_upper = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_upper = 0;\n      }\n    }\n    else {\n      quotient_upper = 0x20 - iVar6;\n      remainder = dividend_upper >> (quotient_upper & 0xff);\n      temp3 = divisor >> (quotient_upper & 0xff) | divisor_upper << iVar6;\n      is_negative_divisor = temp3 >> 0x10;\n      quotient = remainder / is_negative_divisor;\n      temp2 = (temp3 & 0xffff) * quotient;\n      temp = dividend_upper << iVar6 | dividend >> (quotient_upper & 0xff);\n      remainder = temp >> 0x10 | (remainder - is_negative_divisor * quotient) * 0x10000;\n      quotient_upper = quotient;\n      if (remainder <= temp2 && temp2 - remainder != 0) {\n        is_carry_set = CARRY4(remainder,temp3);\n        remainder = remainder + temp3;\n        quotient_upper = quotient - 1;\n        if ((is_carry_set == false) && (remainder <= temp2 && temp2 - remainder != 0)) {\n          quotient_upper = quotient - 2;\n          remainder = remainder + temp3;\n        }\n      }\n      remainder_upper = (remainder - temp2) / is_negative_divisor;\n      is_negative_remainder = (temp3 & 0xffff) * remainder_upper;\n      remainder = temp & 0xffff | ((remainder - temp2) - is_negative_divisor * remainder_upper) * 0x10000;\n      quotient = remainder_upper;\n      if (remainder <= is_negative_remainder && is_negative_remainder - remainder != 0) {\n        is_carry_set = CARRY4(remainder,temp3);\n        remainder = remainder + temp3;\n        quotient = remainder_upper - 1;\n        if ((is_carry_set == false) && (remainder <= is_negative_remainder && is_negative_remainder - remainder != 0)) {\n          quotient = remainder_upper - 2;\n          remainder = remainder + temp3;\n        }\n      }\n      quotient = quotient | quotient_upper << 0x10;\n      temp_long = (ulonglong)quotient * (ulonglong)(divisor << iVar6);\n      temp = (uint)((ulonglong)temp_long >> 0x20);\n      quotient_upper = 0;\n      if ((remainder - is_negative_remainder < temp) ||\n         ((remainder - is_negative_remainder == temp && (dividend << iVar6 < (uint)temp_long)))) {\n        quotient = quotient - 1;\n        quotient_upper = 0;\n      }\n    }\n  }\n  if (is_negative_dividend != 0) {\n    is_carry_set = quotient != 0;\n    quotient = -quotient;\n    quotient_upper = -quotient_upper - (uint)is_carry_set;\n  }\n  return CONCAT44(quotient_upper,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divided_unsigned_integers_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "lVar1": "temp_long",
                "uVar2": "quotient",
                "uVar3": "quotient_upper",
                "uVar4": "remainder",
                "uVar5": "remainder_upper",
                "uVar7": "temp",
                "uVar8": "temp2",
                "uVar9": "is_negative_dividend",
                "uVar10": "is_negative_divisor",
                "uVar11": "is_negative_remainder",
                "uVar12": "temp3",
                "bVar13": "is_carry_set"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "division_with_overflow_00084a80",
            "code": "\nulonglong divisionWithOverflow_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint result;\n  uint divisor_high;\n  uint divisor_low;\n  uint quotient_high;\n  uint quotient_low;\n  uint remainder_high;\n  uint remainder_low;\n  uint temp_quotient;\n  int shift_amount;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_amount = LZCOUNT(quotient);\n      if (shift_amount == 0) {\n        divisor = divisor - quotient;\n        divisor_high = quotient >> 0x10;\n        quotient_high = quotient & 0xffff;\n        result = 1;\n      }\n      else {\n        quotient = quotient << shift_amount;\n        remainder_low = divisor >> (0x20U - shift_amount & 0xff);\n        divisor_high = quotient >> 0x10;\n        temp_quotient = remainder_low / divisor_high;\n        quotient_high = quotient & 0xffff;\n        result = quotient_high * temp_quotient;\n        quotient_low = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        divisor_low = quotient_low >> 0x10 | (remainder_low - divisor_high * temp_quotient) * 0x10000;\n        dividend = dividend << shift_amount;\n        remainder_low = temp_quotient;\n        if (divisor_low <= result && result - divisor_low != 0) {\n          carry = CARRY4(divisor_low,quotient);\n          divisor_low = divisor_low + quotient;\n          remainder_low = temp_quotient - 1;\n          if ((carry == false) && (divisor_low <= result && result - divisor_low != 0)) {\n            remainder_low = temp_quotient - 2;\n            divisor_low = divisor_low + quotient;\n          }\n        }\n        remainder_high = (divisor_low - result) / divisor_high;\n        temp_quotient = quotient_high * remainder_high;\n        divisor = quotient_low & 0xffff | ((divisor_low - result) - divisor_high * remainder_high) * 0x10000;\n        result = remainder_high;\n        if (divisor <= temp_quotient && temp_quotient - divisor != 0) {\n          carry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result = remainder_high - 1;\n          if ((carry == false) && (divisor <= temp_quotient && temp_quotient - divisor != 0)) {\n            result = remainder_high - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp_quotient;\n        result = result | remainder_low << 0x10;\n      }\n      temp_quotient = divisor / divisor_high;\n      divisor_low = quotient_high * temp_quotient;\n      quotient_low = dividend >> 0x10 | (divisor - divisor_high * temp_quotient) * 0x10000;\n      remainder_low = temp_quotient;\n      if (quotient_low <= divisor_low && divisor_low - quotient_low != 0) {\n        carry = CARRY4(quotient_low,quotient);\n        quotient_low = quotient_low + quotient;\n        remainder_low = temp_quotient - 1;\n        if ((carry == false) && (quotient_low <= divisor_low && divisor_low - quotient_low != 0)) {\n          remainder_low = temp_quotient - 2;\n          quotient_low = quotient_low + quotient;\n        }\n      }\n      temp_quotient = (quotient_low - divisor_low) / divisor_high;\n      quotient_high = quotient_high * temp_quotient;\n      quotient_low = dividend & 0xffff | ((quotient_low - divisor_low) - divisor_high * temp_quotient) * 0x10000;\n      divisor_high = temp_quotient;\n      if (quotient_low <= quotient_high && quotient_high - quotient_low != 0) {\n        divisor_high = temp_quotient - 1;\n        if ((CARRY4(quotient_low,quotient) == false) &&\n           (quotient_low + quotient <= quotient_high && quotient_high - (quotient_low + quotient) != 0)) {\n          divisor_high = temp_quotient - 2;\n        }\n      }\n      return CONCAT44(result,divisor_high | remainder_low << 0x10);\n    }\n    shift_amount = LZCOUNT(quotient);\n    if (shift_amount != 0) {\n      remainder_low = dividend >> (0x20U - shift_amount & 0xff);\n      quotient = quotient << shift_amount;\n      dividend = dividend << shift_amount;\n      divisor = remainder_low | divisor << shift_amount;\n    }\n    result = quotient >> 0x10;\n    divisor_high = divisor / result;\n    quotient_high = (quotient & 0xffff) * divisor_high;\n    temp_quotient = dividend >> 0x10 | (divisor - result * divisor_high) * 0x10000;\n    remainder_low = divisor_high;\n    if (temp_quotient <= quotient_high && quotient_high - temp_quotient != 0) {\n      carry = CARRY4(temp_quotient,quotient);\n      temp_quotient = temp_quotient + quotient;\n      remainder_low = divisor_high - 1;\n      if ((carry == false) && (temp_quotient <= quotient_high && quotient_high - temp_quotient != 0)) {\n        remainder_low = divisor_high - 2;\n        temp_quotient = temp_quotient + quotient;\n      }\n    }\n    quotient_low = (temp_quotient - quotient_high) / result;\n    divisor_high = (quotient & 0xffff) * quotient_low;\n    quotient_high = dividend & 0xffff | ((temp_quotient - quotient_high) - result * quotient_low) * 0x10000;\n    result = quotient_low;\n    if (quotient_high <= divisor_high && divisor_high - quotient_high != 0) {\n      result = quotient_low - 1;\n      if ((CARRY4(quotient_high,quotient) == false) &&\n         (quotient_high + quotient <= divisor_high && divisor_high - (quotient_high + quotient) != 0)) {\n        result = quotient_low - 2;\n      }\n    }\n    result = result | remainder_low << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_amount = LZCOUNT(remainder);\n    if (shift_amount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shift_amount;\n      remainder_low = divisor >> (result & 0xff);\n      divisor_high = remainder << shift_amount | quotient >> (result & 0xff);\n      quotient_high = divisor_high >> 0x10;\n      divisor_low = remainder_low / quotient_high;\n      temp_quotient = (divisor_high & 0xffff) * divisor_low;\n      quotient_low = dividend >> (result & 0xff) | divisor << shift_amount;\n      result = quotient_low >> 0x10 | (remainder_low - quotient_high * divisor_low) * 0x10000;\n      remainder_low = divisor_low;\n      if (result <= temp_quotient && temp_quotient - result != 0) {\n        carry = CARRY4(result,divisor_high);\n        result = result + divisor_high;\n        remainder_low = divisor_low - 1;\n        if ((carry == false) && (result <= temp_quotient && temp_quotient - result != 0)) {\n          remainder_low = divisor_low - 2;\n          result = result + divisor_high;\n        }\n      }\n      divisor_low = (result - temp_quotient) / quotient_high;\n      remainder_high = (divisor_high & 0xffff) * divisor_low;\n      quotient_high = quotient_low & 0xffff | ((result - temp_quotient) - quotient_high * divisor_low) * 0x10000;\n      result = divisor_low;\n      if (quotient_high <= remainder_high && remainder_high - quotient_high != 0) {\n        carry = CARRY4(quotient_high,divisor_high);\n        quotient_high = quotient_high + divisor_high;\n        result = divisor_low - 1;\n        if ((carry == false) && (quotient_high <= remainder_high && remainder_high - quotient_high != 0)) {\n          result = divisor_low - 2;\n          quotient_high = quotient_high + divisor_high;\n        }\n      }\n      result = result | remainder_low << 0x10;\n      temp = (ulonglong)result * (ulonglong)(quotient << shift_amount);\n      remainder_low = (uint)((ulonglong)temp >> 0x20);\n      if ((quotient_high - remainder_high < remainder_low) || ((quotient_high - remainder_high == remainder_low && (dividend << shift_amount < (uint)temp)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "division_with_overflow_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "result",
                "uVar3": "divisor_high",
                "uVar4": "divisor_low",
                "uVar5": "quotient_high",
                "uVar6": "quotient_low",
                "uVar7": "remainder_high",
                "uVar8": "remainder_low",
                "uVar9": "temp_quotient",
                "iVar10": "shift_amount",
                "bVar11": "carry"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 86122,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}