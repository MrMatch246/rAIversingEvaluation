{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "read_data_from_stream_080006b4",
                "param_1": "stream",
                "bVar1": "is_overflow",
                "uVar2": "byte_to_write",
                "iVar3": "read_result",
                "bVar4": "byte_count"
            },
            "code": "int read_data_from_stream_080006b4(int **stream)\n{\n    bool is_overflow = false;\n    undefined byte_count = 0;\n\n    if (1 < *(byte *)((int)stream + 6)) {\n        set_bit_at_index_080041bc(*(byte *)((int)stream + 6), 0);\n    }\n\n    *(undefined *)((int)stream + 0x49) = 0;\n\n    if (*(byte *)((int)stream + 5) < 4) {\n        while (true) {\n            int read_result = (**(code **)(**stream + 8))();\n\n            if (read_result == 0) {\n                break;\n            }\n\n            undefined byte_to_write = (**(code **)(**stream + 0xc))();\n            *(undefined *)((int)stream + byte_count + 9) = byte_to_write;\n\n            byte_count++;\n\n            if (byte_count > 0x3f) {\n                is_overflow = true;\n                break;\n            }\n        }\n    }\n\n    *(short *)(stream + 0x14) = *(short *)(stream + 0x14) + 1;\n\n    if (is_overflow) {\n        *(short *)(stream + 0x15) = *(short *)(stream + 0x15) + 1;\n        return -3;\n    }\n\n    return (int)*(char *)((int)stream + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "read_data_from_stream_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_080034da",
                "param_1": "value_to_find",
                "param_2": "data_array"
            },
            "code": "int find_value_080034da(short value_to_find, short* data_array) {\n    while (*data_array != -1) {\n        if (*data_array == value_to_find) {\n            return *(int*)(data_array + 2);\n        }\n        data_array += 6;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "imported": false,
            "current_name": "find_value_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_based_on_input_080035fc",
                "param_1": "input_val",
                "DAT_08003718": "INPUT_VAL_1",
                "DAT_0800371c": "INPUT_VAL_3",
                "DAT_08003720": "INPUT_VAL_4",
                "DAT_08003724": "INPUT_VAL_5",
                "DAT_08003728": "INPUT_VAL_6",
                "DAT_0800372c": "INPUT_VAL_7",
                "DAT_08003730": "INPUT_VAL_8",
                "DAT_08003734": "INPUT_VAL_9",
                "DAT_08003738": "INPUT_VAL_10",
                "DAT_0800373c": "INPUT_VAL_11",
                "DAT_08003740": "INPUT_VAL_12",
                "DAT_08003744": "INPUT_VAL_13",
                "DAT_08003748": "INPUT_VAL_14",
                "DAT_0800374c": "data_ptr"
            },
            "code": "void set_bits_based_on_input_080035fc(int *input_val)\n{\n  uint32_t *DAT_0800374c = (uint32_t *)DAT_0800374c;\n  if (*input_val == DAT_08003718) {\n    DAT_0800374c[1] &= 0xfffffffe;\n  }\n  if (*input_val == INPUT_VAL_2) {\n    DAT_0800374c[0] &= 0xfffffffe;\n  }\n  if (*input_val == DAT_0800371c) {\n    DAT_0800374c[0] &= 0xfffffffd;\n  }\n  if (*input_val == DAT_08003720) {\n    DAT_0800374c[0] &= 0xfffffffb;\n  }\n  if (*input_val == DAT_08003724) {\n    DAT_0800374c[0] &= 0xfffffff7;\n  }\n  if (*input_val == DAT_08003728) {\n    DAT_0800374c[0] &= 0xffffffef;\n  }\n  if (*input_val == DAT_0800372c) {\n    DAT_0800374c[0] &= 0xffffffdf;\n  }\n  if (*input_val == DAT_08003730) {\n    DAT_0800374c[1] &= 0xfffffffd;\n  }\n  if (*input_val == DAT_08003734) {\n    DAT_0800374c[1] &= 0xfffeffff;\n  }\n  if (*input_val == DAT_08003738) {\n    DAT_0800374c[1] &= 0xfffdffff;\n  }\n  if (*input_val == DAT_0800373c) {\n    DAT_0800374c[1] &= 0xfffbffff;\n  }\n  if (*input_val == DAT_08003740) {\n    DAT_0800374c[0] &= 0xffffffbf;\n  }\n  if (*input_val == DAT_08003744) {\n    DAT_0800374c[0] &= 0xffffff7f;\n  }\n  if (*input_val == DAT_08003748) {\n    DAT_0800374c[0] &= 0xfffffeff;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_based_on_input_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_combination_valid_08003dd0",
                "param_1": "combination_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_08003df0": "combination_addresses",
                "byte": "combination_index_byte",
                "0x44": "combination_index_offset",
                "DAT_0800312c": "combine_two_bytes"
            },
            "code": "bool is_combination_valid_08003dd0(int combination_index) {\n  uint16_t combined_bytes = DAT_0800312c(get_combination_address(combination_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "is_combination_valid_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_flags_and_values_08000c8c",
                "local_54": "local_value_1",
                "local_50": "local_value_2",
                "local_3c": "local_value_3",
                "local_38": "local_value_4",
                "local_34": "local_value_5",
                "local_30": "local_value_6",
                "local_2c": "local_value_7",
                "local_28": "local_value_8",
                "validate_and_set_input_08002488": "validate_and_set_input",
                "get_value_from_ptr_dat_080025e0": "get_value_from_dat_ptr",
                "validate_input_08000ee0": "validate_input",
                "set_flag_for_param_08000f2c": "set_flag_for_param",
                "set_bits_08000e60": "set_bits",
                "DAT_08000d30": "dat_ptr_1",
                "DAT_08000d34": "dat_ptr_2",
                "DAT_08000d38": "dat_ptr_3"
            },
            "code": "void initialize_flags_and_values_08000c8c(void)\n{\n  uint value_from_dat_ptr;\n  uint flag_value;\n  uint calculated_value;\n  uint input_validation_value_1 = 0xf;\n  uint input_validation_value_2 = 2;\n  uint input_validation_value_3 = 0;\n  uint input_validation_value_4 = 0x1400;\n  uint input_validation_value_5 = 0x1000;\n  uint local_value_1 = 1;\n  uint local_value_2 = 0x50000;\n  uint local_value_3 = 2;\n  uint local_value_4 = 0x400000;\n  uint local_value_5 = 8;\n  uint local_value_6 = 0x150;\n  uint local_value_7 = 2;\n  uint local_value_8 = 7;\n  *(uint *)(DAT_08000d30 + 0x40) |= 0x10000000;\n  *DAT_08000d34 |= 0xc000;\n  FUNC_0800201c(&local_value_1);\n  check_and_return_status_08001f9c();\n  validate_and_set_input_08002488(&input_validation_value_1, 5);\n  value_from_dat_ptr = get_value_from_ptr_dat_080025e0();\n  calculated_value = (uint)((ulonglong)DAT_08000d38 * (ulonglong)value_from_dat_ptr >> 0x26);\n  validate_input_08000ee0(calculated_value);\n  set_flag_for_param_08000f2c(4);\n  set_bits_08000e60(0xffffffff, 0, 0);\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_08001f9c",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0",
                "FUN_0800201c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "initialize_flags_and_values_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "set_data_08000a4e",
                "param_1": "data",
                "param_2": "output_buffer",
                "bVar1": "combined_byte",
                "uVar2": "combined_bytes"
            },
            "code": "uint8_t set_data_08000a4e(uint8_t *data, uint8_t *output_buffer)\n{\n    uint8_t byte1 = *(data + 0xb);\n    uint8_t byte2 = *(data + 0xc);\n    uint8_t byte3 = *(data + 0xd);\n    uint8_t byte4 = *(data + 0xe);\n    uint8_t combined_byte = combine_bytes(byte1, byte2);\n    uint16_t combined_bytes = combine_bytes(byte3, byte4);\n    *(uint16_t *)(output_buffer + (uint16_t)combined_byte * 2) = combined_bytes;\n    *(data + 0x49) = 6;\n    calculate_and_update_crc(data);\n    return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_data_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "handle_data_processing_08004658",
                "process_data_08000c64": "process_data",
                "calculate_offset_if_dat_not_zero_08004338": "calculate_offset_if_data_available",
                "DAT_08004674": "data_available"
            },
            "code": "void handle_data_processing_08004658(void)\n{\n  do_nothing();\n  handle_interrupt_and_set_combination();\n  do {\n    do {\n      process_data();\n    } while (DAT_08004674 == 0);\n    calculate_offset_if_DAT_08004674();\n  } while(true);\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "handle_data_processing_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_valid_value_080034f4",
                "param_1": "input_value",
                "uVar1": "valid_value",
                "find_value_080034da": "find_value"
            },
            "code": "int find_valid_value_080034f4(int input_value) {\n    int valid_value = 0;\n    if (input_value != -1) {\n        valid_value = find_value();\n    }\n    return valid_value;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_08003d18",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_valid_value_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_in_array_0800355e",
                "param_1": "target",
                "param_2": "array"
            },
            "code": "int find_short_in_array_0800355e(int target, short* array)\n{\n    if (target == -1) {\n        return 0;\n    }\n    while (*array != -1) {\n        if (target == *array) {\n            return 1;\n        }\n        array += 6;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "set_default_value_if_not_set_0800573c",
                "param_1": "output_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "default_value_ptr",
                "iVar2": "default_value"
            },
            "code": "void set_default_value_if_not_set_0800573c(int *output_value, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *default_value_ptr = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  int default_value = get_default_value_080040e8(param_2, param_3, param_4, param_4, param_4);\n  if (default_value == -1 && *(int *)default_value_ptr != 0) {\n    *output_value = *(int *)default_value_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "set_default_value_if_not_set_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "validate_and_set_combination_08003e54",
                "param_1": "combination",
                "param_2": "value",
                "param_3": "input_ptr",
                "param_4": "bit_position",
                "iVar1": "is_valid",
                "uVar2": "byte_position"
            },
            "code": "void validate_and_set_combination_08003e54(int combination, int value, int input_ptr, int bit_position) {\n  if (combination != 0) {\n    int is_valid = is_combination_valid();\n    if (is_valid == 0) {\n      uint byte_position = (uint)*(byte *)(combination + 0x44);\n      *(int *)(valid_combinations_ptr + byte_position * 4) = value;\n      *(int *)(input_ptr_ptr + byte_position * 4) = combination;\n      set_bits(input_ptr + 0x5c, 0, 1, byte_position, bit_position);\n      set_bit_at_position(input_ptr + 0x5c);\n      validate_input(*(int *)(input_ptr_ptr + byte_position * 4), combination + 0x45, 1);\n    }\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "validate_and_set_combination_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "pointer_to_data",
                "uVar2": "data",
                "uStack_c": "param_2",
                "uStack_8": "param_3",
                "uStack_4": "param_4",
                "PTR_PTR_DAT_08005008": "PTR_PTR_DAT_08005008",
                "FUNC_080053a0": "cleanup",
                "FUNC_08004a84": "process_data_helper"
            },
            "code": "void process_data_08004fdc(int data, int param_2, int param_3, int param_4)\n{\n  int pointer_to_data = *(int *)PTR_PTR_DAT_08005008;\n  if ((pointer_to_data != 0) && (*(int *)(pointer_to_data + 0x18) == 0)) {\n    cleanup(pointer_to_data);\n  }\n  process_data_08004fdc_helper(pointer_to_data, *(int *)(pointer_to_data + 8), data, &param_2, data, &param_2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc",
            "code_backup": "\nvoid FUN_08004fdc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08005008;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_080053a0(iVar1);\n  }\n  FUNC_08004a84(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "set_permissions_080056d4",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "ptr",
                "iVar2": "set_result"
            },
            "code": "void set_permissions_080056d4(int *result, int start_address, int size, int permissions, int end_address){\n  undefined *ptr;\n  int set_result;\n  \n  ptr = PTR_DAT_080056f4;\n  *(int *)PTR_DAT_080056f4 = 0;\n  set_result = set_memory_permissions_080040d6(start_address, size, size, permissions, end_address);\n  if ((set_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "set_permissions_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c"
            },
            "code": "int get_one_thunk_0800410c() {\n  return 1;\n}\n",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "update_array_080033d8",
                "param_1": "array_index",
                "local_1c": "local_array",
                "find_valid_value_080034f4": "find_valid_value",
                "PTR_DAT_08003408": "valid_values",
                "check_array_value_at_index_08003380_08003380": "check_array_value_at_index",
                "clear_bit_08000f72": "clear_bit",
                "set_flag_to_2_and_clear_bit_08000f56": "set_flag_to_2_and_clear_bit"
            },
            "code": "void update_array_080033d8(int array_index)\n{\n    int valid_value = find_valid_value(array_index, PTR_DAT_08003408);\n    if (valid_value != 0)\n    {\n        int check_result = check_array_value_at_index(array_index);\n        if (check_result == 0 || check_result == 0x10)\n        {\n            clear_bit(local_array, check_result);\n            set_flag_to_2_and_clear_bit(local_array);\n        }\n    }\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_array_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = get_value_shifted_by_constant_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = get_value_shifted_by_constant_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = get_value_shifted_by_constant_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = get_value_shifted_by_constant_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = get_value_shifted_by_constant_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = get_shifted_value_from_ptr_dat_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_shifted_value_from_ptr_dat_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = get_shifted_value_from_ptr_dat_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = get_shifted_value_from_ptr_dat_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = get_shifted_value_from_ptr_dat_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = get_value_shifted_by_constant_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_value_shifted_by_constant_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = get_value_shifted_by_constant_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = get_value_shifted_by_constant_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = get_value_shifted_by_constant_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = get_shifted_value_from_ptr_dat_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = get_shifted_value_from_ptr_dat_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = get_shifted_value_from_ptr_dat_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = get_shifted_value_from_ptr_dat_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = get_shifted_value_from_ptr_dat_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "validate_and_set_input_08002488",
                "param_1": "input",
                "param_2": "len",
                "puVar1": "ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "value"
            },
            "code": "uint32_t validate_and_set_input_08002488(uint32_t *input, uint32_t len)\n{\n    uint32_t *ptr = global_data;\n    if (input == NULL) {\n        return 1;\n    }\n    uint32_t max_len = *ptr & 0xf;\n    if (max_len < len) {\n        *(char *)ptr = (char)len;\n        if (len != (*ptr & 0xf)) {\n            return 1;\n        }\n    }\n    if ((*input & 2) != 0) {\n        if ((*input & 4) != 0) {\n            global_data[2] |= 0x1c00;\n        }\n        if ((*input & 8) != 0) {\n            global_data[2] |= 0xe000;\n        }\n        global_data[2] = (global_data[2] & 0xffffff0f) | input[2];\n    }\n    if ((*input & 1) != 0) {\n        uint32_t uVar = input[1];\n        if (uVar == 1) {\n            if ((global_data[0] & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if (uVar - 2 < 2) {\n            if ((global_data[0] & 0x2000000) == 0) {\n                return 1;\n            }\n        }\n        else if ((global_data[0] & 2) == 0) {\n            return 1;\n        }\n        global_data[2] = uVar | (global_data[2] & 0xfffffffc);\n        uint32_t start_time = get_time();\n        while (true) {\n            if ((global_data[2] & 0xc) == input[1] * 4) {\n                break;\n            }\n            uint32_t current_time = get_time();\n            if (5000 < current_time - start_time) {\n                return 3;\n            }\n        }\n    }\n    ptr = global_data;\n    if (len < (*ptr & 0xf)) {\n        *(char *)ptr = (char)len;\n        if (len != (*ptr & 0xf)) {\n            return 1;\n        }\n    }\n    if ((*input & 4) != 0) {\n        global_data[2] = (global_data[2] & 0xffffe3ff) | input[3];\n    }\n    if ((*input & 8) != 0) {\n        global_data[2] = (global_data[2] & 0xffff1fff) | (input[4] << 3);\n    }\n    uint32_t value = get_value_based_on_conditions();\n    *(uint32_t *)global_data_ptr = value >> global_data_shift[(global_data[2] << 0x18) >> 0x1c];\n    validate_and_set_input_08002488(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080023b4",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "validate_and_set_input_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "set_params_08004544",
                "param_1": "func_params",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "param_5": "param_4"
            },
            "code": "void set_params_08004544(undefined4 *func_params, undefined param_1, undefined param_2, undefined param_3, undefined param_4) {\n  *func_params = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(func_params + 1) = param_1;\n  *(undefined *)((int)func_params + 5) = param_2;\n  *(undefined *)((int)func_params + 6) = param_3;\n  *(undefined *)((int)func_params + 7) = param_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "set_params_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "find_valid_shortest_path_08003cc8",
                "sVar1": "start_value",
                "puVar2": "path_data",
                "uVar3": "shortest_path_length",
                "iVar4": "valid_value_index",
                "uVar5": "valid_value",
                "PTR_DAT_08003d08": "start_value_pointer",
                "PTR_DAT_08003d0c": "valid_values_pointer",
                "PTR_DAT_08003d10": "path_lengths_pointer",
                "PTR_DAT_08003d14": "path_data_pointer",
                "FUNC_08003978": "process_path_data"
            },
            "code": "void find_valid_shortest_path_08003cc8(void)\n{\n  short start_value;\n  undefined *path_data;\n  undefined2 shortest_path_length;\n  int valid_value_index;\n  undefined4 valid_value;\n\n  start_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  valid_value_index = find_valid_value(start_value, PTR_DAT_08003d0c);\n  if (valid_value_index != 0) {\n    valid_value = find_valid_value(start_value, PTR_DAT_08003d0c);\n    shortest_path_length = find_shortest_path_length(valid_value, PTR_DAT_08003d10);\n    path_data = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = shortest_path_length;\n    *(short *)(path_data + 0x58) = start_value;\n    *(undefined4 *)(path_data + 0x48) = 0x2580;\n    *(undefined4 *)(path_data + 0x54) = 0;\n    *(undefined4 *)(path_data + 0x4c) = 0;\n    *(undefined4 *)(path_data + 0x50) = 0;\n    FUNC_08003978(path_data);\n  }\n  return;\n}",
            "called": [
                "FUN_080034f4",
                "FUN_08003978",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "find_valid_shortest_path_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_values_08000fb4",
                "param_1": "memory_block1",
                "param_2": "memory_block2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "bit_position",
                "uVar6": "bit_offset",
                "uVar7": "flag",
                "uVar9": "value",
                "iVar8": "i",
                "iVar10": "j"
            },
            "code": "void update_values_08000fb4(uint *memory_block1, uint *memory_block2)\n{\n  uint *ptr1;\n  uint *ptr2;\n  uint bit_position;\n  uint bit_value;\n  uint bit_mask;\n  uint bit_offset;\n  uint value;\n  uint flag;\n  int i, j;\n  \n  for (bit_position = 0; bit_position < 16; bit_position++) {\n    bit_mask = 1 << (bit_position & 0xff);\n    bit_value = bit_mask & *memory_block2;\n    if (bit_mask == bit_value) {\n      if ((memory_block2[1] == 2) || (memory_block2[1] == 0x12)) {\n        i = (bit_position >> 3) + 8;\n        j = (bit_position & 7) << 2;\n        memory_block1[i] = memory_block1[i] & ~(0xf << j) | memory_block2[4] << j;\n      }\n      bit_offset = bit_position << 1;\n      bit_mask = ~(3 << (bit_offset & 0xff));\n      value = (memory_block2[1] & 3) << (bit_offset & 0xff);\n      memory_block1[0] = memory_block1[0] & bit_mask | value;\n      flag = memory_block2[1];\n      if (((flag - 1 < 2) || (flag == 0x11)) || (flag == 0x12)) {\n        memory_block1[2] = memory_block1[2] & bit_mask | memory_block2[3] << (bit_offset & 0xff);\n        memory_block1[1] = memory_block1[1] & ~bit_mask | ((memory_block2[1] << 0x1b) >> 0x1f) << (bit_position & 0xff);\n      }\n      memory_block1[3] = bit_mask & memory_block1[3] | memory_block2[2] << (bit_offset & 0xff);\n      if ((memory_block2[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_0800118c + 0x44) = *(uint *)(DAT_0800118c + 0x44) | 0x4000;\n        j = (bit_position & 3) << 2;\n        if (memory_block1 == DAT_08001190) {\n          i = 0;\n        }\n        else if (memory_block1 == DAT_08001194) {\n          i = 1;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x100) {\n          i = 2;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x200) {\n          i = 3;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x300) {\n          i = 4;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x400) {\n          i = 5;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x500) {\n          i = 6;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x600) {\n          i = 7;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x700) {\n          i = 8;\n        }\n        else if (memory_block1 == DAT_08001194 + 0x800) {\n          i = 9;\n        }\n        else {\n          i = 10;\n        }\n        *(uint *)(DAT_08001184 + ((bit_position >> 2) + 2) * 4) =\n             *(uint *)(DAT_08001184 + ((bit_position >> 2) + 2) * 4) & ~(0xf << j) | i << j;\n        ptr1 = DAT_08001188;\n        bit_mask = ~bit_value;\n        value = *DAT_08001188 & bit_mask;\n        if ((memory_block2[1] & 0x10000) != 0) {\n          value = bit_value | *DAT_08001188;\n        }\n        *DAT_08001188 = value;\n        ptr2 = DAT_08001188;\n        value = bit_mask & ptr1[1];\n        if ((memory_block2[1] & 0x20000) != 0) {\n          value = bit_value | ptr1[1];\n        }\n        DAT_08001188[1] = value;\n        ptr1 = DAT_08001188;\n        value = bit_mask & ptr2[2];\n        if ((memory_block2[1] & 0x100000) != 0) {\n          value = bit_value | ptr2[2];\n        }\n        DAT_08001188[2] = value;\n        bit_mask = bit_mask & ptr1[3];\n        if ((memory_block2[1] & 0x200000) != 0) {\n          bit_mask = bit_value | ptr1[3];\n        }\n        DAT_08001188[3] = bit_mask;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "update_values_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "execute_command_08001bfc",
                "param_1": "command",
                "cVar1": "current_char",
                "puVar2": "ptr_command",
                "puVar3": "ptr_command_9"
            },
            "code": "uint execute_command_08001bfc(uint **command)\n{\n  char current_char = *(char *)((int)command + 0x3d);\n  (*command)[1] &= 0xfffff8ff;\n  **command |= 1;\n  **command &= 0xfffffbff;\n  uint *ptr_command = *command;\n  if ((ptr_command[1] & 0x800) != 0) {\n    if ((*(char *)((int)command + 0x3d) == '\"') || (*(char *)((int)command + 0x3d) == '*')) {\n      *(short *)((int)command + 0x2a) = (short)*(undefined4 *)(*command[0xe] + 4);\n    }\n    else {\n      *(short *)((int)command + 0x2a) = (short)*(undefined4 *)(*command[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)command + 0x2a) != 0) {\n    if ((ptr_command[5] & 4) != 0) {\n      uint *ptr_command_9 = command[9];\n      command[9] = (uint *)((int)ptr_command_9 + 1);\n      *(char *)ptr_command_9 = (char)ptr_command[4];\n      *(short *)((int)command + 0x2a) -= 1;\n    }\n    if (((*command)[5] & 0x40) != 0) {\n      ptr_command = command[9];\n      command[9] = (uint *)((int)ptr_command + 1);\n      *(char *)ptr_command = (char)(*command)[4];\n      *(short *)((int)command + 0x2a) -= 1;\n    }\n    command[0x10] = (uint *)((uint)command[0x10] | 4);\n  }\n  if (command[0x10] == (uint *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      command[0xb] = PTR_execute_command_08001bfc_if_valid_input_080038d0;\n      command[0xc] = (uint *)0x0;\n      *(undefined *)((int)command + 0x3d) = 0x20;\n      *(undefined *)((int)command + 0x3e) = 0;\n      execute_command_08001bfc_if_valid_input_080038d0();\n    }\n    else if ((command[0xc] == (uint *)0x22) || (current_char == '\"')) {\n      command[0xc] = (uint *)0x0;\n      *(undefined *)((int)command + 0x3d) = 0x20;\n      *(undefined *)((int)command + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    process_input_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001ab0",
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "execute_command_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "check_and_update_08002d72",
                "param_1": "data_ptr",
                "do_nothing_08002d70": "do_nothing",
                "*(char *)((int)param_1 + 0x39)": "data_ptr[0x39]",
                "*(undefined *)(param_1 + 0xe)": "data_ptr[0xe]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data_ptr + 0xc)",
                "FUNC_080029c8": "update_data"
            },
            "code": "int check_and_update_08002d72(int *data_ptr) {\n  if (data_ptr != NULL) {\n    if (data_ptr[0x39] == 0) {\n      data_ptr[0xe] = 0;\n      do_nothing();\n    }\n    data_ptr[0x39] = 0x24;\n    *(uint *)(*data_ptr + 0xc) &= 0xffffdfff;\n    update_data(data_ptr);\n    *(uint *)(*data_ptr + 0x10) &= 0xffffb7ff;\n    *(uint *)(*data_ptr + 0x14) &= 0xffffffd5;\n    *(uint *)(*data_ptr + 0xc) |= 0x2000;\n    data_ptr[0xf] = 0;\n    data_ptr[0x39] = 0x20;\n    data_ptr[0x3a] = 0x20;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "check_and_update_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "validate_input_080007f0",
                "param_1": "input",
                "param_2": "counter",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "valid_input",
                "bVar2": "input_type",
                "cVar3": "combined_byte_1",
                "cVar4": "combined_byte_2",
                "iVar5": "combined_byte_3",
                "iVar7": "combined_input",
                "uVar6": "i",
                "PTR_DAT_080008c8": "input_types"
            },
            "code": "int validate_input_080007f0(int input, int* counter, uint32_t param_3, int param_4) {\n    bool valid_input = false;\n    byte input_type;\n    char combined_byte_1;\n    char combined_byte_2;\n    int combined_input;\n    \n    for (int i = 0; i < 8; i++) {\n        input_type = (byte)PTR_DAT_080008c8[i];\n        if (input_type == *(byte *)(input + 10)) {\n            valid_input = true;\n            break;\n        }\n    }\n    \n    if (!valid_input) {\n        *counter = *counter + 1;\n        return 1;\n    }\n    \n    int index = *(byte *)(input + 10) - 1;\n    switch(*(byte *)(input + 10)) {\n        case 1:\n        case 2:\n        case 0xf:\n            goto switchD_08000816_caseD_1;\n        case 3:\n        case 4:\n        case 0x10:\n            combined_byte_1 = combine_bytes_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),param_3,index,param_4);\n            combined_byte_2 = combine_bytes_08004640(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n            if (*(byte *)(input + 0x60) < (byte)(combined_byte_2 + combined_byte_1)) {\n                return 2;\n            }\n            return 0;\n        case 5:\n            combined_input = combine_bytes_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),param_3,index,param_4);\n            if ((uint)*(byte *)(input + 0x60) < (uint)(combined_input << 0x14) >> 0x18) {\n                return 2;\n            }\n            return 0;\n        case 6:\n            combined_byte_1 = combine_bytes_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),param_3,index,param_4);\n            if (*(byte *)(input + 0x60) < combined_byte_1) {\n                return 2;\n            }\n            return 0;\n        default:\n            return 0;\n    }\n\nswitchD_08000816_caseD_1:\n    combined_input = combine_bytes_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),*(byte *)(input + 10),index,param_4);\n    int combined_byte_3 = combine_bytes_08004640(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n    if ((uint)*(byte *)(input + 0x60) < (((uint)(combined_input << 0xc) >> 0x10) + ((uint)(combined_byte_3 << 0xc) >> 0x10) & 0xff)) {\n        return 2;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "validate_input_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "result",
                "param_2": "data_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data",
                "puVar2": "ptr",
                "iVar3": "valid_data",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "code": "void process_data_0800562a(int *result, int data_ptr, int arg1, int arg2) {\n  short data = *(short *)(data_ptr + 0xe);\n  *(ushort *)(data_ptr + 0xc) &= 0xefff;\n  if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x17) < 0) {\n    execute_return_zero(result, data, 0, 2);\n  }\n  else {\n    int valid_data = find_valid_data_wrapper(data, arg1, arg2, arg2, arg2);\n    if (valid_data == -1 && *(int *)PTR_DAT_080056b0 != 0) {\n      *result = *(int *)PTR_DAT_080056b0;\n    }\n  }\n}",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_struct_if_param_one_equals_one_080044d8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void initialize_struct_if_param_one_equals_one_080044d8(int first_param, int second_param, undefined4 third_param, undefined4 fourth_param) {\n    if (first_param != 1) {\n        return;\n    }\n    if (second_param == 0xffff) {\n        initialize_struct_and_set_values_0800447c(PTR_DAT_080044f8, DAT_080044f4, third_param, 0xffff, fourth_param);\n    }\n    return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_struct_if_param_one_equals_one_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_combination_valid_08003df4",
                "param_1": "input_value",
                "uVar1": "combined_value",
                "PTR_DAT_08003e14": "data_pointer",
                "byte": "byte_value",
                "combine_two_bytes_0800312c": "combine_two_bytes"
            },
            "code": "bool is_combination_valid_08003df4(int input_value){\n    uint16_t byte_value = *(uint32_t *)(PTR_DAT_08003e14 + (uint)*(uint8_t *)(input_value + 0x44) * 4);\n    uint16_t combined_value = combine_two_bytes_0800312c(byte_value);\n    return (combined_value & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_combination_valid_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_valid_entry_08005400",
                "param_1": "array",
                "param_2": "size",
                "param_3": "init_value",
                "param_4": "fill_value",
                "piVar1": "entry",
                "piVar2": "next_entry",
                "iVar3": "index",
                "ppiVar4": "array_ptr"
            },
            "code": "int * find_valid_entry_08005400(undefined4 *array, undefined4 size, undefined4 init_value, undefined4 fill_value)\n{\n  int *entry;\n  int *next_entry;\n  int index;\n  int **array_ptr = *(int **)0x08005474;\n  if (*(int *)(array_ptr + 0x18) == 0) {\n    initialize_array(array_ptr);\n  }\n  do {\n    next_entry = array_ptr[2];\n    entry = array_ptr[1];\n    while (entry >= array_ptr[1]) {\n      if (*(short *)(next_entry + 3) == 0) {\n        *(undefined2 *)((int)next_entry + 0xe) = 0xffff;\n        *(undefined2 *)(next_entry + 3) = 1;\n        next_entry[0x19] = 0;\n        *next_entry = 0;\n        next_entry[2] = 0;\n        next_entry[1] = 0;\n        next_entry[4] = 0;\n        next_entry[5] = 0;\n        next_entry[6] = 0;\n        fill_array_with_value(next_entry + 0x17, 0, 8, 1, fill_value);\n        next_entry[0xd] = 0;\n        next_entry[0xe] = 0;\n        next_entry[0x12] = 0;\n        next_entry[0x13] = 0;\n        return next_entry;\n      }\n      next_entry += 0x1a;\n      entry -= 1;\n    }\n    if (*array_ptr == (int *)0x0) {\n      entry = allocate_array_of_structs(array, size);\n      *array_ptr = entry;\n      if (entry == (int *)0x0) {\n        *array = 0xc;\n        return (int *)0x0;\n      }\n    }\n    array_ptr = (int **)*array_ptr;\n  } while( true );\n}",
            "called": [
                "FUN_08005374",
                "FUN_080053a0",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "find_valid_entry_08005400",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_080053a0(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_array_of_structs_08005374(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_return_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_08003582(int value1, int value2)\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_and_return_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "process_input_and_run_infinite_loop_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void process_input_and_run_infinite_loop_08005760()\n{\n  code *jump_table;\n  jump_table = process_input_and_run_infinite_loop_08005760;\n  if (-1 < *(int *)PTR_DAT_080057fc << 0x1f) {\n    *(undefined4 *)PTR_DAT_080057fc = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005800 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005800 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005804 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005804 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005808 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005808 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800580c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800580c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005810 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005810 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005814 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005814 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005818 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005818 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800581c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800581c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005820 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005820 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08005824 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08005824 = 1;\n  }\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "process_input_and_run_infinite_loop_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_08004678",
                "param_1": "num",
                "cVar1": "bits_set"
            },
            "code": "char count_bits_set_08004678(uint num) {\n  char bits_set = 0;\n  while (num != 1) {\n    bits_set++;\n    num = num >> 1;\n  }\n  return bits_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_set_flag_for_input_08003900",
                "param_1": "input_value",
                "iVar1": "subtracted_value",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void check_and_set_flag_for_input_08003900(int input_value) {\\n  int subtracted_value = subtract_four_from_input();\\n  if (*(char *)(subtracted_value + 0x5f) == \"\\0\") {\\n    set_bit_and_flags(input_value);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_for_input_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bit_index"
            },
            "code": "void set_bit_in_array_08000f0c(uint bit_index) {\n  if (bit_index >= 0) {\n    int array_index = (bit_index >> 5) + 0x60;\n    int* array_ptr = (int*)(DAT_08000f28 + array_index * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "buffer_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "bVar1": "byte1",
                "cVar2": "char1",
                "bVar3": "byte2",
                "bVar4": "byte3",
                "uVar5": "i",
                "uVar6": "j"
            },
            "code": "int process_data_08000998(int data_ptr, int buffer_ptr, uint32_t arg1, uint32_t arg2)\n{\n  uint8_t byte1;\n  char char1;\n  uint8_t byte2;\n  uint8_t byte3;\n  uint32_t i;\n  uint32_t j;\n  byte2 = combine_bytes(*(uint8_t *)(data_ptr + 0xb), *(uint8_t *)(data_ptr + 0xc), arg1, arg2, arg2);\n  byte3 = combine_bytes(*(uint8_t *)(data_ptr + 0xd), *(uint8_t *)(data_ptr + 0xe));\n  *(uint8_t *)(data_ptr + 0xb) = byte3 << 1;\n  *(uint8_t *)(data_ptr + 0x49) = 3;\n  for (i = (uint32_t)byte2; i < (uint32_t)byte2 + (uint32_t)byte3; i = (i + 1) & 0xff) {\n    byte1 = *(uint8_t *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint32_t)byte1 + 9) = (char)((uint16_t)*(uint16_t *)(buffer_ptr + i * 2) >> 8);\n    j = (uint32_t)byte1 + 1 & 0xff;\n    char1 = (char)j;\n    *(uint8_t *)(data_ptr + 0x49) = char1;\n    *(uint8_t *)(data_ptr + j + 9) = *(uint8_t *)(buffer_ptr + i * 2);\n    *(uint8_t *)(data_ptr + 0x49) = char1 + '\\x01';\n  }\n  char1 = *(char *)(data_ptr + 0x49);\n  calculate_and_update_crc(data_ptr);\n  return (int)(char)(char1 + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_size",
                "puVar1": "value_ptr",
                "uVar2": "thunk_result",
                "piVar3": "function_pointers",
                "iVar4": "error_code",
                "pcVar5": "function_ptr",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar6": "function_pointers_ptr"
            },
            "code": "int process_input_080055d0(uint input_size) {\n  int error_code;\n  int *function_pointers = *(int **)function_pointers_ptr_ptr;\n  if (input_size > 31) {\n    *function_pointers = 22;\n    return -1;\n  }\n  int function_index = function_pointers[17];\n  if (function_index != 0) {\n    code *function_ptr = *(code **)(function_index + input_size * 4);\n    if (function_ptr != (code *)0x0) {\n      if (function_ptr != (code *)0x1) {\n        if (function_ptr == (code *)0xffffffff) {\n          *function_pointers = 22;\n          return 1;\n        }\n        *(undefined4 *)(function_index + input_size * 4) = 0;\n        (*function_ptr)(input_size);\n      }\n      return 0;\n    }\n  }\n  uint *function_pointers_ptr = function_pointers_ptr_ptr;\n  uint thunk_result = get_one_thunk(function_pointers);\n  undefined *value_ptr = value_ptr_ptr;\n  *(undefined4 *)value_ptr_ptr = 0;\n  error_code = set_value_to_22(thunk_result, input_size, input_size, 0, function_pointers_ptr, unaff_r4, unaff_r5, in_lr);\n  if ((error_code == -1) && (*(int *)value_ptr != 0)) {\n    *function_pointers = *(int *)value_ptr;\n  }\n  return error_code;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "processReturnValue_080056f8",
                "param_1": "output",
                "param_2": "inputValue",
                "puVar1": "ptr",
                "iVar2": "returnValue"
            },
            "code": "void processReturnValue_080056f8(int *output, undefined4 inputValue)\n{\n  undefined *ptr = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int returnValue = return_one_080040e0(inputValue);\n  if ((returnValue == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "processReturnValue_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_permissions_080054b4",
                "param_1": "file_permissions",
                "param_2": "file_descriptor",
                "param_3": "is_executable",
                "param_4": "is_shared_library",
                "iVar1": "set_permission_result",
                "uVar2": "return_value",
                "auStack_4c": "permissions_stack",
                "local_48": "file_mode"
            },
            "code": "int check_permissions_080054b4(uint16_t* file_permissions, int file_descriptor, uint* is_executable) {\n    int set_permission_result;\n    uint is_shared_library;\n    uint is_negative_permissions = ((uint)*(ushort *)(file_descriptor + 0xc) << 0x18) >> 0x1f;\n\n    if (*file_permissions < 0) {\n        set_permission_result = set_permissions(file_permissions, file_descriptor, &is_shared_library);\n        if (set_permission_result < 0) {\n            *is_executable = 0;\n            if (is_negative_permissions) {\n                return 0x40;\n            }\n        }\n    } else {\n        *is_executable = ((uint)*(ushort *)(file_descriptor + 0xe) < 0) && ((*(uint*)(file_descriptor) & 0xf000) == 0x2000);\n    }\n    return 0x400;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "parse_input_0800171a",
                "param_1": "input_array",
                "puVar2": "ptr",
                "cVar1": "current_char"
            },
            "code": "uint32_t parse_input_0800171a(uint32_t **input_array)\n{\n  char current_char = *(char *)((int)input_array + 0x3d);\n  uint32_t *ptr = input_array[0xb];\n  if ((*(short *)(input_array + 10) == 0) && (current_char == '!')) {\n    if ((ptr == (uint32_t *)0x4) || ((ptr == (uint32_t *)0x8 || (ptr == (uint32_t *)0xffff0000)))) {\n      (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n      **input_array = **input_array | 0x200;\n      input_array[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      if (*(char *)((int)input_array + 0x3e) == '@') {\n        *(undefined *)((int)input_array + 0x3e) = 0;\n        do_nothing_08001718();\n      }\n      else {\n        *(undefined *)((int)input_array + 0x3e) = 0;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n      input_array[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      do_nothing_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input_array + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input_array + 0x2a) == 0) {\n      (*input_array)[1] = (*input_array)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_array + 0x3e) == '@') {\n      if (input_array[0x14] == (uint32_t *)0x0) {\n        if (input_array[0x13] == (uint32_t *)0x1) {\n          (*input_array)[4] = (uint32_t)input_array[0x12] & 0xff;\n          input_array[0x14] = (uint32_t *)((int)input_array[0x14] + 2);\n        }\n        else {\n          (*input_array)[4] = (uint32_t)((int)input_array[0x12] << 0x10) >> 0x18;\n          input_array[0x14] = (uint32_t *)((int)input_array[0x14] + 1);\n        }\n      }\n      else if (input_array[0x14] == (uint32_t *)0x1) {\n        (*input_array)[4] = (uint32_t)input_array[0x12] & 0xff;\n        input_array[0x14] = (uint32_t *)((int)input_array[0x14] + 1);\n      }\n      else if (input_array[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input_array + 0x3d) == '\"') {\n          **input_array = **input_array | 0x100;\n        }\n        else if (*(char *)((int)input_array + 0x3d) == '!') {\n          ptr = input_array[9];\n          input_array[9] = (uint32_t *)((int)ptr + 1);\n          (*input_array)[4] = (uint32_t)*(byte *)ptr;\n          *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = input_array[9];\n      input_array[9] = (uint32_t *)((int)ptr + 1);\n      (*input_array)[4] = (uint32_t)*(byte *)ptr;\n      *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "parse_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "set_params_if_flag_is_set_08004560",
                "param_1": "flag",
                "param_2": "value",
                "set_params_08004544": "set_params",
                "PTR_DAT_08004588": "PTR_PARAMS_DATA"
            },
            "code": "void set_params_if_flag_is_set_08004560(int flag, int value) {\n  if ((flag == 1) && (value == 0xffff)) {\n    set_params(PTR_DAT_08004588, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "set_params_if_flag_is_set_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_08000a7a",
                "param_1": "bytes",
                "param_2": "output",
                "param_3": "num_bytes",
                "param_4": "starting_bit",
                "iVar1": "byte_offset",
                "iVar2": "num_bits",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "byte",
                "uVar6": "bit_offset",
                "uVar7": "byte_index"
            },
            "code": "int set_bits_08000a7a(uint8_t *bytes, uint16_t *output, uint8_t num_bytes, uint8_t starting_bit)\\n\\\n{\\n\\\n  int byte_offset = combine_bytes(*(bytes + 0xb), *(bytes + 0xc), 0, 0, 0);\\n\\\n  int num_bits = combine_bytes(*(bytes + 0xd), *(bytes + 0xe), 0, 0, 0);\\n\\\n  uint8_t bit_index = starting_bit;\\n\\\n  uint8_t byte_index = 7;\\n\\\n  for (uint8_t i = 0; i < num_bits; i++) {\\n\\\n    uint8_t bit = *(bytes + byte_index + 9) >> bit_index & 1U;\\n\\\n    uint8_t byte = (byte_offset + i) / 2;\\n\\\n    uint8_t bit_offset = (byte_offset + i) % 2 * 8;\\n\\\n    if (bit == 0) {\\n\\\n      *(output + byte) = *(output + byte) & ~(1 << (bit_offset + bit_index));\\n\\\n    }\\n\\\n    else {\\n\\\n      *(output + byte) = *(output + byte) | (1 << (bit_offset + bit_index));\\n\\\n    }\\n\\\n    bit_index++;\\n\\\n    if (bit_index > 7) {\\n\\\n      byte_index++;\\n\\\n      bit_index = 0;\\n\\\n    }\\n\\\n  }\\n\\\n  *(bytes + 0x49) = 6;\\n\\\n  calculate_and_update_crc(bytes);\\n\\\n  return 8;\\n\\\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bits_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "data",
                "param_2": "data_ptr1",
                "param_3": "data_ptr2",
                "param_4": "data2",
                "param_5": "func_ptr",
                "iVar1": "i",
                "uVar2": "max_length",
                "uVar3": "current_length",
                "bVar4": "is_four_byte_aligned"
            },
            "code": "undefined4 process_data_08004cb0(undefined4 data, uint *data_ptr1, uint *data_ptr2, undefined4 data2, code *func_ptr)\n{\n  int i;\n  uint max_length;\n  uint current_length;\n  bool is_four_byte_aligned;\n  \n  max_length = data_ptr1[4];\n  if ((int)data_ptr1[4] < (int)data_ptr1[2]) {\n    max_length = data_ptr1[2];\n  }\n  *data_ptr2 = max_length;\n  if (*(char *)((int)data_ptr1 + 0x43) != '\\0') {\n    *data_ptr2 = max_length + 1;\n  }\n  if ((int)(*data_ptr1 << 0x1a) < 0) {\n    *data_ptr2 = *data_ptr2 + 2;\n  }\n  current_length = *data_ptr1 & 6;\n  if (current_length == 0) {\n    for (; (int)current_length < (int)(data_ptr1[3] - *data_ptr2); current_length = current_length + 1) {\n      i = (*func_ptr)(data,data2,(int)data_ptr1 + 0x19,1);\n      if (i == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  current_length = (uint)*(byte *)((int)data_ptr1 + 0x43);\n  if (current_length != 0) {\n    current_length = 1;\n  }\n  if ((int)(*data_ptr1 << 0x1a) < 0) {\n    *(undefined *)((int)data_ptr1 + current_length + 0x43) = 0x30;\n    *(undefined *)((int)data_ptr1 + current_length + 0x44) = *(undefined *)((int)data_ptr1 + 0x45);\n    current_length = current_length + 2;\n  }\n  i = (*func_ptr)(data,data2,(int)data_ptr1 + 0x43,current_length);\n  if (i != -1) {\n    max_length = data_ptr1[3];\n    is_four_byte_aligned = (*data_ptr1 & 6) == 4;\n    if (is_four_byte_aligned) {\n      max_length = max_length - *data_ptr2;\n    }\n    if (is_four_byte_aligned) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    else {\n      max_length = 0;\n    }\n    if ((int)data_ptr1[4] < (int)data_ptr1[2]) {\n      max_length = max_length + (data_ptr1[2] - data_ptr1[4]);\n    }\n    current_length = 0;\n    while( true ) {\n      if (max_length == current_length) {\n        return 0;\n      }\n      i = (*func_ptr)(data,data2,(int)data_ptr1 + 0x1a,1);\n      if (i == -1) break;\n      current_length = current_length + 1;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "process_data_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_not_null_08003594",
                "PTR_DAT_080035a4": "function_ptr_data_pointer",
                "PTR_DAT_080035a8": "function_parameter_data_pointer"
            },
            "code": "void execute_code_if_not_null_08003594(void)\n{\n  code* function_ptr = *(code**)PTR_DAT_080035a4;\n  if (function_ptr != NULL)\n  {\n    int parameter = *(int*)PTR_DAT_080035a8;\n    (*function_ptr)(parameter);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "set_flags_08002940",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "uint": "unsigned int",
                "undefined": "char",
                "(int)param_1": "(int)ptr_param",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_flags_08002940(int *PTR_param) {\n  uint *ptr1 = (uint *)(*PTR_param + 0xc);\n  uint *ptr2 = (uint *)(*PTR_param + 0x14);\n  *ptr1 &= 0xfffffedf;\n  *ptr2 &= 0xfffffffe;\n  char *ptr3 = (char *)(PTR_param + 0x3a);\n  *ptr3 = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_pointer_and_return_value_from_global_data_08004204"
            },
            "code": "void get_pointer_and_return_value_from_global_data_08004204() \n{\n  get_pointer_and_return_value_from_global_data_08004204_0800346c();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_pointer_and_return_value_from_global_data_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "add_byte_and_return_08003476",
                "add_byte_to_uint_and_store_08000e18": "add_byte_to_uint_and_store",
                "do_nothing_and_return_08000f4e": "do_nothing_and_return",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void add_byte_and_return_08003476(void)\n{\n  add_byte_to_uint_and_store();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08000f4e",
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "add_byte_and_return_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_based_on_index_08004444",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_based_on_index_08004444(int index, uint value) {\n  undefined2 value_to_set;\n  code *jump_table;\n  if (value < 0x60) {\n    value_to_set = *(undefined2 *)(PTR_DAT_0800445c + value * 2);\n  }\n  else {\n    value_to_set = 0xffff;\n  }\n  *(undefined2 *)(index + 0x12e) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_based_on_index_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_pointer_and_return_value_from_global_data_0800346c",
                "get_pointer_from_global_data_and_return_value_08000e30": "get_pointer_from_global_data_and_return_value"
            },
            "code": "void get_pointer_and_return_value_from_global_data_0800346c(void)\n{\n  get_pointer_from_global_data_and_return_value_08000e30();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_pointer_and_return_value_from_global_data_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_structure_080053a0",
                "param_1": "data_structure",
                "uVar1": "entry",
                "iVar2": "ptr",
                "bVar3": "is_ptr_equal_to_data_structure"
            },
            "code": "void initialize_data_structure_080053a0(int data_structure)\n{\n    if (*(int *)(data_structure + 0x18) == 0) {\n        *(int *)(data_structure + 0x48) = 0;\n        *(int *)(data_structure + 0x4c) = 0;\n        *(int *)(data_structure + 0x50) = 0;\n        int ptr = *(int *)PTR_PTR_DAT_080053f8;\n        *(undefined **)(data_structure + 0x28) = PTR_LAB_08005320_1_080053fc;\n        bool is_ptr_equal_to_data_structure = data_structure == ptr;\n        if (is_ptr_equal_to_data_structure) {\n            ptr = 1;\n        }\n        if (is_ptr_equal_to_data_structure) {\n            *(int *)(data_structure + 0x18) = ptr;\n        }\n        int entry1 = find_valid_entry_08005400();\n        *(int *)(data_structure + 4) = entry1;\n        int entry2 = find_valid_entry_08005400(data_structure);\n        *(int *)(data_structure + 8) = entry2;\n        int entry3 = find_valid_entry_08005400(data_structure);\n        *(int *)(data_structure + 0xc) = entry3;\n        initialize_array_0800532c(*(int *)(data_structure + 4), 4, 0);\n        initialize_array_0800532c(*(int *)(data_structure + 8), 9, 1);\n        initialize_array_0800532c(*(int *)(data_structure + 0xc), 0x12, 2);\n        *(int *)(data_structure + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = get_pointer_from_global_data_and_return_value_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = get_pointer_from_global_data_and_return_value_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "update_flags_080028d4",
                "param_1": "flags",
                "param_2": "bit_position",
                "param_3": "new_value",
                "PTR_": "",
                "DAT_": "",
                "*": ""
            },
            "code": "void update_flags_080028d4(int flags, uint bit_position, int new_value) {\n    uint* flags_ptr = (uint*)(flags + 0x20);\n    uint mask = ~(4 << (bit_position & 0xff));\n    *flags_ptr = (*flags_ptr & mask) | (new_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "update_flags_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "find_valid_data_wrapper_080040ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "find_valid_data_08003d18": "find_valid_data"
            },
            "code": "void find_valid_data_wrapper_080040ec(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  find_valid_data(arg2, arg3, arg3, arg4, arg4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "find_valid_data_wrapper_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "validate_input_08001460",
                "param_1": "input_ptr",
                "param_2": "input_val",
                "param_3": "input_len",
                "param_4": "input_data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int validate_input_08001460(uint **input_ptr, uint *input_val, int input_len, uint *input_data){\n  int result = 0;\n  uint *ptr = *input_ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_val == NULL || input_len == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 1;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr |= 1;\n      }\n      **input_ptr &= 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_val;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n      input_ptr[0xb] = input_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_input_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "validate_input_08003880",
                "param_1": "input_address",
                "param_2": "zero_flag",
                "param_3": "input_flag",
                "param_4": "input_value",
                "iVar1": "subtracted_value"
            },
            "code": "void validate_input_08003880(int input_address, int zero_flag, int input_flag, undefined4 input_value)\n{\n  int subtracted_value;\n  \n  subtracted_value = subtract_four_from_input();\n  if (input_flag == *(int *)(input_address + 0xc)) {\n    if (zero_flag == 0) {\n      *(undefined *)(subtracted_value + 0x88) = 0;\n      *(undefined *)(subtracted_value + 0x5e) = 0;\n      if (*(code **)(subtracted_value + 100) != (code *)0x0) {\n        (**(code **)(subtracted_value + 100))();\n      }\n      validate_input_08003880_08001460(input_address,subtracted_value + 0x68,*(undefined *)(subtracted_value + 0x88),8);\n      return;\n    }\n    *(undefined *)(subtracted_value + 0x5e) = 1;\n    validate_input_08003880_080014ec(input_address,subtracted_value + 0x68,0x20,8,input_value);\n  }\n  return;\n}",
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "validate_input_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_input_flag_08002f4c",
                "param_1": "input_ptr",
                "*(uint *)(*param_1 + 0xc)": "*input_ptr_val",
                "*(undefined *)((int)param_1 + 0x39)": "*input_flag_ptr",
                "find_and_validate_input_08003f48": "find_and_validate_input",
                "undefined4": "int",
                "uint": "uint32_t"
            },
            "code": "int set_input_flag_08002f4c(int *input_ptr) {\n  uint32_t *input_ptr_val = (uint32_t *)(*input_ptr + 0xc);\n  uint32_t flag_mask = 0xffffffbf;\n  *input_ptr_val = *input_ptr_val & flag_mask;\n  char *input_flag_ptr = (char *)(input_ptr + 0x39);\n  *input_flag_ptr = 0x20;\n  find_and_validate_input();\n  return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_input_flag_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "initialize_data_080035bc",
                "puVar1": "data_ptr",
                "*puVar1": "*data_ptr",
                "DAT_080035f0": "data",
                "DAT_080035f4": "data_1",
                "DAT_080035f8": "data_2"
            },
            "code": "void initialize_data_080035bc(void)\n{\n    uint32_t *DAT_080035f0_ptr;\n    DAT_080035f0_ptr = DAT_080035f0;\n    *DAT_080035f0_ptr |= 1;\n    DAT_080035f0_ptr[2] = 0;\n    *DAT_080035f0_ptr &= 0xFEF6FFFF;\n    DAT_080035f0_ptr[1] = DAT_080035f4;\n    *DAT_080035f0_ptr &= 0xFFFBFFFF;\n    DAT_080035f0_ptr[3] = 0;\n    *(uint32_t *)(DAT_080035f8 + 8) = 0x8000000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "initialize_data_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_value_shifted_by_constant_080025ec",
                "uVar1": "value",
                "get_value_from_ptr_dat_080025e0": "get_value_from_data_pointer",
                "PTR_DAT_08002608": "PTR_CONSTANT_DATA",
                "DAT_08002604": "data_pointer"
            },
            "code": "uint get_value_shifted_by_constant_080025ec(void)\n{\n  uint value = get_value_from_DAT_08002604();\n  uint shift_amount = *(int *)(DAT_08002604 + 8) << 0x13;\n  uint index = shift_amount >> 0x1d;\n  uint shifted_value = value >> PTR_DAT_08002608[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_value_shifted_by_constant_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "handle_interrupt_and_set_combination_08000c4c",
                "PTR_DAT_08000c60": "combination_data",
                "handle_system_interrupt_080005e4": "handle_system_interrupt",
                "set_combination_08000600": "set_combination"
            },
            "code": "void handle_interrupt_and_set_combination_08000c4c(void)\n{\n  handle_system_interrupt(0);\n  set_combination(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "handle_interrupt_and_set_combination_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_input_and_return_last_index_08004a60",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_array",
                "param_4": "array_length",
                "puVar2": "array_end",
                "iVar3": "last_index",
                "iVar1": "last_index"
            },
            "code": "int process_input_and_return_last_index_08004a60(int input_param_1, int input_param_2, char *input_array, int array_length) {\n  int last_index = -1;\n  char *array_end = input_array + array_length;\n  while (input_array != array_end) {\n    if (last_index == array_length) {\n      return last_index;\n    }\n    last_index = process_input_08004a34(input_param_1, *input_array, input_param_2, array_length, last_index);\n    input_array++;\n  }\n  return last_index;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_input_and_return_last_index_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "allocate_memory_and_set_permissions_080050d0",
                "*param_1": "*status",
                "*param_2": "*ptr",
                "uVar1": "mask",
                "uVar2": "flags",
                "iVar3": "list_head"
            },
            "code": "uint allocate_memory_and_set_permissions_080050d0(uint *status, uint *ptr) {\n  uint list_head = *(uint *)PTR_PTR_DAT_0800519c;\n  if (list_head != 0 && *(uint *)(list_head + 0x18) == 0) {\n    initialize_data_structure_080053a0(list_head);\n  }\n  if (ptr == (uint *)PTR_DAT_080051a0) {\n    ptr = *(uint **)(list_head + 4);\n  } else if (ptr == (uint *)PTR_DAT_080051a4) {\n    ptr = *(uint **)(list_head + 8);\n  } else if (ptr == (uint *)PTR_DAT_080051a8) {\n    ptr = *(uint **)(list_head + 0xc);\n  }\n  ushort flags = *(ushort *)(ptr + 3);\n  uint mask = (uint)flags;\n  if (-1 < (int)(mask << 0x1c)) {\n    if (-1 < (int)(mask << 0x1b)) {\n      *status = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(mask << 0x1d) < 0) {\n      if ((uint *)ptr[0xd] != (uint *)0x0) {\n        if ((uint *)ptr[0xd] != ptr + 0x11) {\n          update_linked_list(status);\n        }\n        ptr[0xd] = 0;\n      }\n      *(ushort *)(ptr + 3) = *(ushort *)(ptr + 3) & 0xffdb;\n      ptr[1] = 0;\n      *ptr = ptr[4];\n    }\n    *(ushort *)(ptr + 3) = *(ushort *)(ptr + 3) | 8;\n  }\n  if ((ptr[4] == 0) && ((flags & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_080050d0(status, ptr);\n  }\n  flags = *(ushort *)(ptr + 3);\n  mask = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      mask = ptr[5];\n    }\n    ptr[2] = mask;\n  } else {\n    ptr[2] = 0;\n    ptr[6] = -ptr[5];\n  }\n  if (ptr[4] == 0) {\n    flags = *(ushort *)(ptr + 3);\n    mask = (int)(short)flags & 0x80;\n    if (mask != 0) {\nLAB_08005100:\n      *(ushort *)(ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  } else {\n    mask = 0;\n  }\n  return mask;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_permissions_080050d0",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_0800519c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_080053a0(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_080051a0) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a4) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a8) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_080054fc(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "output_pointer",
                "param_2": "requested_size",
                "puVar1": "data_pointer",
                "uVar2": "value",
                "puVar3": "current_block",
                "iVar4": "padding_size",
                "uVar5": "block_size",
                "puVar6": "previous_block",
                "puVar7": "temp_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *output_pointer, uint requested_size)\n{\n  uint aligned_size = (requested_size + 3 & 0xFFFFFFFC) + 8;\n  if (aligned_size < 0xC) {\n    aligned_size = 0xC;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *output_pointer = 0xC;\n  }\n  else {\n    do_nothing_0800557c();\n    uint *current_block = *(uint **)PTR_DAT_08004a2c;\n    uint *previous_block = *(uint **)PTR_DAT_08004a2c;\n    while (previous_block != (uint *)0x0) {\n      uint block_size = *previous_block - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xC) {\n          if (previous_block == current_block) {\n            aligned_size = current_block[1];\n          }\n          else {\n            aligned_size = previous_block[1];\n          }\n          if (previous_block == current_block) {\n            *(uint *)PTR_DAT_08004a2c = aligned_size;\n            previous_block = current_block;\n          }\n          else {\n            current_block[1] = aligned_size;\n          }\n        }\n        else {\n          *previous_block = block_size;\n          *(uint *)((int)previous_block + block_size) = aligned_size;\n          previous_block = (uint *)((int)previous_block + block_size);\n        }\n        goto LAB_080049dc;\n      }\n      current_block = previous_block;\n      previous_block = (uint *)previous_block[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      undefined4 value = find_offset_and_set_value(output_pointer);\n      *(undefined4 *)PTR_DAT_08004a30 = value;\n    }\n    previous_block = (uint *)find_offset_and_set_value(output_pointer, aligned_size);\n    if ((previous_block != (uint *)0xFFFFFFFF) &&\n       ((current_block = (uint *)((int)previous_block + 3U & 0xFFFFFFFC), previous_block == current_block ||\n        (block_size = find_offset_and_set_value(output_pointer,(int)current_block - (int)previous_block), block_size != -1)))) {\n      *current_block = aligned_size;\nLAB_080049dc:\n      do_nothing_0800557e(output_pointer);\n      uint block_end = (int)current_block + 0xBU & 0xFFFFFFF8;\n      int padding_size = block_end - (int)(current_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)current_block + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *output_pointer = 0xC;\n    do_nothing_0800557e(output_pointer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_and_modify_08002d0c",
                "param_1": "pointer_to_pointer",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "offset",
                "param_5": "max_offset",
                "iVar1": "pointer_difference"
            },
            "code": "uint32_t check_and_modify_08002d0c(uint32_t **pointer_to_pointer, uint32_t mask, uint32_t expected_result, int offset, uint32_t max_offset) {\n  int pointer_difference;\n  while (1) {\n    if (((mask & ~**pointer_to_pointer) == 0) != expected_result) {\n      return 0;\n    }\n    if ((max_offset != 0xffffffff) && ((max_offset != 0) && ((pointer_difference = get_pointer_difference_from_global_data_and_return_value_08000e30(), (uint32_t)pointer_difference - offset <= max_offset)))) {\n      break;\n    }\n    (*pointer_to_pointer)[3] &= 0xfffffe5f;\n    (*pointer_to_pointer)[5] &= 0xfffffffe;\n    *(uint8_t *)((int)pointer_to_pointer + 0x39) = 0x20;\n    *(uint8_t *)((int)pointer_to_pointer + 0x3a) = 0x20;\n    *(uint32_t *)(pointer_to_pointer + 0xe) = 0;\n    return 3;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_and_modify_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "zero_out_bits_08001904",
                "param_1": "params",
                "puVar1": "temp_ptr",
                "char_ptr": "char_ptr",
                "ushort_ptr": "ushort_ptr",
                "param_ptr": "param_ptr"
            },
            "code": "uint zero_out_bits_08001904(uint **params)\n{\n    uint *param_ptr = *params;\n    char *char_ptr = (char *)(params + 0x3d);\n    ushort *ushort_ptr = (ushort *)(params + 0x2a);\n\n    if (*char_ptr == '\"') {\n        if (*ushort_ptr < 4) {\n            if (*ushort_ptr < 2) {\n                *param_ptr &= 0xfffffbff;\n                param_ptr[1] &= 0xfffff8ff;\n                uint *puVar1 = params[9];\n                params[9] = (uint *)(puVar1 + 1);\n                *(char *)puVar1 = (char)param_ptr[4];\n                (*ushort_ptr)--;\n                *char_ptr = 0x20;\n                params[0xc] = 0;\n                if (*(char *)(params + 0x3e) == '@') {\n                    *(char *)(params + 0x3e) = 0;\n                    do_nothing_08001902();\n                }\n                else {\n                    *(char *)(params + 0x3e) = 0;\n                    do_nothing_080015b8();\n                }\n            }\n        }\n        else {\n            uint *puVar1 = params[9];\n            params[9] = (uint *)(puVar1 + 1);\n            *(char *)puVar1 = (char)param_ptr[4];\n            (*ushort_ptr)--;\n            if (*ushort_ptr == 3) {\n                param_ptr[1] &= 0xfffffbff;\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "zero_out_bits_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "PTR_DAT_08000c78": "pointer_to_data_1",
                "PTR_DAT_08000c74": "pointer_to_data_2",
                "in_r3": "parameter_2"
            },
            "code": "void process_data_08000c64(void)\n{\n  undefined4 PTR_DAT_08000c78;\n  undefined4 PTR_DAT_08000c74;\n  int data_size = 0x10;\n  undefined4 parameter_1;\n  undefined4 parameter_2;\n\n  process_stream(PTR_DAT_08000c78, PTR_DAT_08000c74, data_size, parameter_1, parameter_2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "process_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "input_check",
                "uVar2": "data_flag2",
                "uVar4": "data_flag5",
                "uVar5": "data_flag",
                "puVar3": "data_ptr"
            },
            "code": "void process_data_08002ffc(uint **data)\n{\n  uint *data_ptr = *data;\n  uint data_flag = *data_ptr;\n  uint data_flag2 = data_ptr[3];\n\n  if ((((data_flag & 0xf) == 0) && ((data_flag & 0x20) != 0)) && ((data_flag2 & 0x20) != 0)) {\n    process_data_08002ffc_08002f66(data);\n    return;\n  }\n\n  if (((data_flag & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((data_flag2 & 0x120) == 0)))) {\n    if (((data_flag & 0x80) != 0) && ((data_flag2 & 0x80) != 0)) {\n      decode_data(data);\n      return;\n    }\n    if (((data_flag & 0x40) != 0) && ((data_flag2 & 0x40) != 0)) {\n      set_input_flag(data);\n    }\n  }\n  else {\n    if (((data_flag & 1) != 0) && ((data_flag2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((data_flag & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((data_flag & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((data_flag & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((data_flag & 0x20) != 0) && ((data_flag2 & 0x20) != 0)) {\n        process_data_08002ffc(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[0xd][0x14] = (uint *)process_input_08000f8c;\n      int input_check = check_input(data[0xd]);\n      if (input_check != 0) {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002f66",
                "FUN_0800295c",
                "FUN_08003f94",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_0800387c(int input){\n  int result = input - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_shortest_path_length_0800351e",
                "param_1": "num_vertices",
                "uVar1": "shortest_path_length",
                "find_short_08003506": "calculate_shortest_path_length"
            },
            "code": "int find_shortest_path_length_0800351e(int num_vertices) {\n  int shortest_path_length;\n  if (num_vertices != 0) {\n    shortest_path_length = calculate_shortest_path_length();\n    return shortest_path_length;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_shortest_path_length_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "counter_ptr",
                "puVar3": "char_ptr"
            },
            "code": "int process_data_08002f66(int *data)\n{\n  char *string_ptr = (char *)(data + 0x3a);\n  if (*string_ptr != '\"') {\n    return 2;\n  }\n  int page_size = data[2];\n  int data_value = *(int *)(*data + 4);\n  int *output_ptr = data + 10;\n  if (page_size == 0x1000) {\n    if (data[4] == 0) {\n      *(unsigned short *)output_ptr = (unsigned short)((data_value << 0x17) >> 0x17);\n      output_ptr += 2;\n    }\n    else {\n      *(unsigned short *)output_ptr = (unsigned short)data_value & 0xff;\n      output_ptr++;\n    }\n  }\n  else if (data[4] == 0) {\n    char *char_ptr = (char *)output_ptr;\n    *char_ptr = (char)data_value;\n    output_ptr++;\n  }\n  else {\n    unsigned char *byte_ptr = (unsigned char *)output_ptr;\n    *byte_ptr = (unsigned char)data_value & 0x7f;\n    output_ptr++;\n  }\n  short *counter_ptr = (short *)(data + 0x2e);\n  (*counter_ptr)--;\n  if (*counter_ptr != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data + 0xc) &= 0xfffffedf;\n  *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n  *string_ptr = ' ';\n  execute_function_if_index_less_than_10_08003f24();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "set_value_at_address_based_on_condition_080034b6",
                "param_1": "address",
                "param_2": "value",
                "param_3": "condition",
                "param_4": "ptr1",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "void set_value_at_address_based_on_condition_080034b6(void* address, uint16_t value, bool condition, void* PTR_1, void* PTR_2) {\n  if (condition) {\n    *(uint16_t*)address = value;\n  } else {\n    *(uint16_t*)address = *(uint16_t*)PTR_1;\n  }\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_condition_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "update_data_structure_08003eac",
                "param_1": "data_structure_ptr",
                "param_2": "new_data",
                "bVar1": "data_index",
                "PTR_DAT_08003ef4": "DATA_PTRS_OFFSET",
                "PTR_DAT_08003ef8": "DATA_INDICES_OFFSET",
                "PTR_DAT_08003efc": "DATA_VALIDATION_OFFSET",
                "set_bits_08000e60": "set_bits_in_byte",
                "set_bit_at_position_08000ec4": "set_bit_in_byte",
                "validate_input_08002eb2": "validate_data",
                "0x44": "DATA_INDEX_OFFSET",
                "0x5c": "FLAGS_OFFSET",
                "0x68": "DATA_SIZE_OFFSET",
                "0x6e": "DATA_OFFSET_OFFSET"
            },
            "code": "void update_data_structure_08003eac(int data_structure_ptr, int new_data) {\n  if (data_structure_ptr != 0) {\n    int data_index = *(char *)(data_structure_ptr + DATA_INDEX_OFFSET);\n    *(int *)(PTR_DAT_08003ef4 + data_index * 4) = new_data;\n    *(int *)(PTR_DAT_08003ef8 + data_index * 4) = data_structure_ptr;\n    set_bits_in_byte(*(char *)(data_structure_ptr + FLAGS_OFFSET), 0, 2);\n    set_bit_in_byte(*(char *)(data_structure_ptr + FLAGS_OFFSET));\n    validate_data(*(int *)(PTR_DAT_08003efc + data_index * 4), *(int *)(data_structure_ptr + DATA_SIZE_OFFSET) + *(short *)(data_structure_ptr + DATA_OFFSET_OFFSET), 1);\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002eb2",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "update_data_structure_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "check_combination_08003e18",
                "param_1": "combination_length",
                "param_2": "combination",
                "param_3": "input_length",
                "param_4": "output_data",
                "iVar1": "is_valid",
                "is_combination_valid_08003dd0": "is_combination_valid",
                "*param_2": "*combination",
                "PTR_DAT_08003e50": "input_data",
                "*(undefined4 *)(PTR_DAT_08003e50 + (uint)*(byte *)(param_1 + 0x44) * 4)": "input_data[*(unsigned char *)(combination_length + 0x44)]",
                "validate_input_08002efa": "validate_input_data"
            },
            "code": "int check_combination_08003e18(int combination_length, char* combination, int input_length, int* PTR_DAT_08003e50, int output_data) {\n  if (combination_length == 0) {\n    return -1;\n  }\n  int is_valid = is_combination_valid();\n  if (is_valid == 0) {\n    *combination = *(char *)(combination_length + 0x45);\n    validate_PTR_DAT_08003e50(*(undefined4 *)(PTR_DAT_08003e50 + (uint)*(byte *)(param_1 + 0x44) * 4), combination_length + 0x45, 1, PTR_DAT_08003e50, output_data);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "check_combination_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_value_to_22_080040fc",
                "PTR_DAT_08004108": "value_ptr"
            },
            "code": "void set_value_to_22_080040fc(void)\n{\n  int* PTR_DAT_08004108 = (int*)PTR_DAT_08004108;\n  *PTR_DAT_08004108 = 22;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_value_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "uVar1": "global_data_value",
                "iVar2": "result"
            },
            "code": "int process_data_08002dd0(int *data_ptr, ushort *data_buffer, int buffer_size, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0 || buffer_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_pointer_from_global_data_and_return_value_08000e30();\n      *(short *)(data_ptr + 9) = (short)buffer_size;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = check_and_modify_data(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_buffer & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = check_and_modify_data(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = check_and_modify_data(data_ptr, 0x40, 0, uVar1, param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "execute_function_with_args_and_return_2nd_arg_08004860",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "arg6",
                "uStack_4": "arg7",
                "PTR_PTR_DAT_08004880": "function_pointer"
            },
            "code": "void execute_function_with_args_and_return_2nd_arg_08004860(void *PTR_PTR_DAT_08004880, int arg1, int arg2, void *arg3, int arg4, void *arg5) {\n  void *arg6 = arg3;\n  void *arg7 = arg5;\n  ((void (*)(int, int, void *, int, void *, int *))PTR_PTR_DAT_08004880)(arg1, arg2, &arg6, arg4, &arg6, &arg7);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "execute_function_with_args_and_return_2nd_arg_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "convert_base_if_not_zero_08004622",
                "param_1": "data",
                "param_2": "length",
                "param_3": "condition",
                "param_4": "param_4",
                "convert_base_080045c8": "convert_base"
            },
            "code": "void convert_base_if_not_zero_08004622(uint32_t *data, uint32_t length, uint32_t condition, uint32_t param_4)\n{\n    if (condition != 0) {\n        convert_base(data, length, condition & 0xff);\n        return;\n    }\n    (**(code **)*data)(data, length & 0xff, 0, *(code **)*data, param_4);\n    return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "convert_base_if_not_zero_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "update_bits_if_valid_value_found_08003414",
                "param_1": "input_value",
                "local_4c": "valid_value",
                "iVar1": "index",
                "uVar2": "array_value"
            },
            "code": "void update_bits_if_valid_value_found_08003414(int input_value)\n{\n  int index;\n  uint array_value;\n  int valid_value[16];\n  valid_value[0] = find_valid_value(input_value, PTR_DAT_08003468);\n  if ((valid_value[0] != 0) &&\n     ((((index = get_value_from_array(input_value), index == 0 || (index == 4)) || (index == 8)) ||\n      ((index == 0xc || (index == 0x18)))))) {\n    array_value = get_array_value_or_negative_one(input_value, PTR_DAT_08003468);\n    if ((array_value & 0x100000) == 0) {\n      update_bit_and_check_boundaries(valid_value,index);\n    }\n    else {\n      clear_flags(valid_value,index);\n    }\n    update_bits(valid_value);\n  }\n  return;\n}",
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_080028f0",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bits_if_valid_value_found_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "execute_return_zero_08005718",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "pointer",
                "iVar2": "return_val"
            },
            "code": "void execute_return_zero_08005718(int* output, undefined4 arg1, undefined4 arg2, undefined4 arg3){\n    undefined* pointer = PTR_DAT_08005738;\n    *(undefined4*)PTR_DAT_08005738 = 0;\n    int return_val = return_zero_080040e4(arg1, arg2, arg3, arg3, arg3);\n    if(return_val == -1 && *(int*)pointer != 0){\n        *output = *(int*)pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "execute_return_zero_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "calculate_status_080011c0",
                "param_1": "status_data",
                "*(char *)((int)param_1 + 0x3e)": "symbol",
                "param_1[0x14]": "type",
                "*(uint *)(*param_1 + 0x10)": "status",
                "param_1[0x11]": "value",
                "*(char *)((int)param_1 + 0x3d)": "symbol2"
            },
            "code": "int calculate_status_080011c0(int *status_data) {\n    int status = 0;\n    char symbol = *(char *)((int)status_data + 0x3e);\n    int value = status_data[0x11];\n    int type = status_data[0x14];\n    if (symbol == '@') {\n        if (status_data[0x14] == 0) {\n            status = value & 0xfe;\n        }\n        else {\n            status = value & 0xffU | 1;\n        }\n    }\n    else if (status_data[4] == 0x4000) {\n        char symbol2 = *(char *)((int)status_data + 0x3d);\n        if (symbol2 == '!') {\n            status = value & 0xfe;\n        }\n        else {\n            status = value & 0xffU | 1;\n        }\n    }\n    else if (type == 0) {\n        status = (value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (type == 1) {\n        status = (value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "calculate_status_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "process_stream_08000b54",
                "param_1": "stream_data",
                "param_2": "stream_position",
                "param_3": "stream_length",
                "bVar1": "read_result",
                "iVar2": "crc_result",
                "unaff_r5": "read_length",
                "iVar3": "validation_result",
                "read_data_from_stream_080006b4": "read_data_from_stream",
                "validate_input_080007f0": "validate_input",
                "get_pointer_and_return_value_from_global_data_08004204": "get_pointer_and_return_value_from_global_data",
                "calculate_crc_and_update_080008e2": "calculate_crc_and_update",
                "process_data_08000998": "process_data",
                "set_bit_in_array_08000a00": "set_bit_in_array",
                "set_data_08000a4e": "set_data",
                "set_bits_08000a7a": "set_bits",
                "decode_and_update_08000b04": "decode_and_update",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int process_stream_08000b54(int **stream_data, int *stream_position, int stream_length)\n{\n    byte read_result;\n    int crc_result;\n    uint read_length;\n    int validation_result;\n\n    stream_data[19] = stream_position;\n    *(char *)(stream_data + 24) = (char)stream_length;\n\n    if (*(byte *)((int)stream_data + 5) < 4) {\n        read_result = (**(code **)(**stream_data + 8))();\n        read_length = (uint)read_result;\n    }\n\n    if (read_length == 0 || (int)read_length < 8) {\n        crc_result = 0;\n    }\n    else {\n        crc_result = read_data_from_stream(stream_data);\n        *(char *)(stream_data + 2) = (char)crc_result;\n        if (*(char *)((int)stream_data + 9) == *(char *)(stream_data + 1)) {\n            validation_result = validate_input(stream_data);\n            if (validation_result < 1) {\n                int pointer_and_value = get_pointer_and_return_value_from_global_data();\n                stream_data[23] = (int *)((uint)*(ushort *)((int)stream_data + 86) + pointer_and_value);\n                *(undefined *)(stream_data + 2) = 0;\n                switch(*(undefined *)((int)stream_data + 10)) {\n                    case 1:\n                    case 2:\n                        crc_result = calculate_crc_and_update(stream_data, stream_position, stream_length);\n                        break;\n                    case 3:\n                    case 4:\n                        crc_result = process_data(stream_data, stream_position, stream_length);\n                        break;\n                    case 5:\n                        crc_result = set_bit_in_array(stream_data, stream_position, stream_length);\n                        break;\n                    case 6:\n                        crc_result = set_data(stream_data, stream_position, stream_length);\n                        break;\n                    case 15:\n                        crc_result = set_bits(stream_data, stream_position, stream_length);\n                        break;\n                    case 16:\n                        crc_result = decode_and_update(stream_data, stream_position, stream_length);\n                        break;\n                }\n            }\n            else {\n                if (validation_result != 255) {\n                    copy_data(stream_data, validation_result);\n                    calculate_and_update_crc(stream_data);\n                }\n                *(char *)(stream_data + 2) = (char)validation_result;\n                crc_result = (int)(char)validation_result;\n            }\n        }\n        else {\n            crc_result = 0;\n        }\n    }\n    return crc_result;\n}",
            "called": [
                "FUN_08000a7a",
                "FUN_08004204",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_080008cc",
                "FUN_0800076c",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "process_stream_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_callback_if_exists_0800376e",
                "iVar1": "callback_ptr",
                "subtract_four_from_param_08003750": "subtract_four_from_param",
                "code": "code_ptr",
                "callback_func_ptr": "code_ptr"
            },
            "code": "void execute_callback_if_exists_0800376e(void)\n{\n  int callback_ptr = subtract_four_from_param();\n  code* callback_func_ptr = *(code**)(callback_ptr + 0x44);\n  if (callback_func_ptr != NULL) {\n    (*callback_func_ptr)();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_if_exists_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "<original_function_name>": "FUN_08000d98",
                "param_1": "input",
                "iVar1": "is_valid_input",
                "validate_input_08000ee0": "validate_input",
                "PTR_DAT_08000ddc": "dividend_pointer",
                "PTR_DAT_08000dd8": "divisor_pointer",
                "0xf": "MAX_INPUT",
                "set_bits_08000e60": "set_bits",
                "PTR_DAT_08000de0": "output_pointer",
                "FUN_08000d98": "validate_and_set_input_08000d98"
            },
            "code": "int validate_and_set_input_08000d98(uint input){\n                      int is_valid_input = validate_input(get_dividend());\n                      if (is_valid_input){\n                          return 1;\n                      }\n                      if (input > 15){\n                          return 1;\n                      }\n                      set_bits(0xffffffff, input, 0);\n                      *(uint *)PTR_DAT_08000de0 = input;\n                      return 0;\n                    }",
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "validate_and_set_input_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "find_and_validate_input_08003f48",
                "uVar1": "index_of_value",
                "iVar2": "validate_result",
                "iVar3": "value_ptr"
            },
            "code": "void find_and_validate_input_08003f48(void)\n{\n  uint index_of_value = find_index_of_value();\n  int value_ptr = *(int *)(PTR_DAT_08003f88 + index_of_value * 4);\n  if ((index_of_value < 10) && (value_ptr != -1)) {\n    int input_ptr = *(int *)(value_ptr + 0x44);\n    int input_val = *(ushort *)(value_ptr + 0x6e);\n    int input_len = *(int *)(value_ptr + 0x68) + input_val;\n    validate_input(*(undefined4 *)(PTR_DAT_08003f90 + (uint)input_ptr * 4), input_len, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "find_and_validate_input_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "set_bits_based_on_input_0800340c",
                "set_bits_based_on_input_080035fc": "set_bits_based_on_input"
            },
            "code": "void set_bits_based_on_input_0800340c() {\n  set_bits_based_on_input_0800340c_080035fc();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "set_bits_based_on_input_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t find_value_in_array_0800352e(uint16_t value_to_find, uint16_t* array)\n{\n    while (true) {\n        if (*array == -1) {\n            return UINT32_MAX;\n        }\n        if (*array == value_to_find) {\n            break;\n        }\n        array += 6;\n    }\n    return *(uint32_t*)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input",
                "iVar1": "flag",
                "puVar2": "counter_pointer",
                "puVar3": "label_pointer",
                "DAT_08001bf8": "DAT_08001bf8",
                "do_nothing_08001aac": "do_nothing",
                "check_and_set_flag_for_input_08003900": "check_and_set_flag_for_input",
                "check_input_08000f8c": "check_input",
                "PTR_LAB_08001f3c_1_08001bf4": "PTR_LAB_08001f3c_1_08001bf4",
                "input_char": "input_char",
                "current_input": "current_input",
                "next_input": "next_input",
                "flag_pointer": "flag_pointer",
                "counter_pointer": "counter_pointer",
                "label_pointer": "label_pointer"
            },
            "code": "void process_input_08001ab0(uint **input)\n{\n  int flag;\n  uint *current_input = *input;\n  uint *next_input = *(input + 1);\n  uint *flag_pointer = *(input + 5);\n  uint *counter_pointer = *(input + 9);\n  uint *label_pointer = *(input + 13);\n  char *input_char = (char *)(input + 15);\n  \n  if (*input_char - 0x29 < 2) {\n    *(input + 12) = NULL;\n    *input_char = 0x28;\n  }\n  else {\n    if (*input_char != '`' && (*next_input & 0x800) == 0) {\n      *input_char = 0x20;\n    }\n    *(input + 12) = NULL;\n    *(input_char + 1) = 0;\n  }\n  **input &= 0xfffff7ff;\n  if ((*next_input & 0x800) == 0) {\n    if (*input_char == '`') {\n      *input_char = 0x20;\n      *(input + 16) = NULL;\n      if ((*flag_pointer & 0x40) != 0) {\n        *counter_pointer += 1;\n        *(char *)counter_pointer = (char)*(current_input + 4);\n      }\n      **input &= 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((*flag_pointer & 0x40) != 0) {\n        *counter_pointer += 1;\n        *(char *)counter_pointer = (char)*(current_input + 4);\n      }\n      check_and_set_flag_for_input(input);\n    }\n  }\n  else {\n    *(next_input + 1) &= 0xfffff7ff;\n    if (*(input + 14) + 0x35 == '\\x01') {\n      *(label_pointer + 0x14) = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      flag = check_input_08000f8c(label_pointer + 0x14);\n      if (flag != 0) {\n        if ((*current_input & 0x40) != 0) {\n          *counter_pointer += 1;\n          *(char *)counter_pointer = (char)*(current_input + 4);\n        }\n        **input &= 0xfffffffe;\n        *input_char = 0x20;\n        (*(code *)label_pointer[0x14])();\n      }\n    }\n    else {\n      *(input + 13)[0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      flag = check_input_08000f8c(input + 13 + 0x14);\n      if (flag != 0) {\n        **input &= 0xfffffffe;\n        *input_char = 0x20;\n        (*(code *)(input + 13)[0x14])();\n      }\n    }\n  }\n  if (*input_char == '(' && ((*(input + 16) & 4) != 0)) {\n    *(input + 11) = DAT_08001bf8;\n    *(input + 12) = NULL;\n    *input_char = 0x20;\n    *(input_char + 1) = 0;\n    execute_command_if_valid_input(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "check_and_return_status_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "flag_ptr": "*(uint *)(DAT_0800200c + 0x40)",
                "second_flag_ptr": "*(uint *)(DAT_08002014 + 4)"
            },
            "code": "int check_and_return_status_08001f9c(void)\n{\n  int start_time = get_pointer_from_global_data_and_return_value_08000e30();\n  int current_time;\n  uint* flag_ptr = (uint *)(DAT_0800200c + 0x40);\n  uint* second_flag_ptr = (uint *)(DAT_08002014 + 4);\n  *flag_ptr |= 0x10000000;\n  *DAT_08002010 = 1;\n  do {\n    if ((*second_flag_ptr & 0x10000) != 0) {\n      *DAT_08002018 = 1;\n      do {\n        if ((*second_flag_ptr & 0x20000) != 0) {\n          return 0;\n        }\n        current_time = get_pointer_from_global_data_and_return_value_08000e30();\n      } while ((uint)(current_time - start_time) < 0x3e9);\n      return 3;\n    }\n    current_time = get_pointer_from_global_data_and_return_value_08000e30();\n  } while ((uint)(current_time - start_time) < 0x3e9);\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_and_return_status_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_flags_and_values_08000d8e"
            },
            "code": "void initialize_flags_and_values_08000d8e(void)\n{\n  // code to initialize flags and values goes here\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "initialize_flags_and_values_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "convert_base_if_not_zero_08004638",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void convert_base_if_not_zero_08004638(void)\n{\n  // call function to convert base if not zero\n  convert_base_if_not_zero_08004638_08004622();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "convert_base_if_not_zero_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_080008cc",
                "param_1": "data_address",
                "param_2": "data_value",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(data_address + 9)",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(data_address + 4)",
                "*(byte *)(param_1 + 10)": "*(byte *)(data_address + 10)",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(data_address + 0xb)",
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(data_address + 0x49)"
            },
            "code": "void copy_data_080008cc(int data_address, undefined data_value) {\n    *(undefined *)(data_address + 9) = *(undefined *)(data_address + 4);\n    *(byte *)(data_address + 10) = *(byte *)(data_address + 10) ^ 0x80;\n    *(undefined *)(data_address + 0xb) = data_value;\n    *(undefined *)(data_address + 0x49) = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_data_structure_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = allocate_memory_and_set_permissions_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_and_return_last_index_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_byte_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_byte_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_byte_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "set_value_08005608",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "default_value",
                "uVar2": "new_value",
                "bVar3": "is_default"
            },
            "code": "void set_value_08005608(int value, int* data){\n  int default_value = set_default_if_not_set(value, (int)*(short *)(data + 0xe));\n  bool is_default = default_value >= 0;\n  uint new_value;\n  if (is_default) {\n    new_value = *(int *)(data + 0x54) + default_value;\n  }\n  else {\n    new_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_default) {\n    *(uint *)(data + 0x54) = new_value;\n  }\n  else {\n    *(short *)(data + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "set_value_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[15]",
                "param_1[0xf]": "input_array[14]"
            },
            "code": "int validate_input_08002efa(int *input_array, int array_size, int element_size) {\n    if (input_array[10] != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (element_size == 0) {\n        return 1;\n    }\n    if (input_array[14] != '\\x01') {\n        input_array[10] = array_size;\n        input_array[11] = (short)element_size;\n        input_array[14] = 0;\n        input_array[15] = 0;\n        input_array[58] = 0x22;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x120;\n        return 0;\n    }\n    return 2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_callbacks_if_not_null_0800377c",
                "PTR_DAT_08003794": "first_ptr",
                "PTR_DAT_08003794 + 0x24": "second_ptr",
                "*PTR_DAT_08003794": "*first_ptr",
                "*PTR_DAT_08003794 + 0x24": "*second_ptr"
            },
            "code": "void check_callbacks_if_not_null_0800377c(void)\n{\n    int* PTR_DAT_08003794 = (int*)PTR_DAT_08003794;\n    int* PTR_DAT_08003794 + 0x24 = (int*)(PTR_DAT_08003794 + 0x24);\n    if (*PTR_DAT_08003794 != 0) {\n        check_and_execute_callbacks_080026ce();\n    }\n    if (*PTR_DAT_08003794 + 0x24 != 0) {\n        check_and_execute_callbacks_080026ce();\n    }\n    return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_callbacks_if_not_null_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "update_bits_0800268e",
                "param_1": "bits_array",
                "puVar1": "bits_ptr"
            },
            "code": "void update_bits_0800268e(uint **bits_array)\n{\n  uint *bits_ptr;\n\n  // Set a flag indicating that bits are being updated\n  *(undefined *)((int)bits_array + 0x39) = 2;\n\n  bits_ptr = *bits_array;\n\n  // Check if certain bits are not set\n  if ((bits_ptr[8] & 0x1111) == 0) {\n    if ((bits_ptr[8] & 0x444) == 0) {\n      // Clear the least significant bit\n      *bits_ptr = *bits_ptr & 0xfffffffe;\n    }\n  }\n\n  // Update the bits based on some input\n  set_bits_from_input(bits_array);\n\n  // Clear the flag indicating that bits are being updated\n  *(undefined *)((int)bits_array + 0x39) = 0;\n  *(undefined *)(bits_array + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_bits_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "calculate_crc_and_update_080008e2",
                "param_1": "data_ptr",
                "param_2": "mask_ptr",
                "param_3": "undefined_param_1",
                "param_4": "undefined_param_2",
                "iVar1": "byte_index",
                "uVar2": "data_length",
                "uVar3": "mask_length",
                "uVar4": "mask_value",
                "cVar5": "bit_value",
                "iVar6": "byte_mask_index"
            },
            "code": "int calculate_crc_and_update_080008e2(int data_ptr, int mask_ptr, undefined4 param_3, undefined4 param_4)\n{\n  int byte_index;\n  uint data_length;\n  uint mask_length;\n  uint mask_value;\n  char bit_value;\n  int byte_mask_index;\n  \n  byte_index = combine_bytes(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,param_4);\n  data_length = combine_bytes(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  bit_value = (char)((data_length << 0x15) >> 0x18);\n  if ((data_length & 7) != 0) {\n    bit_value = bit_value + '\\x01';\n  }\n  *(char *)(data_ptr + 0xb) = bit_value;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  mask_value = 0;\n  for (mask_length = 0; (int)mask_length < (int)data_length; mask_length = mask_length + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(mask_ptr + ((mask_length + byte_index) * 0x100000 >> 0x18) * 2) >> (mask_length + byte_index & 0xf) & 1U) == 0) {\n      byte_mask_index = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(byte_mask_index + 9) = *(byte *)(byte_mask_index + 9) & ~(byte)(1 << mask_value);\n    }\n    else {\n      byte_mask_index = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(byte_mask_index + 9) = *(byte *)(byte_mask_index + 9) | (byte)(1 << mask_value);\n    }\n    mask_value = mask_value + 1 & 0xff;\n    if (7 < mask_value) {\n      *(char *)(data_ptr + 0x49) = *(char *)(data_ptr + 0x49) + '\\x01';\n      mask_value = 0;\n    }\n  }\n  if ((data_length & 7) != 0) {\n    *(char *)(data_ptr + 0x49) = *(char *)(data_ptr + 0x49) + '\\x01';\n  }\n  bit_value = *(char *)(data_ptr + 0x49);\n  calculate_and_update_crc(data_ptr);\n  return (int)(char)(bit_value + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "calculate_crc_and_update_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "ptr_num",
                "param_2": "num",
                "param_3": "base",
                "cVar1": "digit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "ptr_buffer",
                "local_15": "buffer"
            },
            "code": "undefined4 convert_base_080045c8(int *ptr_num, uint num, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient, remainder;\n  char buffer[9];\n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *ptr_buffer = buffer + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - ((int)(short)quotient * (int)(short)base & 0xffU) & 0xff;\n    ptr_buffer--;\n    if (remainder < 10) {\n      digit = remainder + '0';\n    }\n    else {\n      digit = remainder + '7';\n    }\n    *ptr_buffer = digit;\n    num = quotient;\n  } while (quotient != 0);\n  if (ptr_buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = find_end_of_string_08000218(ptr_buffer);\n    result = (**(code **)(*ptr_num + 4))(ptr_num, ptr_buffer, result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "find_valid_data_08003d18",
                "param_1": "param1",
                "param_2": "param2",
                "sVar1": "dataValue",
                "iVar2": "globalDataPointer",
                "iVar3": "validValue",
                "uVar4": "counter"
            },
            "code": "uint find_valid_data_08003d18(uint param1, uint param2)\n{\n    uint globalDataPointer = get_pointer_from_global_data_and_return_value_08000e30();\n    short dataValue = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n    int validValue = find_valid_value_080034f4((int)dataValue, PTR_DAT_08003dc4);\n    if (validValue == 0) {\n        return 0;\n    }\n    uint counter = 0;\n    while (counter < 10 && ((*(int *)(PTR_DAT_08003dc8 + counter * 4) == 0 || (validValue = find_valid_value_080034f4((int)dataValue, PTR_DAT_08003dc4), **(int **)(PTR_DAT_08003dc8 + counter * 4) != validValue)))) {\n        counter = (counter + 1) & 0xff;\n    }\n    if (9 < counter) {\n        if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (find_valid_shortest_path_08003cc8(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n            return 0;\n        }\n        counter = (uint)(byte)PTR_DAT_08003dcc[0x44];\n    }\n    do {\n        validValue = process_data_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + counter * 4), param1, param2 & 0xffff, 1000);\n        if (validValue == 0) {\n            return param2;\n        }\n        validValue = get_pointer_from_global_data_and_return_value_08000e30();\n    } while ((uint)(validValue - globalDataPointer) < 1000);\n    return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080034f4",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "find_valid_data_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_bytes_08004640",
                "param_1": "byte1",
                "param_2": "byte2"
            },
            "code": "uint combine_bytes_08004640(int byte1, uint byte2) {\n    return byte2 | byte1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_bytes_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_flags_and_values_080034ce",
                "set_flags_and_values_08000de4": "set_flags",
                "initialize_flags_and_values_08000c8c": "initialize_values"
            },
            "code": "void initialize_flags_and_values_080034ce() {\n  set_flags();\n  initialize_values();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "initialize_flags_and_values_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "get_result_from_parameters_080047fe",
                "param_1": "param1",
                "param_2": "param2",
                "get_result_08004844": "get_result"
            },
            "code": "void get_result_from_parameters_080047fe(int param1, int param2)\n{\n  get_result(param2, param1);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "get_result_from_parameters_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "process_input_08001256",
                "param_1": "input",
                "puVar1": "flags",
                "DAT_0800203e": "char_at_62",
                "DAT_0800203d": "char_at_61",
                "PTR_DAT_0800202a": "mode",
                "PTR_DAT_08002014": "counter"
            },
            "code": "uint32_t process_input_08001256(uint32_t **input)\n{\n  uint32_t *flags = input[11];\n  if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@'))))\n  {\n    if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000))\n    {\n      **input = **input | 0x100;\n      input[20] = (uint32_t *)((int)input[20] + 1);\n    }\n    else\n    {\n      uint32_t PTR_DAT_0800202a = *(uint16_t *)((int)input + 0x2a);\n      if (PTR_DAT_0800202a == 0)\n      {\n        **input = **input | 0x200;\n      }\n      else if (PTR_DAT_0800202a == 1)\n      {\n        if (flags == (uint32_t *)0xffff0000)\n        {\n          **input = **input & 0xfffffbff;\n          flags = *input;\n          if ((flags[1] & 0x800) == 0)\n          {\n            *flags = *flags | 0x200;\n          }\n          else\n          {\n            *flags = *flags & 0xfffffbff;\n          }\n        }\n        else if (((flags == (uint32_t *)0x4) || (flags == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12))\n        {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x200;\n        }\n        else if (input[11] == (uint32_t *)0x2)\n        {\n          **input = **input | 0x400;\n        }\n        else\n        {\n          **input = **input & 0xfffffbff;\n        }\n      }\n      else if (PTR_DAT_0800202a == 2)\n      {\n        if (input[11] == (uint32_t *)0x2)\n        {\n          **input = **input | 0x400;\n        }\n        else\n        {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x800;\n        }\n        flags = *input;\n        if ((flags[1] & 0x800) != 0)\n        {\n          flags[1] = flags[1] | 0x1000;\n        }\n      }\n      else\n      {\n        **input = **input | 0x400;\n        flags = *input;\n        if ((flags[1] & 0x800) != 0)\n        {\n          flags[1] = flags[1] | 0x1000;\n        }\n      }\n      input[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "start_of_functions",
                "iVar4": "num_functions",
                "iVar5": "i",
                "puVar2": "start_of_functions_2",
                "puVar3": "end_of_functions_2",
                "num_functions_2": "num_functions_2"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *start_of_functions = PTR_DAT_080048bc;\n  int num_functions = (int)PTR_DAT_080048c0 - (int)PTR_DAT_080048bc;\n  for (int i = 0; i < num_functions/4; i++) {\n    (**(code **)(start_of_functions + i * 4))();\n  }\n  do_nothing_080059f8();\n  undefined *start_of_functions_2 = PTR_DAT_080048c4;\n  undefined *end_of_functions_2 = PTR_DAT_080048c8;\n  int num_functions_2 = (int)end_of_functions_2 - (int)start_of_functions_2;\n  for (int i = 0; i < num_functions_2/4; i++) {\n    (**(code **)(start_of_functions_2 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_flags_and_values_08004648",
                "update_register_value_08000e3c": "update_register_value",
                "initialize_flags_and_values_08000d8e": "initialize_flags_and_values_helper"
            },
            "code": "void initialize_flags_and_values_08004648(){\n  update_register_value(3);\n  initialize_flags_and_values_08004648_helper();\n  return;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "initialize_flags_and_values_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "set_combination_08000600",
                "param_1": "combination",
                "param_2": "flag",
                "cVar1": "flag_char",
                "PTR_DAT_08000668": "ptr",
                "set_combination_08004388": "set_combination",
                "update_values_based_on_flag_08004110": "update_values_based_on_flag",
                "set_bit_at_index_080041bc": "set_bit_at_index"
            },
            "code": "void set_combination_08000600(int **combination, int flag, int size)\n{\n  char flag_char = *(char *)((int)combination + 5);\n  int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n  if (flag_char == '\\x02' || flag_char == '\\x03' || flag_char == '\\x01') {\n    *combination = PTR_DAT_08000668;\n  }\n  else {\n    *combination = PTR_DAT_08000668;\n  }\n  set_combination_08000600_08004388(*combination, size, 6);\n  if (*(byte *)((int)combination + 6) > 1) {\n    update_values_based_on_flag_08004110(*(byte *)((int)combination + 6), 1);\n    set_bit_at_index_080041bc(*(undefined *)((int)combination + 6), 0);\n  }\n  int result;\n  do {\n    result = (**(code **)(**combination + 0xc))();\n  } while (result >= 0);\n  *(undefined *)((int)combination + 0x49) = 0;\n  *(undefined *)((int)combination + 0x4a) = 0;\n  *(undefined2 *)(combination + 0x15) = 0;\n  *(undefined2 *)((int)combination + 0x52) = 0;\n  *(undefined2 *)(combination + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_080041bc",
                "FUN_08004388",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "set_combination_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "execute_function_pointer_080045be",
                "*param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_080045be(void *function_pointer) {\n    (*(void(*)())function_pointer)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_ccitt_08000728",
                "param_1": "data_start_index",
                "param_2": "data_length",
                "uVar2": "crc",
                "uVar3": "bit_value",
                "uVar4": "i",
                "bVar1": "bit",
                "byte": "unsigned char"
            },
            "code": "uint calculate_crc16_ccitt_08000728(int data_start_index, int data_length)\n{\n  byte current_byte;\n  uint crc = 0xffff;\n  for (uint i = 0; i < data_length; i++) {\n    current_byte = *(byte *)(data_start_index + i + 9);\n    crc ^= current_byte;\n    for (byte bit = 1; bit < 9; bit++) {\n      if ((crc & 1) != 0) {\n        crc = (crc >> 1) ^ 0xa001;\n      } else {\n        crc = crc >> 1;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_ccitt_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_array_value_or_negative_one_0800354a",
                "param_1": "index",
                "uVar1": "array_value",
                "find_value_in_array_0800352e": "find_value_in_array"
            },
            "code": "int get_array_value_or_negative_one_0800354a(int index) {\n  if (index == -1) {\n    return -1;\n  }\n  int array_value = find_value_in_array();\n  return array_value;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "get_array_value_or_negative_one_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_uint_at_offset_from_ptr_0800124a",
                "param_1": "base_ptr"
            },
            "code": "int set_uint_at_offset_from_ptr_0800124a(int *base_ptr, int offset, int value)\n{\n  *(unsigned int *)(base_ptr + offset) = value & 0xff;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_uint_at_offset_from_ptr_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "get_offset_08004094",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "address"
            },
            "code": "int get_offset_08004094(int offset) {\n  int current_offset = *(int *)PTR_DAT_080040c4;\n  undefined *address = (undefined *)(offset + current_offset);\n  if (address <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_080040c4 = address;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "get_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_uint_at_offset_from_dat_080033d4_080033c8",
                "DAT_080033d4": "dat_080033d4",
                "PTR_": "ptr_"
            },
            "code": "void clear_bit_in_uint_at_offset_from_dat_080033d4_080033c8(void)\n{\n    uint *uint_ptr = (uint *)(DAT_080033d4 + 0x40);\n    uint mask = 0xdfffffff;\n    *uint_ptr = *uint_ptr & mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_uint_at_offset_from_dat_080033d4_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "DAT_08003350": "data_ptr",
                "DAT_08003354": "0x08003354",
                "DAT_08003358": "0x08003358",
                "DAT_0800335c": "0x0800335c",
                "DAT_08003360": "0x08003360",
                "DAT_08003364": "0x08003364",
                "DAT_08003368": "0x08003368",
                "DAT_0800336c": "0x0800336c",
                "DAT_08003370": "0x08003370",
                "DAT_08003374": "0x08003374",
                "DAT_08003378": "0x08003378",
                "DAT_0800337c": "0x0800337c"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag)\n{\n    uint32_t *DAT_08003350 = (uint32_t *)0x08003350;\n    switch(flag)\n    {\n        case 0:\n            DAT_08003350[0x30/4] |= 0x01;\n            return DAT_08003354;\n        case 1:\n            DAT_08003350[0x30/4] |= 0x02;\n            return DAT_08003358;\n        case 2:\n            DAT_08003350[0x30/4] |= 0x04;\n            return DAT_0800335c;\n        case 3:\n            DAT_08003350[0x30/4] |= 0x08;\n            return DAT_08003360;\n        case 4:\n            DAT_08003350[0x30/4] |= 0x10;\n            return DAT_08003364;\n        case 5:\n            DAT_08003350[0x30/4] |= 0x20;\n            return DAT_08003368;\n        case 6:\n            DAT_08003350[0x30/4] |= 0x40;\n            return DAT_0800336c;\n        case 7:\n            DAT_08003350[0x30/4] |= 0x80;\n            return DAT_08003370;\n        case 8:\n            DAT_08003350[0x30/4] |= 0x100;\n            return DAT_08003374;\n        case 9:\n            DAT_08003350[0x30/4] |= 0x200;\n            return DAT_08003378;\n        case 10:\n            DAT_08003350[0x30/4] |= 0x400;\n            return DAT_0800337c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_param_08000690",
                "param_1": "input_param",
                "param_2": "flag_param",
                "param_3": "unused_param",
                "param_4": "output_param",
                "PTR_DAT_080006b0": "PTR_DATA"
            },
            "code": "void check_param_08000690(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n    if (param_1 != 1) {\n        return;\n    }\n    if (param_2 == 0xffff) {\n        set_data_and_return_param(PTR_DAT_080006b0, 1, 0, 0, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "check_param_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "allocate_memory_and_set_permissions_080054fc",
                "param_1": "process_id",
                "param_2": "memory_block",
                "uVar1": "permissions",
                "iVar2": "allocated_memory_size",
                "local_18": "original_memory_size",
                "local_14": "original_memory_block"
            },
            "code": "void allocate_memory_and_set_permissions_080054fc(int process_id, int *memory_block)\n{\n    ushort permissions;\n    int allocated_memory_size;\n    int original_memory_size;\n    int *original_memory_block;\n\n    if ((uint)*(ushort *)(memory_block + 3) << 0x1e > 0xffffffff) {\n        original_memory_size = process_id;\n        original_memory_block = memory_block;\n        permissions = check_permissions(process_id, memory_block, &original_memory_size, &original_memory_block);\n        allocated_memory_size = allocate_memory_block(process_id, original_memory_size);\n        if (allocated_memory_size != 0) {\n            *(undefined **)(process_id + 0x28) = LAB_08005320_1_08005578;\n            *memory_block = allocated_memory_size;\n            *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n            memory_block[5] = original_memory_size;\n            memory_block[4] = allocated_memory_size;\n            if ((original_memory_block != (int *)0x0) && (processReturnValue(process_id, (int)*(short *)((int)memory_block + 0xe)) != 0)) {\n                *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(memory_block + 3) = permissions | *(ushort *)(memory_block + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n    }\n    *memory_block = (int)memory_block + 0x47;\n    memory_block[4] = (int)memory_block + 0x47;\n    memory_block[5] = 1;\n    return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_permissions_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "process_data_08001420",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "PTR_": "data_",
                "DAT_": "byte_"
            },
            "code": "int process_data_08001420(int *data) {\n  int *PTR_ptr = data;\n  if (*(short *)(PTR_ptr + 10) != 0) {\n    byte *DAT_ptr = (byte *)data[9];\n    data[9] = (int)(DAT_ptr + 1);\n    *(uint *)(*PTR_ptr + 16) = (uint)*DAT_ptr;\n    *(short *)(PTR_ptr + 10) = *(short *)(PTR_ptr + 10) - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_values_08000de4",
                "puVar1": "register_ptr",
                "DAT_08000e14": "register_address",
                "*DAT_08000e14": "*register_address",
                "update_register_value_08000e3c": "update_register_value",
                "validate_and_set_input_08000d98": "validate_and_set_input",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int set_flags_and_values_08000de4(void)\n{\n  uint *register_ptr;\n  register_ptr = DAT_08000e14;\n  *register_ptr |= FLAG_1;\n  *register_ptr |= FLAG_2;\n  *register_ptr |= FLAG_3;\n  update_register_value(3);\n  validate_and_set_input(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000e3c",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "check_and_execute_callbacks_080026ce"
            },
            "code": "void check_and_execute_callbacks_080026ce(int *param_array)\n{\n  int ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 2) != 0) && ((*(uint *)(ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(param_array + 6) = 1;\n    if ((*(uint *)(*param_array + 0x18) & 3) == 0) {\n      execute_callback_08003754();\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8();\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 4) != 0) && ((*(uint *)(ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(param_array + 6) = 2;\n    if ((*(uint *)(*param_array + 0x18) & 0x300) == 0) {\n      execute_callback_08003754(param_array);\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 8) != 0) && ((*(uint *)(ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(param_array + 6) = 4;\n    if ((*(uint *)(*param_array + 0x1c) & 3) == 0) {\n      execute_callback_08003754(param_array);\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 0x10) != 0) && ((*(uint *)(ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffef;\n    *(undefined *)(param_array + 6) = 8;\n    if ((*(uint *)(*param_array + 0x1c) & 0x300) == 0) {\n      execute_callback_08003754(param_array);\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 1) != 0) && ((*(uint *)(ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffe;\n    execute_callback_if_exists_0800376e(param_array);\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 0x80) != 0) && ((*(uint *)(ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffff7f;\n    do_nothing_0800293e(param_array);\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 0x40) != 0) && ((*(uint *)(ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffbf;\n    do_nothing_080026cc(param_array);\n  }\n  ptr = *param_array;\n  if (((*(uint *)(ptr + 0x10) & 0x20) != 0) && ((*(uint *)(ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffdf;\n    do_nothing_0800293c(param_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800293e",
                "FUN_0800293c",
                "FUN_0800376e",
                "FUN_080026cc",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "check_and_execute_callbacks_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "str_iterator",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000218(char* str) {\n  char* current_char = str;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_value_from_array_0800339c",
                "param_1": "index",
                "param_2": "array",
                "param_3": "size",
                "param_4": "arg3",
                "iVar1": "value",
                "uVar2": "shifted_value"
            },
            "code": "int get_value_from_array_0800339c(int index, int* array, int size, int arg3, int arg4) {\n  int value = get_array_value_or_negative_one(index, array, size, arg3, arg4);\n  int shifted_value = (value << 12) >> 27;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value == 4) {\n    return 0xc;\n  }\n  if (shifted_value == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "get_value_from_array_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_bits_08000e60",
                "param_1": "base_address",
                "param_2": "bit_mask",
                "param_3": "bits_to_set",
                "uVar1": "shift_amount",
                "uVar2": "num_bits_to_shift",
                "DAT_08000ebc": "ptr_DAT_08000ebc",
                "DAT_08000ec0": "ptr_DAT_08000ec0"
            },
            "code": "void set_bits_08000e60(uint base_address, uint bit_mask, uint bits_to_set) {\n  uint shift_amount = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint num_bits_to_shift = 7 - shift_amount;\n  if (num_bits_to_shift > 3) {\n    num_bits_to_shift = 4;\n  }\n  uint num_bits_to_ignore = (shift_amount + 4 < 7) ? 0 : shift_amount - 3;\n  uint shifted_bits_to_set = (bits_to_set & (1 << (num_bits_to_shift & 0xff)) - 1U) << (num_bits_to_ignore & 0xff) | (1 << (num_bits_to_ignore & 0xff)) - 1U & bit_mask;\n  if ((int)base_address < 0) {\n    *(char *)(DAT_08000ec0 + (base_address & 0xf)) = (char)(shifted_bits_to_set << 4);\n  }\n  else {\n    *(char *)(base_address + 0xe000e400) = (char)(shifted_bits_to_set << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bits_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "validate_and_return_input_0800165a",
                "param_1": "input_array",
                "param_2": "input_flag",
                "param_3": "input_value_1",
                "param_4": "input_value_2",
                "uVar1": "input_value",
                "uVar2": "input_flag_value"
            },
            "code": "int validate_and_return_input_0800165a(int *input_array, int input_flag, int input_value_1, int input_value_2, int input_value_3) {\n    int input_flag_value = *(int *)(*input_array + 0x18);\n    int input_value;\n    if ((input_flag_value & 0x80) == 0) {\n        input_value = *(int *)(input_array + 3);\n    }\n    else {\n        input_value = *(int *)(input_array + 6);\n    }\n    validate_input_08003880(input_array, (input_flag_value & 4) == 0, input_value, input_flag_value, input_value_3);\n    return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "validate_and_return_input_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "decode_and_update_08000b04",
                "param_1": "encoded_data",
                "param_2": "decoded_data",
                "bVar1": "num_bytes",
                "bVar2": "byte_val",
                "cVar3": "val",
                "uVar4": "combined_bytes",
                "uVar5": "i"
            },
            "code": "int decode_and_update_08000b04(int encoded_data, int decoded_data){\n    byte num_bytes = *(byte *)(encoded_data + 0xc);\n    byte byte_val = *(byte *)(encoded_data + 0xe);\n    *(undefined *)(encoded_data + 0xd) = 0;\n    *(byte *)(encoded_data + 0xe) = byte_val;\n    *(undefined *)(encoded_data + 0x49) = 6;\n    for (uint i = 0; i < byte_val; i++){\n        undefined2 combined_bytes = combine_bytes(*(undefined *)(i * 2 + encoded_data + 0x10), *(undefined *)(encoded_data + (i + 4) * 2 + 9));\n        *(undefined2 *)(decoded_data + (num_bytes + i) * 2) = combined_bytes;\n    }\n    char val = *(char *)(encoded_data + 0x49);\n    calculate_and_update_crc(encoded_data);\n    return (int)(char)(val + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_update_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "execute_if_flags_set_0800262c",
                "param_1": "ptr_param",
                "DAT_08002688": "dat_08002688"
            },
            "code": "void execute_if_flags_set_0800262c(int *ptr_param) {\n    uint32_t flags1 = *(uint32_t *)(*ptr_param + 0xc);\n    uint32_t flags2 = *(uint32_t *)(*ptr_param + 8);\n\n    if ((flags1 & 0x100) && (flags2 & 0x1000)) {\n        execute_code_if_not_null_08003594();\n        *(uint32_t *)(*ptr_param + 0xc) = (flags1 & 0xff) | 0xfffffe7f;\n    }\n\n    if ((flags1 & 0x200) && (flags2 & 0x2000)) {\n        do_nothing_0800268c(ptr_param);\n        *(uint32_t *)(*ptr_param + 0xc) = (flags1 & 0xff) | 0xfffffd7f;\n    }\n\n    *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n    *(undefined *)((int)ptr_param + 0x1d) = 1;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_flags_set_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_combination_08004388",
                "param_1": "combination_index",
                "param_2": "combination_type",
                "param_3": "combination_flags",
                "bVar1": "flags_mask",
                "iVar2": "num_flags_set",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void set_combination_08004388(int combination_index, int combination_type, byte combination_flags) {\n  int num_flags_set = 0;\n  int combination_value = 0;\n\n  *(int *)(combination_index + 0x11c) = combination_type;\n  *(byte *)(combination_index + 0x144) = combination_flags;\n\n  switch(combination_flags & 7) {\n    case 4:\n      num_flags_set = 7;\n      break;\n    case 6:\n      num_flags_set = 8;\n      break;\n    case 2:\n      num_flags_set = 6;\n      break;\n    default:\n      num_flags_set = 0;\n      break;\n  }\n\n  if((combination_flags & 0x30) == 0x30) {\n    *(int *)(combination_index + 0x128) = 0x600;\n    num_flags_set++;\n  }\n  else if((combination_flags & 0x20) == 0) {\n    *(int *)(combination_index + 0x128) = 0;\n  }\n  else {\n    *(int *)(combination_index + 0x128) = 0x400;\n    num_flags_set++;\n  }\n\n  if((combination_flags & 8) == 0) {\n    *(int *)(combination_index + 0x124) = 0;\n  }\n  else {\n    *(int *)(combination_index + 0x124) = 0x2000;\n    num_flags_set++;\n  }\n\n  switch(num_flags_set) {\n    case 8:\n      *(int *)(combination_index + 0x120) = 0;\n      break;\n    case 9:\n      *(int *)(combination_index + 0x120) = 0x1000;\n      break;\n    default:\n      num_flags_set = 0;\n      break;\n  }\n\n  if(num_flags_set != 0) {\n    set_combination_08004388_value(combination_index + 0xd4);\n    validate_and_set_combination_08004388(combination_index + 0xd4, combination_value);\n    return;\n  }\n\n  code *jumptable = (code *)0x8004432;\n  run_assertion_check(uRam08004440, 299, uRam0800443c);\n  if(extraout_r1 < 0x60) {\n    uRam0000012e = *(unsigned short *)(PTR_DAT_0800445c + extraout_r1 * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_combination_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_input_and_run_infinite_loop_080051ac",
                "puVar1": "input_ptr",
                "iVar2": "input_length",
                "piVar3": "loop_variables_ptr",
                "piVar4": "linked_list_ptr",
                "uVar5": "flags",
                "uVar6": "loop_result",
                "iVar7": "loop_condition_value",
                "pcVar8": "loop_function_ptr",
                "iVar9": "loop_counter",
                "uVar10": "uVar1",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar11": "loop_condition",
                "uVar12": "loop_return"
            },
            "code": "void process_input_and_run_infinite_loop_080051ac(void)\n{\n    uint *input_ptr;\n    int input_length;\n    int *loop_variables_ptr;\n    int *linked_list_ptr;\n    uint uVar1;\n    ushort flags;\n    int loop_counter;\n    code *loop_function_ptr;\n    int loop_increment;\n    uint loop_result;\n    bool loop_condition;\n    undefined8 loop_return;\n\n    process_input(6);\n    loop_return = run_infinite_loop(1);\n    loop_variables_ptr = (int *)((ulonglong)loop_return >> 0x20);\n    input_ptr = (uint *)loop_return;\n    flags = *(ushort *)(loop_variables_ptr + 3);\n    input_length = (int)flags;\n    if ((int)(input_length << 0x1c) < 0) {\n        int loop_start = loop_variables_ptr[4];\n        if (loop_start != 0) {\n            int loop_condition_value = input_length << 0x1e;\n            loop_condition = loop_condition_value == 0;\n            int loop_step = loop_variables_ptr[0];\n            if (loop_condition) {\n                loop_condition_value = loop_variables_ptr[5];\n            }\n            loop_variables_ptr[0] = loop_start;\n            if (!loop_condition) {\n                loop_condition_value = 0;\n            }\n            loop_variables_ptr[2] = loop_condition_value;\n            for (loop_counter = loop_step - loop_start; loop_counter > 0; loop_counter -= loop_condition_value) {\n                loop_result = (*(code *)loop_variables_ptr[10])(input_ptr, loop_variables_ptr[8], loop_start, loop_counter);\n                if (loop_result < 1) {\n                    flags = *(ushort *)(loop_variables_ptr + 3);\n                    goto LAB_080052b2;\n                }\n                loop_start += loop_result;\n            }\n        }\n    }\n    else if (((0 < loop_variables_ptr[1]) || (0 < loop_variables_ptr[0x10])) &&\n             (loop_function_ptr = (code *)loop_variables_ptr[0xb], loop_function_ptr != (code *)0x0)) {\n        uVar1 = *input_ptr;\n        *input_ptr = 0;\n        if ((flags & 0x1000) == 0) {\n            loop_result = (*loop_function_ptr)(input_ptr, loop_variables_ptr[8], input_length & 0x1000, 1);\n            if ((loop_result == -1) && (input_length = *input_ptr, input_length != 0)) {\n                if ((input_length != 0x1d) && (input_length != 0x16)) {\n                    *(ushort *)(loop_variables_ptr + 3) = *(ushort *)(loop_variables_ptr + 3) | 0x40;\n                    goto LAB_0800527c;\n                }\n                *input_ptr = uVar1;\n                goto LAB_080051d6;\n            }\n        }\n        else {\n            loop_result = loop_variables_ptr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(loop_variables_ptr + 3) << 0x1d) < 0) &&\n            (loop_result = loop_result - loop_variables_ptr[1], loop_variables_ptr[0xd] != 0)) {\n            loop_result = loop_result - loop_variables_ptr[0x10];\n        }\n        loop_result = (*(code *)loop_variables_ptr[0xb])(input_ptr, loop_variables_ptr[8], loop_result, 0);\n        flags = *(ushort *)(loop_variables_ptr + 3);\n        if ((loop_result == -1) &&\n            ((0x1d < *input_ptr || (-1 < (int)((DAT_080052c8 >> (*input_ptr & 0xff)) << 0x1f)))) {\n            goto LAB_080052b2;\n        }\n        loop_variables_ptr[1] = 0;\n        loop_variables_ptr[0] = loop_variables_ptr[4];\n        if (((int)((uint)flags << 0x13) < 0) && ((loop_result != -1 || (*input_ptr == 0)))) {\n            loop_variables_ptr[0x15] = loop_result;\n        }\n        linked_list_ptr = (int *)loop_variables_ptr[0xd];\n        *input_ptr = uVar1;\n        if (linked_list_ptr != (int *)0x0) {\n            if (linked_list_ptr != loop_variables_ptr + 0x11) {\n                update_linked_list(input_ptr);\n            }\n            loop_variables_ptr[0xd] = 0;\n            goto LAB_08005252;\n        }\n    }\nLAB_080051d6:\n    (*UNRECOVERED_JUMPTABLE_00)(0);\n    return;\nLAB_080052b2:\n    *(ushort *)(loop_variables_ptr + 3) = flags | 0x40;\nLAB_0800527c:\n    (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n    return;\nLAB_08005252:\n    (*UNRECOVERED_JUMPTABLE_00)();\n    return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_input_and_run_infinite_loop_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_input_080052cc",
                "param_1": "input_buffer",
                "param_2": "input_params",
                "uVar1": "status",
                "iVar2": "param_4",
                "piVar3": "param_7",
                "uVar4": "param_5",
                "uVar5": "param_3",
                "iVar6": "param_6",
                "unaff_r4": "func_result2",
                "unaff_r5": "func_result3",
                "pcVar7": "function_ptr",
                "iVar8": "param_6",
                "uVar9": "param_1",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "is_zero",
                "FUNC_080053a0": "do_something",
                "PTR_DAT_08005314": "PTR_DAT_08005314",
                "PTR_DAT_08005318": "PTR_DAT_08005318",
                "PTR_DAT_0800531c": "PTR_DAT_0800531c",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_3": "param_3",
                "param_4": "param_4",
                "params_ptr": "params_ptr",
                "func_result": "func_result",
                "func_result2": "func_result2",
                "func_result3": "func_result3",
                "func_result4": "func_result4",
                "func_result5": "func_result5",
                "func_result6": "func_result6",
                "func_result7": "func_result7",
                "func_result8": "func_result8",
                "func_result9": "func_result9",
                "func_result10": "func_result10"
            },
            "code": "uint32_t process_input_080052cc(uint32_t *input_buffer, int *input_params) {\n  uint32_t status = 0;\n  int *params_ptr;\n  uint32_t param_3;\n  uint32_t func_result;\n  uint32_t func_result2;\n  uint32_t func_result3;\n  uint32_t func_result4;\n  uint32_t func_result5;\n  uint32_t func_result6;\n  uint32_t func_result7;\n  uint32_t func_result8;\n  uint32_t func_result9;\n  uint32_t func_result10;\n\n  if (input_params[4] != 0) {\n    if ((input_buffer != NULL) && (input_buffer[6] == 0)) {\n      do_something();\n    }\n    if (input_params == (int *)PTR_DAT_08005314) {\n      params_ptr = (int *)input_buffer[1];\n    }\n    else if (input_params == (int *)PTR_DAT_08005318) {\n      params_ptr = (int *)input_buffer[2];\n    }\n    else if (input_params == (int *)PTR_DAT_0800531c) {\n      params_ptr = (int *)input_buffer[3];\n    }\n    if (*(uint16_t *)(params_ptr + 3) != 0) {\n      param_3 = (uint32_t)*(uint16_t *)(params_ptr + 3);\n      if ((param_3 << 0x1c) < 0) {\n        if (input_params[4] != 0) {\n          int param_5;\n          bool is_zero = (param_3 << 0x1e) == 0;\n          int param_6 = input_params[0];\n          if (is_zero) {\n            param_5 = input_params[5];\n          }\n          input_params[0] = input_params[4];\n          if (!is_zero) {\n            param_5 = 0;\n          }\n          input_params[2] = param_5;\n          for (param_6 = param_6 - input_params[4]; param_6 > 0; param_6 = param_6 - param_5) {\n            func_result = (*(code *)input_params[10])(input_buffer, input_params[8], input_params[4], param_6, func_result2, func_result3);\n            if (func_result < 1) {\n              status = *(uint16_t *)(params_ptr + 3);\n              goto end_of_function;\n            }\n            input_params[4] = input_params[4] + func_result;\n          }\n        }\n      }\n      else {\n        if (((input_params[1] > 0) || (input_params[0x10] > 0)) && (input_params[0xb] != 0)) {\n          code *function_ptr = (code *)input_params[0xb];\n          uint32_t param_1 = *input_buffer;\n          *input_buffer = 0;\n          if ((param_3 & 0x1000) == 0) {\n            func_result4 = (*function_ptr)(input_buffer, input_params[8], param_3 & 0x1000, 1);\n            if ((func_result4 == -1) && (*input_buffer != 0)) {\n              if ((*input_buffer != 0x1d) && (*input_buffer != 0x16)) {\n                *(uint16_t *)(params_ptr + 3) = *(uint16_t *)(params_ptr + 3) | 0x40;\n                status = (*(code *)UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n                goto end_of_function;\n              }\n              *input_buffer = param_1;\n              goto LAB_080051d6;\n            }\n          }\n          else {\n            func_result4 = input_params[0x15];\n          }\n          if (((param_3 << 0x1d) < 0) && (input_params[0xd] != 0)) {\n            func_result4 = func_result4 - input_params[1];\n            if (input_params[0xd] != (int *)0x0) {\n              if (input_params[0xd] != input_params + 0x11) {\n                update_linked_list(input_buffer);\n              }\n              input_params[0xd] = 0;\n              status = (*(code *)UNRECOVERED_JUMPTABLE_00)();\n              goto end_of_function;\n            }\n          }\n          func_result4 = (*(code *)input_params[0xb])(input_buffer, input_params[8], func_result4, 0);\n          uint16_t param_3 = *(uint16_t *)(params_ptr + 3);\n          if ((func_result4 == -1) && ((param_1 > 0x1d) || (-1 < (int)((DAT_080052c8 >> (*input_buffer & 0xff)) << 0x1f))))) {\n            *(uint16_t *)(params_ptr + 3) = param_3 | 0x40;\n            status = (*(code *)UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n            goto end_of_function;\n          }\n          input_params[1] = 0;\n          input_params[0] = input_params[4];\n          if (((param_3 << 0x13) < 0) && ((func_result4 != -1) || (*input_buffer == 0))) {\n            input_params[0x15] = func_result4;\n          }\n          int *param_7 = (int *)input_params[0xd];\n          *input_buffer = param_1;\n          if (param_7 != (int *)0x0) {\n            if (param_7 != input_params + 0x11) {\n              update_linked_list(input_buffer);\n            }\n            input_params[0xd] = 0;\n            status = (*(code *)UNRECOVERED_JUMPTABLE_00)();\n            goto end_of_function;\n          }\n        }\n      }\nLAB_080051d6:\n      status = (*(code *)UNRECOVERED_JUMPTABLE_00)(0);\n    }\n  }\nend_of_function:\n  return status;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_input_080052cc",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == (int *)PTR_DAT_08005314) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08005318) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_0800531c) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_080052c8 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[57]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 12)"
            },
            "code": "int validate_input_08002eb2(int *input_array, int array_size, int param_3)\n{\n    int return_value = 0;\n    if (input_array[9] != ' ')\n    {\n        return_value = 2;\n    }\n    else if (array_size == 0 || param_3 == 0)\n    {\n        return_value = 1;\n    }\n    else if (input_array[14] != 1)\n    {\n        input_array[8] = array_size;\n        input_array[9] = (short)param_3;\n        input_array[11] = (short)param_3;\n        input_array[15] = 0;\n        input_array[57] = 33;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 12) = *(uint *)(*input_array + 12) | 128;\n        return_value = 0;\n    }\n    else\n    {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "validate_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_and_execute_08000d3c",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_and_execute_08000d3c(void)\n{\n  int i = 0;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (i = 0; i < (PTR_DAT_08000d80 - PTR_DAT_08000d7c); i += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + i) = *(undefined4 *)(DAT_08000d78 + i);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08000d84; data_ptr < PTR_DAT_08000d88; ++data_ptr) {\n    *data_ptr = 0;\n  }\n  initialize_data_080035bc();\n  execute_functions_08004884();\n  jump_table = (code *)0x8000d72;\n  handle_data_processing_08004658();\n  (*jump_table)();\n  return;\n}\n",
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_execute_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = find_valid_value_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = find_valid_value_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      process_data_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = compare_and_return_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        process_data_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = set_flag_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = get_array_value_or_negative_one_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        update_values_08000fb4(uVar10,&local_2c);\n        uVar10 = set_flag_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = get_array_value_or_negative_one_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        update_values_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        check_and_update_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_08004fdc",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_0800354a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_ptr",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "bit_mask"
            },
            "code": "void update_bit_0800316c(uint bit_position, int* array){\n  uint array_index = (bit_position << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(array + array_index * 4);\n  uint bit_mask = ~(1 << (bit_position & 0xf));\n  *array_ptr = *array_ptr & bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "returnMaxValue_080040d0",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t returnMaxValue_080040d0() {\n    return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "returnMaxValue_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permissions_080040d6",
                "param_1": "memory_address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(memory_address + 1)"
            },
            "code": "int set_memory_permissions_080040d6(int* memory_address, int permissions) {\n    *(memory_address + 1) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_1_length",
                "pbVar2": "current_position",
                "pbVar3": "buffer_1",
                "uVar4": "input_byte_uint"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_byte, byte **input_buffer) {\n  int buffer_length = (int)(*input_buffer)[2] - 1;\n  (*input_buffer)[2] = (byte *)buffer_length;\n  if(buffer_length >= -1 || (buffer_length >= (int)(*input_buffer)[6] && input_byte != 0xa)) {\n    byte *current_position = *input_buffer;\n    *input_buffer = current_position + 1;\n    *current_position = input_byte;\n    return (uint)input_byte;\n  }\n  if(input_length != 0 && *(int *)(input_length + 0x18) == 0) {\n    initialize_data_structure();\n  }\n  byte **new_input_buffer;\n  if(input_buffer == (byte **)input_buffer_1) {\n    new_input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if(input_buffer == (byte **)input_buffer_2) {\n    new_input_buffer = *(byte ***)(input_length + 8);\n  }\n  else {\n    new_input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  (*input_buffer)[2] = (*input_buffer)[6];\n  byte *buffer_1 = (byte *)(uint)*(ushort *)(*input_buffer + 3);\n  int buffer_1_length = (int)buffer_1 << 0x1c;\n  if((buffer_1_length < 0 && (*input_buffer)[4] != (byte *)0x0) || (buffer_1_length = allocate_memory_and_set_permissions(input_length, input_buffer, buffer_1_length, (*input_buffer)[4], current_position), buffer_1_length == 0)) {\n    buffer_1_length = (int)*input_buffer - (int)(*input_buffer)[4];\n    uint input_byte_uint = (uint)input_byte;\n    if(buffer_1_length >= (int)(*input_buffer)[5] || (buffer_1_length = process_input_08004a34_080052cc(input_length, input_buffer), buffer_1_length == 0)) {\n      (*input_buffer)[2] = (byte *)((int)(*input_buffer)[2] - 1);\n      byte *current_position = *input_buffer;\n      *input_buffer = current_position + 1;\n      *current_position = input_byte;\n      if((byte *)(buffer_1_length + 1) != (*input_buffer)[5]) {\n        if(-1 >= (int)((uint)*(ushort *)(*input_buffer + 3) << 0x1f)) {\n          if(input_byte != 10) {\n            return input_byte_uint;\n          }\n        }\n        else {\n          return input_byte_uint;\n        }\n      }\n      buffer_1_length = process_input_08004a34_080052cc(input_length, input_buffer);\n      if(buffer_1_length == 0) {\n        return input_byte_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n",
            "called": [
                "FUN_080053a0",
                "FUN_080052cc",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_concatenated_values_080002d0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "flag1",
                "param_4": "flag2",
                "uVar1": "result"
            },
            "code": "uint64_t get_concatenated_values_080002d0(int value1, int value2, int flag1, int flag2)\n{\n  if (flag2 == 0 && flag1 == 0) {\n    if (value2 != 0 || value1 != 0) {\n      value2 = -1;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  uint64_t result = call_function();\n  return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_of_value_08003f00",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_08003f00(int value_to_find) {\n  uint index = 0;\n  if (value_to_find == 0) {\n    index = 10;\n  }\n  else {\n    while (index <= 9) {\n      if (value_to_find == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_of_value_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_and_copy_08001440",
                "param_1": "array",
                "puVar1": "destination",
                "DAT_08002a08": "remaining_elements",
                "PTR_DAT_08001010": "source",
                "PTR_FUN_08001440": "current_position"
            },
            "code": "int increment_and_copy_08001440(int *array)\n{\n    int *PTR_increment_and_copy_08001440 = array + 9;\n    short *DAT_08002a08 = (short *)(array + 0x2a);\n    if (*DAT_08002a08 != 0)\n    {\n        unsigned char *destination = (unsigned char *)*PTR_increment_and_copy_08001440;\n        *PTR_increment_and_copy_08001440 = (int)(destination + 1);\n        *destination = (unsigned char)*(int *)(*array + 0x10);\n        *DAT_08002a08 -= 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_copy_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_08000230",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "byte_to_find",
                "bVar1": "current_byte_value",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "next_byte_pointer",
                "puVar7": "current_uint_pointer",
                "pbVar8": "found_byte_pointer",
                "uVar9": "current_uint_offset",
                "uVar10": "remaining_uints",
                "uVar11": "current_uint_value",
                "uVar12": "current_uint_value_masked",
                "bVar13": "bit_0_set",
                "bVar14": "bit_8_set",
                "bVar15": "bit_16_set",
                "bVar16": "bit_24_set"
            },
            "code": "byte* find_byte_08000230(byte* data, uint data_size, byte byte_to_find)\n{\n    byte* current_byte = data;\n    uint remaining_size = data_size;\n    if (remaining_size < 0x10)\n    {\n        while (remaining_size > 0)\n        {\n            if (*current_byte == byte_to_find)\n            {\n                return current_byte;\n            }\n            current_byte++;\n            remaining_size--;\n        }\n        return NULL;\n    }\n    else\n    {\n        uint* current_uint = (uint*)data;\n        uint remaining_uints = data_size / 4;\n        uint uint_to_find = (byte_to_find << 24) | (byte_to_find << 16) | (byte_to_find << 8) | byte_to_find;\n        while (remaining_uints > 0)\n        {\n            if (*current_uint == uint_to_find)\n            {\n                return (byte*)current_uint;\n            }\n            current_uint++;\n            remaining_uints--;\n        }\n        current_byte = (byte*)current_uint;\n        remaining_size = data_size % 4;\n        while (remaining_size > 0)\n        {\n            if (*current_byte == byte_to_find)\n            {\n                return current_byte;\n            }\n            current_byte++;\n            remaining_size--;\n        }\n        return NULL;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "execute_command_08001684",
                "param_1": "params",
                "PTR_08001714_1": "valid_input_code_1",
                "PTR_08001714_2": "valid_input_code_2",
                "PTR_08001714_3": "invalid_input_code",
                "DAT_08001714": "valid_input_code",
                "*(char *)((int)param_1 + 0x3d)": "input_char",
                "params[0xb]": "input_code",
                "params[0xc]": "output_code",
                "(*params)[1]": "first_param",
                "(*params)[5]": "fifth_param",
                "**params": "double_pointer_value"
            },
            "code": "int execute_command_08001684(uint **params) {\n\tbool is_valid_input = false;\n\tchar input_char = *(char *)((int)params + 0x3d);\n\tif ((params[0xb] == PTR_08001714_1 || params[0xb] == PTR_08001714_2) && input_char == '(') {\n\t\tparams[0xb] = PTR_08001714_1;\n\t\t(*params)[1] &= 0xfffff8ff;\n\t\t(*params)[5] = 0xfffffbff;\n\t\t**params &= 0xfffffbff;\n\t\tparams[0xc] = NULL;\n\t\t*(undefined *)((int)params + 0x3d) = ' ';\n\t\t*(undefined *)((int)params + 0x3e) = 0;\n\t\tis_valid_input = true;\n\t} else if (input_char == '!') {\n\t\tparams[0xb] = PTR_08001714_1;\n\t\tparams[0xc] = PTR_08001714_3;\n\t\t*(undefined *)((int)params + 0x3d) = ' ';\n\t\t*(undefined *)((int)params + 0x3e) = 0;\n\t\t(*params)[1] &= 0xfffff8ff;\n\t\t(*params)[5] = 0xfffffbff;\n\t\t**params &= 0xfffffbff;\n\t\tis_valid_input = true;\n\t} else {\n\t\t(*params)[5] = 0xfffffbff;\n\t}\n\tif (is_valid_input) {\n\t\texecute_command_08001684_if_valid_input();\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "execute_command_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_input_08000f8c",
                "param_1": "input_array",
                "uint": "unsigned int"
            },
            "code": "int check_input_08000f8c(uint **input_array){\n  if (*(char *)((int)input_array + 0x35) != '\\x02') {\n    input_array[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)input_array + 0x35) = 5;\n  **input_array = **input_array & 0xfffffffe;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_input_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "should_call_function_080001ac",
                "param_1": "function_ptr",
                "*PTR_DAT_080001c4": "*is_ptr_null",
                "DAT_080001c8": "data_value",
                "PTR_FUN_080001cc": "function_ptr"
            },
            "code": "bool should_call_function_080001ac(bool* is_ptr_null, int DAT_080001c8, void* PTR_FUN_080001cc) {\n    bool should_call = false;\n    if (*PTR_DAT_080001c4 == \"\\0\") {\n        if (DAT_080001c8 != 0) {\n            PTR_FUN_080001cc = PTR_FUN_080001cc;\n            should_call = true;\n        }\n        *PTR_DAT_080001c4 = 1;\n    }\n    return should_call;\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "should_call_function_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0() {\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "arr",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end",
                "*param_1": "*arr"
            },
            "code": "void fill_array_with_value_080048cc(char *arr, char value, int length) {\n  char *end = arr + length;\n  for (; arr != end; arr++) {\n    *arr = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005374",
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "return_zero_080040e4"
            },
            "code": "int return_zero_080040e4(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "return_zero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_08003506",
                "param_1": "search_value",
                "param_2": "short_array"
            },
            "code": "int find_short_08003506(int search_value, short *short_array)\n{\n    while (true)\n    {\n        if (*(int *)(short_array + 2) == 0)\n        {\n            return -1;\n        }\n        if (*(int *)(short_array + 2) == search_value)\n        {\n            break;\n        }\n        short_array = short_array + 6;\n    }\n    return (int)*short_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_ptr_dat_080025e0",
                "PTR_DAT_080025e8": "PTR_DAT_080025e8"
            },
            "code": "uint32_t get_value_from_ptr_dat_080025e0() {\n    uint32_t* ptr = (uint32_t*)PTR_DAT_080025e8;\n    return *ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_ptr_dat_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "get_default_value_080040e8"
            },
            "code": "int get_default_value_080040e8() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "get_default_value_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_bit_in_array_08000a00",
                "param_1": "data",
                "param_2": "index",
                "param_3": "bit",
                "param_4": "unused",
                "uVar1": "combined_bytes",
                "uVar2": "array_index",
                "byte1": "first_byte",
                "byte2": "second_byte",
                "bit_position": "bit_index",
                "array_ptr": "array_pointer"
            },
            "code": "uint16_t set_bit_in_array_08000a00(uint8_t *data, uint16_t index, uint8_t bit)\\n\\\n    {\\n\\\n        uint8_t byte1 = *(data + 0xb);\\n\\\n        uint8_t byte2 = *(data + 0xc);\\n\\\n        uint32_t combined_bytes = combine_bytes(byte1, byte2, index, bit, bit);\\n\\\n        uint8_t bit_position = combined_bytes & 0xf;\\n\\\n        uint8_t array_index = (combined_bytes >> 0x14) & 0xff;\\n\\\n        uint16_t *array_ptr = (uint16_t *)(data + array_index * 2);\\n\\\n        if (*(int8_t *)(data + 0xd) == -1)\\n\\\n        {\\n\\\n            *array_ptr |= (1 << bit_position);\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            *array_ptr &= ~(1 << bit_position);\\n\\\n        }\\n\\\n        *(uint8_t *)(data + 0x49) = 6;\\n\\\n        calculate_and_update_crc(data);\\n\\\n        return 8;\\n\\\n    }",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "process_input_080047c0",
                "param_1": "input",
                "iVar1": "count_bits",
                "PTR_DAT_080047ec": "PTR_DAT",
                "process_input_and_run_infinite_loop_08005760": "process_input_and_run_infinite_loop",
                "count_bits_set_08004678": "count_bits_set"
            },
            "code": "void process_input_080047c0(int input) {\n  int count_bits;\n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  process_input_080047c0_and_run_infinite_loop();\n  count_bits = count_bits_set();\n  if (*(int *)(PTR_DAT_080047ec_080047ec + count_bits * 0x14 + 0xc) != 0) {\n    process_input_080047c0(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "process_input_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_array_of_structs_08005374",
                "param_1": "memory_block",
                "param_2": "num_structs",
                "puVar1": "array_ptr",
                "iVar2": "array_size",
                "PTR_DAT_08004978": "allocate_memory_block_08004978",
                "PTR_FUN_080048cc": "memset",
                "DAT_080048cc": "sizeof(struct my_struct)"
            },
            "code": "undefined4* allocate_array_of_structs_08005374(undefined4 memory_block, int num_structs) {\n    undefined4 *array_ptr;\n    int array_size = (num_structs - 1) * DAT_080048cc;\n    array_ptr = (undefined4*)PTR_DAT_08004978(memory_block, array_size + sizeof(int) + sizeof(undefined4*) + DAT_080048cc);\n    if (array_ptr != NULL) {\n        *array_ptr = 0;\n        array_ptr[1] = num_structs;\n        array_ptr[2] = array_ptr + 3;\n        PTR_FUN_080048cc(array_ptr + 3, 0, array_size + DAT_080048cc);\n    }\n    return array_ptr;\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_array_of_structs_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_byte_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = process_data_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_param_08003750",
                "param_1": "param",
                "return": "result"
            },
            "code": "int subtract_four_from_param_08003750(int param){\n    int result = param - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_param_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "validate_input_080014ec",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "param_4",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t validate_input_080014ec(uint32_t **input_ptr, uint32_t *input_data, int input_len, uint32_t *param_4) {\n    uint32_t result = 0;\n    uint32_t *ptr = NULL;\n    if (*((char *)(input_ptr) + 0x3d) == '(') {\n        if (input_data == NULL) {\n            result = 1;\n        }\n        else if (input_len == 0) {\n            result = 1;\n        }\n        else if (*((char *)(input_ptr) + 0xf) == 1) {\n            result = 2;\n        }\n        else {\n            *((uint8_t *)(input_ptr) + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr |= 1;\n            }\n            **input_ptr &= 0xfffff7ff;\n            *((uint8_t *)(input_ptr) + 0x3d) = '*';\n            *((uint8_t *)(input_ptr) + 0x3e) = ' ';\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *((int16_t *)(input_ptr) + 0x14) = (int16_t)input_len;\n            input_ptr[0xb] = param_4;\n            *(uint16_t *)(input_ptr + 10) = *(uint16_t *)((uint8_t *)(input_ptr) + 0x2a);\n            *((uint8_t *)(input_ptr) + 0xf) = 0;\n            (*input_ptr)[1] |= 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "param_1": "error_code",
                "param_2": "linked_list",
                "param_3": "linked_list_size",
                "param_4": "value_to_add",
                "puVar1": "pointer_to_data",
                "piVar2": "pointer_to_current_node",
                "extraout_r1": "next_node",
                "ppiVar3": "previous_node",
                "ppiVar4": "head_node",
                "ppiVar5": "current_node",
                "ppiVar6": "previous_node",
                "ppiVar7": "current_node",
                "bVar8": "is_head_node"
            },
            "code": "void update_linked_list_080048dc(int* error_code, int* linked_list, int linked_list_size, int value_to_add)\n{\n    int** current_node = linked_list + linked_list_size - 1;\n    if(linked_list_size == 0)\n    {\n        return;\n    }\n    if(*current_node < 0)\n    {\n        current_node = (int**)((int)current_node + **current_node);\n    }\n    do_nothing_0800557c();\n    int** head_node = *(int***)PTR_DAT_08004974;\n    if(head_node == NULL)\n    {\n        current_node[1] = NULL;\n        *(int***)PTR_DAT_08004974 = current_node;\n        int** next_node = extraout_r1;\n        int** previous_node = (int**)PTR_DAT_08004974;\n    }\n    else if(current_node < head_node)\n    {\n        int** next_node = *current_node;\n        int** previous_node = (int**)((int)current_node + (int)next_node);\n        bool is_head_node = head_node == previous_node;\n        if(is_head_node)\n        {\n            previous_node = *head_node;\n            head_node = (int**)head_node[1];\n        }\n        current_node[1] = (int*)head_node;\n        if(is_head_node)\n        {\n            previous_node = (int**)((int)previous_node + (int)next_node);\n            *current_node = (int*)previous_node;\n        }\n        *(int***)PTR_DAT_08004974 = current_node;\n    }\n    else\n    {\n        do\n        {\n            int** previous_node = head_node;\n            int** next_node = (int**)head_node[1];\n            if(next_node == NULL)\n            {\n                break;\n            }\n            head_node = next_node;\n        } while(next_node <= current_node);\n        int** next_node = *previous_node;\n        if((int**)((int)previous_node + (int)next_node) == current_node)\n        {\n            next_node = (int**)((int)next_node + (int)*current_node);\n            *previous_node = (int*)next_node;\n            if(next_node == (int**)((int)previous_node + (int)next_node))\n            {\n                int* node_value = *next_node;\n                int** next_node_2 = (int**)next_node[1];\n                previous_node[1] = (int*)next_node_2;\n                next_node = (int**)((int)next_node + (int)node_value);\n                *previous_node = (int*)next_node;\n            }\n        }\n        else if(current_node < (int**)((int)previous_node + (int)next_node))\n        {\n            *error_code = 0xc;\n        }\n        else\n        {\n            int** next_node_2 = (int**)((int)current_node + (int)*current_node);\n            bool is_next_head_node = next_node == next_node_2;\n            if(is_next_head_node)\n            {\n                next_node_2 = (int**)*next_node;\n                next_node = (int**)next_node[1];\n            }\n            current_node[1] = (int*)next_node;\n            if(is_next_head_node)\n            {\n                next_node_2 = (int**)((int)next_node_2 + (int)*current_node);\n                *current_node = (int*)next_node_2;\n            }\n            previous_node[1] = (int*)current_node;\n        }\n    }\n    do_nothing_0800557e(error_code, previous_node, next_node, value_to_add);\n}",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "update_linked_list_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_callback_08003754",
                "param_1": "user_data_address",
                "iVar1": "callback_address",
                "subtract_four_from_param_08003750": "subtract_four_from_param"
            },
            "code": "void execute_callback_08003754(int user_data_address)\n{\n  int callback_address = subtract_four_from_param(user_data_address);\n  if ((*(code **)(callback_address + 0x48) != (code *)0x0) && (*(char *)(user_data_address + 0x18) == '\\x01')) {\n    (**(code **)(callback_address + 0x48))(callback_address,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flags_08001578",
                "param_1": "data_ptr",
                "puVar1": "data",
                "*(char *)((int)param_1 + 0x3d)": "data[15]",
                "*(undefined *)((int)param_1 + 0x3d)": "data[15] = '('",
                "*puVar1": "data[0]",
                "(*puVar1 & 1)": "(data[0] & 1)",
                "*puVar1 = *puVar1 | 1": "data[0] |= 1",
                "**param_1": "**data_ptr",
                "**param_1 | 0x400": "**data_ptr |= 0x400",
                "(*param_1)[1]": "(*data_ptr)[1]",
                "(*param_1)[1] | 0x300": "(*data_ptr)[1] |= 0x300"
            },
            "code": "int set_bit_and_flags_08001578(uint **data_ptr)\n{\n    uint *data = *data_ptr;\n    if (data[15] != ' ')\n        return 2;\n    data[15] = '(';\n    if ((data[0] & 1) == 0)\n        data[0] |= 1;\n    **data_ptr |= 0x400;\n    (*data_ptr)[1] |= 0x300;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "get_result_08004844",
                "param_1": "value",
                "param_2": "flag",
                "DAT_0800485c": "flag_check",
                "CONCAT44": "unused_concat"
            },
            "code": "unsigned long long get_result_08004844(uint64_t value, uint32_t flag) {\n    if (flag != 0) {\n        return (uint64_t)(value << 1);\n    }\n    return (unsigned long long)value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "get_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_at_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031f8": "data_1",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10"
            },
            "code": "undefined4 get_data_at_index_0800318c(int index) {\n    switch(index) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_at_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "checkInputAndProcessIfValid_080047d0",
                "count_bits_set_08004678": "countBitsSet",
                "PTR_DAT_080047ec": "dataPointer",
                "process_input_080047c0": "processInput",
                "iVar1": "bitsSetCount"
            },
            "code": "void checkInputAndProcessIfValid_080047d0(void)\n{\n  int bitsSetCount = countBitsSet();\n  if (*(int *)(PTR_DAT_080047ec + bitsSetCount * 0x14 + 0xc) != 0) {\n    processInput();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "checkInputAndProcessIfValid_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "run_infinite_loop_080040f8"
            },
            "code": "void run_infinite_loop_080040f8(void)\n{\n    while(true)\n    {\n        // Do nothing block with infinite loop\n    }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "findOffsetAndSetValue_0800500c",
                "param_1": "targetValuePtr",
                "param_2": "searchValue",
                "puVar1": "dataPtr",
                "iVar2": "offset"
            },
            "code": "void findOffsetAndSetValue_0800500c(int* targetValuePtr, int searchValue) {\n    undefined* dataPtr = PTR_DAT_08005028;\n    *(undefined4*)PTR_DAT_08005028 = 0;\n    int offset = get_offset_08004094(searchValue);\n    if ((offset == -1) && (*(int*)dataPtr != 0)) {\n        *targetValuePtr = *(int*)dataPtr;\n    }\n    return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "findOffsetAndSetValue_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "get_value_based_on_conditions_080023b4",
                "in_r3": "in_r3",
                "uVar1": "condition_value",
                "uVar2": "bitwise_value",
                "DAT_08002484": "return_value_1",
                "DAT_08002480": "return_value_2",
                "PTR_DAT_0800247c": "pointer_dat",
                "uVar3": "shifted_value",
                "concatenated_values_080002d0": "get_concatenated_values",
                "uVar4": "shifted_value_2",
                "uVar5": "shifted_value_3",
                "uVar6": "shifted_value_4",
                "uVar7": "shifted_value_5",
                "result": "final_result"
            },
            "code": "uint get_value_based_on_conditions_080023b4(void)\n{\n  uint concatenated_values;\n  uint result;\n  uint uVar1 = *(uint *)(PTR_DAT_0800247c + 0x8) & 0xc;\n  if (uVar1 == 4) {\n    return DAT_08002484;\n  }\n  if (uVar1 != 8) {\n    return DAT_08002480;\n  }\n  uint uVar2 = *(uint *)(PTR_DAT_0800247c + 0x4) & 0x3f;\n  if ((*(uint *)(PTR_DAT_0800247c + 0x4) & 0x400000) == 0) {\n    uint uVar3 = (uint)(*(int *)(PTR_DAT_0800247c + 0x4) << 0x11) >> 0x17;\n    concatenated_values = get_concatenated_values(uVar3 * 16000000, (((uint)(uVar3 * 0x20 < uVar3) * -0x3f - (uint)(uVar3 * 0x7c0 < uVar3 * 0x1f)) * 8 + (uint)CARRY4(uVar3 * 0x3d08, uVar3)) * 0x400 | uVar3 * 0x3d09 >> 0x16, uVar2, 0, in_r3);\n  }\n  else {\n    uint uVar3 = (uint)(*(int *)(PTR_DAT_0800247c + 0x4) << 0x11) >> 0x17;\n    concatenated_values = get_concatenated_values(uVar3 * 8000000, (((uint)(uVar3 * 0x20 < uVar3) * -0x3f - (uint)(uVar3 * 0x7c0 < uVar3 * 0x1f)) * 8 + (uint)CARRY4(uVar3 * 0x3d08, uVar3)) * 0x200, uVar2, 0, in_r3);\n  }\n  uint uVar4 = *(int *)(PTR_DAT_0800247c + 0x4) << 0xe;\n  uint uVar5 = uVar4 >> 0x1e;\n  uint uVar6 = uVar5 + 1;\n  uint uVar7 = uVar6 * 2;\n  result = concatenated_values / uVar7;\n  return result;\n}\n",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "get_value_based_on_conditions_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "checkAndUpdateInput_080011a4",
                "param_1": "inputMask",
                "DAT_080011bc": "dataPtr"
            },
            "code": "void checkAndUpdateInput_080011a4(uint inputMask) {\n  uint* DAT_080011bc = (uint*)(DAT_080011bc + 0x14);\n  if ((*DAT_080011bc & inputMask) != 0) {\n    *DAT_080011bc = inputMask;\n    checkInputAndProcessIfValid_080047d0();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "checkAndUpdateInput_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "process_input_if_conditions_08001e68",
                "param_1": "input_params",
                "puVar2": "ptr_to_input_params",
                "uVar3": "input_param_5",
                "uVar4": "input_param_1",
                "cVar1": "current_char"
            },
            "code": "void process_input_if_conditions_08001e68(uint **input_params)\n{\n  char current_char;\n  uint *ptr_to_input_params;\n  uint input_param_5;\n  uint input_param_1;\n\n  ptr_to_input_params = *input_params;\n  input_param_5 = ptr_to_input_params[5];\n  input_param_1 = ptr_to_input_params[1];\n\n  if (((input_param_5 & FLAG_1) != 0) && ((input_param_1 & 0x100) != 0)) {\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 1);\n    ptr_to_input_params[5] = 0xfffffeff;\n  }\n\n  if (((input_param_5 & FLAG_2) != 0) && ((input_param_1 & 0x100) != 0)) {\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 2);\n    (*input_params)[5] = 0xfffffdff;\n  }\n\n  if (((input_param_5 & FLAG_3) != 0) && ((input_param_1 & 0x100) != 0)) {\n    current_char = *(char *)((int)input_params + 0x3d);\n    if (((*(char *)((int)input_params + 0x3e) == ' ') && (*(short *)((int)input_params + 0x2a) == 0)) &&\n       (((current_char == '!' || (current_char == ')')) || ((current_char == '(' && (input_params[0xc] == (uint *)0x21)))))) {\n      execute_command(input_params);\n    }\n    else {\n      input_params[0x10] = (uint *)((uint)input_params[0x10] | 4);\n      if (*(char *)((int)input_params + 0x3e) == '\\x10') {\n        **input_params = **input_params | 0x200;\n      }\n      (*input_params)[5] = 0xfffffbff;\n    }\n  }\n\n  if (((input_param_5 & FLAG_4) != 0) && ((input_param_1 & 0x100) != 0)) {\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 8);\n    (*input_params)[5] = 0xfffff7ff;\n  }\n\n  if (input_params[0x10] != (uint *)0x0) {\n    process_input(input_params);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "process_input_if_conditions_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "data_ptr",
                "*(short *)((int)param_1 + 0x2a)": "data_len",
                "(*param_1)[1]": "data[1]",
                "(*param_1)[4]": "data[4]",
                "**param_1": "*data",
                "*(char *)puVar1": "*(char *)data_ptr",
                "*(undefined *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)data + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(uint8_t *)((int)data + 0x3e)",
                "param_1[9]": "data[9]",
                "param_1[0xb]": "data[0xb]",
                "param_1[0xc]": "data[0xc]"
            },
            "code": "uint32_t process_data_080019a0(uint32_t **data)\n{\n  uint32_t *data_ptr;\n  uint16_t data_len = *(uint16_t *)((int)data + 0x2a);\n  \n  if (data_len == 4) {\n    (*data)[1] &= 0xfffffbff;\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n  }\n  else if (data_len == 3) {\n    (*data)[1] &= 0xfffffbff;\n    **data &= 0xfffffbff;\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n  }\n  else if (data_len == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data &= 0xfffffbff;\n      **data |= 0x100;\n    }\n    else {\n      **data |= 0x200;\n    }\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    (*data)[1] &= 0xfffffcff;\n    *(uint8_t *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint32_t *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(uint8_t *)((int)data + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(uint8_t *)((int)data + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_index_less_than_10_08003f24",
                "uVar1": "index",
                "find_index_of_value_08003f00": "find_index_of_value",
                "PTR_DAT_08003f40": "PTR_FUNCTION_POINTER_ARRAY",
                "PTR_DAT_08003f44": "PTR_ARGUMENT_ARRAY",
                "code": "function_pointer",
                "undefined4": "uint32_t",
                "*(undefined4 *)(PTR_DAT_08003f44 + uVar1 * 4)": "*(uint32_t *)(PTR_ARGUMENT_ARRAY + index * 4)",
                "**(code **)(PTR_DAT_08003f40 + uVar1 * 4)": "*(void (**)(uint32_t))(PTR_FUNCTION_POINTER_ARRAY + index * 4)"
            },
            "code": "void execute_function_if_index_less_than_10_08003f24(void)\n{\n    uint32_t index = find_index_of_value();\n    if (index < 10) {\n        void (*function_pointer)(uint32_t) = **(code **)(PTR_DAT_08003f40 + uVar1 * 4);\n        uint32_t argument = *(undefined4 *)(PTR_DAT_08003f44 + uVar1 * 4);\n        function_pointer(argument);\n    }\n    return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_index_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "num_params",
                "param_2": "param_value",
                "puVar1": "data_pointer"
            },
            "code": "void initialize_data_080046b4(int num_params, int param_value, undefined4 param_3, undefined4 param_4)\n{\n    undefined *data_pointer;\n    data_pointer = PTR_DATA_08004754;\n    if (num_params != 1) {\n        return;\n    }\n    if (param_value == 0xffff) {\n        *PTR_DATA_08004754 = 6;\n        *(undefined4 *)(data_pointer + 0xc) = 0;\n        data_pointer[0x14] = 7;\n        *(undefined4 *)(data_pointer + 0x20) = 0;\n        data_pointer[0x28] = 8;\n        *(undefined4 *)(data_pointer + 0x34) = 0;\n        data_pointer[0x3c] = 9;\n        *(undefined4 *)(data_pointer + 0x48) = 0;\n        data_pointer[0x50] = 10;\n        *(undefined4 *)(data_pointer + 0x5c) = 0;\n        data_pointer[100] = 0x17;\n        *(undefined4 *)(data_pointer + 0x70) = 0;\n        data_pointer[0x78] = 0x17;\n        *(undefined4 *)(data_pointer + 0x84) = 0;\n        data_pointer[0x8c] = 0x17;\n        *(undefined4 *)(data_pointer + 0x98) = 0;\n        data_pointer[0xa0] = 0x17;\n        *(undefined4 *)(data_pointer + 0xac) = 0;\n        data_pointer[0xb4] = 0x17;\n        *(undefined4 *)(data_pointer + 0xc0) = 0;\n        data_pointer[200] = 0x28;\n        *(undefined4 *)(data_pointer + 0xd4) = 0;\n        data_pointer[0xdc] = 0x28;\n        *(undefined4 *)(data_pointer + 0xe8) = 0;\n        data_pointer[0xf0] = 0x28;\n        *(undefined4 *)(data_pointer + 0xfc) = 0;\n        data_pointer[0x104] = 0x28;\n        *(undefined4 *)(data_pointer + 0x110) = 0;\n        data_pointer[0x118] = 0x28;\n        *(undefined4 *)(data_pointer + 0x124) = 0;\n        data_pointer[300] = 0x28;\n        *(undefined4 *)(data_pointer + 0x138) = 0;\n        get_result_from_parameters_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DATA_08004758, data_pointer, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_input_0800160e",
                "param_1": "input_array",
                "puVar2": "output_buffer",
                "cVar1": "current_char"
            },
            "code": "int process_input_0800160e(int *input_array)\n{\n  char current_char;\n  char *output_buffer;\n\n  current_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    output_buffer = (char *)input_array[9];\n    input_array[9] = (int)(output_buffer + 1);\n    *output_buffer = (char)*(int *)(*input_array + 0x10);\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) - 1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == '*')) {\n      *(unsigned int *)(*input_array + 4) = *(unsigned int *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x22;\n      *(char *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_0800160c();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "add_byte_to_uint_and_store_08000e18",
                "PTR_DAT_08000e28": "ptr",
                "PTR_DAT_08000e2c": "byte_ptr",
                "uint": "unsigned int",
                "byte": "unsigned char",
                "int": "signed int",
                "*ptr": "store",
                "*int_ptr": "store_int",
                "*(byte*)PTR_DAT_08000e2c": "byte_val"
            },
            "code": "void add_byte_to_uint_and_store_08000e18() {\n    uint* PTR_DAT_08000e28 = (uint*)PTR_DAT_08000e28;\n    byte *(byte*)PTR_DAT_08000e2c = *(byte*)PTR_DAT_08000e2c;\n    int* int_PTR_DAT_08000e28 = (int*)PTR_DAT_08000e28;\n    *PTR_DAT_08000e28 = *int_PTR_DAT_08000e28 + (uint)*(byte*)PTR_DAT_08000e2c;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "add_byte_to_uint_and_store_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "update_flag_and_values_08003486",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "flag",
                "local_24": "mask",
                "local_18": "constant",
                "local_20": "ptr_value1",
                "local_1c": "ptr_value2",
                "set_flag_080031fc": "set_flag",
                "update_values_08000fb4": "update_values"
            },
            "code": "void update_flag_and_values_08003486(uint32_t input, uint32_t value1, uint32_t value2)\n{\n  uint32_t flag = set_flag(input);\n  uint32_t mask = 0xFFFF & (1 << (input & 0xF));\n  uint32_t constant = 2;\n  uint32_t ptr_value1 = value1;\n  uint32_t ptr_value2 = value2;\n  update_values(flag, &mask, &constant, &ptr_value1, &ptr_value2);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_flag_and_values_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "execute_function_and_update_result_08005662",
                "param_1": "function_param",
                "param_2": "result_param",
                "iVar1": "function_result",
                "uVar2": "result_flags",
                "bVar3": "is_failure"
            },
            "code": "void execute_function_and_update_result_08005662(int function_param, int result_param) {\n  int function_result = execute_return_zero(function_param, *(short *)(result_param + 0xe));\n  bool is_failure = function_result == -1;\n  ushort result_flags = *(ushort *)(result_param + 0xc);\n  if (is_failure) {\n    result_flags &= 0xefff;\n  }\n  else {\n    *(int *)(result_param + 0x54) = function_result;\n    result_flags |= 0x1000;\n  }\n  *(ushort *)(result_param + 0xc) = result_flags;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_and_update_result_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "update_combination_080042ac",
                "param_1": "combination_ptr",
                "iVar1": "check_result",
                "uVar2": "new_index",
                "local_9": "new_value"
            },
            "code": "void update_combination_080042ac(int combination_ptr)\n{\n    int check_result;\n    ushort new_index;\n    undefined new_value;\n    \n    check_result = check_combination(combination_ptr, &new_value);\n    \n    if (check_result == 0)\n    {\n        new_index = *(ushort *)(combination_ptr + 100) + 1U & 0x3f;\n        if (new_index != *(ushort *)(combination_ptr + 0x66))\n        {\n            *(undefined *)(*(int *)(combination_ptr + 0x60) + (uint)*(ushort *)(combination_ptr + 100)) = new_value;\n            *(ushort *)(combination_ptr + 100) = new_index;\n        }\n    }\n}\n",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "update_combination_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_data_08001864",
                "param_1": "data_ptr",
                "puVar1": "data",
                "PTR_DAT_080003d0": "char_pointer_1",
                "PTR_DAT_080003ac": "short_pointer_1",
                "PTR_DAT_080003a8": "uint32_t_pointer_1",
                "PTR_DAT_080003a4": "uint32_t_pointer_2",
                "PTR_DAT_080003a0": "uint32_t_pointer_3",
                "PTR_FUN_08001718": "do_nothing_08001718",
                "PTR_FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "uint32_t process_data_08001864(uint32_t **data_ptr) {\n  uint32_t *data = data_ptr[11];\n  if (*(char *)((int)data_ptr + 0x3d) == '!') {\n    if (*(int16_t *)((int)data_ptr + 0x2a) == 0) {\n      if (((data == (uint32_t *)0x4) || (data == (uint32_t *)0x8)) || (data == (uint32_t *)0xffff0000)) {\n        (*data_ptr)[1] &= 0xfffff8ff;\n        **data_ptr |= 0x200;\n        data_ptr[12] = (uint32_t *)0x0;\n        *(char *)((int)data_ptr + 0x3d) = 0x20;\n        if (*(char *)((int)data_ptr + 0x3e) == '@') {\n          *(char *)((int)data_ptr + 0x3e) = 0;\n          PTR_FUN_08001718();\n        }\n        else {\n          *(char *)((int)data_ptr + 0x3e) = 0;\n          PTR_FUN_080015b6();\n        }\n      }\n      else {\n        (*data_ptr)[1] &= 0xfffff8ff;\n        data_ptr[12] = (uint32_t *)0x11;\n        *(char *)((int)data_ptr + 0x3e) = 0;\n        *(char *)((int)data_ptr + 0x3d) = 0x20;\n        PTR_FUN_080015b6();\n      }\n    }\n    else {\n      data = data_ptr[9];\n      data_ptr[9] = (uint32_t *)((int)data + 1);\n      (*data_ptr)[4] = (uint32_t)*(char *)data;\n      *(int16_t *)((int)data_ptr + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_for_param_08000f2c",
                "param_1": "param",
                "*DAT_08000f48": "*flag"
            },
            "code": "void set_flag_for_param_08000f2c(int param) {\n  if (param != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_for_param_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_at_position_08000ec4",
                "param_1": "position",
                "DAT_08000edc": "data_ptr",
                "int": "int",
                "bit_position": "bit_position",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_at_position_08000ec4(uint position) {\n  if (position >= 0) {\n    int* DAT_08000edc = DAT_08000edc + (position >> 5) * 4;\n    int bit_position = position & 0x1f;\n    int bit_mask = 1 << bit_position;\n    *DAT_08000edc = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "calculate_offset_if_dat_not_zero_08004338",
                "DAT_0800435c": "data_pointer",
                "PTR_DAT_08004360": "data_pointer_pointer",
                "calculate_offset_08004240": "calculate_offset"
            },
            "code": "void calculate_offset_if_dat_not_zero_08004338(void)\n{\n    if (DAT_0800435c != 0)\n    {\n        calculate_offset(DAT_0800435c);\n    }\n    return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "calculate_offset_if_dat_not_zero_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_system_interrupt_080005e0",
                "software_interrupt": "system_interrupt"
            },
            "code": "void trigger_system_interrupt_080005e0(void)\n{\n  system_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "handle_system_interrupt_080005e4",
                "param_1": "interrupt_number",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result"
            },
            "code": "int handle_system_interrupt_080005e4(int interrupt_number, int param1, int param2, int param3, int param4) {\n  int interrupt_flag = *(int *)PTR_DAT_080005fc;\n  if (interrupt_flag != 0) {\n    return 0;\n  }\n  int result = trigger_system_interrupt_080005e0(interrupt_number, param1, param2, param3, param4);\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "handle_system_interrupt_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "calculate_and_update_crc_0800076c",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "calculated_crc",
                "iVar2": "result",
                "uVar3": "crc"
            },
            "code": "void calculate_and_update_crc_0800076c(int **data, uint data_length, uint param_3, uint param_4)\n{\n  uint crc = (uint)*(byte *)((int)data + 0x49);\n  uint calculated_crc = calculate_crc16_ccitt(data, crc, param_3, param_4, param_4);\n  *(char *)((int)data + crc + 9) = (char)((ushort)calculated_crc >> 8);\n  crc = (crc + 1) & 0xff;\n  *(char *)((int)data + crc + 9) = (char)calculated_crc;\n  *(char *)((int)data + 0x49) = (char)crc + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    set_bit_at_index(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    set_bit_at_index(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      int result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  int pointer = get_pointer_and_return_value_from_global_data();\n  data[0x17] = (int *)(pointer + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_08000b54",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "calculate_and_update_crc_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "update_value_at_index_08004460",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "new_value"
            },
            "code": "void update_value_at_index_08004460(int index, uint value) {\n  undefined2 new_value;\n  if (value < 0x60) {\n    new_value = *(undefined2 *)(PTR_DAT_08004478 + value * 2);\n  }\n  else {\n    new_value = 0xffff;\n  }\n  *(undefined2 *)(index + 300) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "update_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_value_at_address_based_on_condition_08001198",
                "param_1": "address",
                "param_2": "value",
                "param_3": "condition",
                "*(int *)(param_1 + 0x18)": "value_at_address"
            },
            "code": "void set_value_at_address_based_on_condition_08001198(int address, int value, int condition) {\n  if (condition == 0) {\n    *(int *)(address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_condition_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_from_uint_at_index_08003138",
                "param_1": "value",
                "param_2": "index",
                "PTR_": "value_ptr",
                "DAT_": "masked_value"
            },
            "code": "uint get_bit_from_uint_at_index_08003138(uint value, int index) {\n    uint* PTR_ = (uint*)(index + ((value << 0x18) >> 0x1c) * 4);\n    uint DAT_ = value & 0xf;\n    uint shifted_value = (*PTR_) >> DAT_;\n    return shifted_value & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_from_uint_at_index_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "update_bit_at_index_08002848",
                "param_1": "bit_array",
                "param_2": "index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*bit_array",
                "uint": "unsigned int",
                "&(1 << (param_2 & 0xff))": "(1 << (index & 0xff))",
                "~(1 << (param_2 & 0xff))": "~(1 << (index & 0xff))",
                "param_2 & 0xff": "index & 0xff",
                "param_3 << (param_2 & 0xff)": "bit_value << (index & 0xff)"
            },
            "code": "void update_bit_at_index_08002848(int* bit_array, uint index, int bit_value) {\n    uint mask = ~(1 << (index & 0xff));\n    *bit_array = (*bit_array & mask) | (bit_value << (index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "update_bit_at_index_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_two_bytes_0800312c",
                "param_1": "address",
                "*PTR_DAT_08004000_0000003a": "first_byte",
                "*PTR_DAT_08004000_00000039": "second_byte"
            },
            "code": "byte combine_two_bytes_0800312c(int address)\n{\n    byte *PTR_DAT_08004000_0000003a = *(byte *)(address + 0x3a);\n    byte *PTR_DAT_08004000_00000039 = *(byte *)(address + 0x39);\n    return *PTR_DAT_08004000_0000003a | *PTR_DAT_08004000_00000039;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": false,
            "current_name": "combine_two_bytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_flags_080028f0",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "data_ptr"
            },
            "code": "int clear_flags_080028f0(uint **data, int flag)\n{\n  uint *data_ptr = *data;\n  update_flags(data_ptr, flag, 0);\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[17] = data_ptr[17] & 0xffff7fff;\n  }\n  data_ptr = *data;\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr = *data_ptr & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_flags_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_pointer_from_global_data_and_return_value_08000e30",
                "PTR_DAT_08000e38": "pointer_to_global_data",
                "undefined4": "int",
                "*": "void*"
            },
            "code": "get_pointer_from_global_data_and_return_value_08000e30() {\n  void* pointer = *(void**)PTR_DAT_08000e38;\n  return (int)pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_pointer_from_global_data_and_return_value_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "set_flag_to_2_and_clear_bit_08000f56",
                "param_1": "flag_ptr",
                "*(undefined *)(param_1 + 4)": "*flag_ptr",
                "clear_bit_in_uint_at_offset_from_dat_080033d4_080033c8": "clear_bit",
                "*(undefined4 *)(param_1 + 0x10)": "*counter",
                "*(undefined *)(param_1 + 5)": "*status"
            },
            "code": "int set_flag_to_2_and_clear_bit_08000f56(uint8_t* flag_ptr) {\n  if (flag_ptr != NULL) {\n    *flag_ptr = 2;\n    clear_bit();\n    uint32_t* counter = (uint32_t*)(flag_ptr + 0x10);\n    *counter = 0;\n    *flag_ptr = 0;\n    uint8_t* status = flag_ptr + 5;\n    *status = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_flag_to_2_and_clear_bit_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "decode_data_0800295c",
                "param_1": "data",
                "pbVar2": "byte_ptr",
                "sVar1": "counter",
                "*param_1": "ptr1",
                "param_1[2]": "data[2]",
                "param_1[4]": "data[4]",
                "param_1[8]": "data[8]",
                "*pbVar2": "*byte_ptr",
                "*(uint *)(*param_1 + 4)": "ptr1[1]",
                "*(ushort *)param_1[8]": "*(uint16_t *)ptr2",
                "*(uint *)(*param_1 + 0xc)": "ptr1[3]"
            },
            "code": "int decode_data_0800295c(int *data)\n{\n    char first_char = *(char *)((int)data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    int *ptr1 = (int *)*data;\n    int *ptr2 = (int *)data[8];\n    if (data[2] == 0x1000) {\n        uint16_t *ushort_ptr = (uint16_t *)ptr2;\n        ptr1[1] = *ushort_ptr & 0x1ff;\n        if (data[4] == 0) {\n            data[8] += 2;\n        }\n        else {\n            data[8] += 1;\n        }\n    }\n    else {\n        uint8_t *byte_ptr = (uint8_t *)ptr2;\n        ptr1[1] = *byte_ptr;\n        data[8]++;\n    }\n    short counter = *(short *)((int)data + 0x26) - 1;\n    *(short *)((int)data + 0x26) = counter;\n    if (counter == 0) {\n        ptr1[3] &= 0xffffff7f;\n        ptr1[3] |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "decode_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_array_value_at_index_08003380_08003380",
                "param_1": "array",
                "param_2": "index",
                "param_3": "array_size",
                "param_4": "value_to_check",
                "iVar1": "array_value",
                "get_array_value_or_negative_one_0800354a": "get_array_value_at_index_or_negative_one_0800354a"
            },
            "code": "int check_array_value_at_index_08003380_08003380(int array[], int index, int array_size, int value_to_check) {\n  int array_value = array[index];\n  if (array_value == value_to_check) {\n    return 16;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_array_value_at_index_08003380_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_values_based_on_flag_08004110",
                "param_1": "flag_index",
                "param_2": "flag_value",
                "param_3": "flag_update_type",
                "param_4": "array",
                "iVar1": "bit_value",
                "puVar2": "value_array",
                "iVar3": "value_index"
            },
            "code": "void update_values_based_on_flag_08004110(uint flag_index, uint flag_value, uint flag_update_type, uint* array) {\n  int value_index;\n  uint* value_array;\n  if (flag_index < 0x60) {\n    value_index = (int)*(short*)(PTR_DAT_080041a8 + flag_index * 2);\n    value_array = PTR_DAT_080041a8;\n  }\n  else {\n    value_index = -1;\n    value_array = array;\n  }\n  if (value_index != -1) {\n    int bit_value = get_bit_from_uint_at_index_08003138(value_index, PTR_DAT_080041ac, flag_update_type, value_array, array);\n    if (bit_value != 0) {\n      if (find_short_in_array_0800355e(value_index, PTR_DAT_080041b0) == 0) {\n        if (find_short_in_array_0800355e(value_index, PTR_DAT_080041b4) != 0) {\n          update_bits_if_valid_value_found_08003414(value_index);\n        }\n      }\n      else {\n        update_array_080033d8(value_index);\n      }\n      update_bit_0800316c(value_index, PTR_DAT_080041ac);\n    }\n    switch (flag_value) {\n    case 0:\n      update_flag_and_values_08003486(value_index, 0);\n      break;\n    case 1:\n      update_flag_and_values_08003486(value_index, 1, 0);\n      break;\n    case 2:\n      update_flag_and_values_08003486(value_index, 0, 1);\n      break;\n    case 3:\n      update_flag_and_values_08003486(value_index, 0, 2);\n    }\n    update_bit_at_index_0800314e(value_index, PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_080033d8",
                "FUN_0800355e",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_0800316c",
                "FUN_08003138"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "update_values_based_on_flag_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "validate_input_08000ee0",
                "param_1": "input",
                "puVar1": "data_ptr",
                "DAT_08000f04": "data_ptr",
                "DAT_08000f08": "data_block_ptr"
            },
            "code": "int validate_input_08000ee0(int input)\n{\n  int *DAT_08000f04 = DAT_08000f04;\n  if (input - 1U < 0x1000000) {\n    DAT_08000f04[1] = input - 1U;\n    *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n    DAT_08000f04[2] = 0;\n    *DAT_08000f04 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "validate_input_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "decode_message_080015bc",
                "param_1": "message",
                "cVar1": "last_char",
                "pbVar2": "message_data"
            },
            "code": "int decode_message_080015bc(int *message) {\n    char last_char = *(char *)((int)message + 0x3d);\n    if (*(short *)((int)message + 0x2a) != 0) {\n        byte *message_data = (byte *)message[9];\n        message[9] = (int)(message_data + 1);\n        *(uint *)(*message + 0x10) = (uint)*message_data;\n        *(short *)((int)message + 0x2a) = *(short *)((int)message + 0x2a) + -1;\n        if ((*(short *)((int)message + 0x2a) == 0) && (last_char == ')')) {\n            *(uint *)(*message + 4) = *(uint *)(*message + 4) & 0xfffffbff;\n            message[0xc] = 0x21;\n            *(undefined *)((int)message + 0x3d) = 0x28;\n            do_nothing();\n        }\n        return 0;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "decode_message_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_0800066c",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "data_limit",
                "param_4": "data_type",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_data_0800066c(int data_address, char data_value, int data_limit, char data_type){\n  *(char *)(data_address + 4) = data_value;\n  if (3 < data_limit) {\n    data_limit = 0;\n  }\n  *(char *)(data_address + 5) = (char)data_limit;\n  *(char *)(data_address + 6) = data_type;\n  *(short *)(data_address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "set_and_validate_combination_080042e8",
                "param_1": "combination_index",
                "param_2": "combination_value",
                "bVar1": "incremented_value",
                "bVar2": "masked_value",
                "iVar3": "is_valid_combination"
            },
            "code": "int set_and_validate_combination_080042e8(int combination_index, unsigned char combination_value) {\n  unsigned char incremented_value = *(unsigned short *)(combination_index + 0x140) + 1;\n  unsigned char masked_value = incremented_value & 0x7f;\n  if (incremented_value == 0) {\n    masked_value = -(-incremented_value & 0x7f);\n  }\n  while (*(unsigned short *)(combination_index + 0x142) == (unsigned short)masked_value) {\n  }\n  *(unsigned char *)(*(int *)(combination_index + 0x13c) + (unsigned int)*(unsigned short *)(combination_index + 0x140)) = combination_value;\n  *(unsigned short *)(combination_index + 0x140) = (unsigned short)masked_value;\n  int is_valid_combination = is_combination_valid_08003df4(combination_index + 0xd4);\n  if (is_valid_combination == 0) {\n    update_data_structure_08003eac(combination_index + 0xd4,PTR_LAB_0800420c_1_08004334);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "set_and_validate_combination_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_command_if_valid_input_080038d0",
                "param_1": "input_buffer",
                "iVar1": "subtracted_input",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "*(code **)(iVar1 + 0x60)": "command_function",
                "*(char *)(iVar1 + 0x5e)": "command_flag",
                "*(char *)(iVar1 + 0x2c)": "command_char",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void execute_command_if_valid_input_080038d0(void *input_buffer)\n{\n  int subtracted_input = subtract_four_from_input();\n  code *command_function = *(code **)(subtracted_input + 0x60);\n  char command_flag = *(char *)(subtracted_input + 0x5e);\n  char command_char = *(char *)(subtracted_input + 0x2c);\n  if ((command_function != (code *)0x0) && (command_flag == '\\x01') && (command_char != ' ')) {\n    (*command_function)(subtracted_input + 0x68);\n  }\n  set_bit_and_flags(input_buffer);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_command_if_valid_input_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "returnOne_0800410c",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int returnOne_0800410c() {\n    int one = 1;\n    return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "returnOne_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_shifted_value_from_ptr_dat_0800260c",
                "uVar1": "value",
                "get_value_from_ptr_dat_080025e0": "get_value_from_ptr_dat",
                "PTR_DAT_08002628": "shift_amounts",
                "DAT_08002624": "data_ptr",
                "index": "shift_amount_index",
                "shifted_value": "shifted_value"
            },
            "code": "uint get_shifted_value_from_ptr_dat_0800260c(void)\n{\n  uint value = get_value_from_ptr_dat();\n  uint index = (*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint shifted_value = value >> PTR_DAT_08002628[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_ptr_dat_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x138)": "offset_1",
                "*(short *)(param_1 + 0x13a)": "offset_2",
                "result": "result"
            },
            "code": "ushort calculate_offset_08004240(int base_address)\n{\n    ushort offset_1 = *(ushort *)(base_address + 0x138);\n    ushort offset_2 = *(ushort *)(base_address + 0x13a);\n    ushort result = (offset_1 + 0x40) - offset_2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "set_bit_at_index_080041bc",
                "param_1": "index",
                "param_2": "value",
                "param_3": "bit_offset",
                "param_4": "destination_memory",
                "iVar1": "bit_value",
                "uVar2": "data",
                "puVar3": "global_short_array",
                "uVar4": "bit_mask",
                "PTR_DAT_080041fc": "global_short_array",
                "PTR_DAT_08004200": "global_bit_array",
                "get_bit_from_uint_at_index_08003138": "get_bit_from_uint_at_index",
                "get_data_at_index_0800318c": "get_data_at_index",
                "set_value_at_address_based_on_condition_080034b6": "set_value_at_address_based_on_condition",
                "global_pointer": "global_pointer"
            },
            "code": "void set_bit_at_index_080041bc(uint index, uint value, uint bit_offset, uint* destination_memory)\n{\n    uint bit_mask;\n    if (index < 0x60) {\n        bit_mask = (uint)*(short *)(PTR_DAT_080041fc + index * 2);\n    }\n    else {\n        bit_mask = 0xffffffff;\n        destination_memory = destination_memory;\n    }\n    if ((bit_mask != 0xffffffff) &&\n        (get_bit_from_uint_at_index(bit_mask, PTR_DAT_08004200, bit_offset, destination_memory, global_pointer) != 0)) {\n        uint data = get_data_at_index((bit_mask << 0x18) >> 0x1c);\n        set_value_at_address_based_on_condition(data, 1 << (bit_mask & 0xf) & 0xffff, value);\n    }\n}",
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "param_1": "struct_ptr",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "void initialize_struct_08004364(int struct_PTR_) {\n    int* PTR_1 = (int*)(struct_PTR_ + 0x134);\n    *PTR_1 = struct_PTR_ + 0x11;\n    short* PTR_2 = (short*)(struct_PTR_ + 0x138);\n    *PTR_2 = 0;\n    short* PTR_3 = (short*)(struct_PTR_ + 0x13a);\n    *PTR_3 = 0;\n    int* PTR_4 = (int*)(struct_PTR_ + 0x13c);\n    *PTR_4 = struct_PTR_ + 0x51;\n    short* PTR_5 = (short*)(struct_PTR_ + 0x140);\n    *PTR_5 = 0;\n    short* PTR_6 = (short*)(struct_PTR_ + 0x142);\n    *PTR_6 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "set_data_and_return_param_08000682",
                "param_1": "parameter",
                "set_data_0800066c": "set_data"
            },
            "code": "undefined4 set_data_and_return_param_08000682(undefined4 parameter) {\n  set_data();\n  return parameter;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "set_data_and_return_param_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "update_register_value_08000e3c",
                "param_1": "register_value",
                "DAT_08000e5c": "register_address",
                "*PTR_08000e5c": "register_ptr",
                "mask": "bitmask",
                "shifted_value": "value_to_shift",
                "constant_value": "constant_mask"
            },
            "code": "void update_register_value_08000e3c(uint register_value) {\n    uint **PTR_08000e5c = (uint *)(DAT_08000e5c + 0xc);\n    uint mask = 0xf8ff;\n    uint shifted_value = (register_value & 7) << 8;\n    uint constant_value = 0x5fa0000;\n    **PTR_08000e5c = shifted_value | (**PTR_08000e5c & mask) | constant_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "update_register_value_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "update_bit_and_check_boundaries_08002864",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar2": "array_pointer",
                "bVar1": "is_out_of_bounds",
                "DAT_080028d0": "PTR_BOUNDARY_CHECK1",
                "BIT_ARRAY_SIZE_INDEX": "BIT_ARRAY_SIZE_INDEX",
                "BOUNDARY_CHECK_BIT_INDEX": "BOUNDARY_CHECK_BIT_INDEX"
            },
            "code": "uint32_t update_bit_and_check_boundaries_08002864(uint32_t **bit_array, uint32_t bit_index)\n{\n  bool is_out_of_bounds;\n  uint32_t *array_pointer;\n  update_bit_at_index_08002848(*bit_array, bit_index, 0);\n  array_pointer = *bit_array;\n  if (array_pointer == DAT_080028d0)\n  {\n    is_out_of_bounds = true;\n  }\n  else if (array_pointer == PTR_BOUNDARY_CHECK2)\n  {\n    is_out_of_bounds = true;\n  }\n  else\n  {\n    is_out_of_bounds = false;\n  }\n  if (((is_out_of_bounds) && ((array_pointer[BIT_ARRAY_SIZE_INDEX] & 0x1111) == 0)) && ((array_pointer[BIT_ARRAY_SIZE_INDEX] & 0x444) == 0))\n  {\n    array_pointer[BOUNDARY_CHECK_BIT_INDEX] = array_pointer[BOUNDARY_CHECK_BIT_INDEX] & 0xffff7fff;\n  }\n  array_pointer = *bit_array;\n  if (((array_pointer[BIT_ARRAY_SIZE_INDEX] & 0x1111) == 0) && ((array_pointer[BIT_ARRAY_SIZE_INDEX] & 0x444) == 0))\n  {\n    *array_pointer = *array_pointer & 0xfffffffe;\n  }\n  *(bool *)((int)bit_array + 0x39) = true;\n  return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_bit_and_check_boundaries_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_array_0800532c",
                "param_1": "array",
                "param_2": "value_1",
                "param_3": "value_2",
                "puVar1": "PTR_LAB_08005686_1_08005370"
            },
            "code": "void initialize_array_0800532c(undefined4 *array, undefined2 value_1, undefined2 value_2) {\n  array[0] = 0;\n  array[1] = 0;\n  array[2] = 0;\n  *(undefined2 *)(array + 3) = value_1;\n  array[0x19] = 0;\n  *(undefined2 *)((int)array + 0xe) = value_2;\n  array[4] = 0;\n  array[5] = 0;\n  array[6] = 0;\n  fill_array_with_value_080048cc(array + 0x17, 0, 8);\n  array[9] = DAT_08005364;\n  array[10] = PTR_process_data_0800562a_1_08005368;\n  array[0xb] = PTR_execute_function_and_update_result_08005662_1_0800536c;\n  array[8] = array;\n  array[0xc] = PTR_LAB_08005686_1_08005370;\n  return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_array_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "update_bit_at_index_0800314e",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "array_index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void update_bit_at_index_0800314e(uint bit_index, int* array) {\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* target = (uint*)(array + array_index);\n  uint mask = 1 << (bit_index & 0xf);\n  *target = *target | mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_at_index_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_struct_and_set_values_0800447c",
                "param_1": "struct_ptr",
                "param_2": "path_start",
                "param_3": "value_1",
                "param_4": "ptr_dat_cc",
                "uVar1": "shortest_path_length_1",
                "PTR_PTR_FUN_080042e8_1_080044c8": "PTR_PTR_initialize_struct",
                "PTR_DAT_080044cc": "PTR_DAT_080044cc",
                "set_value_based_on_index_08004444": "set_value_based_on_index",
                "update_value_at_index_08004460": "update_value_at_index",
                "find_shortest_path_length_0800351e": "find_shortest_path_length",
                "initialize_struct_08004364": "initialize_struct"
            },
            "code": "undefined4 *initialize_struct_and_set_values_0800447c(undefined4 *struct_ptr, undefined4 path_start, undefined4 value_1, undefined4 *ptr_dat_cc, undefined4 value_2)\n{\n    struct_ptr[1] = 0;\n    struct_ptr[2] = 1000;\n    *struct_ptr = PTR_PTR_FUN_080042e8_1_080044c8;\n    if (struct_ptr == (undefined4 *)PTR_DAT_080044cc) {\n        set_value_based_on_index(struct_ptr, 0x4c, value_1, PTR_DAT_080044cc, value_2);\n        update_value_at_index(struct_ptr, 0x4d);\n    }\n    else {\n        undefined2 shortest_path_length_1 = find_shortest_path_length(path_start, PTR_DAT_080044d0);\n        *(undefined2 *)((int)struct_ptr + 0x12e) = shortest_path_length_1;\n        undefined2 shortest_path_length_2 = find_shortest_path_length(path_start, PTR_DAT_080044d4);\n        *(undefined2 *)(struct_ptr + 0x4b) = shortest_path_length_2;\n    }\n    initialize_struct(struct_ptr);\n    return struct_ptr;\n}",
            "called": [
                "FUN_08004444",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_struct_and_set_values_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "run_assertion_check_08004808",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "assertion",
                "param_4": "arg4",
                "uVar1": "ptr",
                "puVar2": "function_name",
                "uVar3": "result",
                "uVar4": "arg4_copy"
            },
            "code": "void run_assertion_check_08004808(int arg1, int arg2, char* assertion, int arg4) {\n  int ptr = *(int*)(*(int*)PTR_PTR_DAT_08004834 + 0xc);\n  char* function_name = PTR_s___function__08004838;\n  int arg4_copy = arg4;\n  if (assertion == NULL) {\n    return;\n  }\n  do {\n    execute_function_with_args_and_return_2nd_arg_08004860(ptr, PTR_s_assertion___s__failed__file___s__0800483c, arg4, arg1, arg2, function_name, assertion, arg4_copy);\n    long long result = process_input_and_run_infinite_loop_080051ac();\n    arg2 = (int)(result >> 0x20);\n    ptr = (int)result;\n  } while (true);\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "run_assertion_check_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "**param_1": "**bit_array",
                "*(undefined *)(param_1 + 1)": "*(char *)(bit_array + 1)"
            },
            "code": "int clear_bit_08000f72(uint **bit_array, uint bit_index) {\n  **bit_array = **bit_array & ~(1 << (bit_index & 0xff));\n  *(char *)(bit_array + 1) = 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_input_08001d00",
                "param_1": "input_data",
                "iVar1": "input_data_value",
                "uVar2": "value_1",
                "uVar3": "value_2",
                "uVar4": "value_3",
                "(int)param_1 + 0x3e": "special_character",
                "DAT_08001e60": "mask_1",
                "DAT_08001e4c": "mask_2",
                "process_input_08001256": "process_input_case_1",
                "set_uint_at_offset_from_ptr_0800124a": "process_input_case_2",
                "calculate_status_080011c0": "process_input_case_3",
                "DAT_08001e54": "mask_3",
                "DAT_08001e64": "mask_4",
                "DAT_08001e5c": "mask_5",
                "zero_out_bits_08001904": "process_input_case_4",
                "process_data_080019a0": "process_input_case_5",
                "parse_input_0800171a": "process_input_case_6",
                "process_data_08001864": "process_input_case_7",
                "validate_and_return_input_0800165a": "process_input_case_8",
                "execute_command_08001bfc": "process_input_case_9",
                "process_input_0800160e": "process_input_case_10",
                "increment_and_copy_08001440": "process_input_case_11",
                "decode_message_080015bc": "process_input_case_12",
                "process_data_08001420": "process_input_case_13"
            },
            "code": "void process_input_08001d00(int *input_data)\n{\n  int input_data_value = *input_data;\n  uint value_1 = *(uint *)(input_data_value + 0x18);\n  uint value_2 = *(uint *)(input_data_value + 0x14);\n  uint value_3 = *(uint *)(input_data_value + 4);\n  char special_character = *(char *)((int)input_data + 0x3e);\n\n  if ((special_character == '\\x10') || (special_character == '@')) {\n    if (((value_2 & 0x10001) == 0) || ((value_3 & 0x200) == 0)) {\n      if (((DAT_08001e60 & value_2) == 0) || ((value_3 & 0x200) == 0)) {\n        if (((DAT_08001e4c & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n          process_input_08001d00_08001256(input_data);\n        }\n      }\n      else {\n        set_uint_at_offset_from_ptr_0800124a(input_data);\n      }\n    }\n    else {\n      calculate_status_080011c0(input_data);\n    }\n    if ((DAT_08001e54 & value_1) == 0) {\n      if ((((DAT_08001e64 & value_2) != 0) && ((value_3 & 0x400) != 0)) && ((DAT_08001e5c & value_2) == 0)) {\n        zero_out_bits_08001904(input_data);\n        return;\n      }\n      if (((DAT_08001e5c & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n        process_data_080019a0(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((mask_6 & value_2) != 0) && ((value_3 & 0x400) != 0)) && ((DAT_08001e5c & value_2) == 0)) {\n        parse_input_0800171a(input_data);\n        return;\n      }\n      if (((DAT_08001e5c & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n        process_data_08001864(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n      validate_and_return_input_0800165a();\n      return;\n    }\n    if (((mask_7 & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n      execute_command_08001bfc(input_data);\n      return;\n    }\n    if ((DAT_08001e54 & value_1) == 0) {\n      if ((((DAT_08001e64 & value_2) != 0) && ((value_3 & 0x400) != 0)) && ((DAT_08001e5c & value_2) == 0)) {\n        process_input_08001d00_0800160e(input_data);\n        return;\n      }\n      if (((DAT_08001e5c & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n        increment_and_copy_08001440(input_data);\n      }\n    }\n    else {\n      if ((((mask_6 & value_2) != 0) && ((value_3 & 0x400) != 0)) && ((DAT_08001e5c & value_2) == 0)) {\n        decode_message_080015bc(input_data);\n        return;\n      }\n      if (((DAT_08001e5c & value_2) != 0) && ((value_3 & 0x200) != 0)) {\n        process_data_08001420(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080011c0",
                "FUN_0800124a",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_08001904",
                "FUN_080015bc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_0800160e",
                "FUN_08001864",
                "FUN_0800165a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001d00"
        }
    },
    "used_tokens": 175732,
    "layers": [
        [
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_0800355e",
            "thunk_FUN_0800410c",
            "FUN_08004544",
            "FUN_08000fb4",
            "FUN_08002d72",
            "FUN_08003582",
            "FUN_08004678",
            "FUN_08000f0c",
            "FUN_0800171a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004444",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_080035bc",
            "FUN_08001904",
            "FUN_0800387c",
            "FUN_080040fc",
            "FUN_08004860",
            "FUN_080011c0",
            "FUN_0800352e",
            "FUN_080008cc",
            "FUN_08002efa",
            "FUN_08004640",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08001420",
            "FUN_08000218",
            "FUN_08000e60",
            "FUN_08002eb2",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080040f8",
            "FUN_080019a0",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_080005e0",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_08000e30",
            "FUN_0800295c",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08000e3c",
            "FUN_0800314e",
            "FUN_08000f72"
        ],
        [
            "FUN_08003dd0",
            "FUN_080034f4",
            "FUN_0800573c",
            "FUN_080056d4",
            "FUN_080007f0",
            "FUN_08003df4",
            "FUN_08003900",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_08004560",
            "FUN_08003476",
            "FUN_0800346c",
            "FUN_08003880",
            "FUN_080025ec",
            "FUN_08002d0c",
            "FUN_0800351e",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08005718",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_08001f9c",
            "FUN_080045c8",
            "FUN_080047fe",
            "FUN_0800354a",
            "FUN_0800262c",
            "FUN_08003754",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_08003f24",
            "FUN_08003486",
            "FUN_08004338",
            "FUN_080005e4",
            "FUN_080028f0",
            "FUN_08000f56",
            "FUN_080038d0",
            "FUN_0800260c",
            "FUN_08000682",
            "FUN_08002864",
            "FUN_0800532c"
        ],
        [
            "FUN_08003e54",
            "FUN_08002488",
            "FUN_08003cc8",
            "FUN_080054b4",
            "FUN_08004204",
            "FUN_08002f4c",
            "FUN_08004978",
            "FUN_08002f66",
            "FUN_08003e18",
            "FUN_08002dd0",
            "FUN_08004622",
            "FUN_08001ab0",
            "FUN_08005608",
            "FUN_0800268e",
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_0800339c",
            "FUN_0800165a",
            "FUN_080051ac",
            "FUN_08001684",
            "FUN_080046b4",
            "FUN_08005662",
            "FUN_08003380",
            "FUN_080042e8",
            "FUN_080041bc",
            "FUN_0800447c"
        ],
        [
            "FUN_080006b4",
            "FUN_08000c8c",
            "FUN_080033d8",
            "FUN_08001bfc",
            "FUN_080044d8",
            "FUN_08002ffc",
            "FUN_08003414",
            "FUN_08004638",
            "FUN_0800377c",
            "FUN_08003d18",
            "FUN_080054fc",
            "FUN_08005374",
            "FUN_08001e68",
            "FUN_080042ac",
            "FUN_0800076c",
            "FUN_08004808"
        ],
        [
            "FUN_08000a4e",
            "FUN_08000998",
            "FUN_08000a7a",
            "FUN_080040ec",
            "FUN_080008e2",
            "FUN_080034ce",
            "FUN_08000b04",
            "FUN_08004388",
            "FUN_08000a00",
            "FUN_08004110",
            "FUN_08001d00"
        ],
        [
            "FUN_0800562a",
            "FUN_08000b54",
            "FUN_08000d8e",
            "FUN_08000600"
        ],
        [
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08004648"
        ],
        [
            "FUN_08004658"
        ],
        [
            "FUN_08000d3c"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005400",
            "FUN_080050d0",
            "FUN_080052cc"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ]
    ],
    "locked_functions": []
}