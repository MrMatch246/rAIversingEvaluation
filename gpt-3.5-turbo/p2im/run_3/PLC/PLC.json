{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_first_occurrence_08000230",
            "code": "\nbyte * find_first_occurrence_08000230(uint *input_array,uint target_byte,uint array_length)\n\n{\n  byte current_byte;\n  char is_byte_zero;\n  char is_byte_shifted_8_zero;\n  char is_byte_shifted_16_zero;\n  char is_byte_shifted_24_zero;\n  byte *next_byte_ptr;\n  uint *current_array_ptr;\n  byte *result_ptr;\n  uint array_ptr_alignment_check;\n  uint aligned_array_length;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool is_byte_in_second_xor_zero;\n  bool is_byte_shifted_8_in_second_xor_zero;\n  bool is_byte_shifted_16_in_second_xor_zero;\n  bool is_byte_shifted_24_in_second_xor_zero;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)array_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n      current_array_ptr = (uint *)((int)input_array + 1);\n      current_byte = *(byte *)input_array;\n      array_length = array_length - 1;\n      input_array = current_array_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    array_ptr_alignment_check = (uint)input_array & 7;\n    while( true ) {\n      if (array_ptr_alignment_check == 0) {\n        array_ptr_alignment_check = target_byte | target_byte << 8;\n        array_ptr_alignment_check = array_ptr_alignment_check | array_ptr_alignment_check << 0x10;\n        aligned_array_length = array_length & 0xfffffff8;\n        do {\n          current_array_ptr = input_array + 2;\n          aligned_array_length = aligned_array_length - 8;\n          xor_result_1 = *input_array ^ array_ptr_alignment_check;\n          xor_result_2 = input_array[1] ^ array_ptr_alignment_check;\n          is_byte_zero = -((char)xor_result_1 == '\\0');\n          is_byte_shifted_8_zero = -((char)(xor_result_1 >> 8) == '\\0');\n          is_byte_shifted_16_zero = -((char)(xor_result_1 >> 0x10) == '\\0');\n          is_byte_shifted_24_zero = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(is_byte_shifted_24_zero,CONCAT12(is_byte_shifted_16_zero,CONCAT11(is_byte_shifted_8_zero,is_byte_zero)));\n          is_byte_in_second_xor_zero = (char)xor_result_2 != '\\0';\n          is_byte_shifted_8_in_second_xor_zero = (char)(xor_result_2 >> 8) != '\\0';\n          is_byte_shifted_16_in_second_xor_zero = (char)(xor_result_2 >> 0x10) != '\\0';\n          is_byte_shifted_24_in_second_xor_zero = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(is_byte_shifted_24_in_second_xor_zero * is_byte_shifted_24_zero - !is_byte_shifted_24_in_second_xor_zero,\n                            CONCAT12(is_byte_shifted_16_in_second_xor_zero * is_byte_shifted_16_zero - !is_byte_shifted_16_in_second_xor_zero,\n                                     CONCAT11(is_byte_shifted_8_in_second_xor_zero * is_byte_shifted_8_zero - !is_byte_shifted_8_in_second_xor_zero,is_byte_in_second_xor_zero * is_byte_zero - !is_byte_in_second_xor_zero)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result_ptr = (byte *)((int)input_array + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result_ptr = (byte *)((int)input_array + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              is_byte_in_second_xor_zero = (xor_result_1 & 0x100) == 0;\n              next_byte_ptr = result_ptr + 1;\n              if (is_byte_in_second_xor_zero) {\n                is_byte_in_second_xor_zero = (xor_result_1 & 0x18000) == 0;\n                next_byte_ptr = result_ptr + 2;\n              }\n              result_ptr = next_byte_ptr;\n              if (is_byte_in_second_xor_zero) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          input_array = current_array_ptr;\n        } while (aligned_array_length != 0);\n        array_length = array_length & 7;\n        goto joined_r0x08000290;\n      }\n      current_array_ptr = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n      if (*(byte *)input_array == target_byte) break;\n      array_ptr_alignment_check = (uint)current_array_ptr & 7;\n      input_array = current_array_ptr;\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_array_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_first_occurrence_08000230",
                "param_1": "input_array",
                "param_2": "target_byte",
                "param_3": "array_length",
                "bVar1": "current_byte",
                "cVar2": "is_byte_zero",
                "cVar3": "is_byte_shifted_8_zero",
                "cVar4": "is_byte_shifted_16_zero",
                "cVar5": "is_byte_shifted_24_zero",
                "pbVar6": "next_byte_ptr",
                "puVar7": "current_array_ptr",
                "pbVar8": "result_ptr",
                "uVar9": "array_ptr_alignment_check",
                "uVar10": "aligned_array_length",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "is_byte_in_second_xor_zero",
                "bVar14": "is_byte_shifted_8_in_second_xor_zero",
                "bVar15": "is_byte_shifted_16_in_second_xor_zero",
                "bVar16": "is_byte_shifted_24_in_second_xor_zero"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "compute_result_080002d0",
            "code": "\nundefined8 compute_result_080002d0(int input1,int input2,int condition1,int condition2)\n\n{\n  undefined8 result;\n  \n  if ((condition2 == 0) && (condition1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = div_mod_64bit_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "compute_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition1",
                "param_4": "condition2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "div_mod_64bit_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong div_mod_64bit_08000300(uint dividend,uint dividend_low,uint divisor,uint divisor_low,uint *quotient_reminder)\n\n{\n  ulonglong quotient_high;\n  uint quotient_low;\n  uint quotient;\n  uint remainder_high;\n  uint remainder_low;\n  uint temp1;\n  uint temp2;\n  uint divisor_divided;\n  uint dividend_divided;\n  int leading_zeros;\n  bool carry;\n  \n  if (divisor_low == 0) {\n    if (dividend_low < divisor) {\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros != 0) {\n        divisor = divisor << leading_zeros;\n        dividend_low = dividend >> (0x20U - leading_zeros & 0xff) | dividend_low << leading_zeros;\n        dividend = dividend << leading_zeros;\n      }\n      divisor_divided = divisor >> 0x10;\n      temp1 = dividend_low / divisor_divided;\n      remainder_low = dividend >> 0x10 | (dividend_low - divisor_divided * temp1) * 0x10000;\n      remainder_high = temp1 * (divisor & 0xffff);\n      quotient = temp1;\n      if (remainder_low <= remainder_high && remainder_high - remainder_low != 0) {\n        carry = CARRY4(remainder_low,divisor);\n        remainder_low = remainder_low + divisor;\n        quotient = temp1 - 1;\n        if ((carry == false) && (remainder_low <= remainder_high && remainder_high - remainder_low != 0)) {\n          quotient = temp1 - 2;\n          remainder_low = remainder_low + divisor;\n        }\n      }\n      temp1 = (remainder_low - remainder_high) / divisor_divided;\n      remainder_low = dividend & 0xffff | ((remainder_low - remainder_high) - divisor_divided * temp1) * 0x10000;\n      divisor_divided = temp1 * (divisor & 0xffff);\n      remainder_high = temp1;\n      if (remainder_low <= divisor_divided && divisor_divided - remainder_low != 0) {\n        carry = CARRY4(remainder_low,divisor);\n        remainder_low = remainder_low + divisor;\n        remainder_high = temp1 - 1;\n        if ((carry == false) && (remainder_low <= divisor_divided && divisor_divided - remainder_low != 0)) {\n          remainder_high = temp1 - 2;\n          remainder_low = remainder_low + divisor;\n        }\n      }\n      remainder_low = remainder_low - divisor_divided;\n      remainder_high = remainder_high | quotient << 0x10;\n      quotient = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros == 0) {\n        dividend_low = dividend_low - divisor;\n        remainder_low = divisor >> 0x10;\n        dividend_divided = divisor & 0xffff;\n        quotient = 1;\n      }\n      else {\n        divisor = divisor << leading_zeros;\n        remainder_low = divisor >> 0x10;\n        remainder_high = dividend_low >> (0x20U - leading_zeros & 0xff);\n        temp2 = dividend >> (0x20U - leading_zeros & 0xff) | dividend_low << leading_zeros;\n        quotient = remainder_high / remainder_low;\n        dividend_divided = divisor & 0xffff;\n        divisor_divided = temp2 >> 0x10 | (remainder_high - remainder_low * quotient) * 0x10000;\n        temp1 = quotient * dividend_divided;\n        dividend = dividend << leading_zeros;\n        remainder_high = quotient;\n        if (divisor_divided <= temp1 && temp1 - divisor_divided != 0) {\n          carry = CARRY4(divisor_divided,divisor);\n          divisor_divided = divisor_divided + divisor;\n          remainder_high = quotient - 1;\n          if ((carry == false) && (divisor_divided <= temp1 && temp1 - divisor_divided != 0)) {\n            remainder_high = quotient - 2;\n            divisor_divided = divisor_divided + divisor;\n          }\n        }\n        quotient_low = (divisor_divided - temp1) / remainder_low;\n        dividend_low = temp2 & 0xffff | ((divisor_divided - temp1) - remainder_low * quotient_low) * 0x10000;\n        temp1 = quotient_low * dividend_divided;\n        quotient = quotient_low;\n        if (dividend_low <= temp1 && temp1 - dividend_low != 0) {\n          carry = CARRY4(dividend_low,divisor);\n          dividend_low = dividend_low + divisor;\n          quotient = quotient_low - 1;\n          if ((carry == false) && (dividend_low <= temp1 && temp1 - dividend_low != 0)) {\n            quotient = quotient_low - 2;\n            dividend_low = dividend_low + divisor;\n          }\n        }\n        dividend_low = dividend_low - temp1;\n        quotient = quotient | remainder_high << 0x10;\n      }\n      temp2 = dividend_low / remainder_low;\n      divisor_divided = dividend >> 0x10 | (dividend_low - remainder_low * temp2) * 0x10000;\n      remainder_high = dividend_divided * temp2;\n      temp1 = temp2;\n      if (divisor_divided <= remainder_high && remainder_high - divisor_divided != 0) {\n        carry = CARRY4(divisor_divided,divisor);\n        divisor_divided = divisor_divided + divisor;\n        temp1 = temp2 - 1;\n        if ((carry == false) && (divisor_divided <= remainder_high && remainder_high - divisor_divided != 0)) {\n          temp1 = temp2 - 2;\n          divisor_divided = divisor_divided + divisor;\n        }\n      }\n      temp2 = (divisor_divided - remainder_high) / remainder_low;\n      remainder_low = dividend & 0xffff | ((divisor_divided - remainder_high) - remainder_low * temp2) * 0x10000;\n      dividend_divided = dividend_divided * temp2;\n      remainder_high = temp2;\n      if (remainder_low <= dividend_divided && dividend_divided - remainder_low != 0) {\n        carry = CARRY4(remainder_low,divisor);\n        remainder_low = remainder_low + divisor;\n        remainder_high = temp2 - 1;\n        if ((carry == false) && (remainder_low <= dividend_divided && dividend_divided - remainder_low != 0)) {\n          remainder_high = temp2 - 2;\n          remainder_low = remainder_low + divisor;\n        }\n      }\n      remainder_low = remainder_low - dividend_divided;\n      remainder_high = remainder_high | temp1 << 0x10;\n    }\n    if (quotient_reminder != (uint *)0x0) {\n      *quotient_reminder = remainder_low >> leading_zeros;\n      quotient_reminder[1] = 0;\n      return CONCAT44(quotient,remainder_high);\n    }\n  }\n  else if (dividend_low < divisor_low) {\n    if (quotient_reminder != (uint *)0x0) {\n      *quotient_reminder = dividend;\n      quotient_reminder[1] = dividend_low;\n      return 0;\n    }\n    remainder_high = 0;\n    quotient = 0;\n  }\n  else {\n    leading_zeros = LZCOUNT(divisor_low);\n    if (leading_zeros != 0) {\n      divisor_divided = 0x20 - leading_zeros;\n      quotient = divisor >> (divisor_divided & 0xff) | divisor_low << leading_zeros;\n      dividend_divided = quotient >> 0x10;\n      remainder_high = dividend_low >> (divisor_divided & 0xff);\n      quotient_low = dividend >> (divisor_divided & 0xff) | dividend_low << leading_zeros;\n      temp2 = remainder_high / dividend_divided;\n      temp1 = quotient_low >> 0x10 | (remainder_high - dividend_divided * temp2) * 0x10000;\n      remainder_low = temp2 * (quotient & 0xffff);\n      dividend = dividend << leading_zeros;\n      remainder_high = temp2;\n      if (temp1 <= remainder_low && remainder_low - temp1 != 0) {\n        carry = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        remainder_high = temp2 - 1;\n        if ((carry == false) && (temp1 <= remainder_low && remainder_low - temp1 != 0)) {\n          remainder_high = temp2 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      temp2 = (temp1 - remainder_low) / dividend_divided;\n      temp1 = quotient_low & 0xffff | ((temp1 - remainder_low) - dividend_divided * temp2) * 0x10000;\n      dividend_divided = temp2 * (quotient & 0xffff);\n      remainder_low = temp2;\n      if (temp1 <= dividend_divided && dividend_divided - temp1 != 0) {\n        carry = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        remainder_low = temp2 - 1;\n        if ((carry == false) && (temp1 <= dividend_divided && dividend_divided - temp1 != 0)) {\n          remainder_low = temp2 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      remainder_low = remainder_low | remainder_high << 0x10;\n      quotient_high = (ulonglong)remainder_low * (ulonglong)(divisor << leading_zeros);\n      if (CONCAT44(temp1 - dividend_divided,dividend) < quotient_high) {\n        quotient_high = quotient_high - CONCAT44(quotient,divisor << leading_zeros);\n        remainder_low = remainder_low - 1;\n      }\n      if (quotient_reminder != (uint *)0x0) {\n        remainder_high = ((temp1 - dividend_divided) - (int)(quotient_high >> 0x20)) - (uint)(dividend < (uint)quotient_high);\n        *quotient_reminder = remainder_high << (divisor_divided & 0xff) | dividend - (uint)quotient_high >> leading_zeros;\n        quotient_reminder[1] = remainder_high >> leading_zeros;\n      }\n      return (ulonglong)remainder_low;\n    }\n    if ((divisor_low < dividend_low) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_low = (dividend_low - divisor_low) - (uint)carry;\n      remainder_high = 1;\n    }\n    else {\n      remainder_high = 0;\n    }\n    quotient = 0;\n    if (quotient_reminder != (uint *)0x0) {\n      *quotient_reminder = dividend;\n      quotient_reminder[1] = dividend_low;\n      return (ulonglong)remainder_high;\n    }\n  }\n  return CONCAT44(quotient,remainder_high);\n}\n\n",
            "renaming": {
                "FUN_08000300": "div_mod_64bit_08000300",
                "param_1": "dividend",
                "param_2": "dividend_low",
                "param_3": "divisor",
                "param_4": "divisor_low",
                "param_5": "quotient_reminder",
                "uVar1": "quotient_high",
                "uVar2": "quotient_low",
                "uVar3": "quotient",
                "uVar4": "remainder_high",
                "uVar5": "remainder_low",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "divisor_divided",
                "uVar9": "dividend_divided",
                "bVar11": "carry",
                "iVar10": "leading_zeros"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "call_software_interrupt_080005e0",
            "code": "\nvoid callSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "call_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_interrupt_080005e4",
            "code": "\nundefined4 executeInterrupt_080005e4(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = call_software_interrupt_080005e0(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_interrupt_080005e4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_uart_function_08000600",
            "code": "\nvoid initializeUartFunction_08000600(int **uartConfigPtr,undefined4 configValue)\n\n{\n  char configType;\n  int returnValue;\n  \n  configType = *(char *)((int)uartConfigPtr + 5);\n  if (configType == '\\x02') {\n    *uartConfigPtr = &DAT_20000338;\n  }\n  else if (configType == '\\x03') {\n    *uartConfigPtr = &DAT_20000338;\n  }\n  else if (configType == '\\x01') {\n    *uartConfigPtr = &DAT_20000338;\n  }\n  else {\n    *uartConfigPtr = &DAT_20000338;\n  }\n  configure_uart_pins_08004388(*uartConfigPtr,configValue,6);\n  if (1 < *(byte *)((int)uartConfigPtr + 6)) {\n    process_data_08004110(*(byte *)((int)uartConfigPtr + 6),1);\n    process_data_080041bc(*(undefined *)((int)uartConfigPtr + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**uartConfigPtr + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)uartConfigPtr + 0x49) = 0;\n  *(undefined *)((int)uartConfigPtr + 0x4a) = 0;\n  *(undefined2 *)(uartConfigPtr + 0x15) = 0;\n  *(undefined2 *)((int)uartConfigPtr + 0x52) = 0;\n  *(undefined2 *)(uartConfigPtr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_uart_function_08000600",
                "param_1": "uartConfigPtr",
                "param_2": "configValue",
                "cVar1": "configType",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataAddress,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(dataAddress + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(dataAddress + 5) = (char)value2;\n  *(undefined *)(dataAddress + 6) = value3;\n  *(undefined2 *)(dataAddress + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_function_08000682",
            "code": "\nundefined4 initialize_function_08000682(undefined4 input_parameter)\n\n{\n  initialize_data_0800066c();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_function_08000682",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "initialize_if_param1_equals_1_08000690",
            "code": "\nvoid initialize_if_param1_equals_1_08000690(int condition_param,int value_param,undefined4 undefined_param_1,undefined4 undefined_param_2)\n\n{\n  if (condition_param != 1) {\n    return;\n  }\n  if (value_param == 0xffff) {\n    initialize_function(&DAT_20000124,1,0,0,undefined_param_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "initialize_if_param1_equals_1_08000690",
                "param_1": "condition_param",
                "param_2": "value_param",
                "param_3": "undefined_param_1",
                "param_4": "undefined_param_2",
                "initialize_function_08000682": "initialize_function"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_and_update_variable_080006b4",
            "code": "\nint process_data_and_update_variable_080006b4(int **data)\n\n{\n  bool flag;\n  undefined value;\n  int result;\n  byte counter;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_080041bc(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    flag = false;\n    while (result = (**(code **)(**data + 8))(), result != 0) {\n      counter = *(byte *)((int)data + 0x49);\n      value = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + counter + 9) = value;\n      counter = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = counter;\n      if (0x3f < counter) {\n        flag = true;\n      }\n    }\n  }\n  else {\n    flag = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (flag) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_and_update_variable_080006b4",
                "param_1": "data",
                "bVar1": "flag",
                "uVar2": "value",
                "iVar3": "result",
                "bVar4": "counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_crc_08000728",
            "code": "\nuint calculateCRC_08000728(int data,int size)\n\n{\n  byte bit;\n  uint crc;\n  uint lsb;\n  uint index;\n  \n  crc = 0xffff;\n  for (index = 0; (int)index < size; index = index + 1 & 0xff) {\n    crc = crc ^ *(byte *)(data + index + 9);\n    for (bit = 1; bit < 9; bit = bit + 1) {\n      lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_crc_08000728",
                "param_1": "data",
                "param_2": "size",
                "bVar1": "bit",
                "uVar2": "crc",
                "uVar3": "lsb",
                "uVar4": "index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_0800076c",
            "code": "\nvoid updateChecksum_0800076c(int **data,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 calculationResult;\n  int loopIndex;\n  uint byteIndex;\n  \n  byteIndex = (uint)*(byte *)((int)data + 0x49);\n  calculationResult = calculate_crc_08000728(data,byteIndex,param_3,param_4,param_4);\n  *(char *)((int)data + byteIndex + 9) = (char)((ushort)calculationResult >> 8);\n  byteIndex = byteIndex + 1 & 0xff;\n  *(char *)((int)data + byteIndex + 9) = (char)calculationResult;\n  *(char *)((int)data + 0x49) = (char)byteIndex + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_080041bc(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_080041bc(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      loopIndex = (**(code **)(**data + 0xc))();\n    } while (-1 < loopIndex);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  loopIndex = initialize_data_08004204();\n  data[0x17] = (int *)(loopIndex + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_0800076c",
                "param_1": "data",
                "uVar1": "calculationResult",
                "iVar2": "loopIndex",
                "uVar3": "byteIndex"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_combination_080007f0",
            "code": "\nundefined4 check_combination_080007f0(int ptr_data,undefined4 new_param_2,uint value_1,undefined4 new_param_4)\n\n{\n  bool is_match;\n  byte byte_value;\n  char result_1;\n  char result_2;\n  int combined_value_1;\n  uint iteration;\n  int combined_value_2;\n  \n  iteration = 0;\n  do {\n    if (7 < iteration) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(ptr_data + 0x54) = *(short *)(ptr_data + 0x54) + 1;\n        return 1;\n      }\n      combined_value_2 = *(byte *)(ptr_data + 10) - 1;\n      switch(*(byte *)(ptr_data + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        result_1 = combine_values_08004640(*(undefined *)(ptr_data + 0xb),*(undefined *)(ptr_data + 0xc),value_1,\n                             combined_value_2,new_param_4);\n        result_2 = combine_values_08004640(*(undefined *)(ptr_data + 0xd),*(undefined *)(ptr_data + 0xe));\n        if (*(byte *)(ptr_data + 0x60) < (byte)(result_2 + result_1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        combined_value_2 = combine_values_08004640(*(undefined *)(ptr_data + 0xb),*(undefined *)(ptr_data + 0xc),value_1,\n                             combined_value_2,new_param_4);\n        if ((uint)*(byte *)(ptr_data + 0x60) < (uint)(combined_value_2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        byte_value = combine_values_08004640(*(undefined *)(ptr_data + 0xb),*(undefined *)(ptr_data + 0xc),value_1,\n                             combined_value_2,new_param_4);\n        if (*(byte *)(ptr_data + 0x60) < byte_value) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value_1 = (uint)*(byte *)(ptr_data + 10);\n    if ((byte)(&DAT_08005a10)[iteration] == value_1) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    iteration = iteration + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  combined_value_2 = combine_values_08004640(*(undefined *)(ptr_data + 0xb),*(undefined *)(ptr_data + 0xc),value_1,combined_value_2,\n                       new_param_4);\n  combined_value_1 = combine_values_08004640(*(undefined *)(ptr_data + 0xd),*(undefined *)(ptr_data + 0xe));\n  if ((uint)*(byte *)(ptr_data + 0x60) <\n      (((uint)(combined_value_2 << 0xc) >> 0x10) + ((uint)(combined_value_1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_combination_080007f0",
                "param_1": "ptr_data",
                "param_2": "new_param_2",
                "param_3": "value_1",
                "param_4": "new_param_4",
                "bVar1": "is_match",
                "bVar2": "byte_value",
                "cVar3": "result_1",
                "cVar4": "result_2",
                "iVar5": "combined_value_1",
                "uVar6": "iteration",
                "iVar7": "combined_value_2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copyAndModifyData_080008cc(int dataAddress,undefined newValue)\n\n{\n  *(undefined *)(dataAddress + 9) = *(undefined *)(dataAddress + 4);\n  *(byte *)(dataAddress + 10) = *(byte *)(dataAddress + 10) ^ 0x80;\n  *(undefined *)(dataAddress + 0xb) = newValue;\n  *(undefined *)(dataAddress + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "combine_and_modify_values_080008e2",
            "code": "\nint combineAndModifyValues_080008e2(int inputData,int arrayData,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue;\n  uint arraySize;\n  uint index;\n  uint bitIndex;\n  char shiftedChar;\n  int offset;\n  \n  combinedValue = combine_values_08004640(*(undefined *)(inputData + 0xb),*(undefined *)(inputData + 0xc),param3,param4,\n                       param4);\n  arraySize = combine_values_08004640(*(undefined *)(inputData + 0xd),*(undefined *)(inputData + 0xe));\n  shiftedChar = (char)((arraySize << 0x15) >> 0x18);\n  if ((arraySize & 7) != 0) {\n    shiftedChar = shiftedChar + '\\x01';\n  }\n  *(char *)(inputData + 0xb) = shiftedChar;\n  *(undefined *)(inputData + 0x49) = 3;\n  bitIndex = 0;\n  for (index = 0; (int)index < (int)arraySize; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(arrayData + ((index + combinedValue) * 0x100000 >> 0x18) * 2) >>\n         (index + combinedValue & 0xf) & 1U) == 0) {\n      offset = (uint)*(byte *)(inputData + 0x49) + inputData;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) & ~(byte)(1 << bitIndex);\n    }\n    else {\n      offset = (uint)*(byte *)(inputData + 0x49) + inputData;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) | (byte)(1 << bitIndex);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      *(char *)(inputData + 0x49) = *(char *)(inputData + 0x49) + '\\x01';\n      bitIndex = 0;\n    }\n  }\n  if ((arraySize & 7) != 0) {\n    *(char *)(inputData + 0x49) = *(char *)(inputData + 0x49) + '\\x01';\n  }\n  shiftedChar = *(char *)(inputData + 0x49);\n  update_checksum_0800076c(inputData);\n  return (int)(char)(shiftedChar + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "combine_and_modify_values_080008e2",
                "param_1": "inputData",
                "param_2": "arrayData",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue",
                "uVar2": "arraySize",
                "uVar3": "index",
                "uVar4": "bitIndex",
                "cVar5": "shiftedChar",
                "iVar6": "offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data_ptr,int input_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byte_val;\n  char char_val;\n  byte combined_val1;\n  byte combined_val2;\n  uint index;\n  uint next_index;\n  \n  combined_val1 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,\n                       param_4);\n  combined_val2 = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = combined_val2 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (index = (uint)combined_val1; index < (uint)combined_val1 + (uint)combined_val2; index = index + 1 & 0xff) {\n    byte_val = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)byte_val + 9) = (char)((ushort)*(undefined2 *)(input_ptr + index * 2) >> 8)\n    ;\n    next_index = byte_val + 1 & 0xff;\n    char_val = (char)next_index;\n    *(char *)(data_ptr + 0x49) = char_val;\n    *(undefined *)(data_ptr + next_index + 9) = *(undefined *)(input_ptr + index * 2);\n    *(char *)(data_ptr + 0x49) = char_val + '\\x01';\n  }\n  char_val = *(char *)(data_ptr + 0x49);\n  update_checksum_0800076c(data_ptr);\n  return (int)(char)(char_val + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "bVar1": "byte_val",
                "cVar2": "char_val",
                "bVar3": "combined_val1",
                "bVar4": "combined_val2",
                "uVar5": "index",
                "uVar6": "next_index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_value_in_array_08000a00",
            "code": "\nundefined4 update_value_in_array_08000a00(int array_offset,int destination_array,undefined4 value_1,undefined4 value_2)\n\n{\n  uint combined_value;\n  uint shifted_value;\n  \n  combined_value = combine_values(*(undefined *)(array_offset + 0xb),*(undefined *)(array_offset + 0xc),value_1,value_2,\n                       value_2);\n  shifted_value = (combined_value << 0x14) >> 0x18;\n  if (*(char *)(array_offset + 0xd) == -1) {\n    *(ushort *)(destination_array + shifted_value * 2) =\n         (ushort)(1 << (combined_value & 0xf)) | *(ushort *)(destination_array + shifted_value * 2);\n  }\n  else {\n    *(ushort *)(destination_array + shifted_value * 2) =\n         *(ushort *)(destination_array + shifted_value * 2) & ~(ushort)(1 << (combined_value & 0xf));\n  }\n  *(undefined *)(array_offset + 0x49) = 6;\n  update_checksum(array_offset);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_value_in_array_08000a00",
                "param_1": "array_offset",
                "param_2": "destination_array",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar1": "combined_value",
                "uVar2": "shifted_value",
                "update_checksum_0800076c": "update_checksum",
                "combine_values_08004640": "combine_values"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_values_and_checksum_08000a4e",
            "code": "\nundefined4 updateValuesAndChecksum_08000a4e(int inputAddress,int outputAddress)\n\n{\n  byte combinedByte;\n  undefined2 combinedValue;\n  \n  combinedByte = combine_values_08004640(*(undefined *)(inputAddress + 0xb),*(undefined *)(inputAddress + 0xc));\n  combinedValue = combine_values_08004640(*(undefined *)(inputAddress + 0xd),*(undefined *)(inputAddress + 0xe));\n  *(undefined2 *)(outputAddress + (uint)combinedByte * 2) = combinedValue;\n  *(undefined *)(inputAddress + 0x49) = 6;\n  update_checksum_0800076c(inputAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_values_and_checksum_08000a4e",
                "param_1": "inputAddress",
                "param_2": "outputAddress",
                "bVar1": "combinedByte",
                "uVar2": "combinedValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_values_and_set_bits_08000a7a",
            "code": "\nundefined4 updateValuesAndSetBits_08000a7a(int inputArray,int outputArray,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue1;\n  int combinedValue2;\n  uint loopIndex;\n  uint bitIndex;\n  uint bitPosition;\n  uint arrayIndex;\n  uint byteIndex;\n  \n  combinedValue1 = combine_values_08004640(*(undefined *)(inputArray + 0xb),*(undefined *)(inputArray + 0xc),param3,param4,\n                       param4);\n  combinedValue2 = combine_values_08004640(*(undefined *)(inputArray + 0xd),*(undefined *)(inputArray + 0xe));\n  bitIndex = 0;\n  byteIndex = 7;\n  for (loopIndex = 0; (int)loopIndex < combinedValue2; loopIndex = loopIndex + 1 & 0xffff) {\n    arrayIndex = (loopIndex + combinedValue1) * 0x100000 >> 0x18;\n    bitPosition = loopIndex + combinedValue1 & 0xf;\n    if (((int)(uint)*(byte *)(inputArray + byteIndex + 9) >> bitIndex & 1U) == 0) {\n      *(ushort *)(outputArray + arrayIndex * 2) = *(ushort *)(outputArray + arrayIndex * 2) & ~(ushort)(1 << bitPosition);\n    }\n    else {\n      *(ushort *)(outputArray + arrayIndex * 2) = (ushort)(1 << bitPosition) | *(ushort *)(outputArray + arrayIndex * 2);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      byteIndex = byteIndex + 1 & 0xff;\n      bitIndex = 0;\n    }\n  }\n  *(undefined *)(inputArray + 0x49) = 6;\n  update_checksum_0800076c(inputArray);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_values_and_set_bits_08000a7a",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue1",
                "iVar2": "combinedValue2",
                "uVar3": "loopIndex",
                "uVar4": "bitIndex",
                "uVar5": "bitPosition",
                "uVar6": "arrayIndex",
                "uVar7": "byteIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "combine_values_and_update_checksum_08000b04",
            "code": "\nint combineValuesAndUpdateChecksum_08000b04(int inputBuffer,int outputBuffer)\n\n{\n  byte byte1;\n  byte byte2;\n  char charVal;\n  undefined2 combinedValue;\n  uint counter;\n  \n  byte1 = *(byte *)(inputBuffer + 0xc);\n  byte2 = *(byte *)(inputBuffer + 0xe);\n  *(undefined *)(inputBuffer + 0xd) = 0;\n  *(byte *)(inputBuffer + 0xe) = byte2;\n  *(undefined *)(inputBuffer + 0x49) = 6;\n  for (counter = 0; counter < byte2; counter = counter + 1 & 0xff) {\n    combinedValue = combine_values_08004640(*(undefined *)(counter * 2 + inputBuffer + 0x10),\n                         *(undefined *)(inputBuffer + (counter + 4) * 2 + 9));\n    *(undefined2 *)(outputBuffer + (byte1 + counter) * 2) = combinedValue;\n  }\n  charVal = *(char *)(inputBuffer + 0x49);\n  update_checksum_0800076c(inputBuffer);\n  return (int)(char)(charVal + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "combine_values_and_update_checksum_08000b04",
                "param_1": "inputBuffer",
                "param_2": "outputBuffer",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "charVal",
                "uVar4": "combinedValue",
                "uVar5": "counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_and_update_variable_08000b54",
            "code": "\nint process_and_update_variable_08000b54(int **data_array,int *input_array,undefined4 input_value)\n\n{\n  byte result_byte;\n  int result_value;\n  uint result_uint;\n  int output;\n  \n  data_array[0x13] = input_array;\n  *(char *)(data_array + 0x18) = (char)input_value;\n  if (*(byte *)((int)data_array + 5) < 4) {\n    result_byte = (**(code **)(**data_array + 8))();\n    result_uint = (uint)result_byte;\n  }\n  if (result_uint == 0) {\n    output = 0;\n  }\n  else if ((int)result_uint < 8) {\n    output = 0;\n  }\n  else {\n    output = process_data_and_update_variable_080006b4(data_array);\n    *(char *)(data_array + 2) = (char)output;\n    if (*(char *)((int)data_array + 9) == *(char *)(data_array + 1)) {\n      result_value = check_combination_080007f0(data_array);\n      if (result_value < 1) {\n        result_value = initialize_data_08004204();\n        data_array[0x17] = (int *)((uint)*(ushort *)((int)data_array + 0x56) + result_value);\n        *(undefined *)(data_array + 2) = 0;\n        switch(*(undefined *)((int)data_array + 10)) {\n        case 1:\n        case 2:\n          output = combine_and_modify_values_080008e2(data_array,input_array,input_value);\n          break;\n        case 3:\n        case 4:\n          output = process_data_08000998(data_array,input_array,input_value);\n          break;\n        case 5:\n          output = update_value_in_array_08000a00(data_array,input_array,input_value);\n          break;\n        case 6:\n          output = update_values_and_checksum_08000a4e(data_array,input_array,input_value);\n          break;\n        case 0xf:\n          output = update_values_and_set_bits_08000a7a(data_array,input_array,input_value);\n          break;\n        case 0x10:\n          output = combine_values_and_update_checksum_08000b04(data_array,input_array,input_value);\n        }\n      }\n      else {\n        if (result_value != 0xff) {\n          copy_and_modify_data_080008cc(data_array,result_value);\n          update_checksum_0800076c(data_array);\n        }\n        *(char *)(data_array + 2) = (char)result_value;\n        output = (int)(char)result_value;\n      }\n    }\n    else {\n      output = 0;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_and_update_variable_08000b54",
                "param_1": "data_array",
                "param_2": "input_array",
                "param_3": "input_value",
                "bVar1": "result_byte",
                "iVar2": "result_value",
                "unaff_r5": "result_uint",
                "iVar3": "output"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_uart_and_execute_interrupt_08000c4c",
            "code": "\nvoid initialize_uart_and_execute_interrupt_08000c4c(void)\n\n{\n  execute_interrupt(0);\n  initialize_uart_function(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_uart_and_execute_interrupt_08000c4c",
                "execute_interrupt_080005e4": "execute_interrupt",
                "initialize_uart_function_08000600": "initialize_uart_function"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "process_and_update_variable_08000c64",
            "code": "\nvoid processAndUpdateVariable_08000c64(void)\n\n{\n  undefined4 param;\n  \n  process_and_update_variable_08000b54(&DAT_20000124,&DAT_20000004,0x10,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "process_and_update_variable_08000c64",
                "in_r3": "param"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 isConfigured;\n  undefined4 configurationValue1;\n  undefined4 configurationValue2;\n  undefined4 configurationValue3;\n  undefined4 configurationValue4;\n  undefined4 configurationValue5;\n  undefined4 configurationValue6;\n  undefined4 configurationValue7;\n  undefined4 outputFrequency;\n  undefined4 frequencyMultiplier;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  isConfigured = 1;\n  configurationValue1 = 0x50000;\n  configurationValue2 = 2;\n  configurationValue3 = 0x400000;\n  configurationValue4 = 8;\n  configurationValue5 = 0x150;\n  configurationValue6 = 2;\n  configurationValue7 = 7;\n  validate_configuration_0800201c(&isConfigured);\n  check_data_values_08001f9c();\n  outputFrequency = 0xf;\n  frequencyMultiplier = 2;\n  parameter1 = 0;\n  parameter2 = 0x1400;\n  parameter3 = 0x1000;\n  initialize_and_calculate_output_frequency_08002488(&outputFrequency,5);\n  uVar1 = get_global_variable_080025e0();\n  initialize_parameters_08000ee0(uVar1 / 1000);\n  update_flag_08000f2c(4);\n  update_memory_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "isConfigured",
                "local_50": "configurationValue1",
                "local_3c": "configurationValue2",
                "local_38": "configurationValue3",
                "local_34": "configurationValue4",
                "local_30": "configurationValue5",
                "local_2c": "configurationValue6",
                "local_28": "configurationValue7",
                "local_24": "outputFrequency",
                "local_20": "frequencyMultiplier",
                "local_1c": "parameter1",
                "local_18": "parameter2",
                "local_14": "parameter3"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_settings_080035bc();\n  execute_functions_sequentially_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  execute_function_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_registers_and_system_08000d8e",
            "code": "\nvoid initialize_registers_and_system_08000d8e(void)\n\n{\n  initialize_registers_and_system_08000d8e_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_registers_and_system_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_memory_08000d98",
            "code": "\nundefined4 initializeMemory_08000d98(uint inputValue)\n\n{\n  int initResult;\n  \n  initResult = initialize_parameters_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (initResult != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  update_memory_08000e60(0xffffffff,inputValue,0);\n  DAT_20000028 = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_memory_08000d98",
                "param_1": "inputValue",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_and_update_registers_08000de4",
            "code": "\n\n\nundefined4 initialize_and_update_registers_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_data_register(3);\n  initialize_memory(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_and_update_registers_08000de4",
                "update_data_register_08000e3c": "update_data_register",
                "initialize_memory_08000d98": "initialize_memory"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_sum_08000e18",
            "code": "\nvoid updateSum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_sum_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_value_08000e30",
            "code": "\nundefined4 get_data_value_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_value_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_data_register_08000e3c",
            "code": "\n\n\nvoid updateDataRegister_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_data_register_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_memory_08000e60",
            "code": "\n\n\nvoid updateMemory_08000e60(uint memoryAddress,uint value1,uint value2)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (value1 & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & value2;\n  if ((int)memoryAddress < 0) {\n    *(char *)((memoryAddress & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(memoryAddress + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_memory_08000e60",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid setBit_08000ec4(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_parameters_08000ee0",
            "code": "\n\n\nundefined4 initializeParameters_08000ee0(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_parameters_08000ee0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bitwise_flag_08000f0c",
            "code": "\nvoid setBitwiseFlag_08000f0c(uint input)\n\n{\n  if (-1 < (int)input) {\n    *(int *)(((input >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bitwise_flag_08000f0c",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_flag_08000f2c",
            "code": "\n\n\nvoid updateFlag_08000f2c(int input)\n\n{\n  if (input != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_flag_08000f2c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "initialize_application_08000f4e",
            "code": "\nvoid initialize_application_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "initialize_application_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_memory_08000f56",
            "code": "\nundefined4 initializeMemory_08000f56(int mem_address)\n\n{\n  if (mem_address != 0) {\n    *(undefined *)(mem_address + 4) = 2;\n    clear_flag_bits_080033c8();\n    *(undefined4 *)(mem_address + 0x10) = 0;\n    *(undefined *)(mem_address + 4) = 0;\n    *(undefined *)(mem_address + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_memory_08000f56",
                "param_1": "mem_address"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **ptr_to_value,uint bit_position)\n\n{\n  **ptr_to_value = **ptr_to_value & ~(1 << (bit_position & 0xff));\n  *(undefined *)(ptr_to_value + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "ptr_to_value",
                "param_2": "bit_position"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_value_08000f8c",
            "code": "\nundefined4 updateParamValue_08000f8c(uint **paramList)\n\n{\n  if (*(char *)((int)paramList + 0x35) != '\\x02') {\n    paramList[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramList + 0x35) = 5;\n  **paramList = **paramList & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_value_08000f8c",
                "param_1": "paramList"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "reverse_bits_and_mask_08000fb4",
            "code": "\n\n\nvoid reverseBitsAndMask_08000fb4(uint *outputArray,uint *inputArray)\n\n{\n  uint bitMask;\n  uint bitNumber;\n  uint loopCounter;\n  uint bitCheck;\n  uint value;\n  int arrayIndex;\n  uint bitShift;\n  int bitPosition;\n  \n  for (loopCounter = 0; loopCounter < 0x10; loopCounter = loopCounter + 1) {\n    bitNumber = 1 << (loopCounter & 0xff);\n    bitCheck = bitNumber & *inputArray;\n    bitMask = _DAT_40013c0c;\n    if (bitNumber == bitCheck) {\n      if ((inputArray[1] == 2) || (inputArray[1] == 0x12)) {\n        arrayIndex = (loopCounter >> 3) + 8;\n        bitPosition = (loopCounter & 7) << 2;\n        outputArray[arrayIndex] = outputArray[arrayIndex] & ~(0xf << bitPosition) | inputArray[4] << bitPosition;\n      }\n      bitShift = loopCounter << 1;\n      bitMask = ~(3 << (bitShift & 0xff));\n      *outputArray = *outputArray & bitMask | (inputArray[1] & 3) << (bitShift & 0xff);\n      value = inputArray[1];\n      if (((value - 1 < 2) || (value == 0x11)) || (value == 0x12)) {\n        outputArray[2] = outputArray[2] & bitMask | inputArray[3] << (bitShift & 0xff);\n        outputArray[1] = outputArray[1] & ~bitNumber | ((inputArray[1] << 0x1b) >> 0x1f) << (loopCounter & 0xff);\n      }\n      outputArray[3] = bitMask & outputArray[3] | inputArray[2] << (bitShift & 0xff);\n      bitMask = _DAT_40013c0c;\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        bitPosition = (loopCounter & 3) << 2;\n        if (outputArray == (uint *)0x40020000) {\n          arrayIndex = 0;\n        }\n        else if (outputArray == (uint *)0x40020400) {\n          arrayIndex = 1;\n        }\n        else if (outputArray == (uint *)0x40020800) {\n          arrayIndex = 2;\n        }\n        else if (outputArray == (uint *)0x40020c00) {\n          arrayIndex = 3;\n        }\n        else if (outputArray == (uint *)0x40021000) {\n          arrayIndex = 4;\n        }\n        else if (outputArray == (uint *)0x40021400) {\n          arrayIndex = 5;\n        }\n        else if (outputArray == (uint *)0x40021800) {\n          arrayIndex = 6;\n        }\n        else if (outputArray == (uint *)0x40021c00) {\n          arrayIndex = 7;\n        }\n        else if (outputArray == (uint *)0x40022000) {\n          arrayIndex = 8;\n        }\n        else if (outputArray == (uint *)0x40022400) {\n          arrayIndex = 9;\n        }\n        else {\n          arrayIndex = 10;\n        }\n        *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800) & ~(0xf << bitPosition) | arrayIndex << bitPosition;\n        bitMask = ~bitCheck;\n        bitNumber = _DAT_40013c00 & bitMask;\n        if ((inputArray[1] & 0x10000) != 0) {\n          bitNumber = bitCheck | _DAT_40013c00;\n        }\n        value = bitMask & _DAT_40013c04;\n        if ((inputArray[1] & 0x20000) != 0) {\n          value = bitCheck | _DAT_40013c04;\n        }\n        bitShift = bitMask & _DAT_40013c08;\n        if ((inputArray[1] & 0x100000) != 0) {\n          bitShift = bitCheck | _DAT_40013c08;\n        }\n        _DAT_40013c00 = bitNumber;\n        _DAT_40013c04 = value;\n        _DAT_40013c08 = bitShift;\n        bitMask = bitMask & _DAT_40013c0c;\n        if ((inputArray[1] & 0x200000) != 0) {\n          bitMask = bitCheck | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = bitMask;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "reverse_bits_and_mask_08000fb4",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "uVar1": "bitMask",
                "uVar2": "bitNumber",
                "uVar3": "loopCounter",
                "uVar4": "bitCheck",
                "uVar5": "value",
                "iVar6": "arrayIndex",
                "uVar7": "bitShift",
                "iVar8": "bitPosition"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid setParamValue_08001198(int objectAddress,int newValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "objectAddress",
                "param_2": "newValue",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_data_and_execute_check_080011a4",
            "code": "\n\n\nvoid update_data_and_execute_check_080011a4(uint input_value)\n\n{\n  if ((_DAT_40013c14 & input_value) != 0) {\n    _DAT_40013c14 = input_value;\n    execute_check();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_data_and_execute_check_080011a4",
                "param_1": "input_value",
                "check_and_execute_080047d0": "execute_check"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flags_based_on_conditions_080011c0",
            "code": "\nundefined4 updateFlagsBasedOnConditions_080011c0(int *inputValues)\n\n{\n  if (*(char *)((int)inputValues + 0x3e) == '@') {\n    if (condition1 == 0) {\n      *(uint *)(*inputValues + 0x10) = value1 & 0xfe;\n    }\n    else {\n      *(uint *)(*inputValues + 0x10) = value1 & 0xffU | 1;\n    }\n  }\n  else if (condition2 == 0x4000) {\n    if (*(char *)((int)inputValues + 0x3d) == '!') {\n      *(uint *)(*inputValues + 0x10) = value1 & 0xfe;\n    }\n    else {\n      *(uint *)(*inputValues + 0x10) = value1 & 0xffU | 1;\n    }\n  }\n  else if (condition1 == 0) {\n    *(uint *)(*inputValues + 0x10) = (uint)(value1 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition1 == 1) {\n    *(uint *)(*inputValues + 0x10) = (uint)(value1 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flags_based_on_conditions_080011c0",
                "param_1": "inputValues",
                "param_1[0x14]": "condition1",
                "param_1[0x11]": "value1",
                "param_1[4]": "condition2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "set_byte_from_parameter_and_update_0800124a",
            "code": "\nundefined4 set_byte_from_parameter_and_update_0800124a(int *ptr_int)\n\n{\n  *(uint *)(*ptr_int + 0x10) = ptr_int_value_plus_0x11 & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "set_byte_from_parameter_and_update_0800124a",
                "param_1": "ptr_int",
                "param_1[0x11]": "ptr_int_value_plus_0x11"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_conditions_08001256",
            "code": "\nundefined4 processConditions_08001256(uint **params)\n\n{\n  uint *value;\n  \n  value = value;\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((condition1 != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((condition1 == (uint *)0x0) && (condition2 == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      condition1 = (uint *)((int)condition1 + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (value == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          value = *params;\n          if ((value[1] & 0x800) == 0) {\n            *value = *value | 0x200;\n          }\n          else {\n            *value = *value & 0xfffffbff;\n          }\n        }\n        else if (((value == (uint *)0x4) || (value == (uint *)0x8)) ||\n                (condition3 == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (value == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (value == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x800;\n        }\n        value = *params;\n        if ((value[1] & 0x800) != 0) {\n          value[1] = value[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        value = *params;\n        if ((value[1] & 0x800) != 0) {\n          value[1] = value[1] | 0x1000;\n        }\n      }\n      condition1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_conditions_08001256",
                "param_1": "params",
                "puVar1": "value",
                "param_1[0x14]": "condition1",
                "param_1[4]": "condition2",
                "puVar1[1]": "value[1]",
                "param_1[0xc]": "condition3",
                "param_1[0xb]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_pointer_and_decrement_count_08001420",
            "code": "\nundefined4 updatePointerAndDecrementCount_08001420(int *pointer)\n\n{\n  byte *dataPointer;\n  \n  if (*(short *)((int)pointer + 0x2a) != 0) {\n    dataPointer = (byte *)dataPointerStorageValue;\n    dataPointerStorageValue = (int)(dataPointer + 1);\n    *(uint *)(*pointer + 0x10) = (uint)*dataPointer;\n    *(short *)((int)pointer + 0x2a) = *(short *)((int)pointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_pointer_and_decrement_count_08001420",
                "param_1": "pointer",
                "pbVar1": "dataPointer",
                "param_1[9]": "dataPointerStorageValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_data_08001440",
            "code": "\nundefined4 updateData_08001440(int *data)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)ptrArray;\n    ptrArray = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_data_08001440",
                "param_1": "data",
                "puVar1": "ptr",
                "param_1[9]": "ptrArray"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_and_initialize_08001460",
            "code": "\nundefined4 checkAndInitialize_08001460(uint **pointerToPointerParam,uint *pointerParam,int intParam,uint *pointerParam2)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  \n  if (*(char *)((int)pointerToPointerParam + 0x3d) == '(') {\n    if (pointerParam == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (intParam == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(pointerToPointerParam + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(pointerToPointerParam + 0xf) = 1;\n      pointerVar = *pointerToPointerParam;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **pointerToPointerParam = **pointerToPointerParam & 0xfffff7ff;\n      *(undefined *)((int)pointerToPointerParam + 0x3d) = 0x29;\n      *(undefined *)((int)pointerToPointerParam + 0x3e) = 0x20;\n      returnValue = 0;\n      pointerToPointerParam[0x10] = (uint *)0x0;\n      pointerToPointerParam[9] = pointerParam;\n      *(short *)((int)pointerToPointerParam + 0x2a) = (short)intParam;\n      pointerToPointerParam[0xb] = pointerParam2;\n      *(undefined2 *)(pointerToPointerParam + 10) = *(undefined2 *)((int)pointerToPointerParam + 0x2a);\n      *(undefined *)(pointerToPointerParam + 0xf) = 0;\n      (*pointerToPointerParam)[1] = (*pointerToPointerParam)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_and_initialize_08001460",
                "param_1": "pointerToPointerParam",
                "param_2": "pointerParam",
                "param_3": "intParam",
                "param_4": "pointerParam2",
                "uVar1": "returnValue",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "validate_input_params_080014ec",
            "code": "\nundefined4 validate_input_params_080014ec(uint **input_data,uint *param_array,int param_length,uint *output_array)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (param_array == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x2a;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      array_at_index_0x10 = (uint *)0x0;\n      array_at_index_9 = param_array;\n      *(short *)((int)input_data + 0x2a) = (short)param_length;\n      array_at_index_0xb = output_array;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "validate_input_params_080014ec",
                "param_1": "input_data",
                "param_2": "param_array",
                "param_3": "param_length",
                "param_4": "output_array",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "array_at_index_0x10",
                "param_1[9]": "array_at_index_9",
                "param_1[0xb]": "array_at_index_0xb"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_param_08001578",
            "code": "\nundefined4 initializeParam_08001578(uint **param)\n\n{\n  uint *ptr1;\n  \n  if (*(char *)((int)param + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)param + 0x3d) = 0x28;\n  ptr1 = *param;\n  if ((*ptr1 & 1) == 0) {\n    *ptr1 = *ptr1 | 1;\n  }\n  **param = **param | 0x400;\n  (*param)[1] = (*param)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_param_08001578",
                "param_1": "param",
                "puVar1": "ptr1"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "update_flag_and_data_080015bc",
            "code": "\nundefined4 updateFlagAndData_080015bc(int *data)\n\n{\n  char dataChar;\n  byte *ptrToDataByte;\n  \n  dataChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptrToDataByte = (byte *)ptrToDataArray;\n    ptrToDataArray = (int)(ptrToDataByte + 1);\n    *(uint *)(*data + 0x10) = (uint)*ptrToDataByte;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (dataChar == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      dataControl = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "update_flag_and_data_080015bc",
                "param_1": "data",
                "cVar1": "dataChar",
                "pbVar2": "ptrToDataByte",
                "param_1[9]": "ptrToDataArray",
                "param_1[0xc]": "dataControl"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "modify_data_0800160e",
            "code": "\nundefined4 modifyData_0800160e(int *data)\n\n{\n  char charVar;\n  undefined *ptrVar;\n  \n  charVar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptrVar = (undefined *)data[9];\n    data[9] = (int)(ptrVar + 1);\n    *ptrVar = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charVar == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "modify_data_0800160e",
                "param_1": "data",
                "cVar1": "charVar",
                "puVar2": "ptrVar",
                "param_1[9]": "data[9]",
                "param_1[0xc]": "data[0xc]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_params_0800165a",
            "code": "\nundefined4 processParams_0800165a(int *array,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 value;\n  uint flag;\n  \n  flag = *(uint *)(*array + 0x18);\n  if ((flag & 0x80) == 0) {\n    value = *(undefined2 *)(array + 3);\n  }\n  else {\n    value = *(undefined2 *)(array + 6);\n  }\n  process_params_08003880(array,(*(uint *)(*array + 0x18) & 4) == 0,value,flag,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_params_0800165a",
                "param_1": "array",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "value",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "handle_param_08001684",
            "code": "\nundefined4 handleParam_08001684(uint **param)\n\n{\n  if (((param[0xb] == (uint *)0x4) || (param[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)param + 0x3d) == '(')) {\n    param[0xb] = (uint *)0xffff0000;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    param[0xc] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    executeCodeA();\n  }\n  else if (*(char *)((int)param + 0x3d) == 'EXCLAMATION_MARK_CHAR') {\n    param[0xb] = (uint *)0xffff0000;\n    param[0xc] = (uint *)0x21;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*param)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "handle_param_08001684",
                "param_1": "param",
                "execute_code_080038d0": "executeCodeA",
                "!": "EXCLAMATION_MARK_CHAR"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_data_0800171a",
            "code": "\nundefined4 processData_0800171a(uint **data)\n\n{\n  char charValue;\n  uint *ptrValue;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  ptrValue = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (charValue == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((charValue == '!') || ((*(char *)((int)data + 0x3e) == '@' && (charValue == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptrValue = data[9];\n          data[9] = (uint *)((int)ptrValue + 1);\n          (*data)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = data[9];\n      data[9] = (uint *)((int)ptrValue + 1);\n      (*data)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_function_08001864",
            "code": "\nundefined4 processFunction_08001864(uint **paramList)\n\n{\n  uint *pointerVar;\n  \n  pointerVar = paramList[0xb];\n  if (*(char *)((int)paramList + 0x3d) == charValue2) {\n    if (*(short *)((int)paramList + 0x2a) == 0) {\n      if (((pointerVar == (uint *)0x4) || (pointerVar == (uint *)0x8)) || (pointerVar == (uint *)0xffff0000)) {\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        **paramList = **paramList | 0x200;\n        arrayElement2 = (uint *)0x0;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        if (*(char *)((int)paramList + 0x3e) == charValue1) {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        arrayElement2 = (uint *)0x11;\n        *(undefined *)((int)paramList + 0x3e) = 0;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      pointerVar = paramList[9];\n      paramList[9] = (uint *)((int)pointerVar + 1);\n      (*paramList)[4] = (uint)*(byte *)pointerVar;\n      *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_function_08001864",
                "param_1": "paramList",
                "puVar1": "pointerVar",
                "param_1[0xc]": "arrayElement2",
                "'@'": "charValue1",
                "'!'": "charValue2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_string_08001904",
            "code": "\nundefined4 processString_08001904(uint **stringPtr)\n\n{\n  uint *charPtr;\n  \n  if (*(char *)((int)stringPtr + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)stringPtr + 0x2a) < 4) {\n      if (*(ushort *)((int)stringPtr + 0x2a) < 2) {\n        **stringPtr = **stringPtr & 0xfffffbff;\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffff8ff;\n        charPtr = stringPtr[9];\n        stringPtr[9] = (uint *)((int)charPtr + 1);\n        *(char *)charPtr = (char)(*stringPtr)[4];\n        *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n        *(undefined *)((int)stringPtr + 0x3d) = 0x20;\n        stringPtr[0xc] = (uint *)0x0;\n        if (*(char *)((int)stringPtr + 0x3e) == '@') {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      charPtr = stringPtr[9];\n      stringPtr[9] = (uint *)((int)charPtr + 1);\n      *(char *)charPtr = (char)(*stringPtr)[4];\n      *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n      if (*(short *)((int)stringPtr + 0x2a) == 3) {\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_string_08001904",
                "param_1": "stringPtr",
                "puVar1": "charPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "update_flag_value_080019a0",
            "code": "\nundefined4 updateFlagValue_080019a0(uint **param)\n\n{\n  uint *ptr;\n  \n  if (*(short *)((int)param + 0x2a) == 4) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    ptr = param[9];\n    param[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 3) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    ptr = param[9];\n    param[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 2) {\n    if ((int)param[11] - 1U < 2) {\n      **param = **param & 0xfffffbff;\n      **param = **param | 0x100;\n    }\n    else {\n      **param = **param | 0x200;\n    }\n    ptr = param[9];\n    param[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    ptr = param[9];\n    param[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    (*param)[1] = (*param)[1] & 0xfffffcff;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    param[0xc] = (uint *)0x0;\n    if (*(char *)((int)param + 0x3e) == '@') {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    ptr = param[9];\n    param[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "update_flag_value_080019a0",
                "param_1": "param",
                "puVar1": "ptr",
                "param_1[9]": "param[9]",
                "param_1[0xb]": "param[11]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_parameter_08001ab0",
            "code": "\nvoid processParameter_08001ab0(uint **parameter)\n\n{\n  int variable1;\n  uint *pointerVariable2;\n  uint *pointerVariable3;\n  \n  if (*(byte *)((int)parameter + 0x3d) - 0x29 < 2) {\n    parameter[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameter + 0x3d) != '`') && (((*parameter)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameter + 0x3d) = 0x20;\n    }\n    parameter[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n  }\n  **parameter = **parameter & 0xfffff7ff;\n  pointerVariable3 = *parameter;\n  if ((pointerVariable3[1] & 0x800) == 0) {\n    if (*(char *)((int)parameter + 0x3d) == '`') {\n      *(undefined *)((int)parameter + 0x3d) = 0x20;\n      parameter[0x10] = (uint *)0x0;\n      if ((pointerVariable3[5] & 0x40) != 0) {\n        pointerVariable2 = parameter[9];\n        parameter[9] = (uint *)((int)pointerVariable2 + 1);\n        *(char *)pointerVariable2 = (char)pointerVariable3[4];\n      }\n      **parameter = **parameter & 0xfffffffe;\n      FUNC_08001aac(parameter);\n    }\n    else {\n      if ((pointerVariable3[5] & 0x40) != 0) {\n        pointerVariable2 = parameter[9];\n        parameter[9] = (uint *)((int)pointerVariable2 + 1);\n        *(char *)pointerVariable2 = (char)pointerVariable3[4];\n      }\n      initialize_if_condition_met_08003900(parameter);\n    }\n  }\n  else {\n    pointerVariable3[1] = pointerVariable3[1] & 0xfffff7ff;\n    if (*(char *)((int)parameter[0xd] + 0x35) == '\\x01') {\n      parameter[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      variable1 = update_param_value_08000f8c(parameter[0xe]);\n      if (variable1 != 0) {\n        if (((*parameter)[5] & 0x40) != 0) {\n          pointerVariable3 = parameter[9];\n          parameter[9] = (uint *)((int)pointerVariable3 + 1);\n          *(char *)pointerVariable3 = (char)(*parameter)[4];\n        }\n        **parameter = **parameter & 0xfffffffe;\n        *(undefined *)((int)parameter + 0x3d) = 0x20;\n        (*(code *)parameter[0xe][0x14])();\n      }\n    }\n    else {\n      parameter[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      variable1 = update_param_value_08000f8c(parameter[0xd]);\n      if (variable1 != 0) {\n        **parameter = **parameter & 0xfffffffe;\n        *(undefined *)((int)parameter + 0x3d) = 0x20;\n        (*(code *)parameter[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameter + 0x3d) == '(') && (((uint)parameter[0x10] & 4) != 0)) {\n    parameter[0xb] = (uint *)0xffff0000;\n    parameter[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    execute_code_080038d0(parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_parameter_08001ab0",
                "param_1": "parameter",
                "iVar1": "variable1",
                "puVar2": "pointerVariable2",
                "puVar3": "pointerVariable3"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_parameter_08001bfc",
            "code": "\nundefined4 process_parameter_08001bfc(uint **parameters)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n  **parameters = **parameters | 1;\n  **parameters = **parameters & 0xfffffbff;\n  pointer1 = *parameters;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)parameters + 0x3d) == '\\\"') || (*(char *)((int)parameters + 0x3d) == '*')) {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xe] + 4);\n    }\n    else {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)parameters + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = parameters[9];\n      parameters[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    if (((*parameters)[5] & 0x40) != 0) {\n      pointer1 = parameters[9];\n      parameters[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n  }\n  if (parameters[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      parameters[0xb] = (uint *)0xffff0000;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      execute_code_080038d0();\n    }\n    else if ((parameters[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_parameter_08001bfc_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_parameter_08001bfc",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_opcode_08001d00",
            "code": "\nvoid process_opcode_08001d00(int *opcode_params)\n\n{\n  int opcode_value;\n  uint flags;\n  uint conditions;\n  uint data_operations;\n  \n  opcode_value = *opcode_params;\n  data_operations = *(uint *)(opcode_value + 0x18);\n  flags = *(uint *)(opcode_value + 0x14);\n  conditions = *(uint *)(opcode_value + 4);\n  if ((*(char *)((int)opcode_params + 0x3e) == '\\x10') || (*(char *)((int)opcode_params + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((conditions & 0x200) == 0)) {\n      if (((flags & 0x10008) == 0) || ((conditions & 0x200) == 0)) {\n        if (((flags & 0x10002) != 0) && ((conditions & 0x200) != 0)) {\n          process_conditions_08001256(opcode_params);\n        }\n      }\n      else {\n        set_byte_from_parameter_and_update_0800124a(opcode_params);\n      }\n    }\n    else {\n      update_flags_based_on_conditions_080011c0(opcode_params);\n    }\n    if ((data_operations & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_string_08001904(opcode_params);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_flag_value_080019a0(opcode_params);\n        return;\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data_0800171a(opcode_params);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        process_function_08001864(opcode_params);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & 0x10002) != 0) && ((conditions & 0x200) != 0)) {\n      process_params_0800165a();\n      return;\n    }\n    if (((flags & 0x10010) != 0) && ((conditions & 0x200) != 0)) {\n      process_parameter_08001bfc(opcode_params);\n      return;\n    }\n    if ((data_operations & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        modify_data_0800160e(opcode_params);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_data_08001440(opcode_params);\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        update_flag_and_data_080015bc(opcode_params);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_pointer_and_decrement_count_08001420(opcode_params);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_opcode_08001d00",
                "param_1": "opcode_params",
                "iVar1": "opcode_value",
                "uVar2": "flags",
                "uVar3": "conditions",
                "uVar4": "data_operations"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_param_08001e68",
            "code": "\nvoid process_param_08001e68(uint **param_ptr)\n\n{\n  char character;\n  uint *param_value;\n  uint value_1;\n  uint value_2;\n  \n  param_value = *param_ptr;\n  value_1 = param_value[5];\n  value_2 = param_value[1];\n  if (((value_1 & 0x10100) != 0) && ((value_2 & 0x100) != 0)) {\n    param_ptr[0x10] = (uint *)((uint)param_ptr[0x10] | 1);\n    param_value[5] = 0xfffffeff;\n  }\n  if (((value_1 & 0x10200) != 0) && ((value_2 & 0x100) != 0)) {\n    param_ptr[0x10] = (uint *)((uint)param_ptr[0x10] | 2);\n    (*param_ptr)[5] = 0xfffffdff;\n  }\n  if (((value_1 & 0x10400) != 0) && ((value_2 & 0x100) != 0)) {\n    character = *(char *)((int)param_ptr + 0x3d);\n    if (((*(char *)((int)param_ptr + 0x3e) == ' ') && (*(short *)((int)param_ptr + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (param_ptr[0xc] == (uint *)0x21)))))) {\n      handle_param_08001684(param_ptr);\n    }\n    else {\n      param_ptr[0x10] = (uint *)((uint)param_ptr[0x10] | 4);\n      if (*(char *)((int)param_ptr + 0x3e) == '\\x10') {\n        **param_ptr = **param_ptr | 0x200;\n      }\n      (*param_ptr)[5] = 0xfffffbff;\n    }\n  }\n  if (((value_1 & 0x10800) != 0) && ((value_2 & 0x100) != 0)) {\n    param_ptr[0x10] = (uint *)((uint)param_ptr[0x10] | 8);\n    (*param_ptr)[5] = 0xfffff7ff;\n  }\n  if (param_ptr[0x10] != (uint *)0x0) {\n    process_param_08001e68eter_08001ab0(param_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_param_08001e68",
                "param_1": "param_ptr",
                "cVar1": "character",
                "puVar2": "param_value",
                "uVar3": "value_1",
                "uVar4": "value_2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_data_values_08001f9c",
            "code": "\n\n\nundefined4 checkDataValues_08001f9c(void)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initialValue = getDataValue();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initialValue = getDataValue();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        currentValue = getDataValue();\n      } while ((uint)(currentValue - initialValue) < 0x3e9);\n      return 3;\n    }\n    currentValue = getDataValue();\n  } while ((uint)(currentValue - initialValue) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_data_values_08001f9c",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "get_data_value_08000e30": "getDataValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "validate_configuration_0800201c",
            "code": "\n\n\nundefined4 validateConfiguration_0800201c(uint *config)\n\n{\n  int startValue;\n  int currentValue;\n  undefined4 result;\n  bool isConditionTrue;\n  \n  if (config == (uint *)0x0) {\n    return 1;\n  }\n  if ((*config & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (config[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (config[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (config[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (config[1] == 0) {\n        startValue = get_data_value_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentValue = get_data_value_08000e30();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startValue = get_data_value_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentValue = get_data_value_08000e30();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*config & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (config[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | config[4] << 3;\n    }\n    else if (config[3] == 0) {\n      _DAT_42470000 = 0;\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentValue = get_data_value_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentValue = get_data_value_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | config[4] << 3;\n    }\n  }\n  if ((*config & 8) != 0) {\n    if (config[5] == 0) {\n      _DAT_42470e80 = 0;\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentValue = get_data_value_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentValue = get_data_value_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*config & 4) != 0) {\n    isConditionTrue = (_DAT_40023840 & 0x10000000) == 0;\n    if (isConditionTrue) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (config[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (config[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (config[2] == 0) {\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentValue = get_data_value_08000e30();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startValue = get_data_value_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentValue = get_data_value_08000e30();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionTrue) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (config[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (config[6] == 2) {\n    _DAT_42470060 = 0;\n    startValue = get_data_value_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             config[7] | config[8] | config[9] << 6 | ((config[10] >> 1) - 1) * 0x10000 |\n             config[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startValue = get_data_value_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_data_value_08000e30();\n        } while ((uint)(currentValue - startValue) < 3);\n        return 3;\n      }\n      currentValue = get_data_value_08000e30();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startValue = get_data_value_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_data_value_08000e30();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "validate_configuration_0800201c",
                "param_1": "config",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "bVar4": "isConditionTrue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_output_frequency_080023b4",
            "code": "\n\n\nuint calculateOutputFrequency_080023b4(void)\n\n{\n  undefined4 inputParameter;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = computeResult(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)checkCarry(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,inputParameter);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = computeResult(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)checkCarry(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,inputParameter);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_output_frequency_080023b4",
                "in_r3": "inputParameter",
                "uVar1": "result",
                "compute_result_080002d0": "computeResult",
                "CARRY4": "checkCarry"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_and_calculate_output_frequency_08002488",
            "code": "\n\n\nundefined4 initialize_and_calculate_output_frequency_08002488(uint *config,uint config_length)\n\n{\n  int start_time;\n  int current_time;\n  uint output_frequency;\n  \n  if (config == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < config_length) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_length);\n    if (config_length != (config_length & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 2) != 0) {\n    if ((*config & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*config & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | config[2];\n  }\n  if ((*config & 1) != 0) {\n    output_frequency = config[1];\n    if (output_frequency == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (output_frequency - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = output_frequency | _DAT_40023808 & 0xfffffffc;\n    start_time = get_elapsed_time();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == config[1] * 4) break;\n      current_time = get_elapsed_time();\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  if (config_length < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_length);\n    if (config_length != (config_length & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | config[3];\n  }\n  if ((*config & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | config[4] << 3;\n  }\n  output_frequency = calculate_output_frequency();\n  DAT_2000002c = output_frequency >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initialize_memory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_and_calculate_output_frequency_08002488",
                "param_1": "config",
                "param_2": "config_length",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "output_frequency",
                "get_data_value_08000e30": "get_elapsed_time",
                "initialize_memory_08000d98": "initialize_memory",
                "calculate_output_frequency_080023b4": "calculate_output_frequency"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_global_variable_080025e0",
            "code": "\nundefined4 get_global_variable_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_global_variable_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "calculate_shifted_value_080025ec",
            "code": "\n\n\nuint calculate_shifted_value_080025ec(void)\n\n{\n  uint global_value;\n  \n  global_value = get_global_value();\n  return global_value >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "global_value",
                "get_global_variable_080025e0": "get_global_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_global_variable_0800260c",
            "code": "\n\n\nuint get_shifted_global_variable_0800260c(void)\n\n{\n  uint global_variable_value;\n  \n  global_variable_value = get_global_variable();\n  return global_variable_value >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_global_variable_0800260c",
                "uVar1": "global_variable_value",
                "get_global_variable_080025e0": "get_global_variable"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "execute_conditional_operations_0800262c",
            "code": "\n\n\nvoid executeConditionalOperations_0800262c(int *inputArray)\n\n{\n  if (((*(uint *)(*inputArray + 0xc) & 0x100) != 0) && ((*(uint *)(*inputArray + 8) & 0x1000) != 0)) {\n    executeCallbackFunction();\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*inputArray + 0xc) & 0x200) != 0) && ((*(uint *)(*inputArray + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(inputArray);\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)inputArray + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "execute_conditional_operations_0800262c",
                "param_1": "inputArray",
                "execute_callback_function_08003594": "executeCallbackFunction"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_data_0800268e",
            "code": "\nvoid updateData_0800268e(uint **data)\n\n{\n  uint *dataPointer;\n  \n  *(undefined *)((int)data + 0x39) = 2;\n  dataPointer = *data;\n  if ((dataPointer[8] & 0x1111) == 0) {\n    if ((dataPointer[8] & 0x444) == 0) {\n      *dataPointer = *dataPointer & 0xfffffffe;\n    }\n  }\n  update_data_0800340c(data);\n  *(undefined *)((int)data + 0x39) = 0;\n  *(undefined *)(data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_data_0800268e",
                "param_1": "data",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "check_and_execute_callbacks_080026ce",
            "code": "\nvoid check_and_execute_callbacks_080026ce(int *input)\n\n{\n  int param_value;\n  \n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 2) != 0) && ((*(uint *)(param_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffffd;\n    *(undefined *)(input + 6) = 1;\n    if ((*(uint *)(*input + 0x18) & 3) == 0) {\n      execute_callback();\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 4) != 0) && ((*(uint *)(param_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffffb;\n    *(undefined *)(input + 6) = 2;\n    if ((*(uint *)(*input + 0x18) & 0x300) == 0) {\n      execute_callback(input);\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8(input);\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 8) != 0) && ((*(uint *)(param_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffff7;\n    *(undefined *)(input + 6) = 4;\n    if ((*(uint *)(*input + 0x1c) & 3) == 0) {\n      execute_callback(input);\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8(input);\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 0x10) != 0) && ((*(uint *)(param_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffffef;\n    *(undefined *)(input + 6) = 8;\n    if ((*(uint *)(*input + 0x1c) & 0x300) == 0) {\n      execute_callback(input);\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8(input);\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 1) != 0) && ((*(uint *)(param_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffffe;\n    execute_function(input);\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 0x80) != 0) && ((*(uint *)(param_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(input);\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 0x40) != 0) && ((*(uint *)(param_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(input);\n  }\n  param_value = *input;\n  if (((*(uint *)(param_value + 0x10) & 0x20) != 0) && ((*(uint *)(param_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "check_and_execute_callbacks_080026ce",
                "param_1": "input",
                "iVar1": "param_value",
                "execute_callback_if_condition_met_08003754": "execute_callback",
                "execute_function_0800376e": "execute_function"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bitwise_value_08002848",
            "code": "\nvoid updateBitwiseValue_08002848(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bitwise_value_08002848",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_and_check_memory_08002864",
            "code": "\nundefined4 updateAndCheckMemory_08002864(uint **memoryPtr,undefined4 value)\n\n{\n  bool isMemoryValid;\n  uint *currentMemoryPtr;\n  \n  update_bitwise_value_08002848(*memoryPtr,value,0);\n  currentMemoryPtr = *memoryPtr;\n  if (currentMemoryPtr == (uint *)0x40010000) {\n    isMemoryValid = true;\n  }\n  else if (currentMemoryPtr == (uint *)0x40010400) {\n    isMemoryValid = true;\n  }\n  else {\n    isMemoryValid = false;\n  }\n  if (((isMemoryValid) && ((currentMemoryPtr[8] & 0x1111) == 0)) && ((currentMemoryPtr[8] & 0x444) == 0)) {\n    currentMemoryPtr[0x11] = currentMemoryPtr[0x11] & 0xffff7fff;\n  }\n  currentMemoryPtr = *memoryPtr;\n  if (((currentMemoryPtr[8] & 0x1111) == 0) && ((currentMemoryPtr[8] & 0x444) == 0)) {\n    *currentMemoryPtr = *currentMemoryPtr & 0xfffffffe;\n  }\n  *(undefined *)((int)memoryPtr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_and_check_memory_08002864",
                "param_1": "memoryPtr",
                "param_2": "value",
                "bVar1": "isMemoryValid",
                "puVar2": "currentMemoryPtr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_value_080028d4",
            "code": "\nvoid updateValue_080028d4(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_value_080028d4",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_and_clear_flags_080028f0",
            "code": "\nundefined4 updateAndClearFlags_080028f0(uint **dataPointer,undefined4 value)\n\n{\n  uint *currentData;\n  \n  update_value_080028d4(*dataPointer,value,0);\n  currentData = *dataPointer;\n  if (((currentData[8] & 0x1111) == 0) && ((currentData[8] & 0x444) == 0)) {\n    currentData[0x11] = currentData[0x11] & 0xffff7fff;\n  }\n  currentData = *dataPointer;\n  if (((currentData[8] & 0x1111) == 0) && ((currentData[8] & 0x444) == 0)) {\n    *currentData = *currentData & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_and_clear_flags_080028f0",
                "param_1": "dataPointer",
                "param_2": "value",
                "puVar1": "currentData"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "clear_flags_and_set_value_08002940",
            "code": "\nvoid clearFlagsAndSetValue_08002940(int *pointer)\n\n{\n  *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xfffffedf;\n  *(uint *)(*pointer + 0x14) = *(uint *)(*pointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)pointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "clear_flags_and_set_value_08002940",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_param_0800295c",
            "code": "\nundefined4 process_param_0800295c(int *param)\n\n{\n  short current_value;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)param + 0x39) != '!') {\n    return 2;\n  }\n  if (param[2] == 0x1000) {\n    *(uint *)(*param + 4) = *(ushort *)param[8] & 0x1ff;\n    if (param[4] == 0) {\n      param[8] = param[8] + 2;\n    }\n    else {\n      param[8] = param[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)param[8];\n    param[8] = (int)(byte_ptr + 1);\n    *(uint *)(*param + 4) = (uint)*byte_ptr;\n  }\n  current_value = *(short *)((int)param + 0x26) + -1;\n  *(short *)((int)param + 0x26) = current_value;\n  if (current_value == 0) {\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffff7f;\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_param_0800295c",
                "param_1": "param",
                "sVar1": "current_value",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_new_value_080029c8",
            "code": "\nvoid calculateNewValue_080029c8(int *inputArray)\n\n{\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int value10;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       *(uint *)(*inputArray + 0xc) & 0xffff69f3 | inputArray[2] | inputArray[4] | inputArray[5] | inputArray[7];\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  if (inputArray[7] == 0x8000) {\n    value10 = *inputArray;\n    if ((value10 != 0x40011000) && (value10 != 0x40011400)) {\n      value1 = calculate_shifted_value_080025ec();\n      value6 = inputArray[1];\n      value2 = calculate_shifted_value_080025ec();\n      value7 = inputArray[1];\n      value3 = calculate_shifted_value_080025ec();\n      value8 = inputArray[1];\n      value4 = calculate_shifted_value_080025ec();\n      value9 = inputArray[1];\n      value5 = calculate_shifted_value_080025ec();\n      *(uint *)(value10 + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(value4 * 0x19) / (uint)(value9 << 1) +\n                          (int)(((ulonglong)(uint)(value5 * 0x19) /\n                                (ulonglong)(uint)(inputArray[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(value2 * 0x19) / (uint)(value7 << 1) +\n             (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 1)) / 100) * 0x10;\n      return;\n    }\n    value1 = get_shifted_global_variable_0800260c();\n    value6 = inputArray[1];\n    value2 = get_shifted_global_variable_0800260c();\n    value7 = inputArray[1];\n    value3 = get_shifted_global_variable_0800260c();\n    value8 = inputArray[1];\n    value4 = get_shifted_global_variable_0800260c();\n    value9 = inputArray[1];\n    value5 = get_shifted_global_variable_0800260c();\n    *(uint *)(value10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 1) +\n                        (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(value2 * 0x19) / (uint)(value7 << 1) +\n           (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 1)) / 100) * 0x10;\n    return;\n  }\n  value10 = *inputArray;\n  if ((value10 != 0x40011000) && (value10 != 0x40011400)) {\n    value1 = calculate_shifted_value_080025ec();\n    value6 = inputArray[1];\n    value2 = calculate_shifted_value_080025ec();\n    value7 = inputArray[1];\n    value3 = calculate_shifted_value_080025ec();\n    value8 = inputArray[1];\n    value4 = calculate_shifted_value_080025ec();\n    value9 = inputArray[1];\n    value5 = calculate_shifted_value_080025ec();\n    *(uint *)(value10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n           (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) / 100) * 0x10;\n    return;\n  }\n  value1 = get_shifted_global_variable_0800260c();\n  value6 = inputArray[1];\n  value2 = get_shifted_global_variable_0800260c();\n  value7 = inputArray[1];\n  value3 = get_shifted_global_variable_0800260c();\n  value8 = inputArray[1];\n  value4 = get_shifted_global_variable_0800260c();\n  value9 = inputArray[1];\n  value5 = get_shifted_global_variable_0800260c();\n  *(uint *)(value10 + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                      (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n         (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_new_value_080029c8",
                "param_1": "inputArray",
                "iVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "iVar5": "value5",
                "iVar6": "value6",
                "iVar7": "value7",
                "iVar8": "value8",
                "iVar9": "value9",
                "iVar10": "value10"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_conditions_08002d0c",
            "code": "\nundefined4 checkConditions_08002d0c(uint **ptrArray,uint conditionFlags,uint desiredCondition,int dataValue,uint maxDifference)\n\n{\n  int dataDifference;\n  \n  do {\n    if (((conditionFlags & ~**ptrArray) == 0) != desiredCondition) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (dataDifference = get_data_value_08000e30(), (uint)(dataDifference - dataValue) <= maxDifference))));\n  (*ptrArray)[3] = (*ptrArray)[3] & 0xfffffe5f;\n  (*ptrArray)[5] = (*ptrArray)[5] & 0xfffffffe;\n  *(undefined *)((int)ptrArray + 0x39) = 0x20;\n  *(undefined *)((int)ptrArray + 0x3a) = 0x20;\n  *(undefined *)(ptrArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_conditions_08002d0c",
                "param_1": "ptrArray",
                "param_2": "conditionFlags",
                "param_3": "desiredCondition",
                "param_4": "dataValue",
                "param_5": "maxDifference",
                "iVar1": "dataDifference"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "sanitize_data_08002d72",
            "code": "\nundefined4 sanitizeData_08002d72(int *dataPtr)\n\n{\n  if (dataPtr != (int *)0x0) {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 0x24;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xffffdfff;\n    calculateNewValue(dataPtr);\n    *(uint *)(*dataPtr + 0x10) = *(uint *)(*dataPtr + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPtr + 0x14) = *(uint *)(*dataPtr + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) | 0x2000;\n    valueD = 0;\n    *(undefined *)((int)dataPtr + 0x39) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "sanitize_data_08002d72",
                "param_1": "dataPtr",
                "calculate_new_value_080029c8": "calculateNewValue",
                "param_1[0xf]": "valueD"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *dataPtr,ushort *valuePtr,int valueCount,undefined4 additionalParam)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (valuePtr == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (valueCount == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      returnValue = get_data_value_08000e30();\n      *(short *)(dataPtr + 9) = (short)valueCount;\n      *(short *)((int)dataPtr + 0x26) = (short)valueCount;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          result = check_conditions_08002d0c(dataPtr,0x80,0,returnValue,additionalParam);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *valuePtr & 0x1ff;\n          if (dataPtr[4] == 0) {\n            valuePtr = valuePtr + 1;\n          }\n          else {\n            valuePtr = (ushort *)((int)valuePtr + 1);\n          }\n        }\n        else {\n          result = check_conditions_08002d0c(dataPtr,0x80,0,returnValue,additionalParam);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)valuePtr;\n          valuePtr = (ushort *)((int)valuePtr + 1);\n        }\n      }\n      result = check_conditions_08002d0c(dataPtr,0x40,0,returnValue,additionalParam);\n      if (result == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "dataPtr",
                "param_2": "valuePtr",
                "param_3": "valueCount",
                "param_4": "additionalParam",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_params_08002eb2",
            "code": "\nundefined4 validate_params_08002eb2(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array_element1 = value1;\n    *(short *)(array + 9) = (short)value2;\n    *(short *)((int)array + 0x26) = (short)value2;\n    array_element3 = 0;\n    *(undefined *)((int)array + 0x39) = 0x21;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_params_08002eb2",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "array_element1",
                "param_1[0xf]": "array_element3"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_parameters_08002efa",
            "code": "\nundefined4 validateParameters_08002efa(int *inputArray,int intValue,int shortValue)\n\n{\n  if (*(char *)((int)inputArray + 0x3a) != ' ') {\n    return 2;\n  }\n  if (intValue == 0) {\n    return 1;\n  }\n  if (shortValue == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    inputArray[10] = intValue;\n    *(short *)(inputArray + 0xb) = (short)shortValue;\n    *(short *)((int)inputArray + 0x2e) = (short)shortValue;\n    inputArray[0xf] = 0;\n    *(undefined *)((int)inputArray + 0x3a) = 0x22;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) | 1;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_parameters_08002efa",
                "param_1": "inputArray",
                "param_2": "intValue",
                "param_3": "shortValue",
                "param_1[10]": "inputArray[10]",
                "param_1[0xf]": "inputArray[0xf]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_data_and_process_08002f4c",
            "code": "\nundefined4 updateDataAndProcess_08002f4c(int *pData)\n\n{\n  *(uint *)(*pData + 0xc) = *(uint *)(*pData + 0xc) & 0xffffffbf;\n  *(undefined *)((int)pData + 0x39) = 0x20;\n  processData();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_data_and_process_08002f4c",
                "param_1": "pData",
                "process_data_08003f48": "processData"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *data)\n\n{\n  byte *bytePointer;\n  short counter;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_function_below_index_threshold_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "counter",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_08002ffc",
            "code": "\nvoid process_data_08002ffc(uint **data)\n\n{\n  int result;\n  uint value_2;\n  uint *ptr;\n  uint flag;\n  uint value_1;\n  \n  ptr = *data;\n  value_1 = *ptr;\n  value_2 = ptr[3];\n  if ((((value_1 & 0xf) == 0) && ((value_1 & 0x20) != 0)) && ((value_2 & 0x20) != 0)) {\n    process_binary_data(data);\n    return;\n  }\n  if (((value_1 & 0xf) == 0) || ((flag = ptr[5] & 1, flag == 0 && ((value_2 & 0x120) == 0)))) {\n    if (((value_1 & 0x80) != 0) && ((value_2 & 0x80) != 0)) {\n      process_parameter(data);\n      return;\n    }\n    if (((value_1 & 0x40) != 0) && ((value_2 & 0x40) != 0)) {\n      update_data_and_process(data);\n    }\n  }\n  else {\n    if (((value_1 & 1) != 0) && ((value_2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value_1 & 4) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value_1 & 2) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value_1 & 8) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value_1 & 0x20) != 0) && ((value_2 & 0x20) != 0)) {\n        process_binary_data(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08003f94(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_flags_and_set_value(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      data[0xd][0x14] = (uint)&label_1;\n      result = update_param_value(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "value_2",
                "puVar3": "ptr",
                "uVar4": "flag",
                "uVar5": "value_1",
                "process_binary_data_08002f66": "process_binary_data",
                "process_param_0800295c": "process_parameter",
                "update_data_and_process_08002f4c": "update_data_and_process",
                "clear_flags_and_set_value_08002940": "clear_flags_and_set_value",
                "update_param_value_08000f8c": "update_param_value",
                "LAB_0800311c_1": "label_1"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "address"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "retrieve_bit_from_array_08003138",
            "code": "\nuint retrieveBitFromArray_08003138(uint index,int array)\n\n{\n  return *(uint *)(array + ((index << 0x18) >> 0x1c) * 4) >> (index & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "retrieve_bit_from_array_08003138",
                "param_1": "index",
                "param_2": "array"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "update_bit_0800314e",
            "code": "\nvoid updateBit_0800314e(uint bitPosition,int arrayPointer)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayPointer + shiftedIndex * 4) = *(uint *)(arrayPointer + shiftedIndex * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "update_bit_0800314e",
                "param_1": "bitPosition",
                "param_2": "arrayPointer",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_0800316c",
            "code": "\nvoid updateBit_0800316c(uint value,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (value << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "map_bit_to_address_080031fc",
            "code": "\n\n\nundefined4 mapBitToAddress_080031fc(undefined4 bitNumber)\n\n{\n  undefined4 address;\n  \n  switch(bitNumber) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    address = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    address = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    address = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    address = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    address = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    address = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    address = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    address = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    address = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    address = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    address = 0x40022800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "map_bit_to_address_080031fc",
                "param_1": "bitNumber",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_value_index_08003380",
            "code": "\nundefined4 check_value_index_08003380(undefined4 value,undefined4 index,undefined4 data_1,undefined4 data_2)\n\n{\n  int result;\n  \n  result = get_value_index_0800354a(value,&DAT_08005a18,data_1,data_2,data_2);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_value_index_08003380",
                "param_1": "value",
                "param_2": "index",
                "param_3": "data_1",
                "param_4": "data_2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "get_index_from_value_0800339c",
            "code": "\nundefined4 get_index_from_value_0800339c(undefined4 value,undefined4 ptr_2,undefined4 ptr_3,undefined4 ptr_4)\n\n{\n  int index;\n  uint shifted_index;\n  \n  index = get_value_index_0800354a(value,&DAT_08005a3c,ptr_3,ptr_4,ptr_4);\n  shifted_index = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_index == 3) {\n    return 8;\n  }\n  if (shifted_index != 4) {\n    if (shifted_index != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "get_index_from_value_0800339c",
                "param_1": "value",
                "param_2": "ptr_2",
                "param_3": "ptr_3",
                "param_4": "ptr_4",
                "iVar1": "index",
                "uVar2": "shifted_index"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_flag_bits_080033c8",
            "code": "\n\n\nvoid clearFlagBits_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_flag_bits_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "initialize_memory_and_clear_bits_080033d8",
            "code": "\nvoid initializeMemoryAndClearBits_080033d8(undefined4 data)\n\n{\n  int valueIndex;\n  int validIndices [5];\n  \n  validIndices[0] = get_valid_value_index_080034f4(data,&DAT_08005a18);\n  if ((validIndices[0] != 0) && ((valueIndex = check_value_index_08003380(data), valueIndex == 0 || (valueIndex == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(validIndices,valueIndex);\n    initialize_memory_08000f56(validIndices);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "initialize_memory_and_clear_bits_080033d8",
                "param_1": "data",
                "iVar1": "valueIndex",
                "local_1c": "validIndices"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "update_data_0800340c",
            "code": "\nvoid update_data_0800340c(void)\n\n{\n  update_data_0800340c_based_on_value();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "update_data_0800340c",
                "update_data_based_on_value_080035fc": "update_data_based_on_value"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_data_08003414",
            "code": "\nvoid process_data_08003414(undefined4 input_data)\n\n{\n  int iVar1;\n  uint uVar2;\n  int valid_value_indexes [16];\n  \n  valid_value_indexes[0] = get_valid_value_index_080034f4(input_data,&DAT_08005a3c);\n  if ((valid_value_indexes[0] != 0) &&\n     ((((iVar1 = get_index_from_value_0800339c(input_data), iVar1 == 0 || (iVar1 == 4)) || (iVar1 == 8)) ||\n      ((iVar1 == 0xc || (iVar1 == 0x18)))))) {\n    uVar2 = get_value_index_0800354a(input_data,&DAT_08005a3c);\n    if ((uVar2 & 0x100000) == 0) {\n      update_and_check_memory_08002864(valid_value_indexes,iVar1);\n    }\n    else {\n      update_and_clear_flags_080028f0(valid_value_indexes,iVar1);\n    }\n    update_data_0800268e(valid_value_indexes);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "input_data",
                "local_4c": "valid_value_indexes"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_data_0800346c",
            "code": "\nvoid initializeData_0800346c(void)\n\n{\n  getDataValue();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_data_0800346c",
                "get_data_value_08000e30": "getDataValue"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_application_08003476",
            "code": "\nvoid initialize_application_08003476(void)\n\n{\n  update_sum();\n  initialize_application_08003476();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_application_08003476",
                "update_sum_08000e18": "update_sum",
                "initialize_application_08000f4e": "initialize_application"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "set_bit_in_address_08003486",
            "code": "\nvoid setBitInAddress_08003486(uint bitIndex,undefined4 param2Value,undefined4 param3Value)\n\n{\n  undefined4 address;\n  uint bitMask;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localValue;\n  \n  address = map_bit_to_address_080031fc((bitIndex << 0x18) >> 0x1c);\n  bitMask = 1 << (bitIndex & 0xf) & 0xffff;\n  localValue = 2;\n  localParam2 = param2Value;\n  localParam3 = param3Value;\n  reverse_bits_and_mask_08000fb4(address,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "set_bit_in_address_08003486",
                "param_1": "bitIndex",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "uVar1": "address",
                "local_24": "bitMask",
                "local_20": "localParam2",
                "local_1c": "localParam3",
                "local_18": "localValue"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "set_param_value_080034b6",
            "code": "\nvoid setParamValue_080034b6(undefined4 param1,undefined2 param2,int param3,undefined4 param4)\n\n{\n  if (param3 == 0) {\n    set_param_value_08001198(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_08001198(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "set_param_value_080034b6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_registers_and_system_080034ce",
            "code": "\nvoid initialize_registers_and_system_080034ce(void)\n\n{\n  init_and_update_registers();\n  init_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_registers_and_system_080034ce",
                "initialize_and_update_registers_08000de4": "init_and_update_registers",
                "initialize_system_08000c8c": "init_system"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "get_valid_value_index_080034f4",
            "code": "\nundefined4 getValidValueIndex_080034f4(int value)\n\n{\n  undefined4 validValueIndex;\n  \n  if (value != -1) {\n    validValueIndex = find_value_index_080034da();\n    return validValueIndex;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "get_valid_value_index_080034f4",
                "param_1": "value",
                "uVar1": "validValueIndex"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_index_08003506",
            "code": "\nint find_value_index_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_index_08003506",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_value_index_or_error_0800351e",
            "code": "\nundefined4 find_value_index_or_error_0800351e(int value)\n\n{\n  undefined4 index_or_error;\n  \n  if (value != 0) {\n    index_or_error = find_value_index_08003506();\n    return index_or_error;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_value_index_or_error_0800351e",
                "param_1": "value",
                "uVar1": "index_or_error"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "get_value_index_0800354a",
            "code": "\nundefined4 get_value_index_0800354a(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  value_index = find_value_index_0800352e();\n  return value_index;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "get_value_index_0800354a",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int target_value,short *array)\n\n{\n  if (target_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (target_value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_zero_08003582",
            "code": "\nint compare_and_return_zero_08003582(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_zero_08003582",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_function_08003594",
            "code": "\nvoid execute_callback_function_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_function_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_hardware_settings_080035bc",
            "code": "\n\n\nvoid initializeHardwareSettings_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_hardware_settings_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_data_based_on_value_080035fc",
            "code": "\n\n\nvoid updateDataBasedOnValue_080035fc(int *dataPtr)\n\n{\n  if (*dataPtr == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*dataPtr == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*dataPtr == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*dataPtr == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*dataPtr == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*dataPtr == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*dataPtr == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*dataPtr == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*dataPtr == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*dataPtr == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*dataPtr == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*dataPtr == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*dataPtr == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*dataPtr == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_data_based_on_value_080035fc",
                "param_1": "dataPtr"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_callback_if_condition_met_08003754",
            "code": "\nvoid executeCallbackIfConditionMet_08003754(int functionArgument)\n\n{\n  int returnValue;\n  \n  returnValue = getCallbackFunction();\n  if ((*(code **)(returnValue + 0x48) != (code *)0x0) && (*(char *)(functionArgument + 0x18) == '\\x01')) {\n    (**(code **)(returnValue + 0x48))(returnValue,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_callback_if_condition_met_08003754",
                "param_1": "functionArgument",
                "iVar1": "returnValue",
                "subtract_four_08003750": "getCallbackFunction"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_function_0800376e",
            "code": "\nvoid executeFunction_0800376e(void)\n\n{\n  int result;\n  \n  result = getFunctionPointer();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_function_0800376e",
                "iVar1": "result",
                "subtract_four_08003750": "getFunctionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "execute_callbacks_if_needed_0800377c",
            "code": "\nvoid executeCallbacksIfNeeded_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    check_and_execute_callbacks_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    check_and_execute_callbacks_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "execute_callbacks_if_needed_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtractFour_0800387c(int inputValue)\n\n{\n  return inputValue + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_params_08003880",
            "code": "\nvoid processParams_08003880(int inputParam1,int inputParam2,int inputParam3,undefined4 inputParam4)\n\n{\n  int tempVar1;\n  \n  tempVar1 = subtract_four_0800387c();\n  if (inputParam3 == *(int *)(inputParam1 + 0xc)) {\n    if (inputParam2 == 0) {\n      *(undefined *)(tempVar1 + 0x88) = 0;\n      *(undefined *)(tempVar1 + 0x5e) = 0;\n      if (*(code **)(tempVar1 + 100) != (code *)0x0) {\n        (**(code **)(tempVar1 + 100))();\n      }\n      check_and_initialize_08001460(inputParam1,tempVar1 + 0x68,*(undefined *)(tempVar1 + 0x88),8);\n      return;\n    }\n    *(undefined *)(tempVar1 + 0x5e) = 1;\n    validate_input_params_080014ec(inputParam1,tempVar1 + 0x68,0x20,8,inputParam4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_params_08003880",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "tempVar1"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_code_080038d0",
            "code": "\nvoid executeCode_080038d0(undefined4 input)\n\n{\n  int result;\n  \n  result = getFunctionAddress();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initializeParameter(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_code_080038d0",
                "param_1": "input",
                "iVar1": "result",
                "subtract_four_0800387c": "getFunctionAddress",
                "initialize_param_08001578": "initializeParameter"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "initialize_if_condition_met_08003900",
            "code": "\nvoid initialize_if_condition_met_08003900(undefined4 param)\n\n{\n  int result;\n  \n  result = calculate_offset();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initialize_parameter(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "initialize_if_condition_met_08003900",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_0800387c": "calculate_offset",
                "initialize_param_08001578": "initialize_parameter"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUARTPins_08003978(int *pinConfig)\n\n{\n  int uartPin1Index;\n  int uartPin2Index;\n  undefined4 uartPin2Address;\n  uint uartPin2ValueIndex;\n  uint uartPin2Mask;\n  uint uartPin2Setting;\n  uint uartPin2Field1;\n  undefined4 uartPin2Field2;\n  uint uartPin2Field3;\n  \n  if (pinConfig != (int *)0x0) {\n    uartPin1Index = get_valid_value_index_080034f4((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n    uartPin2Index = get_valid_value_index_080034f4((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n    if ((uartPin2Index == 0) || (uartPin1Index == 0)) {\n      initialize_and_process_data_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2Index);\n    }\n    else {\n      uartPin1Index = compare_and_return_zero_08003582(uartPin1Index);\n      *pinConfig = uartPin1Index;\n      if (uartPin1Index == 0) {\n        initialize_and_process_data_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1Index == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pinConfig + 0x11) = 0;\n          *(undefined *)(pinConfig + 0x17) = 0x25;\n        }\n        else if (uartPin1Index == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pinConfig + 0x11) = 1;\n          *(undefined *)(pinConfig + 0x17) = 0x26;\n        }\n        else if (uartPin1Index == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pinConfig + 0x11) = 2;\n          *(undefined *)(pinConfig + 0x17) = 0x27;\n        }\n        else if (uartPin1Index == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pinConfig + 0x11) = 3;\n          *(undefined *)(pinConfig + 0x17) = 0x34;\n        }\n        else if (uartPin1Index == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pinConfig + 0x11) = 4;\n          *(undefined *)(pinConfig + 0x17) = 0x35;\n        }\n        else if (uartPin1Index == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pinConfig + 0x11) = 5;\n          *(undefined *)(pinConfig + 0x17) = 0x47;\n        }\n        else if (uartPin1Index == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pinConfig + 0x11) = 6;\n          *(undefined *)(pinConfig + 0x17) = 0x52;\n        }\n        else if (uartPin1Index == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pinConfig + 0x11) = 7;\n          *(undefined *)(pinConfig + 0x17) = 0x53;\n        }\n        uartPin2Address = map_bit_to_address_080031fc((uint)((int)*(short *)((int)pinConfig + 0x5a) << 0x18) >> 0x1c);\n        uartPin2ValueIndex = get_value_index_0800354a((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n        uartPin2Mask = 1 << (*(ushort *)((int)pinConfig + 0x5a) & 0xf) & 0xffff;\n        uartPin2Setting = (uartPin2ValueIndex >> 3 & 1) << 4 | uartPin2ValueIndex & 7;\n        uartPin2Field1 = (uartPin2ValueIndex << 0x1a) >> 0x1e;\n        uartPin2Field3 = (uartPin2ValueIndex << 0x11) >> 0x19;\n        uartPin2Field2 = 3;\n        reverse_bits_and_mask_08000fb4(uartPin2Address,&uartPin2Mask);\n        uartPin2Address = map_bit_to_address_080031fc((uint)((int)*(short *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        uartPin2ValueIndex = get_value_index_0800354a((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n        uartPin2Mask = 1 << (*(ushort *)(pinConfig + 0x16) & 0xf) & 0xffff;\n        uartPin2Setting = (uartPin2ValueIndex >> 3 & 1) << 4 | uartPin2ValueIndex & 7;\n        uartPin2Field1 = (uartPin2ValueIndex << 0x1a) >> 0x1e;\n        reverse_bits_and_mask_08000fb4(uartPin2Address,&uartPin2Mask);\n        (&DAT_200002b4)[*(byte *)(pinConfig + 0x11)] = pinConfig + 1;\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = pinConfig[0x12];\n        pinConfig[3] = pinConfig[0x13];\n        pinConfig[4] = pinConfig[0x14];\n        pinConfig[5] = pinConfig[0x15];\n        pinConfig[6] = 0xc;\n        pinConfig[7] = 0;\n        pinConfig[8] = 0;\n        sanitize_data_08002d72(pinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "pinConfig",
                "iVar1": "uartPin1Index",
                "iVar2": "uartPin2Index",
                "uVar3": "uartPin2Address",
                "uVar4": "uartPin2ValueIndex",
                "local_2c": "uartPin2Mask",
                "local_28": "uartPin2Setting",
                "local_24": "uartPin2Field1",
                "local_20": "uartPin2Field2",
                "local_1c": "uartPin2Field3"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int valueIndex1;\n  undefined4 valueIndex2;\n  \n  valueIndex1 = get_valid_value_index_080034f4(0x38,&DAT_08005ca0);\n  if (valueIndex1 != 0) {\n    valueIndex2 = get_valid_value_index_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_index_or_error_0800351e(valueIndex2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    configure_uart_pins_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "valueIndex1",
                "uVar2": "valueIndex2"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_and_validate_data_08003d18",
            "code": "\nuint process_and_validate_data_08003d18(undefined4 data,uint value)\n\n{\n  int data_value;\n  int valid_value_index;\n  uint index;\n  \n  data_value = get_data_value_08000e30();\n  valid_value_index = get_valid_value_index_080034f4(0x38,&DAT_08005ca0);\n  if (valid_value_index == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (valid_value_index = get_valid_value_index_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != valid_value_index))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (initialize_uart(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    valid_value_index = process_data((&DAT_200002b4)[index],data,value & 0xffff,1000);\n    if (valid_value_index == 0) {\n      return value;\n    }\n    valid_value_index = get_data_value_08000e30();\n  } while ((uint)(valid_value_index - data_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_and_validate_data_08003d18",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "data_value",
                "iVar2": "valid_value_index",
                "uVar3": "index",
                "process_data_08002dd0": "process_data",
                "initialize_uart_08003cc8": "initialize_uart"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_combination_valid_08003dd0",
            "code": "\nbool isCombinationValid_08003dd0(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200002b4)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_combination_valid_08003dd0",
                "param_1": "inputValue",
                "uVar1": "combinedBytes",
                "combine_bytes_0800312c": "combineBytes"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_flag_set_08003df4",
            "code": "\nbool isFlagSet_08003df4(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_0800312c((&DAT_200002b4)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_flag_set_08003df4",
                "param_1": "input",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "check_combination_08003e18",
            "code": "\nundefined4 check_combination_08003e18(int input_value,undefined *output_value,undefined4 param_3,undefined4 param_4)\n\n{\n  int is_valid_combination;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  is_valid_combination = is_combination_valid();\n  if (is_valid_combination == 0) {\n    *output_value = *(undefined *)(input_value + 0x45);\n    validate_parameters((&DAT_200002b4)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_200002b4,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "check_combination_08003e18",
                "param_1": "input_value",
                "param_2": "output_value",
                "iVar1": "is_valid_combination",
                "is_combination_valid_08003dd0": "is_combination_valid",
                "validate_parameters_08002efa": "validate_parameters"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_combination_08003e54",
            "code": "\nvoid updateCombination_08003e54(int combinationPtr,undefined4 newValue,undefined4 unused1,undefined4 unused2)\n\n{\n  int isValidCombination;\n  uint combinationIndex;\n  \n  if (combinationPtr != 0) {\n    isValidCombination = is_combination_valid_08003dd0();\n    if (isValidCombination == 0) {\n      combinationIndex = (uint)*(byte *)(combinationPtr + 0x44);\n      *(undefined4 *)(&DAT_20000214 + combinationIndex * 4) = newValue;\n      *(int *)(&DAT_2000023c + combinationIndex * 4) = combinationPtr;\n      update_memory_08000e60((int)*(char *)(combinationPtr + 0x5c),0,1,combinationIndex,unused2);\n      set_bit_08000ec4((int)*(char *)(combinationPtr + 0x5c));\n      validate_parameters_08002efa((&DAT_200002b4)[*(byte *)(combinationPtr + 0x44)],combinationPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_combination_08003e54",
                "param_1": "combinationPtr",
                "param_2": "newValue",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "isValidCombination",
                "uVar2": "combinationIndex"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_memory_and_params_08003eac",
            "code": "\nvoid updateMemoryAndParams_08003eac(int inputParam,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (inputParam != 0) {\n    byteValue = *(byte *)(inputParam + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = inputParam;\n    update_memory_08000e60((int)*(char *)(inputParam + 0x5c),0,2);\n    set_bit_08000ec4((int)*(char *)(inputParam + 0x5c));\n    validate_params_08002eb2((&DAT_200002b4)[*(byte *)(inputParam + 0x44)],\n                 *(int *)(inputParam + 0x68) + (uint)*(ushort *)(inputParam + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_memory_and_params_08003eac",
                "param_1": "inputParam",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_index_08003f00",
            "code": "\nuint find_index_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_below_index_threshold_08003f24",
            "code": "\nvoid execute_function_below_index_threshold_08003f24(void)\n\n{\n  uint index;\n  \n  index = find_index();\n  if (index < 10) {\n    (**(code **)(&DAT_20000214 + index * 4))(*(undefined4 *)(&DAT_2000023c + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_below_index_threshold_08003f24",
                "uVar1": "index",
                "find_index_08003f00": "find_index"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "process_data_08003f48",
            "code": "\nvoid processData_08003f48(void)\n\n{\n  uint index;\n  int result;\n  int data;\n  \n  index = findIndex();\n  data = *(int *)(&DAT_2000028c + index * 4);\n  if ((index < 10) && (result = (**(code **)(&DAT_20000264 + index * 4))(data), result != -1)) {\n    validateParams((&DAT_200002b4)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 0x68) + (uint)*(ushort *)(data + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "process_data_08003f48",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "data",
                "find_index_08003f00": "findIndex",
                "validate_params_08002eb2": "validateParams"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedMemory = DAT_200002dc;\n  if (DAT_200002dc + size <= stackBoundary) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedMemory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackBoundary"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nundefined4 get_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_layout_080040d6",
            "code": "\nundefined4 initializeMemoryLayout_080040d6(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_layout_080040d6",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "is_always_true_080040e0",
            "code": "\nbool is_always_true_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "is_always_true_080040e0",
                "undefined4": "bool"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_program_080040e4",
            "code": "\nvoid initialize_program_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_program_080040e4",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nundefined4 initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_and_validate_data_080040ec",
            "code": "\nvoid process_and_validate_data_080040ec(undefined4 unused_param,undefined4 data_param1,undefined4 data_param2,undefined4 data_param3)\n\n{\n  process_and_validate_data_080040ec_08003d18(data_param1,data_param2,data_param2,data_param3,data_param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_and_validate_data_080040ec",
                "param_1": "unused_param",
                "param_2": "data_param1",
                "param_3": "data_param2",
                "param_4": "data_param3"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_variable_080040fc",
            "code": "\nundefined4 initialize_variable_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_variable_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_application_0800410c",
            "code": "\nundefined4 initializeApplication_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_application_0800410c"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_data_08004110",
            "code": "\nvoid processData_08004110(uint index,undefined4 actionType,undefined4 param3,undefined *param4)\n\n{\n  int bitRetrieved;\n  undefined *arrayPointer;\n  int arrayIndex;\n  \n  if (index < 0x60) {\n    arrayIndex = (int)*(short *)(&DAT_08005d3c + index * 2);\n    arrayPointer = &DAT_08005d3c;\n  }\n  else {\n    arrayIndex = -1;\n    arrayPointer = param4;\n  }\n  if (arrayIndex != -1) {\n    bitRetrieved = retrieve_bit_from_array_08003138(arrayIndex,&DAT_200002e0,param3,arrayPointer,param4);\n    if (bitRetrieved != 0) {\n      bitRetrieved = find_value_in_array_0800355e(arrayIndex,&DAT_08005a18);\n      if (bitRetrieved == 0) {\n        bitRetrieved = find_value_in_array_0800355e(arrayIndex,&DAT_08005a3c);\n        if (bitRetrieved != 0) {\n          process_data_08003414(arrayIndex);\n        }\n      }\n      else {\n        initialize_memory_and_clear_bits_080033d8(arrayIndex);\n      }\n      update_bit_0800316c(arrayIndex,&DAT_200002e0);\n    }\n    switch(actionType) {\n    case 0:\n      set_bit_in_address_08003486(arrayIndex,0);\n      break;\n    case 1:\n      set_bit_in_address_08003486(arrayIndex,1,0);\n      break;\n    case 2:\n      set_bit_in_address_08003486(arrayIndex,0,1);\n      break;\n    case 3:\n      set_bit_in_address_08003486(arrayIndex,0,2);\n    }\n    update_bit_0800314e(arrayIndex,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "index",
                "param_2": "actionType",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "bitRetrieved",
                "puVar2": "arrayPointer",
                "iVar3": "arrayIndex"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_data_080041bc",
            "code": "\nvoid processData_080041bc(uint index,undefined4 value,undefined4 paramArray,undefined *dataArray)\n\n{\n  int bitStatus;\n  undefined4 memoryAddress;\n  undefined *dataPtr;\n  uint dataValue;\n  \n  if (index < 0x60) {\n    dataValue = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    dataPtr = &DAT_08005d3c;\n  }\n  else {\n    dataValue = 0xffffffff;\n    dataPtr = dataArray;\n  }\n  if ((dataValue != 0xffffffff) &&\n     (bitStatus = retrieve_bit_from_array_08003138(dataValue,&DAT_2000030c,paramArray,dataPtr,dataArray), bitStatus != 0)) {\n    memoryAddress = get_memory_address_0800318c((dataValue << 0x18) >> 0x1c);\n    set_param_value_080034b6(memoryAddress,1 << (dataValue & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "index",
                "param_2": "value",
                "param_3": "paramArray",
                "param_4": "dataArray",
                "iVar1": "bitStatus",
                "uVar2": "memoryAddress",
                "puVar3": "dataPtr",
                "uVar4": "dataValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_data_08004204",
            "code": "\nvoid initialize_data_08004204(void)\n\n{\n  initialize_data_08004204_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_data_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculate_offset_08004240(int base_address)\n\n{\n  return (*(short *)(base_address + 0x138) + 0x40) - *(short *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_combination_080042ac",
            "code": "\nvoid updateCombination_080042ac(int combinationAddress)\n\n{\n  int combinationStatus;\n  ushort newIndex;\n  undefined newValue;\n  \n  combinationStatus = check_combination_08003e18(combinationAddress,&newValue);\n  if ((combinationStatus == 0) &&\n     (newIndex = *(short *)(combinationAddress + 100) + 1U & 0x3f, newIndex != *(ushort *)(combinationAddress + 0x66))) {\n    *(undefined *)(*(int *)(combinationAddress + 0x60) + (uint)*(ushort *)(combinationAddress + 100)) = newValue;\n    *(ushort *)(combinationAddress + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_combination_080042ac",
                "param_1": "combinationAddress",
                "iVar1": "combinationStatus",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "update_param_and_memory_080042e8",
            "code": "\nundefined4 updateParamAndMemory_080042e8(int param,undefined data)\n\n{\n  byte value1;\n  byte value2;\n  int flag;\n  \n  *(undefined *)(param + 0x10) = 1;\n  flag = *(ushort *)(param + 0x140) + 1;\n  value1 = (byte)flag;\n  value2 = value1 & 0x7f;\n  if (flag == 0) {\n    value2 = -(-value1 & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(param + 0x142) == (ushort)value2);\n  *(undefined *)(*(int *)(param + 0x13c) + (uint)*(ushort *)(param + 0x140)) = data;\n  *(ushort *)(param + 0x140) = (ushort)value2;\n  flag = isFlagSet(param + 0xd4);\n  if (flag == 0) {\n    updateMemoryAndParams(param + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "update_param_and_memory_080042e8",
                "param_1": "param",
                "param_2": "data",
                "bVar1": "value1",
                "bVar2": "value2",
                "iVar3": "flag",
                "is_flag_set_08003df4": "isFlagSet",
                "update_memory_and_params_08003eac": "updateMemoryAndParams"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_08004364",
            "code": "\nvoid initializeData_08004364(int data)\n\n{\n  *(int *)(data + 0x134) = data + 0x11;\n  *(undefined2 *)(data + 0x138) = 0;\n  *(undefined2 *)(data + 0x13a) = 0;\n  *(int *)(data + 0x13c) = data + 0x51;\n  *(undefined2 *)(data + 0x140) = 0;\n  *(undefined2 *)(data + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "data"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "configure_uart_pins_08004388",
            "code": "\nvoid configureUartPins_08004388(int deviceAddress,undefined4 baudRate,byte configByte)\n\n{\n  uint returnValue;\n  byte configMask;\n  int configValue;\n  code *jumpTable;\n  \n  *(undefined4 *)(deviceAddress + 0x11c) = baudRate;\n  *(byte *)(deviceAddress + 0x144) = configByte;\n  configMask = configByte & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((configByte & 0x30) == 0x30) {\n    *(undefined4 *)(deviceAddress + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((configByte & 0x20) == 0) {\n    *(undefined4 *)(deviceAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(deviceAddress + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((configByte & 8) == 0) {\n    *(undefined4 *)(deviceAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(deviceAddress + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(deviceAddress + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(deviceAddress + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    configure_uart_pins_08003978(deviceAddress + 0xd4);\n    update_combination_08003e54(deviceAddress + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  process_assert_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (returnValue < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + returnValue * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "configure_uart_pins_08004388",
                "param_1": "deviceAddress",
                "param_2": "baudRate",
                "param_3": "configByte",
                "extraout_r1": "returnValue",
                "bVar1": "configMask",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "initialize_parameter_value_08004444",
            "code": "\nvoid initializeParameterValue_08004444(int baseAddress,uint offset)\n\n{\n  undefined2 parameterValue;\n  code *jumpTable;\n  \n  if (offset < 0x60) {\n    parameterValue = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    parameterValue = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 0x12e) = parameterValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "initialize_parameter_value_08004444",
                "param_1": "baseAddress",
                "param_2": "offset",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "parameterValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_parameter_value_08004460",
            "code": "\nvoid setParameterValue_08004460(int objectAddress,uint parameterIndex)\n\n{\n  undefined2 parameterValue;\n  \n  if (parameterIndex < 0x60) {\n    parameterValue = *(undefined2 *)(&DAT_08005d3c + parameterIndex * 2);\n  }\n  else {\n    parameterValue = 0xffff;\n  }\n  *(undefined2 *)(objectAddress + 300) = parameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_parameter_value_08004460",
                "param_1": "objectAddress",
                "param_2": "parameterIndex",
                "uVar1": "parameterValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_and_set_parameters_0800447c",
            "code": "\nundefined4 *\ninitializeAndSetParameters_0800447c(undefined4 *parameterArray,undefined4 valueToFind,undefined4 parameterValue,undefined4 secondParameterValue)\n\n{\n  undefined2 valueIndex;\n  \n  parameterArray[1] = 0;\n  parameterArray[2] = 1000;\n  *parameterArray = &PTR_FUN_080042e8_1_08005ed4;\n  if (parameterArray == &DAT_20000338) {\n    initializeParameterValue(&DAT_20000338,0x4c,parameterValue,&DAT_20000338,secondParameterValue);\n    setParameterValue(&DAT_20000338,0x4d);\n  }\n  else {\n    valueIndex = findValueIndex(valueToFind,&DAT_08005c10);\n    *(undefined2 *)((int)parameterArray + 0x12e) = valueIndex;\n    valueIndex = findValueIndex(valueToFind,&DAT_08005ca0);\n    *(undefined2 *)(parameterArray + 0x4b) = valueIndex;\n  }\n  initializeData(parameterArray);\n  return parameterArray;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_and_set_parameters_0800447c",
                "param_1": "parameterArray",
                "param_2": "valueToFind",
                "param_3": "parameterValue",
                "param_4": "secondParameterValue",
                "uVar1": "valueIndex",
                "initialize_parameter_value_08004444": "initializeParameterValue",
                "set_parameter_value_08004460": "setParameterValue",
                "find_value_index_or_error_0800351e": "findValueIndex",
                "initialize_data_08004364": "initializeData"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_parameters_if_needed_080044d8",
            "code": "\nvoid initializeParametersIfNeeded_080044d8(int flag,int value,undefined4 paramA,undefined4 paramB)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initializeAndSetParameters(&DAT_20000338,0x40004800,paramA,0xffff,paramB);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_parameters_if_needed_080044d8",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "paramA",
                "param_4": "paramB",
                "initialize_and_set_parameters_0800447c": "initializeAndSetParameters"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_memory_08004544",
            "code": "\nvoid initializeMemory_08004544(undefined4 *memoryPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *memoryPointer = &DAT_08005f28;\n  *(undefined *)(memoryPointer + 1) = value1;\n  *(undefined *)((int)memoryPointer + 5) = value2;\n  *(undefined *)((int)memoryPointer + 6) = value3;\n  *(undefined *)((int)memoryPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_memory_08004544",
                "param_1": "memoryPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_memory_08004560",
            "code": "\nvoid initializeMemory_08004560(int condition1,int condition2)\n\n{\n  if ((condition1 == 1) && (condition2 == 0xffff)) {\n    initialize_memory_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_memory_08004560",
                "param_1": "condition1",
                "param_2": "condition2"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combineValues_08004640(int inputValue,uint flagValue)\n\n{\n  return flagValue | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "inputValue",
                "param_2": "flagValue"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_system_08004648",
            "code": "\nvoid initialize_system_08004648(void)\n\n{\n  update_data_register(3);\n  initialize_registers_and_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_system_08004648",
                "update_data_register_08000e3c": "update_data_register",
                "initialize_registers_and_system_08000d8e": "initialize_registers_and_system"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "execute_function_loop_08004658",
            "code": "\nvoid execute_function_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_uart_and_trigger_interrupt();\n  do {\n    update_variable();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "execute_function_loop_08004658",
                "initialize_uart_and_execute_interrupt_08000c4c": "initialize_uart_and_trigger_interrupt",
                "process_and_update_variable_08000c64": "update_variable"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint number)\n\n{\n  char setBitsCount;\n  \n  setBitsCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    setBitsCount = setBitsCount + '\\x01';\n  }\n  return setBitsCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "number",
                "cVar1": "setBitsCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int condition,int flag,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    bitShiftLeft(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,unusedParam2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "condition",
                "param_2": "flag",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "shift_bits_left_080047fe": "bitShiftLeft"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_or_recurse_080047c0",
            "code": "\nvoid execute_or_recurse_080047c0(int input)\n\n{\n  int bit_count;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  execute_resource();\n  bit_count = count_set_bits();\n  if ((&DAT_20000494)[bit_count * 5] != 0) {\n    execute_or_recurse_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_or_recurse_080047c0",
                "param_1": "input",
                "iVar1": "bit_count",
                "execute_resource_08005760": "execute_resource",
                "count_set_bits_08004678": "count_set_bits"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_080047d0",
            "code": "\nvoid checkAndExecute_080047d0(void)\n\n{\n  int setBitsCount;\n  \n  setBitsCount = getSetBitsCount();\n  if ((&DAT_20000494)[setBitsCount * 5] != 0) {\n    executeOrRecurse();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_080047d0",
                "count_set_bits_08004678": "getSetBitsCount",
                "iVar1": "setBitsCount",
                "execute_or_recurse_080047c0": "executeOrRecurse"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_bits_left_080047fe",
            "code": "\nvoid shiftBitsLeft_080047fe(undefined4 destination,undefined4 source)\n\n{\n  left_shift_64_bits_08004844(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_bits_left_080047fe",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "process_assert_08004808",
            "code": "\nvoid processAssert_08004808(undefined4 file,undefined4 line,char *assertion,undefined4 additionalInfo)\n\n{\n  undefined4 resourceOffset;\n  char *textPrefix;\n  undefined8 executedResource;\n  undefined4 resourceInfo;\n  \n  resourceOffset = *(undefined4 *)(DAT_200000a0 + 0xc);\n  resourceInfo = additionalInfo;\n  if (assertion == (char *)0x0) goto LAB_0800482c;\n  textPrefix = \", function: \";\n  do {\n    process_data_08004860(resourceOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",additionalInfo,file,line\n                 ,textPrefix,assertion,resourceInfo);\n    executedResource = execute_resource_080051ac();\n    line = (undefined4)((ulonglong)executedResource >> 0x20);\n    resourceOffset = (undefined4)executedResource;\nLAB_0800482c:\n    assertion = \"\";\n    textPrefix = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "process_assert_08004808",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "additionalInfo",
                "uVar1": "resourceOffset",
                "pcVar2": "textPrefix",
                "uVar3": "executedResource",
                "uVar4": "resourceInfo"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "left_shift_64_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong left_shift_64_bits_08004844(undefined4 num_shifts,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "left_shift_64_bits_08004844",
                "param_1": "num_shifts",
                "param_2": "value"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_data_08004860",
            "code": "\nvoid processData_08004860(undefined4 input1,undefined4 input2,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 tempData1;\n  undefined4 tempData2;\n  \n  tempData1 = data1;\n  tempData2 = data2;\n  parse_and_process_data_08004a84(DAT_200000a0,input1,input2,&tempData1,input1,&tempData1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2",
                "uStack_8": "tempData1",
                "uStack_4": "tempData2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_sequentially_08004884",
            "code": "\nvoid executeFunctionsSequentially_08004884(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  FUNC_080059f8();\n  for (counter = 0; counter != 10; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_sequentially_08004884",
                "iVar1": "counter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_with_byte_080048cc",
            "code": "\nvoid fillWithByte_080048cc(undefined *buffer,undefined byteToFill,int length)\n\n{\n  undefined *endPointer;\n  \n  endPointer = buffer + length;\n  for (; buffer != endPointer; buffer = buffer + 1) {\n    *buffer = byteToFill;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_with_byte_080048cc",
                "param_1": "buffer",
                "param_2": "byteToFill",
                "param_3": "length",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_linked_list_080048dc",
            "code": "\nvoid updateLinkedList_080048dc(undefined4 *result,int numNodes,undefined4 param1,undefined4 param2)\n\n{\n  int *tempPtr;\n  int **extraOutPtr;\n  int **newNodePtr;\n  int **currentNodePtr;\n  int **previousNodePtr;\n  int **updatedNodePtr;\n  bool isCurrentNode;\n  \n  if (numNodes == 0) {\n    return;\n  }\n  updatedNodePtr = (int **)(numNodes + -4);\n  if (*(int *)(numNodes + -4) < 0) {\n    updatedNodePtr = (int **)((int)updatedNodePtr + *(int *)(numNodes + -4));\n  }\n  FUNC_0800557c();\n  currentNodePtr = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    updatedNodePtr[1] = (int *)0x0;\n    newNodePtr = extraOutPtr;\n    DAT_200005c8 = updatedNodePtr;\n  }\n  else {\n    currentNodePtr = DAT_200005c8;\n    if (updatedNodePtr < DAT_200005c8) {\n      newNodePtr = (int **)*updatedNodePtr;\n      currentNodePtr = (int **)((int)updatedNodePtr + (int)newNodePtr);\n      isCurrentNode = DAT_200005c8 == currentNodePtr;\n      if (isCurrentNode) {\n        currentNodePtr = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      updatedNodePtr[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = updatedNodePtr;\n      if (isCurrentNode) {\n        currentNodePtr = (int **)((int)currentNodePtr + (int)newNodePtr);\n        *updatedNodePtr = (int *)currentNodePtr;\n      }\n    }\n    else {\n      do {\n        previousNodePtr = currentNodePtr;\n        currentNodePtr = (int **)previousNodePtr[1];\n        if (currentNodePtr == (int **)0x0) break;\n      } while (currentNodePtr <= updatedNodePtr);\n      newNodePtr = (int **)*previousNodePtr;\n      if ((int **)((int)previousNodePtr + (int)newNodePtr) == updatedNodePtr) {\n        newNodePtr = (int **)((int)newNodePtr + (int)*updatedNodePtr);\n        *previousNodePtr = (int *)newNodePtr;\n        if (currentNodePtr == (int **)((int)previousNodePtr + (int)newNodePtr)) {\n          tempPtr = *currentNodePtr;\n          currentNodePtr = (int **)currentNodePtr[1];\n          previousNodePtr[1] = (int *)currentNodePtr;\n          newNodePtr = (int **)((int)newNodePtr + (int)tempPtr);\n          *previousNodePtr = (int *)newNodePtr;\n        }\n      }\n      else if (updatedNodePtr < (int **)((int)previousNodePtr + (int)newNodePtr)) {\n        *result = 0xc;\n      }\n      else {\n        newNodePtr = (int **)((int)updatedNodePtr + (int)*updatedNodePtr);\n        isCurrentNode = currentNodePtr == newNodePtr;\n        if (isCurrentNode) {\n          newNodePtr = (int **)*currentNodePtr;\n          currentNodePtr = (int **)currentNodePtr[1];\n        }\n        updatedNodePtr[1] = (int *)currentNodePtr;\n        if (isCurrentNode) {\n          newNodePtr = (int **)((int)newNodePtr + (int)*updatedNodePtr);\n          *updatedNodePtr = (int *)newNodePtr;\n        }\n        previousNodePtr[1] = (int *)updatedNodePtr;\n      }\n    }\n  }\n  FUNC_0800557e(result,newNodePtr,currentNodePtr,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "param_1": "result",
                "param_2": "numNodes",
                "param_3": "param1",
                "param_4": "param2",
                "piVar1": "tempPtr",
                "extraout_r1": "extraOutPtr",
                "ppiVar2": "newNodePtr",
                "ppiVar3": "currentNodePtr",
                "ppiVar4": "previousNodePtr",
                "ppiVar5": "updatedNodePtr",
                "bVar6": "isCurrentNode"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_and_initialize_memory_08004978",
            "code": "\nuint allocate_and_initialize_memory_08004978(undefined4 *result_pointer,uint required_size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *next_block_pointer;\n  uint block_difference;\n  uint *previous_block_pointer;\n  uint allocated_size;\n  \n  allocated_size = (required_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < required_size)) {\n    *result_pointer = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    previous_block_pointer = DAT_200005c8;\n    while (next_block_pointer = current_block, next_block_pointer != (uint *)0x0) {\n      block_difference = *next_block_pointer - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_block_pointer == next_block_pointer) {\n            current_block = (uint *)previous_block_pointer[1];\n          }\n          else {\n            current_block = (uint *)next_block_pointer[1];\n          }\n          if (previous_block_pointer != next_block_pointer) {\n            previous_block_pointer[1] = (uint)current_block;\n            previous_block_pointer = next_block_pointer;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *next_block_pointer = block_difference;\n          *(uint *)((int)next_block_pointer + block_difference) = allocated_size;\n          previous_block_pointer = (uint *)((int)next_block_pointer + block_difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_block_pointer = next_block_pointer;\n      current_block = (uint *)next_block_pointer[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = initialize_memory_0800500c(result_pointer);\n    }\n    current_block = (uint *)initialize_memory_0800500c(result_pointer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block_pointer = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block_pointer ||\n        (difference = initialize_memory_0800500c(result_pointer,(int)previous_block_pointer - (int)current_block), difference != -1)))) {\n      *previous_block_pointer = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(result_pointer);\n      allocated_size = (int)previous_block_pointer + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block_pointer + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block_pointer + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result_pointer = 0xc;\n    FUNC_0800557e(result_pointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_and_initialize_memory_08004978",
                "param_1": "result_pointer",
                "param_2": "required_size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "puVar3": "next_block_pointer",
                "uVar4": "block_difference",
                "puVar5": "previous_block_pointer",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int arg_1,byte arg_2,byte **data_ptr)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = data_ptr[2] + -1;\n  data_ptr[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_ptr[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)arg_2, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_ptr;\n    *data_ptr = temp_var2 + 1;\n    *temp_var2 = arg_2;\n    return (uint)arg_2;\n  }\n  if ((arg_1 != 0) && (*(int *)(arg_1 + 0x18) == 0)) {\n    initialize_memory_and_params_080053a0();\n  }\n  if (data_ptr == (byte **)&DAT_08005fc0) {\n    data_ptr = *(byte ***)(arg_1 + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_08005fe0) {\n    data_ptr = *(byte ***)(arg_1 + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_08005fa0) {\n    data_ptr = *(byte ***)(arg_1 + 0xc);\n  }\n  data_ptr[2] = data_ptr[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_ptr + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = data_ptr[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = update_data_080050d0(arg_1,data_ptr,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    temp_var1 = (int)*data_ptr - (int)data_ptr[4];\n    result = (uint)arg_2;\n    if ((temp_var1 < (int)data_ptr[5]) || (temp_var1 = process_data_080052cc(arg_1,data_ptr), temp_var1 == 0)) {\n      data_ptr[2] = data_ptr[2] + -1;\n      temp_var2 = *data_ptr;\n      *data_ptr = temp_var2 + 1;\n      *temp_var2 = arg_2;\n      if ((byte *)(temp_var1 + 1) != data_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_data_080052cc(arg_1,data_ptr);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "data_ptr",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_and_increment_08004a60",
            "code": "\nint process_and_increment_08004a60(undefined4 input_ptr,undefined4 output_ptr,undefined *data_ptr,int data_size)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_pos;\n  \n  end_ptr = data_ptr + data_size;\n  current_pos = data_size;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = process_input_08004a34(input_ptr,*data_ptr,output_ptr,data_size,current_pos);\n    data_size = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (data_size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_and_increment_08004a60",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "data_ptr",
                "param_4": "data_size",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_pos"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "parse_and_process_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint parseAndProcessData_08004a84(int input_ptr,undefined4 *format_ptr,byte *data_ptr,int *size_ptr)\n\n{\n  int result;\n  int *int_ptr;\n  bool is_valid;\n  byte *current_byte_ptr;\n  byte *next_byte_ptr;\n  int unaff_r9;\n  int index;\n  int *size_ptr;\n  uint flag;\n  int width;\n  undefined4 precision;\n  int int_value;\n  int total_size;\n  byte specifier;\n  undefined space;\n  undefined plus;\n  undefined modifier;\n  undefined4 temp;\n  \n  size_ptr = size_ptr;\n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x18) == 0)) {\n    initialize_memory_and_params_080053a0();\n  }\n  if (format_ptr == &DAT_08005fc0) {\n    format_ptr = *(undefined4 **)(input_ptr + 4);\n  }\n  else if (format_ptr == (undefined4 *)&DAT_08005fe0) {\n    format_ptr = *(undefined4 **)(input_ptr + 8);\n  }\n  else if (format_ptr == (undefined4 *)&DAT_08005fa0) {\n    format_ptr = *(undefined4 **)(input_ptr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_ptr + 3) << 0x1c)) || (format_ptr[4] == 0)) &&\n     (index = update_data_080050d0(input_ptr,format_ptr), index != 0)) {\n    return -1;\n  }\n  total_size = 0;\n  space = 0x20;\n  plus = 0x30;\n  current_byte_ptr = data_ptr;\nLAB_08004ac6:\n  next_byte_ptr = current_byte_ptr;\n  if (*next_byte_ptr != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_byte_ptr = next_byte_ptr + 1;\n  if (*next_byte_ptr != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  index = (int)next_byte_ptr - (int)data_ptr;\n  if (index != 0) {\n    result = process_and_increment_08004a60(input_ptr,format_ptr,data_ptr,index);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(format_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_size;\n    }\n    total_size = total_size + index;\n  }\n  if (*next_byte_ptr == 0) goto LAB_08004c70;\n  flag = 0;\n  int_value = 0;\n  width = -1;\n  precision = 0;\n  modifier = 0;\n  temp = 0;\n  current_byte_ptr = next_byte_ptr + 1;\n  while( true ) {\n    index = find_first_occurrence_08000230(\"#-0+ \",*current_byte_ptr);\n    data_ptr = current_byte_ptr + 1;\n    if (index == 0) break;\n    flag = 1 << (index + 0xf7ffa094U & 0xff) | flag;\n    current_byte_ptr = data_ptr;\n  }\n  if ((int)(flag << 0x1b) < 0) {\n    modifier = 0x20;\n  }\n  if ((int)(flag << 0x1c) < 0) {\n    modifier = 0x2b;\n  }\n  if (*current_byte_ptr == 0x2a) {\n    int_ptr = size_ptr + 1;\n    index = *size_ptr;\n    size_ptr = int_ptr;\n    if (index < 0) {\n      int_value = -index;\n      flag = flag | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_valid = false;\n    index = int_value;\n    data_ptr = current_byte_ptr;\n    while( true ) {\n      if (9 < *data_ptr - 0x30) break;\n      index = index * 10 + (*data_ptr - 0x30);\n      is_valid = true;\n      data_ptr = data_ptr + 1;\n    }\n    if (!is_valid) goto LAB_08004bae;\n  }\n  int_value = index;\nLAB_08004bae:\n  if (*data_ptr == 0x2e) {\n    if (data_ptr[1] == 0x2a) {\n      width = *size_ptr;\n      if (width < 0) {\n        width = -1;\n      }\n      data_ptr = data_ptr + 2;\n      size_ptr = size_ptr + 1;\n    }\n    else {\n      is_valid = false;\n      width = 0;\n      index = 0;\n      while( true ) {\n        data_ptr = data_ptr + 1;\n        if (9 < *data_ptr - 0x30) break;\n        index = index * 10 + (*data_ptr - 0x30);\n        is_valid = true;\n      }\n      if (is_valid) {\n        width = index;\n      }\n    }\n  }\n  index = find_first_occurrence_08000230(&DAT_08005f72,*data_ptr,3);\n  if (index != 0) {\n    flag = flag | 0x40 << (index + 0xf7ffa08eU & 0xff);\n    data_ptr = data_ptr + 1;\n  }\n  specifier = *data_ptr;\n  data_ptr = data_ptr + 1;\n  index = find_first_occurrence_08000230(\"efgEFG\",specifier,6);\n  if (index == 0) {\n    unaff_r9 = process_and_convert_data_08004d9c(input_ptr,&flag,format_ptr,0x8004a61,&size_ptr);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    size_ptr = (int *)(((int)size_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_size = total_size + unaff_r9;\n  current_byte_ptr = data_ptr;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "parse_and_process_data_08004a84",
                "param_1": "input_ptr",
                "param_2": "format_ptr",
                "param_3": "data_ptr",
                "param_4": "size_ptr",
                "iVar1": "result",
                "piVar2": "int_ptr",
                "bVar3": "is_valid",
                "pbVar4": "current_byte_ptr",
                "pbVar5": "next_byte_ptr",
                "iVar6": "index",
                "local_8c": "size_ptr",
                "local_88": "flag",
                "local_84": "width",
                "local_80": "precision",
                "local_7c": "int_value",
                "local_74": "total_size",
                "local_70": "specifier",
                "local_6f": "space",
                "local_6e": "plus",
                "local_45": "modifier",
                "local_30": "temp"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocess_data_08004cb0(undefined4 input_value,uint *input_array,uint *output_value,undefined4 extra_param,code *callback_function)\n\n{\n  int loop_counter1;\n  int loop_counter2;\n  uint temp_value1;\n  uint temp_value2;\n  bool condition_check;\n  \n  temp_value1 = input_array[4];\n  if ((int)input_array[4] < (int)input_array[2]) {\n    temp_value1 = input_array[2];\n  }\n  *output_value = temp_value1;\n  if (*(char *)((int)input_array + 0x43) != '\\0') {\n    *output_value = temp_value1 + 1;\n  }\n  if ((int)(*input_array << 0x1a) < 0) {\n    *output_value = *output_value + 2;\n  }\n  if ((*input_array & 6) == 0) {\n    for (loop_counter1 = 0; loop_counter1 < (int)(input_array[3] - *output_value); loop_counter1 = loop_counter1 + 1) {\n      loop_counter2 = (*callback_function)(input_value,extra_param,(int)input_array + 0x19,1);\n      if (loop_counter2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  temp_value1 = (uint)*(byte *)((int)input_array + 0x43);\n  if (temp_value1 != 0) {\n    temp_value1 = 1;\n  }\n  if ((int)(*input_array << 0x1a) < 0) {\n    *(undefined *)((int)input_array + temp_value1 + 0x43) = 0x30;\n    *(undefined *)((int)input_array + temp_value1 + 0x44) = *(undefined *)((int)input_array + 0x45);\n    temp_value1 = temp_value1 + 2;\n  }\n  loop_counter1 = (*callback_function)(input_value,extra_param,(int)input_array + 0x43,temp_value1);\n  if (loop_counter1 != -1) {\n    temp_value1 = input_array[3];\n    condition_check = (*input_array & 6) == 4;\n    if (condition_check) {\n      temp_value1 = temp_value1 - *output_value;\n    }\n    if (condition_check) {\n      temp_value1 = temp_value1 & ~((int)temp_value1 >> 0x1f);\n    }\n    else {\n      temp_value1 = 0;\n    }\n    if ((int)input_array[4] < (int)input_array[2]) {\n      temp_value1 = temp_value1 + (input_array[2] - input_array[4]);\n    }\n    temp_value2 = 0;\n    while( true ) {\n      if (temp_value1 == temp_value2) {\n        return 0;\n      }\n      loop_counter1 = (*callback_function)(input_value,extra_param,(int)input_array + 0x1a,1);\n      if (loop_counter1 == -1) break;\n      temp_value2 = temp_value2 + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input_value",
                "param_2": "input_array",
                "param_3": "output_value",
                "param_4": "extra_param",
                "param_5": "callback_function",
                "iVar1": "loop_counter1",
                "iVar2": "loop_counter2",
                "uVar3": "temp_value1",
                "uVar4": "temp_value2",
                "bVar5": "condition_check"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "process_and_convert_data_08004d9c",
            "code": "\nuint process_and_convert_data_08004d9c(undefined4 param1,uint *param2,undefined4 param3,code *param4,uint **param5)\n\n{\n  byte flag;\n  int index;\n  uint *pointer;\n  int count;\n  char *string;\n  uint value;\n  uint **pointer2;\n  char **pointer3;\n  uint result;\n  uint var10;\n  char *pointer4;\n  char *pointer5;\n  uint localArray [2];\n  \n  flag = *(byte *)(param2 + 6);\n  pointer5 = (char *)((int)param2 + 0x43);\n  if (flag != 0x6e) {\n    if (flag < 0x6f) {\n      if (flag != 99) {\n        if (flag < 100) {\n          if (flag == 0) goto LAB_08004f56;\n          if (flag != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param2 + 0x45) = 0x58;\n          string = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          value = *param2;\n          pointer = *param5;\n          *param5 = pointer + 1;\n          if (((value & 0x80) == 0) && ((int)(value << 0x19) < 0)) {\n            result = (uint)*(ushort *)pointer;\n          }\n          else {\n            result = *pointer;\n          }\n          if ((int)(value << 0x1f) < 0) {\n            *param2 = value | 0x20;\n          }\n          if (result == 0) {\n            *param2 = *param2 & 0xffffffdf;\n          }\n          value = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param2 + 0x43) = 0;\n        }\n        else {\n          if ((flag != 100) && (flag != 0x69)) goto LAB_08004dcc;\n          result = *param2;\n          pointer = *param5;\n          if ((result & 0x80) == 0) {\n            *param5 = pointer + 1;\n            if ((result & 0x40) == 0) goto LAB_08004dec;\n            result = (uint)(short)*(ushort *)pointer;\n          }\n          else {\n            *param5 = pointer + 1;\nLAB_08004dec:\n            result = *pointer;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)param2 + 0x43) = 0x2d;\n          }\n          string = \"0123456789ABCDEF\";\n          value = 10;\n        }\n        var10 = param2[1];\n        param2[2] = var10;\n        pointer4 = pointer5;\n        if ((int)var10 < 0) {\n          if (result != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)param2 + 0x42) = *string;\n          pointer4 = (char *)((int)param2 + 0x42);\n        }\n        else {\n          *param2 = *param2 & 0xfffffffb;\n          if (result == 0) {\n            if (var10 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              var10 = result / value;\n              pointer4 = pointer4 + -1;\n              *pointer4 = string[result - value * var10];\n              result = var10;\n            } while (var10 != 0);\n          }\n        }\n        if (((value == 8) && ((int)(*param2 << 0x1f) < 0)) && ((int)param2[1] <= (int)param2[4]))\n        {\n          pointer4[-1] = '0';\n          pointer4 = pointer4 + -1;\n        }\n        param2[4] = (int)pointer5 - (int)pointer4;\n        pointer5 = pointer4;\n        goto LAB_08004ec2;\n      }\n      pointer = *param5;\n      *param5 = pointer + 1;\n      *(char *)((int)param2 + 0x42) = (char)*pointer;\nLAB_08004e2c:\n      pointer5 = (char *)((int)param2 + 0x42);\n      result = 1;\n    }\n    else {\n      if (flag != 0x73) {\n        if (flag < 0x74) {\n          if (flag == 0x6f) {\nLAB_08004e52:\n            result = *param2;\n            pointer = *param5;\n            if ((result & 0x80) == 0) {\n              *param5 = pointer + 1;\n              if ((result & 0x40) == 0) goto LAB_08004e60;\n              result = (uint)*(ushort *)pointer;\n            }\n            else {\n              *param5 = pointer + 1;\nLAB_08004e60:\n              result = *pointer;\n            }\n            string = \"0123456789ABCDEF\";\n            if (flag == 0x6f) {\n              value = 8;\n            }\n            else {\n              value = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (flag == 0x70) {\n            *param2 = *param2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param2 + 0x45) = 0x78;\n            string = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (flag == 0x75) goto LAB_08004e52;\n          if (flag == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param2 + 0x42) = flag;\n        goto LAB_08004e2c;\n      }\n      pointer3 = (char **)*param5;\n      *param5 = (uint *)(pointer3 + 1);\n      pointer5 = *pointer3;\n      index = find_first_occurrence_08000230(pointer5,0,param2[1]);\n      if (index != 0) {\n        param2[1] = index - (int)pointer5;\n      }\n      result = param2[1];\n    }\n    param2[4] = result;\n    *(undefined *)((int)param2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  result = *param2;\n  pointer2 = (uint **)*param5;\n  value = param2[5];\n  if ((result & 0x80) == 0) {\n    *param5 = (uint *)(pointer2 + 1);\n    pointer = *pointer2;\n    if ((result & 0x40) == 0) goto LAB_08004f42;\n    *(short *)pointer = (short)value;\n  }\n  else {\n    *param5 = (uint *)(pointer2 + 1);\n    pointer = *pointer2;\nLAB_08004f42:\n    *pointer = value;\n  }\nLAB_08004f56:\n  param2[4] = 0;\nLAB_08004ec2:\n  index = process_data_08004cb0(param1,param2,localArray,param3,param4);\n  if ((index == -1) || (index = (*param4)(param1,param3,pointer5,param2[4]), index == -1)) {\nLAB_08004ed6:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*param2 << 0x1e) < 0) {\n      for (index = 0; index < (int)(param2[3] - localArray[0]); index = index + 1) {\n        count = (*param4)(param1,param3,(int)param2 + 0x19,1);\n        if (count == -1) goto LAB_08004ed6;\n      }\n    }\n    result = param2[3];\n    if ((int)param2[3] < (int)localArray[0]) {\n      result = localArray[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "process_and_convert_data_08004d9c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "bVar1": "flag",
                "iVar2": "index",
                "puVar3": "pointer",
                "iVar4": "count",
                "pcVar5": "string",
                "uVar6": "value",
                "ppuVar7": "pointer2",
                "ppcVar8": "pointer3",
                "uVar9": "result",
                "uVar10": "var10",
                "pcVar11": "pointer4",
                "pcVar12": "pointer5",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "initialize_and_process_data_08004fdc",
            "code": "\nvoid initialize_and_process_data_08004fdc(undefined4 input_param,undefined4 param_2_value,undefined4 param_3_value,undefined4 param_4_value)\n\n{\n  int data_ptr;\n  undefined4 result;\n  undefined4 stack_c;\n  undefined4 stack_8;\n  undefined4 stack_4;\n  \n  data_ptr = DAT_200000a0;\n  result = input_param;\n  stack_c = param_2_value;\n  stack_8 = param_3_value;\n  stack_4 = param_4_value;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_and_params_080053a0(DAT_200000a0);\n  }\n  parse_and_process_data_08004a84(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&stack_c,result,&stack_c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "initialize_and_process_data_08004fdc",
                "param_1": "input_param",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uStack_c": "stack_c",
                "uStack_8": "stack_8",
                "uStack_4": "stack_4"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "initialize_memory_0800500c",
            "code": "\nvoid initializeMemory_0800500c(int *outputPointer,undefined4 size)\n\n{\n  int iVar1;\n  \n  DAT_20000674 = 0;\n  iVar1 = allocateMemory(size);\n  if ((iVar1 == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "initialize_memory_0800500c",
                "param_1": "outputPointer",
                "param_2": "size",
                "allocate_memory_08004094": "allocateMemory"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "update_data_080050d0",
            "code": "\nuint updateData_080050d0(undefined4 *output,undefined4 *input)\n\n{\n  int dataAddress;\n  uint result;\n  ushort inputValue;\n  \n  dataAddress = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_and_params_080053a0(DAT_200000a0);\n  }\n  if (input == &DAT_08005fc0) {\n    input = *(undefined4 **)(dataAddress + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08005fe0) {\n    input = *(undefined4 **)(dataAddress + 8);\n  }\n  else if (input == (undefined4 *)&DAT_08005fa0) {\n    input = *(undefined4 **)(dataAddress + 0xc);\n  }\n  inputValue = *(ushort *)(input + 3);\n  result = (uint)inputValue;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          updateLinkedList(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocateAndUpdateMemory(output,input);\n  }\n  inputValue = *(ushort *)(input + 3);\n  result = inputValue & 1;\n  if ((inputValue & 1) == 0) {\n    if (-1 < (int)((uint)inputValue << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    inputValue = *(ushort *)(input + 3);\n    result = (int)(short)inputValue & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input + 3) = inputValue | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "update_data_080050d0",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "dataAddress",
                "uVar2": "result",
                "uVar3": "inputValue",
                "update_linked_list_080048dc": "updateLinkedList",
                "allocate_and_update_memory_080054fc": "allocateAndUpdateMemory"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_update_memory_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "execute_resource_080051ac",
            "code": "\nvoid executeResource_080051ac(void)\n\n{\n  uint *resultPtr;\n  int tempVar1;\n  int *resourceData;\n  int *resourceData2;\n  uint uVar5;\n  ushort flags;\n  int tempVar2;\n  code *pcVar8;\n  int tempVar3;\n  uint tempVar4;\n  code *jumpTableFunc;\n  bool isZero;\n  undefined8 loopResult;\n  \n  initialize_resource_080055d0(6);\n  jumpTableFunc = (code *)0x80051bb;\n  loopResult = infinite_loop_080040f8(1);\n  resourceData = (int *)((ulonglong)loopResult >> 0x20);\n  resultPtr = (uint *)loopResult;\n  flags = *(ushort *)(resourceData + 3);\n  uVar5 = (uint)flags;\n  if ((int)(uVar5 << 0x1c) < 0) {\n    tempVar1 = resourceData[4];\n    if (tempVar1 != 0) {\n      tempVar2 = uVar5 << 0x1e;\n      isZero = tempVar2 == 0;\n      tempVar3 = *resourceData;\n      if (isZero) {\n        tempVar2 = resourceData[5];\n      }\n      *resourceData = tempVar1;\n      if (!isZero) {\n        tempVar2 = 0;\n      }\n      resourceData[2] = tempVar2;\n      for (tempVar3 = tempVar3 - tempVar1; 0 < tempVar3; tempVar3 = tempVar3 - tempVar2) {\n        tempVar2 = (*(code *)resourceData[10])(resultPtr,resourceData[8],tempVar1,tempVar3);\n        if (tempVar2 < 1) {\n          flags = *(ushort *)(resourceData + 3);\n          goto LAB_080052b2;\n        }\n        tempVar1 = tempVar1 + tempVar2;\n      }\n    }\n  }\n  else if (((0 < resourceData[1]) || (0 < resourceData[0x10])) &&\n          (pcVar8 = (code *)resourceData[0xb], pcVar8 != (code *)0x0)) {\n    tempVar4 = *resultPtr;\n    *resultPtr = 0;\n    if ((flags & 0x1000) == 0) {\n      tempVar1 = (*pcVar8)(resultPtr,resourceData[8],uVar5 & 0x1000,1);\n      if ((tempVar1 == -1) && (uVar5 = *resultPtr, uVar5 != 0)) {\n        if ((uVar5 != 0x1d) && (uVar5 != 0x16)) {\n          *(ushort *)(resourceData + 3) = *(ushort *)(resourceData + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTableFunc)();\n          return;\n        }\n        *resultPtr = tempVar4;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      tempVar1 = resourceData[0x15];\n    }\n    if (((int)((uint)*(ushort *)(resourceData + 3) << 0x1d) < 0) &&\n       (tempVar1 = tempVar1 - resourceData[1], resourceData[0xd] != 0)) {\n      tempVar1 = tempVar1 - resourceData[0x10];\n    }\n    tempVar1 = (*(code *)resourceData[0xb])(resultPtr,resourceData[8],tempVar1,0);\n    flags = *(ushort *)(resourceData + 3);\n    if ((tempVar1 == -1) &&\n       ((0x1d < *resultPtr || (-1 < (int)((0x20400001U >> (*resultPtr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(resourceData + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)(0xffffffff);\n      return;\n    }\n    resourceData[1] = 0;\n    *resourceData = resourceData[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((tempVar1 != -1 || (*resultPtr == 0)))) {\n      resourceData[0x15] = tempVar1;\n    }\n    resourceData2 = (int *)resourceData[0xd];\n    *resultPtr = tempVar4;\n    if (resourceData2 != (int *)0x0) {\n      if (resourceData2 != resourceData + 0x11) {\n        update_linked_list_080048dc(resultPtr);\n      }\n      resourceData[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunc)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "execute_resource_080051ac",
                "uVar12": "loopResult",
                "puVar1": "resultPtr",
                "piVar3": "resourceData",
                "piVar4": "resourceData2",
                "uVar6": "flags",
                "iVar2": "tempVar1",
                "iVar7": "tempVar2",
                "iVar9": "tempVar3",
                "bVar11": "isZero",
                "uVar10": "tempVar4",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunc"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *dataArray,int *controlArray)\n\n{\n  undefined4 returnValue;\n  int startIndex;\n  int *tempArray;\n  uint tempValue;\n  ushort flag;\n  int loopIndex;\n  undefined4 unaffected_r4;\n  undefined4 unaffected_r5;\n  code *functionPointer;\n  int endIndex;\n  uint tempValue2;\n  code *jumpTable;\n  bool isZero;\n  \n  if (controlArray[4] != 0) {\n    if ((dataArray != (uint *)0x0) && (dataArray[6] == 0)) {\n      initialize_memory_and_params_080053a0();\n    }\n    if (controlArray == &DAT_08005fc0) {\n      controlArray = (int *)dataArray[1];\n    }\n    else if (controlArray == (int *)&DAT_08005fe0) {\n      controlArray = (int *)dataArray[2];\n    }\n    else if (controlArray == (int *)&DAT_08005fa0) {\n      controlArray = (int *)dataArray[3];\n    }\n    if (*(short *)(controlArray + 3) != 0) {\n      flag = *(ushort *)(controlArray + 3);\n      tempValue = (uint)flag;\n      if ((int)(tempValue << 0x1c) < 0) {\n        startIndex = controlArray[4];\n        if (startIndex != 0) {\n          loopIndex = tempValue << 0x1e;\n          isZero = loopIndex == 0;\n          endIndex = *controlArray;\n          if (isZero) {\n            loopIndex = controlArray[5];\n          }\n          *controlArray = startIndex;\n          if (!isZero) {\n            loopIndex = 0;\n          }\n          controlArray[2] = loopIndex;\n          for (endIndex = endIndex - startIndex; 0 < endIndex; endIndex = endIndex - loopIndex) {\n            loopIndex = (*(code *)controlArray[10])(dataArray,controlArray[8],startIndex,endIndex,unaffected_r4,unaffected_r5);\n            if (loopIndex < 1) {\n              flag = *(ushort *)(controlArray + 3);\n              goto LAB_080052b2;\n            }\n            startIndex = startIndex + loopIndex;\n          }\n        }\n      }\n      else if (((0 < controlArray[1]) || (0 < controlArray[0x10])) &&\n              (functionPointer = (code *)controlArray[0xb], functionPointer != (code *)0x0)) {\n        tempValue2 = *dataArray;\n        *dataArray = 0;\n        if ((flag & 0x1000) == 0) {\n          startIndex = (*functionPointer)(dataArray,controlArray[8],tempValue & 0x1000,1);\n          if ((startIndex == -1) && (tempValue = *dataArray, tempValue != 0)) {\n            if ((tempValue != 0x1d) && (tempValue != 0x16)) {\n              *(ushort *)(controlArray + 3) = *(ushort *)(controlArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataArray = tempValue2;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          startIndex = controlArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(controlArray + 3) << 0x1d) < 0) &&\n           (startIndex = startIndex - controlArray[1], controlArray[0xd] != 0)) {\n          startIndex = startIndex - controlArray[0x10];\n        }\n        startIndex = (*(code *)controlArray[0xb])(dataArray,controlArray[8],startIndex,0);\n        flag = *(ushort *)(controlArray + 3);\n        if ((startIndex == -1) &&\n           ((0x1d < *dataArray || (-1 < (int)((0x20400001U >> (*dataArray & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(controlArray + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        controlArray[1] = 0;\n        *controlArray = controlArray[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((startIndex != -1 || (*dataArray == 0)))) {\n          controlArray[0x15] = startIndex;\n        }\n        tempArray = (int *)controlArray[0xd];\n        *dataArray = tempValue2;\n        if (tempArray != (int *)0x0) {\n          if (tempArray != controlArray + 0x11) {\n            update_linked_list_080048dc(dataArray);\n          }\n          controlArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "dataArray",
                "param_2": "controlArray",
                "uVar1": "returnValue",
                "iVar2": "startIndex",
                "piVar3": "tempArray",
                "uVar4": "tempValue",
                "uVar5": "flag",
                "iVar6": "loopIndex",
                "unaff_r4": "unaffected_r4",
                "unaff_r5": "unaffected_r5",
                "pcVar7": "functionPointer",
                "iVar8": "endIndex",
                "uVar9": "tempValue2",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar10": "isZero"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_params_0800532c",
            "code": "\nvoid initializeParams_0800532c(undefined4 *paramsArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramsArray = 0;\n  paramsArray[1] = 0;\n  paramsArray[2] = 0;\n  *(undefined2 *)(paramsArray + 3) = value1;\n  paramsArray[0x19] = 0;\n  *(undefined2 *)((int)paramsArray + 0xe) = value2;\n  paramsArray[4] = 0;\n  paramsArray[5] = 0;\n  paramsArray[6] = 0;\n  fillArrayWithByte(paramsArray + 0x17,0,8);\n  paramsArray[9] = 0x8005609;\n  paramsArray[10] = 0x800562b;\n  paramsArray[0xb] = 0x8005663;\n  paramsArray[8] = paramsArray;\n  paramsArray[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_params_0800532c",
                "param_1": "paramsArray",
                "param_2": "value1",
                "param_3": "value2",
                "fill_with_byte_080048cc": "fillArrayWithByte",
                "LAB_08005686_1": "label"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_memory_08005374",
            "code": "\nundefined4 * initializeMemory_08005374(undefined4 inputValue,int count)\n\n{\n  undefined4 *resultPointer;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  resultPointer = (undefined4 *)allocate_and_initialize_memory_08004978(inputValue,offset + 0x74);\n  if (resultPointer != (undefined4 *)0x0) {\n    *resultPointer = 0;\n    resultPointer[1] = count;\n    resultPointer[2] = resultPointer + 3;\n    fill_with_byte_080048cc(resultPointer + 3,0,offset + 0x68);\n  }\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_memory_08005374",
                "param_1": "inputValue",
                "param_2": "count",
                "puVar1": "resultPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_memory_and_params_080053a0",
            "code": "\nvoid initializeMemoryAndParams_080053a0(undefined4 *paramArray)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointerVar;\n  \n  if (paramArray[6] == 0) {\n    paramArray[0x12] = 0;\n    paramArray[0x13] = 0;\n    paramArray[0x14] = 0;\n    pointerVar = &DAT_200000a4;\n    paramArray[10] = &functionLabel;\n    if (paramArray == &DAT_200000a4) {\n      pointerVar = (undefined4 *)0x1;\n    }\n    if (paramArray == &DAT_200000a4) {\n      paramArray[6] = pointerVar;\n    }\n    returnValue = initialize_memory_08005400();\n    paramArray[1] = returnValue;\n    returnValue = initialize_memory_08005400(paramArray);\n    paramArray[2] = returnValue;\n    returnValue = initialize_memory_08005400(paramArray);\n    paramArray[3] = returnValue;\n    initialize_params_0800532c(paramArray[1],4,0);\n    initialize_params_0800532c(paramArray[2],9,1);\n    initialize_params_0800532c(paramArray[3],0x12,2);\n    paramArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_memory_and_params_080053a0",
                "param_1": "paramArray",
                "uVar1": "returnValue",
                "puVar2": "pointerVar",
                "LAB_08005320_1": "functionLabel"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_memory_08005400",
            "code": "\nint * initialize_memory_08005400(undefined4 *memory_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_ptr;\n  int *next_ptr;\n  int **memory_list;\n  \n  if (DAT_200000bc == 0) {\n    initialize_memory_and_params_080053a0(&DAT_200000a4);\n  }\n  memory_list = (int **)&DAT_200000ec;\n  do {\n    next_ptr = memory_list[2];\n    current_ptr = memory_list[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short *)(next_ptr + 3) == 0) {\n        *(undefined2 *)((int)next_ptr + 0xe) = 0xffff;\n        *(undefined2 *)(next_ptr + 3) = 1;\n        next_ptr[0x19] = 0;\n        *next_ptr = 0;\n        next_ptr[2] = 0;\n        next_ptr[1] = 0;\n        next_ptr[4] = 0;\n        next_ptr[5] = 0;\n        next_ptr[6] = 0;\n        fill_memory_with_byte(next_ptr + 0x17,0,8,1,param_4);\n        next_ptr[0xd] = 0;\n        next_ptr[0xe] = 0;\n        next_ptr[0x12] = 0;\n        next_ptr[0x13] = 0;\n        return next_ptr;\n      }\n      next_ptr = next_ptr + 0x1a;\n    }\n    if (*memory_list == (int *)0x0) {\n      current_ptr = (int *)allocate_memory(memory_ptr,4);\n      *memory_list = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *memory_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    memory_list = (int **)*memory_list;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_memory_08005400",
                "param_1": "memory_ptr",
                "piVar1": "current_ptr",
                "piVar2": "next_ptr",
                "ppiVar3": "memory_list",
                "initialize_memory_08005374": "allocate_memory",
                "fill_with_byte_080048cc": "fill_memory_with_byte"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_with_byte_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)initialize_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "update_memory_layout_080054b4",
            "code": "\nundefined4 updateMemoryLayout_080054b4(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int result;\n  undefined4 flag;\n  undefined stackBuffer [4];\n  uint localVariable;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = initialize_memory_layout_080056d4(param1,(int)*(short *)(param2 + 0xe),stackBuffer), result < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      flag = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *param4 = (uint)((localVariable & 0xf000) == 0x2000);\n  }\n  flag = 0x400;\nLAB_080054f4:\n  *param3 = flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "update_memory_layout_080054b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "flag",
                "auStack_4c": "stackBuffer",
                "local_48": "localVariable"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "allocate_and_update_memory_080054fc",
            "code": "\nvoid allocateAndUpdateMemory_080054fc(int memoryManager,int *memoryBlock)\n\n{\n  ushort updatedValue;\n  int allocationResult;\n  int localMemory1;\n  int *localMemory2;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryBlock + 3) << 0x1e)) {\n    localMemory1 = memoryManager;\n    localMemory2 = memoryBlock;\n    updatedValue = update_memory_layout_080054b4(memoryManager,memoryBlock,&localMemory1,&localMemory2);\n    allocationResult = allocate_and_initialize_memory_08004978(memoryManager,localMemory1);\n    if (allocationResult != 0) {\n      *(undefined **)(memoryManager + 0x28) = &LAB_08005320_1;\n      *memoryBlock = allocationResult;\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x80;\n      memoryBlock[5] = localMemory1;\n      memoryBlock[4] = allocationResult;\n      if ((localMemory2 != (int *)0x0) &&\n         (allocationResult = update_param_if_valid_080056f8(memoryManager,(int)*(short *)((int)memoryBlock + 0xe)), allocationResult != 0)) {\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryBlock + 3) = updatedValue | *(ushort *)(memoryBlock + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryBlock + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 2;\n  }\n  *memoryBlock = (int)memoryBlock + 0x47;\n  memoryBlock[4] = (int)memoryBlock + 0x47;\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "allocate_and_update_memory_080054fc",
                "param_1": "memoryManager",
                "param_2": "memoryBlock",
                "uVar1": "updatedValue",
                "iVar2": "allocationResult",
                "local_18": "localMemory1",
                "local_14": "localMemory2"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "initialize_resource_080055d0",
            "code": "\nint initialize_resource_080055d0(uint resource_index)\n\n{\n  int *ptr_resource;\n  undefined4 result;\n  int resource_handler;\n  code *function_ptr;\n  undefined4 unaff_adj_r4;\n  undefined4 unaff_adj_r5;\n  undefined4 in_link_register;\n  undefined4 *ptr_resource;\n  \n  ptr_resource = DAT_200000a0;\n  ptr_resource = &DAT_200000a0;\n  if (0x1f < resource_index) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  resource_handler = DAT_200000a0[0x11];\n  if ((resource_handler != 0) && (function_ptr = *(code **)(resource_handler + resource_index * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(resource_handler + resource_index * 4) = 0;\n      (*function_ptr)(resource_index);\n    }\n    return 0;\n  }\n  result = thunk_initialize_application_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  resource_handler = initialize_variable_080040fc(result,resource_index,resource_index,0,ptr_resource,unaff_adj_r4,unaff_adj_r5,in_link_register);\n  if ((resource_handler == -1) && (DAT_20000674 != 0)) {\n    *ptr_resource = DAT_20000674;\n  }\n  return resource_handler;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "initialize_resource_080055d0",
                "param_1": "resource_index",
                "piVar1": "ptr_resource",
                "uVar2": "result",
                "iVar3": "resource_handler",
                "pcVar4": "function_ptr",
                "unaff_r4": "unaff_adj_r4",
                "unaff_r5": "unaff_adj_r5",
                "in_lr": "in_link_register",
                "puVar5": "ptr_resource"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "initialize_program_thunk_0800410c",
            "code": "\nstatus initialize_program_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "initialize_program_thunk_0800410c",
                "undefined4": "status"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_connection_08005608",
            "code": "\nvoid updateConnection_08005608(undefined4 connectionParam1,int connectionParam2)\n\n{\n  int connectionResult;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  connectionResult = initialize_connection_0800573c(connectionParam1,(int)*(short *)(connectionParam2 + 0xe));\n  isSuccessful = -1 < connectionResult;\n  if (isSuccessful) {\n    updatedValue = *(int *)(connectionParam2 + 0x54) + connectionResult;\n  }\n  else {\n    updatedValue = *(ushort *)(connectionParam2 + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(connectionParam2 + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(connectionParam2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_connection_08005608",
                "param_1": "connectionParam1",
                "param_2": "connectionParam2",
                "iVar1": "connectionResult",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "initialize_and_check_error_0800562a",
            "code": "\nvoid initializeAndCheckError_0800562a(int *output,int data,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_check_error_08005718(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_and_validate_data_080040ec((int)*(short *)(data + 0xe),arg1,arg2,arg2,arg2,unused1,\n                       unused2,unused3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "initialize_and_check_error_0800562a",
                "param_1": "output",
                "param_2": "data",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "handle_error_and_initialize_08005662",
            "code": "\nvoid handleErrorAndInitialize_08005662(undefined4 errorCode,int data)\n\n{\n  int result;\n  ushort modifiedBits;\n  bool isError;\n  \n  result = initialize_and_check_error_08005718(errorCode,(int)*(short *)(data + 0xe));\n  isError = result == -1;\n  if (isError) {\n    modifiedBits = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    modifiedBits = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = modifiedBits;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = modifiedBits;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "handle_error_and_initialize_08005662",
                "param_1": "errorCode",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "modifiedBits",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "initialize_memory_layout_080056d4",
            "code": "\nvoid initializeMemoryLayout_080056d4(int *resultPtr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int error;\n  \n  DAT_20000674 = 0;\n  error = initializeMemoryLayout_080056d4Helper(arg1,arg2,arg2,0,arg3);\n  if ((error == -1) && (DAT_20000674 != 0)) {\n    *resultPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "initialize_memory_layout_080056d4",
                "param_1": "resultPtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "initialize_memory_layout_080040d6": "initializeMemoryLayoutHelper",
                "iVar1": "error"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "update_param_if_valid_080056f8",
            "code": "\nvoid updateParamIfValid_080056f8(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = is_always_true_080040e0(input);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "update_param_if_valid_080056f8",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_and_check_error_08005718",
            "code": "\nvoid initialize_and_check_error_08005718(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20000674 = 0;\n  init_result = initialize_program_080040e4(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_and_check_error_08005718",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_connection_0800573c",
            "code": "\nvoid initializeConnection_0800573c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initStatus;\n  \n  DAT_20000674 = 0;\n  initStatus = initialize_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((initStatus == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_connection_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initStatus"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "execute_resource_08005760",
            "code": "\nvoid execute_resource_08005760(void)\n\n{\n  code *jump_table;\n  \n  jump_table = execute_resource_08005760;\n  execute_resource_08005760_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "execute_resource_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 118177,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}