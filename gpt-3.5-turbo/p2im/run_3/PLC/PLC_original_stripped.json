{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "readModbusData_080006b4",
                "this": "modbus",
                "u8txenpin": "transmitEnablePin",
                "u8BufferSize": "bufferSize",
                "u8serno": "serialNumber",
                "au8Buffer": "buffer",
                "u16InCnt": "inputCount",
                "u16errCnt": "errorCount"
            },
            "code": "int8_t __thiscall readModbusData_080006b4(Modbus *modbus) {\n  bool bufferOverflow = false;\n  int data = 0;\n  byte bufferIndex = 0;\n  if (modbus->transmitEnablePin > 1) {\n    digitalWrite((uint)modbus->transmitEnablePin, 0);\n  }\n  modbus->bufferSize = 0;\n  if (modbus->serialNumber < 4) {\n    while (data = (*(modbus->port->super_Stream).super_Print._vptr_Print[2])(), data != 0) {\n      bufferIndex = modbus->bufferSize;\n      data = (*(modbus->port->super_Stream).super_Print._vptr_Print[3])();\n      modbus->buffer[bufferIndex] = (uint8_t)data;\n      bufferIndex++;\n      modbus->bufferSize = bufferIndex;\n      if (bufferIndex > 63) {\n        bufferOverflow = true;\n      }\n    }\n  }\n  modbus->inputCount++;\n  if (bufferOverflow) {\n    modbus->errorCount++;\n    return -3;\n  }\n  return modbus->bufferSize;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readModbusData_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_peripheral_for_pin_080034da",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "void* find_peripheral_for_pin_080034da(PinName_conflict pin, PinMap_conflict* pin_map) {\n    while (true) {\n        if (pin_map->pin == NC) {\n            return (void*)0x0;\n        }\n        if (pin_map->pin == pin) {\n            break;\n        }\n        pin_map++;\n    }\n    return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_for_pin_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "clear_timer_interrupt_flags_080035fc",
                "htim": "timer",
                "DAT_08003718": "TIM2",
                "DAT_0800371c": "TIM3",
                "DAT_08003720": "TIM4",
                "DAT_08003724": "TIM5",
                "DAT_08003728": "TIM6",
                "DAT_0800372c": "TIM7",
                "DAT_08003730": "TIM12",
                "DAT_08003734": "TIM13",
                "DAT_08003738": "TIM14",
                "uint": "uint32_t",
                "*(uint *)": "*",
                "DAT_0800374c": "timer_control_reg",
                "->Instance": "->Instance"
            },
            "code": "void clear_timer_interrupt_flags_080035fc(TIM_HandleTypeDef *timer)\n{\n    uint32_t *DAT_0800374c = (uint32_t *)0x0800374c;\n    if (timer->Instance == DAT_08003718) {\n        *DAT_0800374c &= 0xfffffffe;\n    }\n    if (timer->Instance == DAT_0800371c) {\n        *DAT_0800374c &= 0xfffffffd;\n    }\n    if (timer->Instance == DAT_08003720) {\n        *DAT_0800374c &= 0xfffffffb;\n    }\n    if (timer->Instance == DAT_08003724) {\n        *DAT_0800374c &= 0xfffffff7;\n    }\n    if (timer->Instance == DAT_08003728) {\n        *DAT_0800374c &= 0xffffffef;\n    }\n    if (timer->Instance == DAT_0800372c) {\n        *DAT_0800374c &= 0xffffffdf;\n    }\n    if (timer->Instance == DAT_08003730) {\n        *DAT_0800374c &= 0xffffffbf;\n    }\n    if (timer->Instance == DAT_08003734) {\n        *DAT_0800374c &= 0xffffff7f;\n    }\n    if (timer->Instance == DAT_08003738) {\n        *DAT_0800374c &= 0xfffffeff;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "clear_timer_interrupt_flags_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_uart_transmitting_08003dd0",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_08003df0": "PTR_uart_handlers_08003df0",
                "uint": "uint",
                "return": "return",
                "HAL_UART_StateTypeDef": "HAL_UART_StateTypeDef",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "index": "index"
            },
            "code": "bool is_uart_transmitting_08003dd0(serial_t *serial) {\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef**)(PTR_uart_handlers_08003df0 + (uint)serial->index * 4);\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n  return (uart_state & (HAL_UART_STATE_BUSY_TX | HAL_UART_STATE_BUSY_TX_RX)) == (HAL_UART_STATE_BUSY_TX | HAL_UART_STATE_BUSY_TX_RX);\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_uart_transmitting_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "configure_clocks_08000c8c",
                "DAT_08000d30": "RCC_BASE",
                "DAT_08000d34": "FLASH_BASE",
                "DAT_08000d38": "AHB_PRESCALER"
            },
            "code": "void configure_clocks_08000c8c(void)\n{\n  uint32_t hclk_freq, systick_clk;\n  uint32_t ahb_clk_div = 0, apb1_clk_div = 0x1400, apb2_clk_div = 0x1000;\n  uint32_t flash_latency;\n  RCC_OscInitTypeDef RCC_OscInitStruct;\n  RCC_ClkInitTypeDef RCC_ClkInitStruct;\n\n  // Enable HSE oscillator and activate PLL with HSE as source\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  RCC_OscInitStruct.HSEState = RCC_HSE_ON;\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  RCC_OscInitStruct.PLL.PLLM = 8;\n  RCC_OscInitStruct.PLL.PLLN = 336;\n  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;\n  RCC_OscInitStruct.PLL.PLLQ = 7;\n  HAL_RCC_OscConfig(&RCC_OscInitStruct);\n\n  // Activate the OverDrive to reach the 168 MHz frequency\n  HAL_PWREx_EnableOverDrive();\n\n  // Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  RCC_ClkInitStruct.AHBCLKDivider = ahb_clk_div;\n  RCC_ClkInitStruct.APB1CLKDivider = apb1_clk_div;\n  RCC_ClkInitStruct.APB2CLKDivider = apb2_clk_div;\n  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);\n\n  // Configure the SysTick timer to generate interrupts at a frequency of 1ms\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  systick_clk = (uint32_t)(hclk_freq / 1000);\n  HAL_SYSTICK_Config(systick_clk);\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive",
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "configure_clocks_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "modbus_read_registers_08000a4e",
                "*this": "modbus_context",
                "regs": "register_values",
                "u8size": "num_registers",
                "uVar1": "register_address",
                "uVar2": "register_value"
            },
            "code": "int8_t __thiscall modbus_read_registers_08000a4e(Modbus *modbus_context, uint16_t *register_values, uint8_t num_registers) {\n    uint16_t register_address = makeWord(modbus_context->au8Buffer[2], modbus_context->au8Buffer[3]);\n    uint16_t register_value = makeWord(modbus_context->au8Buffer[4], modbus_context->au8Buffer[5]);\n    register_values[(byte)register_address] = register_value;\n    modbus_context->u8BufferSize = '\\x06';\n    sendTxBuffer(modbus_context);\n    return '\b';\n}\n",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "modbus_read_registers_08000a4e"
        },
        "FUN_08004774": {
            "renaming": {
                "FUN_08004774": "handle_GPIO_interrupt_08004774",
                "PTR_": "",
                "DAT_": "",
                "gpio_interrupt_pin": "4"
            },
            "code": "void handle_GPIO_interrupt_08004774(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(gpio_interrupt_pin);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004774",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08004774"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "runProgram_08004658",
                "initVariant": "initializeVariant",
                "setup": "setupProgram",
                "loop": "runLoop",
                "serialEventRun": "runSerialEvent"
            },
            "code": "int runProgram_08004658(void)\n{\n  initializeVariant();\n  setupProgram();\n  do {\n    do {\n      runLoop();\n    } while (DAT_08004674 == 0);\n    runSerialEvent();\n  } while( true );\n}",
            "called": [
                "loop",
                "initVariant",
                "setup",
                "serialEventRun"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runProgram_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_peripheral_080034f4",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral",
                "NC": "NotConnected"
            },
            "code": "void * find_peripheral_080034f4(PinName_conflict pin, PinMap_conflict *map) {\n  void *peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral_080034f4(pin, map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "uart_debug_init",
                "uart_init",
                "dac_stop",
                "uart_debug_write",
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "find_peripheral_080034f4"
        },
        "FUN_0800476a": {
            "renaming": {
                "FUN_0800476a": "handle_GPIO_ext_interrupt_0800476a"
            },
            "code": "void handle_GPIO_ext_interrupt_0800476a(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800476a",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_ext_interrupt_0800476a"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "is_pin_valid_0800355e",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool is_pin_valid_0800355e(PinName_conflict pin, PinMap_conflict *map) {\\n\"\n                        \"    if (pin == NC) {\\n\"\n                        \"        return false;\\n\"\n                        \"    }\\n\"\n                        \"    while (true) {\\n\"\n                        \"        if (map->pin == NC) {\\n\"\n                        \"            return false;\\n\"\n                        \"        }\\n\"\n                        \"        if (pin == map->pin) {\\n\"\n                        \"            break;\\n\"\n                        \"        }\\n\"\n                        \"        map++;\\n\"\n                        \"    }\\n\"\n                        \"    return true;\\n\"\n                        \"}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_valid_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "read_file_0800573c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_0800573c(int* error_code, int file_descriptor, char* buffer, int buffer_size) {\n  int read_result;\n  int* errno_ptr = PTR_errno_0800575c;\n  *(int*)errno_ptr = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*(int*)errno_ptr != 0)) {\n    *error_code = *(int*)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "receive_data_08003e54",
                "obj": "serial_obj",
                "callback": "callback_function",
                "uVar2": "rx_active",
                "bVar1": "index",
                "PTR_rx_callback_08003ea0": "callback_ptr",
                "PTR_rx_callback_obj_08003ea4": "serial_obj_ptr",
                "PTR_uart_handlers_08003ea8": "uart_handler_ptr",
                "HAL_NVIC_SetPriority": "set_priority",
                "HAL_NVIC_EnableIRQ": "enable_irq",
                "HAL_UART_Receive_IT": "receive_data_it"
            },
            "code": "void receive_data_08003e54(serial_t *serial_obj, _func_void_serial_t_ptr *callback_function) {\n  if (serial_obj != NULL) {\n    uint8_t rx_active = serial_rx_active(serial_obj);\n    if (rx_active == 0) {\n      byte index = serial_obj->index;\n      _func_void_serial_t_ptr **PTR_rx_callback_08003ea0 = (_func_void_serial_t_ptr **) (PTR_rx_callback_08003ea0 + index * 4);\n      *PTR_rx_callback_08003ea0 = callback_function;\n      serial_t **PTR_rx_callback_obj_08003ea4 = (serial_t **) (PTR_rx_callback_obj_08003ea4 + index * 4);\n      *PTR_rx_callback_obj_08003ea4 = serial_obj;\n      HAL_NVIC_SetPriority(serial_obj->irq, 0, 1);\n      HAL_NVIC_EnableIRQ(serial_obj->irq);\n      UART_HandleTypeDef **PTR_uart_handlers_08003ea8 = (UART_HandleTypeDef **) (PTR_uart_handlers_08003ea8 + index * 4);\n      HAL_UART_Receive_IT(*PTR_uart_handlers_08003ea8, &serial_obj->recv, 1);\n    }\n  }\n}\n",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_EnableIRQ",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "receive_data_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "formatString_08004fdc",
                "__format": "format",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "iVar1": "impurePtr",
                "pcVar2": "formatPtr",
                "uStack_c": "stack1",
                "uStack_8": "stack2",
                "uStack_4": "stack3"
            },
            "code": "int formatString_08004fdc(char* format, ...) {\n  int impurePtr = *(int*)PTR__impure_ptr_08005008;\n  char* formatPtr = format;\n  undefined4 arg1 = in_r1;\n  undefined4 arg2 = in_r2;\n  undefined4 arg3 = in_r3;\n  undefined4 stack1 = arg1;\n  if (impurePtr != 0 && *(int*)(impurePtr + 0x18) == 0) {\n    __sinit(impurePtr);\n  }\n  int result = _vfformatString_08004fdc_r(impurePtr, *(undefined4*)(impurePtr + 8), format, &stack1, formatPtr, &stack1);\n  return result;\n}",
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "formatString_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "get_file_status_080056d4",
                "param_1": "status",
                "param_2": "file_descriptor",
                "param_3": "file_info",
                "puVar1": "errno_ptr",
                "iVar2": "fstat_result"
            },
            "code": "void get_file_status_080056d4(int *status, int file_descriptor, struct stat *file_info)\n{\n  int fstat_result;\n  int *errno_ptr;\n  errno_ptr = PTR_errno_080056f4;\n  *(int *)PTR_errno_080056f4 = 0;\n  fstat_result = _fstat(file_descriptor, file_info);\n  if ((fstat_result == -1) && (*(int *)errno_ptr != 0)) {\n    *status = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_080056d4"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "stop_and_reset_dac_channel_080033d8",
                "PinName_conflict": "pin",
                "DAC_HandleTypeDef": "dac_handle",
                "Channel": "channel",
                "DacHandle": "dac_handle",
                "PTR_PinMap_DAC_08003408": "PTR_PinMap_DAC",
                "get_dac_channel": "get_dac_channel"
            },
            "code": "void stop_and_reset_dac_channel_080033d8(PinName_conflict pin)\n{\n  uint32_t channel;\n  DAC_HandleTypeDef dac_handle;\n  \n  dac_handle.Instance = (DAC_TypeDef*) pinmap_peripheral(pin, (PinMap_conflict*) PTR_PinMap_DAC_08003408_08003408);\n  if ((dac_handle.Instance != (DAC_TypeDef*) 0x0) && ((channel = get_dac_channel(pin), channel == 0 || (channel == 0x10))))\n  {\n    HAL_DAC_Stop(&dac_handle, channel);\n    HAL_DAC_DeInit(&dac_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_DAC_Stop",
                "HAL_DAC_DeInit",
                "get_dac_channel",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_and_reset_dac_channel_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(UART_HandleTypeDef *huart)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  uint32_t uVar6;\n  uint32_t uVar7;\n  uint32_t uVar8;\n  uint32_t uVar9;\n  uint32_t uVar10;\n  uint32_t uVar11;\n  USART_TypeDef *pUVar12;\n  \n  huart->Instance->CR2 = huart->Instance->CR2 & 0xffffcfff | (huart->Init).StopBits;\n  huart->Instance->CR1 =\n       huart->Instance->CR1 & 0xffff69f3 |\n       (huart->Init).WordLength | (huart->Init).Parity | (huart->Init).Mode |\n       (huart->Init).OverSampling;\n  huart->Instance->CR3 = huart->Instance->CR3 & 0xfffffcff | (huart->Init).HwFlowCtl;\n  if ((huart->Init).OverSampling == 0x8000) {\n    pUVar12 = huart->Instance;\n    if ((pUVar12 != (USART_TypeDef *)0x40011000) && (pUVar12 != (USART_TypeDef *)0x40011400)) {\n      uVar3 = HAL_RCC_GetPCLK1Freq();\n      uVar2 = DAT_08002d08;\n      uVar8 = (huart->Init).BaudRate;\n      uVar1 = (ulonglong)DAT_08002d08;\n      uVar4 = HAL_RCC_GetPCLK1Freq();\n      uVar9 = (huart->Init).BaudRate;\n      uVar5 = HAL_RCC_GetPCLK1Freq();\n      uVar10 = (huart->Init).BaudRate;\n      uVar6 = HAL_RCC_GetPCLK1Freq();\n      uVar11 = (huart->Init).BaudRate;\n      uVar7 = HAL_RCC_GetPCLK1Freq();\n      pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                   (ulonglong)\n                                   (((uVar6 * 0x19) / (uVar11 << 1) +\n                                    (uint)((ulonglong)uVar2 *\n                                           ((ulonglong)(uVar7 * 0x19) /\n                                           (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100\n                                    ) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                     ((uint)((ulonglong)uVar2 *\n                             (ulonglong)\n                             (((uVar4 * 0x19) / (uVar9 << 1) +\n                              (uint)((ulonglong)uVar2 *\n                                     ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25)\n                              * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                     (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                     0x10;\n      return;\n    }\n    uVar3 = HAL_RCC_GetPCLK2Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK2Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK2Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK2Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK2Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 1) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100)\n                                  * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 1) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25) *\n                            -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  pUVar12 = huart->Instance;\n  if ((pUVar12 != DAT_08002d04) && (pUVar12 != (USART_TypeDef *)&DAT_08002d04[0x24].CR2)) {\n    uVar3 = HAL_RCC_GetPCLK1Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK1Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK1Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK1Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK1Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 2) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100)\n                                  * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 2) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                            -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  uVar3 = HAL_RCC_GetPCLK2Freq();\n  uVar2 = DAT_08002d08;\n  uVar8 = (huart->Init).BaudRate;\n  uVar1 = (ulonglong)DAT_08002d08;\n  uVar4 = HAL_RCC_GetPCLK2Freq();\n  uVar9 = (huart->Init).BaudRate;\n  uVar5 = HAL_RCC_GetPCLK2Freq();\n  uVar10 = (huart->Init).BaudRate;\n  uVar6 = HAL_RCC_GetPCLK2Freq();\n  uVar11 = (huart->Init).BaudRate;\n  uVar7 = HAL_RCC_GetPCLK2Freq();\n  pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                               (ulonglong)\n                               (((uVar6 * 0x19) / (uVar11 << 2) +\n                                (uint)((ulonglong)uVar2 *\n                                       ((ulonglong)(uVar7 * 0x19) /\n                                       (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100) *\n                                0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                 ((uint)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uVar4 * 0x19) / (uVar9 << 2) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                          -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                 (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                 0x10;\n  return;\n}\n\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "configureClock_08002488",
                "RCC_ClkInitStruct_conflict": "RCC_Clock_Init_Struct",
                "RCC_ClkInitStruct": "clockInitStruct",
                "FLatency": "latency",
                "puVar1": "flashLatency",
                "uVar2": "sysClockFreq",
                "uVar3": "currentTick",
                "uVar4": "sysClockSource"
            },
            "code": "HAL_StatusTypeDef configureClock_08002488(RCC_ClkInitTypeDef_conflict *clockInitStruct, uint32_t latency)\n{\n  uint32_t *flashLatency = DAT_080025d0;\n  if (clockInitStruct == (RCC_ClkInitTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if (((*DAT_080025d0 & 0xf) < latency) &&\n     (*(char *)DAT_080025d0 = (char)latency, latency != (*flashLatency & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clockInitStruct->ClockType & 2) != 0) {\n    if ((clockInitStruct->ClockType & 4) != 0) {\n      DAT_080025d4[2] = DAT_080025d4[2] | 0x1c00;\n    }\n    if ((clockInitStruct->ClockType & 8) != 0) {\n      DAT_080025d4[2] = DAT_080025d4[2] | 0xe000;\n    }\n    DAT_080025d4[2] = DAT_080025d4[2] & 0xffffff0f | clockInitStruct->AHBCLKDivider;\n  }\n  if ((clockInitStruct->ClockType & 1) != 0) {\n    uint32_t sysClockSource = clockInitStruct->SYSCLKSource;\n    if (sysClockSource == 1) {\n      if ((*DAT_080025d4 & 0x20000) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if (sysClockSource - 2 < 2) {\n      if ((*DAT_080025d4 & 0x2000000) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((*DAT_080025d4 & 2) == 0) {\n      return HAL_ERROR;\n    }\n    DAT_080025d4[2] = sysClockSource | DAT_080025d4[2] & 0xfffffffc;\n    uint32_t startTick = HAL_GetTick();\n    while ((DAT_080025d4[2] & 0xc) != clockInitStruct->SYSCLKSource * 4) {\n      uint32_t currentTick = HAL_GetTick();\n      if (5000 < currentTick - startTick) {\n        return HAL_TIMEOUT;\n      }\n    }\n  }\n  flashLatency = DAT_080025d0;\n  if ((latency < (*DAT_080025d0 & 0xf)) &&\n     (*(char *)DAT_080025d0 = (char)latency, latency != (*flashLatency & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clockInitStruct->ClockType & 4) != 0) {\n    DAT_080025d4[2] = DAT_080025d4[2] & 0xffffe3ff | clockInitStruct->APB1CLKDivider;\n  }\n  if ((clockInitStruct->ClockType & 8) != 0) {\n    DAT_080025d4[2] = DAT_080025d4[2] & 0xffff1fff | clockInitStruct->APB2CLKDivider << 3;\n  }\n  uint32_t sysClockFreq = HAL_RCC_GetSysClockFreq();\n  *(uint32_t *)PTR_SystemCoreClock_080025dc = sysClockFreq >> PTR_AHBPrescTable_080025d8[(DAT_080025d4[2] << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClock_08002488"
        },
        "FUN_08004788": {
            "renaming": {
                "FUN_08004788": "handle_GPIO_interrupt_08004788",
                "0x10": "GPIO_PIN_4"
            },
            "code": "void handle_GPIO_interrupt_08004788(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004788",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08004788"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544::FUN_08004544": "IPAddress::IPAddress",
                "this": "this",
                "first_octet": "first_octet",
                "second_octet": "second_octet",
                "third_octet": "third_octet",
                "fourth_octet": "fourth_octet",
                "super_Printable": "Printable",
                "_vptr_Printable": "_vptr_Printable",
                "_address": "octets",
                "bytes[0]": "octets[0]",
                "bytes[1]": "octets[1]",
                "bytes[2]": "octets[2]",
                "bytes[3]": "octets[3]",
                "FUN_08004544": "print_08004544"
            },
            "code": "class Printable {\npublic:\n    virtual void print_08004544()=0;\n};\n\nclass IPAddress : public Printable {\nprivate:\n    uint8_t octets[4];\npublic:\n    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n        octets[0] = first_octet;\n        octets[1] = second_octet;\n        octets[2] = third_octet;\n        octets[3] = fourth_octet;\n    }\n\n    virtual void print_08004544() {\n        print_08004544f(\"%d.%d.%d.%d\", octets[0], octets[1], octets[2], octets[3]);\n    }\n};\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "print_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "initialize_uart_debug_08003cc8",
                "pin": "uart_tx_pin",
                "obj": "serial_debug",
                "PVar1": "uart_rx_pin",
                "pvVar2": "peripheral"
            },
            "code": "void initialize_uart_debug_08003cc8() {\n  PinName_conflict uart_tx_pin = *(PinName_conflict *)(PTR_digitalPin_08003d08 + 0x9a);\n  void *peripheral = pinmap_peripheral(uart_tx_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_08003d0c);\n  if (peripheral != (void *)0x0) {\n    PinName_conflict uart_rx_pin = pinmap_pin(peripheral, (PinMap_conflict *)PTR_PinMap_UART_RX_08003d10);\n    undefined *serial_debug = PTR_serial_debug_08003d14;\n    *(PinName_conflict *)(serial_debug + 0x5a) = uart_rx_pin;\n    *(PinName_conflict *)(serial_debug + 0x58) = uart_tx_pin;\n    *(unsigned int *)(serial_debug + 0x48) = 9600;\n    *(unsigned int *)(serial_debug + 0x54) = 0;\n    *(unsigned int *)(serial_debug + 0x4c) = 0;\n    *(unsigned int *)(serial_debug + 0x50) = 0;\n    uart_init((serial_t *)serial_debug);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "uart_init",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "configure_gpio_pins_08000fb4",
                "GPIO_TypeDef": "GPIO_TypeDef",
                "GPIO_InitTypeDef": "GPIO_InitTypeDef",
                "puVar1": "temp_ptr_1",
                "puVar2": "temp_ptr_2",
                "uVar3": "temp_var_1",
                "uVar4": "temp_var_2",
                "uVar5": "pin",
                "uVar6": "pin_mask",
                "uVar7": "mode",
                "uVar9": "moder_index",
                "iVar8": "port_index",
                "iVar10": "af_index",
                "tmpreg": "tmpreg",
                "DAT_0800118c": "DAT_0800118c",
                "DAT_08001190": "GPIOA",
                "DAT_08001194": "GPIOB",
                "gpio": "gpio",
                "gpio_init": "gpio_init",
                "pin_mask": "pin_mask",
                "alternate_function": "alternate_function",
                "mode": "mode",
                "speed": "speed",
                "pull": "pull"
            },
            "code": "void configure_gpio_pins_08000fb4(GPIO_TypeDef *gpio, GPIO_InitTypeDef *gpio_init)\n{\n    uint32_t pin_mask;\n    uint32_t alternate_function;\n    uint32_t mode;\n    uint32_t speed;\n    uint32_t pull;\n\n    for (uint32_t pin = 0; pin < 16; pin++) {\n        pin_mask = 1 << pin;\n        if (pin_mask & gpio_init->Pin) {\n            if ((gpio_init->Mode == GPIO_MODE_AF_PP) || (gpio_init->Mode == GPIO_MODE_AF_OD)) {\n                uint32_t af_index = (pin & 7) << 2;\n                gpio->AFR[pin >> 3] = (gpio->AFR[pin >> 3] & ~(0xf << af_index)) | (gpio_init->Alternate << af_index);\n            }\n            uint32_t moder_index = pin << 1;\n            uint32_t moder_mask = ~(3 << moder_index);\n            mode = gpio_init->Mode & 3;\n            gpio->MODER = (gpio->MODER & moder_mask) | (mode << moder_index);\n            if (((mode - 1 < 2) || (mode == GPIO_MODE_ANALOG)) || (mode == GPIO_MODE_AF_OD)) {\n                speed = gpio_init->Speed << moder_index;\n                gpio->OSPEEDR = (gpio->OSPEEDR & moder_mask) | speed;\n                uint32_t otype_mask = ~pin_mask;\n                gpio->OTYPER = (gpio->OTYPER & otype_mask) | (((gpio_init->Mode << 0x1b) >> 0x1f) << pin);\n            }\n            pull = gpio_init->Pull << moder_index;\n            gpio->PUPDR = (gpio->PUPDR & moder_mask) | pull;\n            if ((gpio_init->Mode & GPIO_MODE_IT_RISING_FALLING) != 0) {\n                uint32_t exticr_index = (pin >> 2) + 2;\n                uint32_t exticr_mask = ~(0xf << ((pin & 3) << 2));\n                uint32_t port_index;\n                if (gpio == DAT_08001190) {\n                    port_index = 0;\n                }\n                else if (gpio == DAT_08001194) {\n                    port_index = 1;\n                }\n                else if (gpio == &DAT_08001194->BSRR) {\n                    port_index = 2;\n                }\n                else if (gpio == &DAT_08001194->OSPEEDR) {\n                    port_index = 3;\n                }\n                else if (gpio == &DAT_08001194->AFR[0]) {\n                    port_index = 4;\n                }\n                else if (gpio == &DAT_08001194->IDR) {\n                    port_index = 5;\n                }\n                else if (gpio == DAT_08001194 + 0x80) {\n                    port_index = 6;\n                }\n                else if (gpio == &DAT_08001194->BSRRH) {\n                    port_index = 7;\n                }\n                else if (gpio == &DAT_08001194->OSPEEDRH) {\n                    port_index = 8;\n                }\n                else if (gpio == &DAT_08001194->AFR[1]) {\n                    port_index = 9;\n                }\n                else {\n                    port_index = 10;\n                }\n                uint32_t exticr_value = *(uint32_t *)(0x08001184 + exticr_index * 4);\n                uint32_t exticr_af_index = (pin & 3) << 2;\n                exticr_value = (exticr_value & ~(0xf << exticr_af_index)) | (port_index << exticr_af_index);\n                *(uint32_t *)(0x08001184 + exticr_index * 4) = exticr_value;\n                uint32_t exti_mask = ~pin_mask;\n                uint32_t exti_value = *EXTI_IMR & exti_mask;\n                if ((gpio_init->Mode & GPIO_MODE_IT_RISING) != 0) {\n                    exti_value |= pin_mask;\n                }\n                if ((gpio_init->Mode & GPIO_MODE_IT_FALLING) != 0) {\n                    exti_value |= pin_mask << 16;\n                }\n                *EXTI_IMR = exti_value;\n            }\n        }\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08000fb4"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "processI2COperation_08001bfc",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pIVar2": "i2c_instance",
                "puVar3": "data_buffer",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef processI2COperation_08001bfc(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  I2C_TypeDef *i2c_instance;\n  uint8_t *data_buffer;\n  uint32_t tmpreg;\n  i2c_state = i2c_handle->State;\n  i2c_handle->Instance->CR2 &= 0xfffff8ff;\n  i2c_handle->Instance->CR1 |= 1;\n  i2c_handle->Instance->CR1 &= 0xfffffbff;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->CR2 & 0x800) != 0) {\n    if ((i2c_handle->State == HAL_I2C_STATE_BUSY_RX) || (i2c_handle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->XferCount = (uint16_t)i2c_handle->hdmarx->Instance->NDTR;\n    }\n    else {\n      i2c_handle->XferCount = (uint16_t)i2c_handle->hdmatx->Instance->NDTR;\n    }\n  }\n  if (i2c_handle->XferCount != 0) {\n    if ((i2c_instance->SR1 & 4) != 0) {\n      data_buffer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = data_buffer + 1;\n      *data_buffer = (uint8_t)i2c_instance->DR;\n      i2c_handle->XferCount--;\n    }\n    if ((i2c_handle->Instance->SR1 & 0x40) != 0) {\n      data_buffer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = data_buffer + 1;\n      *data_buffer = (uint8_t)i2c_handle->Instance->DR;\n      i2c_handle->XferCount--;\n    }\n    i2c_handle->ErrorCode |= 4;\n  }\n  if (i2c_handle->ErrorCode == 0) {\n    if (((i2c_state == HAL_I2C_STATE_LISTEN) || (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->XferOptions = DAT_08001cfc;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2c_handle);\n    }\n    else if ((i2c_handle->PreviousState == 0x22) || (i2c_state == HAL_I2C_STATE_BUSY_RX)) {\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    I2C_ITError(i2c_handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "processI2COperation_08001bfc"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "*huart": "*uart",
                "huart": "uart",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "gState": "state",
                "Lock": "lock",
                "HAL_UART_MspInit": "initialize_uart_msp",
                "Instance": "instance",
                "CR1": "control_register1",
                "UART_SetConfig": "set_uart_config",
                "CR2": "control_register2",
                "CR3": "control_register3",
                "ErrorCode": "error_code",
                "RxState": "rx_state"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002d72(UART_HandleTypeDef *uart)\n{\n  if (uart != NULL) {\n    if (uart->gState == HAL_UART_STATE_RESET) {\n      uart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart);\n    }\n    uart->gState = HAL_UART_STATE_BUSY;\n    uart->Instance->CR1 &= 0xffffdfff;\n    UART_SetConfig(uart);\n    uart->Instance->CR2 &= 0xffffb7ff;\n    uart->Instance->CR3 &= 0xffffffd5;\n    uart->Instance->CR1 |= 0x2000;\n    uart->ErrorCode = 0;\n    uart->gState = HAL_UART_STATE_READY;\n    uart->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "__thiscall Modbus::FUN_080007f0": "checkModbusRequest",
                "this": "modbusInstance",
                "bVar1": "isSupportedFunctionCode",
                "uVar2": "startingAddress",
                "uVar3": "quantityOfRegisters",
                "uVar4": "index",
                "au8Buffer": "modbusInstance->au8Buffer",
                "u8regsize": "modbusInstance->u8regsize",
                "FUN_080007f0": "checkModbusRequest_080007f0"
            },
            "code": "uint8_t __thiscall checkModbusRequest_080007f0(Modbus *modbusInstance) {\n  bool isSupportedFunctionCode;\n  uint16_t startingAddress, quantityOfRegisters, endAddress;\n  uint8_t index = 0;\n  \n  while (index <= 7) {\n    if (modbusSupportedFunctionCodes[index] == modbusInstance->au8Buffer[1]) {\n      isSupportedFunctionCode = true;\n      break;\n    }\n    index++;\n  }\n  \n  if (!isSupportedFunctionCode) {\n    return 1;\n  }\n  \n  switch (modbusInstance->au8Buffer[1]) {\n    case 1:\n    case 2:\n    case 15:\n      startingAddress = makeWord(modbusInstance->au8Buffer[2], modbusInstance->au8Buffer[3]);\n      quantityOfRegisters = makeWord(modbusInstance->au8Buffer[4], modbusInstance->au8Buffer[5]);\n      endAddress = startingAddress + quantityOfRegisters - 1;\n      if (endAddress > modbusInstance->u8regsize) {\n        return 2;\n      }\n      break;\n    case 3:\n    case 4:\n    case 16:\n      startingAddress = makeWord(modbusInstance->au8Buffer[2], modbusInstance->au8Buffer[3]);\n      quantityOfRegisters = makeWord(modbusInstance->au8Buffer[4], modbusInstance->au8Buffer[5]);\n      endAddress = startingAddress + quantityOfRegisters - 1;\n      if (endAddress > modbusInstance->u8regsize) {\n        return 2;\n      }\n      break;\n    case 5:\n      startingAddress = makeWord(modbusInstance->au8Buffer[2], modbusInstance->au8Buffer[3]);\n      if (startingAddress > modbusInstance->u8regsize) {\n        return 2;\n      }\n      break;\n    case 6:\n      startingAddress = makeWord(modbusInstance->au8Buffer[2], modbusInstance->au8Buffer[3]);\n      if (startingAddress > modbusInstance->u8regsize) {\n        return 2;\n      }\n      break;\n    default:\n      break;\n  }\n  \n  return 0;\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkModbusRequest_080007f0"
        },
        "FUN_0800477e": {
            "renaming": {
                "FUN_0800477e": "handle_external_interrupt_0800477e"
            },
            "code": "void handle_external_interrupt_0800477e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800477e",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_0800477e"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "write_to_file_if_offset_negative_0800562a",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "ushort": "uint16_t",
                "short": "int16_t"
            },
            "code": "void write_to_file_if_offset_negative_0800562a(int file_descriptor, int offset, void* buffer, int buffer_size){\n    int shifted_value = (uint16_t)(*(uint16_t *)(offset + 0xc)) << 0x17;\n    if ((int)shifted_value < 0) {\n        _lseek_r(file_descriptor, (int)*(int16_t *)(offset + 0xe), 0, 2);\n    }\n    *(uint16_t *)(offset + 0xc) &= 0xefff;\n    _write_r(file_descriptor, (int)*(int16_t *)(offset + 0xe), buffer, buffer_size);\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_if_offset_negative_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initializeSerial_080044d8",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "PTR_Serial3_080044f8": "serial3",
                "DAT_080044f4": "baud_rate"
            },
            "code": "void initializeSerial_080044d8(int should_initialize, int priority_level) {\n                        if (should_initialize == 1) {\n                            if (priority_level == 0xffff) {\n                                HardwareSerial::HardwareSerial(&PTR_Serial3_080044f8, DAT_080044f4);\n                            }\n                        }\n                    }",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [
                "_GLOBAL__sub_I_Serial3"
            ],
            "imported": false,
            "current_name": "initializeSerial_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_uart_transmit_complete_08003df4",
                "obj": "serial_obj",
                "HVar1": "uart_state",
                "PTR_uart_handlers_08003e14": "uart_handlers_address"
            },
            "code": "bool is_uart_transmit_complete_08003df4(serial_t *serial_obj) {\n\tUART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003e14 + (uint)serial_obj->index * 4);\n\tHAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n\tbool is_complete = (uart_state & 0x21U) == 0x21;\n\treturn is_complete;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "allocate_memory_for_file_buffer_08005400",
                "param_1": "error_code_ptr",
                "piVar1": "file_buffer_ptr",
                "piVar2": "current_buffer_ptr",
                "iVar3": "global_impure_ptr",
                "ppiVar4": "buffer_list_ptr"
            },
            "code": "int *allocate_memory_for_file_buffer_08005400(undefined4 *error_code_ptr)\\n\\\n    {\\n\\\n        int *file_buffer_ptr;\\n\\\n        int *current_buffer_ptr;\\n\\\n        int global_impure_ptr = *(int *)PTR__global_impure_ptr_08005474;\\n\\\n        if (*(int *)(global_impure_ptr + 0x18) == 0) {\\n\\\n            __sinit(global_impure_ptr);\\n\\\n        }\\n\\\n        int **buffer_list_ptr = (int **)(global_impure_ptr + 0x48);\\n\\\n        do {\\n\\\n            current_buffer_ptr = buffer_list_ptr[2];\\n\\\n            file_buffer_ptr = buffer_list_ptr[1];\\n\\\n            while (file_buffer_ptr = (int *)((int)file_buffer_ptr + -1), -1 < (int)file_buffer_ptr) {\\n\\\n                if (*(short *)(current_buffer_ptr + 3) == 0) {\\n\\\n                    *(undefined2 *)((int)current_buffer_ptr + 0xe) = 0xffff;\\n\\\n                    *(undefined2 *)(current_buffer_ptr + 3) = 1;\\n\\\n                    current_buffer_ptr[0x19] = 0;\\n\\\n                    *current_buffer_ptr = 0;\\n\\\n                    current_buffer_ptr[2] = 0;\\n\\\n                    current_buffer_ptr[1] = 0;\\n\\\n                    current_buffer_ptr[4] = 0;\\n\\\n                    current_buffer_ptr[5] = 0;\\n\\\n                    current_buffer_ptr[6] = 0;\\n\\\n                    memset(current_buffer_ptr + 0x17,0,8);\\n\\\n                    current_buffer_ptr[0xd] = 0;\\n\\\n                    current_buffer_ptr[0xe] = 0;\\n\\\n                    current_buffer_ptr[0x12] = 0;\\n\\\n                    current_buffer_ptr[0x13] = 0;\\n\\\n                    return current_buffer_ptr;\\n\\\n                }\\n\\\n                current_buffer_ptr = current_buffer_ptr + 0x1a;\\n\\\n            }\\n\\\n            if (*buffer_list_ptr == (int *)0x0) {\\n\\\n                file_buffer_ptr = (int *)__sfmoreglue(error_code_ptr,4);\\n\\\n                *buffer_list_ptr = file_buffer_ptr;\\n\\\n                if (file_buffer_ptr == (int *)0x0) {\\n\\\n                    *error_code_ptr = 0xc;\\n\\\n                    return (int *)0x0;\\n\\\n                }\\n\\\n            }\\n\\\n            buffer_list_ptr = (int **)*buffer_list_ptr;\\n\\\n        } while( true );\\n\\\n    }",
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_file_buffer_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "find_first_non_null_pointer_08003582",
                "a": "pointer_a",
                "b": "pointer_b"
            },
            "code": "void* find_first_non_null_pointer_08003582(void* pointer_a, void* pointer_b) {\n    if (pointer_a != pointer_b) {\n        if (pointer_a == NULL) {\n            return pointer_b;\n        }\n        if (pointer_b == NULL) {\n            return pointer_a;\n        }\n        pointer_a = NULL;\n    }\n    return pointer_a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_first_non_null_pointer_08003582"
        },
        "FUN_08004792": {
            "renaming": {
                "FUN_08004792": "handle_gpio_exti_irq_08004792",
                "uVar1": "gpio_pins"
            },
            "code": "void handle_gpio_exti_irq_08004792(void)\n{\n  uint16_t gpio_pins = 0x20;\n  while(gpio_pins < 0x201)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pins);\n    gpio_pins = gpio_pins << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004792",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_08004792"
        },
        "FUN_08005760": {
            "renaming": {
                "std::FUN_08005760": "abort_program",
                "FUN_08005760": "abort_program_08005760"
            },
            "code": "/* This function aborts the program */\nvoid abort_program_08005760(void)\n{\n    abort();\n}",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "pin": "input_pin",
                "uVar1": "shifted_pin",
                "uVar2": "set_bits_count"
            },
            "code": "uint8_t count_set_bits_08004678(uint16_t input_pin) {\n  uint16_t pin = input_pin;\n  uint8_t set_bits_count = 0;\n  while (pin > 0) {\n    if (pin & 1) {\n      set_bits_count++;\n    }\n    pin >>= 1;\n  }\n  return set_bits_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_set_bits_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "enable_i2c_listen_interrupt_08003900",
                "*hi2c": "*i2c_handle",
                "piVar1": "i2c_object",
                "get_i2c_obj": "get_i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_interrupt_08003900(I2C_HandleTypeDef *i2c_handle)\\n{\\n  i2c_t *i2c_object;\\n  i2c_object = get_i2c_object(i2c_handle);\\n  if (i2c_object->is_master == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_interrupt_08003900"
        },
        "FUN_08005768": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005768": "set_all_pointers_to_one",
                "FUN_08005768": "set_all_pointers_to_one_08005768"
            },
            "code": "void set_all_pointers_to_one_08005768(void)\n{\n    if (-1 < *(int *)PTR_id_080057fc << 0x1f) {\n        *(undefined4 *)PTR_id_080057fc = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005800 << 0x1f) {\n        *(undefined4 *)PTR_id_08005800 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005804 << 0x1f) {\n        *(undefined4 *)PTR_id_08005804 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005808 << 0x1f) {\n        *(undefined4 *)PTR_id_08005808 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800580c << 0x1f) {\n        *(undefined4 *)PTR_id_0800580c = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005810 << 0x1f) {\n        *(undefined4 *)PTR_id_08005810 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005814 << 0x1f) {\n        *(undefined4 *)PTR_id_08005814 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005818 << 0x1f) {\n        *(undefined4 *)PTR_id_08005818 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800581c << 0x1f) {\n        *(undefined4 *)PTR_id_0800581c = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005820 << 0x1f) {\n        *(undefined4 *)PTR_id_08005820 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005824 << 0x1f) {\n        *(undefined4 *)PTR_id_08005824 = 1;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005768",
            "calling": [],
            "imported": false,
            "current_name": "set_all_pointers_to_one_08005768"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_interrupt_handler_08000f0c",
                "IRQn_Type_conflict": "irq",
                "uVar1": "irq_num",
                "DAT_08000f28": "NVIC_ISER_BASE",
                "PTR_08000f28": "NVIC_ISER_BASE"
            },
            "code": "void set_interrupt_handler_08000f0c(IRQn_Type_conflict irq) {\n  uint32_t irq_num = (uint32_t)irq;\n  if (irq_num != -1) {\n    uint32_t* nvic_iser = (uint32_t*)(DAT_08000f28 + ((irq_num >> 5) + 0x60) * 4);\n    *nvic_iser = 1 << (irq_num & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART7_IRQHandler",
                "USART3_IRQHandler",
                "USART6_IRQHandler",
                "USART1_IRQHandler",
                "UART5_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "read_registers_08000998",
                "this": "modbus",
                "regs": "registers",
                "u8size": "num_registers",
                "bVar1": "buffer_byte_1",
                "uVar2": "buffer_index_1",
                "uVar3": "starting_address",
                "uVar4": "num_bytes",
                "uVar5": "i"
            },
            "code": "int8_t __thiscall read_registers_08000998(Modbus *modbus, uint16_t *registers, uint8_t num_registers) {\n  byte buffer_byte_1;\n  uint8_t buffer_index_1;\n  uint16_t starting_address = makeWord(modbus->buffer[2], modbus->buffer[3]);\n  uint16_t num_bytes = makeWord(modbus->buffer[4], modbus->buffer[5]);\n  modbus->buffer[2] = (byte)num_bytes << 1;\n  modbus->buffer_size = 3;\n  for (uint i = (uint)(byte)starting_address; i < (uint)(byte)starting_address + (uint)(byte)num_bytes; i = (i + 1) & 0xff) {\n    buffer_byte_1 = modbus->buffer_size;\n    modbus->buffer[buffer_byte_1] = (uint8_t)(registers[i] >> 8);\n    buffer_index_1 = (uint8_t)(buffer_byte_1 + 1);\n    modbus->buffer_size = buffer_index_1;\n    modbus->buffer[buffer_index_1] = *(uint8_t *)(registers + i);\n    modbus->buffer_size = buffer_index_1 + 1;\n  }\n  uint8_t buffer_size = modbus->buffer_size;\n  send_tx_buffer(modbus);\n  return buffer_size + 2;\n}\n",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_registers_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "initialize_uart_08003f94",
                "huart": "uart_handle",
                "tmpval": "register_value"
            },
            "code": "void initialize_uart_08003f94(UART_HandleTypeDef *uart_handle)\n{\n    uint32_t register_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "UART_DMAAbortOnError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "initialize_uart_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "execute_signal_handler_080055d0",
                "__sig": "signal_number",
                "iVar1": "return_value",
                "_FUN_080055d0_r": "_execute_signal_handler_r"
            },
            "code": "int execute_signal_handler_080055d0(int signal_number) {\n  int return_value = _execute_signal_handler_080055d0_r(*(undefined4 *)PTR__impure_ptr_080055dc, signal_number);\n  return return_value;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "execute_signal_handler_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "check_if_terminal_080056f8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_080056f8(int *error_code, int file_descriptor) {\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_08005714;\n  *(undefined4 *)PTR_errno_08005714 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "get_file_permissions_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "output_permissions",
                "param_4": "output_result",
                "iVar1": "status",
                "uVar2": "result",
                "auStack_4c": "file_permissions"
            },
            "code": "int get_file_permissions_080054b4(int file_descriptor, int file_info_offset, int *output_permissions, uint *output_result) {\n    int status;\n    int file_permissions;\n    uint result;\n    if (*(short *)(file_info_offset + 0xe) < 0 || (status = _fstat_r(file_descriptor, (int)*(short *)(file_info_offset + 0xe), &file_permissions), status < 0)) {\n        *output_result = 0;\n        if ((int)((uint)*(ushort *)(file_info_offset + 0xc) << 0x18) < 0) {\n            result = 0x40;\n            goto LAB_080054f4;\n        }\n    }\n    else {\n        *output_result = (uint)((file_permissions & 0xf000) == 0x2000);\n    }\n    result = 0x400;\nLAB_080054f4:\n    *output_permissions = result;\n    return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "i2c_data_transfer_0800171a",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pbVar2": "buffer",
                "uVar3": "options"
            },
            "code": "HAL_StatusTypeDef i2c_data_transfer_0800171a(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state = handle->State;\n  uint32_t options = handle->XferOptions;\n  if ((handle->XferSize == 0) && (state == HAL_I2C_STATE_BUSY_TX)) {\n    if ((options == 4) || ((options == 8 || (options == 0xffff0000)))) {\n      handle->Instance->CR2 = handle->Instance->CR2 & 0xfffff8ff;\n      handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      if (handle->Mode == HAL_I2C_MODE_MEM) {\n        handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(handle);\n      }\n      else {\n        handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(handle);\n      }\n    }\n    else {\n      handle->Instance->CR2 = handle->Instance->CR2 & 0xfffff8ff;\n      handle->PreviousState = 0x11;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(handle);\n    }\n  }\n  else if ((state == HAL_I2C_STATE_BUSY_TX) ||\n          ((handle->Mode == HAL_I2C_MODE_MEM && (state == HAL_I2C_STATE_BUSY_RX)))) {\n    if (handle->XferCount == 0) {\n      handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (handle->Mode == HAL_I2C_MODE_MEM) {\n      if (handle->EventCount == 0) {\n        if (handle->MemaddSize == 1) {\n          handle->Instance->DR = handle->Memaddress & 0xff;\n          handle->EventCount = handle->EventCount + 2;\n        }\n        else {\n          handle->Instance->DR = (handle->Memaddress << 0x10) >> 0x18;\n          handle->EventCount = handle->EventCount + 1;\n        }\n      }\n      else if (handle->EventCount == 1) {\n        handle->Instance->DR = handle->Memaddress & 0xff;\n        handle->EventCount = handle->EventCount + 1;\n      }\n      else if (handle->EventCount == 2) {\n        if (state == HAL_I2C_STATE_BUSY_RX) {\n          handle->Instance->CR1 = handle->Instance->CR1 | 0x100;\n        }\n        else if (state == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *buffer = handle->pBuffPtr;\n          handle->pBuffPtr = buffer + 1;\n          handle->Instance->DR = (uint)*buffer;\n          handle->XferCount = handle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      uint8_t *buffer = handle->pBuffPtr;\n      handle->pBuffPtr = buffer + 1;\n      handle->Instance->DR = (uint)*buffer;\n      handle->XferCount = handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_data_transfer_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "initialize_priority_08004560",
                "__initialize_p": "is_initialized",
                "__priority": "priority_level"
            },
            "code": "void initialize_priority_08004560(int is_initialized, int priority_level) {\n  if (is_initialized == 1 && priority_level == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08004588, '\\0', '\\0', '\\0', '\\0');\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_priority_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_registers_08000a7a",
                "this": "modbus",
                "regs": "registers",
                "u8size": "num_regs",
                "uVar1": "start_addr",
                "uVar2": "num_bits",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "bit_offset",
                "uVar6": "byte_offset",
                "uVar7": "byte_index"
            },
            "code": "int8_t __thiscall Modbus::set_registers_08000a7a(Modbus *modbus,uint16_t *regs,uint8_t num_regs) {\n  uint16_t start_addr = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n  uint16_t num_bits = makeWord(modbus->au8Buffer[4], modbus->au8Buffer[5]);\n  uint bit_index = 0;\n  uint byte_index = 7;\n  for (uint i = 0; i < num_bits; i++) {\n    uint byte_offset = (i + start_addr) * 0x100000 >> 0x18;\n    uint bit_offset = i + start_addr & 0xf;\n    if (((int)(uint)modbus->au8Buffer[byte_index] >> bit_index & 1U) == 0) {\n      regs[byte_offset] = regs[byte_offset] & ~(ushort)(1 << bit_offset);\n    }\n    else {\n      regs[byte_offset] = (ushort)(1 << bit_offset) | regs[byte_offset];\n    }\n    bit_index = (bit_index + 1) % 8;\n    if (bit_index == 0) {\n      byte_index = (byte_index + 1) % 256;\n    }\n  }\n  modbus->u8BufferSize = '\\x06';\n  sendTxBuffer(modbus);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_registers_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "calculate_length_08004cb0",
                "param_1": "start",
                "param_2": "data",
                "param_3": "length",
                "param_4": "end",
                "param_5": "callback",
                "iVar1": "result",
                "uVar2": "max_length",
                "uVar3": "padding",
                "bVar4": "has_padding"
            },
            "code": "uint32_t calculate_length_08004cb0(uint32_t start, uint32_t *data, uint32_t *length, uint32_t end, code *callback) {\\n  uint32_t max_length = data[4];\\n  if ((int)data[4] < (int)data[2]) {\\n    max_length = data[2];\\n  }\\n  *length = max_length;\\n  if (*(char *)((int)data + 0x43) != \"\\0\") {\\n    *length = max_length + 1;\\n  }\\n  if ((int)(*data << 0x1a) < 0) {\\n    *length = *length + 2;\\n  }\\n  uint32_t padding = *data & 6;\\n  if (padding == 0) {\\n    for (; (int)padding < (int)(data[3] - *length); padding++) {\\n      int result = (*callback)(start, end, (int)data + 0x19, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint32_t has_padding = (uint32_t)*(byte *)((int)data + 0x43);\\n  if (has_padding != 0) {\\n    has_padding = 1;\\n  }\\n  if ((int)(*data << 0x1a) < 0) {\\n    *(undefined *)((int)data + has_padding + 0x43) = 0x30;\\n    *(undefined *)((int)data + has_padding + 0x44) = *(undefined *)((int)data + 0x45);\\n    has_padding += 2;\\n  }\\n  int result = (*callback)(start, end, (int)data + 0x43, has_padding);\\n  if (result != -1) {\\n    uint32_t remaining_length = data[3];\\n    bool has_padding_4 = (*data & 6) == 4;\\n    if (has_padding_4) {\\n      remaining_length = remaining_length - *length;\\n    }\\n    if (has_padding_4) {\\n      remaining_length = remaining_length & ~((int)remaining_length >> 0x1f);\\n    }\\n    else {\\n      remaining_length = 0;\\n    }\\n    if ((int)data[4] < (int)data[2]) {\\n      remaining_length = remaining_length + (data[2] - data[4]);\\n    }\\n    uint32_t i = 0;\\n    while (true) {\\n      if (remaining_length == i) {\\n        return 0;\\n      }\\n      int result = (*callback)(start, end, (int)data + 0x1a, 1);\\n      if (result == -1) {\\n        break;\\n      }\\n      i++;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "calculate_length_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "invoke_RTC_user_callback_08003594",
                "hrtc": "rtc_handle",
                "PTR_RTCUserCallback_080035a4": "user_callback_ptr",
                "PTR_callbackUserData_080035a8": "callback_user_data"
            },
            "code": "void invoke_RTC_user_callback_08003594(RTC_HandleTypeDef *rtc_handle)\n{\n  if (*(code **)PTR_RTCUserCallback_080035a4 != (code *)0x0) {\n    (**(code **)PTR_RTCUserCallback_080035a4)(*(undefined4 *)PTR_callbackUserData_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "invoke_RTC_user_callback_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "reset_uart_08002940",
                "*huart": "*uart_handle",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "receive_state",
                "HAL_UART_STATE_READY": "ready_state"
            },
            "code": "void reset_uart_08002940(UART_HandleTypeDef *uart_handle)\n{\n  uart_handle->Instance->CR1 &= ~(1 << 13);\n  uart_handle->Instance->CR3 &= ~(1 << 0);\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_current_milli_08004204",
                "uVar1": "current_milli"
            },
            "code": "uint32_t get_current_milli_08004204(void)\n{\n  uint32_t current_milli = GetCurrentMilli();\n  return current_milli;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "sendTxBuffer",
                "poll"
            ],
            "imported": false,
            "current_name": "get_current_milli_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "handleSysTick_08003476",
                "noOsSystickHandler": "handleNoOsSystick"
            },
            "code": "void handleSysTick_08003476(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystick();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "handleSysTick_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_rx_pin_08004444",
                "_rx": "rx_pin_index",
                "PVar1": "rx_pin",
                "this": "serial"
            },
            "code": "void __thiscall HardwareSerial::set_rx_pin_08004444(HardwareSerial *serial, uint32_t rx_pin_index) {\n  PinName rx_pin;\n  if (rx_pin_index < 0x60) {\n    rx_pin = *(PinName *)(PTR_digitalPin_0800445c + rx_pin_index * 2);\n  }\n  else {\n    rx_pin = NC;\n  }\n  (serial->_serial).pin_rx = rx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_rx_pin_08004444"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "kill_process_if_running_080055e0",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_num",
                "puVar1": "error_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_running_080055e0(int *error_code, int process_id, int signal_num) {\n    undefined *error_ptr;\n    int kill_result;\n\n    error_ptr = PTR_errno_08005600;\n    *(undefined4 *)PTR_errno_08005600 = 0;\n    kill_result = _kill(process_id, signal_num);\n    if ((kill_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_080055e0"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_current_tick_0800346c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_0800346c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_parameters_080053a0",
                "param_1": "current_ptr",
                "uVar1": "result",
                "iVar2": "global_impure_ptr",
                "bVar3": "is_current_ptr",
                "PTR__global_impure_ptr_080053f8": "PTR__global_impure_ptr_080053f8",
                "DAT_080053fc": "DAT_080053fc",
                "sfp1": "stack_frame_pointer_1",
                "sfp2": "stack_frame_pointer_2",
                "sfp3": "stack_frame_pointer_3"
            },
            "code": "void initialize_parameters_080053a0(int param_1)\n{\n  if (*(int *)(param_1 + 0x18) == 0) {\n    int global_impure_ptr = *(int *)PTR__global_impure_ptr_080053f8;\n    int is_current_ptr = param_1 == global_impure_ptr;\n    if (is_current_ptr) {\n      *(int *)(param_1 + 0x18) = 1;\n    }\n    else {\n      *(int *)(param_1 + 0x48) = 0;\n      *(int *)(param_1 + 0x4c) = 0;\n      *(int *)(param_1 + 0x50) = 0;\n      *(int *)(param_1 + 0x28) = DAT_080053fc;\n      *(int *)(param_1 + 0x18) = 1;\n      int sfp1 = __sfp();\n      int sfp2 = __sfp(param_1);\n      int sfp3 = __sfp(param_1);\n      std_isra_0(sfp1, 4, 0);\n      std_isra_0(sfp2, 9, 1);\n      std_isra_0(sfp3, 0x12, 2);\n    }\n  }\n}",
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "__swbuf_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "_fflush_r",
                "__sfp",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_parameters_080053a0"
        },
        "FUN_08003918": {
            "renaming": {
                "FUN_08003918": "handle_I2C_event_08003918",
                "PTR_i2c_handles_08003924": "PTR_i2c_handles",
                "I2C_HandleTypeDef": "i2c_handle",
                "HAL_I2C_EV_IRQHandler": "handle_I2C_event_IRQ"
            },
            "code": "void handle_I2C_event_08003918(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08003924_08003924;\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003918",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_08003918"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nHAL_StatusTypeDef FUNC_0800201c(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  bool bVar5;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_080022d0;\n  if (RCC_OscInitStruct == (RCC_OscInitTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_080022d4 = 0;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_080022d8 = 0;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    HVar2 = HAL_OK;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    HVar2 = HAL_ERROR;\n  }\n  else if (uVar3 == 2) {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLM |\n             (RCC_OscInitStruct->PLL).PLLN << 6 |\n             (((RCC_OscInitStruct->PLL).PLLP >> 1) - 1) * 0x10000 |\n             (RCC_OscInitStruct->PLL).PLLQ << 0x18;\n        *DAT_080023b0 = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "setChannelState_080028d4",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channelState",
                "CCER": "ccer"
            },
            "code": "void setChannelState_080028d4(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState) {\n  uint32_t channelMask = 4 << (channel & 0xff);\n  uint32_t ccer = timer->CCER;\n  ccer &= ~channelMask;\n  ccer |= channelState << (channel & 0xff);\n  timer->CCER = ccer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "setChannelState_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "send_uart_debug_message_080040ec",
                "file_UNUSED": "file_unused",
                "ptr": "message",
                "len": "message_length",
                "sVar1": "bytes_sent",
                "uart_debugFUN_080040ec": "uart_debug_send"
            },
            "code": "size_t send_uart_debug_message_080040ec(int file_unused, char *message, int message_length)\n{\n  size_t bytes_sent;\n  bytes_sent = uart_debug_send((uint8_t *)message, message_length);\n  return bytes_sent;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_uart_debug_message_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "i2c_transfer_08001460",
                "hi2c": "handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "options",
                "HVar1": "status",
                "pIVar2": "instance",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_08001460(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t options)\n{\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *instance;\n  uint32_t tmpreg;\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = (data == NULL || size == 0) ? HAL_ERROR : HAL_BUSY;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      if (!(instance->CR1 & 1)) {\n        instance->CR1 |= 1;\n      }\n      instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08001460"
        },
        "FUN_08004298": {
            "renaming": {
                "FUN_08004298": "waitForTransmissionCompletion_08004298",
                "this": "serialObj",
                "_written": "hasDataToTransmit",
                "_serial": "serialData"
            },
            "code": "void __thiscall HardwareSerial::waitForTransmissionCompletion_08004298(HardwareSerial *serialObj)\n{\n  if (serialObj->hasDataToTransmit()) {\n    do {\n    } while ((serialObj->_serial).tx_head != (serialObj->_serial).tx_tail);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004298",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmissionCompletion_08004298"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "i2c_handle_slave_data_08003880",
                "hi2c": "i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "transmit_receive_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "transmit_receive_buffer"
            },
            "code": "void i2c_handle_slave_data_08003880(I2C_HandleTypeDef *i2c_handle, uint8_t transfer_direction, uint16_t address_match_code)\n{\n  i2c_t *i2c_obj;\n  i2c_obj = get_i2c_object(i2c_handle);\n  if ((uint)address_match_code == (i2c_handle->Init).OwnAddress1) {\n    if (transfer_direction == \"\\0\") {\n      i2c_obj->transmit_receive_buffer_size = \"\\0\";\n      i2c_obj->slave_mode = \"\\0\";\n      if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\n        (*i2c_obj->on_slave_transmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT(i2c_handle, i2c_obj->transmit_receive_buffer, (ushort)i2c_obj->transmit_receive_buffer_size, 8);\n      return;\n    }\n    i2c_obj->slave_mode = \"\\x01\";\n    HAL_I2C_Slave_Sequential_Receive_IT(i2c_handle, i2c_obj->transmit_receive_buffer, 0x20, 8);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_handle_slave_data_08003880"
        },
        "FUN_08003fd4": {
            "renaming": {
                "FUN_08003fd4": "handle_UART1_interrupt_08003fd4",
                "PTR_uart_handlers_08003fe8": "uart_handlers"
            },
            "code": "void handle_UART1_interrupt_08003fd4(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_08003fe8);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd4",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART1_interrupt_08003fd4"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "reset_uart_08002f4c",
                "huart": "uart_handle",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "gState": "global_state",
                "HAL_UART_STATE_READY": "UART_ready_state",
                "HAL_UART_TxCpltCallback": "UART_tx_complete_callback",
                "HAL_OK": "HAL_operation_successful"
            },
            "code": "HAL_StatusTypeDef reset_uart_08002f4c(UART_HandleTypeDef *uart_handle)\n{\n  uart_handle->Instance->CR1 &= ~(1<<6);\n  uart_handle->gState = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_and_pointers_080035bc",
                "puVar1": "pointer_to_data"
            },
            "code": "void set_flags_and_pointers_080035bc(void)\n{\n  uint *pointer_to_data = DAT_080035f0;\n  *pointer_to_data |= 1;\n  pointer_to_data[2] = 0;\n  *pointer_to_data &= 0xfef6ffff;\n  pointer_to_data[1] = DAT_080035f4;\n  *pointer_to_data &= 0xfffbffff;\n  pointer_to_data[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flags_and_pointers_080035bc"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initializeModbusSlave_08000c4c",
                "PTR_slave_08000c60": "modbusSlave"
            },
            "code": "void initializeModbusSlave_08000c4c(void)\n{\n  startForkserver(0);\n  Modbus::begin(&PTR_slave_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "begin",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeModbusSlave_08000c4c"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_HCLK_frequency_divided_by_APB_prescaler_080025ec",
                "uVar1": "HCLK_frequency",
                "APB_prescaler_index": "APB_prescaler_index",
                "PTR_APBPrescTable_08002608": "APB_prescaler_table",
                "DAT_08002604": "data_08002604"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_080025ec(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08002608[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_value;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_080025ec"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "handle_timer_interrupt_080037fc",
                "PTR_timer_handles_0800380c": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_080037fc(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_0800380c_0800380c + 0x18);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037fc"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "write_string_to_stream_08004a60",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "string",
                "param_4": "length",
                "puVar2": "end_of_string",
                "iVar1": "bytes_written_current_iteration",
                "iVar3": "bytes_written"
            },
            "code": "int write_string_to_stream_08004a60(int stream, int character, char* string, int length)\n{\n    int bytes_written = 0;\n    char* end_of_string = string + length;\n    while (length != 0)\n    {\n        if (string == end_of_string) {\n            return 0;\n        }\n        int bytes_written_current_iteration = __sfputc_r(stream, *string, character, length, bytes_written);\n        bytes_written = bytes_written_current_iteration + 1;\n        string = string + 1;\n        length--;\n    }\n    return bytes_written;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_string_to_stream_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "processStream_080050d0",
                "param_1": "status",
                "param_2": "stream",
                "uVar1": "result",
                "uVar2": "streamFlags",
                "iVar3": "impurePtr"
            },
            "code": "uint processStream_080050d0(undefined4 *status, undefined4 *stream) {\n  uint result;\n  ushort streamFlags;\n  int impurePtr = *(int *)PTR__impure_ptr_0800519c;\n  if (impurePtr != 0 && *(int *)(impurePtr + 0x18) == 0) {\n    __sinit(impurePtr);\n  }\n  if (stream == (undefined4 *)PTR___sf_fake_stdin_080051a0) {\n    stream = *(undefined4 **)(impurePtr + 4);\n  }\n  else if (stream == (undefined4 *)PTR___sf_fake_stdout_080051a4) {\n    stream = *(undefined4 **)(impurePtr + 8);\n  }\n  else if (stream == (undefined4 *)PTR___sf_fake_stderr_080051a8) {\n    stream = *(undefined4 **)(impurePtr + 0xc);\n  }\n  streamFlags = *(ushort *)(stream + 3);\n  result = (uint)streamFlags;\n  if ((int)(result << 0x1c) >= 0) {\n    if ((int)(result << 0x1b) >= 0) {\n      *status = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)stream[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)stream[0xd] != stream + 0x11) {\n          _free_r(status);\n        }\n        stream[0xd] = 0;\n      }\n      *(ushort *)(stream + 3) = *(ushort *)(stream + 3) & 0xffdb;\n      stream[1] = 0;\n      *stream = stream[4];\n    }\n    *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 8;\n  }\n  if (stream[4] == 0 && (*(ushort *)(stream + 3) & 0x280) != 0x200) {\n    __smakebuf_r(status, stream);\n  }\n  streamFlags = *(ushort *)(stream + 3);\n  result = streamFlags & 1;\n  if ((streamFlags & 1) == 0) {\n    if ((int)((uint)streamFlags << 0x1e) >= 0) {\n      result = stream[5];\n    }\n    stream[2] = result;\n  }\n  else {\n    stream[2] = 0;\n    stream[6] = -stream[5];\n  }\n  if (stream[4] == 0) {\n    streamFlags = *(ushort *)(stream + 3);\n    result = (int)(short)streamFlags & 0x80;\n    if (result != 0) {\n      *(ushort *)(stream + 3) = streamFlags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "processStream_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "error_code",
                "param_2": "block_size",
                "puVar1": "brk_start",
                "uVar2": "new_brk",
                "puVar3": "free_list",
                "iVar4": "remaining_space",
                "uVar5": "remaining_size",
                "puVar6": "previous_block",
                "puVar7": "current_block",
                "uVar8": "aligned_block_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *error_code, uint block_size)\n{\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *error_code = 0xc;\n  }\n  else {\n    __malloc_lock();\n    undefined *brk_start = PTR___malloc_sbrk_start_08004a30;\n    uint *free_list = *(uint **)PTR___malloc_free_list_08004a2c;\n    uint *previous_block = *(uint **)PTR___malloc_free_list_08004a2c;\n    while (uint *current_block = free_list, current_block != (uint *)0x0) {\n      uint remaining_size = *current_block - aligned_block_size;\n      if (-1 < (int)remaining_size) {\n        if (remaining_size < 0xc) {\n          if (previous_block == current_block) {\n            aligned_block_size = previous_block[1];\n          }\n          else {\n            aligned_block_size = current_block[1];\n          }\n          if (previous_block == current_block) {\n            *(uint *)PTR___malloc_free_list_08004a2c = aligned_block_size;\n            current_block = previous_block;\n          }\n          else {\n            previous_block[1] = aligned_block_size;\n          }\n        }\n        else {\n          *current_block = remaining_size;\n          *(uint *)((int)current_block + remaining_size) = aligned_block_size;\n          current_block = (uint *)((int)current_block + remaining_size);\n        }\n        goto LAB_080049dc;\n      }\n      previous_block = current_block;\n      free_list = (uint *)current_block[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_08004a30 == 0) {\n      uint new_brk = _sbrk_r(error_code);\n      *(undefined4 *)brk_start = new_brk;\n    }\n    uint *new_block = (uint *)_sbrk_r(error_code,aligned_block_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == current_block ||\n        (_sbrk_r(error_code,(int)current_block - (int)new_block) != -1)))) {\n      *current_block = aligned_block_size;\nLAB_080049dc:\n      __malloc_unlock(error_code);\n      aligned_block_size = (int)current_block + 0xbU & 0xfffffff8;\n      int remaining_space = aligned_block_size - (int)(current_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)current_block + remaining_space) = -remaining_space;\n        return aligned_block_size;\n      }\n      return aligned_block_size;\n    }\n    *error_code = 0xc;\n    __malloc_unlock(error_code);\n  }\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "__sfmoreglue",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_flag_status_08002d0c",
                "*huart": "*uart",
                "huart": "uart",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "tickstart",
                "Timeout": "timeout",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_flag_status_08002d0c(UART_HandleTypeDef *uart, uint32_t flag, FlagStatus status, uint32_t tickstart, uint32_t timeout)\n{\n  uint32_t current_tick;\n  do {\n    if (((flag & ~uart->Instance->SR) == 0) != (bool)status) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_tick = HAL_GetTick(), current_tick - tickstart <= timeout))));\n  uart->Instance->CR1 &= 0xfffffe5f;\n  uart->Instance->CR3 &= 0xfffffffe;\n  uart->gState = HAL_UART_STATE_READY;\n  uart->RxState = HAL_UART_STATE_READY;\n  uart->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_flag_status_08002d0c"
        },
        "FUN_0800404c": {
            "renaming": {
                "FUN_0800404c": "handle_uart_interrupt_0800404c",
                "USART6_IRQn": "USART6_Interrupt",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004060 + 0x14)": "uart_handler",
                "PTR_uart_handlers_08004060": "PTR_uart_handlers_08004060"
            },
            "code": "void handle_uart_interrupt_0800404c(UART_HandleTypeDef **(UART_HandleTypeDef **)(PTR_uart_handlers_08004060 + 0x14)) {\n  HAL_NVIC_ClearPendingIRQ(USART6_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004060 + 0x14));\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800404c",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_0800404c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "receive_data_08001904",
                "*hi2c": "*i2c_handler",
                "puVar1": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef receive_data_08001904(I2C_HandleTypeDef *i2c_handler)\n{\n    uint8_t *buffer_pointer;\n    if (i2c_handler->State == HAL_I2C_STATE_BUSY_RX) {\n        if (i2c_handler->XferCount < 4) {\n            if (i2c_handler->XferCount < 2) {\n                i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 & 0xfffffbff;\n                i2c_handler->Instance->CR2 = i2c_handler->Instance->CR2 & 0xfffff8ff;\n                buffer_pointer = i2c_handler->pBuffPtr;\n                i2c_handler->pBuffPtr = buffer_pointer + 1;\n                *buffer_pointer = (uint8_t)i2c_handler->Instance->DR;\n                i2c_handler->XferCount = i2c_handler->XferCount - 1;\n                i2c_handler->State = HAL_I2C_STATE_READY;\n                i2c_handler->PreviousState = 0;\n                if (i2c_handler->Mode == HAL_I2C_MODE_MEM) {\n                    i2c_handler->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MemRxCpltCallback(i2c_handler);\n                }\n                else {\n                    i2c_handler->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MasterRxCpltCallback(i2c_handler);\n                }\n            }\n        }\n        else {\n            buffer_pointer = i2c_handler->pBuffPtr;\n            i2c_handler->pBuffPtr = buffer_pointer + 1;\n            *buffer_pointer = (uint8_t)i2c_handler->Instance->DR;\n            i2c_handler->XferCount = i2c_handler->XferCount - 1;\n            if (i2c_handler->XferCount == 3) {\n                i2c_handler->Instance->CR2 = i2c_handler->Instance->CR2 & 0xfffffbff;\n            }\n        }\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "poll_modbus_slave_data_08000c64",
                "PTR_slave_08000c78": "modbus_slave_ptr",
                "PTR_au16data_08000c74": "modbus_data_ptr"
            },
            "code": "void poll_modbus_slave_data_08000c64(void)\n{\n  Modbus::poll((Modbus *)PTR_slave_08000c78, (uint16_t *)PTR_au16data_08000c74, 16);\n  return;\n}",
            "called": [
                "poll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "poll_modbus_slave_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_uart_data_08002ffc",
                "*huart": "*uart_handle",
                "HVar1": "status",
                "uVar2": "cr1_value",
                "pUVar3": "usart_instance",
                "uVar4": "cr3_bit",
                "uVar5": "sr_value",
                "PTR_08003118": "dma_abort_callback",
                "DAT_08003118": "dma_abort_callback",
                "huart": "uart_handle",
                "UART_Receive_IT": "uart_receive",
                "UART_Transmit_IT": "uart_transmit",
                "UART_EndTransmit_IT": "uart_end_transmit",
                "HAL_UART_ErrorCallback": "uart_error_callback",
                "USART_ERROR_NONE": "0",
                "USART_SR_RXNE": "0x20",
                "USART_SR_TXE": "0x80",
                "USART_SR_TC": "0x40",
                "USART_SR_PE": "0x1",
                "USART_SR_FE": "0x2",
                "USART_SR_NE": "0x4",
                "USART_SR_ORE": "0x8",
                "USART_CR1_RXNEIE": "0x20",
                "USART_CR1_TXEIE": "0x80",
                "USART_CR1_TCIE": "0x40",
                "USART_CR3_EIE": "0x1",
                "USART_ERROR_PE": "0x1",
                "USART_ERROR_FE": "0x2",
                "USART_ERROR_NE": "0x4",
                "USART_ERROR_ORE": "0x8"
            },
            "code": "void process_uart_data_08002ffc(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr_value;\n  USART_TypeDef *usart_instance;\n  uint32_t cr1_value;\n  uint32_t cr3_value;\n  uint32_t error_code;\n  DMA_HandleTypeDef *dma_handle;\n\n  usart_instance = uart_handle->Instance;\n  sr_value = usart_instance->SR;\n  cr1_value = usart_instance->CR1;\n  cr3_value = usart_instance->CR3;\n  error_code = uart_handle->ErrorCode;\n  dma_handle = uart_handle->hdmarx;\n\n  if ((sr_value & USART_SR_RXNE) && (cr1_value & USART_CR1_RXNEIE)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n\n  if ((sr_value & USART_SR_TXE) && (cr1_value & USART_CR1_TXEIE)) {\n    UART_Transmit_IT(uart_handle);\n    return;\n  }\n\n  if ((sr_value & USART_SR_TC) && (cr1_value & USART_CR1_TCIE)) {\n    UART_EndTransmit_IT(uart_handle);\n    return;\n  }\n\n  if ((sr_value & USART_SR_PE) || (sr_value & USART_SR_FE) || (sr_value & USART_SR_NE) || (sr_value & USART_SR_ORE)) {\n    error_code |= sr_value & (USART_SR_PE | USART_SR_FE | USART_SR_NE | USART_SR_ORE);\n    if ((sr_value & USART_SR_RXNE) && (cr1_value & USART_CR1_RXNEIE)) {\n      UART_Receive_IT(uart_handle);\n    }\n    if (!(error_code & USART_ERROR_NONE) && !(cr3_value & USART_CR3_EIE)) {\n      HAL_UART_ErrorCallback(uart_handle);\n      uart_handle->ErrorCode = USART_ERROR_NONE;\n      return;\n    }\n    UART_EndRxTransfer(uart_handle);\n    if (!(cr3_value & USART_CR3_EIE)) {\n      HAL_UART_ErrorCallback(uart_handle);\n      return;\n    }\n    cr3_value &= ~(USART_CR3_EIE);\n    if (dma_handle == NULL) {\n      HAL_UART_ErrorCallback(uart_handle);\n      return;\n    }\n    dma_handle->XferAbortCallback = dma_handle->XferAbortCallback;\n    status = HAL_DMA_Abort_IT(dma_handle);\n    if (status != HAL_OK) {\n      dma_handle->XferAbortCallback(dma_handle);\n      return;\n    }\n  }\n}\n",
            "called": [
                "UART_EndRxTransfer",
                "HAL_UART_ErrorCallback",
                "UART_EndTransmit_IT",
                "UART_Transmit_IT",
                "UART_Receive_IT",
                "HAL_DMA_Abort_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART7_IRQHandler",
                "USART3_IRQHandler",
                "USART6_IRQHandler",
                "USART1_IRQHandler",
                "UART5_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_uart_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "get_i2c_struct_0800387c",
                "hi2c": "i2c_handler",
                "i2c_t": "i2c_t_tag",
                "EventCount": "EventCount"
            },
            "code": "typedef struct i2c_t_tag { int EventCount; } i2c_t; \n\ni2c_t* get_i2c_struct_0800387c(I2C_HandleTypeDef *i2c_handler) { \n    return (i2c_t *)&i2c_handler[-1].EventCount; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_struct_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_pin_for_peripheral_0800351e",
                "peripheral": "peripheral",
                "PinMap_conflict": "map",
                "PVar1": "pinName",
                "NC": "NC"
            },
            "code": "PinName_conflict find_pin_for_peripheral_0800351e(void *peripheral, PinMap_conflict *map) {\n  PinName_conflict pinName;\n  if (peripheral != NULL) {\n    pinName = pinmap_find_pin(peripheral, map);\n    return pinName;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "find_pin_for_peripheral_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "receive_data_08002f66",
                "*huart": "*uart",
                "HAL_StatusTypeDef": "HAL_Status",
                "pbVar1": "rx_byte_ptr",
                "uVar2": "remaining_data",
                "puVar3": "rx_buffer_ptr",
                "received_data": "received_data"
            },
            "code": "HAL_StatusTypeDef receive_data_08002f66(UART_HandleTypeDef *uart)\n{\n  uint8_t *rx_buffer_ptr;\n  uint16_t remaining_data;\n  uint16_t received_data;\n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == 0x1000) {\n    if ((uart->Init).Parity == 0) {\n      received_data = (uint16_t)((uart->Instance->DR << 0x17) >> 0x17);\n      *(uint16_t *)uart->pRxBuffPtr = received_data;\n      uart->pRxBuffPtr += 2;\n    }\n    else {\n      received_data = (uint16_t)uart->Instance->DR & 0xff;\n      *(uint16_t *)uart->pRxBuffPtr = received_data;\n      uart->pRxBuffPtr++;\n    }\n  }\n  else if ((uart->Init).Parity == 0) {\n    rx_buffer_ptr = uart->pRxBuffPtr;\n    uart->pRxBuffPtr++;\n    received_data = (uint16_t)uart->Instance->DR;\n    *rx_buffer_ptr = (uint8_t)received_data;\n  }\n  else {\n    rx_buffer_ptr = uart->pRxBuffPtr;\n    uart->pRxBuffPtr++;\n    received_data = (uint16_t)uart->Instance->DR & 0x7f;\n    *rx_buffer_ptr = (uint8_t)received_data;\n  }\n  remaining_data = uart->RxXferCount - 1;\n  uart->RxXferCount = remaining_data;\n  if (remaining_data != 0) {\n    return HAL_OK;\n  }\n  uart->Instance->CR1 &= 0xfffffedf;\n  uart->Instance->CR3 &= 0xfffffffe;\n  uart->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "set_gpio_pin_state_080034b6",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "val": "state"
            },
            "code": "void set_gpio_pin_state_080034b6(GPIO_TypeDef *gpio_port, uint32_t gpio_pin, uint32_t state) {\n  if (state == 0) {\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "transmit_data_08003eac",
                "obj": "serial_obj",
                "callback": "callback_func",
                "bVar1": "index",
                "PTR_tx_callback_08003ef4": "tx_callback",
                "PTR_tx_callback_obj_08003ef8": "tx_callback_obj",
                "PTR_uart_handlers_08003efc": "uart_handler"
            },
            "code": "void transmit_data_08003eac(serial_t *serial_obj, _func_int_serial_t_ptr *callback_func) {\n    if (serial_obj != NULL) {\n        uint8_t index = serial_obj->index;\n        _func_int_serial_t_ptr **PTR_tx_callback_08003ef4 = (_func_int_serial_t_ptr **)(PTR_PTR_tx_callback_08003ef4_08003ef4 + index * 4);\n        *PTR_tx_callback_08003ef4 = callback_func;\n        serial_t **PTR_PTR_tx_callback_08003ef4_obj_08003ef8 = (serial_t **)(PTR_PTR_PTR_tx_callback_08003ef4_obj_08003ef8_08003ef8 + index * 4);\n        *PTR_PTR_tx_callback_08003ef4_obj_08003ef8 = serial_obj;\n        HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n        HAL_NVIC_EnableIRQ(serial_obj->irq);\n        UART_HandleTypeDef **PTR_uart_handlers_08003efc = (UART_HandleTypeDef **)(PTR_PTR_uart_handlers_08003efcs_08003efc + index * 4);\n        HAL_UART_Transmit_IT(*PTR_uart_handlers_08003efc, serial_obj->tx_buff + serial_obj->tx_tail, 1);\n    }\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "transmit_data_08003eac"
        },
        "FUN_08004064": {
            "renaming": {
                "FUN_08004064": "handle_UART7_interrupt_08004064",
                "PTR_uart_handlers_08004078": "uart_handlers_ptr"
            },
            "code": "void handle_UART7_interrupt_08004064(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART7_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004078 + 0x18);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004064",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART7_interrupt_08004064"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "receive_data_from_serial_08003e18",
                "obj": "serial_obj",
                "c": "received_data",
                "uVar1": "is_rx_active"
            },
            "code": "int receive_data_from_serial_08003e18(serial_t *serial_obj, uchar *received_data) {\n  uint8_t is_rx_active;\n  if (serial_obj == NULL) {\n    return -1;\n  }\n  is_rx_active = serial_rx_active(serial_obj);\n  if (is_rx_active == 0) {\n    *received_data = serial_obj->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **) (PTR_uart_handlers_08003e50 + (uint) serial_obj->index * 4), &serial_obj->recv, 1);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_from_serial_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_errno_to_22_080040fc",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_08004108": "PTR_errno_08004108"
            },
            "code": "int set_errno_to_22_080040fc(int pid_unused, int sig_unused){\n    *(undefined4 *)PTR_errno_08004108 = 0x16;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "transmitData_08002dd0",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "startTick"
            },
            "code": "HAL_StatusTypeDef transmitData_08002dd0(UART_HandleTypeDef *uartHandle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t startTick;\n\n  if (uartHandle->gState != HAL_UART_STATE_READY) {\n    status = HAL_BUSY;\n  }\n  else if (data == NULL || size == 0) {\n    status = HAL_ERROR;\n  }\n  else if (uartHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    uartHandle->Lock = HAL_LOCKED;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n    startTick = HAL_GetTick();\n    uartHandle->TxXferSize = size;\n    uartHandle->TxXferCount = size;\n    while (uartHandle->TxXferCount != 0) {\n      uartHandle->TxXferCount--;\n      if (uartHandle->Init.WordLength == UART_WORDLENGTH_9B) {\n        status = UART_WaitOnFlagUntilTimeout(uartHandle, UART_FLAG_TXE, RESET, startTick, timeout);\n        if (status != HAL_OK) {\n          return HAL_TIMEOUT;\n        }\n        uartHandle->Instance->DR = *(uint16_t *)data & 0x1FF;\n        if (uartHandle->Init.Parity == UART_PARITY_NONE) {\n          data += 2;\n        }\n        else {\n          data++;\n        }\n      }\n      else {\n        status = UART_WaitOnFlagUntilTimeout(uartHandle, UART_FLAG_TXE, RESET, startTick, timeout);\n        if (status != HAL_OK) {\n          return HAL_TIMEOUT;\n        }\n        uartHandle->Instance->DR = (uint32_t)*data;\n        data++;\n      }\n    }\n    status = UART_WaitOnFlagUntilTimeout(uartHandle, UART_FLAG_TC, RESET, startTick, timeout);\n    if (status == HAL_OK) {\n      uartHandle->gState = HAL_UART_STATE_READY;\n      uartHandle->Lock = HAL_UNLOCKED;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "transmitData_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "print_formatted_text_08004860",
                "__stream": "file_stream",
                "__format": "format_string",
                "uStack_8": "stack_var_1",
                "uStack_4": "stack_var_2",
                "in_r2": "arg_1",
                "in_r3": "arg_2"
            },
            "code": "int print_formatted_text_08004860(FILE *file_stream, char *format_string, ...)\n{\n  int result;\n  undefined4 arg_1;\n  undefined4 arg_2;\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  \n  stack_var_1 = arg_1;\n  stack_var_2 = arg_2;\n  result = _vprint_formatted_text_08004860_r(*(undefined4 *)PTR__impure_ptr_08004880, file_stream, format_string, &stack_var_1, file_stream, &stack_var_2);\n  return result;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "print_formatted_text_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "__thiscall Print::FUN_08004622": "print_number",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "num_chars_printed",
                "FUN_08004622Number": "print_number_with_base",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_08004622": "print_number_08004622"
            },
            "code": "size_t Print::print_number_08004622(Print *this, ulong number, int base) {\n  size_t num_chars_printed;\n  if (base != 0) {\n    num_chars_printed = print_number_08004622_with_base(this, number, (uint8_t)base);\n  } else {\n    num_chars_printed = (**this->_vptr_Print)(this, number & 0xff);\n  }\n  return num_chars_printed;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "stop_pwm_signal_08003414",
                "pin": "pwm_pin",
                "Channel": "pwm_channel",
                "uVar1": "pin_function",
                "timHandle": "tim_handle"
            },
            "code": "void stop_pwm_signal_08003414(PinName_conflict pwm_pin){\n  uint32_t pwm_channel;\n  uint32_t pin_function;\n  TIM_HandleTypeDef tim_handle;\n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pwm_pin, (PinMap_conflict *)PTR_PinMap_PWM_08003468);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) && ((((pwm_channel = get_pwm_channel(pwm_pin), pwm_channel == 0 || (pwm_channel == 4)) || (pwm_channel == 8)) || ((pwm_channel == 0xc || (pwm_channel == 0x18)))))) {\n    pin_function = pinmap_function(pwm_pin, (PinMap_conflict *)PTR_PinMap_PWM_08003468);\n    if ((pin_function & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle, pwm_channel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle, pwm_channel);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "get_pwm_channel",
                "HAL_TIM_PWM_DeInit",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "seek_file_08005718",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_pointer",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08005718(int *error_code, int file_descriptor, int offset, int whence) {\n  undefined *error_pointer;\n  int seek_result;\n  error_pointer = PTR_errno_08005738;\n  *(undefined4 *)PTR_errno_08005738 = 0;\n  seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*(int *)error_pointer != 0)) {\n    *error_code = *(int *)error_pointer;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "i2c_handle_mem_mode_080011c0",
                "*hi2c": "*handle",
                "hi2c->Mode": "handle->Mode",
                "hi2c->EventCount": "handle->EventCount",
                "hi2c->Instance": "handle->Instance",
                "hi2c->Devaddress": "handle->Devaddress",
                "(hi2c->Init).AddressingMode": "(handle->Init).AddressingMode",
                "hi2c->State": "handle->State",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef i2c_handle_mem_mode_080011c0(I2C_HandleTypeDef *handle)\n{\n  if (handle->Mode == HAL_I2C_MODE_MEM) {\n    if (handle->EventCount == 0) {\n      handle->Instance->DR = handle->Devaddress & 0xfe;\n    }\n    else {\n      handle->Instance->DR = handle->Devaddress & 0xff | 1;\n    }\n  }\n  else if ((handle->Init).AddressingMode == 0x4000) {\n    if (handle->State == HAL_I2C_STATE_BUSY_TX) {\n      handle->Instance->DR = handle->Devaddress & 0xfe;\n    }\n    else {\n      handle->Instance->DR = handle->Devaddress & 0xff | 1;\n    }\n  }\n  else if (handle->EventCount == 0) {\n    handle->Instance->DR = (handle->Devaddress << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (handle->EventCount == 1) {\n    handle->Instance->DR = (handle->Devaddress << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_mem_mode_080011c0"
        },
        "FUN_080047f0": {
            "renaming": {
                "FUN_080047f0": "initialize_static_variables_080047f0"
            },
            "code": "void initialize_static_variables_080047f0(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080047f0"
        },
        "FUN_0800502c": {
            "renaming": {
                "FUN_0800502c": "send_char_to_stream_0800502c",
                "param_1": "stream_id",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "param_4",
                "iVar1": "buffer_size",
                "uVar2": "character_count",
                "puVar3": "buffer_pointer"
            },
            "code": "uint send_char_to_stream_0800502c(int stream_id, uint character, int *stream_buffer, undefined4 param_4)\n{\n  int buffer_size;\n  uint character_count;\n  undefined *buffer_pointer;\n  if ((stream_id != 0) && (*(int *)(stream_id + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream_buffer == (int *)PTR___sf_fake_stdin_080050c4) {\n    stream_buffer = *(int **)(stream_id + 4);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stdout_080050c8) {\n    stream_buffer = *(int **)(stream_id + 8);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stderr_080050cc) {\n    stream_buffer = *(int **)(stream_id + 0xc);\n  }\n  stream_buffer[2] = stream_buffer[6];\n  character_count = (uint)*(ushort *)(stream_buffer + 3);\n  buffer_size = character_count << 0x1c;\n  if (((buffer_size < 0) && (character_count = stream_buffer[4], character_count != 0)) || (buffer_size = __swsetup_r(stream_id, stream_buffer, buffer_size, character_count, param_4), buffer_size == 0)) {\n    buffer_size = *stream_buffer - stream_buffer[4];\n    character = character & 0xff;\n    if ((buffer_size < stream_buffer[5]) || (buffer_size = _fflush_r(stream_id, stream_buffer), buffer_size == 0)) {\n      stream_buffer[2] = stream_buffer[2] + -1;\n      buffer_pointer = (undefined *)*stream_buffer;\n      *stream_buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (buffer_size + 1 != stream_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      buffer_size = _fflush_r(stream_id, stream_buffer);\n      if (buffer_size == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800502c",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "send_char_to_stream_0800502c"
        },
        "FUN_08000b54": {
            "renaming": {
                "__thiscall Modbus::FUN_08000b54": "processRequest",
                "this": "modbusInstance",
                "regs": "registerValues",
                "u8size": "registerCount",
                "uVar1": "exceptionCode",
                "u8exception": "exceptionCode",
                "uVar2": "portStatus",
                "uVar3": "currentTime",
                "unaff_r5": "serialStatus",
                "au16regs": "registers",
                "u8regsize": "registerCount",
                "getRxBuffer": "getRxBuffer",
                "au8Buffer": "rxBuffer",
                "u8lastError": "lastError",
                "u8id": "id",
                "validateRequest": "validateRequest",
                "millis": "millis",
                "u32timeOut": "timeout",
                "u16timeOut": "timeoutValue",
                "process_FC1": "processReadRequest",
                "process_FC3": "processReadHoldingRequest",
                "process_FC5": "processWriteSingleCoilRequest",
                "process_FC6": "processWriteSingleRegisterRequest",
                "process_FC15": "processWriteMultipleCoilsRequest",
                "process_FC16": "processWriteMultipleRegistersRequest",
                "buildException": "buildException",
                "sendTxBuffer": "sendTxBuffer",
                "FUN_08000b54": "processRequest_08000b54"
            },
            "code": "int8_t __thiscall Modbus::processRequest_08000b54(Modbus *modbusInstance, uint16_t *registerValues, uint8_t registerCount) {\n  uint8_t exceptionCode;\n  uint8_t serialStatus;\n  uint32_t currentTime;\n  uint portStatus;\n  \n  modbusInstance->registers = registerValues;\n  modbusInstance->registerCount = registerCount;\n  if (modbusInstance->serialNumber < 4) {\n    portStatus = (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[2])();\n    serialStatus = portStatus & 0xff;\n  }\n  if (serialStatus == 0) {\n    exceptionCode = 0;\n  }\n  else if ((int)serialStatus < 8) {\n    exceptionCode = 0;\n  }\n  else {\n    exceptionCode = getRxBuffer(modbusInstance);\n    modbusInstance->lastError = exceptionCode;\n    if (modbusInstance->rxBuffer[0] == modbusInstance->id) {\n      exceptionCode = validateRequest(modbusInstance);\n      if (exceptionCode == 0) {\n        currentTime = millis();\n        modbusInstance->timeout = modbusInstance->timeoutValue + currentTime;\n        modbusInstance->lastError = 0;\n        switch(modbusInstance->rxBuffer[1]) {\n        case 1:\n        case 2:\n          exceptionCode = processReadRequest(modbusInstance, registerValues, registerCount);\n          break;\n        case 3:\n        case 4:\n          exceptionCode = processReadHoldingRequest(modbusInstance, registerValues, registerCount);\n          break;\n        case 5:\n          exceptionCode = processWriteSingleCoilRequest(modbusInstance, registerValues, registerCount);\n          break;\n        case 6:\n          exceptionCode = processWriteSingleRegisterRequest(modbusInstance, registerValues, registerCount);\n          break;\n        case 15:\n          exceptionCode = processWriteMultipleCoilsRequest(modbusInstance, registerValues, registerCount);\n          break;\n        case 16:\n          exceptionCode = processWriteMultipleRegistersRequest(modbusInstance, registerValues, registerCount);\n        }\n      }\n      else {\n        if (exceptionCode != 0xff) {\n          buildException(modbusInstance, exceptionCode);\n          sendTxBuffer(modbusInstance);\n        }\n        modbusInstance->lastError = exceptionCode;\n      }\n    }\n    else {\n      exceptionCode = 0;\n    }\n  }\n  return exceptionCode;\n}",
            "called": [
                "process_FC5",
                "getRxBuffer",
                "validateRequest",
                "process_FC3",
                "millis",
                "sendTxBuffer",
                "process_FC1",
                "buildException",
                "process_FC6",
                "process_FC15",
                "process_FC16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "processRequest_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "handle_timer_interrupt_0800376e",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "interrupt_handler"
            },
            "code": "void handle_timer_interrupt_0800376e(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->interrupt_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->interrupt_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "configureSysTick_08000d98",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfig",
                "clockSpeed": "clockSpeed",
                "tickFreq": "tickFreq"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08000d98(uint32_t tickPriority)\n{\n  uint32_t clockSpeed = *(uint *)PTR_SystemCoreClock_08000ddc;\n  uint32_t tickFreq = (uint32_t)((uint64_t)clockSpeed / (1000 / (uint64_t)(byte)*PTR_uwTickFreq_08000dd8));\n  uint32_t systickConfig = HAL_SYSTICK_Config(tickFreq);\n  \n  if (systickConfig != HAL_OK) {\n    return HAL_ERROR;\n  }\n  \n  if (tickPriority > 0xf) {\n    return HAL_ERROR;\n  }\n  \n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08000de0 = tickPriority;\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "transmit_data_08003f48",
                "*huart": "*uart_handler",
                "byte bVar1": "uint8_t uart_index",
                "int iVar3": "int callback_result",
                "int iVar4": "uint32_t callback_obj",
                "uint uVar2": "uint8_t uart_index",
                "uart_index(huart)": "get_uart_index(uart_handler)",
                "PTR_tx_callback_obj_08003f88": "PTR_tx_callback_obj",
                "PTR_tx_callback_08003f8c": "PTR_tx_callback",
                "HAL_UART_Transmit_IT": "HAL_UART_Transmit_IT",
                "PTR_uart_handlers_08003f90": "PTR_uart_handlers",
                "*(int *)(PTR_tx_callback_obj_08003f88 + uVar2 * 4)": "*(uint32_t *)(PTR_tx_callback_obj + uart_index * 4)",
                "(**(code **)(PTR_tx_callback_08003f8c + uVar2 * 4))(iVar4)": "(*(int (**)(uint32_t))(tx_callback))(callback_obj)",
                "*(int *)(iVar4 + 0x68)": "*(uint32_t *)(callback_obj + 0x68)",
                "*(ushort *)(iVar4 + 0x6e)": "*(uint16_t *)(callback_obj + 0x6e)",
                "*(byte *)(iVar4 + 0x44)": "*(uint8_t *)(callback_obj + 0x44)",
                "(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003f90 + (uint)*(byte *)(iVar4 + 0x44) * 4))": "*(UART_HandleTypeDef **)(PTR_uart_handlers + handler_index * 4)",
                "(uint8_t *)(*(int *)(iVar4 + 0x68) + (uint)*(ushort *)(iVar4 + 0x6e))": "(uint8_t *)(*(uint32_t *)(callback_obj + 0x68) + *(uint16_t *)(callback_obj + 0x6e))",
                "UART_HandleTypeDef *huart": "UART_HandleTypeDef *uart_handler"
            },
            "code": "void transmit_data_08003f48(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t uart_index = get_uart_index(uart_handler);\n  if (uart_index < 10)\n  {\n    uint32_t callback_obj = *(uint32_t *)(PTR_tx_callback_08003f8c_obj_08003f88_08003f88 + uart_index * 4);\n    uint32_t tx_callback = *(uint32_t *)(PTR_tx_callback_08003f8c_08003f8c + uart_index * 4);\n    int callback_result = (**(code **)(PTR_tx_callback_08003f8c_08003f8c + uVar2 * 4))(iVar4);\n    if (callback_result != -1)\n    {\n      uint8_t *data_ptr = (uint8_t *)(*(uint32_t *)(callback_obj + 0x68) + *(uint16_t *)(callback_obj + 0x6e));\n      uint8_t handler_index = *(uint8_t *)(callback_obj + 0x44);\n      UART_HandleTypeDef *tx_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003f90_08003f90 + handler_index * 4);\n      HAL_UART_Transmit_IT(tx_handler, data_ptr, 1);\n    }\n  }\n}\n",
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c",
                "*htim": "*timer_handle",
                "htim": "timer_handle",
                "timer_disable_clock": "disable_timer_clock"
            },
            "code": "void disable_timer_clock_0800340c(TIM_HandleTypeDef *timer_handle)\n{\n    timer_disable_clock(timer_handle);\n    return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_function_from_pin_0800352e",
                "pin": "target_pin",
                "map": "pin_map",
                "NC": "no_connection",
                "PTR_": "<unchanged>",
                "DAT_": "<unchanged>"
            },
            "code": "uint32_t find_function_from_pin_0800352e(PinName_conflict target_pin, PinMap_conflict *pin_map)\n{\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == target_pin) break;\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_function_from_pin_0800352e"
        },
        "FUN_0800582c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800582c": "set_flags",
                "PTR_id_080058c0": "ptr_0",
                "PTR_id_080058c4": "ptr_1",
                "PTR_id_080058c8": "ptr_2",
                "PTR_id_080058cc": "ptr_3",
                "PTR_id_080058d0": "ptr_4",
                "PTR_id_080058d4": "ptr_5",
                "PTR_id_080058d8": "ptr_6",
                "PTR_id_080058dc": "ptr_7",
                "PTR_id_080058e0": "ptr_8",
                "PTR_id_080058e4": "ptr_9",
                "PTR_id_080058e8": "ptr_10",
                "PTR_id_080058ec": "ptr_11",
                "FUN_0800582c": "set_flags_0800582c"
            },
            "code": "void set_flags_0800582c() {\n  if (*(int *)PTR_id_080058c0 < 0) {\n    *(undefined4 *)PTR_id_080058c0 = 1;\n  }\n  if (*(int *)PTR_id_080058c4 < 0) {\n    *(undefined4 *)PTR_id_080058c4 = 1;\n  }\n  if (*(int *)PTR_id_080058c8 < 0) {\n    *(undefined4 *)PTR_id_080058c8 = 1;\n  }\n  if (*(int *)PTR_id_080058cc < 0) {\n    *(undefined4 *)PTR_id_080058cc = 1;\n  }\n  if (*(int *)PTR_id_080058d0 < 0) {\n    *(undefined4 *)PTR_id_080058d0 = 1;\n  }\n  if (*(int *)PTR_id_080058d4 < 0) {\n    *(undefined4 *)PTR_id_080058d4 = 1;\n  }\n  if (*(int *)PTR_id_080058d8 < 0) {\n    *(undefined4 *)PTR_id_080058d8 = 1;\n  }\n  if (*(int *)PTR_id_080058dc < 0) {\n    *(undefined4 *)PTR_id_080058dc = 1;\n  }\n  if (*(int *)PTR_id_080058e0 < 0) {\n    *(undefined4 *)PTR_id_080058e0 = 1;\n  }\n  if (*(int *)PTR_id_080058e4 < 0) {\n    *(undefined4 *)PTR_id_080058e4 = 1;\n  }\n  if (*(int *)PTR_id_080058e8 < 0) {\n    *(undefined4 *)PTR_id_080058e8 = 1;\n  }\n  if (*(int *)PTR_id_080058ec < 0) {\n    *(undefined4 *)PTR_id_080058ec = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800582c",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_0800582c"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "i2c_handle_event_08001ab0",
                "*hi2c": "*handle",
                "HVar1": "status",
                "*puVar2": "*buffer",
                "*pIVar3": "*instance"
            },
            "code": "void i2c_handle_event_08001ab0(I2C_HandleTypeDef *handle)\n{\n  HAL_StatusTypeDef status;\n  uint8_t *buffer;\n  I2C_TypeDef *instance;\n  \n  if ((byte)handle->State - 0x29 < 2) {\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n      handle->State = HAL_I2C_STATE_READY;\n    }\n    handle->PreviousState = 0;\n    handle->Mode = HAL_I2C_MODE_NONE;\n  }\n  handle->Instance->CR1 = handle->Instance->CR1 & 0xfffff7ff;\n  instance = handle->Instance;\n  if ((instance->CR2 & 0x800) == 0) {\n    if (handle->State == HAL_I2C_STATE_ABORT) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode = 0;\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = handle->pBuffPtr;\n        handle->pBuffPtr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(handle);\n    }\n    else {\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = handle->pBuffPtr;\n        handle->pBuffPtr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      HAL_I2C_ErrorCallback(handle);\n    }\n  }\n  else {\n    instance->CR2 = instance->CR2 & 0xfffff7ff;\n    if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n      handle->hdmarx->XferAbortCallback = i2c_xfer_abort;\n      status = HAL_DMA_Abort_IT(handle->hdmarx);\n      if (status != HAL_OK) {\n        if ((handle->Instance->SR1 & 0x40) != 0) {\n          buffer = handle->pBuffPtr;\n          handle->pBuffPtr = buffer + 1;\n          *buffer = (uint8_t)handle->Instance->DR;\n        }\n        handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n      }\n    }\n    else {\n      handle->hdmatx->XferAbortCallback = i2c_xfer_abort;\n      status = HAL_DMA_Abort_IT(handle->hdmatx);\n      if (status != HAL_OK) {\n        handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n      }\n    }\n  }\n  if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n    handle->XferOptions = I2C_XFER_OPTIONS;\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_DMA_Abort_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "I2C_Slave_STOPF",
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_event_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "wait_for_flag_08001f9c",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "tmpreg": "N/A"
            },
            "code": "HAL_StatusTypeDef wait_for_flag_08001f9c(void)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n\n  *(uint *)(DAT_0800200c + 0x40) |= 0x10000000;\n  *DAT_08002010 = 1;\n  start_time = HAL_GetTick();\n  do {\n    if ((*(uint *)(DAT_08002014 + 4) & 0x10000) != 0) {\n      *DAT_08002018 = 1;\n      start_time = HAL_GetTick();\n      do {\n        if ((*(uint *)(DAT_08002014 + 4) & 0x20000) != 0) {\n          return HAL_OK;\n        }\n        current_time = HAL_GetTick();\n      } while (current_time - start_time < 0x3e9);\n      return HAL_TIMEOUT;\n    }\n    current_time = HAL_GetTick();\n  } while (current_time - start_time < 0x3e9);\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "wait_for_flag_08001f9c"
        },
        "FUN_08000d8c": {
            "renaming": {
                "FUN_08000d8c": "wait_forever_08000d8c"
            },
            "code": "void wait_forever_08000d8c(void)\n{\n  while( true ) {\n    // Do nothing\n  }\n}",
            "called": [
                "CAN2_SCE_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8c",
            "calling": [
                "CAN2_SCE_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08000d8c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_EVP_PKEY_CTX_08000d8e",
                "ctx": "context",
                "hw_config_FUN_08000d8e": "initialize_hardware_configuration"
            },
            "code": "int initialize_EVP_PKEY_CTX_08000d8e(EVP_PKEY_CTX *context) {\n  initialize_hardware_configuration();\n  return (int)context;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "print_08004638",
                "this": "print_obj",
                "b": "character",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall Print::print_08004638(Print *print_08004638_obj, uchar character, int base)\n{\n  size_t result;\n  result = print_08004638(print_08004638_obj, (uint)character, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_08004638"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "get_process_id_08005604"
            },
            "code": "__pid_t get_process_id_08005604(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005604"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "createModbusResponse_080008cc",
                "this": "modbus",
                "u8exception": "exceptionCode",
                "byte": "byte",
                "bVar1": "bufferCopy",
                "au8Buffer": "buffer",
                "u8id": "id",
                "u8BufferSize": "bufferSize"
            },
            "code": "void __thiscall createModbusResponse_080008cc(Modbus *modbus, uint8_t exceptionCode) {\n  byte bufferCopy = modbus->buffer[1];\n  modbus->buffer[0] = modbus->id;\n  modbus->buffer[1] = bufferCopy ^ 0x80;\n  modbus->buffer[2] = exceptionCode;\n  modbus->bufferSize = 3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "createModbusResponse_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_08004ac6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__08004c94,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_08004ca0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_08004ba0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_08004ba0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar1 = false;\n      local_84 = 0;\n      iVar8 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_08004ca0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_08004ca4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "memchr",
                "__swsetup_r",
                "__sfputs_r",
                "_printf_i",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "read_data_from_file_08005608",
                "param_1": "file_descriptor",
                "param_2": "data_struct_address",
                "iVar1": "bytes_read",
                "uVar2": "new_offset",
                "bVar3": "successful_read"
            },
            "code": "void read_data_from_file_08005608(int file_descriptor, int data_struct_address) {\n  int bytes_read;\n  uint32_t new_offset;\n  bool successful_read;\n  bytes_read = _read_r(file_descriptor, (int)*(short *)(data_struct_address + 0xe));\n  successful_read = bytes_read >= 0;\n  if (successful_read) {\n    new_offset = *(uint32_t *)(data_struct_address + 0x54) + bytes_read;\n  }\n  else {\n    new_offset = *(uint16_t *)(data_struct_address + 0xc) & 0xffffefff;\n  }\n  if (successful_read) {\n    *(uint32_t *)(data_struct_address + 0x54) = new_offset;\n  }\n  if (!successful_read) {\n    *(uint16_t *)(data_struct_address + 0xc) = (uint16_t)new_offset;\n  }\n  return;\n}\n",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "read_data_from_file_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "receiveDataFromUart_08002efa",
                "*huart": "*uartHandle",
                "huart->RxState": "uartHandle->RxState",
                "pData": "data",
                "Size": "size",
                "huart->Lock": "uartHandle->Lock",
                "huart->pRxBuffPtr": "uartHandle->pRxBuffPtr",
                "huart->RxXferSize": "uartHandle->RxXferSize",
                "huart->RxXferCount": "uartHandle->RxXferCount",
                "huart->ErrorCode": "uartHandle->ErrorCode",
                "huart->Instance->CR3": "uartHandle->Instance->CR3",
                "huart->Instance->CR1": "uartHandle->Instance->CR1"
            },
            "code": "HAL_StatusTypeDef receiveDataFromUart_08002efa(UART_HandleTypeDef *uartHandle, uint8_t *data, uint16_t size)\n{\n    if (uartHandle->RxState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uartHandle->Lock != HAL_LOCKED) {\n        uartHandle->pRxBuffPtr = data;\n        uartHandle->RxXferSize = size;\n        uartHandle->RxXferCount = size;\n        uartHandle->ErrorCode = 0;\n        uartHandle->RxState = HAL_UART_STATE_BUSY_RX;\n        uartHandle->Lock = HAL_UNLOCKED;\n        uartHandle->Instance->CR3 = uartHandle->Instance->CR3 | 1;\n        uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x120;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "receiveDataFromUart_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(RTC_HandleTypeDef *hrtc)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_080058f0": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_080058f0": "set_flags",
                "PTR_id_08005954": "ptr1",
                "PTR_id_08005958": "ptr2",
                "PTR_id_0800595c": "ptr3",
                "PTR_id_08005960": "ptr4",
                "PTR_id_08005964": "ptr5",
                "PTR_id_08005968": "ptr6",
                "PTR_id_0800596c": "ptr7",
                "PTR_id_08005970": "ptr8",
                "FUN_080058f0": "set_flags_080058f0"
            },
            "code": "void set_flags_080058f0() {\n  if (*(int *)PTR_id_08005954 < 0) {\n    *(undefined4 *)PTR_id_08005954 = 1;\n  }\n  if (*(int *)PTR_id_08005958 < 0) {\n    *(undefined4 *)PTR_id_08005958 = 1;\n  }\n  if (*(int *)PTR_id_0800595c < 0) {\n    *(undefined4 *)PTR_id_0800595c = 1;\n  }\n  if (*(int *)PTR_id_08005960 < 0) {\n    *(undefined4 *)PTR_id_08005960 = 1;\n  }\n  if (*(int *)PTR_id_08005964 < 0) {\n    *(undefined4 *)PTR_id_08005964 = 1;\n  }\n  if (*(int *)PTR_id_08005968 < 0) {\n    *(undefined4 *)PTR_id_08005968 = 1;\n  }\n  if (*(int *)PTR_id_0800596c < 0) {\n    *(undefined4 *)PTR_id_0800596c = 1;\n  }\n  if (*(int *)PTR_id_08005970 < 0) {\n    *(undefined4 *)PTR_id_08005970 = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058f0",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_080058f0"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_080056b4": {
            "renaming": {
                "FUN_080056b4": "close_file_and_set_error_080056b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_080056b4(int *error_code, int file_descriptor) {\n    undefined *error_ptr;\n    int close_result;\n\n    error_ptr = PTR_errno_080056d0;\n    *(undefined4 *)PTR_errno_080056d0 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056b4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_080056b4"
        },
        "FUN_0800450a": {
            "renaming": {
                "FUN_0800450a": "printAddress_0800450a",
                "this": "this",
                "p": "printer",
                "iVar3": "i",
                "iVar4": "totalPrinted",
                "sVar1": "bytesPrinted",
                "sVar2": "dotPrinted"
            },
            "code": "size_t __thiscall IPAddress::printAddress_0800450a(Print *printer) {\n  size_t totalPrinted = 0;\n  for (int i = 0; i < 3; i++) {\n    size_t bytesPrinted = printer->print(_address.bytes[i], 10);\n    size_t dotPrinted = printer->print('.');\n    totalPrinted += bytesPrinted + dotPrinted;\n  }\n  totalPrinted += printer->print(_address.bytes[3], 10);\n  return totalPrinted;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800450a",
            "calling": [],
            "imported": false,
            "current_name": "printAddress_0800450a"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "handle_timer_interrupts_0800377c",
                "PTR_timer_handles_08003794": "timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt",
                "timer_handle_1": "timer_handle_1",
                "timer_handle_2": "timer_handle_2"
            },
            "code": "void handle_timer_interrupts_0800377c(void)\n{\n    TIM_HandleTypeDef* timer_handle_1 = *(TIM_HandleTypeDef**)PTR_PTR_timer_handles_08003794_08003794;\n    TIM_HandleTypeDef* timer_handle_2 = *(TIM_HandleTypeDef**)(PTR_PTR_timer_handles_08003794_08003794 + 0x24);\n\n    if (timer_handle_1 != NULL) {\n        HAL_TIM_IRQHandler(timer_handle_1);\n    }\n    if (timer_handle_2 != NULL) {\n        HAL_TIM_IRQHandler(timer_handle_2);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_0800377c"
        },
        "FUN_08003fec": {
            "renaming": {
                "FUN_08003fec": "handle_USART2_interrupt_08003fec",
                "PTR_uart_handlers_08004000": "uart_handler_ptr"
            },
            "code": "void handle_USART2_interrupt_08003fec(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_08004000);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fec",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART2_interrupt_08003fec"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "ResetTimer_0800268e",
                "*htim": "*timer",
                "pTVar1": "timer_instance",
                "htim->State": "timer->State",
                "htim->Instance": "timer->Instance",
                "pTVar1->CCER": "timer_instance->CCER",
                "pTVar1->CR1": "timer_instance->CR1",
                "HAL_TIM_PWM_MspDeInit(htim)": "HAL_TIM_PWM_MspDeInit(timer)",
                "htim->Lock": "timer->Lock",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef ResetTimer_0800268e(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timer_instance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  timer_instance = timer->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 = timer_instance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "ResetTimer_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "decodeModbusPacket_080008e2",
                "this": "modbusInstance",
                "regs": "registers",
                "u8size": "packetSize",
                "uVar1": "startingAddress",
                "uVar2": "numRegisters",
                "uVar3": "i",
                "uVar4": "bitIndex",
                "uVar5": "numBytes"
            },
            "code": "int8_t __thiscall decodeModbusPacket_080008e2(Modbus *modbusInstance, uint16_t *registers, uint8_t packetSize)\n{\n  uint16_t startingAddress = makeWord(modbusInstance->au8Buffer[2], modbusInstance->au8Buffer[3]);\n  uint16_t numRegisters = makeWord(modbusInstance->au8Buffer[4], modbusInstance->au8Buffer[5]);\n  uint8_t numBytes = (uint8_t)(((uint)numRegisters << 0x15) >> 0x18);\n  if ((numRegisters & 7) != 0) {\n    numBytes++;\n  }\n  modbusInstance->au8Buffer[2] = numBytes;\n  modbusInstance->u8BufferSize = 3;\n  uint8_t bitIndex = 0;\n  for (uint16_t i = 0; i < numRegisters; i++) {\n    uint16_t registerValue = registers[startingAddress + i];\n    if (((int)(uint)registerValue >> bitIndex & 1U) == 0) {\n      modbusInstance->au8Buffer[modbusInstance->u8BufferSize] &= ~(byte)(1 << bitIndex);\n    }\n    else {\n      modbusInstance->au8Buffer[modbusInstance->u8BufferSize] |= (byte)(1 << bitIndex);\n    }\n    bitIndex++;\n    if (bitIndex > 7) {\n      modbusInstance->u8BufferSize++;\n      bitIndex = 0;\n    }\n  }\n  if ((numRegisters & 7) != 0) {\n    modbusInstance->u8BufferSize++;\n  }\n  numBytes = modbusInstance->u8BufferSize;\n  sendModbusPacket(modbusInstance);\n  return numBytes + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decodeModbusPacket_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "__thiscall Print::FUN_080045c8": "print_number",
                "this": "print_obj",
                "n": "number",
                "base": "base",
                "cVar1": "digit",
                "sVar2": "length",
                "sVar3": "total_length",
                "uVar4": "remainder",
                "uVar5": "base_int",
                "uVar6": "quotient",
                "__s": "current_char",
                "buf": "buffer",
                "FUN_080045c8": "print_number_080045c8"
            },
            "code": "size_t __thiscall print_number_080045c8(Print *print_obj, ulong number, uint8_t base) {\\n\\\n        char digit;\\n\\\n        size_t length;\\n\\\n        size_t total_length = 0;\\n\\\n        uint base_int = (uint)base;\\n\\\n        char buffer[33];\\n\\\n        buffer[32] = \"\\0\";\\n\\\n        if (base_int < 2) {\\n\\\n            base_int = 10;\\n\\\n        }\\n\\\n        char *current_char = buffer + 0x20;\\n\\\n        do {\\n\\\n            uint quotient = number / base_int;\\n\\\n            uint remainder = (number & 0xff) - ((int)(short)quotient * (int)(short)base_int & 0xffU) & 0xff;\\n\\\n            current_char--;\\n\\\n            if (remainder < 10) {\\n\\\n                digit = remainder + \"0\";\\n\\\n            }\\n\\\n            else {\\n\\\n                digit = remainder + \"7\";\\n\\\n            }\\n\\\n            *current_char = digit;\\n\\\n            number = quotient;\\n\\\n        } while (number != 0);\\n\\\n        if (current_char == (char *)0x0) {\\n\\\n            length = 0;\\n\\\n        }\\n\\\n        else {\\n\\\n            length = strlen(current_char);\\n\\\n            total_length = (*print_obj->_vptr_Print[1])(length, current_char, length);\\n\\\n        }\\n\\\n        return total_length;\\n\\\n    }",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "transmitDataOverUART_08003d18",
                "*data": "data",
                "size": "size",
                "PinName_conflict": "uartPin",
                "HAL_StatusTypeDef": "status",
                "uint32_t uVar2": "startTime",
                "void *pvVar3": "peripheral",
                "uint32_t uVar4": "currentTime",
                "uint uVar5": "handlerIndex"
            },
            "code": "size_t transmitDataOverUART_08003d18(uint8_t *data, uint32_t size)\n{\n  PinName_conflict uartPin = *(PinName_conflict *)(PTR_digitalPin_08003dc0 + 0x9a);\n  void *peripheral = pinmap_peripheral(uartPin, (PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4);\n  if (peripheral == (void *)0x0) {\n    return 0;\n  }\n  uint8_t handlerIndex = 0;\n  while ((handlerIndex < 10 && ((*(int *)(PTR_uart_handlers_08003dc8 + handlerIndex * 4) == 0 || (peripheral = pinmap_peripheral(uartPin,(PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4), **(void ***)(PTR_uart_handlers_08003dc8 + handlerIndex * 4) != peripheral))))) {\n    handlerIndex++;\n  }\n  if (9 < handlerIndex) {\n    if ((9 < (byte)PTR_serial_debug_08003dcc[0x44]) && (uart_debug_init(), 9 < (byte)PTR_serial_debug_08003dcc[0x44])) {\n      return 0;\n    }\n    handlerIndex = (uint)(byte)PTR_serial_debug_08003dcc[0x44];\n  }\n  do {\n    HAL_StatusTypeDef status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003dc8 + handlerIndex * 4), data, (uint16_t)size, 1000);\n    if (status == HAL_OK) {\n      return size;\n    }\n  } while (HAL_GetTick() - HAL_GetTick() < 1000);\n  return 0;\n}",
            "called": [
                "uart_debug_init",
                "HAL_UART_Transmit",
                "HAL_GetTick",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "transmitDataOverUART_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "concatenate_bytes_08004640",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_08004640(uint8_t high_byte, uint8_t low_byte)\n{\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "process_FC5",
                "validateRequest",
                "process_FC3",
                "process_FC1",
                "process_FC6",
                "process_FC15",
                "process_FC16"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_08004640"
        },
        "FUN_08000c7c": {
            "renaming": {
                "FUN_08000c7c": "initialize_static_variables_08000c7c"
            },
            "code": "void initialize_static_variables_08000c7c(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c7c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000c7c"
        },
        "FUN_08004760": {
            "renaming": {
                "FUN_08004760": "handle_GPIO_interrupt_08004760"
            },
            "code": "void handle_GPIO_interrupt_08004760(void)\n{\n  // Handle interrupt on GPIO pin 1\n  HAL_GPIO_EXTI_IRQHandler(1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004760",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08004760"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_HAL_and_system_clock_080034ce"
            },
            "code": "void initialize_HAL_and_system_clock_080034ce(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_HAL_and_system_clock_080034ce"
        },
        "FUN_08003798": {
            "renaming": {
                "FUN_08003798": "handle_timer_interrupt_08003798",
                "PTR_timer_handles_080037a8": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandleTypeDef",
                "current_timer_handle": "current_timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08003798(void)\n{\n    TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037a8_080037a8 + 4);\n    if (current_timer_handle != NULL) {\n        HAL_TIM_IRQHandler(current_timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003798",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003798"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "register_exit_function_080047fe",
                "param_1": "func_ptr",
                "param_2": "arg_ptr",
                "__cxa_atexit": "__cxa_register_atexit"
            },
            "code": "void register_exit_function_080047fe(void (*func_ptr)(void), void *arg_ptr)\n{\n  __cxa_atexit(arg_ptr, func_ptr);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_080047fe"
        },
        "FUN_08005974": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005974": "std::ctype_byname<char>::set_flags_if_negative",
                "PTR_id_080059d8": "ptr1",
                "PTR_id_080059dc": "ptr2",
                "PTR_id_080059e0": "ptr3",
                "PTR_id_080059e4": "ptr4",
                "PTR_id_080059e8": "ptr5",
                "PTR_id_080059ec": "ptr6",
                "PTR_id_080059f0": "ptr7",
                "PTR_id_080059f4": "ptr8",
                "FUN_08005974": "set_flags_if_negative_08005974"
            },
            "code": "void set_flags_if_negative_08005974(int* ptr) {\n    if (*ptr < 0) {\n        *ptr = 1;\n    }\n}\n\nvoid std::ctype_byname<char>::set_flags_if_negative_08005974(void) {\n    set_flags_if_negative_08005974((int*)PTR_id_080059d8);\n    set_flags_if_negative_08005974((int*)PTR_id_080059dc);\n    set_flags_if_negative_08005974((int*)PTR_id_080059e0);\n    set_flags_if_negative_08005974((int*)PTR_id_080059e4);\n    set_flags_if_negative_08005974((int*)PTR_id_080059e8);\n    set_flags_if_negative_08005974((int*)PTR_id_080059ec);\n    set_flags_if_negative_08005974((int*)PTR_id_080059f0);\n    set_flags_if_negative_08005974((int*)PTR_id_080059f4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005974",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_if_negative_08005974"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "i2c_transfer_08001256",
                "*hi2c": "*handle",
                "uVar1": "transfer_options",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_08001256(I2C_HandleTypeDef *handle)\n{\n  uint32_t transfer_options = handle->XferOptions;\n  I2C_TypeDef *i2c_instance = handle->Instance;\n  \n  if ((handle->State == HAL_I2C_STATE_BUSY_RX) && ((handle->EventCount != 0 || (handle->Mode != HAL_I2C_MODE_MEM)))) {\n    if ((handle->EventCount == 0) && ((handle->Init).AddressingMode == 0xc000)) {\n      i2c_instance->CR1 = i2c_instance->CR1 | 0x100;\n      handle->EventCount = handle->EventCount + 1;\n    }\n    else {\n      if (handle->XferCount == 0) {\n        i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n      }\n      else if (handle->XferCount == 1) {\n        if (transfer_options == 0xffff0000) {\n          i2c_instance->CR1 = i2c_instance->CR1 & 0xfffffbff;\n          if ((i2c_instance->CR2 & 0x800) == 0) {\n            i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n          }\n          else {\n            i2c_instance->CR1 = i2c_instance->CR1 & 0xfffffbff;\n          }\n        }\n        else if (((transfer_options == 4) || (transfer_options == 8)) || (handle->PreviousState == 0x12)) {\n          i2c_instance->CR1 = i2c_instance->CR1 & 0xfffffbff;\n          i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n        }\n        else if (handle->XferOptions == 2) {\n          i2c_instance->CR1 = i2c_instance->CR1 | 0x400;\n        }\n        else {\n          i2c_instance->CR1 = i2c_instance->CR1 & 0xfffffbff;\n        }\n      }\n      else if (handle->XferCount == 2) {\n        if (handle->XferOptions == 2) {\n          i2c_instance->CR1 = i2c_instance->CR1 | 0x400;\n        }\n        else {\n          i2c_instance->CR1 = i2c_instance->CR1 & 0xfffffbff;\n          i2c_instance->CR1 = i2c_instance->CR1 | 0x800;\n        }\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 = i2c_instance->CR2 | 0x1000;\n        }\n      }\n      else {\n        i2c_instance->CR1 = i2c_instance->CR1 | 0x400;\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 = i2c_instance->CR2 | 0x1000;\n        }\n      }\n      handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "run_global_destructors_08004884",
                "puVar1": "preinit_array_end",
                "puVar2": "preinit_array_start",
                "puVar3": "do_global_dtors_aux_fini_array_entry",
                "iVar4": "num_preinit_functions",
                "iVar5": "i"
            },
            "code": "void run_global_destructors_08004884(void)\n{\n  void **preinit_array_end = PTR___preinit_array_end_080048bc;\n  int num_preinit_functions = (int)PTR___preinit_array_end_080048c0 - (int)PTR___preinit_array_end_080048bc;\n  void **do_global_dtors_aux_fini_array_entry = PTR___do_global_dtors_aux_fini_array_entry_080048c8;\n  void **preinit_array_start = PTR___preinit_array_end_080048c4;\n  \n  for (int i = 0; i < num_preinit_functions / 4; i++)\n  {\n    void (*preinit_func)() = preinit_array_start[i];\n    preinit_func();\n  }\n  \n  _init();\n  \n  for (int i = 0; i < (int)do_global_dtors_aux_fini_array_entry - (int)preinit_array_start >> 2; i++)\n  {\n    void (*global_dtor_func)() = preinit_array_start[i];\n    global_dtor_func();\n  }\n  \n  return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "run_global_destructors_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_EVP_PKEY_CTX_08004648",
                "ctx": "evp_pkey_ctx",
                "HAL_NVIC_SetPriorityGrouping": "set_interrupt_priority_grouping",
                "3": "NVIC_PRIORITYGROUP_3"
            },
            "code": "void initialize_EVP_PKEY_CTX_08004648(void)\n{\n  EVP_PKEY_CTX *evp_pkey_ctx;\n  evp_pkey_ctx = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);\n  init(evp_pkey_ctx);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "__thiscall Modbus::FUN_08000600": "setModbusPort",
                "this": "modbus",
                "u32speed": "speed",
                "uVar1": "serialNumber",
                "iVar2": "returnValue",
                "PTR_Serial3_08000668": "serial3",
                "u8serno": "serialNumber",
                "HardwareSerial": "HardwareSerial",
                "u8txenpin": "txEnablePin",
                "u8BufferSize": "bufferSize",
                "u8lastRec": "lastReceived",
                "u16errCnt": "errorCount",
                "u16OutCnt": "outgoingCount",
                "u16InCnt": "incomingCount",
                "FUN_08000600": "setModbusPort_08000600"
            },
            "code": "void __thiscall setModbusPort_08000600(Modbus *modbus, long speed) {\n  uint8_t serialNumber = modbus->serialNumber;\n  HardwareSerial *port;\n  if (serialNumber == 0x02 || serialNumber == 0x03 || serialNumber == 0x01) {\n    port = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  else {\n    port = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  HardwareSerial::begin(port, speed, 0x06);\n  if (modbus->txEnablePin > 1) {\n    pinMode((uint)modbus->txEnablePin, OUTPUT);\n    digitalWrite((uint)modbus->txEnablePin, LOW);\n  }\n  while ((*(port->super_Stream).super_Print._vptr_Print[3])() >= 0);\n  modbus->bufferSize = 0;\n  modbus->lastReceived = 0;\n  modbus->errorCount = 0;\n  modbus->outgoingCount = 0;\n  modbus->incomingCount = 0;\n}\n",
            "called": [
                "digitalWrite",
                "pinMode",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "setModbusPort_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "__thiscall Print::FUN_080045be": "size_t Print::printChar",
                "this": "printObj",
                "c": "c",
                "sVar1": "result",
                "FUN_080045be": "printChar_080045be"
            },
            "code": "size_t Print::printChar_080045be(Print *printObj, char c) {\n  size_t result = (**printObj->_vptr_Print)(printObj, (int)c);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "printChar_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "handle_UART8_interrupt_0800407c",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004090 + 0x1c)": "uart_handler"
            },
            "code": "void handle_UART8_interrupt_0800407c(UART_HandleTypeDef* *(UART_HandleTypeDef **)(PTR_uart_handlers_08004090 + 0x1c))\n{\n  HAL_NVIC_ClearPendingIRQ(UART8_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004090 + 0x1c));\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART8_interrupt_0800407c"
        },
        "FUN_08000728": {
            "renaming": {
                "__thiscall Modbus::FUN_08000728": "calculateModbusCRC",
                "this": "modbus",
                "u8length": "message_length",
                "uVar2": "crc",
                "uVar3": "bit",
                "uVar4": "i",
                "bVar1": "j",
                "au8Buffer": "message",
                "FUN_08000728": "calculateModbusCRC_08000728"
            },
            "code": "uint16_t __thiscall calculateModbusCRC_08000728(Modbus *modbus, uint8_t message_length) {\n    uint16_t crc = 0xFFFF;\n    for (uint8_t i = 0; i < message_length; i++) {\n        crc ^= modbus->message[i];\n        for (uint8_t j = 0; j < 8; j++) {\n            if (crc & 0x0001) {\n                crc = (crc >> 1) ^ 0xA001;\n            }\n            else {\n                crc >>= 1;\n            }\n        }\n    }\n    return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateModbusCRC_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "find_pin_function_0800354a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_0800354a(PinName_conflict pin, PinMap_conflict *map) {\n\tuint32_t function_index;\n\tif (pin == NC) {\n\t\treturn 0xffffffff;\n\t}\n\tfunction_index = pinmap_find_function(pin, map);\n\treturn function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "get_pwm_channel",
                "uart_init",
                "get_dac_channel",
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_i2c_device_address_0800124a",
                "*hi2c": "*i2c_handle",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "hi2c->Devaddress": "i2c_handle->Devaddress",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef set_i2c_device_address_0800124a(I2C_HandleTypeDef *i2c_handle) {\n  uint8_t device_address = i2c_handle->Devaddress & 0xff;\n  i2c_handle->Instance->DR = device_address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_i2c_device_address_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "incr": "increment",
                "pcVar1": "current_heap_end",
                "pcVar2": "new_heap_end"
            },
            "code": "caddr_t allocate_memory_08004094(int increment)\n{\n  caddr_t current_heap_end;\n  caddr_t new_heap_end;\n  \n  if (*(int *)PTR_heap_end_080040c4 == 0) {\n    *(undefined **)PTR_heap_end_080040c4 = PTR__ebss_080040c8;\n  }\n  current_heap_end = *(caddr_t *)PTR_heap_end_080040c4;\n  new_heap_end = current_heap_end + increment;\n  if (new_heap_end <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_080040c4 = new_heap_end;\n    return current_heap_end;\n  }\n  *(undefined4 *)PTR_errno_080040cc = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_dac_bit_080033c8",
                "*hdac": "*dac_handle",
                "uint": "uint32_t",
                "DAT_080033d4": "dac_register_address",
                "dac_reg": "dac_register"
            },
            "code": "void clear_dac_bit_080033c8(DAC_HandleTypeDef *dac_handle){\n    uint32_t *dac_reg = (uint32_t *)(DAT_080033d4 + 0x40);\n    *dac_reg &= ~(1 << 31);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "HAL_DAC_DeInit"
            ],
            "imported": false,
            "current_name": "clear_dac_bit_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "get_GPIO_port_080031fc",
                "port_idx": "port_index",
                "pGVar1": "port",
                "tmpreg": "GPIO_base",
                "tmpreg_1": "GPIO_offset",
                "tmpreg_2": "GPIO_pin_mask"
            },
            "code": "GPIO_TypeDef * get_GPIO_port_080031fc(uint32_t port_index)\n{\n  GPIO_TypeDef *port;\n  uint32_t GPIO_base = 0x40020000;\n  uint32_t GPIO_offset = 0x30;\n  uint32_t GPIO_pin_mask = 1 << port_index;\n  switch(port_index) {\n    case 0:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003354;\n      break;\n    case 1:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003358;\n      break;\n    case 2:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_0800335c;\n      break;\n    case 3:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003360;\n      break;\n    case 4:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003364;\n      break;\n    case 5:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003368;\n      break;\n    case 6:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_0800336c;\n      break;\n    case 7:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003370;\n      break;\n    case 8:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003374;\n      break;\n    case 9:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_08003378;\n      break;\n    case 10:\n      *(uint *)(GPIO_base + GPIO_offset) = *(uint *)(GPIO_base + GPIO_offset) | GPIO_pin_mask;\n      port = PTR_DAT_0800337c;\n      break;\n    default:\n      port = (GPIO_TypeDef *)0x0;\n  }\n  return port;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_GPIO_port_080031fc"
        },
        "FUN_08005580": {
            "renaming": {
                "FUN_08005580": "process_handler_08005580",
                "param_1": "status",
                "param_2": "process_id",
                "param_3": "signal",
                "param_4": "flags",
                "_Var1": "pid",
                "uVar2": "return_value",
                "iVar3": "function_pointer",
                "pcVar4": "function_pointer_value"
            },
            "code": "int process_handler_08005580(int *status, uint process_id, int signal, int flags) {\n    __pid_t pid;\n    int return_value;\n    int function_pointer;\n    \n    if (process_id > 31) {\n        *status = 22; // EINVAL\n        return -1;\n    }\n    \n    function_pointer = status[17];\n    \n    if (function_pointer != 0 && *(int **)(function_pointer + process_id * 4) != NULL) {\n        if (*(int **)(function_pointer + process_id * 4) != (int *)1) {\n            if (*(int **)(function_pointer + process_id * 4) == (int *)(-1)) {\n                *status = 22; // EINVAL\n                return 1;\n            }\n            *(int **)(function_pointer + process_id * 4) = NULL;\n            (*(void (*)(uint))(*(int **)(function_pointer + process_id * 4)))(process_id);\n        }\n        return 0;\n    }\n    \n    pid = _getpid_r();\n    return_value = _kill_r(status, pid, process_id, flags);\n    return return_value;\n}",
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005580",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_handler_08005580"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_modbus_08000690",
                "__initialize_p": "should_initialize",
                "__priority": "priority"
            },
            "code": "void initialize_modbus_08000690(int should_initialize, int priority) {\\n  if (should_initialize != 1) {\\n    return;\\n  }\\n  if (priority == 0xffff) {\\n    Modbus::Modbus((Modbus *)PTR_slave_080006b0, \"\\x01\", \"\\0\", \"\\0\");\\n  }\\n  return;\\n}",
            "called": [
                "Modbus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_modbus_08000690"
        },
        "FUN_08004254": {
            "renaming": {
                "FUN_08004254": "readNextByte_08004254",
                "this": "serial",
                "_serial": "serialData",
                "rx_tail": "tailIndex",
                "rx_head": "headIndex",
                "rx_buff": "buffer"
            },
            "code": "int __thiscall HardwareSerial::readNextByte_08004254(HardwareSerial *serial){\n  uint rx_tail = (uint)(serial->_serial).rx_tail;\n  if ((serial->_serial).rx_head != rx_tail) {\n    return (uint)(serial->_serial).rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004254",
            "calling": [],
            "imported": false,
            "current_name": "readNextByte_08004254"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "allocate_memory_080054fc",
                "param_1": "mem_size",
                "param_2": "mem_ptr",
                "uVar1": "buffer",
                "iVar2": "mem_block",
                "local_18": "temp1",
                "local_14": "temp2"
            },
            "code": "void allocate_memory_080054fc(int mem_size, int *mem_ptr){\n  ushort buffer;\n  int temp1;\n  int temp2;\n  \n  if (-1 < (int)((uint)*(ushort *)(mem_ptr + 3) << 0x1e)) {\n    temp1 = mem_size;\n    temp2 = mem_ptr;\n    buffer = __swhatbuf_r(mem_size, mem_ptr, &temp1, &temp2);\n    int mem_block = _malloc_r(mem_size, temp1);\n    if (mem_block != 0) {\n      *(undefined4 *)(mem_size + 0x28) = DAT_08005578;\n      *mem_ptr = mem_block;\n      *(ushort *)(mem_ptr + 3) = *(ushort *)(mem_ptr + 3) | 0x80;\n      mem_ptr[5] = temp1;\n      mem_ptr[4] = mem_block;\n      if ((temp2 != (int *)0x0) && (_isatty_r(mem_size, (int)*(short *)((int)mem_ptr + 0xe)) != 0)) {\n        *(ushort *)(mem_ptr + 3) = *(ushort *)(mem_ptr + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(mem_ptr + 3) = buffer | *(ushort *)(mem_ptr + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(mem_ptr + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(mem_ptr + 3) = *(ushort *)(mem_ptr + 3) & 0xfffc | 2;\n  }\n  *mem_ptr = (int)mem_ptr + 0x47;\n  mem_ptr[4] = (int)mem_ptr + 0x47;\n  mem_ptr[5] = 1;\n  return;\n}",
            "called": [
                "__swhatbuf_r",
                "_malloc_r",
                "_isatty_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "transfer_byte_08001420",
                "hi2c": "i2c_handle",
                "pbVar1": "buffer_pointer",
                "pBuffPtr": "p_buff_pointer",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "XferCount": "transfer_count",
                "HAL_StatusTypeDef": "status_type"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08001420(I2C_HandleTypeDef *i2c_handle)\n{\n  byte *buffer_pointer;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    i2c_handle->Instance->DR = (uint)*buffer_pointer;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "initializeHardware_08000de4",
                "*puVar1": "*ptr_data",
                "DAT_08000e14": "PTR_data_array",
                "FUN_08000de4Tick": "initializeHardwareTick"
            },
            "code": "HAL_StatusTypeDef initializeHardware_08000de4(void)\n{\n  uint32_t *ptr_data;\n  ptr_data = DAT_08000e14;\n  *ptr_data |= 0x200;\n  *ptr_data |= 0x400;\n  *ptr_data |= 0x100;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  initializeHardware_08000de4Tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initializeHardware_08000de4"
        },
        "FUN_08003840": {
            "renaming": {
                "FUN_08003840": "handle_timer_interrupt_if_not_null_08003840",
                "PTR_timer_handles_08003850": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt",
                "TIM_HandleTypeDef": "TimerHandle",
                "0x28": "offset"
            },
            "code": "void handle_timer_interrupt_if_not_null_08003840(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003850_08003850 + 0x28);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003840",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_if_not_null_08003840"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_timer_interrupt_080026ce",
                "htim": "timer_handle",
                "pTVar1": "timer_instance"
            },
            "code": "void process_timer_interrupt_080026ce(TIM_HandleTypeDef *timer_handle)\n{\n    TIM_TypeDef *timer_instance = timer_handle->Instance;\n\n    if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_CC1;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n        if ((timer_instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_CC2) != 0) && ((timer_instance->DIER & TIM_IT_CC2) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_CC2;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n        if ((timer_instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_CC3) != 0) && ((timer_instance->DIER & TIM_IT_CC3) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_CC3;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n        if ((timer_instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_CC4) != 0) && ((timer_instance->DIER & TIM_IT_CC4) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_CC4;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n        if ((timer_instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_UPDATE) != 0) && ((timer_instance->DIER & TIM_IT_UPDATE) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_UPDATE;\n        HAL_TIM_PeriodElapsedCallback(timer_handle);\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_BREAK) != 0) && ((timer_instance->DIER & TIM_IT_BREAK) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_BREAK;\n        HAL_TIMEx_BreakCallback(timer_handle);\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((timer_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_TRIGGER;\n        HAL_TIM_TriggerCallback(timer_handle);\n    }\n\n    if (((timer_instance->SR & TIM_FLAG_COM) != 0) && ((timer_instance->DIER & TIM_IT_COM) != 0)) {\n        timer_instance->SR = ~TIM_FLAG_COM;\n        HAL_TIMEx_CommutationCallback(timer_handle);\n    }\n}",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "TIM1_UP_TIM10_IRQHandler",
                "TIM5_IRQHandler",
                "TIM1_BRK_TIM9_IRQHandler",
                "TIM1_TRG_COM_TIM11_IRQHandler",
                "TIM2_IRQHandler",
                "TIM7_IRQHandler",
                "TIM8_UP_TIM13_IRQHandler",
                "TIM8_BRK_TIM12_IRQHandler",
                "TIM3_IRQHandler",
                "TIM8_TRG_COM_TIM14_IRQHandler",
                "TIM6_DAC_IRQHandler",
                "TIM4_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_timer_interrupt_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08001f3c": {
            "renaming": {
                "FUN_08001f3c": "i2c_dma_handle_abort_08001f3c",
                "hdma": "dma_handle",
                "hi2c": "i2c_handle",
                "Parent": "parent",
                "Instance": "instance",
                "CR1": "cr1",
                "XferCount": "xfer_count",
                "hdmatx": "dma_tx_handle",
                "XferAbortCallback": "xfer_abort_callback",
                "hdmarx": "dma_rx_handle",
                "State": "state",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORT",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "ErrorCode": "error_code",
                "HAL_I2C_ErrorCallback": "i2c_error_callback",
                "HAL_I2C_AbortCpltCallback": "i2c_abort_complete_callback"
            },
            "code": "void i2c_dma_handle_abort_08001f3c(DMA_HandleTypeDef *dma_handle)\n{\n  I2C_HandleTypeDef *i2c_handle;\n  i2c_handle = (I2C_HandleTypeDef *)dma_handle->Parent;\n  i2c_handle->Instance->CR1 &= ~(1 << 10);\n  i2c_handle->XferCount = 0;\n  i2c_handle->hdmatx->XferAbortCallback = NULL;\n  i2c_handle->hdmarx->XferAbortCallback = NULL;\n  if (i2c_handle->State != HAL_I2C_STATE_ABORT) {\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR1 &= ~(1 << 0);\n    HAL_I2C_ErrorCallback(i2c_handle);\n    return;\n  }\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Instance->CR1 &= ~(1 << 0);\n  HAL_I2C_AbortCpltCallback(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f3c",
            "calling": [],
            "imported": false,
            "current_name": "i2c_dma_handle_abort_08001f3c"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "count_characters_08000218",
                "__s": "input_string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_character"
            },
            "code": "size_t count_characters_08000218(char* input_string) {\n  char current_character;\n  char* current_position = input_string;\n  while (current_character != '\\0') {\n    current_character = *current_position;\n    current_position++;\n  }\n  size_t character_count = (size_t)(current_position + (-1 - (int)input_string));\n  return character_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "printNumber"
            ],
            "imported": false,
            "current_name": "count_characters_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_pin_pwm_function_0800339c",
                "pin": "pin_name",
                "uVar1": "pwm_function",
                "uVar2": "shifted_value"
            },
            "code": "uint32_t get_pin_pwm_function_0800339c(PinName_conflict pin) {\n  uint32_t pwm_function = pinmap_function(pin, (PinMap_conflict*)PTR_PinMap_PWM_080033c4);\n  uint32_t shifted_value = (pwm_function << 12) >> 27;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value == 4) {\n    return 12;\n  }\n  if (shifted_value == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_pin_pwm_function_0800339c"
        },
        "FUN_08003968": {
            "renaming": {
                "FUN_08003968": "handle_i2c_error_interrupt_08003968",
                "PTR_i2c_handles_08003974": "PTR_i2c_handles"
            },
            "code": "void handle_i2c_error_interrupt_08003968(void)\n{\n  I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003974_08003974 + 8);\n  HAL_I2C_ER_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003968",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003968"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_interrupt_priority_08000e60",
                "IRQn": "interrupt_number",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "priority_bits",
                "uVar3": "unused_bits",
                "DAT_08000ebc": "data_08000ebc",
                "DAT_08000ec0": "data_08000ec0"
            },
            "code": "void set_interrupt_priority_08000e60(IRQn_Type_conflict IRQn, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq_num = (uint32_t)IRQn;\n  uint32_t priority_bits = (uint32_t)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint32_t unused_bits = 7 - priority_bits;\n  if (unused_bits > 3) {\n    unused_bits = 4;\n  }\n  if (priority_bits + 4 < 7) {\n    priority_bits = 0;\n  }\n  else {\n    priority_bits = priority_bits - 3;\n  }\n  uint32_t priority_mask = (1 << (unused_bits & 0xff)) - 1U;\n  uint32_t preempt_bits = (preempt_priority & priority_mask) << (priority_bits & 0xff);\n  uint32_t sub_bits = (1 << (priority_bits & 0xff)) - 1U & sub_priority;\n  if ((int)irq_num < 0) {\n    *(char *)(DAT_08000ec0 + (irq_num & 0xf)) = (char)(preempt_bits << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(preempt_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "check_address_match_0800165a",
                "hi2c": "i2c_handler",
                "AddrMatchCode": "address_match_code",
                "OwnAddress1": "own_address_1",
                "OwnAddress2": "own_address_2",
                "SR2": "status_register_2"
            },
            "code": "HAL_StatusTypeDef check_address_match_0800165a(I2C_HandleTypeDef *i2c_handler)\n{\n    uint16_t address_match_code;\n    if ((i2c_handler->Instance->SR2 & 0x80) == 0) {\n        address_match_code = *(uint16_t *)&(i2c_handler->Init).OwnAddress1;\n    }\n    else {\n        address_match_code = *(uint16_t *)&(i2c_handler->Init).OwnAddress2;\n    }\n    HAL_I2C_AddrCallback(i2c_handler, (i2c_handler->Instance->SR2 & 4) == 0, address_match_code);\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_address_match_0800165a"
        },
        "FUN_080037d4": {
            "renaming": {
                "FUN_080037d4": "handle_timer_interrupt_080037d4",
                "PTR_timer_handles_080037e4": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "HandleTimerIRQ"
            },
            "code": "void handle_timer_interrupt_080037d4(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037e4_080037e4 + 0x10);\n    if (timer_handle != (TIM_HandleTypeDef *)0x0) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037d4",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037d4"
        },
        "FUN_08000b04": {
            "renaming": {
                "__thiscall Modbus::FUN_08000b04": "readRegisters",
                "*this": "modbus",
                "regs": "registers",
                "u8size": "numRegs",
                "bVar1": "startAddress",
                "bVar2": "numBytes",
                "uVar3": "responseSize",
                "uVar4": "regValue",
                "uVar5": "i",
                "FUN_08000b04": "readRegisters_08000b04"
            },
            "code": "int8_t __thiscall Modbus::readRegisters_08000b04(Modbus *modbus,uint16_t *regs,uint8_t numRegs)\n{\n  byte startAddress = modbus->au8Buffer[3];\n  byte numBytes = modbus->au8Buffer[5];\n  modbus->au8Buffer[4] = '\\0';\n  modbus->au8Buffer[5] = numBytes;\n  modbus->u8BufferSize = '\\x06';\n  for (uint i = 0; i < numBytes; i++) {\n    uint16_t regValue = makeWord(modbus->au8Buffer[i * 2 + 7], modbus->au8Buffer[i * 2 + 8]);\n    regs[startAddress + i] = regValue;\n  }\n  uint8_t responseSize = modbus->u8BufferSize;\n  sendTxBuffer(modbus);\n  return responseSize + '\\x02';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readRegisters_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "check_RTC_alarm_status_0800262c",
                "*hrtc": "*rtc_handle",
                "HAL_RTC_AlarmAEventCallback": "handle_RTC_alarm_A_event",
                "HAL_RTCEx_AlarmBEventCallback": "handle_RTC_alarm_B_event",
                "ISR": "rtc_ISR",
                "CR": "rtc_CR",
                "DAT_08002688": "rtc_data_address",
                "RTC_FLAG_INIT": "rtc_flag_init",
                "RTC_ISR_ALRAF": "rtc_ISR_alarm_A_flag",
                "RTC_ISR_ALRBF": "rtc_ISR_alarm_B_flag",
                "RTC_ISR_ALRAF_RESET": "rtc_ISR_alarm_A_flag_reset",
                "RTC_ISR_ALRBF_RESET": "rtc_ISR_alarm_B_flag_reset",
                "HAL_RTC_STATE_READY": "rtc_HAL_state_ready"
            },
            "code": "void check_RTC_alarm_status_0800262c(RTC_HandleTypeDef *rtc_handle)\n{\n    if (((rtc_handle->Instance->ISR & RTC_ISR_ALRAF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRAE) != 0)) {\n        HAL_RTC_AlarmAEventCallback(rtc_handle);\n        rtc_handle->Instance->ISR = rtc_handle->Instance->ISR & RTC_ISR_ALRAF_RESET;\n    }\n    if (((rtc_handle->Instance->ISR & RTC_ISR_ALRBF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRBE) != 0)) {\n        HAL_RTCEx_AlarmBEventCallback(rtc_handle);\n        rtc_handle->Instance->ISR = rtc_handle->Instance->ISR & RTC_ISR_ALRBF_RESET;\n    }\n    *(uint32_t *)(DAT_08002688 + 0x14) = RTC_FLAG_INIT;\n    rtc_handle->State = HAL_RTC_STATE_READY;\n    return;\n}",
            "called": [
                "HAL_RTCEx_AlarmBEventCallback",
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_RTC_alarm_status_0800262c"
        },
        "FUN_080047a8": {
            "renaming": {
                "FUN_080047a8": "handle_gpio_exti_irq_080047a8",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_080047a8(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while(gpio_pin < 0x8001)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080047a8"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "configureSerial_08004388",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "configBits",
                "iVar2": "dataBits",
                "parityBits": "parityBits",
                "stopBits": "stopBits"
            },
            "code": "void __thiscall configureSerial_08004388(HardwareSerial *serial, ulong baudrate, byte config) {\n    byte configBits = config & 7;\n    int dataBits = 0;\n    int parityBits = 0;\n    int stopBits = 0;\n\n    (serial->_serial).baudrate = baudrate;\n    serial->_config = config;\n\n    switch(configBits) {\n        case 4:\n            dataBits = 7;\n            break;\n        case 6:\n            dataBits = 8;\n            break;\n        case 2:\n            dataBits = 6;\n            break;\n        default:\n            break;\n    }\n\n    if((config & 0x30) == 0x30) {\n        (serial->_serial).parity = 0x600;\n        parityBits = 1;\n    }\n    else if((config & 0x20) == 0) {\n        (serial->_serial).parity = 0;\n    }\n    else {\n        (serial->_serial).parity = 0x400;\n        parityBits = 1;\n    }\n\n    if((config & 8) == 0) {\n        (serial->_serial).stopbits = 0;\n    }\n    else {\n        (serial->_serial).stopbits = 0x2000;\n        stopBits = 1;\n    }\n\n    if(dataBits == 8) {\n        (serial->_serial).databits = 0;\n    }\n    else if(dataBits == 9) {\n        (serial->_serial).databits = 0x1000;\n    }\n\n    if(dataBits != 0 || parityBits != 0 || stopBits != 0) {\n        uart_init((serial_t *)&serial->_serial);\n        uart_attach_rx_callback((serial_t *)&serial->_serial, FUN_08004434);\n        return;\n    }\n\n    __assert_func(PTR_s__home_bo__arduino15_packages_STM_08004440,299,PTR___PRETTY_FUNCTION___0800443c,PTR_s_databits__0_08004438);\n}",
            "called": [
                "uart_init",
                "__assert_func",
                "uart_attach_rx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configureSerial_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "terminate_program_080051ac",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void terminate_program_080051ac(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}\n",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "imported": false,
            "current_name": "terminate_program_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "flush_if_buffer_not_empty_080052cc",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "param_3": "mode",
                "param_4": "flags",
                "uVar1": "result"
            },
            "code": "int flush_if_buffer_not_empty_080052cc(int file_descriptor, void *stream, int mode, int flags){\n  int result;\n  \n  if (*(int *)((char *)stream + 0x10) != 0) {\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x18) == 0)) {\n      __sinit();\n    }\n    if (stream == PTR___sf_fake_stdin_08005314) {\n      stream = *(void **)(file_descriptor + 4);\n    }\n    else if (stream == PTR___sf_fake_stdout_08005318) {\n      stream = *(void **)(file_descriptor + 8);\n    }\n    else if (stream == PTR___sf_fake_stderr_0800531c) {\n      stream = *(void **)(file_descriptor + 0xc);\n    }\n    if (*(short *)((char *)stream + 0xc) != 0) {\n      result = __sflush_r(file_descriptor, stream, mode, flags);\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_not_empty_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "uart_transmit_08002eb2",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "pTxBuffPtr": "tx_buffer_ptr",
                "TxXferSize": "tx_transfer_size",
                "TxXferCount": "tx_transfer_count",
                "ErrorCode": "error_code",
                "gState": "state",
                "Lock": "lock",
                "Instance": "instance"
            },
            "code": "HAL_StatusTypeDef uart_transmit_08002eb2(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size) {\n  if (uart_handle->state != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->lock != HAL_LOCKED) {\n    uart_handle->tx_buffer_ptr = data;\n    uart_handle->tx_transfer_size = size;\n    uart_handle->tx_transfer_count = size;\n    uart_handle->error_code = 0;\n    uart_handle->state = HAL_UART_STATE_BUSY_TX;\n    uart_handle->lock = HAL_UNLOCKED;\n    uart_handle->instance->CR1 = uart_handle->instance->CR1 | 0x80;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "uart_transmit_08002eb2"
        },
        "FUN_08005478": {
            "renaming": {
                "FUN_08005478": "process_data_08005478",
                "param_1": "data_size",
                "param_2": "process_function",
                "param_3": "arg1",
                "param_4": "arg2",
                "piVar3": "data_pointer",
                "iVar4": "data_address",
                "iVar6": "inner_loop_count",
                "uVar1": "function_result",
                "uVar5": "result"
            },
            "code": "uint process_data_08005478(int data_size, code *process_function, undefined4 arg1, undefined4 arg2)\n{\n  uint result = 0;\n  int *data_pointer;\n  int data_address;\n  int inner_loop_count;\n  int inner_loop_address;\n  uint function_result;\n  \n  data_pointer = (int *)(data_size + 0x48);\n  while (data_pointer != (int *)0x0) {\n    data_address = data_pointer[2];\n    inner_loop_count = data_pointer[1];\n    while (inner_loop_count > -1) {\n      if ((1 < *(ushort *)(data_address + 0xc)) && ((inner_loop_address = *(short *)(data_address + 0xe) + 1) != 0)) {\n        function_result = (*process_function)(data_size, data_address, arg1, inner_loop_address, arg2);\n        result |= function_result;\n      }\n      data_address += 0x68;\n      inner_loop_count--;\n    }\n    data_pointer = (int *)*data_pointer;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005478",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08005478"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_system_08000d3c",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE",
                "PTR_completed_8667_08000d84": "PTR_completed_8667_08000d84",
                "PTR___dso_handle_08000d7c": "PTR___dso_handle_08000d7c",
                "PTR_completed_8667_08000d80": "PTR_completed_8667_08000d80",
                "PTR__sidata_08000d78": "PTR__sidata_08000d78",
                "PTR__ebss_08000d88": "PTR__ebss_08000d88"
            },
            "code": "void initialize_system_08000d3c(void)\n{\n  int index;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8667_08000d84;\n  undefined4 *dso_handle_ptr = (undefined4 *)PTR___dso_handle_08000d7c;\n  code *UNRECOVERED_JUMPTABLE;\n  for (index = 0; dso_handle_ptr + index < (undefined4 *)PTR_completed_8667_08000d80; index += 4) {\n    *(undefined4 *)(dso_handle_ptr + index) = *(undefined4 *)(PTR__sidata_08000d78 + index);\n  }\n  for (; completed_ptr < (undefined4 *)PTR__ebss_08000d88; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  main();\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [
                "__libc_init_array",
                "main",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  USART_TypeDef *pUVar4;\n  USART_TypeDef *pUVar5;\n  USART_TypeDef *pUVar6;\n  USART_TypeDef *pUVar7;\n  USART_TypeDef *pUVar8;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar9;\n  GPIO_TypeDef *pGVar10;\n  uint32_t uVar11;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84);\n    }\n    else {\n      pUVar9 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar9;\n      pUVar8 = DAT_08003c7c;\n      pUVar7 = DAT_08003c78;\n      pUVar6 = DAT_08003c74;\n      pUVar5 = DAT_08003c70;\n      pUVar4 = DAT_08003c6c;\n      pUVar3 = DAT_08003c68;\n      pUVar2 = DAT_08003c64;\n      pUVar1 = DAT_08003c60;\n      if (pUVar9 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (pUVar9 == DAT_08003c60) {\n          DAT_08003c60[0xa93].CR2 = DAT_08003c60[0xa93].CR2 | 0x10;\n          pUVar1[0xa93].CR2 = pUVar1[0xa93].CR2 & 0xffffffef;\n          pUVar1[0xa94].CR3 = pUVar1[0xa94].CR3 | 0x10;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c64) {\n          DAT_08003c64[0x11dc].CR2 = DAT_08003c64[0x11dc].CR2 | 0x20000;\n          pUVar2[0x11dc].CR2 = pUVar2[0x11dc].CR2 & 0xfffdffff;\n          pUVar2[0x11dd].CR3 = pUVar2[0x11dd].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c68) {\n          DAT_08003c68[0x11b8].SR = DAT_08003c68[0x11b8].SR | 0x40000;\n          pUVar3[0x11b8].SR = pUVar3[0x11b8].SR & 0xfffbffff;\n          pUVar3[0x11b9].DR = pUVar3[0x11b9].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c6c) {\n          DAT_08003c6c[0x1193].CR1 = DAT_08003c6c[0x1193].CR1 | 0x80000;\n          pUVar4[0x1193].CR1 = pUVar4[0x1193].CR1 & 0xfff7ffff;\n          pUVar4[0x1194].CR2 = pUVar4[0x1194].CR2 | 0x80000;\n          obj->index = '\\x03';\n          obj->irq = UART4_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c70) {\n          DAT_08003c70[0x116e].GTPR = DAT_08003c70[0x116e].GTPR | 0x100000;\n          pUVar5[0x116e].GTPR = pUVar5[0x116e].GTPR & 0xffefffff;\n          pUVar5[0x1170].SR = pUVar5[0x1170].SR | 0x100000;\n          obj->index = '\\x04';\n          obj->irq = UART5_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c74) {\n          DAT_08003c74[0xa6f].SR = DAT_08003c74[0xa6f].SR | 0x20;\n          pUVar6[0xa6f].SR = pUVar6[0xa6f].SR & 0xffffffdf;\n          pUVar6[0xa70].DR = pUVar6[0xa70].DR | 0x20;\n          obj->index = '\\x05';\n          obj->irq = USART6_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c78) {\n          DAT_08003c78[0x1001].DR = DAT_08003c78[0x1001].DR | 0x40000000;\n          pUVar7[0x1001].DR = pUVar7[0x1001].DR & 0xbfffffff;\n          pUVar7[0x1002].BRR = pUVar7[0x1002].BRR | 0x40000000;\n          obj->index = '\\x06';\n          obj->irq = UART7_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c7c) {\n          DAT_08003c7c[0xfdc].CR2 = DAT_08003c7c[0xfdc].CR2 | 0x80000000;\n          pUVar8[0xfdc].CR2 = pUVar8[0xfdc].CR2 & 0x7fffffff;\n          pUVar8[0xfdd].CR3 = pUVar8[0xfdd].CR3 | 0x80000000;\n          obj->index = '\\a';\n          obj->irq = UART8_IRQn;\n        }\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        GPIO_InitStruct.Alternate = (uVar11 << 0x11) >> 0x19;\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08003c80 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init",
                "HAL_UART_Init",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "iprintf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_08003854": {
            "renaming": {
                "FUN_08003854": "handle_timer_interrupt_08003854",
                "PTR_timer_handles_08003864": "PTR_timer_handles_08003864",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08003854(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003864 + 0x2c);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003854",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003854"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "set_pin_state_0800316c",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "0xfU": "0xF",
                "1": "bit_mask",
                "map[uVar1]": "pin_map[pin_index]",
                "(int)pin": "(uint32_t)pin",
                "((int)pin << 0x18) >> 0x1c": "(uint32_t)pin >> 4",
                "(1 << ((int)pin & 0xfU))": "(1 << bit_index)",
                "map[uVar1] & ~(1 << ((int)pin & 0xfU))": "pin_map[pin_index] &= bit_mask"
            },
            "code": "void set_pin_state_0800316c(PinName_conflict pin, uint32_t *pin_map)\n{\n  uint32_t pin_index = (uint32_t)pin >> 4;\n  uint32_t bit_index = (uint32_t)pin & 0xF;\n  uint32_t bit_mask = ~(1 << bit_index);\n  pin_map[pin_index] &= bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_state_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_080040d0",
                "file_UNUSED": "file_not_used"
            },
            "code": "int return_error_080040d0(int file_not_used)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_080040d0"
        },
        "FUN_0800401c": {
            "renaming": {
                "FUN_0800401c": "handle_UART4_interrupt_0800401c",
                "UART4_IRQn": "UART4_Interrupt",
                "PTR_uart_handlers_08004030": "uart_handlers_ptr"
            },
            "code": "void handle_UART4_interrupt_0800401c(void) {\n  HAL_NVIC_ClearPendingIRQ(UART4_IRQn);\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004030 + 0xc);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800401c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART4_interrupt_0800401c"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_file_mode_to_directory_080040d6",
                "file_UNUSED": "unused_file_param",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_directory_080040d6(stat *file_stat){\n  file_stat->st_mode = S_IFDIR;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "write_byte_to_buffer_08004a34",
                "param_1": "buffer_start",
                "param_2": "byte_to_write",
                "param_3": "buffer_ptr",
                "pbVar2": "current_buffer_position",
                "uVar1": "result",
                "*pbVar2": "*current_buffer_position",
                "*param_3": "*buffer_ptr"
            },
            "code": "unsigned int write_byte_to_buffer_08004a34(unsigned int buffer_start, char byte_to_write, char **buffer_ptr)\n{\n  unsigned int result;\n  char *buffer_end = (*buffer_ptr + buffer_start) - 1;\n  *buffer_ptr = buffer_end;\n  if (((int)buffer_end < 0) && (((int)buffer_end < (int)(*buffer_ptr + 6) || (byte_to_write == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  char *current_buffer_position = *buffer_ptr;\n  *buffer_ptr = current_buffer_position + 1;\n  *current_buffer_position = byte_to_write;\n  return (unsigned int)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "divide_numbers_080002d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "__aeabi_idiv0": "divide_by_zero_error",
                "__udivmoddi4": "unsigned_division_and_modulo"
            },
            "code": "void divide_numbers_080002d0(int dividend, int divisor, int quotient, int remainder)\n{\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend,divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "imported": false,
            "current_name": "divide_numbers_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "get_uart_index_08003f00",
                "*huart": "huart",
                "uVar1": "index"
            },
            "code": "uint8_t get_uart_index_08003f00(UART_HandleTypeDef *huart)\n{\n  uint8_t index;\n  if (huart == NULL)\n  {\n    index = 10;\n  }\n  else\n  {\n    index = 0;\n    while (index < 10)\n    {\n      if (huart == *(UART_HandleTypeDef **)(PTR_uart_handlers_08003f20 + index * 4))\n      {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "imported": false,
            "current_name": "get_uart_index_08003f00"
        },
        "FUN_08004270": {
            "renaming": {
                "FUN_08004270": "readNextByte_08004270",
                "__thiscall HardwareSerial::FUN_08004270": "HardwareSerial::readNextByte",
                "this": "serialObject",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numberOfBytes",
                "byte bVar1": "byte nextByte",
                "ushort uVar2": "ushort tailIndex",
                "(this->_serial).rx_tail": "(serialObject->_serial).rx_tail",
                "(this->_serial).rx_head": "(serialObject->_serial).rx_head",
                "(this->_serial).rx_buff[uVar2]": "(serialObject->_serial).rx_buff[tailIndex]",
                "(this->_serial).rx_tail = uVar2 + 1 & 0x3f": "(serialObject->_serial).rx_tail = (tailIndex + 1) & 0x3f",
                "return (uint)bVar1": "return (uint)nextByte",
                "return -1": "return -1"
            },
            "code": "ssize_t __thiscall HardwareSerial::readNextByte_08004270(HardwareSerial *serialObject, int fileDescriptor, void *buffer, size_t numberOfBytes) {\n  byte nextByte;\n  ushort tailIndex;\n  tailIndex = (serialObject->_serial).rx_tail;\n  if ((uint)(serialObject->_serial).rx_head != (uint)tailIndex) {\n    nextByte = (serialObject->_serial).rx_buff[tailIndex];\n    (serialObject->_serial).rx_tail = (tailIndex + 1) & 0x3f;\n    return (uint)nextByte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004270",
            "calling": [],
            "imported": false,
            "current_name": "readNextByte_08004270"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_080037e8": {
            "renaming": {
                "FUN_080037e8": "handle_timer_interrupt_080037e8",
                "PTR_timer_handles_080037f8": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "timer_handle": "current_timer_handle"
            },
            "code": "void handle_timer_interrupt_080037e8(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037f8_080037f8 + 0x14);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037e8",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037e8"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "transferData_08001440",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer",
                "XferCount": "transfer_count",
                "pBuffPtr": "buffer_pointer_ptr",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "HAL_OK": "HAL_status"
            },
            "code": "HAL_StatusTypeDef transferData_08001440(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handle->XferCount != 0) \n  {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transferData_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_in_memory_08000230",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "memory_size",
                "bVar1": "byte_value_found",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "byte_ptr_2",
                "puVar7": "uint_ptr",
                "pbVar8": "byte_ptr_3",
                "uVar9": "byte_value",
                "uVar10": "offset",
                "uVar11": "aligned_memory_size",
                "uVar12": "value1",
                "uVar13": "value2",
                "bVar14": "bit_0_value",
                "bVar15": "bit_8_value",
                "bVar16": "bit_16_value",
                "bVar17": "bit_24_value"
            },
            "code": "void * find_byte_in_memory_08000230(void *memory, int byte_to_find, size_t memory_size) {\n    uint8_t *byte_ptr = (uint8_t *) memory;\n    uint8_t byte_value = byte_to_find & 0xff;\n    if (memory_size < 0x10) {\n        while (memory_size-- > 0) {\n            if (*byte_ptr == byte_value) {\n                return byte_ptr;\n            }\n            byte_ptr++;\n        }\n    }\n    else {\n        size_t offset = (size_t) byte_ptr & 7;\n        if (offset != 0) {\n            memory_size -= offset;\n            while (offset-- > 0) {\n                if (*byte_ptr == byte_value) {\n                    return byte_ptr;\n                }\n                byte_ptr++;\n            }\n        }\n        uint32_t long_value = byte_value;\n        long_value |= long_value << 8;\n        long_value |= long_value << 16;\n        size_t aligned_memory_size = memory_size & ~7;\n        while (memory_size >= 8) {\n            uint32_t value1 = *(uint32_t *) byte_ptr ^ long_value;\n            uint32_t value2 = *(uint32_t *) (byte_ptr + 4) ^ long_value;\n            if (value1 | value2) {\n                size_t i;\n                for (i = 0; i < 4; i++) {\n                    if (byte_ptr[i] == byte_value) {\n                        return &byte_ptr[i];\n                    }\n                }\n                for (i = 4; i < 8; i++) {\n                    if (byte_ptr[i] == byte_value) {\n                        return &byte_ptr[i];\n                    }\n                }\n            }\n            byte_ptr += 8;\n            memory_size -= 8;\n        }\n        while (memory_size-- > 0) {\n            if (*byte_ptr == byte_value) {\n                return byte_ptr;\n            }\n            byte_ptr++;\n        }\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "_vfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08000230"
        },
        "FUN_080051bc": {
            "renaming": {
                "FUN_080051bc": "execute_command_080051bc",
                "param_1": "command_buffer",
                "param_2": "command_params",
                "iVar1": "param_4",
                "piVar2": "param_2",
                "uVar3": "param_3",
                "uVar4": "command_flags",
                "iVar5": "param_5",
                "pcVar6": "command_func",
                "iVar7": "param_7",
                "uVar8": "result",
                "iVar9": "temp_result",
                "bVar10": "flag"
            },
            "code": "uint32_t execute_command_080051bc(uint32_t *command_buffer, int *command_params)\n{\n  int param_4;\n  int *param_2;\n  uint32_t param_3;\n  uint16_t command_flags;\n  int param_5;\n  function_pointer_t *command_func;\n  int param_7;\n  uint32_t result;\n  uint32_t temp_result;\n  bool flag;\n  \n  command_flags = *(uint16_t *)(command_params + 6);\n  param_3 = (uint32_t)command_flags;\n  if ((int32_t)(param_3 << 0x1c) < 0) {\n    param_4 = command_params[8];\n    if (param_4 != 0) {\n      param_5 = param_3 << 0x1e;\n      flag = param_5 == 0;\n      param_7 = *command_params;\n      if (flag) {\n        param_5 = command_params[10];\n      }\n      *command_params = param_4;\n      if (!flag) {\n        param_5 = 0;\n      }\n      command_params[4] = param_5;\n      for (param_7 = param_7 - param_4; 0 < param_7; param_7 = param_7 - param_5) {\n        temp_result = (*(function_pointer_t *)command_params[0x18])(command_buffer, command_params[0x10], param_4, param_7);\n        if (temp_result < 1) {\n          command_flags = *(uint16_t *)(command_params + 6);\n          goto LAB_080052b2;\n        }\n        param_4 = param_4 + temp_result;\n      }\n    }\n  }\n  else if (((0 < command_params[1]) || (0 < command_params[0x14])) &&\n          (command_func = (function_pointer_t *)command_params[0xc], command_func != (function_pointer_t *)0x0)) {\n    result = *command_buffer;\n    *command_buffer = 0;\n    if ((command_flags & 0x1000) == 0) {\n      param_4 = (*command_func)(command_buffer, command_params[0x10], param_3 & 0x1000, 1);\n      if ((param_4 == -1) && (param_3 = *command_buffer, param_3 != 0)) {\n        if ((param_3 != 0x1d) && (param_3 != 0x16)) {\n          *(uint16_t *)(command_params + 6) = *(uint16_t *)(command_params + 6) | 0x40;\n          return 0xffffffff;\n        }\n        *command_buffer = result;\n        return 0;\n      }\n    }\n    else {\n      param_4 = command_params[0x17];\n    }\n    if (((int32_t)((uint32_t)*(uint16_t *)(command_params + 6) << 0x1d) < 0) &&\n       (param_4 = param_4 - command_params[1], command_params[0xe] != 0)) {\n      param_4 = param_4 - command_params[0x14];\n    }\n    param_4 = (*(function_pointer_t *)command_params[0xc])(command_buffer, command_params[0x10], param_4, 0);\n    command_flags = *(uint16_t *)(command_params + 6);\n    if ((param_4 == -1) &&\n       ((0x1d < *command_buffer || (-1 < (int32_t)((DAT_080052c8 >> (*command_buffer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(uint16_t *)(command_params + 6) = command_flags | 0x40;\n      return 0xffffffff;\n    }\n    command_params[1] = 0;\n    *command_params = command_params[8];\n    if (((int32_t)((uint32_t)command_flags << 0x13) < 0) && ((param_4 != -1 || (*command_buffer == 0)))) {\n      command_params[0x17] = param_4;\n    }\n    param_2 = (int *)command_params[0xe];\n    *command_buffer = result;\n    if (param_2 != (int *)0x0) {\n      if (param_2 != command_params + 0x12) {\n        _free_r(command_buffer);\n      }\n      command_params[0xe] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051bc",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "execute_command_080051bc"
        },
        "FUN_08004034": {
            "renaming": {
                "FUN_08004034": "handle_UART5_interrupt_08004034",
                "PTR_uart_handlers_08004048": "uart_handlers_ptr",
                "UART5_IRQn": "UART5_interrupt",
                "UART_HandleTypeDef": "UART_handler",
                "uart_handler": "active_UART_handler"
            },
            "code": "void handle_UART5_interrupt_08004034(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART5_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004048 + 0x10);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004034",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART5_interrupt_08004034"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "haltDMAOperation_08000f8c",
                "*hdma": "*dmaHandle",
                "hdma->State": "dmaHandle->State",
                "hdma->ErrorCode": "dmaHandle->ErrorCode",
                "hdma->Instance": "dmaHandle->Instance",
                "hdma->Instance->CR": "dmaHandle->Instance->CR"
            },
            "code": "HAL_StatusTypeDef haltDMAOperation_08000f8c(DMA_HandleTypeDef *dmaHandle)\n{\n    if (dmaHandle->State != HAL_DMA_STATE_BUSY) {\n        dmaHandle->ErrorCode = 0x80;\n        return HAL_ERROR;\n    }\n    dmaHandle->State = HAL_DMA_STATE_ABORT;\n    dmaHandle->Instance->CR = dmaHandle->Instance->CR & 0xfffffffe;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "haltDMAOperation_08000f8c"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "handleI2CEvents_08001684",
                "*hi2c": "*i2cHandle",
                "XferOptions": "transferOptions",
                "State": "state",
                "DAT_08001714": "i2cTransferOptions",
                "Instance": "instance",
                "PreviousState": "previousState",
                "Mode": "mode",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "CR2": "CR2",
                "SR1": "SR1",
                "CR1": "CR1",
                "HAL_OK": "HAL_OK",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback"
            },
            "code": "HAL_StatusTypeDef handleI2CEvents_08001684(I2C_HandleTypeDef *i2cHandle)\n{\n    if (((i2cHandle->transferOptions == 4) || (i2cHandle->transferOptions == 8)) && (i2cHandle->state == HAL_I2C_STATE_LISTEN)) {\n        i2cHandle->transferOptions = DAT_08001714;\n        i2cHandle->instance->CR2 = i2cHandle->instance->CR2 & 0xfffff8ff;\n        i2cHandle->instance->SR1 = 0xfffffbff;\n        i2cHandle->instance->CR1 = i2cHandle->instance->CR1 & 0xfffffbff;\n        i2cHandle->previousState = 0;\n        i2cHandle->state = HAL_I2C_STATE_READY;\n        i2cHandle->mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_ListenCpltCallback(i2cHandle);\n    }\n    else if (i2cHandle->state == HAL_I2C_STATE_BUSY_TX) {\n        i2cHandle->transferOptions = DAT_08001714;\n        i2cHandle->previousState = 0x21;\n        i2cHandle->state = HAL_I2C_STATE_READY;\n        i2cHandle->mode = HAL_I2C_MODE_NONE;\n        i2cHandle->instance->CR2 = i2cHandle->instance->CR2 & 0xfffff8ff;\n        i2cHandle->instance->SR1 = 0xfffffbff;\n        i2cHandle->instance->CR1 = i2cHandle->instance->CR1 & 0xfffffbff;\n        HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n    }\n    else {\n        i2cHandle->instance->SR1 = 0xfffffbff;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CEvents_08001684"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_if_initialized_080001ac",
                "param_1": "input_string",
                "*PTR_completed_8667_080001c4": "completion_flag",
                "DAT_080001c8": "init_flag",
                "PTR__init_080001cc": "init_string"
            },
            "code": "char *check_if_initialized_080001ac(char *input_string) {\\n\\tif (*PTR_completed_8667_080001c4 == \"\\0\") {\\n\\t\\tif (DAT_080001c8 != 0) {\\n\\t\\t\\tinput_string = PTR__init_080001cc;\\n\\t\\t}\\n\\t\\t*PTR_completed_8667_080001c4 = 1;\\n\\t}\\n\\treturn input_string;\\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_one_080040e0(int file_unused) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_08003868": {
            "renaming": {
                "FUN_08003868": "handle_timer_interrupt_08003868",
                "PTR_timer_handles_08003878": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_TIM_interrupt",
                "TIM_HandleTypeDef": "TIM_handle"
            },
            "code": "void handle_timer_interrupt_08003868(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003878_08003878 + 0x34);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003868",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003868"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fillMemory_080048cc",
                "__s": "start_address",
                "__c": "value",
                "__n": "num_bytes",
                "puVar1": "current_address"
            },
            "code": "void * fillMemory_080048cc(void *start_address, int value, size_t num_bytes) {\n  unsigned char *current_address;\n  for (current_address = (unsigned char *) start_address; current_address != (unsigned char *)(num_bytes + (int)start_address); current_address++) {\n    *current_address = (unsigned char) value;\n  }\n  return start_address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "std.isra.0",
                "__sfmoreglue",
                "__sfp"
            ],
            "imported": false,
            "current_name": "fillMemory_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "file_unused_function_080040e4",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer_unused",
                "dir_UNUSED": "directory_unused"
            },
            "code": "int file_unused_function_080040e4(int file_descriptor, int pointer_unused, int directory_unused) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "file_unused_function_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_pin_from_peripheral_08003506",
                "PinMap_conflict": "PinMap",
                "NC": "NoConnection",
                "map": "pin_map",
                "peripheral": "peripheral_ptr"
            },
            "code": "PinName find_pin_from_peripheral_08003506(void *peripheral, PinMap *map) {\n    while (true) {\n        if (map->peripheral == NULL) {\n            return NC;\n        }\n        if (map->peripheral == peripheral) {\n            break;\n        }\n        map++;\n    }\n    return map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "find_pin_from_peripheral_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_system_core_clock_080025e0",
                "PTR_SystemCoreClock_080025e8": "system_core_clock_ptr"
            },
            "code": "uint32_t get_system_core_clock_080025e0(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_system_core_clock_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "calculate_checksum_080040e8",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_length"
            },
            "code": "int calculate_checksum_080040e8(int file_descriptor, char* buffer, int buffer_length)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_checksum_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_register_value_08000a00",
                "this": "modbus",
                "regs": "registers",
                "u8size": "register_count",
                "uVar1": "register_value",
                "uVar2": "bit_index",
                "uVar3": "register_index",
                "au8Buffer": "buffer",
                "sendTxBuffer": "send_tx_buffer",
                "ushort": "uint16_t"
            },
            "code": "int8_t __thiscall Modbus::set_register_value_08000a00(Modbus *modbus, uint16_t *registers, uint8_t register_count) {\n  uint16_t register_value = makeWord(modbus->buffer[2], modbus->buffer[3]);\n  uint register_index = ((uint)register_value << 0x14) >> 0x18;\n  uint bit_index = register_value & 0xf;\n  if (modbus->buffer[4] == 0xff) {\n    registers[register_index] = (ushort)(1 << bit_index) | registers[register_index];\n  }\n  else {\n    registers[register_index] = registers[register_index] & ~(ushort)(1 << bit_index);\n  }\n  modbus->buffer_size = '\\x06';\n  sendTxBuffer(modbus);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_register_value_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "__thiscall std::function<void()>::operator__": "function_caller::call",
                "function_void___* this": "function_base* this_ptr",
                "super__Function_base": "",
                "_M_manager": "",
                "_M_invoker": "",
                "_Any_data": "",
                "__throw_bad_function_call": "",
                "FUN_080047c0": "call_080047c0"
            },
            "code": "void __thiscall_080047c0 function_call_080047c0er::call_080047c0(function_base* this_ptr)\n{\n    if ((this_ptr->_M_manager) != (_Manager_type)0x0) {\n        (*this_ptr->_M_invoker)((_Any_data *)this_ptr);\n        return;\n    }\n    __throw_bad_function_call_080047c0();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "call_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_and_initialize_to_zero_08005374",
                "param_1": "size_of_struct",
                "param_2": "num_of_structs",
                "puVar1": "allocated_memory",
                "iVar2": "total_size"
            },
            "code": "undefined4* allocate_memory_and_initialize_to_zero_08005374(int size_of_struct, int num_of_structs){\n  int total_size = (num_of_structs - 1) * sizeof(my_struct);\n  undefined4* allocated_memory = (undefined4*) _malloc_r(size_of_struct, total_size + sizeof(my_struct));\n  if (allocated_memory != NULL){\n    *allocated_memory = 0;\n    allocated_memory[1] = num_of_structs;\n    allocated_memory[2] = allocated_memory + 3;\n    memset(allocated_memory + 3, 0, total_size + sizeof(my_struct) - 12);\n  }\n  return allocated_memory;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_to_zero_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08004dec;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08004e60;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar6 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08004f42:\n    *puVar3 = uVar7;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "memchr",
                "_printf_common"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "get_stimer_from_timer_handle_08003750",
                "htim": "timer_handle",
                "stimer_t": "stimer",
                "&htim[-1].Lock": "(stimer_t*)&previous_timer_handle->Lock",
                "htim[-1]": "previous_timer_handle",
                "stimer_t*": "stimer*"
            },
            "code": "stimer_t* get_stimer_from_timer_handle_08003750(TIM_HandleTypeDef* timer_handle)\n{\n    TIM_HandleTypeDef* previous_timer_handle = timer_handle - 1;\n    stimer_t* stimer = (stimer_t*)&previous_timer_handle->Lock;\n    return stimer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_timer_handle_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "i2c_slave_listen_080014ec",
                "*hi2c": "*i2c_handle",
                "*pData": "*data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef i2c_slave_listen_080014ec(I2C_HandleTypeDef *i2c_handle, uint8_t *data, uint16_t size, uint32_t transfer_options)\n{\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmpreg;\n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_slave_listen_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "allocate_memory_080048dc",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "filler_1",
                "param_4": "filler_2",
                "puVar1": "pointer",
                "piVar2": "pointer_2",
                "extraout_r1": "pointer_3",
                "ppiVar3": "pointer_4",
                "ppiVar4": "pointer_5",
                "ppiVar5": "pointer_6",
                "ppiVar6": "pointer_7",
                "ppiVar7": "pointer_8",
                "bVar8": "boolean"
            },
            "code": "void allocate_memory_080048dc(int* error_code, int size, int filler_1, int filler_2) {\n    if (size == 0) {\n        return;\n    }\n    int** ppiVar7 = (int**)(size + -4);\n    if (*(int*)(size + -4) < 0) {\n        ppiVar7 = (int**)((int)ppiVar7 + *(int*)(size + -4));\n    }\n    __malloc_lock();\n    void* ptr = PTR___malloc_free_list_08004974;\n    int** ppiVar5 = *(int***)ptr;\n    if (ppiVar5 == NULL) {\n        ppiVar7[1] = NULL;\n        *(int***)ptr = ppiVar7;\n        int** ppiVar3 = extraout_r1;\n        int** ppiVar4 = ptr;\n    }\n    else if (ppiVar7 < ppiVar5) {\n        int** ppiVar3 = *ppiVar7;\n        int** ppiVar4 = (int**)((int)ppiVar7 + (int)ppiVar3);\n        bool bVar8 = ppiVar5 == ppiVar4;\n        if (bVar8) {\n            ppiVar4 = *ppiVar5;\n            ppiVar5 = (int**)ppiVar5[1];\n        }\n        ppiVar7[1] = (int*)ppiVar5;\n        if (bVar8) {\n            ppiVar4 = (int**)((int)ppiVar4 + (int)ppiVar3);\n            *ppiVar7 = (int*)ppiVar4;\n        }\n        *(int***)ptr = ppiVar7;\n    }\n    else {\n        do {\n            int** ppiVar6 = ppiVar5;\n            int** ppiVar4 = (int**)ppiVar6[1];\n            if (ppiVar4 == NULL) break;\n            ppiVar5 = ppiVar4;\n        } while (ppiVar4 <= ppiVar7);\n        int** ppiVar3 = *ppiVar6;\n        if ((int**)((int)ppiVar6 + (int)ppiVar3) == ppiVar7) {\n            ppiVar3 = (int**)((int)ppiVar3 + (int)*ppiVar7);\n            *ppiVar6 = (int*)ppiVar3;\n            if (ppiVar4 == (int**)((int)ppiVar6 + (int)ppiVar3)) {\n                int* piVar2 = *ppiVar4;\n                ppiVar4 = (int**)ppiVar4[1];\n                ppiVar6[1] = (int*)ppiVar4;\n                ppiVar3 = (int**)((int)ppiVar3 + (int)piVar2);\n                *ppiVar6 = (int*)ppiVar3;\n            }\n        }\n        else if (ppiVar7 < (int**)((int)ppiVar6 + (int)ppiVar3)) {\n            *error_code = 0xc;\n        }\n        else {\n            ppiVar3 = (int**)((int)ppiVar7 + (int)*ppiVar7);\n            bool bVar8 = ppiVar4 == ppiVar3;\n            if (bVar8) {\n                ppiVar3 = (int**)*ppiVar4;\n                ppiVar4 = (int**)ppiVar4[1];\n            }\n            ppiVar7[1] = (int*)ppiVar4;\n            if (bVar8) {\n                ppiVar3 = (int**)((int)ppiVar3 + (int)*ppiVar7);\n                *ppiVar7 = (int*)ppiVar3;\n            }\n            ppiVar6[1] = (int*)ppiVar7;\n        }\n    }\n    __malloc_unlock(error_code, ppiVar3, ppiVar4, filler_2);\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "__swsetup_r",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "handle_timer_interrupt_08003754",
                "*htim": "*timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "oc_interrupt_handler"
            },
            "code": "void handle_timer_interrupt_08003754(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  \n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->oc_interrupt_handler != (_func_void_stimer_t_ptr_uint32_t *)0x0) && (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->oc_interrupt_handler)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "i2c_listen_mode_08001578",
                "*hi2c": "*handle",
                "pIVar1": "i2c_instance",
                "hi2c->State": "handle->State",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "hi2c->Instance": "handle->Instance",
                "i2c_instance->CR1": "i2c_instance->CR1",
                "i2c_instance->CR2": "i2c_instance->CR2",
                "|=": "|=",
                "&": "&",
                "==": "=="
            },
            "code": "HAL_StatusTypeDef i2c_listen_mode_08001578(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *i2c_instance;\n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = handle->Instance;\n  if ((i2c_instance->CR1 & 1) == 0) {\n    i2c_instance->CR1 |= 1;\n  }\n  i2c_instance->CR1 |= 0x400;\n  i2c_instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_mode_08001578"
        },
        "FUN_080035ac": {
            "renaming": {
                "FUN_080035ac": "handle_RTC_alarm_interrupt_080035ac",
                "PTR_RtcHandle_080035b8": "rtc_handle"
            },
            "code": "void handle_RTC_alarm_interrupt_080035ac(void)\n{\n  RTC_HandleTypeDef *PTR_RtcHandle_080035b8 = (RTC_HandleTypeDef *)PTR_RtcHandle_080035b8;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_080035b8);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_RTC_alarm_interrupt_080035ac"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "get_value_if_not_null_08004844",
                "param_1": "input_param",
                "param_2": "param_2",
                "DAT_0800485c": "global_variable"
            },
            "code": "long long get_value_if_not_null_08004844(int input_param, unsigned int param_2)\n{\n  if (DAT_0800485c != 0) {\n    return CONCAT44(input_param,2);\n  }\n  return (unsigned long long)param_2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "get_value_if_not_null_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_gpio_0800318c",
                "port_idx": "port_index",
                "DAT_080031d0": "port_A",
                "DAT_080031f8": "port_B",
                "DAT_080031d4": "port_C",
                "DAT_080031d8": "port_D",
                "DAT_080031dc": "port_E",
                "DAT_080031e0": "port_F",
                "DAT_080031e4": "port_G",
                "DAT_080031e8": "port_H",
                "DAT_080031ec": "port_I",
                "DAT_080031f0": "port_J",
                "DAT_080031f4": "port_K"
            },
            "code": "GPIO_TypeDef* get_gpio_0800318c(uint32_t port_idx) {\n    switch(port_idx) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return NULL;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "get_gpio_0800318c"
        },
        "FUN_080001d0": {
            "renaming": {
                "FUN_080001d0": "execute_if_completed_080001d0",
                "PTR_completed_8667_08000210": "completed",
                "DAT_08000214": "function",
                "PTR_object_8672_0800020c": "object",
                "DAT_08000204": "flag"
            },
            "code": "void execute_if_completed_080001d0(){\n    int* PTR_completed_8667_08000210 = (int*)PTR_PTR_completed_8667_08000210_8667_08000210;\n    code* DAT_08000214 = DAT_08000214;\n    if (DAT_08000204 == 0) {\n        return;\n    }\n    if (*PTR_completed_8667_08000210 != 0 && DAT_08000214 != (code*)0x0) {\n        (*DAT_08000214)(PTR_PTR_completed_8667_08000210_8667_08000210,PTR_PTR_object_8672_0800020c_8672_0800020c);\n    }\n    else if (*PTR_completed_8667_08000210 != 0 && DAT_08000214 == (code*)0x0) {\n        return;\n    }\n    else if (*PTR_completed_8667_08000210 == 0 && DAT_08000214 != (code*)0x0) {\n        (*DAT_08000214)();\n    }\n    else {\n        return;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d0",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_completed_080001d0"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "gpio_interrupt_handler_080047d0",
                "GPIO_Pin": "pin_number",
                "bVar1": "pin_id",
                "PTR_gpio_irq_conf_080047ec": "gpio_irq_conf"
            },
            "code": "void gpio_interrupt_handler_080047d0(uint16_t pin_number)\n{\n  uint8_t pin_id = get_pin_id(pin_number);\n  if (*(int *)(PTR_gpio_irq_conf_080047ec + (uint)pin_id * 0x14 + 0xc) != 0) {\n    std::function<void()>::operator__((function_void___ *)(PTR_gpio_irq_conf_080047ec + (uint)pin_id * 0x14 + 4));\n  }\n  return;\n}",
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "gpio_interrupt_handler_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_for_status_080040f8",
                "status_UNUSED": "status"
            },
            "code": "void wait_for_status_080040f8(int status)\n{\n    while(true)\n    {\n        // Do nothing block with infinite loop\n    }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "wait_for_status_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "PTR_errno_08005028": "errno_global_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_0800500c(int *error_code, int size) {\n\tint *errno_ptr;\n\terrno_ptr = PTR_errno_08005028;\n\t*(int *)PTR_errno_08005028 = 0;\n\tvoid *memory_ptr = sbrk(size);\n\tif ((memory_ptr == (void *)-1) && (*(int *)errno_ptr != 0)) {\n\t\t*error_code = *(int *)errno_ptr;\n\t}\n\treturn;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "DAT_0800247c": "control_register_address",
                "DAT_08002480": "default_frequency",
                "DAT_08002484": "high_frequency",
                "uVar1": "control_register_value",
                "uVar2": "numerator",
                "frequency": "calculated_frequency",
                "frequency_divider": "frequency_divider_value",
                "is_frequency_doubled": "is_frequency_doubled_value",
                "is_frequency_inverted": "is_frequency_inverted_value",
                "frequency_offset": "frequency_offset_value",
                "numerator": "numerator_value",
                "denominator": "denominator_value"
            },
            "code": "uint32_t calculate_frequency_080023b4(void)\n{\n  uint32_t frequency = 0;\n  uint32_t control_register = *(uint32_t *)(DAT_0800247c + 8);\n  uint32_t frequency_divider = *(uint32_t *)(DAT_0800247c + 4);\n  uint32_t is_frequency_doubled = (frequency_divider >> 14) & 1;\n  uint32_t is_frequency_inverted = (frequency_divider >> 22) & 1;\n  uint32_t frequency_offset = frequency_divider & 0x3F;\n  uint32_t numerator = 0;\n  uint32_t denominator = 0;\n  if ((control_register & 0xC) == 4)\n  {\n    frequency = DAT_08002484;\n  }\n  else if ((control_register & 0xC) == 8)\n  {\n    if ((frequency_divider & 0x400000) == 0)\n    {\n      numerator = ((int32_t)frequency_divider << 17) >> 23;\n      denominator = (((numerator * 0x20 < numerator) ? -0x3F : 0) - ((numerator * 0x7C0 < numerator * 0x1F) ? 0x1F : 0)) * 8 + ((numerator * 0x3D08 + numerator) >> 16);\n      frequency = __aeabi_uldivmod(numerator * 16000000, denominator * 0x400 | (numerator * 0x3D09) >> 22, frequency_offset, 0);\n    }\n    else\n    {\n      numerator = ((int32_t)frequency_divider << 17) >> 23;\n      denominator = (((numerator * 0x20 < numerator) ? -0x3F : 0) - ((numerator * 0x7C0 < numerator * 0x1F) ? 0x1F : 0)) * 8 + ((numerator * 0x3D08 + numerator) >> 16);\n      frequency = __aeabi_uldivmod(numerator * 8000000, denominator * 0x200, frequency_offset, 0);\n    }\n    frequency /= (((frequency_divider << 18) >> 30) + 1) * 2;\n  }\n  else\n  {\n    frequency = DAT_08002480;\n  }\n  return frequency;\n}",
            "called": [
                "__aeabi_uldivmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_frequency_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "GPIO_Pin_Change_Callback_080011a4",
                "GPIO_Pin": "pin",
                "DAT_080011bc": "gpio_pin_data_address",
                "PTR_": "ptr_",
                "current_pin_state": "current_pin_state",
                "gpio_pin_ptr": "gpio_pin_ptr"
            },
            "code": "void GPIO_Pin_Change_Callback_080011a4(uint16_t pin) {\n  uint32_t* gpio_pin_ptr = (uint32_t*)(DAT_080011bc + 0x14);\n  uint32_t current_pin_state = *gpio_pin_ptr;\n  if ((current_pin_state & (uint32_t)pin) != 0) {\n    *gpio_pin_ptr = (uint32_t)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}\n",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [
                "EXTI0_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "GPIO_Pin_Change_Callback_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_i2c_errors_08001e68",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "i2c_instance",
                "uVar3": "sr1",
                "uVar4": "cr2",
                "DAT_08001f38": "I2C_SR1_ERROR_MASK",
                "0x100": "I2C_CR2_ERROR_INTERRUPT_ENABLE",
                "1": "I2C_ERROR_CODE_BUS_ERROR",
                "0xfffffeff": "I2C_CLEAR_BUS_ERROR_FLAG",
                "0x10200": "I2C_SR1_ADDR_MASK",
                "2": "I2C_ERROR_CODE_ARBITRATION_LOST",
                "0xfffffdff": "I2C_CLEAR_ARBITRATION_LOST_FLAG",
                "0x10400": "I2C_SR1_STOPF_MASK",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "0x21": "I2C_PREVIOUS_STATE_LISTEN",
                "4": "I2C_ERROR_CODE_STOP_FAILURE",
                "0xfffffbff": "I2C_CLEAR_STOP_FLAG",
                "0x10800": "I2C_SR1_BERR_MASK",
                "8": "I2C_ERROR_CODE_BUS_ERROR",
                "0xfffff7ff": "I2C_CLEAR_BUS_ERROR_FLAG"
            },
            "code": "void check_i2c_errors_08001e68(I2C_HandleTypeDef *handle)\n{\n    HAL_I2C_StateTypeDef state;\n    I2C_TypeDef *i2c_instance;\n    uint32_t sr1;\n    uint32_t cr2;\n    \n    i2c_instance = handle->Instance;\n    sr1 = i2c_instance->SR1;\n    cr2 = i2c_instance->CR2;\n    \n    if (((sr1 & DAT_08001f38) != 0) && ((cr2 & I2C_CR2_ERROR_INTERRUPT_ENABLE) != 0)) {\n        handle->ErrorCode |= I2C_ERROR_CODE_BUS_ERROR;\n        i2c_instance->SR1 = I2C_CLEAR_BUS_ERROR_FLAG;\n    }\n    if (((sr1 & I2C_SR1_ADDR_MASK) != 0) && ((cr2 & I2C_CR2_ADDR_INTERRUPT_ENABLE) != 0)) {\n        handle->ErrorCode |= I2C_ERROR_CODE_ARBITRATION_LOST;\n        i2c_instance->SR1 = I2C_CLEAR_ARBITRATION_LOST_FLAG;\n    }\n    if (((sr1 & I2C_SR1_STOPF_MASK) != 0) && ((cr2 & I2C_CR2_STOP_INTERRUPT_ENABLE) != 0)) {\n        state = handle->State;\n        if (((handle->Mode == HAL_I2C_MODE_SLAVE) && (handle->XferCount == 0)) && (((state == HAL_I2C_STATE_BUSY_TX) || (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((state == HAL_I2C_STATE_LISTEN) && (handle->PreviousState == I2C_PREVIOUS_STATE_LISTEN)))) {\n            I2C_Slave_AF(handle);\n        }\n        else {\n            handle->ErrorCode |= I2C_ERROR_CODE_STOP_FAILURE;\n            if (handle->Mode == HAL_I2C_MODE_MASTER) {\n                i2c_instance->CR1 |= I2C_CR1_ACKNOWLEDGE;\n            }\n            i2c_instance->SR1 = I2C_CLEAR_STOP_FLAG;\n        }\n    }\n    if (((sr1 & I2C_SR1_BERR_MASK) != 0) && ((cr2 & I2C_CR2_ERROR_INTERRUPT_ENABLE) != 0)) {\n        handle->ErrorCode |= I2C_ERROR_CODE_BUS_ERROR;\n        i2c_instance->SR1 = I2C_CLEAR_BUS_ERROR_FLAG;\n    }\n    if (handle->ErrorCode != 0) {\n        I2C_ITError(handle);\n    }\n}\n",
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [
                "I2C1_ER_IRQHandler",
                "I2C2_ER_IRQHandler",
                "I2C3_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_errors_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "readI2CData_080019a0",
                "hi2c": "I2C_Handle",
                "puVar1": "bufferPtr"
            },
            "code": "HAL_StatusTypeDef readI2CData_080019a0(I2C_HandleTypeDef *hi2c)\n{\n  uint8_t *bufferPtr;\n  \n  if (hi2c->XferCount == 4) {\n    hi2c->Instance->CR2 &= 0xfffffbff;\n    bufferPtr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount = hi2c->XferCount - 1;\n  }\n  else if (hi2c->XferCount == 3) {\n    hi2c->Instance->CR2 &= 0xfffffbff;\n    hi2c->Instance->CR1 &= 0xfffffbff;\n    bufferPtr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount = hi2c->XferCount - 1;\n  }\n  else if (hi2c->XferCount == 2) {\n    if (hi2c->XferOptions - 1 < 2) {\n      hi2c->Instance->CR1 &= 0xfffffbff;\n      hi2c->Instance->CR1 |= 0x100;\n    }\n    else {\n      hi2c->Instance->CR1 |= 0x200;\n    }\n    bufferPtr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount = hi2c->XferCount - 1;\n    bufferPtr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount = hi2c->XferCount - 1;\n    hi2c->Instance->CR2 &= 0xfffffcff;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->PreviousState = 0;\n    if (hi2c->Mode == HAL_I2C_MODE_MEM) {\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(hi2c);\n    }\n    else {\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(hi2c);\n    }\n  }\n  else {\n    bufferPtr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount = hi2c->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "readI2CData_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "handle_uart_data_08003f24",
                "*huart": "*uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "index_value_as_uint"
            },
            "code": "void handle_uart_data_08003f24(UART_HandleTypeDef *uart_handle) {\n  byte uart_index_value;\n  uint index_value_as_uint;\n  \n  uart_index_value = get_uart_index(uart_handle);\n  index_value_as_uint = (uint)uart_index_value;\n  if (index_value_as_uint < 10) {\n    (**(code **)(PTR_rx_callback_08003f40 + index_value_as_uint * 4))\n              (*(undefined4 *)(PTR_rx_callback_obj_08003f44 + index_value_as_uint * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "handle_uart_data_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "configure_gpio_irq_080046b4",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "PTR_gpio_irq_conf_08004754": "gpio_irq_conf_ptr",
                "*PTR_gpio_irq_conf_08004754": "gpio_irq_conf[0]",
                "*(undefined4 *)(puVar1 + 0xc)": "*(undefined4 *)(gpio_irq_conf_ptr + 0xc)",
                "puVar1[0x14]": "gpio_irq_conf_ptr[0x14]",
                "*(undefined4 *)(puVar1 + 0x20)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x20)",
                "puVar1[0x28]": "gpio_irq_conf_ptr[0x28]",
                "*(undefined4 *)(puVar1 + 0x34)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x34)",
                "puVar1[0x3c]": "gpio_irq_conf_ptr[0x3c]",
                "*(undefined4 *)(puVar1 + 0x48)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x48)",
                "puVar1[0x50]": "gpio_irq_conf_ptr[0x50]",
                "*(undefined4 *)(puVar1 + 0x5c)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x5c)",
                "puVar1[100]": "gpio_irq_conf_ptr[100]",
                "*(undefined4 *)(puVar1 + 0x70)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x70)",
                "puVar1[0x78]": "gpio_irq_conf_ptr[0x78]",
                "*(undefined4 *)(puVar1 + 0x84)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x84)",
                "puVar1[0x8c]": "gpio_irq_conf_ptr[0x8c]",
                "*(undefined4 *)(puVar1 + 0x98)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x98)",
                "puVar1[0xa0]": "gpio_irq_conf_ptr[0xa0]",
                "*(undefined4 *)(puVar1 + 0xac)": "*(undefined4 *)(gpio_irq_conf_ptr + 0xac)",
                "puVar1[0xb4]": "gpio_irq_conf_ptr[0xb4]",
                "*(undefined4 *)(puVar1 + 0xc0)": "*(undefined4 *)(gpio_irq_conf_ptr + 0xc0)",
                "puVar1[200]": "gpio_irq_conf_ptr[200]",
                "*(undefined4 *)(puVar1 + 0xd4)": "*(undefined4 *)(gpio_irq_conf_ptr + 0xd4)",
                "puVar1[0xdc]": "gpio_irq_conf_ptr[0xdc]",
                "*(undefined4 *)(puVar1 + 0xe8)": "*(undefined4 *)(gpio_irq_conf_ptr + 0xe8)",
                "puVar1[0xf0]": "gpio_irq_conf_ptr[0xf0]",
                "*(undefined4 *)(puVar1 + 0xfc)": "*(undefined4 *)(gpio_irq_conf_ptr + 0xfc)",
                "puVar1[0x104]": "gpio_irq_conf_ptr[0x104]",
                "*(undefined4 *)(puVar1 + 0x110)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x110)",
                "puVar1[0x118]": "gpio_irq_conf_ptr[0x118]",
                "*(undefined4 *)(puVar1 + 0x124)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x124)",
                "puVar1[300]": "gpio_irq_conf_ptr[300]",
                "*(undefined4 *)(puVar1 + 0x138)": "*(undefined4 *)(gpio_irq_conf_ptr + 0x138)",
                "DAT_0800475c": "at_exit_handler",
                "PTR___dso_handle_08004758": "dso_handle_ptr"
            },
            "code": "void configure_gpio_irq_080046b4(int should_initialize, int priority)\n{\n  undefined *PTR_gpio_irq_conf_08004754;\n  PTR_gpio_irq_conf_08004754 = gpio_irq_conf;\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    *PTR_gpio_irq_conf_08004754 = 6;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xc) = 0;\n    PTR_gpio_irq_conf_08004754[0x14] = 7;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x20) = 0;\n    PTR_gpio_irq_conf_08004754[0x28] = 8;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x34) = 0;\n    PTR_gpio_irq_conf_08004754[0x3c] = 9;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x48) = 0;\n    PTR_gpio_irq_conf_08004754[0x50] = 10;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x5c) = 0;\n    PTR_gpio_irq_conf_08004754[100] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x70) = 0;\n    PTR_gpio_irq_conf_08004754[0x78] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x84) = 0;\n    PTR_gpio_irq_conf_08004754[0x8c] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x98) = 0;\n    PTR_gpio_irq_conf_08004754[0xa0] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xac) = 0;\n    PTR_gpio_irq_conf_08004754[0xb4] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xc0) = 0;\n    PTR_gpio_irq_conf_08004754[200] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xd4) = 0;\n    PTR_gpio_irq_conf_08004754[0xdc] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xe8) = 0;\n    PTR_gpio_irq_conf_08004754[0xf0] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xfc) = 0;\n    PTR_gpio_irq_conf_08004754[0x104] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x110) = 0;\n    PTR_gpio_irq_conf_08004754[0x118] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x124) = 0;\n    PTR_gpio_irq_conf_08004754[300] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x138) = 0;\n    __aeabi_atexit(0, DAT_0800475c, PTR___dso_handle_08004758);\n  }\n  return;\n}\n",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "configure_gpio_irq_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "i2c_data_transfer_0800160e",
                "hi2c": "i2c_handler",
                "HVar1": "i2c_state",
                "puVar2": "data_ptr"
            },
            "code": "HAL_StatusTypeDef i2c_data_transfer_0800160e(I2C_HandleTypeDef *i2c_handler)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *data_ptr;\n  i2c_state = i2c_handler->State;\n  if (i2c_handler->XferCount != 0) {\n    data_ptr = i2c_handler->pBuffPtr;\n    i2c_handler->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handler->Instance->DR;\n    i2c_handler->XferCount = i2c_handler->XferCount - 1;\n    if ((i2c_handler->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handler->Instance->CR2 = i2c_handler->Instance->CR2 & 0xfffffbff;\n      i2c_handler->PreviousState = 0x22;\n      i2c_handler->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handler);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_data_transfer_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_uwTick_08000e18",
                "PTR_uwTick_08000e28": "g_uwTick",
                "PTR_uwTickFreq_08000e2c": "g_uwTickFreq",
                "uint": "uint32_t",
                "byte": "uint8_t",
                "*(uint *)PTR_uwTick_08000e28": "*g_uwTick",
                "*(int *)PTR_uwTick_08000e28": "*g_uwTick",
                "*PTR_uwTickFreq_08000e2c": "*g_uwTickFreq"
            },
            "code": "void update_uwTick_08000e18(void)\n{\n  uint8_t tick_freq = *PTR_uwTickFreq_08000e2c;\n  uint32_t* tick_ptr = PTR_uwTick_08000e28;\n  *tick_ptr = tick_freq + *tick_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uwTick_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "configure_GPIO_pin_08003486",
                "PinName_conflict": "pin",
                "mode": "mode",
                "pull": "pull",
                "GPIOx": "GPIO_port",
                "GPIO_InitTypeDef": "GPIO_config",
                "GPIO_InitStructure": "GPIO_config",
                "set_GPIO_Port_Clock": "get_GPIO_port",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void configure_GPIO_pin_08003486(PinName_conflict pin, uint32_t mode, uint32_t pull) {\n    GPIO_TypeDef *GPIO_port;\n    GPIO_InitTypeDef GPIO_config;\n\n    GPIO_port = get_GPIO_port((uint)((int)pin << 0x18) >> 0x1c);\n    GPIO_config.Pin = 1 << ((int)pin & 0xfU) & 0xffff;\n    GPIO_config.Speed = GPIO_SPEED_FREQ_HIGH;\n    GPIO_config.Mode = mode;\n    GPIO_config.Pull = pull;\n    HAL_GPIO_Init(GPIO_port, &GPIO_config);\n    return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pin_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "seek_and_update_08005662",
                "param_1": "file_descriptor",
                "param_2": "parameters",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "bVar3": "seek_failed"
            },
            "code": "void seek_and_update_08005662(int file_descriptor, int* parameters)\n{\n    int seek_result;\n    ushort flag;\n    bool seek_failed;\n    \n    seek_result = _lseek_r(file_descriptor,(int)*(short *)(parameters + 0xe));\n    seek_failed = seek_result == -1;\n    \n    if (seek_failed) {\n        flag = *(ushort *)(parameters + 0xc) & 0xefff;\n    }\n    else {\n        *(int *)(parameters + 0x54) = seek_result;\n        flag = *(ushort *)(parameters + 0xc) | 0x1000;\n    }\n    \n    *(ushort *)(parameters + 0xc) = flag;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "receive_serial_data_080042ac",
                "obj": "serial_obj",
                "iVar1": "receive_status",
                "uVar2": "next_rx_head_position",
                "c": "received_char",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "rx_buff": "rx_buffer"
            },
            "code": "void receive_serial_data_080042ac(serial_t_conflict *serial_obj) {\n  int receive_status;\n  ushort next_rx_head_position;\n  uchar received_char;\n  \n  receive_status = uart_getc((serial_t *)serial_obj, &received_char);\n  if ((receive_status == 0) && ((next_rx_head_position = serial_obj->rx_head + 1 & 0x3f) != serial_obj->rx_tail)) {\n    serial_obj->rx_buffer[serial_obj->rx_head] = received_char;\n    serial_obj->rx_head = next_rx_head_position;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "receive_serial_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "handleI2CTransmission_08001864",
                "*hi2c": "*i2cHandle",
                "uVar1": "transferOptions",
                "pbVar2": "bufferPtr"
            },
            "code": "HAL_StatusTypeDef handleI2CTransmission_08001864(I2C_HandleTypeDef *i2cHandle) {\n  uint32_t transferOptions = i2cHandle->XferOptions;\n  if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2cHandle->XferCount == 0) {\n      if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2cHandle);\n        }\n      }\n      else {\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        i2cHandle->PreviousState = 0x11;\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    }\n    else {\n      uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      i2cHandle->Instance->DR = (uint)*bufferPtr;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CTransmission_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_clk_source_08000f2c",
                "CLKSource": "clk_source",
                "*DAT_08000f48": "*clk_register"
            },
            "code": "void set_clk_source_08000f2c(uint32_t clk_source)\n{\n    if (clk_source != 4)\n    {\n        *DAT_08000f48 &= 0xfffffffb;\n    }\n    else\n    {\n        *DAT_08000f48 |= 4;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clk_source_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_interrupt_handler_08000ec4",
                "IRQn": "interrupt_number",
                "uVar1": "irq_number",
                "DAT_08000edc": "interrupt_enable_register_base",
                "PTR_08000edc": "interrupt_enable_register_pointer"
            },
            "code": "void set_interrupt_handler_08000ec4(IRQn_Type_conflict IRQn) {\n  uint32_t irq_number = (uint32_t)IRQn;\n  if (irq_number >= 0) {\n    uint32_t irq_word_offset = irq_number >> 5;\n    uint32_t irq_bit_offset = irq_number & 0x1f;\n    uint32_t* interrupt_enable_register = (uint32_t*)(DAT_08000edc + irq_word_offset * 4);\n    *interrupt_enable_register |= 1 << irq_bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkSerial3Available_08004338",
                "DAT_0800435c": "serial3Initialized",
                "PTR_Serial3_08004360": "serial3"
            },
            "code": "void checkSerial3Available_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    HardwareSerial::available(PTR_Serial3_08004360);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial3Available_08004338"
        },
        "FUN_08003928": {
            "renaming": {
                "FUN_08003928": "handle_i2c_error_interrupt_08003928",
                "PTR_i2c_handles_08003934": "i2c_handle_pointer"
            },
            "code": "void handle_i2c_error_interrupt_08003928(void)\n{\n  I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef**)PTR_i2c_handles_08003934;\n  HAL_I2C_ER_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003928",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003928"
        },
        "FUN_0800468c": {
            "renaming": {
                "FUN_0800468c": "free_gpio_irq_configurations_0800468c",
                "param_1": "configurations",
                "puVar1": "current_configuration",
                "puVar2": "previous_configuration"
            },
            "code": "void free_gpio_irq_configurations_0800468c(void *configurations)\n{\n    undefined *current_configuration;\n    undefined *previous_configuration;\n\n    current_configuration = PTR___malloc_free_list_080046ac;\n    while (previous_configuration = current_configuration, previous_configuration != PTR_gpio_irq_conf_080046b0) {\n        current_configuration = previous_configuration + -0x14;\n        if (*(code **)(previous_configuration + -8) != (code *)0x0) {\n            (**(code **)(previous_configuration + -8))(previous_configuration + -0x10, previous_configuration + -0x10, 3);\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800468c",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_0800468c"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "read_memory_080005e0",
                "a0": "address",
                "a1": "data",
                "a2": "size"
            },
            "code": "uint32_t read_memory_080005e0(uint32_t address, uint32_t data, int32_t size) {\n    software_interrupt(0x3f);\n    return address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "read_memory_080005e0"
        },
        "FUN_0800311c": {
            "renaming": {
                "FUN_0800311c": "reset_uart_errors_0800311c",
                "*hdma": "dma_handle",
                "*huart": "uart_handle",
                "RxXferCount": "rx_transfer_count",
                "TxXferCount": "tx_transfer_count",
                "HAL_UART_ErrorCallback": "handle_uart_error"
            },
            "code": "void reset_uart_errors_0800311c(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800311c",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_errors_0800311c"
        },
        "FUN_0800420c": {
            "renaming": {
                "FUN_0800420c": "calculateNextTailPosition_0800420c",
                "obj": "serial_obj",
                "uVar1": "next_tail_pos",
                "uVar2": "masked_tail_pos",
                "iVar3": "next_tail_pos_raw"
            },
            "code": "int calculateNextTailPosition_0800420c(serial_t_conflict *serial_obj)\n{\n  const ushort next_tail_pos = serial_obj->tx_tail + 1;\n  const ushort masked_tail_pos = next_tail_pos & 0x7f;\n  if (next_tail_pos == 0) {\n    serial_obj->tx_tail = -(-next_tail_pos & 0x7f);\n  } else {\n    serial_obj->tx_tail = masked_tail_pos;\n  }\n  if (serial_obj->tx_head != serial_obj->tx_tail) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800420c",
            "calling": [],
            "imported": false,
            "current_name": "calculateNextTailPosition_0800420c"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "performAflCall_080005e4",
                "ticks": "numTicks",
                "uVar1": "result"
            },
            "code": "uint32_t performAflCall_080005e4(int ticks) {\n  uint32_t result = 0;\n  if (*(int *)PTR_noHyperCall_080005fc != 0) {\n    return result;\n  }\n  result = aflCall(1, ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "performAflCall_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "sendModbusMessage_0800076c",
                "this": "modbusInstance",
                "u8length": "messageLength",
                "uVar1": "crc",
                "uVar4": "messageEnd",
                "u8txenpin": "transmitEnablePin",
                "u8serno": "serialNumber",
                "port": "serialPort",
                "au8Buffer": "buffer",
                "u8BufferSize": "bufferSize",
                "u16timeOut": "timeoutInterval",
                "u32timeOut": "timeout",
                "u16OutCnt": "messageSentCount",
                "iVar2": "serialPortStatus"
            },
            "code": "void __thiscall sendModbusMessage_0800076c(Modbus *modbusInstance) {\\n    byte messageLength = modbusInstance->bufferSize;\\n    uint16_t crc = calculateCRC(modbusInstance, messageLength);\\n    modbusInstance->buffer[messageLength] = (uint8_t)((uint)crc >> 8);\\n    uint messageEnd = messageLength + 1 & 0xff;\\n    modbusInstance->buffer[messageEnd] = (uint8_t)crc;\\n    modbusInstance->bufferSize = (char)messageEnd + \"\\x01\";\\n    if (modbusInstance->transmitEnablePin > 1) {\\n        digitalWrite((uint)modbusInstance->transmitEnablePin, 1);\\n    }\\n    if (modbusInstance->serialNumber < 4) {\\n        (*(modbusInstance->serialPort->super_Stream).super_Print._vptr_Print[1])(modbusInstance->serialPort, modbusInstance->buffer, (uint)modbusInstance->bufferSize);\\n    }\\n    if (modbusInstance->transmitEnablePin > 1) {\\n        digitalWrite((uint)modbusInstance->transmitEnablePin, 0);\\n    }\\n    if (modbusInstance->serialNumber < 4) {\\n        do {\\n            int serialPortStatus = (*(modbusInstance->serialPort->super_Stream).super_Print._vptr_Print[3])();\\n        } while (serialPortStatus >= 0);\\n    }\\n    modbusInstance->bufferSize = \"\\0\";\\n    uint32_t currentTime = millis();\\n    modbusInstance->timeout = currentTime + modbusInstance->timeoutInterval;\\n    modbusInstance->messageSentCount = modbusInstance->messageSentCount + 1;\\n}",
            "called": [
                "digitalWrite",
                "millis",
                "calcCRC"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "process_FC5",
                "process_FC3",
                "process_FC1",
                "process_FC6",
                "poll",
                "process_FC15",
                "process_FC16"
            ],
            "imported": false,
            "current_name": "sendModbusMessage_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_08004460": "setSerialTransmitPin",
                "this": "serial",
                "_tx": "transmitPin",
                "PVar1": "pin",
                "PTR_digitalPin_08004478": "digitalPinTable",
                "FUN_08004460": "setSerialTransmitPin_08004460"
            },
            "code": "void setSerialTransmitPin_08004460(HardwareSerial *serial, uint32_t transmitPin) {\n    PinName pin;\n    if (transmitPin < 0x60) {\n        pin = *(PinName *)(PTR_digitalPin_08004478 + transmitPin * 2);\n    } else {\n        pin = NC;\n    }\n    (serial->_serial).pin_tx = pin;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setSerialTransmitPin_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_GPIO_Pin_State_08001198",
                "GPIOx": "GPIO_Port",
                "GPIO_Pin": "Pin_Number",
                "PinState": "Pin_State",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_GPIO_Pin_State_08001198(GPIO_TypeDef *GPIO_Port, uint16_t Pin_Number, GPIO_PinState Pin_State) {\n  if (Pin_State == GPIO_PIN_RESET) {\n    GPIO_Port->BSRR = (uint)Pin_Number << 0x10;\n    return;\n  }\n  GPIO_Port->BSRR = (uint)Pin_Number;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_GPIO_Pin_State_08001198"
        },
        "FUN_080044fc": {
            "renaming": {
                "FUN_080044fc": "initialize_static_data_080044fc"
            },
            "code": "void initialize_static_data_080044fc(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044fc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_080044fc"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "is_pin_high_08003138",
                "pin": "pin_name",
                "map": "pin_map",
                "map[(uint)((int)pin << 0x18) >> 0x1c]": "map_value",
                "pin & 0xfU": "pin_mask",
                "(_Bool)((byte)(map[(uint)((int)pin << 0x18) >> 0x1c] >> ((int)pin & 0xfU)) & 1)": "(pin_value != 0)"
            },
            "code": "_Bool is_pin_high_08003138(PinName_conflict pin, uint32_t *map) {\n  uint32_t pin_shifted = (uint32_t) pin << 24;  // Shift the pin number to the left by 24 bits\n  uint32_t index = pin_shifted >> 28;  // Shift the pin number back to the right by 28 bits to get the index\n  uint32_t pin_mask = (1U << (pin & 0xF));  // Create a bitmask for the pin\n  uint32_t map_value = map[index];  // Get the value from the map at the index\n  uint32_t pin_value = map_value & pin_mask;  // Extract the value for the pin from the map value\n  return (_Bool)(pin_value != 0);  // Return true if the pin value is not 0, false otherwise\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "digitalWrite",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_high_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_080005dc": {
            "renaming": {
                "FUN_080005dc": "do_nothing_080005dc"
            },
            "code": "\nvoid do_nothing_080005dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080005dc"
        },
        "FUN_08003810": {
            "renaming": {
                "FUN_08003810": "handle_timer_interrupts_08003810",
                "PTR_timer_handles_08003828": "PTR_timer_handles_08003828",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "timer_handle_1": "timer_handle_1",
                "timer_handle_2": "timer_handle_2",
                "0x1c": "0x1c",
                "0x30": "0x30",
                "NULL": "NULL"
            },
            "code": "void handle_timer_interrupts_08003810(void)\n{\n  TIM_HandleTypeDef *timer_handle_1 = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003828 + 0x1c);\n  TIM_HandleTypeDef *timer_handle_2 = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003828 + 0x30);\n  if (timer_handle_1 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle_1);\n  }\n  if (timer_handle_2 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle_2);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003810",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_08003810"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_channel_state_08002848",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state"
            },
            "code": "void set_channel_state_08002848(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n    uint32_t bit_position = channel & 0xff;\n    uint32_t bit_mask = ~(1 << bit_position);\n    uint32_t channel_state = state << bit_position;\n    timer->CCER &= bit_mask;\n    timer->CCER |= channel_state;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "set_channel_state_08002848"
        },
        "FUN_08003938": {
            "renaming": {
                "FUN_08003938": "handle_i2c_events_08003938",
                "PTR_i2c_handles_08003944": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_events_08003938(void)\n{\n  I2C_HandleTypeDef *i2c_handle = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003944_08003944 + 4);\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003938",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_events_08003938"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "GetCombinedRxStateAndGState_0800312c",
                "huart": "UART_HandleTypeDefPointer",
                "huart->RxState": "RxState",
                "huart->gState": "gState",
                "HAL_UART_StateTypeDef": "UARTStateType",
                "combinedState": "combinedState"
            },
            "code": "HAL_UART_StateTypeDef GetCombinedRxStateAndGState_0800312c(UART_HandleTypeDef *huart)\n{\n  HAL_UART_StateTypeDef combinedState = huart->RxState | huart->gState;\n  return combinedState;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "imported": false,
            "current_name": "GetCombinedRxStateAndGState_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "configureTimerChannel_080028f0",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "HAL_StatusTypeDef": "return type",
                "TIM_CCxNChannelCmd": "configureTimerChannelCmd",
                "Instance": "timerInstance",
                "CCER": "captureCompareEnableRegister",
                "BDTR": "breakAndDeadTimeRegister",
                "CR1": "controlRegister1",
                "0x1111": "bitMask1",
                "0x444": "bitMask2"
            },
            "code": "HAL_StatusTypeDef configureTimerChannel_080028f0(TIM_HandleTypeDef *timerHandle, uint32_t channel)\n{\n  TIM_TypeDef *timerInstance = timerHandle->Instance;\n  TIM_CCxNChannelCmd(timerInstance, channel, 0);\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->BDTR &= 0xffff7fff;\n  }\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 &= 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "configureTimerChannel_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_uwTick_value_08000e30",
                "PTR_uwTick_08000e38": "uwTick_address"
            },
            "code": "uint32_t get_uwTick_value_08000e30(void)\n{\n  uint32_t* PTR_uwTick_08000e38 = (uint32_t*)PTR_uwTick_08000e38;\n  uint32_t uwTick_value = *PTR_uwTick_08000e38;\n  return uwTick_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "GetCurrentMilli",
                "HAL_UART_Transmit",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_PWREx_EnableOverDrive",
                "UART_WaitOnFlagUntilTimeout",
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "resetDacState_08000f56",
                "hdac": "dac_handle",
                "HAL_DAC_StateTypeDef": "HAL_StatusTypeDef",
                "HAL_DAC_StateTypeDef_RESET": "HAL_DAC_STATE_RESET",
                "HAL_DAC_StateTypeDef_BUSY": "HAL_DAC_STATE_BUSY",
                "HAL_DAC_StateTypeDef_ERROR": "HAL_DAC_STATE_ERROR",
                "HAL_DAC_MspDeInit": "HAL_DAC_MspDeInit",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "ErrorCode": "ErrorCode",
                "State": "State",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "HAL_StatusTypeDef resetDacState_08000f56(DAC_HandleTypeDef *dac_handle)\n{\n  if (dac_handle != NULL) {\n    dac_handle->State = HAL_DAC_STATE_BUSY;\n    HAL_DAC_MspDeInit(dac_handle);\n    dac_handle->ErrorCode = 0;\n    dac_handle->State = HAL_DAC_STATE_RESET;\n    dac_handle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_DAC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "resetDacState_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "transmitData_0800295c",
                "huart": "uart",
                "uVar1": "count",
                "pbVar2": "data",
                "HAL_UART_STATE_BUSY_TX": "HAL_BUSY",
                "HAL_OK": "HAL_OK",
                "Init": "init",
                "WordLength": "wordLength",
                "Parity": "parity",
                "pTxBuffPtr": "pData",
                "Instance": "instance",
                "TxXferCount": "TxCount",
                "CR1": "CR1"
            },
            "code": "HAL_StatusTypeDef transmitData_0800295c(UART_HandleTypeDef *uart)\n{\n  uint16_t count;\n  byte *data;\n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == 0x1000) {\n    uart->Instance->DR = *(ushort *)uart->pData & 0x1ff;\n    if ((uart->Init).Parity == 0) {\n      uart->pData = uart->pData + 2;\n    }\n    else {\n      uart->pData = uart->pData + 1;\n    }\n  }\n  else {\n    data = uart->pData;\n    uart->pData = data + 1;\n    uart->Instance->DR = (uint)*data;\n  }\n  count = uart->TxXferCount - 1;\n  uart->TxXferCount = count;\n  if (count == 0) {\n    uart->Instance->CR1 = uart->Instance->CR1 & 0xffffff7f;\n    uart->Instance->CR1 = uart->Instance->CR1 | 0x40;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "transmitData_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "get_dac_function_08003380",
                "pin": "pin_name",
                "uVar1": "function_code",
                "PTR_PinMap_DAC_08003398": "DAC_PinMap"
            },
            "code": "uint32_t get_dac_function_08003380(PinName_conflict pin){\n  uint32_t function_code;\n  function_code = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_DAC_08003398);\n  if ((function_code << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "get_dac_function_08003380"
        },
        "FUN_08005686": {
            "renaming": {
                "FUN_08005686": "close_file_descriptor_08005686",
                "param_1": "file_descriptor",
                "param_2": "offset"
            },
            "code": "void close_file_descriptor_08005686(int file_descriptor, int offset) {\n  _close_r(file_descriptor, (int)*(short *)(offset + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005686",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08005686"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "configure_output_pin_08004110",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_configured",
                "pin": "pin_name",
                "PinName_conflict": "PinName_conflict",
                "PTR_digitalPin_080041a8": "digitalPin",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured",
                "PTR_g_anOutputPinConfigured_080041ac": "g_anOutputPinConfigured",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_DAC_080041b0": "PinMap_DAC",
                "dac_stop": "dac_stop",
                "PTR_PinMap_PWM_080041b4": "PinMap_PWM",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "switch": "switch",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_080041b8": "g_digPinConfigured"
            },
            "code": "void configure_output_pin_08004110(uint32_t pin_number, uint32_t mode)\n{\n  bool is_pin_configured;\n  PinName_conflict pin_name;\n  if (pin_number < 0x60) {\n    pin_name = *(PinName_conflict *)(PTR_digitalPin_080041a8 + pin_number * 2);\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_configured = is_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_080041ac);\n    if (is_pin_configured) {\n      if (pin_in_pinmap(pin_name, (PinMap_conflict *)PTR_PinMap_DAC_080041b0)) {\n        dac_stop(pin_name);\n      }\n      else if (pin_in_pinmap(pin_name, (PinMap_conflict *)PTR_PinMap_PWM_080041b4)) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_080041ac);\n    }\n    switch(mode) {\n      case 0:\n        digital_io_init(pin_name, 0, 0);\n        break;\n      case 1:\n        digital_io_init(pin_name, 1, 0);\n        break;\n      case 2:\n        digital_io_init(pin_name, 0, 1);\n        break;\n      case 3:\n        digital_io_init(pin_name, 0, 2);\n        break;\n    }\n    set_pin_configured(pin_name, (uint32_t *)PTR_g_digPinConfigured_080041b8);\n  }\n  return;\n}",
            "called": [
                "pin_in_pinmap",
                "digital_io_init",
                "set_pin_configured",
                "reset_pin_configured",
                "dac_stop",
                "is_pin_configured",
                "pwm_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configure_output_pin_08004110"
        },
        "FUN_08005320": {
            "renaming": {
                "FUN_08005320": "walk_reentrant_functions_08005320",
                "param_1": "reent_struct_ptr",
                "DAT_08005328": "global_reentrant_functions_ptr"
            },
            "code": "void walk_reentrant_functions_08005320(void* reent_struct_ptr)\n{\n  _fwalk_reent(reent_struct_ptr, DAT_08005328);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005320",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrant_functions_08005320"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "calculate_ticks_08000ee0",
                "TicksNumb": "num_ticks",
                "puVar1": "ticks_ptr",
                "DAT_08000f04": "ticks_data",
                "DAT_08000f08": "other_data"
            },
            "code": "uint32_t calculate_ticks_08000ee0(uint32_t num_ticks)\n{\n  undefined4 *ticks_ptr;\n  ticks_ptr = DAT_08000f04;\n  if (num_ticks - 1 < 0x1000000) {\n    DAT_08000f04[1] = num_ticks - 1;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    ticks_ptr[2] = 0;\n    *ticks_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "processI2CData_080015bc",
                "*hi2c": "*i2c_handle",
                "HVar1": "state",
                "*pbVar2": "*buffer_pointer"
            },
            "code": "HAL_StatusTypeDef processI2CData_080015bc(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef state;\n  uint8_t *buffer_pointer;\n  state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    i2c_handle->Instance->DR = (uint)*buffer_pointer;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "processI2CData_080015bc"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "handle_systick_interrupt_08000f4e"
            },
            "code": "void handle_systick_interrupt_08000f4e(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_systick_interrupt_08000f4e"
        },
        "FUN_08003948": {
            "renaming": {
                "FUN_08003948": "handle_I2C_errors_08003948",
                "PTR_i2c_handles_08003954": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_I2C_errors_08003948(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003948",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_errors_08003948"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_static_variables_0800458c"
            },
            "code": "void initialize_static_variables_0800458c(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_0800458c"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "initialize_Modbus_0800066c",
                "this": "modbus",
                "u8id": "id",
                "u8serno": "serial_number",
                "u8txenpin": "tx_enable_pin",
                "u16timeOut": "timeout"
            },
            "code": "void __thiscall initialize_Modbus_0800066c(Modbus *modbus,uint8_t id,uint8_t serial_number,uint8_t tx_enable_pin)\n{\n  modbus->id = id;\n  if (serial_number > 3) {\n    serial_number = 0;\n  }\n  modbus->serial_number = serial_number;\n  modbus->tx_enable_pin = tx_enable_pin;\n  modbus->timeout = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "Modbus"
            ],
            "imported": false,
            "current_name": "initialize_Modbus_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "write_byte_080042e8",
                "this": "serial",
                "c": "byte_to_write",
                "_written": "written",
                "_serial": "serial->_serial",
                "tx_head": "tx_head",
                "uVar2": "tx_active",
                "bVar1": "head_byte",
                "bVar3": "wrapped_head_byte",
                "iVar4": "next_head",
                "uVar5": "tx_head"
            },
            "code": "size_t __thiscall HardwareSerial::write_byte_080042e8(HardwareSerial *serial,uint8_t byte_to_write)\\n{\\n  bool written = true;\\n  uint tx_head = (uint)(serial->_serial).tx_head;\\n  int next_head = tx_head + 1;\\n  byte head_byte = (byte)next_head;\\n  byte wrapped_head_byte = head_byte & 0x7f;\\n  if (next_head == 0) {\\n    wrapped_head_byte = -(-head_byte & 0x7f);\\n  }\\n  do {\\n  } while ((serial->_serial).tx_tail == (ushort)wrapped_head_byte);\\n  (serial->_serial).tx_buff[tx_head] = byte_to_write;\\n  (serial->_serial).tx_head = (ushort)wrapped_head_byte;\\n  uint8_t tx_active = serial_tx_active((serial_t *)&serial->_serial);\\n  if (tx_active == \"\\0\") {\\n    uart_attach_tx_callback((serial_t *)&serial->_serial,DAT_08004334);\\n  }\\n  return 1;\\n}",
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "write_byte_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "enable_i2c_slave_receive_callback_080038d0",
                "*hi2c": "*i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "data_size_remaining",
                "i2c_onSlaveReceive": "i2c_on_slave_receive_callback",
                "_func_void_uint8_t_ptr_int *": "NULL",
                "slaveMode": "slave_mode_enabled",
                "handle": "i2c_handle",
                "i2cTxRxBuffer": "i2c_tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void enable_i2c_slave_receive_callback_080038d0(I2C_HandleTypeDef *i2c_handle) {\n  i2c_t *i2c_obj;\n  uint8_t data_size_remaining;\n  \n  i2c_obj = get_i2c_object(i2c_handle);\n  if (((i2c_obj->i2c_on_slave_receive_callback != NULL) &&\n      (i2c_obj->slave_mode_enabled == true)) &&\n     (data_size_remaining = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff, data_size_remaining != 0)) {\n    (*i2c_obj->i2c_on_slave_receive_callback)(i2c_obj->i2c_tx_rx_buffer,data_size_remaining);\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "I2C_ITError",
                "I2C_Slave_STOPF",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "enable_i2c_slave_receive_callback_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_process_id_0800410c"
            },
            "code": "__pid_t get_process_id_0800410c(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_HCLK_frequency_divider_0800260c",
                "DAT_08002624": "DAT_offset",
                "PTR_APBPrescTable_08002628": "APB_prescaler_table",
                "uVar1": "HCLK_frequency",
                "HCLK_frequency_divider": "HCLK_frequency_divider",
                "APB_prescaler_index": "APB_prescaler_index"
            },
            "code": "uint32_t get_HCLK_frequency_divider_0800260c(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint32_t HCLK_frequency_divider = PTR_APBPrescTable_08002628[APB_prescaler_index];\n  return HCLK_frequency / HCLK_frequency_divider;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculateAvailableRxSpace_08004240",
                "this": "serialInstance",
                "_serial": "serialData",
                "rx_head": "head",
                "rx_tail": "tail"
            },
            "code": "int __thiscall calculateAvailableRxSpace_08004240(HardwareSerial *serialInstance) {\n\tuint32_t head = (serialInstance->_serial).rx_head;\n\tuint32_t tail = (serialInstance->_serial).rx_tail;\n\tuint32_t space = (head + 0x40) - tail;\n\treturn space & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateAvailableRxSpace_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "write_to_file_with_error_handling_08005690",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "bytes_written"
            },
            "code": "void write_to_file_with_error_handling_08005690(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int bytes_written;\n  \n  error_ptr = PTR_errno_080056b0;\n  *(undefined4 *)PTR_errno_080056b0 = 0;\n  bytes_written = _write(file_descriptor, buffer, buffer_size);\n  if ((bytes_written == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_with_error_handling_08005690"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "digital_io_write_080041bc",
                "ulPin": "pin",
                "ulVal": "value",
                "_Var1": "is_pin_configured_result",
                "port": "port",
                "uVar2": "digital_pin"
            },
            "code": "void digital_io_write_080041bc(uint32_t pin, uint32_t value){\n    _Bool is_pin_configured_result;\n    GPIO_TypeDef *port;\n    uint32_t digital_pin;\n    \n    if (pin < 0x60) {\n        digital_pin = (uint32_t)*(short *)(PTR_digitalPin_080041fc + pin * 2);\n    }\n    else {\n        digital_pin = 0xffffffff;\n    }\n    \n    if ((digital_pin != 0xffffffff) && \n        (is_pin_configured_result = is_pin_configured((PinName_conflict)digital_pin, (uint32_t *)PTR_g_digPinConfigured_08004200), \n        is_pin_configured_result)) {\n        port = get_GPIO_Port((digital_pin << 0x18) >> 0x1c);\n        digital_io_write_080041bc(port, 1 << (digital_pin & 0xf) & 0xffff, value);\n    }\n    return;\n}",
            "called": [
                "get_GPIO_Port",
                "digital_io_write",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "getRxBuffer",
                "sendTxBuffer",
                "begin"
            ],
            "imported": false,
            "current_name": "digital_io_write_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initializeSerialBuffers_08004364",
                "this": "serial",
                "ctx": "context",
                "_serial": "serial",
                "_rx_buffer": "rx_buffer_ptr",
                "_tx_buffer": "tx_buffer_ptr",
                "rx_buff": "rx_buffer",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_buff": "tx_buffer",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail"
            },
            "code": "int __thiscall initializeSerialBuffers_08004364(HardwareSerial *serial, EVP_PKEY_CTX *context)\n{\n  serial->rx_buffer = serial->rx_buffer_ptr;\n  serial->rx_head = 0;\n  serial->rx_tail = 0;\n  serial->tx_buffer = serial->tx_buffer_ptr;\n  serial->tx_head = 0;\n  serial->tx_tail = 0;\n  return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerialBuffers_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682::FUN_08000682": "initialize",
                "this": "this_obj",
                "u8id": "device_id",
                "u8serno": "serial_number",
                "u8txenpin": "tx_enable_pin",
                "FUN_08000682": "initialize_08000682"
            },
            "code": "initialize_08000682 * __thiscall initialize_08000682(initialize_08000682 *this_obj, uint8_t device_id, uint8_t serial_number, uint8_t tx_enable_pin) {\n  init(this_obj, device_id, serial_number, tx_enable_pin);\n  return this_obj;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_08000682"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "handle_USART3_interrupt_08004004",
                "USART3_IRQn": "USART3_Interrupt",
                "PTR_uart_handlers_08004018": "ptr_uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "UART_HandleTypeDef": "uart_handler",
                "HAL_UART_IRQHandler": "handle_uart_interrupt"
            },
            "code": "void handle_USART3_interrupt_08004004(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef**)(PTR_uart_handlers_08004018 + 8);\n  if (uart_handler != NULL)\n  {\n    HAL_UART_IRQHandler(uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART3_interrupt_08004004"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_priority_group_08000e3c",
                "PriorityGroup": "priority_group",
                "DAT_08000e5c": "ptr_dat_08000e5c",
                "PTR_": "ptr_"
            },
            "code": "void set_priority_group_08000e3c(uint32_t priority_group)\n{\n    uint32_t *priority_reg = (uint32_t *)(DAT_08000e5c + 0xc);\n    uint32_t priority_mask = (*priority_reg) & 0xf8ff;\n    uint32_t new_priority = (priority_group & 7) << 8 | priority_mask | 0x5fa0000;\n    *priority_reg = new_priority;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_priority_group_08000e3c"
        },
        "FUN_080037ac": {
            "renaming": {
                "FUN_080037ac": "handle_timer_interrupt_080037ac",
                "PTR_timer_handles_080037bc": "PTR_timer_handles_080037bc",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_080037ac(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037bc + 8);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037ac"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "disable_timer_channel_08002864",
                "htim": "timer_handle",
                "Channel": "channel",
                "bVar1": "is_tim_1_or_8",
                "pTVar2": "timer_instance",
                "DAT_080028d0": "TIM1",
                "&DAT_080028d0[0xc].SR": "TIM8"
            },
            "code": "HAL_StatusTypeDef disable_timer_channel_08002864(TIM_HandleTypeDef *timer_handle, uint32_t channel) {\n  bool is_tim_1_or_8;\n  TIM_TypeDef *timer_instance;\n  TIM_CCxChannelCmd(timer_handle->Instance, channel, 0);\n  timer_instance = timer_handle->Instance;\n  if (timer_instance == DAT_080028d0 || timer_instance == &DAT_080028d0[0xc].SR) {\n    is_tim_1_or_8 = true;\n  }\n  else {\n    is_tim_1_or_8 = false;\n  }\n  if (((is_tim_1_or_8) && ((timer_instance->CCER & 0x1111) == 0)) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR &= 0xffff7fff;\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  timer_handle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_08002864"
        },
        "FUN_0800459a": {
            "renaming": {
                "FUN_0800459a": "printBuffer_0800459a",
                "this": "printObject",
                "buffer": "buffer",
                "size": "bufferSize",
                "sVar2": "bytesPrinted",
                "pPVar1": "currentPrintObject"
            },
            "code": "size_t Print::printBuffer_0800459a(Print *printObject, uint8_t *buffer, size_t bufferSize) {\n  Print *currentPrintObject = printObject;\n  size_t bytesPrinted = 0;\n  \n  while(bufferSize > 0) {\n    if (currentPrintObject == NULL) {\n      return bytesPrinted;\n    }\n    currentPrintObject = (Print *)(**printObject->_vptr_Print)(currentPrintObject, (uint)*buffer);\n    if (currentPrintObject == NULL) {\n      break;\n    }\n    bytesPrinted++;\n    buffer++;\n    bufferSize--;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459a",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_0800459a"
        },
        "FUN_08003958": {
            "renaming": {
                "FUN_08003958": "handle_I2C_event_interrupt_08003958",
                "PTR_i2c_handles_08003964": "PTR_i2c_handles",
                "i2c_handle_ptr": "i2c_handle",
                "HAL_I2C_EV_IRQHandler": "handle_I2C_event",
                "*(I2C_HandleTypeDef **)(PTR_i2c_handles_08003964 + 8)": "i2c_handle_ptr"
            },
            "code": "void handle_I2C_event_interrupt_08003958(void)\n{\n  I2C_HandleTypeDef **(I2C_HandleTypeDef **)(PTR_i2c_handles_08003964 + 8) = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003964_08003964 + 8);\n  HAL_I2C_EV_IRQHandler(*(I2C_HandleTypeDef **)(PTR_i2c_handles_08003964 + 8));\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003958",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_interrupt_08003958"
        },
        "FUN_0800532c": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data",
                "param_2": "input_1",
                "param_3": "input_2",
                "DAT_08005364": "PTR_DAT_08005364",
                "DAT_08005368": "PTR_DAT_08005368",
                "DAT_0800536c": "PTR_DAT_0800536c",
                "DAT_08005370": "PTR_DAT_08005370",
                "FUN_0800532c": "initialize_data_0800532c"
            },
            "code": "void initialize_data_0800532c(undefined4 *data, undefined2 input_1, undefined2 input_2)\n{\n  data[0] = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = input_1;\n  data[25] = 0;\n  *(undefined2 *)((int)data + 0xe) = input_2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  memset(data + 23, 0, 8);\n  data[9] = DAT_08005364;\n  data[10] = DAT_08005368;\n  data[11] = DAT_0800536c;\n  data[8] = data;\n  data[12] = DAT_08005370;\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_pin_high_0800314e",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_high_0800314e(PinName_conflict pin, uint32_t *pin_map) {\n  uint32_t pin_index = (uint32_t)((int)pin << 24) >> 28;\n  pin_map[pin_index] |= 1 << ((int)pin & 0xF);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_high_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c::FUN_0800447c": "initialize_UART",
                "this": "uart_instance",
                "peripheral": "peripheral",
                "PVar1": "rx_pin_name",
                "extraout_r1": "ctx2",
                "extraout_r1_00": "ctx1",
                "ctx": "ctx1",
                "PTR_Serial3_080044cc": "Serial3",
                "PTR_PinMap_UART_RX_080044d0": "PinMap_UART_RX",
                "PTR_PinMap_UART_TX_080044d4": "PinMap_UART_TX",
                "FUN_0800447c": "initialize_UART_0800447c"
            },
            "code": "initialize_UART_0800447c * __thiscall initialize_UART_0800447c(initialize_UART_0800447c *uart_instance, void *peripheral) {\n  PinName rx_pin_name;\n  EVP_PKEY_CTX *ctx1;\n  EVP_PKEY_CTX *ctx2;\n  \n  (uart_instance->super_Stream).super_Print.write_error = 0;\n  (uart_instance->super_Stream)._timeout = 1000;\n  (uart_instance->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)write_1_080044c8;\n  if (uart_instance == (initialize_UART_0800447c *)PTR_Serial3_080044cc) {\n    setRx(uart_instance,0x4c);\n    setTx(uart_instance,0x4d);\n    ctx1 = extraout_r1_00;\n  }\n  else {\n    rx_pin_name = pinmap_pin(peripheral,(PinMap *)PTR_PinMap_UART_RX_080044d0);\n    (uart_instance->_serial).pin_rx = rx_pin_name;\n    tx_pin_name = pinmap_pin(peripheral,(PinMap *)PTR_PinMap_UART_TX_080044d4);\n    (uart_instance->_serial).pin_tx = tx_pin_name;\n    ctx2 = extraout_r1;\n  }\n  init(uart_instance, ctx1);\n  return uart_instance;\n}\n",
            "called": [
                "pinmap_pin",
                "setRx",
                "setTx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_UART_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "print_assertion_failed_08004808",
                "param_1": "stream",
                "param_2": "file",
                "param_3": "expr",
                "param_4": "error_code",
                "puVar1": "val1",
                "puVar2": "val2",
                "PTR_s__08004840": "val1_name",
                "PTR_s___function__08004838": "val2_name",
                "PTR_s_assertion___s__failed__file___s__0800483c": "assertion_failed_message",
                "PTR__impure_ptr_08004834": "impure_ptr"
            },
            "code": "void print_assertion_failed_08004808(FILE* stream, const char* file, int line, const char* expr, const char* val1, const char* val2, int error_code)\n{\n    const char* PTR_s__08004840 = \"\";\n    const char* PTR_s___function__08004838 = \"\";\n    if (val1 != NULL) {\n        PTR_s__08004840 = \"val1\";\n        PTR_s___function__08004838 = \"val2\";\n    }\n    fprintf(stream, \"Assertion failed: %s:%d: %s (%s=%s, %s=%s)\\n\", file, line, expr, PTR_s__08004840, val1, PTR_s___function__08004838, val2);\n    abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "set_dac_channel_to_zero_08000f72",
                "hdac": "dac_handle",
                "Channel": "channel",
                "CR": "control_register",
                "State": "dac_state",
                "HAL_StatusTypeDef": "status"
            },
            "code": "HAL_StatusTypeDef set_dac_channel_to_zero_08000f72(DAC_HandleTypeDef *dac_handle, uint32_t channel)\n{\n  uint32_t channel_mask = ~(1 << (channel & 0xff));\n  dac_handle->Instance->CR &= channel_mask;\n  dac_handle->State = HAL_DAC_STATE_READY;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "set_dac_channel_to_zero_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "i2c_handle_interrupt_08001d00",
                "*hi2c": "*i2c_handle",
                "pIVar1": "i2c_instance",
                "uVar2": "sr1_reg",
                "uVar3": "cr2_reg",
                "uVar4": "sr2_reg",
                "DAT_08001e60": "I2C_FLAG_ADDR",
                "DAT_08001e4c": "I2C_FLAG_TXE",
                "DAT_08001e54": "I2C_FLAG_BTF",
                "DAT_08001e64": "I2C_FLAG_RXNE",
                "DAT_08001e5c": "I2C_FLAG_BTF",
                "DAT_08001e58": "I2C_FLAG_TXE",
                "DAT_08001e50": "I2C_FLAG_STOPF",
                "HAL_I2C_MODE_MASTER": "I2C_MODE_MASTER",
                "HAL_I2C_MODE_MEM": "I2C_MODE_MEM",
                "I2C_Master_ADDR": "I2C_Master_Addr_Interrupt_Handler",
                "I2C_Master_ADD10": "I2C_Master_Addr_10bit_Interrupt_Handler",
                "I2C_Master_SB": "I2C_Master_SB_Interrupt_Handler",
                "I2C_MasterReceive_RXNE": "I2C_Master_Receive_Interrupt_Handler",
                "I2C_MasterReceive_BTF": "I2C_Master_Receive_BTF_Interrupt_Handler",
                "I2C_MasterTransmit_TXE": "I2C_Master_Transmit_Interrupt_Handler",
                "I2C_MasterTransmit_BTF": "I2C_Master_Transmit_BTF_Interrupt_Handler",
                "I2C_Slave_ADDR": "I2C_Slave_Addr_Interrupt_Handler",
                "I2C_Slave_STOPF": "I2C_Slave_Stop_Interrupt_Handler",
                "I2C_SlaveReceive_RXNE": "I2C_Slave_Receive_Interrupt_Handler",
                "I2C_SlaveReceive_BTF": "I2C_Slave_Receive_BTF_Interrupt_Handler",
                "I2C_SlaveTransmit_TXE": "I2C_Slave_Transmit_Interrupt_Handler",
                "I2C_SlaveTransmit_BTF": "I2C_Slave_Transmit_BTF_Interrupt_Handler"
            },
            "code": "void i2c_handle_interrupt_08001d00(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_TypeDef *i2c_instance;\n  uint32_t sr1_reg;\n  uint32_t sr2_reg;\n  uint32_t cr2_reg;\n\n  i2c_instance = i2c_handle->Instance;\n  sr2_reg = i2c_instance->SR2;\n  sr1_reg = i2c_instance->SR1;\n  cr2_reg = i2c_instance->CR2;\n\n  if ((i2c_handle->Mode == HAL_I2C_MODE_MASTER) || (i2c_handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1_reg & 0x10001) == 0) || ((cr2_reg & 0x200) == 0)) {\n      if (((DAT_08001e60 & sr1_reg) == 0) || ((cr2_reg & 0x200) == 0)) {\n        if (((DAT_08001e4c & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n          I2C_Master_Transmit_Interrupt_Handler(i2c_handle);\n        }\n      }\n      else {\n        I2C_Master_Addr_10bit_Interrupt_Handler(i2c_handle);\n      }\n    }\n    else {\n      I2C_Master_SB_Interrupt_Handler(i2c_handle);\n    }\n    if ((DAT_08001e54 & sr1_reg) == 0) {\n      if ((((DAT_08001e64 & sr1_reg) != 0) && ((cr2_reg & 0x400) != 0)) && ((DAT_08001e4c & sr1_reg) == 0)) {\n        I2C_Master_Receive_Interrupt_Handler(i2c_handle);\n        return;\n      }\n      if (((DAT_08001e54 & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n        I2C_Master_Receive_BTF_Interrupt_Handler(i2c_handle);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e4c & sr1_reg) != 0) && ((cr2_reg & 0x400) != 0)) && ((DAT_08001e54 & sr1_reg) == 0)) {\n        I2C_Master_Transmit_Interrupt_Handler(i2c_handle);\n        return;\n      }\n      if (((DAT_08001e54 & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n        I2C_Master_Transmit_BTF_Interrupt_Handler(i2c_handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n      I2C_Slave_Addr_Interrupt_Handler(i2c_handle);\n      return;\n    }\n    if (((DAT_08001e50 & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n      I2C_Slave_Stop_Interrupt_Handler(i2c_handle);\n      return;\n    }\n    if ((DAT_08001e54 & sr1_reg) == 0) {\n      if ((((DAT_08001e64 & sr1_reg) != 0) && ((cr2_reg & 0x400) != 0)) && ((DAT_08001e4c & sr1_reg) == 0)) {\n        I2C_Slave_Receive_Interrupt_Handler(i2c_handle);\n        return;\n      }\n      if (((DAT_08001e54 & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n        I2C_Slave_Receive_BTF_Interrupt_Handler(i2c_handle);\n      }\n    }\n    else {\n      if ((((DAT_08001e4c & sr1_reg) != 0) && ((cr2_reg & 0x400) != 0)) && ((DAT_08001e54 & sr1_reg) == 0)) {\n        I2C_Slave_Transmit_Interrupt_Handler(i2c_handle);\n        return;\n      }\n      if (((DAT_08001e54 & sr1_reg) != 0) && ((cr2_reg & 0x200) != 0)) {\n        I2C_Slave_Transmit_BTF_Interrupt_Handler(i2c_handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_BTF",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_BTF",
                "I2C_Slave_ADDR",
                "I2C_MasterReceive_RXNE",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterReceive_BTF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [
                "I2C3_EV_IRQHandler",
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_interrupt_08001d00"
        },
        "FUN_080037c0": {
            "renaming": {
                "FUN_080037c0": "handle_timer_interrupt_080037c0",
                "PTR_timer_handles_080037d0": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_080037c0(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037d0_080037d0 + 0xc);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037c0"
        },
        "FUN_0800382c": {
            "renaming": {
                "FUN_0800382c": "handle_timer_interrupt_0800382c",
                "PTR_timer_handles_0800383c": "PTR_timer_handles",
                "TIM_HandleTypeDef": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_tim_irq"
            },
            "code": "void handle_timer_interrupt_0800382c(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_0800383c_0800383c + 0x20);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800382c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800382c"
        }
    },
    "used_tokens": 205440,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004774",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800476a",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_080056d4",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004788",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800477e",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08004792",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08005768",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_08003f94",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_080055e0",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_08003918",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_08004298",
            "FUN_08003880",
            "FUN_08003fd4",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_08000c4c",
            "FUN_080025ec",
            "FUN_080037fc",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_0800404c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08004064",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_080047f0",
            "FUN_0800502c",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_0800582c",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8c",
            "FUN_08005604",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_080058f0",
            "FUN_080056b4",
            "FUN_0800450a",
            "FUN_0800377c",
            "FUN_08003fec",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_08000c7c",
            "FUN_08004760",
            "FUN_080034ce",
            "FUN_08003798",
            "FUN_080047fe",
            "FUN_08005974",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_080045be",
            "FUN_0800407c",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08005580",
            "FUN_08000690",
            "FUN_08004254",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08003840",
            "FUN_080026ce",
            "FUN_08001f3c",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08003968",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_080037d4",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_080047a8",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08005478",
            "FUN_08000d3c",
            "FUN_08003854",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_0800401c",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08004270",
            "FUN_080037e8",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_080051bc",
            "FUN_08004034",
            "FUN_08000f8c",
            "FUN_08001684",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_08003868",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_080035ac",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080001d0",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_08003928",
            "FUN_0800468c",
            "FUN_080005e0",
            "FUN_0800311c",
            "FUN_0800420c",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_080044fc",
            "FUN_08003138",
            "FUN_08003810",
            "FUN_08002848",
            "FUN_08003938",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08005686",
            "FUN_08004110",
            "FUN_08005320",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_08003948",
            "FUN_0800458c",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_08005690",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08004004",
            "FUN_08000e3c",
            "FUN_080037ac",
            "FUN_08002864",
            "FUN_0800459a",
            "FUN_08003958",
            "FUN_0800314e",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00",
            "FUN_080037c0",
            "FUN_0800382c"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005760",
            "FUN_080055d0",
            "FUN_080040ec",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_08000600",
            "FUN_08000de4",
            "FUN_080047c0",
            "FUN_08000682",
            "FUN_0800532c",
            "FUN_0800447c"
        ]
    ],
    "locked_functions": []
}