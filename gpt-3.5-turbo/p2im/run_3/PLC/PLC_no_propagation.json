{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "read_data_080006b4",
                "param_1": "data_ptr",
                "bVar1": "is_overflow",
                "uVar2": "byte_counter",
                "iVar3": "read_result",
                "bVar4": "byte_counter",
                "PTR_FUN_080041bc": "clear_buffer",
                "PTR_FUN_080041d0": "read_byte",
                "PTR_FUN_080041c4": "read_next_byte",
                "DAT_0804a040": "buffer"
            },
            "code": "int read_data_080006b4(int **data_ptr) {\n  bool is_overflow = false;\n  undefined byte_counter;\n  int read_result;\n  byte DAT_0804a040[64];\n  if (1 < *(byte *)(*data_ptr + 6)) {\n    PTR_FUN_080041bc(*(byte *)(*data_ptr + 6),0);\n  }\n  *(undefined *)(*data_ptr + 0x49) = 0;\n  if (*(byte *)(*data_ptr + 5) < 4) {\n    while (read_result = (**(code **)(*data_ptr + 8))(), read_result != 0) {\n      byte_counter = *(byte *)(*data_ptr + 0x49);\n      DAT_0804a040[byte_counter] = (**(code **)(*data_ptr + 0xc))();\n      byte_counter++;\n      *(byte *)(*data_ptr + 0x49) = byte_counter;\n      if (0x3f < byte_counter) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(*data_ptr + 0x14) = *(short *)(*data_ptr + 0x14) + 1;\n  if (is_overflow) {\n    *(short *)(*data_ptr + 0x15) = *(short *)(*data_ptr + 0x15) + 1;\n    return -3;\n  }\n  return (int)DAT_0804a040[*(byte *)(*data_ptr + 0x49)];\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "read_data_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "code": "int find_value_in_array_080034da(int value_to_find, short *array) {\n  while (*array != -1) {\n    if (*array == value_to_find) {\n      return *(int *)(array + 2);\n    }\n    array += 6;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bit_080035fc",
                "param_1": "bitfield",
                "DAT_08003718": "BIT_0",
                "DAT_0800371c": "BIT_2",
                "DAT_08003720": "BIT_3",
                "DAT_08003724": "BIT_4",
                "DAT_08003728": "BIT_5",
                "DAT_0800372c": "BIT_6",
                "DAT_08003730": "BIT_8",
                "DAT_08003734": "BIT_16",
                "DAT_08003738": "BIT_17",
                "DAT_0800373c": "BIT_18",
                "DAT_08003740": "BIT_22",
                "DAT_08003744": "BIT_23",
                "DAT_08003748": "BIT_24",
                "*(uint *)(DAT_0800374c + 0x40)": "bitfield[1]",
                "*(uint *)(DAT_0800374c + 0x44)": "bitfield[2]"
            },
            "code": "void set_bit_080035fc(uint32_t *bitfield, uint32_t bit_offset, bool value) {\n    uint32_t mask = 1 << bit_offset;\n    if (value) {\n        bitfield[bit_offset / 32] |= mask;\n    } else {\n        bitfield[bit_offset / 32] &= ~mask;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bit_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_flag_set_08003dd0",
                "param_1": "flag_index",
                "uVar1": "flag_value",
                "PTR_DAT_08003df0": "ptr_dat",
                "byte": "flag_byte",
                "DAT_08003df0": "dat",
                "FUN_0800312c": "get_flag_value"
            },
            "code": "bool is_flag_set_08003dd0(int flag_index) {\n  uint32_t flag_value = *(uint32_t*)(PTR_DAT_08003df0 + (uint32_t)*(uint8_t*)(flag_index + 0x44) * 4);\n  uint32_t masked_value = flag_value & 0x22;\n  return masked_value == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "is_flag_set_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "local_variable_1",
                "local_50": "local_variable_2",
                "local_3c": "local_variable_3",
                "local_38": "local_variable_4",
                "local_34": "local_variable_5",
                "local_30": "local_variable_6",
                "local_2c": "local_variable_7",
                "local_28": "local_variable_8",
                "local_24": "local_variable_9",
                "local_20": "local_variable_10",
                "local_1c": "local_variable_11",
                "local_18": "local_variable_12",
                "local_14": "local_variable_13"
            },
            "code": "void initialize_system_08000c8c(void)\n{\n  uint32_t status_register;\n  uint32_t local_variable_1 = 1;\n  uint32_t local_variable_2 = 0x50000;\n  uint32_t local_variable_3 = 2;\n  uint32_t local_variable_4 = 0x400000;\n  uint32_t local_variable_5 = 8;\n  uint32_t local_variable_6 = 0x150;\n  uint32_t local_variable_7 = 2;\n  uint32_t local_variable_8 = 7;\n  status_register = set_bit(status_register, 28);\n  *DAT_08000d34 = set_bits(*DAT_08000d34, 14, 15);\n  FUNC_0800201c(&local_variable_1);\n  FUN_08001f9c();\n  uint32_t local_variable_9 = 0xf;\n  uint32_t local_variable_10 = 2;\n  uint32_t local_variable_11 = 0;\n  uint32_t local_variable_12 = 0x1400;\n  uint32_t local_variable_13 = 0x1000;\n  FUN_08002488(&local_variable_9,5);\n  uint32_t uVar1 = FUN_080025e0();\n  FUN_08000ee0((uint32_t)((uint64_t)DAT_08000d38 * (uint64_t)uVar1 >> 0x26));\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff,0,0);\n}\n",
            "called": [
                "FUN_08000ee0",
                "FUN_08000f2c",
                "FUN_0800201c",
                "FUN_08000e60",
                "FUN_08001f9c",
                "FUN_080025e0",
                "FUN_08002488"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "initialize_system_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "process_data_08000a4e",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "index",
                "uVar2": "mapped_value",
                "FUN_08004640": "get_value",
                "set_result": "set_result",
                "set_status": "set_status",
                "*(undefined *)(param_1 + 0x49)": "status",
                "get_index": "get_index",
                "get_value": "get_value",
                "map_value": "map_value"
            },
            "code": "int process_data_08000a4e(int data_ptr, int result_ptr) {\n  int index = get_index(data_ptr);\n  int value = get_value(data_ptr);\n  int mapped_value = map_value(value);\n  set_result(result_ptr, index, mapped_value);\n  set_status(data_ptr);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "do_nothing_and_call_08000c4c_until_DAT_08004674_is_not_0_08004658",
                "FUN_08000c4c": "call_FUN_08000c4c",
                "DAT_08004674": "check_DAT_08004674"
            },
            "code": "void do_nothing_and_call_08000c4c_until_DAT_08004674_is_not_0_08004658(void)\n{\n  do_nothing_08004646();\n  FUN_08000c4c();\n  while (DAT_08004674 == 0)\n  {\n    FUN_08000c64();\n  }\n  FUN_08004338();\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c64",
                "FUN_08004338",
                "FUN_08000c4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "do_nothing_and_call_08000c4c_until_DAT_08004674_is_not_0_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "check_param_080034f4",
                "param_1": "param",
                "uVar1": "result",
                "FUN_080034da": "call_function"
            },
            "code": "int check_param_080034f4(int param){\n  int result;\n  if(param != -1){\n    result = call_function();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003cc8",
                "FUN_08003978",
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_param_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "is_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int is_value_in_array_0800355e(int value, short *array)\n{\n    if (value == -1) {\n        return 0;\n    }\n    while( *array != -1 ) {\n        if (value == *array) {\n            return 1;\n        }\n        array = array + 6;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "is_value_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "process_data_0800573c",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "data_ptr",
                "iVar2": "status"
            },
            "code": "void process_data_0800573c(int *result, int param1, int param2, int param3)\n{\n    undefined *data_ptr;\n    int status;\n    \n    data_ptr = PTR_DAT_0800575c;\n    *(int *)PTR_DAT_0800575c = 0;\n    status = process_input(param1, param2, param3, param3, param3);\n    if ((status == -1) && (*(int *)data_ptr != 0)) {\n        *result = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "process_data_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "unknown",
                "param_4": "unknown2",
                "iVar1": "result",
                "uVar2": "data_index",
                "char_value": "char_value"
            },
            "code": "void update_data_08003e54(int data_ptr, int new_data, int unknown, int unknown2)\n{\n  int result = FUN_08003dd0();\n  if (data_ptr != 0 && result == 0) {\n    uint data_index = (uint)*(byte *)(data_ptr + 0x44);\n    *(int *)(PTR_DAT_08003ea4 + data_index * 4) = data_ptr;\n    *(undefined4 *)(PTR_DAT_08003ea0 + data_index * 4) = new_data;\n    int char_value = (int)*(char *)(data_ptr + 0x5c);\n    FUN_08000e60(char_value, 0, 1, data_index, unknown2);\n    FUN_08000ec4(char_value);\n    FUN_08002efa(*(undefined4 *)(PTR_DAT_08003ea8 + data_index * 4), data_ptr + 0x45, 1);\n  }\n}\n",
            "called": [
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "update_data_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "pointer",
                "uVar2": "var1",
                "uStack_c": "var2",
                "uStack_8": "var3",
                "uStack_4": "N/A"
            },
            "code": "void process_data_08004fdc(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  int pointer;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  \n  pointer = *(int *)PTR_PTR_DAT_08005008;\n  var1 = data1;\n  var2 = data2;\n  var3 = data3;\n  if ((pointer != 0) && (*(int *)(pointer + 0x18) == 0)) {\n    clean_data(pointer);\n  }\n  process_data_08004fdc_helper(pointer, *(undefined4 *)(pointer + 8), data1, &var2, var1, &var2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "initialize_param_1_if_failed_080056d4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void initialize_param_1_if_failed_080056d4(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_080056f4;\n  *(undefined4 *)PTR_DAT_080056f4 = 0;\n  int status = FUN_080040d6(arg1, arg2, arg2, 0, arg3);\n  if ((status == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "initialize_param_1_if_failed_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c"
            },
            "code": "int get_one_thunk_0800410c() {\n    return 1;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "data",
                "local_1c": "data_array",
                "FUN_080034f4": "get_processed_data",
                "PTR_DAT_08003408": "processing_constant",
                "FUN_08003380": "validate_data",
                "iVar1": "result",
                "FUN_08000f72": "process_results",
                "FUN_08000f56": "finalize_processing"
            },
            "code": "void process_data_080033d8(int data)\n{\n  int result;\n  int data_array[5];\n  \n  data_array[0] = get_processed_data(data, PTR_DAT_08003408);\n  if ((data_array[0] != 0) && ((result = validate_data(data), result == 0 || (result == 0x10)))) {\n    process_results(data_array, result);\n    finalize_processing(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003380",
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = FUN_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = FUN_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = FUN_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = FUN_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = FUN_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = FUN_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = FUN_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = FUN_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = FUN_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = FUN_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = FUN_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = FUN_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = FUN_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = FUN_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = FUN_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = FUN_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = FUN_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = FUN_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "validate_parameters_08002488",
                "param_1": "parameters",
                "param_2": "num_params",
                "puVar1": "param_ptr",
                "iVar2": "time_diff1",
                "iVar3": "time_diff2",
                "uVar4": "param_val"
            },
            "code": "int validate_parameters_08002488(uint *parameters, uint num_params) {\n  uint *param_ptr;\n  int time_diff1;\n  int time_diff2;\n  uint param_val;\n  param_ptr = DAT_080025d0;\n  if (parameters == NULL) {\n    return 1;\n  }\n  if ((*DAT_080025d0 & 0xf) < num_params) {\n    *(char *)DAT_080025d0 = (char)num_params;\n    if (num_params != (*param_ptr & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if ((*parameters & 4) != 0) {\n      DAT_080025d4[2] |= 0x1c00;\n    }\n    if ((*parameters & 8) != 0) {\n      DAT_080025d4[2] |= 0xe000;\n    }\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffffff0f) | parameters[2];\n  }\n  if ((*parameters & 1) != 0) {\n    param_val = parameters[1];\n    if (param_val == 1) {\n      if ((*DAT_080025d4 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (param_val - 2 < 2) {\n      if ((*DAT_080025d4 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*DAT_080025d4 & 2) == 0) {\n      return 1;\n    }\n    DAT_080025d4[2] = param_val | (DAT_080025d4[2] & 0xfffffffc);\n    time_diff1 = FUN_08000e30();\n    while (true) {\n      if ((DAT_080025d4[2] & 0xc) == parameters[1] * 4) {\n        break;\n      }\n      time_diff2 = FUN_08000e30();\n      if (5000 < (uint)(time_diff2 - time_diff1)) {\n        return 3;\n      }\n    }\n  }\n  param_ptr = DAT_080025d0;\n  if (num_params < (*DAT_080025d0 & 0xf)) {\n    *(char *)DAT_080025d0 = (char)num_params;\n    if (num_params != (*param_ptr & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffffe3ff) | parameters[3];\n  }\n  if ((*parameters & 8) != 0) {\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffff1fff) | (parameters[4] << 3);\n  }\n  param_val = FUN_080023b4();\n  *(uint *)PTR_DAT_080025dc = param_val >> PTR_DAT_080025d8[(DAT_080025d4[2] << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080023b4",
                "FUN_08000d98",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "validate_parameters_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "set_values_for_pointer_08004544",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void set_values_for_pointer_08004544(undefined4 *ptr, undefined value1, undefined value2, undefined value3, undefined value4)\n{\n  *ptr = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(ptr + 1) = value1;\n  *(undefined *)((int)ptr + 5) = value2;\n  *(undefined *)((int)ptr + 6) = value3;\n  *(undefined *)((int)ptr + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "set_values_for_pointer_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "process_data_08003cc8",
                "sVar1": "data_value",
                "puVar2": "data_ptr",
                "uVar3": "processed_value",
                "iVar4": "result",
                "uVar5": "calculated_value",
                "PTR_DAT_08003d08": "PTR_DATA",
                "PTR_DAT_08003d0c": "PTR_DATA_2",
                "PTR_DAT_08003d10": "PTR_DATA_3",
                "PTR_DAT_08003d14": "PTR_DATA_4",
                "FUNC_08003978": "update_data"
            },
            "code": "void process_data_08003cc8(void)\n{\n  short data_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  int result = calculate_result((int)data_value,PTR_DAT_08003d0c);\n  if (result != 0) {\n    undefined4 calculated_value = calculate_result((int)data_value,PTR_DAT_08003d0c);\n    undefined2 processed_value = process_value(calculated_value,PTR_DAT_08003d10);\n    undefined *data_ptr = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = processed_value;\n    *(short *)(data_ptr + 0x58) = data_value;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    update_data(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "decode_params_08000fb4",
                "param_1": "decoded_params",
                "param_2": "encoded_params",
                "puVar1": "decoded_ptr",
                "puVar2": "encoded_ptr",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "bit_index",
                "uVar6": "param_value",
                "uVar7": "param_type",
                "iVar8": "decoded_index",
                "iVar10": "decoded_offset",
                "encoded_index": "encoded_index",
                "encoded_offset": "encoded_offset"
            },
            "code": "void decode_params_08000fb4(uint *decoded_params, uint *encoded_params)\n{\n  uint *decoded_ptr;\n  uint *encoded_ptr;\n  uint bit_mask;\n  uint bit_value;\n  uint bit_index;\n  uint param_value;\n  uint param_type;\n  int decoded_index;\n  int decoded_offset;\n  int encoded_index;\n  int encoded_offset;\n  \n  for (bit_index = 0; bit_index < 16; bit_index++) {\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_value = bit_mask & *encoded_params;\n    if (bit_mask == bit_value) {\n      param_type = encoded_params[1];\n      if ((param_type == 2) || (param_type == 0x12)) {\n        decoded_index = (bit_index >> 3) + 8;\n        decoded_offset = (bit_index & 7) << 2;\n        decoded_params[decoded_index] = decoded_params[decoded_index] & ~(0xf << decoded_offset) | encoded_params[4] << decoded_offset;\n      }\n      param_value = param_type & 3;\n      decoded_ptr = decoded_params;\n      encoded_ptr = encoded_params;\n      decoded_offset = bit_index << 1;\n      bit_mask = ~(3 << (decoded_offset & 0xff));\n      *decoded_ptr = *decoded_ptr & bit_mask | param_value << (decoded_offset & 0xff);\n      if (((param_type - 1 < 2) || (param_type == 0x11)) || (param_type == 0x12)) {\n        decoded_ptr[2] = decoded_ptr[2] & bit_mask | encoded_params[3] << (decoded_offset & 0xff);\n        decoded_ptr[1] = decoded_ptr[1] & ~bit_value | ((param_type << 0x1b) >> 0x1f) << (bit_index & 0xff);\n      }\n      decoded_ptr[3] = bit_mask & decoded_ptr[3] | encoded_params[2] << (decoded_offset & 0xff);\n      if ((param_type & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n        encoded_offset = (bit_index & 3) << 2;\n        if (decoded_params == PTR_DAT_08001190) {\n          decoded_index = 0;\n        }\n        else if (decoded_params == PTR_DAT_08001194) {\n          decoded_index = 1;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x100) {\n          decoded_index = 2;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x200) {\n          decoded_index = 3;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x300) {\n          decoded_index = 4;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x400) {\n          decoded_index = 5;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x500) {\n          decoded_index = 6;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x600) {\n          decoded_index = 7;\n        }\n        else if (decoded_params == PTR_DAT_08001194 + 0x700) {\n          decoded_index = 8;\n        }\n        else {\n          decoded_index = 10;\n        }\n        *(uint *)(PTR_DAT_08001184 + ((bit_index >> 2) + 2) * 4) = *(uint *)(PTR_DAT_08001184 + ((bit_index >> 2) + 2) * 4) & ~(0xf << encoded_offset) | decoded_index << encoded_offset;\n        decoded_ptr = PTR_DAT_08001188;\n        bit_mask = ~bit_value;\n        param_value = *PTR_DAT_08001188 & bit_mask;\n        if ((param_type & 0x10000) != 0) {\n          param_value = bit_value | *PTR_DAT_08001188;\n        }\n        *PTR_DAT_08001188 = param_value;\n        encoded_ptr = PTR_DAT_08001188;\n        param_value = bit_mask & decoded_ptr[1];\n        if ((param_type & 0x20000) != 0) {\n          param_value = bit_value | decoded_ptr[1];\n        }\n        PTR_DAT_08001188[1] = param_value;\n        decoded_ptr = PTR_DAT_08001188;\n        param_value = bit_mask & encoded_ptr[2];\n        if ((param_type & 0x100000) != 0) {\n          param_value = bit_value | encoded_ptr[2];\n        }\n        PTR_DAT_08001188[2] = param_value;\n        bit_mask = bit_mask & decoded_ptr[3];\n        if ((param_type & 0x200000) != 0) {\n          bit_mask = bit_value | decoded_ptr[3];\n        }\n        PTR_DAT_08001188[3] = bit_mask;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "decode_params_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] = (*input)[1] & 0xfffff8ff;\n  **input = **input | 1;\n  **input = **input & 0xfffffbff;\n  uint32_t *ptr1 = *input;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      uint32_t *ptr2 = input[9];\n      input[9] = (uint32_t *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr1 = input[9];\n      input[9] = (uint32_t *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_08001cfc;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_something_080038d0();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    do_something_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_0800160c",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "check_input_08002d72",
                "param_1": "input_array",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "do_nothing_08002d70": "do_nothing",
                "*(uint *)(*param_1 + 0xc)": "input_array[3]",
                "FUNC_080029c8": "process_input",
                "*(uint *)(*param_1 + 0x10)": "input_array[4]",
                "*(uint *)(*param_1 + 0x14)": "input_array[5]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[10]"
            },
            "code": "int check_input_08002d72(int *input_array) {\n    if (input_array != NULL) {\n        if (input_array[9] == 0) {\n            input_array[14] = 0;\n            do_nothing();\n        }\n        input_array[9] = 0x24;\n        input_array[3] &= 0xffffdfff;\n        process_input(input_array);\n        input_array[4] &= 0xffffb7ff;\n        input_array[5] &= 0xffffffd5;\n        input_array[3] |= 0x2000;\n        input_array[15] = 0;\n        input_array[9] = 0x20;\n        input_array[10] = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "check_input_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_data_080007f0",
                "param_1": "data",
                "param_2": "data_array",
                "param_3": "array_size",
                "param_4": "max_value",
                "bVar1": "found",
                "bVar2": "byte_value",
                "cVar3": "value1",
                "cVar4": "value2",
                "iVar5": "value",
                "iVar7": "check_type",
                "uVar6": "i"
            },
            "code": "int check_data_080007f0(int data, int* data_array, int array_size, int max_value) {\n  bool found = false;\n  int i = 0;\n  while (i < array_size) {\n    if (data_array[i] == data) {\n      found = true;\n      break;\n    }\n    i++;\n  }\n  if (!found) {\n    return 1;\n  }\n  int check_type = data_array[array_size];\n  switch (check_type) {\n    case 1:\n    case 2:\n    case 15:\n      calculate_and_update_value(data_array[1], data_array[2], array_size, check_type, max_value);\n      return 0;\n    case 3:\n    case 4:\n    case 16:\n      int value1 = calculate_and_update_value(data_array[1], data_array[2], array_size, check_type, max_value);\n      int value2 = calculate_and_update_value(data_array[3], data_array[4], array_size, check_type, max_value);\n      if (data_array[6] < (value1 + value2)) {\n        return 2;\n      }\n      return 0;\n    case 5:\n      int value = calculate_and_update_value(data_array[1], data_array[2], array_size, check_type, max_value);\n      if (data_array[6] < (value << 0x14) >> 0x18) {\n        return 2;\n      }\n      return 0;\n    case 6:\n      int byte_value = calculate_and_update_value(data_array[1], data_array[2], array_size, check_type, max_value);\n      if (data_array[6] < byte_value) {\n        return 2;\n      }\n      return 0;\n    default:\n      return 0;\n  }\n}\n",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_data_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "output",
                "param_2": "data_address",
                "param_3": "zero",
                "param_4": "two",
                "sVar1": "data",
                "puVar2": "pointer",
                "iVar3": "result"
            },
            "code": "void process_data_0800562a(int *output, int data_address, int zero, int two) {\n    short data = *(short *)(data_address + 0xe);\n    *(ushort *)(data_address + 0xc) &= 0xefff;\n    int result = calculate(data, zero, two, two, 0, 0, 0, 0);\n    if (result == -1 && *(int *)PTR_DAT_080056b0 != 0) {\n        *output = *(int *)PTR_DAT_080056b0;\n    }\n}\n",
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "checkParam_080044d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_080044f8": "PTR_DAT",
                "DAT_080044f4": "DAT"
            },
            "code": "void checkParam_080044d8(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n  if (param1 == 1) {\n    if (param2 == 0xffff) {\n      callFunction(PTR_DAT_080044f4_080044f8_080044f8, DAT_080044f4_080044f4, param3, 0xffff, param4);\n    }\n  }\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "checkParam_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_input_08003df4",
                "param_1": "input_index",
                "uVar1": "result",
                "PTR_DAT_08003e14": "ptr_data",
                "byte": "byte_value"
            },
            "code": "bool is_valid_input_08003df4(int input_index){\n                    uint32_t ptr = PTR_DAT_08003e14 + (uint32_t)*(byte *)(input_index + 0x44) * 4;\n                    uint32_t result = FUN_0800312c(*(undefined4 *)ptr);\n                    return (result & 0x21) == 0x21;\n                }",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_and_initialize_thing_08005400",
                "param_1": "error_code",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "array_length",
                "piVar2": "thing_array_ptr",
                "iVar3": "thing_ptr",
                "ppiVar4": "array_ptr_ptr"
            },
            "code": "int * find_and_initialize_thing_08005400(undefined4 *error_code, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  int *thing_ptr;\n  int *thing_array_ptr;\n  int array_length;\n  int **array_ptr_ptr;\n  \n  array_ptr_ptr = (int **)(*(int *)PTR_PTR_DAT_08005474 + 0x48);\n  while (true) {\n    thing_array_ptr = array_ptr_ptr[2];\n    array_length = array_ptr_ptr[1];\n    while (array_length > 0) {\n      if (*(short *)(thing_array_ptr + 3) == 0) {\n        *(undefined2 *)((int)thing_array_ptr + 0xe) = 0xffff;\n        *(undefined2 *)(thing_array_ptr + 3) = 1;\n        thing_array_ptr[0x19] = 0;\n        *thing_array_ptr = 0;\n        thing_array_ptr[2] = 0;\n        thing_array_ptr[1] = 0;\n        thing_array_ptr[4] = 0;\n        thing_array_ptr[5] = 0;\n        thing_array_ptr[6] = 0;\n        FUN_080048cc(thing_array_ptr + 0x17, 0, 8, 1, arg4);\n        thing_array_ptr[0xd] = 0;\n        thing_array_ptr[0xe] = 0;\n        thing_array_ptr[0x12] = 0;\n        thing_array_ptr[0x13] = 0;\n        return thing_array_ptr;\n      }\n      thing_array_ptr += 0x1a;\n      array_length--;\n    }\n    if (*array_ptr_ptr == (int *)0x0) {\n      thing_array_ptr = (int *)FUN_08005374(error_code, 4);\n      *array_ptr_ptr = thing_array_ptr;\n      if (thing_array_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    array_ptr_ptr = (int **)*array_ptr_ptr;\n  }\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "find_and_initialize_thing_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_get_nonzero_08003582",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int compare_and_get_nonzero_08003582(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_and_get_nonzero_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "execute_function_08005760",
                "UNRECOVERED_JUMPTABLE": "function_pointer",
                "FUN_080051ac": "execute_subfunction"
            },
            "code": "void execute_function_08005760(void)\n{\n  code *function_pointer;\n  function_pointer = execute_function_08005760;\n  execute_subfunction();\n  int* data_pointers[] = {PTR_DAT_080057fc, PTR_DAT_08005800, PTR_DAT_08005804, PTR_DAT_08005808, PTR_DAT_0800580c, PTR_DAT_08005810, PTR_DAT_08005814, PTR_DAT_08005818, PTR_DAT_0800581c, PTR_DAT_08005820, PTR_DAT_08005824, PTR_DAT_08005828};\n  for (int i = 0; i < 12; i++) {\n    if (-1 < *(data_pointers[i]) << 0x1f) {\n      *(undefined4 *)(data_pointers[i]) = 1;\n    }\n  }\n  (*function_pointer)();\n  return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "execute_function_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_08004678",
                "param_1": "number",
                "cVar1": "bits_set"
            },
            "code": "char count_bits_set_08004678(uint number)\n{\n  char bits_set = 0;\n  while (number != 1)\n  {\n    bits_set++;\n    number = number >> 1;\n  }\n  return bits_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "param",
                "iVar1": "function_result",
                "FUN_0800387c": "get_function_result",
                "*(char *)(iVar1 + 0x5f)": "*(char *)(function_result + 0x5f)",
                "FUN_08001578": "call_another_function"
            },
            "code": "void check_and_call_function_08003900(undefined4 param_1)\\n{\\n  int function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5f) == \"\\0\") {\\n    call_another_function(param_1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_at_index_08000f0c",
                "param_1": "index_to_set",
                "DAT_08000f28": "DAT_PTR_08000f28"
            },
            "code": "void set_bit_at_index_08000f0c(uint index_to_set) {\n  if (index_to_set >= 0) {\n    int* ptr_to_dat = (int*)(DAT_08000f28 + ((index_to_set >> 5) + 0x60) * 4);\n    int bit_to_set = 1 << (index_to_set & 0x1f);\n    *ptr_to_dat = bit_to_set;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "output_ptr",
                "bVar1": "write_index",
                "cVar2": "next_char",
                "bVar3": "start_index",
                "bVar4": "data_count",
                "uVar5": "i",
                "uVar6": "next_index"
            },
            "code": "int process_data_08000998(int data_ptr, int output_ptr, undefined4 param_3, undefined4 param_4) {\n  byte start_index = get_start_index(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,param_4);\n  byte data_count = get_data_count(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = data_count << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (uint i = (uint)start_index; i < (uint)start_index + (uint)data_count; i = i + 1 & 0xff) {\n    byte write_index = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)write_index + 9) = (char)((ushort)*(undefined2 *)(output_ptr + i * 2) >> 8);\n    uint next_index = write_index + 1 & 0xff;\n    char next_char = (char)next_index;\n    *(char *)(data_ptr + 0x49) = next_char;\n    *(undefined *)(data_ptr + next_index + 9) = *(undefined *)(output_ptr + i * 2);\n    *(char *)(data_ptr + 0x49) = next_char + '\\x01';\n  }\n  char final_index = *(char *)(data_ptr + 0x49);\n  finalize_data(data_ptr);\n  return (int)(char)(final_index + '\\x02');\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_size",
                "puVar1": "ptr",
                "uVar2": "function_address",
                "piVar3": "status",
                "iVar4": "result",
                "pcVar5": "function_pointer",
                "unaff_r4": "register_4",
                "unaff_r5": "register_5",
                "in_lr": "link_register",
                "puVar6": "ptr_2",
                "PTR_PTR_DAT_080055dc": "pointer_to_pointer_to_data",
                "PTR_DAT_08005600": "pointer_to_data"
            },
            "code": "int process_input_080055d0(uint input_size) {\n  int *status = *(int **)PTR_PTR_DAT_080055dc;\n  if (input_size > 31) {\n    *status = 22;\n    return -1;\n  }\n  int *function_table = status[17];\n  if ((function_table != 0) && (function_table[input_size] != (code *)0)) {\n    if (function_table[input_size] != (code *)1) {\n      if (function_table[input_size] == (code *)-1) {\n        *status = 22;\n        return 1;\n      }\n      function_table[input_size] = 0;\n      (*(code *)function_table[input_size])(input_size);\n    }\n    return 0;\n  }\n  undefined *ptr = PTR_PTR_DAT_080055dc;\n  int function_address = thunk_FUN_0800410c(status);\n  undefined *error_status = PTR_DAT_08005600;\n  *(undefined4 *)PTR_DAT_08005600 = 0;\n  int result = FUN_080040fc(function_address, input_size, input_size, 0, ptr, unaff_r4, unaff_r5, in_lr);\n  if ((result == -1) && (*(int *)error_status != 0)) {\n    *status = *(int *)error_status;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "processInput_080056f8",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "dataPtr",
                "iVar2": "result"
            },
            "code": "void processInput_080056f8(int *output, undefined4 input)\n{\n    undefined *dataPtr;\n    int result;\n    \n    dataPtr = PTR_DAT_08005714;\n    *(undefined4 *)PTR_DAT_08005714 = 0;\n    result = calculate(input);\n    \n    if ((result == -1) && (*(int *)dataPtr != 0)) {\n        *output = *(int *)dataPtr;\n    }\n    return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "processInput_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_file_permissions_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_mode",
                "param_3": "permission_status",
                "param_4": "is_setuid",
                "iVar1": "result",
                "uVar2": "file_permission",
                "auStack_4c": "permission_buffer",
                "local_48": "file_header"
            },
            "code": "int check_file_permissions_080054b4(int file_descriptor, int file_mode, int *permission_status, unsigned int *is_setuid) {\n    int file_permission;\n    if (*(short *)(file_mode + 0xe) < 0 || FUN_080056d4(file_descriptor, (int)*(short *)(file_mode + 0xe), &file_permission) < 0) {\n        *is_setuid = 0;\n        if ((int)((uint)*(ushort *)(file_mode + 0xc) << 0x18) < 0) {\n            file_permission = 0x40;\n            goto LAB_080054f4;\n        }\n    } else {\n        *is_setuid = (unsigned int)((file_permission & 0xf000) == 0x2000);\n    }\n    file_permission = 0x400;\nLAB_080054f4:\n    *permission_status = file_permission;\n    return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_file_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "param_b"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  uint32_t *param_b = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((param_b == (uint32_t *)0x4) || ((param_b == (uint32_t *)0x8 || (param_b == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08001718();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          uint32_t *param_9 = input[9];\n          input[9] = (uint32_t *)((int)param_9 + 1);\n          (*input)[4] = (uint32_t)*(byte *)param_9;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      uint32_t *param_9 = input[9];\n      input[9] = (uint32_t *)((int)param_9 + 1);\n      (*input)[4] = (uint32_t)*(byte *)param_9;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "check_parameters_08004560",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "PTR_DAT_08004588": "PTR_DATA"
            },
            "code": "void check_parameters_08004560(int param_1, int param_2) {\n    if ((param_1 == 1) && (param_2 == 0xffff)) {\n        call_function(PTR_DAT_08004588, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_08000a7a",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "input_offset",
                "param_4": "output_offset",
                "iVar1": "input_index",
                "iVar2": "input_length",
                "uVar3": "i",
                "uVar4": "bit_mask_index",
                "uVar5": "bit_position",
                "uVar6": "byte_position",
                "uVar7": "bit_mask_offset",
                "byte": "uint8_t",
                "ushort": "uint16_t"
            },
            "code": "int set_bits_08000a7a(uint8_t *input_data, uint16_t *output_data, int input_offset, int output_offset, int count) {\n  int input_index = FUN_08004640(input_data[input_offset + 0xb], input_data[input_offset + 0xc], count, count, count);\n  int input_length = FUN_08004640(input_data[input_offset + 0xd], input_data[input_offset + 0xe]);\n  uint8_t *bit_mask = input_data + 0x10 + input_offset;\n  uint8_t bit_mask_index = 7;\n  for (int i = 0; i < input_length; i++) {\n    uint8_t bit_position = (i + input_index) & 0xf;\n    uint8_t byte_position = (i + input_index) * 0x100000 >> 0x18;\n    if (((int)(uint8_t)*(bit_mask + bit_mask_index + 9) >> bit_mask_index & 1U) == 0) {\n      output_data[byte_position] = output_data[byte_position] & ~(1 << bit_position);\n    }\n    else {\n      output_data[byte_position] = output_data[byte_position] | (1 << bit_position);\n    }\n    bit_mask_index = (bit_mask_index + 1) & 0xff;\n    if (bit_mask_index > 7) {\n      bit_mask_index = 0;\n    }\n  }\n  input_data[input_offset + 0x49] = 6;\n  FUN_0800076c(input_data + input_offset);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bits_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "encode_string_08004cb0",
                "param_1": "arg1",
                "param_2": "length",
                "param_3": "encoded_length",
                "param_4": "arg4",
                "param_5": "callback",
                "iVar1": "status",
                "uVar2": "max_length",
                "uVar3": "padding",
                "bVar4": "has_padding",
                "uVar5": "remaining_length",
                "i": "index"
            },
            "code": "undefined4 encode_string_08004cb0(uint32_t arg1, uint32_t *length, uint32_t *encoded_length, uint32_t arg4, code *callback) {\n  int status;\n  uint32_t max_length = param_2[4] < param_2[2] ? param_2[2] : param_2[4];\n  *encoded_length = max_length;\n  if (*(char *)((int)param_2 + 0x43) != '\\0') {\n    *encoded_length += 1;\n  }\n  if ((int)(*param_2 << 0x1a) < 0) {\n    *encoded_length += 2;\n  }\n  uint32_t padding = *param_2 & 6;\n  if (padding == 0) {\n    for (; padding < param_2[3] - *encoded_length; padding++) {\n      status = (*callback)(arg1, arg4, (int)param_2 + 0x19, 1);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint32_t has_padding = *(byte *)((int)param_2 + 0x43) != 0 ? 1 : 0;\n  if ((int)(*param_2 << 0x1a) < 0) {\n    *(undefined *)((int)param_2 + has_padding + 0x43) = 0x30;\n    *(undefined *)((int)param_2 + has_padding + 0x44) = *(undefined *)((int)param_2 + 0x45);\n    has_padding += 2;\n  }\n  status = (*callback)(arg1, arg4, (int)param_2 + 0x43, has_padding);\n  if (status != -1) {\n    uint32_t remaining_length = param_2[3];\n    bool has_padding_4 = (*param_2 & 6) == 4;\n    if (has_padding_4) {\n      remaining_length -= *encoded_length;\n    }\n    if (has_padding_4) {\n      remaining_length &= ~((int)remaining_length >> 0x1f);\n    }\n    else {\n      remaining_length = 0;\n    }\n    if (param_2[4] < param_2[2]) {\n      remaining_length += (param_2[2] - param_2[4]);\n    }\n    uint32_t i = 0;\n    while (i < remaining_length) {\n      status = (*callback)(arg1, arg4, (int)param_2 + 0x1a, 1);\n      if (status == -1) {\n        break;\n      }\n      i++;\n    }\n    if (i == remaining_length) {\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "encode_string_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_function_if_not_null_08003594",
                "PTR_DAT_080035a4": "function_ptr_data",
                "PTR_DAT_080035a8": "parameter_data",
                "code": "function_pointer",
                "undefined4": "integer"
            },
            "code": "void execute_function_if_not_null_08003594(void)\n{\n  code* function_ptr = *(code**)PTR_DAT_080035a4;\n  if (function_ptr != NULL)\n  {\n    int parameter = *(int*)PTR_DAT_080035a8;\n    (*function_ptr)(parameter);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "clearFlagsAfterProcessing_08002940",
                "param_1": "processingPtr",
                "*param_1": "*processingPtr",
                "PTR_DAT_0800310c": "flagsPtr1",
                "PTR_DAT_08003114": "flagsPtr2"
            },
            "code": "void clearFlagsAfterProcessing_08002940(int *processingPtr)\n{\n    uint *PTR_DAT_0800310c = (uint *)(*processingPtr + 0xc);\n    uint *PTR_DAT_08003114 = (uint *)(*processingPtr + 0x14);\n    *PTR_DAT_0800310c = *PTR_DAT_0800310c & 0xfffffedf;\n    *PTR_DAT_08003114 = *PTR_DAT_08003114 & 0xfffffffe;\n    *(undefined *)((int)processingPtr + 0x3a) = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clearFlagsAfterProcessing_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "execute_application_08004204",
                "FUN_0800346c": "initialize_application"
            },
            "code": "void execute_application_08004204(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "execute_application_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "execute_operations_08003476",
                "FUN_08000e18": "initialize_data_structures",
                "FUN_08000f4e": "perform_first_operation",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void execute_operations_08003476(void)\n{\n  initialize_data_structures();\n  perform_first_operation();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08003474",
                "FUN_08000f4e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "execute_operations_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "retrieve_value_and_call_function_08004444",
                "param_1": "buffer_address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "function_table"
            },
            "code": "void retrieve_value_and_call_function_08004444(int buffer_address, uint index) {\n  undefined2 value;\n  code *function_table;\n  if (index < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_0800445c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(buffer_address + 0x12e) = value;\n  (*function_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "retrieve_value_and_call_function_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "initialize_program_0800346c",
                "FUN_08000e30": "setup_initial_configuration"
            },
            "code": "void initialize_program_0800346c(void)\n{\n  setup_initial_configuration();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "initialize_program_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_struct_080053a0",
                "param_1": "struct_address",
                "uVar1": "zero",
                "iVar2": "is_struct_address_equal_to_ptr",
                "bVar3": "is_struct_address_equal_to_ptr",
                "PTR_PTR_DAT_080053f8": "ptr_to_struct",
                "PTR_LAB_08005320_1_080053fc": "ptr_to_lab"
            },
            "code": "void initialize_struct_080053a0(int struct_address)\n{\n    undefined4 zero = 0;\n    undefined4 PTR_LAB_08005320_1_080053fc = PTR_LAB_08005320_1_080053fc;\n    int PTR_PTR_DAT_080053f8 = *(int *)PTR_PTR_DAT_080053f8;\n    bool is_struct_address_equal_to_ptr = struct_address == PTR_PTR_DAT_080053f8;\n    int iVar2 = is_struct_address_equal_to_ptr ? 1 : 0;\n    if (*(int *)(struct_address + 0x18) == 0) {\n        *(undefined4 *)(struct_address + 0x48) = zero;\n        *(undefined4 *)(struct_address + 0x4c) = zero;\n        *(undefined4 *)(struct_address + 0x50) = zero;\n        *(undefined **)(struct_address + 0x28) = PTR_LAB_08005320_1_080053fc;\n        if (is_struct_address_equal_to_ptr) {\n            *(int *)(struct_address + 0x18) = iVar2;\n        }\n        *(undefined4 *)(struct_address + 4) = FUN_08005400();\n        *(undefined4 *)(struct_address + 8) = FUN_08005400(struct_address);\n        *(undefined4 *)(struct_address + 0xc) = FUN_08005400(struct_address);\n        FUN_0800532c(*(undefined4 *)(struct_address + 4), 4, 0);\n        FUN_0800532c(*(undefined4 *)(struct_address + 8), 9, 1);\n        FUN_0800532c(*(undefined4 *)(struct_address + 0xc), 0x12, 2);\n        *(int *)(struct_address + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004fdc",
                "FUN_08004a34",
                "FUN_08004a84",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "initialize_struct_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = FUN_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = FUN_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_080028d4",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_080028d4(uint32_t *data, uint8_t bit_position, uint32_t bit_value) {\n    uint32_t mask = ~(4 << (bit_position & 0xff));\n    *data = (*data & mask) | (bit_value << (bit_position & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "process_data_080040ec",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "FUN_08003d18": "call_data_processing"
            },
            "code": "void process_data_080040ec(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n    call_data_processing(data2, data3, data3, data4, data4);\n    return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "process_data_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "validate_input_and_set_values_08001460",
                "param_1": "pointer_array",
                "param_2": "pointer",
                "param_3": "size",
                "param_4": "pointer2",
                "uVar1": "result",
                "puVar2": "current_pointer"
            },
            "code": "int validate_input_and_set_values_08001460(uint **pointer_array, uint *pointer, int size, uint *pointer2) {\n  int result;\n  uint *current_pointer;\n  if (*(char *)((int)pointer_array + 0x3d) == '(') {\n    if (pointer == NULL) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(pointer_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(pointer_array + 0xf) = 1;\n      current_pointer = *pointer_array;\n      if ((*current_pointer & 1) == 0) {\n        *current_pointer = *current_pointer | 1;\n      }\n      **pointer_array = **pointer_array & 0xfffff7ff;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x29;\n      *(undefined *)((int)pointer_array + 0x3e) = 0x20;\n      result = 0;\n      pointer_array[0x10] = NULL;\n      pointer_array[9] = pointer;\n      *(short *)((int)pointer_array + 0x2a) = (short)size;\n      pointer_array[0xb] = pointer2;\n      *(undefined2 *)(pointer_array + 10) = *(undefined2 *)((int)pointer_array + 0x2a);\n      *(undefined *)(pointer_array + 0xf) = 0;\n      (*pointer_array)[1] = (*pointer_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_values_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "processInput_08003880",
                "param_1": "bufferAddress",
                "param_2": "isZero",
                "param_3": "inputLength",
                "param_4": "param_4",
                "iVar1": "processStatus",
                "FUN_0800387c": "getProcessStatus",
                "*(int *)(param_1 + 0xc)": "*(int *)(bufferAddress + 0xc)",
                "*(undefined *)(iVar1 + 0x88)": "*(undefined *)(processStatus + 0x88)",
                "*(undefined *)(iVar1 + 0x5e)": "*(undefined *)(processStatus + 0x5e)",
                "*(code **)(iVar1 + 100)": "*(code **)(processStatus + 100)",
                "FUN_08001460": "processBuffer",
                "FUN_080014ec": "processBuffer"
            },
            "code": "void processInput_08003880(int bufferAddress, int isZero, int inputLength, undefined4 param_4) {\n  int processStatus;\n  processStatus = getProcessStatus();\n  if (inputLength == *(int *)(bufferAddress + 0xc)) {\n    if (isZero == 0) {\n      *(undefined *)(processStatus + 0x88) = 0;\n      *(undefined *)(processStatus + 0x5e) = 0;\n      if (*(code **)(processStatus + 100) != (code *)0x0) {\n        (**(code **)(processStatus + 100))();\n      }\n      processBuffer(bufferAddress,processStatus + 0x68,*(undefined *)(processStatus + 0x88),8);\n      return;\n    }\n    *(undefined *)(processStatus + 0x5e) = 1;\n    processBuffer(bufferAddress,processStatus + 0x68,0x20,8,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "processInput_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_bit_to_zero_08002f4c",
                "param_1": "ptr_param",
                "*(uint *)(*param_1 + 0xc)": "*ptr",
                "*(undefined *)((int)param_1 + 0x39)": "*data",
                "FUN_08003f48": "call_function"
            },
            "code": "int set_bit_to_zero_08002f4c(int *ptr_param){\n    uint32_t *ptr = (uint32_t*)(*ptr_param + 0xc);\n    *ptr = *ptr & 0xffffffbf;\n    char *data = (char*)(ptr_param + 0x39);\n    *data = 0x20;\n    call_function();\n    return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_and_values_080035bc",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flags_and_values_080035bc(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_080035f0;\n  *DAT_080035f0 |= 1;\n  flag_ptr[2] = 0;\n  *flag_ptr &= 0xfef6ffff;\n  flag_ptr[1] = DAT_080035f4;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "calculate_shift_amount_080025ec",
                "uVar1": "shift_amount",
                "FUN_080025e0": "call_function_to_get_value",
                "PTR_DAT_08002608": "shift_values_array",
                "DAT_08002604": "global_variable"
            },
            "code": "uint calculate_shift_amount_080025ec(void)\n{\n  uint shift_amount;\n  shift_amount = call_function_to_get_value();\n  uint index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint shift_value = PTR_DAT_08002608[index];\n  return shift_amount >> shift_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_program_08000c4c",
                "FUN_080005e4": "set_initial_value",
                "FUN_08000600": "set_memory_block",
                "PTR_DAT_08000c60": "PTR_DAT_program_data"
            },
            "code": "void initialize_program_08000c4c(void)\n{\n  set_initial_value(0);\n  set_memory_block(PTR_DAT_08000c60,0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "initialize_program_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "count_chars_08004a60",
                "param_1": "val1",
                "param_2": "val2",
                "param_3": "str",
                "param_4": "len",
                "iVar1": "count",
                "puVar2": "end",
                "iVar3": "index"
            },
            "code": "int count_chars_08004a60(int val1, int val2, char *str, int len) {\n  int count = 0;\n  char *end = str + len;\n  while (str != end) {\n    if (*str == val1) {\n      count++;\n    }\n    str++;\n  }\n  return count;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "count_chars_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "update_status_080050d0",
                "param_1": "status",
                "param_2": "ptr",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "var1"
            },
            "code": "uint update_status_080050d0(uint *status, uint *ptr)\n{\n    uint result;\n    ushort flags;\n    int var1;\n    var1 = *(int *)PTR_PTR_DAT_0800519c;\n    if ((var1 != 0) && (*(int *)(var1 + 0x18) == 0)) {\n        FUN_080053a0(var1);\n    }\n    if (ptr == (uint *)PTR_DAT_080051a0) {\n        ptr = *(uint **)(var1 + 4);\n    }\n    else if (ptr == (uint *)PTR_DAT_080051a4) {\n        ptr = *(uint **)(var1 + 8);\n    }\n    else if (ptr == (uint *)PTR_DAT_080051a8) {\n        ptr = *(uint **)(var1 + 0xc);\n    }\n    flags = *(ushort *)(ptr + 3);\n    result = (uint)flags;\n    if (-1 < (int)(result << 0x1c)) {\n        if (-1 < (int)(result << 0x1b)) {\n            *status = 9;\n            goto LAB_08005100;\n        }\n        if ((int)(result << 0x1d) < 0) {\n            if ((uint *)ptr[0xd] != (uint *)0x0) {\n                if ((uint *)ptr[0xd] != ptr + 0x11) {\n                    FUN_080048dc(status);\n                }\n                ptr[0xd] = 0;\n            }\n            *(ushort *)(ptr + 3) = *(ushort *)(ptr + 3) & 0xffdb;\n            ptr[1] = 0;\n            *ptr = ptr[4];\n        }\n        *(ushort *)(ptr + 3) = *(ushort *)(ptr + 3) | 8;\n    }\n    if ((ptr[4] == 0) && ((*(ushort *)(ptr + 3) & 0x280) != 0x200)) {\n        FUN_080054fc(status, ptr);\n    }\n    flags = *(ushort *)(ptr + 3);\n    result = flags & 1;\n    if ((flags & 1) == 0) {\n        if (-1 < (int)((uint)flags << 0x1e)) {\n            result = ptr[5];\n        }\n        ptr[2] = result;\n    }\n    else {\n        ptr[2] = 0;\n        ptr[6] = -ptr[5];\n    }\n    if (ptr[4] == 0) {\n        flags = *(ushort *)(ptr + 3);\n        result = (int)(short)flags & 0x80;\n        if (result != 0) {\n            *(ushort *)(ptr + 3) = flags | 0x40;\n            return 0xffffffff;\n        }\n    }\n    else {\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a34",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "update_status_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "out_pointer",
                "param_2": "size",
                "puVar1": "pointer_1",
                "uVar2": "result",
                "puVar3": "current_block",
                "iVar4": "size_difference",
                "uVar5": "block_size",
                "puVar6": "previous_block",
                "puVar7": "current_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *out_pointer, uint size)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out_pointer = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    uint *current_block = *(uint **)PTR_DAT_08004a2c;\n    uint *previous_block = *(uint **)PTR_DAT_08004a2c;\n    while (current_block != (uint *)0x0) {\n      uint block_size = *current_block - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block == current_block) {\n            aligned_size = previous_block[1];\n          }\n          else {\n            aligned_size = current_block[1];\n          }\n          if (previous_block == current_block) {\n            *(uint *)PTR_DAT_08004a2c = aligned_size;\n            current_block = previous_block;\n          }\n          else {\n            previous_block[1] = aligned_size;\n          }\n        }\n        else {\n          *current_block = block_size;\n          *(uint *)((int)current_block + block_size) = aligned_size;\n          current_block = (uint *)((int)current_block + block_size);\n        }\n        goto LAB_080049dc;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint result = FUN_0800500c(out_pointer);\n      *(undefined4 *)PTR_DAT_08004a30 = result;\n    }\n    current_block = (uint *)FUN_0800500c(out_pointer, aligned_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (int size_difference = FUN_0800500c(out_pointer,(int)previous_block - (int)current_block), size_difference != -1)))) {\n      *previous_block = aligned_size;\nLAB_080049dc:\n      do_nothing_0800557e(out_pointer);\n      uint block_end = (int)previous_block + 0xbU & 0xfffffff8;\n      int padding_size = block_end - (int)(previous_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)previous_block + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out_pointer = 0xc;\n    do_nothing_0800557e(out_pointer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_parameters_08002d0c",
                "param_1": "parameters",
                "param_2": "param_count",
                "param_3": "param_check",
                "param_4": "param_int",
                "param_5": "param_uint",
                "iVar1": "result"
            },
            "code": "uint32_t check_parameters_08002d0c(uint32_t **parameters, uint32_t param_count, bool param_check, int param_int, uint32_t param_uint)\n{\n    int result = 3;\n    while (param_uint != 0xffffffff && (param_uint != 0 && (FUN_08000e30() - param_int) <= param_uint)) {\n        if ((param_count & ~**parameters) == 0) {\n            return 0;\n        }\n    }\n    (*parameters)[3] &= 0xfffffe5f;\n    (*parameters)[5] &= 0xfffffffe;\n    *(uint8_t *)((int)parameters + 0x39) = 0x20;\n    *(uint8_t *)((int)parameters + 0x3a) = 0x20;\n    *(uint32_t *)(parameters + 0xe) = 0;\n    return result;\n}\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_parameters_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_input_08001904",
                "param_1": "input",
                "puVar1": "output",
                "DAT_08001904_0000003d": "char_3d",
                "DAT_08001904_0000003e": "char_3e",
                "DAT_08001904_0000002a": "ushort_2a"
            },
            "code": "uint32_t process_input_08001904(uint32_t **input)\n{\n    uint32_t *current_input = *input;\n    uint32_t *input_end = current_input + 0x10;\n\n    if (*((char *)input + 0x3d) == '\"') {\n        uint16_t input_length = *((uint16_t *)input + 0x2a);\n        if (input_length < 4) {\n            if (input_length < 2) {\n                current_input[0] &= 0xfffffbff;\n                current_input[1] &= 0xfffff8ff;\n                uint8_t *output = (uint8_t *)(input + 9);\n                *output = (uint8_t)current_input[4];\n                *((uint16_t *)input + 0x2a) = input_length - 1;\n                *((char *)input + 0x3d) = ' ';\n                input[0xc] = NULL;\n                if (*((char *)input + 0x3e) == '@') {\n                    *((char *)input + 0x3e) = 0;\n                    do_nothing_08001902();\n                }\n                else {\n                    *((char *)input + 0x3e) = 0;\n                    do_nothing_080015b8();\n                }\n            }\n        }\n        else {\n            uint8_t *output = (uint8_t *)(input + 9);\n            *output = (uint8_t)current_input[4];\n            *((uint16_t *)input + 0x2a) = input_length - 1;\n            if (*((uint16_t *)input + 0x2a) == 3) {\n                current_input[1] &= 0xfffffbff;\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "arg1",
                "PTR_DAT_08000c78": "data_chunk_ptr",
                "PTR_DAT_08000c74": "data_ptr",
                "0x10": "data_size"
            },
            "code": "void process_data_08000c64(void)\n{\n  undefined4 arg1;\n  undefined4 arg2;\n  int data_size = 0x10;\n  int data_offset = 0;\n  process_data_08000c64_chunk(PTR_DAT_08000c78, PTR_DAT_08000c74, data_size, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "process_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "third_word",
                "puVar3": "ptr",
                "uVar4": "bit_0_of_word_5",
                "uVar5": "first_word",
                "FUN_08002f66": "process_case_1",
                "FUN_0800295c": "process_case_2",
                "FUN_08002f4c": "process_case_3",
                "do_nothing_08003f94": "do_nothing",
                "PTR_LAB_0800311c_1_08003118": "case_5_0800311c_1_08003118",
                "FUN_08000f8c": "do_something"
            },
            "code": "void process_data_08002ffc(uint **data)\n{\n  uint *ptr = *data;\n  uint first_word = *ptr;\n  uint third_word = ptr[3];\n  \n  if ((((first_word & 0xf) == 0) && ((first_word & 0x20) != 0)) && ((third_word & 0x20) != 0))) {\n    process_case_1(data);\n    return;\n  }\n  if (((first_word & 0xf) == 0) || ((ptr[5] & 1) == 0 && ((third_word & 0x120) == 0)))) {\n    if (((first_word & 0x80) != 0) && ((third_word & 0x80) != 0))) {\n      process_case_2(data);\n      return;\n    }\n    if (((first_word & 0x40) != 0) && ((third_word & 0x40) != 0))) {\n      process_case_3(data);\n    }\n  }\n  else {\n    if (((first_word & 1) != 0) && ((third_word & 0x100) != 0))) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((first_word & 4) != 0) && ((ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((first_word & 2) != 0) && ((ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((first_word & 8) != 0) && ((ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((first_word & 0x20) != 0) && ((third_word & 0x20) != 0))) {\n        process_case_1(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing_08003f94(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      process_case_4(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        do_nothing_08003f94(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing_08003f94(data);\n        return;\n      }\n      data[13][0x14] = (uint)PTR_LAB_0800311c_1_08003118;\n      int result = do_something(data[13]);\n      if (result != 0) {\n        (*(code *)data[13][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08002f66",
                "FUN_08002940",
                "FUN_0800295c",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_0800387c(int input) {\n    int result = input - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "check_param_0800351e",
                "param_1": "num",
                "uVar1": "result"
            },
            "code": "int check_param_0800351e(int num) {\n  if (num != 0) {\n    int result = do_something();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "check_param_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "data_dest_byte",
                "sVar2": "data_count",
                "puVar3": "data_dest_char",
                "data_type": "data_type",
                "data_value": "data_value"
            },
            "code": "int process_data_08002f66(int *data) {\n  char *data_start = (char *)(data + 0x3a);\n  if (*data_start != '\"') {\n    return 2;\n  }\n  \n  int data_type = data[2];\n  int data_value = *(int *)(*data + 4);\n  \n  if (data_type == 0x1000) {\n    if (data[4] == 0) {\n      *(unsigned short *)data[10] = (unsigned short)((data_value << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(unsigned short *)data[10] = (unsigned short)data_value & 0xff;\n      data[10]++;\n    }\n  }\n  else {\n    if (data[4] == 0) {\n      char *data_dest = (char *)data[10];\n      *data_dest = (char)data_value;\n      data[10]++;\n    }\n    else {\n      unsigned char *data_dest = (unsigned char *)data[10];\n      *data_dest = (unsigned char)data_value & 0x7f;\n      data[10]++;\n    }\n  }\n  \n  short data_count = *(short *)(data + 0x2e) - 1;\n  *(short *)(data + 0x2e) = data_count;\n  \n  if (data_count != 0) {\n    return 0;\n  }\n  \n  *(unsigned int *)(*data + 0xc) &= 0xfffffedf;\n  *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n  *data_start = ' ';\n  \n  process_data_08002f66_end();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "process_data_080034b6",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_length",
                "param_4": "data_buffer",
                "FUN_08001198": "send_data"
            },
            "code": "void process_data_080034b6(undefined4 data_ptr, undefined2 data_type, int data_length, undefined4 data_buffer) {\n  if (data_length == 0) {\n    send_data(data_ptr, data_type, 0, data_buffer, data_buffer);\n    return;\n  }\n  send_data(data_ptr, data_type, 1, data_buffer, data_buffer);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "process_data_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "process_data_08003eac",
                "param_1": "data",
                "param_2": "value",
                "bVar1": "index",
                "PTR_DAT_08003ef4": "data_array",
                "PTR_DAT_08003ef8": "address_array",
                "*(byte *)(param_1 + 0x44)": "*(uint8_t *)(data + 0x44)",
                "*(undefined4 *)(PTR_DAT_08003ef4 + (uint)bVar1 * 4)": "*(uint32_t *)(data_array + index * 4)",
                "*(int *)(PTR_DAT_08003ef8 + (uint)bVar1 * 4)": "*(int *)(address_array + index * 4)",
                "*(char *)(param_1 + 0x5c)": "char_value",
                "FUN_08000e60": "send_message",
                "FUN_08000ec4": "close_connection",
                "*(undefined4 *)(PTR_DAT_08003efc + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(uint32_t *)(PTR_DAT_08003efc + index * 4)",
                "*(int *)(param_1 + 0x68)": "offset",
                "*(ushort *)(param_1 + 0x6e)": "address_offset",
                "FUN_08002eb2": "process_data"
            },
            "code": "void process_data_08003eac(int data, uint32_t value) {\n  if (data != 0) {\n    uint8_t index = *(uint8_t *)(data + 0x44);\n    *(uint32_t *)(PTR_DAT_08003ef4 + index * 4) = value;\n    *(int *)(PTR_DAT_08003ef8 + index * 4) = data;\n    int char_value = *(char *)(data + 0x5c);\n    send_message(char_value);\n    close_connection(char_value);\n    uint32_t address = *(undefined4 *)(PTR_DAT_08003efc + (uint)*(byte *)(param_1 + 0x44) * 4);\n    uint32_t offset = *(uint16_t *)(data + 0x6e);\n    process_data_08003eac(address, offset + *(int *)(data + 0x68), 1);\n  }\n}\n",
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "process_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "get_value_08003e18",
                "param_1": "address",
                "param_2": "output",
                "param_3": "default_value",
                "param_4": "param_4",
                "iVar1": "result"
            },
            "code": "int get_value_08003e18(int address, char *output, int default_value, int param_4) {\n  if (address == 0) {\n    return -1;\n  }\n  int result = FUN_08003dd0();\n  if (result == 0) {\n    *output = *(char *)(address + 0x45);\n    FUN_08002efa(*(int *)(PTR_DAT_08003e50 + (uint)*(char *)(address + 0x44) * 4), address + 0x45, 1, PTR_DAT_08003e50, param_4);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "get_value_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_value_at_address_080040fc",
                "PTR_DAT_08004108": "ADDRESS_PTR"
            },
            "code": "void set_value_at_address_080040fc(void)\n{\n  int* ptr = (int*)PTR_DAT_08004108;\n  int value_to_set = 22;\n  *ptr = value_to_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_value_at_address_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "param_3": "array_size",
                "param_4": "param_4",
                "uVar1": "data_value",
                "iVar2": "return_value"
            },
            "code": "int process_data_08002dd0(int *data_ptr, ushort *data_array, int array_size, undefined4 param_4) {\n  undefined4 uVar1;\n  int return_value;\n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0 || array_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(data_ptr + 9) = (short)array_size;\n      *(short *)((int)data_ptr + 0x26) = (short)array_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          return_value = process_data_08002dd0_internal(data_ptr,0x80,0,uVar1,param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_array & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          return_value = process_data_08002dd0_internal(data_ptr,0x80,0,uVar1,param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      return_value = process_data_08002dd0_internal(data_ptr,0x40,0,uVar1,param_4);\n      if (return_value == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "execute_function_with_params_and_results_08004860",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "result_1",
                "param_4": "result_2",
                "uStack_8": "result_1_ptr",
                "uStack_4": "result_2_ptr",
                "PTR_PTR_DAT_08004880": "function_pointer"
            },
            "code": "void execute_function_with_params_and_results_08004860(void* PTR_PTR_DAT_08004880, int param_1, int param_2, int* result_1, int* result_2)\n{\n  *result_1 = param_2;\n  *result_2 = 0;\n  ((void (*)(int, int, int*, int*))PTR_PTR_DAT_08004880)(param_1, param_2, result_1, result_2);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_results_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "process_data_08004622",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "func_ptr",
                "FUN_080045c8": "call_func"
            },
            "code": "void process_data_08004622(undefined4 *data, uint data_size, uint flag, undefined4 func_ptr) {\n  if (flag != 0) {\n    call_func(data, data_size, flag & 0xff);\n    return;\n  }\n  (**(code **)*data)(data, data_size & 0xff, 0, *(code **)*data, func_ptr);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "process_data_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "input_data",
                "local_4c": "result",
                "FUN_080034f4": "calculate_value",
                "PTR_DAT_08003468": "PTR_DATA",
                "FUN_0800339c": "get_operation_type",
                "FUN_0800354a": "get_flag",
                "FUN_08002864": "perform_operation_1",
                "FUN_080028f0": "perform_operation_2",
                "FUN_0800268e": "finalize_operation"
            },
            "code": "void process_data_08003414(int input_data)\n{\n    int result[16];\n    result[0] = calculate_value(input_data, PTR_DAT_08003468);\n    if (result[0] != 0)\n    {\n        int operation_type = get_operation_type(input_data);\n        if (operation_type == 0 || operation_type == 4 || operation_type == 8 || operation_type == 0xC || operation_type == 0x18)\n        {\n            uint flag = get_flag(input_data, PTR_DAT_08003468);\n            if ((flag & 0x100000) == 0)\n            {\n                perform_operation_1(result, operation_type);\n            }\n            else\n            {\n                perform_operation_2(result, operation_type);\n            }\n            finalize_operation(result);\n        }\n    }\n}",
            "called": [
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "initialize_param_08005718",
                "param_1": "output_param",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr_to_dat",
                "iVar2": "result"
            },
            "code": "void initialize_param_08005718(int *output_param, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr_to_dat = PTR_DAT_08005738;\n  *(undefined4 *)ptr_to_dat = 0;\n  int result = FUN_080040e4(param_2, param_3, param_4, param_4, param_4);\n  if (result == -1 && *(int *)ptr_to_dat != 0) {\n    *output_param = *(int *)ptr_to_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "imported": false,
            "current_name": "initialize_param_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "calculate_checksum_080011c0",
                "param_1": "data",
                "*(char *)((int)param_1 + 0x3e)": "*(char*)(data + 0x3e)",
                "param_1[0x14]": "data[0x14]",
                "*(uint *)(*param_1 + 0x10)": "ptr[0x4]",
                "param_1[0x11]": "data[0x11]",
                "*(char *)((int)param_1 + 0x3d)": "*(char*)(data + 0x3d)",
                "param_1[4]": "data[0x4]",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": "(data[0x11] << 0x10) >> 0x17 & 6 | 0xf0",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": "(data[0x11] << 0x10) >> 0x17 & 6 | 0xf1"
            },
            "code": "uint8_t calculate_checksum_080011c0(int* data)\n{\n    const uint8_t AT_SIGN = '@';\n    const uint16_t FOUR_THOUSAND = 0x4000;\n    uint32_t* ptr = (uint32_t*)data;\n    uint8_t checksum = 0;\n    if (*(char*)(data + 0x3e) == AT_SIGN)\n    {\n        if (data[0x14] == 0)\n        {\n            ptr[0x4] = data[0x11] & 0xfe;\n        }\n        else\n        {\n            ptr[0x4] = data[0x11] & 0xff | 1;\n        }\n    }\n    else if (data[0x4] == FOUR_THOUSAND)\n    {\n        const uint8_t EXCLAMATION_MARK = '!';\n        if (*(char*)(data + 0x3d) == EXCLAMATION_MARK)\n        {\n            ptr[0x4] = data[0x11] & 0xfe;\n        }\n        else\n        {\n            ptr[0x4] = data[0x11] & 0xff | 1;\n        }\n    }\n    else if (data[0x14] == 0)\n    {\n        ptr[0x4] = (data[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (data[0x14] == 1)\n    {\n        ptr[0x4] = (data[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return checksum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "calculate_checksum_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "data",
                "param_2": "input_data",
                "param_3": "input_size",
                "bVar1": "response_code",
                "unaff_r5": "response_length",
                "iVar2": "response_size",
                "iVar3": "result"
            },
            "code": "int process_data_08000b54(int **data, int *input_data, int input_size) {\n  byte response_code;\n  int response_size;\n  uint response_length;\n\n  data[19] = input_data;\n  *(char *)(data + 24) = (char)input_size;\n\n  if (*(byte *)((int)data + 5) < 4) {\n    response_code = (**(code **)(**data + 8))();\n    response_length = (uint)response_code;\n  }\n\n  if (response_length == 0 || (int)response_length < 8) {\n    response_size = 0;\n  }\n  else {\n    response_size = process_data_08000b54_internal(data);\n    *(char *)(data + 2) = (char)response_size;\n\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      response_size = check_response(data);\n      if (response_size < 1) {\n        response_size = get_response(data);\n        data[23] = (int *)((uint)*(ushort *)((int)data + 86) + response_size);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n          case 1:\n          case 2:\n            response_size = process_type_1_2(data, input_data, input_size);\n            break;\n          case 3:\n          case 4:\n            response_size = process_type_3_4(data, input_data, input_size);\n            break;\n          case 5:\n            response_size = process_type_5(data, input_data, input_size);\n            break;\n          case 6:\n            response_size = process_type_6(data, input_data, input_size);\n            break;\n          case 15:\n            response_size = process_type_15(data, input_data, input_size);\n            break;\n          case 16:\n            response_size = process_type_16(data, input_data, input_size);\n            break;\n        }\n      }\n      else {\n        if (response_size != 255) {\n          handle_error(data, response_size);\n          cleanup(data);\n        }\n        *(char *)(data + 2) = (char)response_size;\n        response_size = (int)(char)response_size;\n      }\n    }\n    else {\n      response_size = 0;\n    }\n  }\n  return response_size;\n}\n",
            "called": [
                "FUN_08000a00",
                "FUN_080006b4",
                "FUN_080008cc",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_08004204",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "process_data_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_function_if_not_null_0800376e",
                "iVar1": "function_pointer_address",
                "FUN_08003750": "get_function_pointer_address",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void execute_function_if_not_null_0800376e(void)\n{\n  int function_pointer_address = get_function_pointer_address();\n  if (*(code **)(function_pointer_address + 0x44) != (code *)0x0) {\n    (**(code **)(function_pointer_address + 0x44))();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_and_set_value_08000d98",
                "param_1": "value",
                "iVar1": "result",
                "PTR_DAT_08000ddc": "dividend_pointer",
                "PTR_DAT_08000dd8": "divisor_pointer",
                "divisor": "dividend_divided_by_divisor",
                "PTR_DAT_08000de0": "pointer_to_value"
            },
            "code": "int check_and_set_value_08000d98(uint value) {\n    uint divisor = *(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n    int result = FUN_08000ee0(divisor);\n    if (result != 0) {\n        return 1;\n    }\n    if (value > 0xf) {\n        return 1;\n    }\n    FUN_08000e60(0xffffffff, value, 0);\n    *(uint *)PTR_DAT_08000de0 = value;\n    return 0;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_and_set_value_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "process_data_08003f48",
                "uVar1": "random_index",
                "iVar2": "result",
                "iVar3": "data_ptr",
                "PTR_DAT_08003f88": "data_array_ptr",
                "PTR_DAT_08003f8c": "function_array_ptr",
                "PTR_DAT_08003f90": "address_array_ptr"
            },
            "code": "void process_data_08003f48()\n{\n  uint32_t random_index = generate_random_index();\n  int32_t data_ptr = *(int32_t *)(PTR_DAT_08003f88 + random_index * 4);\n  if ((random_index < 10) && (data_ptr != -1)) {\n    uint32_t address = *(uint32_t *)(PTR_DAT_08003f90 + (uint32_t)*(uint8_t *)(data_ptr + 0x44) * 4);\n    int32_t offset = *(int32_t *)(data_ptr + 0x68) + (uint32_t)*(uint16_t *)(data_ptr + 0x6e);\n    process_data_08003f48_at_address(address, offset, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "process_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "run_function_0800340c",
                "FUN_080035fc": "call_other_function"
            },
            "code": "void run_function_0800340c(void)\n{\n  call_other_function();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "run_function_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_short_0800352e",
                "param_1": "target",
                "param_2": "short_array",
                "*param_2": "*short_array"
            },
            "code": "unsigned int find_short_0800352e(int target, short *short_array)\n{\n  while( true ) {\n    if (*short_array == -1) {\n      return 0xffffffff;\n    }\n    if (*short_array == target) break;\n    short_array = short_array + 6;\n  }\n  return *(unsigned int *)(short_array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800354a",
                "FUN_0800352e"
            ],
            "imported": false,
            "current_name": "find_short_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "iVar1": "i",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "do_nothing_08001aac": "do_nothing",
                "FUN_08003900": "process_data_08003900",
                "FUN_08000f8c": "process_data_08000f8c"
            },
            "code": "void process_data_08001ab0(uint **data)\n{\n    int i;\n    uint *ptr1;\n    uint *ptr2;\n    \n    if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n        data[12] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x28;\n    }\n    else {\n        if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n            *(undefined *)((int)data + 0x3d) = 0x20;\n        }\n        data[12] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3e) = 0;\n    }\n    **data = **data & 0xfffff7ff;\n    ptr2 = *data;\n    if ((ptr2[1] & 0x800) == 0) {\n        if (*(char *)((int)data + 0x3d) == '`') {\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            data[0x10] = (uint *)0x0;\n            if ((ptr2[5] & 0x40) != 0) {\n                ptr1 = data[9];\n                data[9] = (uint *)((int)ptr1 + 1);\n                *(char *)ptr1 = (char)ptr2[4];\n            }\n            **data = **data & 0xfffffffe;\n            do_nothing_08001aac(data);\n        }\n        else {\n            if ((ptr2[5] & 0x40) != 0) {\n                ptr1 = data[9];\n                data[9] = (uint *)((int)ptr1 + 1);\n                *(char *)ptr1 = (char)ptr2[4];\n            }\n            process_data_08001ab0_08003900(data);\n        }\n    }\n    else {\n        ptr2[1] = ptr2[1] & 0xfffff7ff;\n        if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n            data[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n            i = process_data_08001ab0_08000f8c(data[0xe]);\n            if (i != 0) {\n                if (((*data)[5] & 0x40) != 0) {\n                    ptr2 = data[9];\n                    data[9] = (uint *)((int)ptr2 + 1);\n                    *(char *)ptr2 = (char)(*data)[4];\n                }\n                **data = **data & 0xfffffffe;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                (*(code *)data[0xe][0x14])();\n            }\n        }\n        else {\n            data[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n            i = process_data_08001ab0_08000f8c(data[0xd]);\n            if (i != 0) {\n                **data = **data & 0xfffffffe;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                (*(code *)data[0xd][0x14])();\n            }\n        }\n    }\n    if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n        data[0xb] = DAT_08001bf8;\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)((int)data + 0x3e) = 0;\n        process_data_08001ab0_080038d0(data);\n    }\n    return;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_data_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "set_flag_and_wait_for_response_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "PTR_DAT_0800200c": "data_ptr",
                "PTR_DAT_08002010": "flag_ptr",
                "FUN_08000e30": "get_current_time",
                "PTR_DAT_08002014": "response_ptr",
                "PTR_DAT_08002018": "response_flag_ptr",
                "response_received": "response_received",
                "timeout": "timeout"
            },
            "code": "int set_flag_and_wait_for_response_08001f9c(void)\n{\n  int start_time = get_current_time();\n  int current_time;\n  int response_received = 0;\n  int timeout = 1000;\n  *(uint *)(PTR_DAT_0800200c + 0x40) |= 0x10000000;\n  *PTR_DAT_08002010 = 1;\n  do {\n    current_time = get_current_time();\n    if ((*(uint *)(PTR_DAT_08002014 + 4) & 0x10000) != 0) {\n      *PTR_DAT_08002018 = 1;\n      response_received = 1;\n    }\n  } while ((uint)(current_time - start_time) < timeout && !response_received);\n  return response_received ? 0 : 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_and_wait_for_response_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_game_08000d8e",
                "FUN_080034ce": "load_game_data"
            },
            "code": "void initialize_game_08000d8e(void)\n{\n  load_game_data();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "initialize_game_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "call_another_function_08004638",
                "FUN_08004622": "do_something"
            },
            "code": "void call_another_function_08004638(void)\n{\n  do_something();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "call_another_function_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_080008cc",
                "param_1": "address",
                "param_2": "data",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(address + 9)",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(address + 4)",
                "*(byte *)(param_1 + 10)": "*(byte *)(address + 10)",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(address + 0xb)",
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(address + 0x49)"
            },
            "code": "void copy_data_080008cc(int address, undefined data)\n{\n    *(undefined *)(address + 9) = *(undefined *)(address + 4);\n    *(byte *)(address + 10) = *(byte *)(address + 10) ^ 0x80;\n    *(undefined *)(address + 0xb) = data;\n    *(undefined *)(address + 0x49) = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004d9c",
                "FUN_080053a0",
                "FUN_08004a60",
                "FUN_080050d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "update_value_based_on_condition_08005608",
                "param_1": "data",
                "param_2": "ptr_data",
                "iVar1": "index",
                "bVar3": "is_index_valid",
                "uVar2": "updated_value"
            },
            "code": "void update_value_based_on_condition_08005608(int data, int* ptr_data){\n    int index = get_index(data, (int)*(short *)(ptr_data + 0xe));\n    bool is_index_valid = index >= 0;\n    uint updated_value;\n    if (is_index_valid) {\n        updated_value = *(int *)(ptr_data + 0x54) + index;\n    }\n    else {\n        updated_value = *(ushort *)(ptr_data + 0xc) & 0xffffefff;\n    }\n    if (is_index_valid) {\n        *(uint *)(ptr_data + 0x54) = updated_value;\n    }\n    if (!is_index_valid) {\n        *(short *)(ptr_data + 0xc) = (short)updated_value;\n    }\n    return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "update_value_based_on_condition_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x3a)": "*(char *)((int)input_array + 0x3a)",
                "*(char *)(param_1 + 0xe)": "*(char *)(input_array + 14)",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "*(short *)(input_array + 11)",
                "*(short *)((int)param_1 + 0x2e)": "*(short *)((int)input_array + 0x2e)",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "*(char *)((int)input_array + 0x3a)",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(input_array + 14)",
                "*(uint *)(*param_1 + 0x14)": "*(int *)(*input_array + 0x14)",
                "*(uint *)(*param_1 + 0xc)": "*(int *)(*input_array + 0xc)"
            },
            "code": "int validate_input_08002efa(int *input_array, int array_length, int value) {\\\n                        if (input_array[10] != 0x0) {\\\n                            return 2;\\\n                        }\\\n                        if (array_length == 0) {\\\n                            return 1;\\\n                        }\\\n                        if (value == 0) {\\\n                            return 1;\\\n                        }\\\n                        if (input_array[14] != 0x1) {\\\n                            input_array[10] = array_length;\\\n                            input_array[11] = (short)value;\\\n                            input_array[14] = 0x0;\\\n                            input_array[15] = 0x0;\\\n                            input_array[16] = 0x0;\\\n                            input_array[17] = 0x0;\\\n                            input_array[18] = 0x0;\\\n                            input_array[19] = 0x0;\\\n                            input_array[20] = 0x0;\\\n                            *(char *)((int)input_array + 0x3a) = 0x22;\\\n                            *(char *)(input_array + 14) = 0x0;\\\n                            *(int *)(*input_array + 0x14) |= 0x1;\\\n                            *(int *)(*input_array + 0xc) |= 0x120;\\\n                            return 0;\\\n                        }\\\n                        return 2;\\\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_data_integrity_0800377c",
                "PTR_DAT_08003794": "ptr1",
                "PTR_DAT_08003794 + 0x24": "ptr2",
                "FUN_080026ce": "perform_data_integrity_check"
            },
            "code": "void check_data_integrity_0800377c(void)\n{\n  int* PTR_DAT_08003794 = (int*) PTR_DAT_08003794;\n  int* PTR_DAT_08003794 + 0x24 = (int*) (PTR_DAT_08003794 + 0x24);\n  if (*PTR_DAT_08003794 != 0 || *PTR_DAT_08003794 + 0x24 != 0) {\n    perform_data_integrity_check();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_data_integrity_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "update_flags_0800268e",
                "param_1": "input_data",
                "puVar1": "data_ptr"
            },
            "code": "void update_flags_0800268e(uint **input_data)\n{\n  uint *data_ptr;\n  *(undefined *)((int)input_data + 0x39) = 2;\n  data_ptr = *input_data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  call_function(param_1);\n  *(undefined *)((int)input_data + 0x39) = 0;\n  *(undefined *)(input_data + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_flags_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "decode_data_080008e2",
                "param_1": "data_ptr",
                "param_2": "key_ptr",
                "param_3": "unk1",
                "param_4": "unk2",
                "iVar1": "data_index",
                "uVar2": "data_len",
                "uVar3": "i",
                "uVar4": "byte_index",
                "cVar5": "key_offset",
                "iVar6": "key_offset_ptr",
                "PTR_FUN_08004640": "FUN_08004640",
                "PTR_DAT_0804a008": "byte",
                "PTR_DAT_0804a009": "byte",
                "PTR_DAT_0804a00a": "byte",
                "PTR_DAT_0804a00b": "byte",
                "PTR_DAT_0804a00c": "byte",
                "PTR_DAT_0804a00d": "byte",
                "PTR_DAT_0804a00e": "byte",
                "PTR_DAT_0804a00f": "byte",
                "PTR_DAT_0804a049": "key_data"
            },
            "code": "int decode_data_080008e2(int data_ptr, int key_ptr, int unk1, int unk2){\n    int data_index = PTR_FUN_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),unk1,unk2,unk2);\n    uint data_len = PTR_FUN_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n    char key_offset = (char)((data_len << 0x15) >> 0x18);\n    if ((data_len & 7) != 0) {\n        key_offset++;\n    }\n    *(char *)(data_ptr + 0xb) = key_offset;\n    *(undefined *)(data_ptr + 0x49) = 3;\n    uint bit_index = 0;\n    for (uint i = 0; i < data_len; i++) {\n        uint PTR_DAT_0804a008_index = ((i + data_index) * 0x100000 >> 0x18) * 2;\n        uint bit_mask = 1U << (i + data_index & 0xf);\n        uint bit_value = (uint)*(ushort *)(key_ptr + PTR_DAT_0804a008_index) >> (i + data_index & 0xf) & 1U;\n        uint key_offset_ptr = (uint)*(PTR_DAT_0804a008 *)(data_ptr + 0x49) + data_ptr;\n        if (bit_value == 0) {\n            *(PTR_DAT_0804a008 *)(key_offset_ptr + 9) &= ~(PTR_DAT_0804a008)(1 << bit_index);\n        }\n        else {\n            *(PTR_DAT_0804a008 *)(key_offset_ptr + 9) |= (PTR_DAT_0804a008)(1 << bit_index);\n        }\n        bit_index = (bit_index + 1) & 0xff;\n        if (bit_index > 7) {\n            *(char *)(data_ptr + 0x49)++;\n            bit_index = 0;\n        }\n    }\n    if ((data_len & 7) != 0) {\n        *(char *)(data_ptr + 0x49)++;\n    }\n    char key_len = *(char *)(data_ptr + 0x49);\n    FUN_0800076c(data_ptr);\n    return (int)(char)(key_len + 2);\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "num_ptr",
                "param_2": "num",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "digit_ptr",
                "cVar1": "digit",
                "local_15": "digits"
            },
            "code": "undefined4 convert_base_080045c8(int *num_ptr, uint num, uint base)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char digits[9];\n\n  digits[0] = 0;\n\n  if ((int)base < 2) {\n    base = 10;\n  }\n\n  char *digit_ptr = digits + 1;\n\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - ((int)(short)quotient * (int)(short)base & 0xffU) & 0xff;\n    digit_ptr--;\n    digit = (char)remainder;\n\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n\n    *digit_ptr = digit;\n    num = quotient;\n  } while (quotient != 0);\n\n  if (digit_ptr == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint num_digits = FUN_08000218(digit_ptr);\n    result = (**(code **)(*num_ptr + 4))(num_ptr, digit_ptr, num_digits);\n  }\n\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "process_data_08003d18",
                "param_1": "data",
                "param_2": "length",
                "sVar1": "data_value",
                "iVar2": "start_time",
                "iVar3": "data_result",
                "uVar4": "i",
                "PTR_DAT_08003dc0": "PTR_DATA_START",
                "PTR_DAT_08003dc4": "PTR_DATA_ARRAY",
                "PTR_DAT_08003dc8": "PTR_DATA_ARRAY_START",
                "PTR_DAT_08003dcc": "PTR_DATA_FLAG",
                "FUN_08000e30": "get_current_time",
                "FUN_080034f4": "find_data_value",
                "FUN_08003cc8": "handle_error",
                "FUN_08002dd0": "process_data_value"
            },
            "code": "uint process_data_08003d18(undefined4 data, uint length)\n{\n  int start_time = get_current_time();\n  short data_value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int data_result = find_data_value((int)data_value,PTR_DAT_08003dc4);\n  if (data_result == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 10 &&\n         ((*(int *)(PTR_DAT_08003dc8 + i * 4) == 0 ||\n          (data_result = find_data_value((int)data_value,PTR_DAT_08003dc4),\n          **(int **)(PTR_DAT_08003dc8 + i * 4) != data_result))))) {\n    i = i + 1 & 0xff;\n  }\n  if (9 < i) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (handle_error(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    data_result = process_data_08003d18_value(*(undefined4 *)(PTR_DAT_08003dc8 + i * 4),data,length & 0xffff,1000);\n    if (data_result == 0) {\n      return length;\n    }\n    data_result = get_current_time();\n  } while ((uint)(data_result - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08003cc8",
                "FUN_08002dd0",
                "FUN_080034f4",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "process_data_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_08004640(int value1, uint value2) {\n  return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a00",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_values_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_program_080034ce",
                "FUN_08000de4": "initialize_network",
                "FUN_08000c8c": "initialize_database"
            },
            "code": "void initialize_program_080034ce(void)\n{\n  initialize_network();\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "initialize_program_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "copy_param_to_buffer_080047fe",
                "param_1": "buffer",
                "param_2": "param",
                "FUN_08004844": "memcpy",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void copy_param_to_buffer_080047fe(void* buffer, void* param) {\n  memcpy(buffer, param, sizeof(param));\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "copy_param_to_buffer_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "process_command_08001256",
                "param_1": "command_ptr",
                "puVar1": "flag_ptr",
                "DAT_08004a8c": "flag",
                "PTR_DAT_08004a90": "param_ptr"
            },
            "code": "uint32_t process_command_08001256(uint32_t **command_ptr) {\n    uint32_t *DAT_08004a8c_ptr;\n    uint32_t *PTR_DAT_08004a90;\n    uint32_t DAT_08004a8c;\n    DAT_08004a8c_ptr = command_ptr[11];\n    if (command_ptr[20] != NULL || *((char *)command_ptr + 61) != '@') {\n        if (command_ptr[20] == NULL && command_ptr[4] == (uint32_t *)0xc000) {\n            **command_ptr |= 0x100;\n            command_ptr[20] = (uint32_t *)((int)command_ptr[20] + 1);\n        }\n        else {\n            PTR_DAT_08004a90 = command_ptr[11];\n            DAT_08004a8c = *((short *)command_ptr + 10);\n            if (DAT_08004a8c == 0) {\n                **command_ptr |= 0x200;\n            }\n            else if (DAT_08004a8c == 1) {\n                if (DAT_08004a8c_ptr == (uint32_t *)0xffff0000) {\n                    **command_ptr &= 0xfffffbff;\n                    DAT_08004a8c_ptr = *command_ptr;\n                    if ((DAT_08004a8c_ptr[1] & 0x800) == 0) {\n                        *DAT_08004a8c_ptr |= 0x200;\n                    }\n                    else {\n                        *DAT_08004a8c_ptr &= 0xfffffbff;\n                    }\n                }\n                else if (DAT_08004a8c_ptr == (uint32_t *)0x4 || DAT_08004a8c_ptr == (uint32_t *)0x8 || command_ptr[12] == (uint32_t *)0x12) {\n                    **command_ptr &= 0xfffffbff;\n                    **command_ptr |= 0x200;\n                }\n                else if (command_ptr[11] == (uint32_t *)0x2) {\n                    **command_ptr |= 0x400;\n                }\n                else {\n                    **command_ptr &= 0xfffffbff;\n                }\n            }\n            else if (DAT_08004a8c == 2) {\n                if (command_ptr[11] == (uint32_t *)0x2) {\n                    **command_ptr |= 0x400;\n                }\n                else {\n                    **command_ptr &= 0xfffffbff;\n                    **command_ptr |= 0x800;\n                }\n                DAT_08004a8c_ptr = *command_ptr;\n                if ((DAT_08004a8c_ptr[1] & 0x800) != 0) {\n                    DAT_08004a8c_ptr[1] |= 0x1000;\n                }\n            }\n            else {\n                **command_ptr |= 0x400;\n                DAT_08004a8c_ptr = *command_ptr;\n                if ((DAT_08004a8c_ptr[1] & 0x800) != 0) {\n                    DAT_08004a8c_ptr[1] |= 0x1000;\n                }\n            }\n            command_ptr[20] = NULL;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_command_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_pointer_start",
                "puVar2": "function_pointer_current",
                "puVar3": "function_pointer_end",
                "iVar4": "function_pointer_distance",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_pointer_start = PTR_DAT_080048bc;\n  int function_pointer_distance = (int)PTR_DAT_080048c0 - (int)PTR_DAT_080048bc;\n  int i;\n  for (i = 0; i < function_pointer_distance >> 2; i++) {\n    (**(code **)(function_pointer_start + i * 4))();\n  }\n  do_nothing_080059f8();\n  undefined *function_pointer_end = PTR_DAT_080048c8;\n  undefined *function_pointer_current = PTR_DAT_080048c4;\n  int function_pointer_count = (int)function_pointer_end - (int)function_pointer_current >> 2;\n  for (i = 0; i < function_pointer_count; i++) {\n    (**(code **)(function_pointer_current + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_and_execute_08004648",
                "FUN_08000e3c": "initialize",
                "FUN_08000d8e": "execute"
            },
            "code": "void initialize_and_execute_08004648(void)\n{\n  initialize(3);\n  execute();\n  return;\n}",
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "process_data_08000600",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "cVar1": "data_type",
                "iVar2": "result",
                "*param_1": "*data_ptr",
                "PTR_DAT_08000668": "data_source",
                "(int)param_1 + 5": "(int)data_ptr + 5",
                "(int)param_1 + 6": "(int)data_ptr + 6"
            },
            "code": "void process_data_08000600(int **data_ptr, unsigned int data_size)\n{\n    char data_type = *(char *)((int)data_ptr + 5);\n    int *PTR_DAT_08000668;\n    if (data_type == '\\x02') {\n        PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n    }\n    else if (data_type == '\\x03') {\n        PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n    }\n    else if (data_type == '\\x01') {\n        PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n    }\n    else {\n        PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n    }\n    process_PTR_DAT_08000668(PTR_DAT_08000668, data_size, 6);\n    if (data_size > 1) {\n        set_data_size(data_size, 1);\n        set_data_flag(*(undefined *)((int)data_ptr + 6), 0);\n    }\n    do {\n        int result = (**(code **)(**data_ptr + 0xc))();\n    } while (result >= 0);\n    *(undefined *)((int)data_ptr + 0x49) = 0;\n    *(undefined *)((int)data_ptr + 0x4a) = 0;\n    *(undefined2 *)(data_ptr + 0x15) = 0;\n    *(undefined2 *)((int)data_ptr + 0x52) = 0;\n    *(undefined2 *)(data_ptr + 0x14) = 0;\n    return;\n}",
            "called": [
                "FUN_08004388",
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "process_data_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "execute_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_080045be(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_08000728",
                "param_1": "data",
                "param_2": "length",
                "uVar2": "crc",
                "uVar3": "lsb",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint calculate_crc16_08000728(uint data[], int length) {\n  uint crc = 0xffff;\n  for (int i = 0; i < length; i++) {\n    crc = crc ^ data[i];\n    for (int j = 1; j < 9; j++) {\n      uint lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_result_0800354a",
                "param_1": "input_number",
                "uVar1": "result",
                "FUN_0800352e": "calculate_result"
            },
            "code": "int get_result_0800354a(int input_number) {\n  int result;\n  if (input_number == -1) {\n    result = -1;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_0800339c"
            ],
            "imported": false,
            "current_name": "get_result_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_value_at_offset_0800124a",
                "param_1": "base_address"
            },
            "code": "int set_value_at_offset_0800124a(int *base_address)\n{\n    int offset = 0x10;\n    int value = base_address[0x11] & 0xff;\n    *(uint *)(base_address + offset) = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "find_offset_08004094",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "stack_pointer",
                "PTR_DAT_080040c4": "memory_location_1",
                "PTR_DAT_080040c8": "memory_location_2",
                "PTR_DAT_080040cc": "memory_location_3"
            },
            "code": "int find_offset_08004094(int offset)\n{\n  int current_offset;\n  undefined *stack_pointer;\n  \n  if (*PTR_DAT_080040c4 == 0) {\n    *PTR_DAT_080040c4 = PTR_DAT_080040c8;\n  }\n  current_offset = *PTR_DAT_080040c4;\n  stack_pointer = (undefined *)(offset + current_offset);\n  if (stack_pointer <= &stack0x00000000) {\n    *PTR_DAT_080040c4 = stack_pointer;\n    return current_offset;\n  }\n  *PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "find_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_uint_at_offset_080033c8",
                "DAT_080033d4": "uint_array",
                "PTR_": "ptr_",
                "*(uint *)": "*uint_ptr",
                "+ 0x40": "at_offset",
                "& 0xdfffffff": "mask"
            },
            "code": "void clear_bit_in_uint_at_offset_080033c8(void)\n{\n    uint* uint_ptr = (uint*)(DAT_080033d4 + 0x40);\n    uint mask = 0xdfffffff;\n    *uint_ptr = *uint_ptr & mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_uint_at_offset_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08003350": "flag_base_address",
                "DAT_08003354": "return_value_0",
                "DAT_08003358": "return_value_1",
                "DAT_0800335c": "return_value_2",
                "DAT_08003360": "return_value_3",
                "DAT_08003364": "return_value_4",
                "DAT_08003368": "return_value_5",
                "DAT_0800336c": "return_value_6",
                "DAT_08003370": "return_value_7",
                "DAT_08003374": "return_value_8",
                "DAT_08003378": "return_value_9",
                "DAT_0800337c": "return_value_10"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag)\n{\n    uint32_t* flag_ptr = (uint32_t*)(DAT_08003350 + 0x30);\n    switch(flag)\n    {\n        case 0:\n            *flag_ptr |= 0x1;\n            return DAT_08003354;\n        case 1:\n            *flag_ptr |= 0x2;\n            return DAT_08003358;\n        case 2:\n            *flag_ptr |= 0x4;\n            return DAT_0800335c;\n        case 3:\n            *flag_ptr |= 0x8;\n            return DAT_08003360;\n        case 4:\n            *flag_ptr |= 0x10;\n            return DAT_08003364;\n        case 5:\n            *flag_ptr |= 0x20;\n            return DAT_08003368;\n        case 6:\n            *flag_ptr |= 0x40;\n            return DAT_0800336c;\n        case 7:\n            *flag_ptr |= 0x80;\n            return DAT_08003370;\n        case 8:\n            *flag_ptr |= 0x100;\n            return DAT_08003374;\n        case 9:\n            *flag_ptr |= 0x200;\n            return DAT_08003378;\n        case 10:\n            *flag_ptr |= 0x400;\n            return DAT_0800337c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_param_and_call_08000690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08000682": "call_function"
            },
            "code": "void check_param_and_call_08000690(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        call_function(PTR_DAT_080006b0, 1, 0, 0, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "check_param_and_call_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "check_and_update_080054fc",
                "param_1": "input_value",
                "param_2": "output_array",
                "uVar1": "flag",
                "iVar2": "temp_value",
                "local_18": "local_max_value",
                "local_14": "local_array_pointer"
            },
            "code": "void check_and_update_080054fc(int input_value, int *output_array)\n{\n  ushort flag;\n  int temp_value;\n  int local_max_value;\n  int *local_array_pointer;\n  \n  if (-1 < (int)((uint)*(ushort *)(output_array + 3) << 0x1e))) {\n    local_max_value = input_value;\n    local_array_pointer = output_array;\n    flag = get_flag(input_value, output_array, &local_max_value, &local_array_pointer);\n    temp_value = get_temp_value(input_value, local_max_value);\n    if (temp_value != 0) {\n      *(undefined **)(input_value + 0x28) = PTR_LAB_08005320_1_08005578;\n      *output_array = temp_value;\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x80;\n      output_array[5] = local_max_value;\n      output_array[4] = temp_value;\n      if ((local_array_pointer != (int *)0x0) &&\n         (temp_value = get_temp_value(input_value, (int)*(short *)((int)output_array + 0xe)), temp_value != 0)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output_array + 3) = flag | *(ushort *)(output_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xfffc | 2;\n  }\n  *output_array = (int)output_array + 0x47;\n  output_array[4] = (int)output_array + 0x47;\n  output_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_08004978",
                "FUN_080054b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "check_and_update_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "read_byte_from_buffer_08001420",
                "param_1": "buffer",
                "pbVar1": "current_byte",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int read_byte_from_buffer_08001420(int *buffer){\n  short *buffer_length = (short *)((int)buffer + 0x2a);\n  if (*buffer_length != 0) {\n    byte *current_byte = (byte *)buffer[9];\n    buffer[9] = (int)(current_byte + 1);\n    *(uint *)(*buffer + 0x10) = (uint)*current_byte;\n    *buffer_length = *buffer_length - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "read_byte_from_buffer_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_call_functions_08000de4",
                "puVar1": "flags_ptr",
                "*puVar1": "*flags_ptr",
                "DAT_08000e14": "flags_ptr",
                "FUN_08000e3c": "call_function1",
                "FUN_08000d98": "call_function2",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int set_flags_and_call_functions_08000de4(void)\n{\n  uint *DAT_08000e14;\n  DAT_08000e14 = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *DAT_08000e14 |= 0x400;\n  *DAT_08000e14 |= 0x100;\n  call_function1(3);\n  call_function2(0xf);\n  do_nothing_08000d96();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000d98",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "param_list",
                "iVar1": "ptr",
                "flag1": "flag1",
                "flag2": "flag2"
            },
            "code": "void process_flags_080026ce(int *param_list)\n{\n  int ptr = *param_list;\n  uint flag1 = *(uint *)(ptr + 0x10);\n  uint flag2 = *(uint *)(ptr + 0xc);\n\n  if ((flag1 & 2) && (flag2 & 2)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(param_list + 6) = 1;\n    if ((*(uint *)(*param_list + 0x18) & 3) == 0) {\n      FUN_08003754();\n      do_nothing_080026ca(param_list);\n    }\n    else {\n      do_nothing_080026c8();\n    }\n    *(undefined *)(param_list + 6) = 0;\n  }\n\n  if ((flag1 & 4) && (flag2 & 4)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(param_list + 6) = 2;\n    if ((*(uint *)(*param_list + 0x18) & 0x300) == 0) {\n      FUN_08003754(param_list);\n      do_nothing_080026ca(param_list);\n    }\n    else {\n      do_nothing_080026c8(param_list);\n    }\n    *(undefined *)(param_list + 6) = 0;\n  }\n\n  if ((flag1 & 8) && (flag2 & 8)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(param_list + 6) = 4;\n    if ((*(uint *)(*param_list + 0x1c) & 3) == 0) {\n      FUN_08003754(param_list);\n      do_nothing_080026ca(param_list);\n    }\n    else {\n      do_nothing_080026c8(param_list);\n    }\n    *(undefined *)(param_list + 6) = 0;\n  }\n\n  if ((flag1 & 0x10) && (flag2 & 0x10)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffef;\n    *(undefined *)(param_list + 6) = 8;\n    if ((*(uint *)(*param_list + 0x1c) & 0x300) == 0) {\n      FUN_08003754(param_list);\n      do_nothing_080026ca(param_list);\n    }\n    else {\n      do_nothing_080026c8(param_list);\n    }\n    *(undefined *)(param_list + 6) = 0;\n  }\n\n  if ((flag1 & 1) && (flag2 & 1)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffe;\n    FUN_0800376e(param_list);\n  }\n\n  if ((flag1 & 0x80) && (flag2 & 0x80)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffff7f;\n    do_nothing_0800293e(param_list);\n  }\n\n  if ((flag1 & 0x40) && (flag2 & 0x40)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffbf;\n    do_nothing_080026cc(param_list);\n  }\n\n  if ((flag1 & 0x20) && (flag2 & 0x20)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffdf;\n    do_nothing_0800293c(param_list);\n  }\n}\n",
            "called": [
                "FUN_080026c8",
                "FUN_0800376e",
                "FUN_080026ca",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_0800293e",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_flags_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_string_end_08000218",
                "param_1": "input_string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_char"
            },
            "code": "char* find_string_end_08000218(char* input_string){\n  char current_char;\n  char* current_position = input_string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_string_end_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_result_from_input_0800339c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "int get_result_from_input_0800339c(int input1, int input2, int input3, int input4) {\n  int result = calculate_result(input1, PTR_DAT_080033c4, input3, input4, input4);\n  uint shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "get_result_from_input_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "write_bits_to_memory_08000e60",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance",
                "DAT_08000ebc": "ptr_ebc",
                "DAT_08000ec0": "ptr_ec0"
            },
            "code": "void write_bits_to_memory_08000e60(uint32_t address, uint32_t data, uint32_t mask) {\n  uint32_t shift_amount = (uint32_t)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint32_t shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount -= 3;\n  }\n  uint32_t shifted_data = (data & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & mask;\n  if ((int32_t)address < 0) {\n    *(char *)(DAT_08000ec0 + (address & 0xf)) = (char)(shifted_data << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shifted_data << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003eac",
                "FUN_08000d98",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "write_bits_to_memory_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "data_ptr",
                "param_2": "flag_1",
                "param_3": "flag_2",
                "param_4": "output_val",
                "uVar1": "output_data",
                "uVar2": "data_val"
            },
            "code": "int process_data_0800165a(int *data_ptr, int flag_1, int flag_2, int output_val) {\n    uint data_val = *(uint *)(*data_ptr + 0x18);\n    undefined2 output_data;\n    \n    if ((data_val & 0x80) == 0) {\n        output_data = *(undefined2 *)(data_ptr + 3);\n    }\n    else {\n        output_data = *(undefined2 *)(data_ptr + 6);\n    }\n    \n    process_output_data(data_ptr, (data_val & 4) == 0, output_data, data_val, output_val);\n    \n    return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "data_ptr",
                "param_2": "output_ptr",
                "bVar1": "num_elements",
                "bVar2": "element_size",
                "cVar3": "status",
                "uVar4": "processed_data",
                "uVar5": "i"
            },
            "code": "int process_data_08000b04(int data_ptr, int output_ptr)\n{\n  byte num_elements = *(byte *)(data_ptr + 0xc);\n  byte element_size = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = element_size;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (uint i = 0; i < element_size; i++) {\n    undefined2 processed_data = FUN_08004640(*(undefined *)(i * 2 + data_ptr + 0x10), *(undefined *)(data_ptr + (i + 4) * 2 + 9));\n    *(undefined2 *)(output_ptr + (num_elements + i) * 2) = processed_data;\n  }\n  char status = *(char *)(data_ptr + 0x49);\n  FUN_0800076c(data_ptr);\n  return (int)(char)(status + 2);\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "check_and_update_flags_0800262c",
                "*param_1": "*flag_ptr",
                "do_nothing_0800268c": "do_nothing",
                "DAT_08002688": "flag_data",
                "is_flag_1_set": "is_flag_1_set",
                "is_flag_2_set": "is_flag_2_set",
                "is_flag_3_set": "is_flag_3_set",
                "is_flag_4_set": "is_flag_4_set",
                "call_function_1": "call_function_1",
                "0xc": "offset_1",
                "0x100": "flag_1",
                "0x1000": "flag_2",
                "0x200": "flag_3",
                "0x2000": "flag_4",
                "0xfffffe7f": "mask_1",
                "0xfffffd7f": "mask_2",
                "0xff": "mask_3",
                "0x14": "offset_2",
                "0x1d": "offset_3"
            },
            "code": "void check_and_update_flags_0800262c(int *flag_ptr)\n{\n  bool is_flag_1_set = (*(uint *)(*flag_ptr + 0xc) & 0x100) != 0;\n  bool is_flag_2_set = (*(uint *)(*flag_ptr + 8) & 0x1000) != 0;\n  if (is_flag_1_set && is_flag_2_set) {\n    call_function_1();\n    *(uint *)(*flag_ptr + 0xc) = *(uint *)(*flag_ptr + 0xc) & 0xff | 0xfffffe7f;\n  }\n  bool is_flag_3_set = (*(uint *)(*flag_ptr + 0xc) & 0x200) != 0;\n  bool is_flag_4_set = (*(uint *)(*flag_ptr + 8) & 0x2000) != 0;\n  if (is_flag_3_set && is_flag_4_set) {\n    do_nothing_0800268c(flag_ptr);\n    *(uint *)(*flag_ptr + 0xc) = *(uint *)(*flag_ptr + 0xc) & 0xff | 0xfffffd7f;\n  }\n  *(undefined4 *)(flag_ptr + 0x14) = 0x20000;\n  *(undefined *)((int)flag_ptr + 0x1d) = 1;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_08004388",
                "param_1": "obj",
                "param_2": "flags",
                "param_3": "type",
                "bVar1": "type_masked",
                "iVar2": "num_flags",
                "UNRECOVERED_JUMPTABLE": "jump_table_index",
                "PTR_DAT_0800445c": "data_ptr",
                "uRam08004434": "func_ptr",
                "uRam08004440": "data_ptr2",
                "uRam0800443c": "data"
            },
            "code": "void set_flags_08004388(int obj, int flags, byte type) {\n  int num_flags = 0;\n  int jump_table_index = 0;\n  uint extraout_r1;\n  byte type_masked = type & 7;\n\n  if (type_masked == 4) {\n    num_flags = 7;\n  }\n  else if (type_masked == 6) {\n    num_flags = 8;\n  }\n  else if (type_masked == 2) {\n    num_flags = 6;\n  }\n\n  if ((type & 0x30) == 0x30) {\n    *(int *)(obj + 0x128) = 0x600;\n    num_flags++;\n  }\n  else if ((type & 0x20) == 0) {\n    *(int *)(obj + 0x128) = 0;\n  }\n  else {\n    *(int *)(obj + 0x128) = 0x400;\n    num_flags++;\n  }\n\n  if ((type & 8) == 0) {\n    *(int *)(obj + 0x124) = 0;\n  }\n  else {\n    *(int *)(obj + 0x124) = 0x2000;\n  }\n\n  if (num_flags == 8) {\n    *(int *)(obj + 0x120) = 0;\n  }\n  else if (num_flags == 9) {\n    *(int *)(obj + 0x120) = 0x1000;\n  }\n\n  if (num_flags != 0) {\n    set_func(obj + 0xd4);\n    set_func2(obj + 0xd4, func_ptr);\n    return;\n  }\n\n  jump_table_index = 0x8004432;\n  set_func3(PTR_DAT_0800445c, 299, PTR_DAT_0800445c2);\n\n  if (extraout_r1 < 0x60) {\n    data = *(unsigned short *)(PTR_DAT_0800445c + extraout_r1 * 2);\n  }\n  else {\n    data = 0xffff;\n  }\n\n  (*jump_table_index)();\n}\n",
            "called": [
                "FUN_08003978",
                "FUN_08004808",
                "FUN_08003e54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "data_ptr",
                "iVar2": "data_len",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "uVar",
                "uVar6": "flags",
                "iVar7": "offset1",
                "pcVar8": "func_ptr",
                "iVar9": "offset2",
                "uVar10": "uVar3",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "bVar4"
            },
            "code": "void process_data_080051ac(void)\n{\n  uint *data_ptr;\n  int data_len;\n  int *ptr1;\n  int *ptr2;\n  uint uVar1;\n  ushort flags;\n  int offset1;\n  code *func_ptr;\n  int offset2;\n  uint uVar3;\n  code *jump_table;\n  bool bVar4;\n  undefined8 uVar5;\n  init(6);\n  jump_table = (code *)0x80051bb;\n  uVar5 = get_data(1);\n  ptr1 = (int *)((ulonglong)uVar5 >> 0x20);\n  data_ptr = (uint *)uVar5;\n  flags = *(ushort *)(ptr1 + 3);\n  uVar1 = (uint)flags;\n  if ((int)(uVar1 << 0x1c) < 0) {\n    data_len = ptr1[4];\n    if (data_len != 0) {\n      offset1 = uVar1 << 0x1e;\n      bVar4 = offset1 == 0;\n      offset2 = *ptr1;\n      if (bVar4) {\n        offset1 = ptr1[5];\n      }\n      *ptr1 = data_len;\n      if (!bVar4) {\n        offset1 = 0;\n      }\n      ptr1[2] = offset1;\n      for (offset2 = offset2 - data_len; 0 < offset2; offset2 = offset2 - offset1) {\n        offset1 = (*(code *)ptr1[10])(data_ptr,ptr1[8],data_len,offset2);\n        if (offset1 < 1) {\n          flags = *(ushort *)(ptr1 + 3);\n          goto LAB_080052b2;\n        }\n        data_len = data_len + offset1;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (func_ptr = (code *)ptr1[0xb], func_ptr != (code *)0x0)) {\n    uVar3 = *data_ptr;\n    *data_ptr = 0;\n    if ((flags & 0x1000) == 0) {\n      data_len = (*func_ptr)(data_ptr,ptr1[8],uVar1 & 0x1000,1);\n      if ((data_len == -1) && (uVar1 = *data_ptr, uVar1 != 0)) {\n        if ((uVar1 != 0x1d) && (uVar1 != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*jump_table)();\n          return;\n        }\n        *data_ptr = uVar3;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      data_len = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (data_len = data_len - ptr1[1], ptr1[0xd] != 0)) {\n      data_len = data_len - ptr1[0x10];\n    }\n    data_len = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],data_len,0);\n    flags = *(ushort *)(ptr1 + 3);\n    if ((data_len == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_080052c8 >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(ptr1 + 3) = flags | 0x40;\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((data_len != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = data_len;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = uVar3;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        cleanup(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*jump_table)(0);\n  return;\n}",
            "called": [
                "FUN_080040f8",
                "FUN_080055d0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_data_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "decrypt_data_080052cc",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "offset",
                "piVar3": "param_ptr",
                "uVar4": "chunk_size",
                "uVar5": "flags",
                "iVar6": "data_len",
                "unaff_r4": "unused_1",
                "unaff_r5": "unused_2",
                "pcVar7": "func_ptr",
                "iVar8": "i",
                "uVar9": "tmp",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "is_negative"
            },
            "code": "uint32_t decrypt_data_080052cc(uint32_t *data, int *params) {\n  uint32_t result = 0;\n  int *param_ptr;\n  uint32_t data_len;\n  uint32_t chunk_size;\n  int offset;\n  uint16_t flags;\n  int i;\n  uint32_t tmp;\n  code *func_ptr;\n  uint32_t *jump_table;\n  bool is_negative;\n\n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      initialize();\n    }\n    if (params == (int *)PTR_DAT_08005314) {\n      param_ptr = (int *)data[1];\n    }\n    else if (params == (int *)PTR_DAT_08005318) {\n      param_ptr = (int *)data[2];\n    }\n    else if (params == (int *)PTR_DAT_0800531c) {\n      param_ptr = (int *)data[3];\n    }\n    if (*(uint16_t *)(param_ptr + 6) != 0) {\n      flags = *(uint16_t *)(param_ptr + 6);\n      chunk_size = (uint32_t)flags;\n      if ((int)(chunk_size << 0x1c) < 0) {\n        offset = params[4];\n        if (offset != 0) {\n          tmp = chunk_size << 0x1e;\n          is_negative = tmp == 0;\n          data_len = *param_ptr;\n          if (is_negative) {\n            tmp = param_ptr[5];\n          }\n          *param_ptr = offset;\n          if (!is_negative) {\n            tmp = 0;\n          }\n          param_ptr[2] = tmp;\n          for (i = data_len - offset; i > 0; i -= tmp) {\n            func_ptr = (code *)param_ptr[10];\n            tmp = (*func_ptr)(data, param_ptr[8], offset, i, 0, 0);\n            if (tmp < 1) {\n              flags = *(uint16_t *)(param_ptr + 6);\n              goto LAB_080052b2;\n            }\n            offset += tmp;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[16] > 0)) &&\n              ((func_ptr = (code *)params[11]) != NULL)) {\n        data_len = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0) {\n          tmp = (*func_ptr)(data, param_ptr[8], flags & 0x1000, 1);\n          if ((tmp == -1) && (*data != 0)) {\n            if ((*data != 0x1d) && (*data != 0x16)) {\n              flags |= 0x40;\n              jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n              result = (*jump_table)(0xffffffff);\n              return result;\n            }\n            *data = data_len;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          tmp = params[21];\n        }\n        if (((int)((uint)flags << 0x1d) < 0) &&\n           (tmp = tmp - params[1], params[13] != 0)) {\n          tmp = tmp - params[16];\n        }\n        tmp = (*func_ptr)(data, param_ptr[8], tmp, 0);\n        flags = *(uint16_t *)(param_ptr + 6);\n        if ((tmp == -1) && ((data_len > 0x1d) || (-1 < (int)((DAT_080052c8 >> (*data & 0xff)) << 0x1f))))) {\n          flags |= 0x40;\n          jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        params[1] = 0;\n        *params = params[4];\n        if (((int)((uint)flags << 0x13) < 0) && ((tmp != -1) || (*data == 0))) {\n          params[21] = tmp;\n        }\n        param_ptr = (int *)params[13];\n        *data = data_len;\n        if (param_ptr != NULL) {\n          if (param_ptr != params + 17) {\n            cleanup(data);\n          }\n          params[13] = 0;\n          jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n          result = (*jump_table)(0);\n          return result;\n        }\n      }\nLAB_080051d6:\n      jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "decrypt_data_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "check_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int check_input_08002eb2(int *input_array, int array_size, int element_size)\n{\n    if (input_array[9] != ' ')\n    {\n        return 2;\n    }\n    if (array_size == 0)\n    {\n        return 1;\n    }\n    if (element_size == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != '\\x01')\n    {\n        input_array[8] = array_size;\n        input_array[9] = (short)element_size;\n        input_array[10] = (short)element_size;\n        input_array[15] = 0;\n        input_array[9] = 0x21;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "check_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "copy_and_clear_memory_08000d3c",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_memory_08000d3c(void)\n{\n  int index;\n  undefined4 *dest_ptr;\n  code *jump_table;\n  for (index = 0; (PTR_DAT_08000d7c + index) < PTR_DAT_08000d80; index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (dest_ptr = (undefined4 *)PTR_DAT_08000d84; dest_ptr < PTR_DAT_08000d88; dest_ptr++) {\n    *dest_ptr = 0;\n  }\n  call_function_080035bc();\n  call_function_08004884();\n  jump_table = (code *)0x8000d72;\n  call_function_08004658();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004884",
                "FUN_08004658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = FUN_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = FUN_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      FUN_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = FUN_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        FUN_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = FUN_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        FUN_08000fb4(uVar10,&local_2c);\n        uVar10 = FUN_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        FUN_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_08002d72",
                "FUN_080031fc",
                "FUN_08003582",
                "FUN_0800354a",
                "FUN_080034f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "array_index",
                "PTR_": "",
                "DAT_": "",
                "*(uint*)(": "*",
                ")": "",
                "bit_mask": "bit_mask",
                "*array_ptr": "*array_ptr"
            },
            "code": "void update_bit_0800316c(uint bit_position, int* bit_array){\n  uint array_index = (bit_position << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(bit_array + array_index);\n  uint bit_mask = 1 << (bit_position & 0xf);\n  *array_ptr = *array_ptr & ~bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0"
            },
            "code": "unsigned int get_error_code_080040d0(void)\n{\n  return 4294967295;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permission_080040d6",
                "param_1": "address",
                "param_2": "permission",
                "*(undefined4 *)(param_2 + 4)": "*(int*)(address + 4)"
            },
            "code": "void set_memory_permission_080040d6(void* address, int permission) {\n    *(int*)(address + 4) = permission;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permission_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "input_buffer",
                "iVar1": "buffer_index",
                "pbVar2": "current_position",
                "pbVar3": "buffer_end",
                "uVar4": "return_value",
                "PTR_DAT_080050c4": "pointer_1",
                "PTR_DAT_080050c8": "pointer_2",
                "PTR_DAT_080050cc": "pointer_3",
                "FUN_080053a0": "handle_error",
                "FUN_080050d0": "calculate_index",
                "FUN_080052cc": "handle_error"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_char, byte **input_buffer){\n  int buffer_index;\n  byte *current_position;\n  byte *buffer_end;\n  uint return_value;\n  \n  buffer_end = input_buffer[2] + -1;\n  input_buffer[2] = buffer_end;\n  if ((-1 < (int)buffer_end) || (((int)input_buffer[6] <= (int)buffer_end && (buffer_end = (byte *)(uint)input_char, buffer_end != (byte *)0xa)))){\n    current_position = *input_buffer;\n    *input_buffer = current_position + 1;\n    *current_position = input_char;\n    return (uint)input_char;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    handle_error();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080050c4) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050c8) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050cc) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  current_position = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_index = (int)current_position << 0x1c;\n  if (((buffer_index < 0) && (current_position = input_buffer[4], current_position != (byte *)0x0)) || (buffer_index = calculate_index(input_length, input_buffer, buffer_index, current_position, current_position), buffer_index == 0)) {\n    buffer_index = (int)*input_buffer - (int)input_buffer[4];\n    return_value = (uint)input_char;\n    if ((buffer_index < (int)input_buffer[5]) || (buffer_index = handle_error(input_length, input_buffer), buffer_index == 0)) {\n      input_buffer[2] = input_buffer[2] + -1;\n      current_position = *input_buffer;\n      *input_buffer = current_position + 1;\n      *current_position = input_char;\n      if ((byte *)(buffer_index + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      buffer_index = handle_error(input_length, input_buffer);\n      if (buffer_index == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080052cc",
                "FUN_080053a0",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "first_number",
                "param_2": "second_number",
                "param_3": "third_number",
                "param_4": "fourth_number",
                "uVar1": "result"
            },
            "code": "undefined8 calculate_result_080002d0(int first_number, int second_number, int third_number, int fourth_number) {\n  undefined8 result;\n  \n  if ((fourth_number == 0) && (third_number == 0)) {\n    if (second_number != 0 || first_number != 0) {\n      second_number = -1;\n      first_number = -1;\n    }\n    return CONCAT44(second_number, first_number);\n  }\n  result = FUNC_08000300();\n  return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "calculate_result_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_08003f00(int value_to_find) {\n  uint index;\n  if (value_to_find == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while (index < 10) {\n      if (value_to_find == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_and_copy_08001440",
                "param_1": "array",
                "puVar1": "current_item",
                "PTR_00000009": "current_count",
                "DAT_08000410": "4",
                "DAT_0800042a": "remaining_items"
            },
            "code": "int increment_and_copy_08001440(int *array)\n{\n  int *PTR_00000009 = array + 9;\n  short *DAT_08000DAT_080004102a = (short *)(array + DAT_080004102);\n\n  if (*DAT_08000DAT_080004102a != 0)\n  {\n    unsigned char *current_item = (unsigned char *)*PTR_00000009;\n    *PTR_00000009 = (int)(current_item + 1);\n    *current_item = (char)*(array + DAT_08000410);\n    *DAT_08000DAT_080004102a = *DAT_08000DAT_080004102a - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_copy_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "byte_sequence_length",
                "puVar7": "current_word",
                "bVar1": "byte1",
                "pbVar6": "next_byte_pointer",
                "pbVar8": "current_byte_pointer",
                "uVar9": "bytes_remaining_in_current_word",
                "uVar10": "remaining_length",
                "uVar11": "word1_xor_mask",
                "uVar12": "word2_xor_mask",
                "bVar13": "byte1_not_found",
                "bVar14": "byte2_not_found",
                "bVar15": "byte3_not_found",
                "bVar16": "byte4_not_found"
            },
            "code": "byte* find_byte_sequence_08000230(uint* data, uint data_length, uint byte_sequence, uint byte_sequence_length)\n{\n    byte* result = NULL;\n    uint byte_sequence_mask = byte_sequence | (byte_sequence << 8) | (byte_sequence << 16) | (byte_sequence << 24);\n    uint* current_word = data;\n    uint remaining_length = data_length;\n    while (remaining_length >= 8)\n    {\n        uint word1 = *current_word++;\n        uint word2 = *current_word++;\n        if ((word1 ^ byte_sequence_mask) | (word2 ^ byte_sequence_mask))\n        {\n            uint byte1 = word1 & 0xFF;\n            uint byte2 = word1 >> 8 & 0xFF;\n            uint byte3 = word1 >> 16 & 0xFF;\n            uint byte4 = word1 >> 24 & 0xFF;\n            uint byte5 = word2 & 0xFF;\n            uint byte6 = word2 >> 8 & 0xFF;\n            uint byte7 = word2 >> 16 & 0xFF;\n            uint byte8 = word2 >> 24 & 0xFF;\n            if (byte1 == byte_sequence || byte2 == byte_sequence || byte3 == byte_sequence || byte4 == byte_sequence || byte5 == byte_sequence || byte6 == byte_sequence || byte7 == byte_sequence || byte8 == byte_sequence)\n            {\n                result = (byte*)(current_word - 2);\n                break;\n            }\n            remaining_length -= 8;\n            continue;\n        }\n        result = (byte*)(current_word - 2);\n        break;\n    }\n    if (remaining_length < 8 && result == NULL)\n    {\n        for (uint i = 0; i < remaining_length; i++)\n        {\n            if (*(byte*)current_word == byte_sequence)\n            {\n                result = (byte*)current_word;\n                break;\n            }\n            current_word++;\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "process_input_08001684",
                "param_1": "input_ptr",
                "param_1[0xb]": "input_b",
                "DAT_08001714": "PTR_DAT_08001714",
                "*(char *)((int)param_1 + 0x3d)": "input_3d",
                "*(undefined *)((int)param_1 + 0x3e)": "input_3e",
                "FUN_080038d0": "do_something_080038d0",
                "do_nothing_080015ba": "do_nothing_080015ba"
            },
            "code": "int process_input_08001684(uint **input_ptr)\\n\\\n{\\n\\\n  uint *input_b = input_ptr[0xB];\\n\\\n  char *input_3d = (char *)((int)input_ptr + 0x3d);\\n\\\n  if (((input_b == (uint *)0x4) || (input_b == (uint *)0x8)) && (*input_3d == \"(\")) {\\n\\\n    input_ptr[0xB] = DAT_08001714;\\n\\\n    (*input_ptr)[1] &= 0xfffff8ff;\\n\\\n    (*input_ptr)[5] = 0xfffffbff;\\n\\\n    **input_ptr &= 0xfffffbff;\\n\\\n    input_ptr[0xC] = (uint *)0x0;\\n\\\n    *input_3d = 0x20;\\n\\\n    *(input_3d + 1) = 0;\\n\\\n    do_something_080038d0();\\n\\\n  }\\n\\\n  else if (*input_3d == \"!\") {\\n\\\n    input_ptr[0xB] = DAT_08001714;\\n\\\n    input_ptr[0xC] = (uint *)0x21;\\n\\\n    *input_3d = 0x20;\\n\\\n    *(input_3d + 1) = 0;\\n\\\n    (*input_ptr)[1] &= 0xfffff8ff;\\n\\\n    (*input_ptr)[5] = 0xfffffbff;\\n\\\n    **input_ptr &= 0xfffffbff;\\n\\\n    do_nothing_080015ba();\\n\\\n  }\\n\\\n  else {\\n\\\n    (*input_ptr)[5] = 0xfffffbff;\\n\\\n  }\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "process_input_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_and_modify_value_08000f8c",
                "param_1": "param_array",
                "param_1[0x15]": "param_array[0x15]",
                "**param_1": "*param",
                "*(char *)((int)param_1 + 0x35)": "*(char *)((int)param_array + 0x35)"
            },
            "code": "int check_and_modify_value_08000f8c(uint **param_array){\n    uint *param = *param_array;\n    if (*(char *)((int)param_array + 0x35) != '\\x02') {\n        param_array[0x15] = (uint *)0x80;\n        return 1;\n    }\n    *(undefined *)((int)param_array + 0x35) = 5;\n    *param = *param & 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_modify_value_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "checkFirstCall_080001ac",
                "param_1": "returnValue",
                "*PTR_DAT_080001c4": "isFirstCall",
                "DAT_080001c8": "isValidPointer",
                "PTR_FUN_080001cc": "functionPointer"
            },
            "code": "checkFirstCall_080001acbcheckFirstCall_080001acocheckFirstCall_080001acocheckFirstCall_080001aclcheckFirstCall_080001ac checkFirstCall_080001ac*checkFirstCall_080001acPcheckFirstCall_080001acTcheckFirstCall_080001acRcheckFirstCall_080001ac_checkFirstCall_080001acDcheckFirstCall_080001acAcheckFirstCall_080001acTcheckFirstCall_080001ac_checkFirstCall_080001ac0checkFirstCall_080001ac8checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac1checkFirstCall_080001acccheckFirstCall_080001ac4checkFirstCall_080001ac checkFirstCall_080001ac=checkFirstCall_080001ac checkFirstCall_080001ac*checkFirstCall_080001acPcheckFirstCall_080001acTcheckFirstCall_080001acRcheckFirstCall_080001ac_checkFirstCall_080001acDcheckFirstCall_080001acAcheckFirstCall_080001acTcheckFirstCall_080001ac_checkFirstCall_080001ac0checkFirstCall_080001ac8checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac1checkFirstCall_080001acccheckFirstCall_080001ac4checkFirstCall_080001ac checkFirstCall_080001ac=checkFirstCall_080001ac=checkFirstCall_080001ac checkFirstCall_080001ac0checkFirstCall_080001ac;checkFirstCall_080001ac\ncheckFirstCall_080001acicheckFirstCall_080001acfcheckFirstCall_080001ac checkFirstCall_080001ac(checkFirstCall_080001ac*checkFirstCall_080001acPcheckFirstCall_080001acTcheckFirstCall_080001acRcheckFirstCall_080001ac_checkFirstCall_080001acDcheckFirstCall_080001acAcheckFirstCall_080001acTcheckFirstCall_080001ac_checkFirstCall_080001ac0checkFirstCall_080001ac8checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac1checkFirstCall_080001acccheckFirstCall_080001ac4checkFirstCall_080001ac)checkFirstCall_080001ac checkFirstCall_080001ac{checkFirstCall_080001ac\ncheckFirstCall_080001ac checkFirstCall_080001ac checkFirstCall_080001acicheckFirstCall_080001acfcheckFirstCall_080001ac checkFirstCall_080001ac(checkFirstCall_080001acDcheckFirstCall_080001acAcheckFirstCall_080001acTcheckFirstCall_080001ac_checkFirstCall_080001ac0checkFirstCall_080001ac8checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac1checkFirstCall_080001acccheckFirstCall_080001ac8checkFirstCall_080001ac checkFirstCall_080001ac!checkFirstCall_080001ac=checkFirstCall_080001ac checkFirstCall_080001ac0checkFirstCall_080001ac)checkFirstCall_080001ac checkFirstCall_080001ac{checkFirstCall_080001ac\ncheckFirstCall_080001ac checkFirstCall_080001ac checkFirstCall_080001ac checkFirstCall_080001ac checkFirstCall_080001acpcheckFirstCall_080001acacheckFirstCall_080001acrcheckFirstCall_080001acacheckFirstCall_080001acmcheckFirstCall_080001ac_checkFirstCall_080001ac1checkFirstCall_080001ac checkFirstCall_080001ac=checkFirstCall_080001ac checkFirstCall_080001acPcheckFirstCall_080001acTcheckFirstCall_080001acRcheckFirstCall_080001ac_checkFirstCall_080001acFcheckFirstCall_080001acUcheckFirstCall_080001acNcheckFirstCall_080001ac_checkFirstCall_080001ac0checkFirstCall_080001ac8checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac1checkFirstCall_080001acccheckFirstCall_080001acccheckFirstCall_080001ac;checkFirstCall_080001ac\ncheckFirstCall_080001ac checkFirstCall_080001ac checkFirstCall_080001ac}checkFirstCall_080001ac\ncheckFirstCall_080001ac checkFirstCall_080001ac checkFirstCall_080001ac*checkFirstCall_080001acPcheckFirstCall_080001acTcheckFirstCall_080001acRcheckFirstCall_080001ac_checkFirstCall_080001acDcheckFirstCall_080001acAcheckFirstCall_080001acTcheckFirstCall_080001ac_checkFirstCall_080001ac0checkFirstCall_080001ac8checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac0checkFirstCall_080001ac1checkFirstCall_080001acccheckFirstCall_080001ac4checkFirstCall_080001ac checkFirstCall_080001ac=checkFirstCall_080001ac checkFirstCall_080001ac1checkFirstCall_080001ac;checkFirstCall_080001ac\ncheckFirstCall_080001ac}checkFirstCall_080001ac\ncheckFirstCall_080001acrcheckFirstCall_080001acecheckFirstCall_080001actcheckFirstCall_080001acucheckFirstCall_080001acrcheckFirstCall_080001acncheckFirstCall_080001ac checkFirstCall_080001acpcheckFirstCall_080001acacheckFirstCall_080001acrcheckFirstCall_080001acacheckFirstCall_080001acmcheckFirstCall_080001ac_checkFirstCall_080001ac1checkFirstCall_080001ac;checkFirstCall_080001ac",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "checkFirstCall_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0(void) {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080048cc(char* array, char value, int size) {\n  char* end_of_array = array + size;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005400",
                "FUN_0800532c",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "returnZero_080040e4",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int returnZero_080040e4(void)\n{\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "returnZero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_value_by_integer_key_08003506",
                "param_1": "key",
                "param_2": "data_array"
            },
            "code": "int find_short_value_by_integer_key_08003506(int key, short *data_array) {\n  while( true ) {\n    if (*(int *)(data_array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(data_array + 2) == key) break;\n    data_array = data_array + 6;\n  }\n  return (int)*data_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_value_by_integer_key_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "PTR_DATA",
                "undefined4": "int",
                "*": "*",
                "return": "return",
                "()": "()"
            },
            "code": "int get_value_from_pointer_080025e0() {\n    int *pointer_to_value = (int *)PTR_DAT_080025e8;\n    return *pointer_to_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "return_zero_080040e8"
            },
            "code": "int return_zero_080040e8() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "return_zero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_bit_in_ushort_array_08000a00",
                "param_1": "array_start",
                "param_2": "index",
                "param_3": "bit_position",
                "param_4": "bit_value",
                "uVar1": "hash",
                "uVar2": "index_in_array",
                "*(ushort *)(param_2 + uVar2 * 2)": "current_value",
                "*(undefined *)(param_1 + 0x49)": "array_updated",
                "FUN_0800076c": "update_array"
            },
            "code": "int set_bit_in_ushort_array_08000a00(int array_start, int index, int bit_position, int bit_value) {\n    uint hash = hash_function(*(undefined *)(array_start + 0xb), *(undefined *)(array_start + 0xc), bit_position, bit_value, bit_value);\n    uint index_in_array = (hash << 0x14) >> 0x18;\n    ushort *ushort_array = (ushort *)array_start;\n    ushort current_value = *(ushort_array + index_in_array);\n    if (*(char *)(array_start + 0xd) == -1) {\n        *(ushort_array + index_in_array) = (ushort)(1 << (hash & 0xf)) | current_value;\n    }\n    else {\n        *(ushort_array + index_in_array) = current_value & ~(ushort)(1 << (hash & 0xf));\n    }\n    *(undefined *)(array_start + 0x49) = 6;\n    update_array(array_start);\n    return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bit_in_ushort_array_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "param",
                "iVar1": "index",
                "FUN_08005760": "call_function_one",
                "FUN_08004678": "get_index"
            },
            "code": "void execute_function_080047c0(int param)\n{\n    int index;\n    if (*(int *)(param + 8) != 0) {\n        (**(code **)(param + 0xc))();\n        return;\n    }\n    call_function_one();\n    index = get_index();\n    if (*(int *)(PTR_DAT_080047ec + index * 0x14 + 0xc) != 0) {\n        execute_function_080047c0();\n    }\n    return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_for_structure_08005374",
                "param_1": "starting_address",
                "param_2": "num_of_elements",
                "puVar1": "struct_ptr",
                "iVar2": "offset",
                "FUN_08004978": "allocate_memory",
                "FUN_080048cc": "initialize_struct_elements"
            },
            "code": "undefined4* allocate_memory_for_structure_08005374(undefined4 starting_address, int num_of_elements)\n{\n  undefined4* struct_ptr;\n  int offset = (num_of_elements - 1) * 0x68;\n  struct_ptr = (undefined4*) allocate_memory(starting_address, offset + 0x74);\n  if(struct_ptr != (undefined4*) 0x0)\n  {\n    *struct_ptr = 0;\n    *(struct_ptr + 1) = num_of_elements;\n    *(struct_ptr + 2) = struct_ptr + 3;\n    initialize_struct_elements(struct_ptr + 3, 0, offset + 0x68);\n  }\n  return struct_ptr;\n}\n",
            "called": [
                "FUN_08004978",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_structure_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = FUN_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "decrement_parameter_08003750",
                "param_1": "parameter",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int decrement_parameter_08003750(int parameter){\n    int decremented_parameter = parameter - 4;\n    return decremented_parameter;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "decrement_parameter_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "validate_input_080014ec",
                "param_1": "ptr_input",
                "param_2": "ptr_size",
                "param_3": "num_elements",
                "param_4": "ptr_data",
                "uVar1": "result",
                "puVar2": "ptr_flags"
            },
            "code": "int validate_input_080014ec(uint **ptr_input, uint *ptr_size, int num_elements, uint *ptr_data) {\n  int result;\n  uint *ptr_flags;\n  if (*(char *)((int)ptr_input + 0x3d) == '(') {\n    if (ptr_size == NULL) {\n      result = 1;\n    }\n    else if (num_elements == 0) {\n      result = 1;\n    }\n    else if (*(char *)(ptr_input + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(ptr_input + 0xf) = 1;\n      ptr_flags = *ptr_input;\n      if ((*ptr_flags & 1) == 0) {\n        *ptr_flags |= 1;\n      }\n      **ptr_input &= 0xfffff7ff;\n      *(undefined *)((int)ptr_input + 0x3d) = 0x2a;\n      *(undefined *)((int)ptr_input + 0x3e) = 0x20;\n      result = 0;\n      ptr_input[0x10] = NULL;\n      ptr_input[9] = ptr_size;\n      *(short *)((int)ptr_input + 0x2a) = (short)num_elements;\n      ptr_input[0xb] = ptr_data;\n      *(undefined2 *)(ptr_input + 10) = *(undefined2 *)((int)ptr_input + 0x2a);\n      *(undefined *)(ptr_input + 0xf) = 0;\n      (*ptr_input)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_into_linked_list_080048dc",
                "param_1": "head",
                "param_2": "value",
                "param_3": "size",
                "param_4": "error_code",
                "puVar1": "ptr",
                "piVar2": "next_node_size",
                "extraout_r1": "new_head",
                "ppiVar3": "prev_ptr",
                "ppiVar4": "next_ptr",
                "ppiVar5": "current_ptr",
                "ppiVar6": "prev_node_ptr",
                "ppiVar7": "current_node_ptr",
                "bVar8": "found"
            },
            "code": "void insert_into_linked_list_080048dc(int *head, int value, int size, int *error_code){\n    int *current = head;\n    int *prev = NULL;\n    int *next = NULL;\n    bool found = false;\n\n    if (size == 0) {\n        return;\n    }\n\n    while (current != NULL && !found) {\n        if (*current < 0) {\n            current += *current;\n        }\n        else {\n            next = *(int **)current;\n            if (next == NULL || next > &value) {\n                found = true;\n            }\n            else {\n                prev = current;\n                current = next;\n            }\n        }\n    }\n\n    int **new_node = (int **)(&value - 1);\n    new_node[1] = next;\n\n    if (prev == NULL) {\n        *head = (int *)new_node;\n    }\n    else {\n        prev[1] = (int *)new_node;\n    }\n\n    if (next == NULL) {\n        *error_code = 0xC;\n    }\n    else {\n        *error_code = 0;\n    }\n}\n",
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080051ac",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "executeCallbackIfEnabled_08003754",
                "param_1": "param",
                "iVar1": "callbackPtr",
                "FUN_08003750": "getCallbackPointer"
            },
            "code": "void executeCallbackIfEnabled_08003754(int param)\n{\n  int callbackPtr = getCallbackPointer();\n  \n  if ((*(code **)(callbackPtr + 0x48) != (code *)0x0) && (*(char *)(param + 0x18) == '\\x01')) {\n    (**(code **)(callbackPtr + 0x48))(callbackPtr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "executeCallbackIfEnabled_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bits_and_chars_08001578",
                "param_1": "param_array",
                "puVar1": "param_ptr",
                "char_ptr": "char_ptr"
            },
            "code": "int set_bits_and_chars_08001578(uint **param_array) {\n  uint *param_ptr;\n  char *char_ptr;\n\n  char_ptr = (char *)((int)param_array + 0x3d);\n  if (*char_ptr != ' ') {\n    return 2;\n  }\n  *char_ptr = '(';\n\n  param_ptr = *param_array;\n  if ((*param_ptr & 1) == 0) {\n    *param_ptr |= 1;\n  }\n  **param_array |= 0x400;\n  (*param_array)[1] |= 0x300;\n\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "set_bits_and_chars_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "convertParamToLongLong_08004844",
                "param_1": "isDatZero",
                "param_2": "paramValue",
                "DAT_0800485c": "isDatZero"
            },
            "code": "longlong convertParamToLongLong_08004844(undefined4 DAT_0800485c,uint paramValue)\n{\n  if (DAT_0800485c != 0) {\n    return CONCAT44(paramValue,2);\n  }\n  return (ulonglong)paramValue << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "convertParamToLongLong_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_by_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031f8": "data_1",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10"
            },
            "code": "undefined4 get_data_by_index_0800318c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_by_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_if_valid_080047d0",
                "iVar1": "index",
                "FUN_08004678": "get_index",
                "PTR_DAT_080047ec": "PTR_DATA",
                "execute_invalid_action": "FUN_080047c0"
            },
            "code": "void check_if_valid_080047d0() {\n  int index = get_index();\n  if (*(int *)(PTR_DAT_080047ec + index * 0x14 + 0xc) != 0) {\n    execute_invalid_action();\n  }\n  return;\n}",
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_if_valid_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_forever_080040f8"
            },
            "code": "void wait_forever_080040f8(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "imported": false,
            "current_name": "wait_forever_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "set_param_value_if_not_error_0800500c",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "void set_param_value_if_not_error_0800500c(int* output_value, undefined4 input_value)\n{\n    undefined* ptr_data = PTR_DAT_08005028;\n    *(undefined4*)ptr_data = 0;\n    int result = FUN_08004094(input_value);\n    if (result == -1 && *(int*)ptr_data != 0)\n    {\n        *output_value = *(int*)ptr_data;\n    }\n    return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "set_param_value_if_not_error_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_value_080023b4",
                "in_r3": "param_1",
                "uVar1": "mask",
                "uVar2": "value",
                "value": "computed_value",
                "bitmask": "bitmask",
                "result": "result"
            },
            "code": "uint calculate_value_080023b4(void)\n{\n  uint bitmask = *(uint *)(DAT_0800247c + 8) & 0xc;\n  uint result;\n  if (bitmask == 4) {\n    result = DAT_08002484;\n  }\n  else if (bitmask != 8) {\n    result = DAT_08002480;\n  }\n  else {\n    uint uVar1 = *(uint *)(DAT_0800247c + 4) & 0x3f;\n    uint uVar2 = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    uint value = (((uint)(uVar2 * 0x20 < uVar2) * -0x3f - (uint)(uVar2 * 0x7c0 < uVar2 * 0x1f)) * 8 + (uint)CARRY4(uVar2 * 0x3d08,uVar2)) * 0x400;\n    if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n      value |= uVar2 * 0x3d09 >> 0x16;\n      result = FUN_080002d0(uVar2 * 16000000, value, uVar1, 0, in_r3);\n    }\n    else {\n      result = FUN_080002d0(uVar2 * 8000000, value * 0x2, uVar1, 0, in_r3);\n    }\n    result /= ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n  }\n  return result;\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_value_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_param_080011a4",
                "param_1": "new_param",
                "DAT_080011bc": "data_start_address",
                "data_ptr": "data_pointer",
                "execute_function": "FUN_080047d0"
            },
            "code": "void update_param_080011a4(uint new_param) {\n  uint* data_ptr = (uint*)(DAT_080011bc + 0x14);\n  if ((*data_ptr & new_param) != 0) {\n    *data_ptr = new_param;\n    execute_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "update_param_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "process_input_08001e68",
                "param_1": "input_data",
                "puVar2": "data",
                "uVar3": "flags",
                "uVar4": "control",
                "DAT_08001f38": "CONTROL_FLAG_1",
                "0x100": "CONTROL_FLAG_2",
                "0x10200": "CONTROL_FLAG_3",
                "0x10400": "CONTROL_FLAG_4",
                "0x10800": "CONTROL_FLAG_5",
                "cVar1": "c1",
                "FUN_08001684": "process_data",
                "0xc": "constant_value",
                "0x21": "constant_value",
                "**param_1": "dereferenced_input_data",
                "0x200": "constant_value",
                "FUN_08001ab0": "process_output"
            },
            "code": "void process_input_08001e68(uint **input_data) {\n  uint *data = *input_data;\n  uint flags = data[5];\n  uint control = data[1];\n  if (((flags & DAT_08001f38) != 0) && ((control & CONTROL_FLAG_2) != 0)) {\n    input_data[0x10] = (uint *)((uint)input_data[0x10] | 1);\n    data[5] = 0xfffffeff;\n  }\n  if (((flags & CONTROL_FLAG_3) != 0) && ((control & CONTROL_FLAG_2) != 0)) {\n    input_data[0x10] = (uint *)((uint)input_data[0x10] | 2);\n    (*input_data)[5] = 0xfffffdff;\n  }\n  if (((flags & CONTROL_FLAG_4) != 0) && ((control & CONTROL_FLAG_2) != 0)) {\n    char c1 = *(char *)((int)input_data + 0x3d);\n    if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((c1 == '!' || (c1 == ')')) || ((c1 == '(' && (input_data[0xc] == (uint *)0x21)))))) {\n      process_data(input_data);\n    }\n    else {\n      input_data[0x10] = (uint *)((uint)input_data[0x10] | 4);\n      if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n        **input_data = **input_data | 0x200;\n      }\n      (*input_data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags & CONTROL_FLAG_5) != 0) && ((control & CONTROL_FLAG_2) != 0)) {\n    input_data[0x10] = (uint *)((uint)input_data[0x10] | 8);\n    (*input_data)[5] = 0xfffff7ff;\n  }\n  if (input_data[0x10] != (uint *)0x0) {\n    process_output(input_data);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data_ptr",
                "puVar1": "puVar",
                "PTR_0000000c": "data_ptr[0xc]",
                "PTR_0000000b": "data_ptr[0xb]",
                "DAT_08001902": "do_nothing_08001902",
                "DAT_080015b8": "do_nothing_080015b8"
            },
            "code": "int process_data_080019a0(uint **data_ptr) {\n  uint *data = *data_ptr;\n  short data_length = *(short *)((int)data_ptr + 0x2a);\n  \n  if (data_length == 4) {\n    data[1] &= 0xfffffbff;\n    uint *puVar = data_ptr[9];\n    data_ptr[9] = (uint *)((int)puVar + 1);\n    *(char *)puVar = (char)data[4];\n    data_length--;\n  }\n  else if (data_length == 3) {\n    data[1] &= 0xfffffbff;\n    **data_ptr &= 0xfffffbff;\n    uint *puVar = data_ptr[9];\n    data_ptr[9] = (uint *)((int)puVar + 1);\n    *(char *)puVar = (char)data[4];\n    data_length--;\n  }\n  else if (data_length == 2) {\n    if ((int)PTR_0000000b - 1 < 2) {\n      **data_ptr &= 0xfffffbff;\n      **data_ptr |= 0x100;\n    }\n    else {\n      **data_ptr |= 0x200;\n    }\n    uint *puVar = data_ptr[9];\n    data_ptr[9] = (uint *)((int)puVar + 1);\n    *(char *)puVar = (char)data[4];\n    data_length--;\n    puVar = data_ptr[9];\n    data_ptr[9] = (uint *)((int)puVar + 1);\n    *(char *)puVar = (char)data[4];\n    data_length--;\n    data[1] &= 0xfffffcff;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    PTR_0000000c = (uint *)0x0;\n    if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      DAT_08001902();\n    }\n    else {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      DAT_080015b8();\n    }\n  }\n  else {\n    uint *puVar = data_ptr[9];\n    data_ptr[9] = (uint *)((int)puVar + 1);\n    *(char *)puVar = (char)data[4];\n    data_length--;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_uVar1_less_than_10_08003f24",
                "uVar1": "uVar1",
                "FUN_08003f00": "get_uVar1",
                "PTR_DAT_08003f40": "function_pointer_array",
                "PTR_DAT_08003f44": "undefined4_array",
                "code": "function_pointer",
                "undefined4": "undefined4_value"
            },
            "code": "void execute_function_if_uVar1_less_than_10_08003f24(void)\n{\n  uint uVar1 = get_uVar1();\n  if (uVar1 < 10) {\n    (**(code **)(PTR_DAT_08003f40 + uVar1 * 4))(*(undefined4 *)(PTR_DAT_08003f44 + uVar1 * 4));\n  }\n  return;\n}\n",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_uVar1_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "data"
            },
            "code": "void initialize_data_080046b4(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    undefined *data = PTR_DAT_08004754;\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        data[0] = 6;\n        *(undefined4 *)(data + 0xc) = 0;\n        data[0x14] = 7;\n        *(undefined4 *)(data + 0x20) = 0;\n        data[0x28] = 8;\n        *(undefined4 *)(data + 0x34) = 0;\n        data[0x3c] = 9;\n        *(undefined4 *)(data + 0x48) = 0;\n        data[0x50] = 10;\n        *(undefined4 *)(data + 0x5c) = 0;\n        data[100] = 0x17;\n        *(undefined4 *)(data + 0x70) = 0;\n        data[0x78] = 0x17;\n        *(undefined4 *)(data + 0x84) = 0;\n        data[0x8c] = 0x17;\n        *(undefined4 *)(data + 0x98) = 0;\n        data[0xa0] = 0x17;\n        *(undefined4 *)(data + 0xac) = 0;\n        data[0xb4] = 0x17;\n        *(undefined4 *)(data + 0xc0) = 0;\n        data[200] = 0x28;\n        *(undefined4 *)(data + 0xd4) = 0;\n        data[0xdc] = 0x28;\n        *(undefined4 *)(data + 0xe8) = 0;\n        data[0xf0] = 0x28;\n        *(undefined4 *)(data + 0xfc) = 0;\n        data[0x104] = 0x28;\n        *(undefined4 *)(data + 0x110) = 0;\n        data[0x118] = 0x28;\n        *(undefined4 *)(data + 0x124) = 0;\n        data[300] = 0x28;\n        *(undefined4 *)(data + 0x138) = 0;\n        FUN_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, data, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "decode_0800160e",
                "param_1": "params",
                "cVar1": "current_char",
                "puVar2": "current_ptr"
            },
            "code": "int decode_0800160e(int *params) {\n    char current_char;\n    undefined *current_ptr;\n\n    current_char = *(char *)((int)params + 0x3d);\n    if (*(short *)((int)params + 0x2a) != 0) {\n        current_ptr = (undefined *)params[9];\n        params[9] = (int)(current_ptr + 1);\n        *current_ptr = (char)*(undefined4 *)(*params + 0x10);\n        *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n        if ((*(short *)((int)params + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*params + 4) = *(uint *)(*params + 4) & 0xfffffbff;\n            params[0xc] = 0x22;\n            *(undefined *)((int)params + 0x3d) = 0x28;\n            do_nothing_0800160c();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "decode_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "calculateAndUpdateUintValue_08000e18",
                "*PTR_DAT_08000e2c": "bytePointer",
                "(uint32_t*)PTR_DAT_08000e28": "uintPointer",
                "*(uint *)PTR_DAT_08000e28": "*uintPointer",
                "*(int *)PTR_DAT_08000e28": "*uintPointer",
                "PTR_DAT_08000e2c": "bytePointerAddress",
                "PTR_DAT_08000e28": "uintPointerAddress"
            },
            "code": "void calculateAndUpdateUintValue_08000e18(void)\n{\n    uint8_t byteValue = **PTR_DAT_08000e2c;\n    uint32_t* (uint32_t*)PTR_DAT_08000e28 = (uint32_t*)PTR_DAT_08000e28;\n    *(uint *)PTR_DAT_08000e28 = *(uint *)PTR_DAT_08000e28 + (uint32_t)byteValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "calculateAndUpdateUintValue_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "process_input_08003486",
                "param_1": "input_value",
                "local_24": "mask",
                "local_18": "constant",
                "local_20": "param_2_copy",
                "local_1c": "param_3_copy",
                "uVar1": "shifted_input",
                "FUN_080031fc": "calculate_value"
            },
            "code": "void process_input_08003486(uint input_value, undefined4 param_2, undefined4 param_3)\n{\n  uint shifted_input = (input_value << 0x18) >> 0x1c;\n  uint mask = 1 << (input_value & 0xf) & 0xffff;\n  uint constant = 2;\n  undefined4 param_2_copy = param_2;\n  undefined4 param_3_copy = param_3;\n  uint result = calculate_value(shifted_input, &mask);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_input_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "check_and_set_value_08005662",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "result",
                "uVar2": "flag",
                "bVar3": "is_result_invalid"
            },
            "code": "void check_and_set_value_08005662(int value1, int value2)\n{\n    int result = get_result(value1, *(short *)(value2 + 0xe));\n    bool is_result_invalid = result == -1;\n    ushort flag = *(ushort *)(value2 + 0xc);\n    if (is_result_invalid) {\n        flag = flag & 0xefff;\n    }\n    else {\n        *(int *)(value2 + 0x54) = result;\n        flag = flag | 0x1000;\n    }\n    *(ushort *)(value2 + 0xc) = flag;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_value_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data_ptr",
                "iVar1": "status",
                "uVar2": "index",
                "local_9": "value"
            },
            "code": "void update_data_080042ac(int data_ptr){\n  int status;\n  ushort index;\n  undefined value;\n  status = get_data(data_ptr, &value);\n  if ((status == 0) &&\n     (index = *(short *)(data_ptr + 100) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x66))) {\n    *(undefined *)(*(int *)(data_ptr + 0x60) + (uint)*(ushort *)(data_ptr + 100)) = value;\n    *(ushort *)(data_ptr + 100) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "PTR_DAT_080003d0": "status_ptr",
                "PTR_DAT_080003d1": "data_ptr",
                "PTR_DAT_080003d2": "byte_ptr",
                "PTR_DAT_080003d3": "count_ptr"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *PTR_DAT_080003d3;\n  uint32_t *PTR_DAT_080003d0;\n  uint32_t *PTR_DAT_080003d1;\n  uint32_t *PTR_DAT_080003d2;\n  \n  flag_ptr = input[0xb];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    PTR_DAT_080003d3 = input[0x9];\n    PTR_DAT_080003d0 = &(*input)[1];\n    PTR_DAT_080003d1 = &(*input)[4];\n    PTR_DAT_080003d2 = (uint32_t *)*PTR_DAT_080003d3;\n    if (*(short *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        *PTR_DAT_080003d0 &= 0xfffff8ff;\n        **input |= 0x200;\n        input[0xc] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        *PTR_DAT_080003d0 &= 0xfffff8ff;\n        input[0xc] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      *PTR_DAT_080003d2 = (uint32_t)*(char *)*PTR_DAT_080003d3;\n      *PTR_DAT_080003d3 = (uint32_t *)((int)*PTR_DAT_080003d3 + 1);\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_if_four_08000f2c",
                "param_1": "flag",
                "DAT_08000f48": "data_pointer"
            },
            "code": "void set_flag_if_four_08000f2c(int flag)\n{\n  if (flag != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_if_four_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "param_1": "bit_index",
                "PTR_08000edc": "DAT_08000edc"
            },
            "code": "void set_bit_in_array_08000ec4(uint bit_index)\n{\n    if (bit_index >= 0) {\n        uint array_index = bit_index >> 5;\n        uint bit_offset = bit_index & 0x1f;\n        uint* array_ptr = (uint*)(PTR_08000edc + array_index * 4);\n        *array_ptr = 1 << bit_offset;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkAndCallFunction_08004338",
                "DAT_0800435c": "data",
                "PTR_DAT_08004360": "pointer"
            },
            "code": "void checkAndCallFunction_08004338(){\n  if (DAT_0800435c != 0) {\n    callFunction(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "checkAndCallFunction_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_system_interrupt_080005e0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_system_interrupt_080005e0(void)\n{\n  int interrupt_number = 0x3f;\n  software_interrupt(interrupt_number);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "check_and_call_function_080005e4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result",
                "PTR_DAT_080005fc": "data_pointer"
            },
            "code": "int check_and_call_function_080005e4(int param_1, int param_2, int param_3, int param_4)\n{\n  int result = 0;\n  if (*(int *)PTR_DAT_080005fc == 0)\n  {\n    result = call_function(1, param_1, 0, 0, param_4);\n  }\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "update_param_0800076c",
                "param_1": "param_list",
                "param_2": "param_count",
                "param_3": "param_size",
                "param_4": "param_offset",
                "uVar1": "param_value",
                "iVar2": "return_val",
                "uVar3": "current_param_index"
            },
            "code": "void update_param_0800076c(int **param_list, uint param_count, uint param_size, uint param_offset) {\n  uint current_param_index = (uint)*(byte *)((int)param_list + 0x49);\n  uint param_value = FUN_08000728(param_list, current_param_index, param_size, param_offset, param_offset);\n  *(char *)((int)param_list + current_param_index + 9) = (char)((ushort)param_value >> 8);\n  current_param_index = (current_param_index + 1) & 0xff;\n  *(char *)((int)param_list + current_param_index + 9) = (char)param_value;\n  *(char *)((int)param_list + 0x49) = (char)current_param_index + '\\x01';\n  if (1 < *(byte *)((int)param_list + 6)) {\n    FUN_080041bc(*(byte *)((int)param_list + 6), 1);\n  }\n  if (*(byte *)((int)param_list + 5) < 4) {\n    (**(code **)(**param_list + 4))(*param_list, (int)param_list + 9, *(undefined *)((int)param_list + 0x49));\n  }\n  if (1 < *(byte *)((int)param_list + 6)) {\n    FUN_080041bc(*(byte *)((int)param_list + 6), 0);\n  }\n  if (*(byte *)((int)param_list + 5) < 4) {\n    do {\n      int return_val = (**(code **)(**param_list + 0xc))();\n    } while (-1 < return_val);\n  }\n  *(undefined *)((int)param_list + 0x49) = 0;\n  int updated_param = FUN_08004204();\n  param_list[0x17] = (int *)(updated_param + (uint)*(ushort *)((int)param_list + 0x56));\n  *(short *)((int)param_list + 0x52) = *(short *)((int)param_list + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08000728",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a00",
                "FUN_08000b54",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "update_param_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "get_value_at_index_08004460",
                "param_1": "index",
                "param_2": "size",
                "uVar1": "value"
            },
            "code": "void get_value_at_index_08004460(int index, uint size)\n{\n    undefined2 value;\n    if (size < 0x60) {\n        value = *(undefined2 *)(PTR_DAT_08004478 + size * 2);\n    }\n    else {\n        value = 0xffff;\n    }\n    *(undefined2 *)(index + 300) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_parameter_08001198",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x18)": "*(int *)(object_address + 0x18)"
            },
            "code": "void set_parameter_08001198(int object_address, int value, int is_shifted)\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x18) = value;\n  }\n  else {\n    *(int *)(object_address + 0x18) = value << 0x10;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_parameter_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_from_uint_at_index_08003138",
                "param_1": "number",
                "param_2": "index",
                "PTR_": "ptr",
                "DAT_": "shifted_number"
            },
            "code": "uint get_bit_from_uint_at_index_08003138(uint number, int index)\n{\n    uint* PTR_ = (uint *)(index + ((number << 0x18) >> 0x1c) * 4);\n    uint DAT_ = *PTR_ >> (number & 0xf);\n    uint bit = DAT_ & 1;\n    return bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_from_uint_at_index_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_bit_in_uint_array_08002848",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "array[0x20]",
                "1 << (param_2 & 0xff)": "1u << (bit_index & 0xff)",
                "~(1 << (param_2 & 0xff))": "~(1u << (bit_index & 0xff))",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_index & 0xff)"
            },
            "code": "void set_bit_in_uint_array_08002848(uint *array, uint bit_index, uint bit_value) {\n  uint mask = ~(1u << (bit_index & 0xff));\n  uint shifted_value = bit_value << (bit_index & 0xff);\n  array[0x20] = (array[0x20] & mask) | shifted_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "data_pointer",
                "*(byte *)(param_1 + 0x3a)": "first_byte",
                "*(byte *)(param_1 + 0x39)": "second_byte"
            },
            "code": "byte combine_bytes_0800312c(int data_pointer) {\n    byte first_byte = *(byte *)(data_pointer + 0x3a);\n    byte second_byte = *(byte *)(data_pointer + 0x39);\n    return first_byte | second_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003df4",
                "FUN_08003dd0"
            ],
            "imported": false,
            "current_name": "combine_bytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_bit_080028f0",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "array"
            },
            "code": "int clear_bit_080028f0(uint **bit_array, unsigned int bit_position) {\\n\\\n        uint *array = *bit_array;\\n\\\n        if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\\n\\\n            array[17] &= 0xffff7fff;\\n\\\n        }\\n\\\n        array = *bit_array;\\n\\\n        if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\\n\\\n            *array &= 0xfffffffe;\\n\\\n        }\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "value_pointer"
            },
            "code": "int get_value_from_pointer_08000e30(void)\n{\n    int* PTR_DAT_08000e38 = (int*)PTR_DAT_08000e38;\n    int value = *PTR_DAT_08000e38;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_0800201c",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08002488",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "set_value_and_reset_08000f56",
                "param_1": "input_val",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(input_val + 4)",
                "FUN_080033c8": "call_reset_function",
                "*(undefined4 *)(param_1 + 0x10)": "*(undefined4 *)(input_val + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(undefined *)(input_val + 5)"
            },
            "code": "int set_value_and_reset_08000f56(int input_val)\n{\n  if (input_val != 0) {\n    *(undefined *)(input_val + 4) = 2;\n    call_reset_function();\n    *(undefined4 *)(input_val + 0x10) = 0;\n    *(undefined *)(input_val + 4) = 0;\n    *(undefined *)(input_val + 5) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_value_and_reset_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "pbVar2": "current_byte",
                "PTR_": "data + ",
                "DAT_": "",
                "*param_1": "*data",
                "param_1[2]": "data[2]",
                "param_1[4]": "data[4]",
                "param_1[8]": "current_position",
                "*(uint *)(*param_1 + 4)": "*(int *)(*data + 4)",
                "*(ushort *)param_1[8]": "*(unsigned short *)*current_position",
                "*(uint *)(*param_1 + 0xc)": "*(int *)(*data + 0xc)",
                "sVar1": "remaining_iterations"
            },
            "code": "int process_data_0800295c(int *data)\n{\n  int current_byte;\n  int *current_position = PTR_8;\n  if (*(char *)(PTR_0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    int *target_position = (int *)(*PTR_4);\n    *target_position = *(unsigned short *)*current_position & 0x1ff;\n    if (data[4] == 0) {\n      current_position++;\n    }\n    else {\n      current_position = current_position + 2;\n    }\n  }\n  else {\n    current_byte = *(unsigned char *)*current_position;\n    current_position++;\n    int *target_position = (int *)(*PTR_4);\n    *target_position = current_byte;\n  }\n  short remaining_iterations = *(short *)(PTR_0x26) - 1;\n  *(short *)(PTR_0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    int *target_position = (int *)(*PTR_0xc);\n    *target_position &= 0xffffff7f;\n    *target_position |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "param_1": "input_value",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result",
                "FUN_0800354a": "calculate_value"
            },
            "code": "uint32_t check_value_08003380(uint32_t input_value, const uint32_t* data_ptr, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t result;\n  result = calculate_value(input_value, data_ptr, param_3, param_4, param_4);\n  if ((result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "data",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "value"
            },
            "code": "void process_data_08004110(uint index, undefined4 mode, undefined4 flag, undefined *data)\n{\n    int value;\n    undefined *data_ptr;\n    int result;\n\n    if (index < 0x60) {\n        value = (int)*(short *)(PTR_DAT_080041a8 + index * 2);\n        data_ptr = PTR_DAT_080041a8;\n    }\n    else {\n        value = -1;\n        data_ptr = data;\n    }\n\n    if (value != -1) {\n        result = FUN_08003138(value, PTR_DAT_080041ac, flag, data_ptr, data);\n        if (result != 0) {\n            result = FUN_0800355e(value, PTR_DAT_080041b0);\n            if (result == 0) {\n                result = FUN_0800355e(value, PTR_DAT_080041b4);\n                if (result != 0) {\n                    FUN_08003414(value);\n                }\n            }\n            else {\n                FUN_080033d8(value);\n            }\n            FUN_0800316c(value, PTR_DAT_080041ac);\n        }\n        switch(mode) {\n            case 0:\n                FUN_08003486(value, 0);\n                break;\n            case 1:\n                FUN_08003486(value, 1, 0);\n                break;\n            case 2:\n                FUN_08003486(value, 0, 1);\n                break;\n            case 3:\n                FUN_08003486(value, 0, 2);\n        }\n        FUN_0800314e(value, PTR_DAT_080041b8);\n    }\n    return;\n}",
            "called": [
                "FUN_0800314e",
                "FUN_08003138",
                "FUN_0800355e",
                "FUN_0800316c",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003486"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_input_size_and_set_values_08000ee0",
                "param_1": "input_size",
                "puVar1": "values_ptr"
            },
            "code": "int check_input_size_and_set_values_08000ee0(int input_size) {\n  int *values_ptr;\n  values_ptr = DAT_08000f04;\n  if (input_size - 1U < 0x1000000) {\n    values_ptr[1] = input_size - 1U;\n    *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n    values_ptr[2] = 0;\n    *values_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "check_input_size_and_set_values_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_08001684",
                "FUN_080015bc"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "current_char",
                "pbVar2": "byte_ptr",
                "*param_1": "data_ptr",
                "0x3d": "OFFSET_CURRENT_CHAR",
                "0x2a": "OFFSET_SHORT_VALUE",
                "9": "OFFSET_BYTE_PTR",
                "uint": "unsigned int",
                "0x10": "OFFSET_UNSIGNED_INT_VALUE",
                "0xc": "OFFSET_INT_VALUE",
                "do_nothing_080015ba": "do_nothing"
            },
            "code": "int process_data_080015bc(int *data) {\n  char current_char;\n  byte *byte_ptr;\n  \n  current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing_08000f4c();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_at_address_0800066c",
                "param_1": "address",
                "param_2": "data",
                "param_3": "data_limit",
                "param_4": "data_type"
            },
            "code": "void set_data_at_address_0800066c(int address, undefined data, int data_limit, undefined data_type) {\n  *(undefined *)(address + 4) = data;\n  if (data_limit > 3) {\n    data_limit = 0;\n  }\n  *(char *)(address + 5) = (char)data_limit;\n  *(undefined *)(address + 6) = data_type;\n  *(undefined2 *)(address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_at_address_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "add_character_to_array_080042e8",
                "param_1": "array_address",
                "param_2": "character",
                "iVar3": "array_index",
                "bVar1": "index_byte",
                "bVar2": "index_byte_mod"
            },
            "code": "int add_character_to_array_080042e8(int array_address, char character) {\n    *(char *)(array_address + 0x10) = 1;\n    int array_index = *(unsigned short *)(array_address + 0x140) + 1;\n    char index_byte = (char)array_index;\n    char index_byte_mod = index_byte & 0x7f;\n    if (array_index == 0) {\n        index_byte_mod = -(-index_byte & 0x7f);\n    }\n    do {\n    } while (*(unsigned short *)(array_address + 0x142) == (unsigned short)index_byte_mod);\n    *(char *)(*(int *)(array_address + 0x13c) + (unsigned int)*(unsigned short *)(array_address + 0x140)) = character;\n    *(unsigned short *)(array_address + 0x140) = (unsigned short)index_byte_mod;\n    int function_return = FUN_08003df4(array_address + 0xd4);\n    if (function_return == 0) {\n        FUN_08003eac(array_address + 0xd4,PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "add_character_to_array_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_command_if_allowed_080038d0",
                "param_1": "user_input",
                "iVar1": "command_ptr",
                "FUN_0800387c": "get_command_ptr",
                "PTR_0804b7c0": "print_prompt"
            },
            "code": "void execute_command_if_allowed_080038d0(int user_input) {\n  int command_ptr = get_command_ptr();\n  if (((*(code **)(command_ptr + 0x60) != (code *)0x0) && (*(char *)(command_ptr + 0x5e) == '\\x01')) &&\n     (*(char *)(command_ptr + 0x2c) != ' ')) {\n    (**(code **)(command_ptr + 0x60))(command_ptr + 0x68);\n  }\n  PTR_0804b7c0(user_input);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_command_if_allowed_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_one_0800410c",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_one_0800410c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "get_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "calculate_shift_amount_0800260c",
                "uVar1": "shift_amount",
                "FUN_080025e0": "get_value",
                "DAT_08002624": "global_data",
                "PTR_DAT_08002628": "shift_values"
            },
            "code": "uint calculate_shift_amount_0800260c(void)\n{\n  uint shift_amount;\n  shift_amount = get_value();\n  uint index = (*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint shift_value = PTR_DAT_08002628[index];\n  return shift_amount >> shift_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "address",
                "*(short *)(param_1 + 0x138)": "ptr1",
                "*(short *)(param_1 + 0x13a)": "ptr2",
                "result": "offset"
            },
            "code": "ushort calculate_offset_08004240(int address)\n{\n    short* ptr1 = (short*)(address + 0x138);\n    short* ptr2 = (short*)(address + 0x13a);\n    ushort result = (*ptr1 + 0x40) - *ptr2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_ptr",
                "uVar4": "data_value",
                "puVar3": "data_table",
                "iVar1": "result",
                "PTR_DAT_080041fc": "data_table",
                "PTR_DAT_08004200": "value_table",
                "FUN_08003138": "process_value",
                "FUN_0800318c": "process_data_value",
                "FUN_080034b6": "set_bit"
            },
            "code": "void process_data_080041bc(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_ptr) {\n  int result = 0;\n  uint data_value = 0;\n  if (data_index < 0x60) {\n    data_value = (uint)*(short *)(data_index * 2 + PTR_DAT_080041fc);\n  }\n  else {\n    data_value = 0xffffffff;\n    data_ptr = data_ptr;\n  }\n  if ((data_value != 0xffffffff) && (result = process_value(data_value, PTR_DAT_08004200, param_3, data_ptr, data_ptr)) != 0) {\n    uint processed_value = process_data_080041bc_value((data_value << 0x18) >> 0x1c);\n    set_bit(processed_value, 1 << (data_value & 0xf) & 0xffff, param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08003138",
                "FUN_0800318c",
                "FUN_080034b6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_080006b4",
                "FUN_08000600",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "process_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "param_1": "struct_ptr",
                "*(int *)(param_1 + 0x134)": "ptr1",
                "*(undefined2 *)(param_1 + 0x138)": "ptr2",
                "*(undefined2 *)(param_1 + 0x13a)": "ptr3",
                "*(int *)(param_1 + 0x13c)": "ptr4",
                "*(undefined2 *)(param_1 + 0x140)": "ptr5",
                "*(undefined2 *)(param_1 + 0x142)": "ptr6"
            },
            "code": "void initialize_struct_08004364(int struct_ptr) {\n  int* ptr1 = (int*)(struct_ptr + 0x134);\n  *ptr1 = struct_ptr + 0x11;\n  short* ptr2 = (short*)(struct_ptr + 0x138);\n  *ptr2 = 0;\n  short* ptr3 = (short*)(struct_ptr + 0x13a);\n  *ptr3 = 0;\n  int* ptr4 = (int*)(struct_ptr + 0x13c);\n  *ptr4 = struct_ptr + 0x51;\n  short* ptr5 = (short*)(struct_ptr + 0x140);\n  *ptr5 = 0;\n  short* ptr6 = (short*)(struct_ptr + 0x142);\n  *ptr6 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "execute_function_08000682",
                "param_1": "input_parameter",
                "FUN_0800066c": "call_another_function"
            },
            "code": "undefined4 execute_function_08000682(undefined4 input_parameter)\n{\n  call_another_function();\n  return input_parameter;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "execute_function_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "update_data_08000e3c",
                "param_1": "data",
                "*(uint *)(DAT_08000e5c + 0xc)": "*data_ptr",
                "uint": "uint32_t",
                "mask": "mask",
                "update_value": "update_value"
            },
            "code": "void update_data_08000e3c(uint8_t data)\n{\n  uint32_t *(uint *)(DAT_08000e5c + 0xc) = (uint32_t *)(DAT_08000e5c + 0xc);\n  uint32_t mask = 0xf8ff;\n  uint32_t update_value = (data & 7) << 8 | (*(uint *)(DAT_08000e5c + 0xc) & mask) | 0x5fa0000;\n  *(uint *)(DAT_08000e5c + 0xc) = update_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "update_data_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "clear_bits_and_set_flag_if_conditions_met_08002864",
                "param_1": "data",
                "param_2": "flag",
                "bVar1": "is_valid_ptr",
                "puVar2": "ptr"
            },
            "code": "uint32_t clear_bits_and_set_flag_if_conditions_met_08002864(uint32_t **data, uint32_t flag) {\n    bool is_valid_ptr = false;\n    uint32_t *ptr = *data;\n    \n    set_bits_to_zero(*data, flag, 0);\n    \n    if (ptr == DAT_080028d0 || ptr == DAT_080028d0 + 0x100) {\n        is_valid_ptr = true;\n    }\n    \n    if (is_valid_ptr && ((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n        ptr[0x11] &= 0xffff7fff;\n    }\n    \n    if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n        *ptr &= 0xfffffffe;\n    }\n    \n    *(uint8_t *)((int)data + 0x39) = 1;\n    return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bits_and_set_flag_if_conditions_met_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "FUN_080048cc": "set_bytes",
                "DAT_08005364": "global_data1",
                "PTR_FUN_0800562a_1_08005368": "function1",
                "PTR_FUN_08005662_1_0800536c": "function2",
                "PTR_LAB_08005686_1_08005370": "label1"
            },
            "code": "void initialize_data_0800532c(undefined4 *data, undefined2 value1, undefined2 value2)\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  set_bytes(data + 0x17, 0, 8);\n  data[9] = DAT_08005364;\n  data[10] = PTR_FUN_0800562a_1_08005368;\n  data[0xb] = PTR_FUN_08005662_1_0800536c;\n  undefined *ptr = PTR_LAB_08005686_1_08005370;\n  data[8] = data;\n  data[0xc] = ptr;\n}\n",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "update_bit_0800314e",
                "param_1": "bit_position",
                "param_2": "data_array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "*(uint *)(data_array + array_index * 4)",
                "1 << (param_1 & 0xf)": "1 << (bit_position & 0xf)",
                "uVar1 = (param_1 << 0x18) >> 0x1c;": "uint array_index = (bit_position << 0x18) >> 0x1c;"
            },
            "code": "void update_bit_0800314e(uint bit_position, int* data_array)\n{\n    uint bit_mask = 1 << (bit_position & 0xf);\n    uint array_index = (bit_position << 0x18) >> 0x1c;\n    *(uint *)(data_array + array_index * 4) |= bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "process_data_0800447c",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "value1",
                "PTR_PTR_FUN_080042e8_1_080044c8": "PTR_PTR_PROCESS_1_2",
                "PTR_DAT_080044cc": "PTR_DATA_1",
                "FUN_08004444": "perform_action",
                "FUN_08004460": "perform_action",
                "FUN_0800351e": "get_value",
                "PTR_DAT_080044d0": "PTR_DATA_2",
                "PTR_DAT_080044d4": "PTR_DATA_3",
                "FUN_08004364": "finalize_process"
            },
            "code": "undefined4* process_data_0800447c(undefined4 *data, undefined4 param1, undefined4 param2, undefined4 param3)\n{\n    undefined2 value1;\n    data[1] = 0;\n    data[2] = 1000;\n    *data = PTR_PTR_FUN_080042e8_1_080044c8;\n    if (data == (undefined4 *)PTR_DAT_080044cc) {\n        perform_action(data, 0x4c, param2, PTR_DAT_080044cc, param3);\n        perform_action(data, 0x4d);\n    }\n    else {\n        value1 = get_value(param1, PTR_DAT_080044d0);\n        *(undefined2 *)((int)data + 0x12e) = value1;\n        value1 = get_value(param1, PTR_DAT_080044d4);\n        *(undefined2 *)(data + 0x4b) = value1;\n    }\n    finalize_process(data);\n    return data;\n}",
            "called": [
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364",
                "FUN_08004460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "process_data_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "verify_assertion_and_log_error_if_failed_08004808",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "assertion",
                "param_4": "assertion_length",
                "uVar1": "error_log_level",
                "puVar2": "error_message",
                "uVar3": "current_time",
                "uVar4": "assertion_length_copy"
            },
            "code": "void verify_assertion_and_log_error_if_failed_08004808(undefined4 param1, undefined4 param2, undefined *assertion, undefined4 assertion_length) {\n  \n  undefined4 error_log_level = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  undefined *error_message = PTR_s___function__08004838;\n  undefined4 assertion_length_copy = assertion_length;\n  \n  if (assertion == (undefined *)0x0) {\n    return;\n  }\n  \n  while (true) {\n    FUN_08004860(error_log_level, PTR_s_assertion___s__failed__file___s__0800483c, assertion_length_copy, param1, param2, error_message, assertion, assertion_length);\n    \n    undefined8 current_time = FUN_080051ac();\n    param2 = (undefined4)((ulonglong)current_time >> 0x20);\n    error_log_level = (undefined4)current_time;\n    \n    assertion = PTR_s__08004840;\n    error_message = PTR_s__08004840;\n  }\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "verify_assertion_and_log_error_if_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "**param_1": "**bit_array",
                "*(undefined *)(param_1 + 1)": "*(bool *)(bit_array + 1)"
            },
            "code": "int clear_bit_08000f72(uint **bit_array, uint bit_index){\n                      **bit_array &= ~(1 << (bit_index & 0xff));\n                      *(bool *)(bit_array + 1) = true;\n                      return 0;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "analyze_input_08001d00",
                "param_1": "input_ptr",
                "iVar1": "input_var",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "(int)param_1 + 0x3e": "input_char"
            },
            "code": "void analyze_input_08001d00(int *input_ptr) {\n  int input_var = *input_ptr;\n  uint var1 = *(uint *)(input_var + 0x18);\n  uint var2 = *(uint *)(input_var + 0x14);\n  uint var3 = *(uint *)(input_var + 4);\n  char input_char = *(char *)((int)input_ptr + 0x3e);\n  \n  if (input_char == '\\x10' || input_char == '@') {\n    if ((var2 & 0x10001) == 0 || (var3 & 0x200) == 0) {\n      if ((0x08001e60 & var2) == 0 || (var3 & 0x200) == 0) {\n        if ((0x08001e4c & var2) != 0 && (var3 & 0x200) != 0) {\n          execute_function_A(input_ptr);\n        }\n      }\n      else {\n        execute_function_B(input_ptr);\n      }\n    }\n    else {\n      execute_function_C(input_ptr);\n    }\n    if ((0x08001e54 & var1) == 0) {\n      if ((0x08001e64 & var2) != 0 && (var3 & 0x400) != 0 && (0x08001e5c & var2) == 0) {\n        execute_function_D(input_ptr);\n        return;\n      }\n      if ((0x08001e5c & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function_E(input_ptr);\n        return;\n      }\n    }\n    else {\n      if ((0x08001e58 & var2) != 0 && (var3 & 0x400) != 0 && (0x08001e5c & var2) == 0) {\n        execute_function_F(input_ptr);\n        return;\n      }\n      if ((0x08001e5c & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function_G(input_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if ((0x08001e4c & var2) != 0 && (var3 & 0x200) != 0) {\n      execute_function_H();\n      return;\n    }\n    if ((0x08001e50 & var2) != 0 && (var3 & 0x200) != 0) {\n      execute_function_I(input_ptr);\n      return;\n    }\n    if ((0x08001e54 & var1) == 0) {\n      if ((0x08001e64 & var2) != 0 && (var3 & 0x400) != 0 && (0x08001e5c & var2) == 0) {\n        execute_function_J(input_ptr);\n        return;\n      }\n      if ((0x08001e5c & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function_K(input_ptr);\n      }\n    }\n    else {\n      if ((0x08001e58 & var2) != 0 && (var3 & 0x400) != 0 && (0x08001e5c & var2) == 0) {\n        execute_function_L(input_ptr);\n        return;\n      }\n      if ((0x08001e5c & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function_M(input_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_08001420",
                "FUN_08001256",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800171a",
                "FUN_08001440",
                "FUN_0800160e",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_080019a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "analyze_input_08001d00"
        }
    },
    "used_tokens": 174524,
    "layers": [
        [
            "FUN_08000fb4",
            "FUN_08004560",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08001904",
            "FUN_08002ffc",
            "FUN_08002f66",
            "FUN_08003eac",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_0800377c",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_080034ce",
            "FUN_080047fe",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_08000600",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08000690",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08000d3c",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08001684",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_080047c0",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08004110",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08000682",
            "FUN_08000e3c",
            "FUN_08002864",
            "FUN_0800532c",
            "FUN_0800314e",
            "FUN_0800447c",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00"
        ]
    ],
    "locked_functions": []
}