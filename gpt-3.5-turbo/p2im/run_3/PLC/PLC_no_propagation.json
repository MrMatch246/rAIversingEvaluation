{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *data,uint target_byte,uint data_length)\n\n{\n  byte current_byte;\n  char bit1;\n  char bit2;\n  char bit3;\n  char bit4;\n  byte *result;\n  uint *current_data_pointer;\n  byte *next_data_pointer;\n  uint pointer_alignment;\n  uint length_multiple_of_eight;\n  uint xored_byte_1;\n  uint xored_byte_2;\n  bool nonzero_bit1;\n  bool nonzero_bit2;\n  bool nonzero_bit3;\n  bool nonzero_bit4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      current_data_pointer = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_length = data_length - 1;\n      data = current_data_pointer;\n    } while (current_byte != target_byte);\n  }\n  else {\n    pointer_alignment = (uint)data & 7;\n    while( true ) {\n      if (pointer_alignment == 0) {\n        pointer_alignment = target_byte | target_byte << 8;\n        pointer_alignment = pointer_alignment | pointer_alignment << 0x10;\n        length_multiple_of_eight = data_length & 0xfffffff8;\n        do {\n          current_data_pointer = data + 2;\n          length_multiple_of_eight = length_multiple_of_eight - 8;\n          xored_byte_1 = *data ^ pointer_alignment;\n          xored_byte_2 = data[1] ^ pointer_alignment;\n          bit1 = -((char)xored_byte_1 == '\\0');\n          bit2 = -((char)(xored_byte_1 >> 8) == '\\0');\n          bit3 = -((char)(xored_byte_1 >> 0x10) == '\\0');\n          bit4 = -((char)(xored_byte_1 >> 0x18) == '\\0');\n          xored_byte_1 = CONCAT13(bit4,CONCAT12(bit3,CONCAT11(bit2,bit1)));\n          nonzero_bit1 = (char)xored_byte_2 != '\\0';\n          nonzero_bit2 = (char)(xored_byte_2 >> 8) != '\\0';\n          nonzero_bit3 = (char)(xored_byte_2 >> 0x10) != '\\0';\n          nonzero_bit4 = (char)(xored_byte_2 >> 0x18) != '\\0';\n          xored_byte_2 = CONCAT13(nonzero_bit4 * bit4 - !nonzero_bit4,\n                            CONCAT12(nonzero_bit3 * bit3 - !nonzero_bit3,\n                                     CONCAT11(nonzero_bit2 * bit2 - !nonzero_bit2,nonzero_bit1 * bit1 - !nonzero_bit1)));\n          if (xored_byte_2 != 0) {\n            if (xored_byte_1 == 0) {\n              next_data_pointer = (byte *)((int)data + 5);\n              xored_byte_1 = xored_byte_2;\n            }\n            else {\n              next_data_pointer = (byte *)((int)data + 1);\n            }\n            if ((xored_byte_1 & 1) == 0) {\n              nonzero_bit1 = (xored_byte_1 & 0x100) == 0;\n              result = next_data_pointer + 1;\n              if (nonzero_bit1) {\n                nonzero_bit1 = (xored_byte_1 & 0x18000) == 0;\n                result = next_data_pointer + 2;\n              }\n              next_data_pointer = result;\n              if (nonzero_bit1) {\n                next_data_pointer = next_data_pointer + 1;\n              }\n            }\n            return next_data_pointer + -1;\n          }\n          data = current_data_pointer;\n        } while (length_multiple_of_eight != 0);\n        data_length = data_length & 7;\n        goto joined_r0x08000290;\n      }\n      current_data_pointer = (uint *)((int)data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data == target_byte) break;\n      pointer_alignment = (uint)current_data_pointer & 7;\n      data = current_data_pointer;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_data_pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "bit1",
                "cVar3": "bit2",
                "cVar4": "bit3",
                "cVar5": "bit4",
                "pbVar6": "result",
                "puVar7": "current_data_pointer",
                "pbVar8": "next_data_pointer",
                "uVar9": "pointer_alignment",
                "uVar10": "length_multiple_of_eight",
                "uVar11": "xored_byte_1",
                "uVar12": "xored_byte_2",
                "bVar13": "nonzero_bit1",
                "bVar14": "nonzero_bit2",
                "bVar15": "nonzero_bit3",
                "bVar16": "nonzero_bit4"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "check_parameters_080002d0",
            "code": "\nundefined8 checkParameters_080002d0(int x,int y,int z,int w)\n\n{\n  undefined8 result;\n  \n  if ((w == 0) && (z == 0)) {\n    if (y != 0 || x != 0) {\n      y = -1;\n      x = -1;\n    }\n    return CONCAT44(y,x);\n  }\n  result = FUN_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "check_parameters_080002d0",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_with_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_with_remainder_08000300(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder_ptr)\n\n{\n  ulonglong quotient;\n  uint temp1;\n  uint temp2;\n  uint quotient_low;\n  uint dividend_low;\n  uint quotient_mid;\n  uint dividend_mid;\n  uint divisor_low;\n  uint divisor_mid;\n  int leading_zeros;\n  bool carry;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros != 0) {\n        divisor = divisor << leading_zeros;\n        dividend_high = dividend >> (0x20U - leading_zeros & 0xff) | dividend_high << leading_zeros;\n        dividend = dividend << leading_zeros;\n      }\n      divisor_low = divisor >> 0x10;\n      quotient_mid = dividend_high / divisor_low;\n      dividend_low = dividend >> 0x10 | (dividend_high - divisor_low * quotient_mid) * 0x10000;\n      quotient_low = quotient_mid * (divisor & 0xffff);\n      temp2 = quotient_mid;\n      if (dividend_low <= quotient_low && quotient_low - dividend_low != 0) {\n        carry = CARRY4(dividend_low,divisor);\n        dividend_low = dividend_low + divisor;\n        temp2 = quotient_mid - 1;\n        if ((carry == false) && (dividend_low <= quotient_low && quotient_low - dividend_low != 0)) {\n          temp2 = quotient_mid - 2;\n          dividend_low = dividend_low + divisor;\n        }\n      }\n      quotient_mid = (dividend_low - quotient_low) / divisor_low;\n      dividend_low = dividend & 0xffff | ((dividend_low - quotient_low) - divisor_low * quotient_mid) * 0x10000;\n      divisor_low = quotient_mid * (divisor & 0xffff);\n      quotient_low = quotient_mid;\n      if (dividend_low <= divisor_low && divisor_low - dividend_low != 0) {\n        carry = CARRY4(dividend_low,divisor);\n        dividend_low = dividend_low + divisor;\n        quotient_low = quotient_mid - 1;\n        if ((carry == false) && (dividend_low <= divisor_low && divisor_low - dividend_low != 0)) {\n          quotient_low = quotient_mid - 2;\n          dividend_low = dividend_low + divisor;\n        }\n      }\n      dividend_low = dividend_low - divisor_low;\n      quotient_low = quotient_low | temp2 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros == 0) {\n        dividend_high = dividend_high - divisor;\n        dividend_low = divisor >> 0x10;\n        divisor_mid = divisor & 0xffff;\n        temp2 = 1;\n      }\n      else {\n        divisor = divisor << leading_zeros;\n        dividend_low = divisor >> 0x10;\n        quotient_low = dividend_high >> (0x20U - leading_zeros & 0xff);\n        dividend_mid = dividend >> (0x20U - leading_zeros & 0xff) | dividend_high << leading_zeros;\n        temp2 = quotient_low / dividend_low;\n        divisor_mid = divisor & 0xffff;\n        divisor_low = dividend_mid >> 0x10 | (quotient_low - dividend_low * temp2) * 0x10000;\n        quotient_mid = temp2 * divisor_mid;\n        dividend = dividend << leading_zeros;\n        quotient_low = temp2;\n        if (divisor_low <= quotient_mid && quotient_mid - divisor_low != 0) {\n          carry = CARRY4(divisor_low,divisor);\n          divisor_low = divisor_low + divisor;\n          quotient_low = temp2 - 1;\n          if ((carry == false) && (divisor_low <= quotient_mid && quotient_mid - divisor_low != 0)) {\n            quotient_low = temp2 - 2;\n            divisor_low = divisor_low + divisor;\n          }\n        }\n        temp1 = (divisor_low - quotient_mid) / dividend_low;\n        dividend_high = dividend_mid & 0xffff | ((divisor_low - quotient_mid) - dividend_low * temp1) * 0x10000;\n        quotient_mid = temp1 * divisor_mid;\n        temp2 = temp1;\n        if (dividend_high <= quotient_mid && quotient_mid - dividend_high != 0) {\n          carry = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          temp2 = temp1 - 1;\n          if ((carry == false) && (dividend_high <= quotient_mid && quotient_mid - dividend_high != 0)) {\n            temp2 = temp1 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - quotient_mid;\n        temp2 = temp2 | quotient_low << 0x10;\n      }\n      dividend_mid = dividend_high / dividend_low;\n      divisor_low = dividend >> 0x10 | (dividend_high - dividend_low * dividend_mid) * 0x10000;\n      quotient_low = divisor_mid * dividend_mid;\n      quotient_mid = dividend_mid;\n      if (divisor_low <= quotient_low && quotient_low - divisor_low != 0) {\n        carry = CARRY4(divisor_low,divisor);\n        divisor_low = divisor_low + divisor;\n        quotient_mid = dividend_mid - 1;\n        if ((carry == false) && (divisor_low <= quotient_low && quotient_low - divisor_low != 0)) {\n          quotient_mid = dividend_mid - 2;\n          divisor_low = divisor_low + divisor;\n        }\n      }\n      dividend_mid = (divisor_low - quotient_low) / dividend_low;\n      dividend_low = dividend & 0xffff | ((divisor_low - quotient_low) - dividend_low * dividend_mid) * 0x10000;\n      divisor_mid = divisor_mid * dividend_mid;\n      quotient_low = dividend_mid;\n      if (dividend_low <= divisor_mid && divisor_mid - dividend_low != 0) {\n        carry = CARRY4(dividend_low,divisor);\n        dividend_low = dividend_low + divisor;\n        quotient_low = dividend_mid - 1;\n        if ((carry == false) && (dividend_low <= divisor_mid && divisor_mid - dividend_low != 0)) {\n          quotient_low = dividend_mid - 2;\n          dividend_low = dividend_low + divisor;\n        }\n      }\n      dividend_low = dividend_low - divisor_mid;\n      quotient_low = quotient_low | quotient_mid << 0x10;\n    }\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend_low >> leading_zeros;\n      remainder_ptr[1] = 0;\n      return CONCAT44(temp2,quotient_low);\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend;\n      remainder_ptr[1] = dividend_high;\n      return 0;\n    }\n    quotient_low = 0;\n    temp2 = 0;\n  }\n  else {\n    leading_zeros = LZCOUNT(divisor_high);\n    if (leading_zeros != 0) {\n      divisor_low = 0x20 - leading_zeros;\n      temp2 = divisor >> (divisor_low & 0xff) | divisor_high << leading_zeros;\n      divisor_mid = temp2 >> 0x10;\n      quotient_low = dividend_high >> (divisor_low & 0xff);\n      temp1 = dividend >> (divisor_low & 0xff) | dividend_high << leading_zeros;\n      dividend_mid = quotient_low / divisor_mid;\n      quotient_mid = temp1 >> 0x10 | (quotient_low - divisor_mid * dividend_mid) * 0x10000;\n      dividend_low = dividend_mid * (temp2 & 0xffff);\n      dividend = dividend << leading_zeros;\n      quotient_low = dividend_mid;\n      if (quotient_mid <= dividend_low && dividend_low - quotient_mid != 0) {\n        carry = CARRY4(quotient_mid,temp2);\n        quotient_mid = quotient_mid + temp2;\n        quotient_low = dividend_mid - 1;\n        if ((carry == false) && (quotient_mid <= dividend_low && dividend_low - quotient_mid != 0)) {\n          quotient_low = dividend_mid - 2;\n          quotient_mid = quotient_mid + temp2;\n        }\n      }\n      dividend_mid = (quotient_mid - dividend_low) / divisor_mid;\n      quotient_mid = temp1 & 0xffff | ((quotient_mid - dividend_low) - divisor_mid * dividend_mid) * 0x10000;\n      divisor_mid = dividend_mid * (temp2 & 0xffff);\n      dividend_low = dividend_mid;\n      if (quotient_mid <= divisor_mid && divisor_mid - quotient_mid != 0) {\n        carry = CARRY4(quotient_mid,temp2);\n        quotient_mid = quotient_mid + temp2;\n        dividend_low = dividend_mid - 1;\n        if ((carry == false) && (quotient_mid <= divisor_mid && divisor_mid - quotient_mid != 0)) {\n          dividend_low = dividend_mid - 2;\n          quotient_mid = quotient_mid + temp2;\n        }\n      }\n      dividend_low = dividend_low | quotient_low << 0x10;\n      quotient = (ulonglong)dividend_low * (ulonglong)(divisor << leading_zeros);\n      if (CONCAT44(quotient_mid - divisor_mid,dividend) < quotient) {\n        quotient = quotient - CONCAT44(temp2,divisor << leading_zeros);\n        dividend_low = dividend_low - 1;\n      }\n      if (remainder_ptr != (uint *)0x0) {\n        quotient_low = ((quotient_mid - divisor_mid) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n        *remainder_ptr = quotient_low << (divisor_low & 0xff) | dividend - (uint)quotient >> leading_zeros;\n        remainder_ptr[1] = quotient_low >> leading_zeros;\n      }\n      return (ulonglong)dividend_low;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry;\n      quotient_low = 1;\n    }\n    else {\n      quotient_low = 0;\n    }\n    temp2 = 0;\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend;\n      remainder_ptr[1] = dividend_high;\n      return (ulonglong)quotient_low;\n    }\n  }\n  return CONCAT44(temp2,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_with_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder_ptr",
                "uVar1": "quotient",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "quotient_low",
                "uVar5": "dividend_low",
                "uVar6": "quotient_mid",
                "uVar7": "dividend_mid",
                "uVar8": "divisor_low",
                "uVar9": "divisor_mid",
                "bVar11": "carry",
                "iVar10": "leading_zeros"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "send_software_interrupt_080005e0",
            "code": "\nvoid sendSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "send_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_function_080005e4",
            "code": "\nundefined4 executeFunction_080005e4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  returnValue = FUN_080005e0(1,param1,0,0,param4);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_function_080005e4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_data_08000600",
            "code": "\nvoid initializeData_08000600(int **dataPointer,undefined4 value)\n\n{\n  char dataType;\n  int returnValue;\n  \n  dataType = *(char *)((int)dataPointer + 5);\n  if (dataType == '\\x02') {\n    *dataPointer = &DAT_20000338;\n  }\n  else if (dataType == '\\x03') {\n    *dataPointer = &DAT_20000338;\n  }\n  else if (dataType == '\\x01') {\n    *dataPointer = &DAT_20000338;\n  }\n  else {\n    *dataPointer = &DAT_20000338;\n  }\n  FUN_08004388(*dataPointer,value,6);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_08004110(*(byte *)((int)dataPointer + 6),1);\n    FUN_080041bc(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_data_08000600",
                "param_1": "dataPointer",
                "param_2": "value",
                "cVar1": "dataType",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_08004388",
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataPointer,undefined value,int length,undefined data)\n\n{\n  *(undefined *)(dataPointer + 4) = value;\n  if (3 < length) {\n    length = 0;\n  }\n  *(char *)(dataPointer + 5) = (char)length;\n  *(undefined *)(dataPointer + 6) = data;\n  *(undefined2 *)(dataPointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "length",
                "param_4": "data"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_timer_08000682",
            "code": "\nundefined4 initialize_timer_08000682(undefined4 timer_value)\n\n{\n  FUN_0800066c();\n  return timer_value;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_timer_08000682",
                "param_1": "timer_value"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_parameters_08000690",
            "code": "\nvoid check_parameters_08000690(int input_1,int input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  if (input_1 != 1) {\n    return;\n  }\n  if (input_2 == 0xffff) {\n    FUN_08000682(&DAT_20000124,1,0,0,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_parameters_08000690",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_param_080006b4",
            "code": "\nint processParam_080006b4(int **param)\n\n{\n  bool isOverflow;\n  undefined byteValue;\n  int returnValue;\n  byte charIndex;\n  \n  if (1 < *(byte *)((int)param + 6)) {\n    FUN_080041bc(*(byte *)((int)param + 6),0);\n  }\n  *(undefined *)((int)param + 0x49) = 0;\n  if (*(byte *)((int)param + 5) < 4) {\n    isOverflow = false;\n    while (returnValue = (**(code **)(**param + 8))(), returnValue != 0) {\n      charIndex = *(byte *)((int)param + 0x49);\n      byteValue = (**(code **)(**param + 0xc))();\n      *(undefined *)((int)param + charIndex + 9) = byteValue;\n      charIndex = *(char *)((int)param + 0x49) + 1;\n      *(byte *)((int)param + 0x49) = charIndex;\n      if (0x3f < charIndex) {\n        isOverflow = true;\n      }\n    }\n  }\n  else {\n    isOverflow = false;\n  }\n  *(short *)(param + 0x14) = *(short *)(param + 0x14) + 1;\n  if (isOverflow) {\n    *(short *)(param + 0x15) = *(short *)(param + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)param + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_param_080006b4",
                "param_1": "param",
                "bVar1": "isOverflow",
                "uVar2": "byteValue",
                "iVar3": "returnValue",
                "bVar4": "charIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculate_checksum_08000728(int data_address,int data_length)\n\n{\n  byte bit_counter;\n  uint checksum;\n  uint bit;\n  uint index;\n  \n  checksum = 0xffff;\n  for (index = 0; (int)index < data_length; index = index + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_address + index + 9);\n    for (bit_counter = 1; bit_counter < 9; bit_counter = bit_counter + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data_address",
                "param_2": "data_length",
                "bVar1": "bit_counter",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_data_0800076c",
            "code": "\nvoid updateData_0800076c(int **data,undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  undefined2 result_1;\n  int result_2;\n  uint index;\n  \n  index = (uint)*(byte *)((int)data + 0x49);\n  result_1 = FUN_08000728(data,index,value_2,value_3,value_3);\n  *(char *)((int)data + index + 9) = (char)((ushort)result_1 >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)data + index + 9) = (char)result_1;\n  *(char *)((int)data + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result_2 = (**(code **)(**data + 0xc))();\n    } while (-1 < result_2);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result_2 = FUN_08004204();\n  data[0x17] = (int *)(result_2 + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_data_0800076c",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "uVar1": "result_1",
                "iVar2": "result_2",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08000b54",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004204",
                "FUN_08000728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_and_update_status_080007f0",
            "code": "\nundefined4 check_and_update_status_080007f0(int status_ptr,undefined4 param2,uint value,undefined4 param4)\n\n{\n  bool found_match;\n  byte result;\n  char result1;\n  char result2;\n  int result1;\n  uint index;\n  int temp;\n  \n  index = 0;\n  do {\n    if (7 < index) {\n      found_match = false;\nLAB_0800080a:\n      if (!found_match) {\n        *(short *)(status_ptr + 0x54) = *(short *)(status_ptr + 0x54) + 1;\n        return 1;\n      }\n      temp = *(byte *)(status_ptr + 10) - 1;\n      switch(*(byte *)(status_ptr + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        result1 = FUN_08004640(*(undefined *)(status_ptr + 0xb),*(undefined *)(status_ptr + 0xc),value,\n                             temp,param4);\n        result2 = FUN_08004640(*(undefined *)(status_ptr + 0xd),*(undefined *)(status_ptr + 0xe));\n        if (*(byte *)(status_ptr + 0x60) < (byte)(result2 + result1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        temp = FUN_08004640(*(undefined *)(status_ptr + 0xb),*(undefined *)(status_ptr + 0xc),value,\n                             temp,param4);\n        if ((uint)*(byte *)(status_ptr + 0x60) < (uint)(temp << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = FUN_08004640(*(undefined *)(status_ptr + 0xb),*(undefined *)(status_ptr + 0xc),value,\n                             temp,param4);\n        if (*(byte *)(status_ptr + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(status_ptr + 10);\n    if ((byte)(&DAT_08005a10)[index] == value) {\n      found_match = true;\n      goto LAB_0800080a;\n    }\n    index = index + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  temp = FUN_08004640(*(undefined *)(status_ptr + 0xb),*(undefined *)(status_ptr + 0xc),value,temp,\n                       param4);\n  result1 = FUN_08004640(*(undefined *)(status_ptr + 0xd),*(undefined *)(status_ptr + 0xe));\n  if ((uint)*(byte *)(status_ptr + 0x60) <\n      (((uint)(temp << 0xc) >> 0x10) + ((uint)(result1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_and_update_status_080007f0",
                "param_1": "status_ptr",
                "param_2": "param2",
                "param_3": "value",
                "param_4": "param4",
                "bVar1": "found_match",
                "bVar2": "result",
                "cVar3": "result1",
                "cVar4": "result2",
                "iVar5": "result1",
                "uVar6": "index",
                "iVar7": "temp"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_data_080008cc",
            "code": "\nvoid copyData_080008cc(int dataBuffer,undefined newValue)\n\n{\n  *(undefined *)(dataBuffer + 9) = *(undefined *)(dataBuffer + 4);\n  *(byte *)(dataBuffer + 10) = *(byte *)(dataBuffer + 10) ^ 0x80;\n  *(undefined *)(dataBuffer + 0xb) = newValue;\n  *(undefined *)(dataBuffer + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_data_080008cc",
                "param_1": "dataBuffer",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint processData_080008e2(int inputData,int lookupTable,undefined4 param3,undefined4 param4)\n\n{\n  int result_1;\n  uint dataLength;\n  uint i;\n  uint counter;\n  char shiftedValue;\n  int result_2;\n  \n  result_1 = FUN_08004640(*(undefined *)(inputData + 0xb),*(undefined *)(inputData + 0xc),param3,param4,\n                       param4);\n  dataLength = FUN_08004640(*(undefined *)(inputData + 0xd),*(undefined *)(inputData + 0xe));\n  shiftedValue = (char)((dataLength << 0x15) >> 0x18);\n  if ((dataLength & 7) != 0) {\n    shiftedValue = shiftedValue + '\\x01';\n  }\n  *(char *)(inputData + 0xb) = shiftedValue;\n  *(undefined *)(inputData + 0x49) = 3;\n  counter = 0;\n  for (i = 0; (int)i < (int)dataLength; i = i + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(lookupTable + ((i + result_1) * 0x100000 >> 0x18) * 2) >>\n         (i + result_1 & 0xf) & 1U) == 0) {\n      result_2 = (uint)*(byte *)(inputData + 0x49) + inputData;\n      *(byte *)(result_2 + 9) = *(byte *)(result_2 + 9) & ~(byte)(1 << counter);\n    }\n    else {\n      result_2 = (uint)*(byte *)(inputData + 0x49) + inputData;\n      *(byte *)(result_2 + 9) = *(byte *)(result_2 + 9) | (byte)(1 << counter);\n    }\n    counter = counter + 1 & 0xff;\n    if (7 < counter) {\n      *(char *)(inputData + 0x49) = *(char *)(inputData + 0x49) + '\\x01';\n      counter = 0;\n    }\n  }\n  if ((dataLength & 7) != 0) {\n    *(char *)(inputData + 0x49) = *(char *)(inputData + 0x49) + '\\x01';\n  }\n  shiftedValue = *(char *)(inputData + 0x49);\n  FUN_0800076c(inputData);\n  return (int)(char)(shiftedValue + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "inputData",
                "param_2": "lookupTable",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result_1",
                "iVar6": "result_2",
                "uVar2": "dataLength",
                "uVar3": "i",
                "uVar4": "counter",
                "cVar5": "shiftedValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data_ptr,int input_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byte_var;\n  char char_var;\n  byte result_1;\n  byte result_2;\n  uint index;\n  uint next_index;\n  \n  result_1 = FUN_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,\n                       param_4);\n  result_2 = FUN_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = result_2 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (index = (uint)result_1; index < (uint)result_1 + (uint)result_2; index = index + 1 & 0xff) {\n    byte_var = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)byte_var + 9) = (char)((ushort)*(undefined2 *)(input_ptr + index * 2) >> 8)\n    ;\n    next_index = byte_var + 1 & 0xff;\n    char_var = (char)next_index;\n    *(char *)(data_ptr + 0x49) = char_var;\n    *(undefined *)(data_ptr + next_index + 9) = *(undefined *)(input_ptr + index * 2);\n    *(char *)(data_ptr + 0x49) = char_var + '\\x01';\n  }\n  char_var = *(char *)(data_ptr + 0x49);\n  FUN_0800076c(data_ptr);\n  return (int)(char)(char_var + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "bVar1": "byte_var",
                "cVar2": "char_var",
                "bVar3": "result_1",
                "bVar4": "result_2",
                "uVar5": "index",
                "uVar6": "next_index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_bit_in_memory_08000a00",
            "code": "\nundefined4 updateBitInMemory_08000a00(int memoryAddress,int memoryBlock,undefined4 value1,undefined4 value2)\n\n{\n  uint result;\n  uint bitPosition;\n  \n  result = FUN_08004640(*(undefined *)(memoryAddress + 0xb),*(undefined *)(memoryAddress + 0xc),value1,value2,\n                       value2);\n  bitPosition = (result << 0x14) >> 0x18;\n  if (*(char *)(memoryAddress + 0xd) == -1) {\n    *(ushort *)(memoryBlock + bitPosition * 2) =\n         (ushort)(1 << (result & 0xf)) | *(ushort *)(memoryBlock + bitPosition * 2);\n  }\n  else {\n    *(ushort *)(memoryBlock + bitPosition * 2) =\n         *(ushort *)(memoryBlock + bitPosition * 2) & ~(ushort)(1 << (result & 0xf));\n  }\n  *(undefined *)(memoryAddress + 0x49) = 6;\n  FUN_0800076c(memoryAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_bit_in_memory_08000a00",
                "param_1": "memoryAddress",
                "param_2": "memoryBlock",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "result",
                "uVar2": "bitPosition"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "process_data_08000a4e",
            "code": "\nundefined4 processData_08000a4e(int inputPointer,int outputPointer)\n\n{\n  byte result;\n  undefined2 convertedValue;\n  \n  result = FUN_08004640(*(undefined *)(inputPointer + 0xb),*(undefined *)(inputPointer + 0xc));\n  convertedValue = FUN_08004640(*(undefined *)(inputPointer + 0xd),*(undefined *)(inputPointer + 0xe));\n  *(undefined2 *)(outputPointer + (uint)result * 2) = convertedValue;\n  *(undefined *)(inputPointer + 0x49) = 6;\n  FUN_0800076c(inputPointer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "process_data_08000a4e",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "bVar1": "result",
                "uVar2": "convertedValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_memory_according_to_mask_08000a7a",
            "code": "\nundefined4 updateMemoryAccordingToMask_08000a7a(int memoryAddress,int memoryBuffer,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  int result2;\n  uint index;\n  uint bitShift;\n  uint bitIndex;\n  uint byteIndex;\n  uint maskIndex;\n  \n  result1 = FUN_08004640(*(undefined *)(memoryAddress + 0xb),*(undefined *)(memoryAddress + 0xc),param3,param4,\n                       param4);\n  result2 = FUN_08004640(*(undefined *)(memoryAddress + 0xd),*(undefined *)(memoryAddress + 0xe));\n  bitShift = 0;\n  maskIndex = 7;\n  for (index = 0; (int)index < result2; index = index + 1 & 0xffff) {\n    byteIndex = (index + result1) * 0x100000 >> 0x18;\n    bitIndex = index + result1 & 0xf;\n    if (((int)(uint)*(byte *)(memoryAddress + maskIndex + 9) >> bitShift & 1U) == 0) {\n      *(ushort *)(memoryBuffer + byteIndex * 2) = *(ushort *)(memoryBuffer + byteIndex * 2) & ~(ushort)(1 << bitIndex);\n    }\n    else {\n      *(ushort *)(memoryBuffer + byteIndex * 2) = (ushort)(1 << bitIndex) | *(ushort *)(memoryBuffer + byteIndex * 2);\n    }\n    bitShift = bitShift + 1 & 0xff;\n    if (7 < bitShift) {\n      maskIndex = maskIndex + 1 & 0xff;\n      bitShift = 0;\n    }\n  }\n  *(undefined *)(memoryAddress + 0x49) = 6;\n  FUN_0800076c(memoryAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_memory_according_to_mask_08000a7a",
                "param_1": "memoryAddress",
                "param_2": "memoryBuffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "index",
                "uVar4": "bitShift",
                "uVar5": "bitIndex",
                "uVar6": "byteIndex",
                "uVar7": "maskIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "decode_and_update_08000b04",
            "code": "\nint decode_and_update_08000b04(int input_data,int output_data)\n\n{\n  byte value1;\n  byte value2;\n  char char_value;\n  undefined2 result;\n  uint index;\n  \n  value1 = *(byte *)(input_data + 0xc);\n  value2 = *(byte *)(input_data + 0xe);\n  *(undefined *)(input_data + 0xd) = 0;\n  *(byte *)(input_data + 0xe) = value2;\n  *(undefined *)(input_data + 0x49) = 6;\n  for (index = 0; index < value2; index = index + 1 & 0xff) {\n    result = FUN_08004640(*(undefined *)(index * 2 + input_data + 0x10),\n                         *(undefined *)(input_data + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_data + (value1 + index) * 2) = result;\n  }\n  char_value = *(char *)(input_data + 0x49);\n  FUN_0800076c(input_data);\n  return (int)(char)(char_value + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "decode_and_update_08000b04",
                "param_1": "input_data",
                "param_2": "output_data",
                "bVar1": "value1",
                "bVar2": "value2",
                "cVar3": "char_value",
                "uVar4": "result",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "extract_data_08000b54",
            "code": "\nint extract_data_08000b54(int **data_array,int *value_array,undefined4 flag)\n\n{\n  byte result_byte;\n  int result;\n  uint result_unsigned;\n  int final_result;\n  \n  data_array[0x13] = value_array;\n  *(char *)(data_array + 0x18) = (char)flag;\n  if (*(byte *)((int)data_array + 5) < 4) {\n    result_byte = (**(code **)(**data_array + 8))();\n    result_unsigned = (uint)result_byte;\n  }\n  if (result_unsigned == 0) {\n    final_result = 0;\n  }\n  else if ((int)result_unsigned < 8) {\n    final_result = 0;\n  }\n  else {\n    final_result = FUN_080006b4(data_array);\n    *(char *)(data_array + 2) = (char)final_result;\n    if (*(char *)((int)data_array + 9) == *(char *)(data_array + 1)) {\n      result = FUN_080007f0(data_array);\n      if (result < 1) {\n        result = FUN_08004204();\n        data_array[0x17] = (int *)((uint)*(ushort *)((int)data_array + 0x56) + result);\n        *(undefined *)(data_array + 2) = 0;\n        switch(*(undefined *)((int)data_array + 10)) {\n        case 1:\n        case 2:\n          final_result = FUN_080008e2(data_array,value_array,flag);\n          break;\n        case 3:\n        case 4:\n          final_result = FUN_08000998(data_array,value_array,flag);\n          break;\n        case 5:\n          final_result = FUN_08000a00(data_array,value_array,flag);\n          break;\n        case 6:\n          final_result = FUN_08000a4e(data_array,value_array,flag);\n          break;\n        case 0xf:\n          final_result = FUN_08000a7a(data_array,value_array,flag);\n          break;\n        case 0x10:\n          final_result = FUN_08000b04(data_array,value_array,flag);\n        }\n      }\n      else {\n        if (result != 0xff) {\n          FUN_080008cc(data_array,result);\n          FUN_0800076c(data_array);\n        }\n        *(char *)(data_array + 2) = (char)result;\n        final_result = (int)(char)result;\n      }\n    }\n    else {\n      final_result = 0;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "extract_data_08000b54",
                "param_1": "data_array",
                "param_2": "value_array",
                "param_3": "flag",
                "bVar1": "result_byte",
                "iVar2": "result",
                "unaff_r5": "result_unsigned",
                "iVar3": "final_result"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a4e",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_080008cc",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08004204",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_application_08000c4c",
            "code": "\nvoid initializeApplication_08000c4c(void)\n\n{\n  FUN_080005e4(0);\n  FUN_08000600(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_application_08000c4c"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "initialize_data_08000c64",
            "code": "\nvoid initializeData_08000c64(void)\n\n{\n  undefined4 param;\n  \n  FUN_08000b54(&DAT_20000124,&DAT_20000004,0x10,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "initialize_data_08000c64",
                "in_r3": "param"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_hardware_08000c8c",
            "code": "\n\n\nvoid initializeHardware_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 flag;\n  undefined4 value1;\n  undefined4 count1;\n  undefined4 value2;\n  undefined4 count2;\n  undefined4 value3;\n  undefined4 count3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 count4;\n  undefined4 count5;\n  undefined4 value6;\n  undefined4 value7;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  value1 = 0x50000;\n  count1 = 2;\n  value2 = 0x400000;\n  count2 = 8;\n  value3 = 0x150;\n  count3 = 2;\n  value4 = 7;\n  FUN_0800201c(&flag);\n  FUN_08001f9c();\n  value5 = 0xf;\n  count4 = 2;\n  count5 = 0;\n  value6 = 0x1400;\n  value7 = 0x1000;\n  FUN_08002488(&value5,5);\n  uVar1 = FUN_080025e0();\n  FUN_08000ee0(uVar1 / 1000);\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_hardware_08000c8c",
                "local_54": "flag",
                "local_50": "value1",
                "local_3c": "count1",
                "local_38": "value2",
                "local_34": "count2",
                "local_30": "value3",
                "local_2c": "count3",
                "local_28": "value4",
                "local_24": "value5",
                "local_20": "count4",
                "local_1c": "count5",
                "local_18": "value6",
                "local_14": "value7"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_080025e0",
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_080035bc();\n  FUN_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  FUN_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_system_08000d8e",
            "code": "\nvoid initializeSystem_08000d8e(void)\n\n{\n  FUN_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "validate_and_set_param_08000d98",
            "code": "\nundefined4 validate_and_set_param_08000d98(uint input_param)\n\n{\n  int result;\n  \n  result = FUN_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < input_param) {\n    return 1;\n  }\n  FUN_08000e60(0xffffffff,input_param,0);\n  DAT_20000028 = input_param;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "validate_and_set_param_08000d98",
                "param_1": "input_param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_system_08000de4",
            "code": "\n\n\nundefined4 initializeSystem_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  FUN_08000e3c(3);\n  FUN_08000d98(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_system_08000de4"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000e3c",
                "FUN_08000d96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_sum_08000e18",
            "code": "\nvoid updateSum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_sum_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_return_value_08000e30",
            "code": "\nundefined4 getReturnValue_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_return_value_08000e30"
            },
            "calling": [
                "FUN_0800346c",
                "FUN_08003d18",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "set_config_bits_08000e3c",
            "code": "\n\n\nvoid setConfigBits_08000e3c(uint configValue)\n\n{\n  _DAT_e000ed0c = (configValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "set_config_bits_08000e3c",
                "param_1": "configValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_binary_08000e60",
            "code": "\n\n\nvoid updateBinary_08000e60(uint address,uint data_1,uint data_2)\n\n{\n  uint shiftedBits;\n  uint bitsDifference;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  bitsDifference = 7 - shiftedBits;\n  if (3 < bitsDifference) {\n    bitsDifference = 4;\n  }\n  if (shiftedBits + 4 < 7) {\n    shiftedBits = 0;\n  }\n  else {\n    shiftedBits = shiftedBits - 3;\n  }\n  shiftedBits = (data_1 & (1 << (bitsDifference & 0xff)) - 1U) << (shiftedBits & 0xff) |\n          (1 << (shiftedBits & 0xff)) - 1U & data_2;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftedBits << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftedBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_binary_08000e60",
                "param_1": "address",
                "param_2": "data_1",
                "param_3": "data_2",
                "uVar1": "shiftedBits",
                "uVar2": "bitsDifference"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_value_08000ec4",
            "code": "\nvoid setBitValue_08000ec4(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_value_08000ec4",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "check_and_set_param_08000ee0",
            "code": "\n\n\nundefined4 check_and_set_param_08000ee0(int input_param)\n\n{\n  if (input_param - 1U < 0x1000000) {\n    _DAT_e000e014 = input_param - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "check_and_set_param_08000ee0",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_08000f0c",
            "code": "\nvoid setBit_08000f0c(uint input)\n\n{\n  if (-1 < signedInput) {\n    *(int *)(((input >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_08000f0c",
                "param_1": "input",
                "(int)param_1": "signedInput"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "set_flag_08000f2c",
            "code": "\n\n\nvoid setFlag_08000f2c(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_setup_08000f4e",
            "code": "\nvoid executeSetup_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_setup_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_data_08000f56",
            "code": "\nundefined4 initializeData_08000f56(int dataPointer)\n\n{\n  if (dataPointer != 0) {\n    *(undefined *)(dataPointer + 4) = 2;\n    FUN_080033c8();\n    *(undefined4 *)(dataPointer + 0x10) = 0;\n    *(undefined *)(dataPointer + 4) = 0;\n    *(undefined *)(dataPointer + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_data_08000f56",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **arrayPointer,uint bitIndex)\n\n{\n  **arrayPointer = **arrayPointer & ~(1 << (bitIndex & 0xff));\n  *(undefined *)(arrayPointer + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "arrayPointer",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_parameter_08000f8c",
            "code": "\nundefined4 updateParameter_08000f8c(unsigned_integer **param)\n\n{\n  if (*(char *)((int)param + 0x35) != '\\x02') {\n    param[21] = (unsigned_integer *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)param + 0x35) = 5;\n  **param = **param & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_parameter_08000f8c",
                "param_1": "param",
                "param_1[0x15]": "param[21]",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *registerArray,uint *inputArray)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint loopCounter;\n  uint bitMask;\n  uint tempVar5;\n  int index1;\n  uint tempVar7;\n  int index2;\n  \n  for (loopCounter = 0; loopCounter < 0x10; loopCounter = loopCounter + 1) {\n    tempVar2 = 1 << (loopCounter & 0xff);\n    bitMask = tempVar2 & *inputArray;\n    tempVar1 = _DAT_40013c0c;\n    if (tempVar2 == bitMask) {\n      if ((inputArray[1] == 2) || (inputArray[1] == 0x12)) {\n        index1 = (loopCounter >> 3) + 8;\n        index2 = (loopCounter & 7) << 2;\n        registerArray[index1] = registerArray[index1] & ~(0xf << index2) | inputArray[4] << index2;\n      }\n      tempVar7 = loopCounter << 1;\n      tempVar1 = ~(3 << (tempVar7 & 0xff));\n      *registerArray = *registerArray & tempVar1 | (inputArray[1] & 3) << (tempVar7 & 0xff);\n      tempVar5 = inputArray[1];\n      if (((tempVar5 - 1 < 2) || (tempVar5 == 0x11)) || (tempVar5 == 0x12)) {\n        registerArray[2] = registerArray[2] & tempVar1 | inputArray[3] << (tempVar7 & 0xff);\n        registerArray[1] = registerArray[1] & ~tempVar2 | ((inputArray[1] << 0x1b) >> 0x1f) << (loopCounter & 0xff);\n      }\n      registerArray[3] = tempVar1 & registerArray[3] | inputArray[2] << (tempVar7 & 0xff);\n      tempVar1 = _DAT_40013c0c;\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index2 = (loopCounter & 3) << 2;\n        if (registerArray == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registerArray == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registerArray == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registerArray == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registerArray == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registerArray == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registerArray == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registerArray == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registerArray == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registerArray == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index2) | index1 << index2;\n        tempVar1 = ~bitMask;\n        tempVar2 = _DAT_40013c00 & tempVar1;\n        if ((inputArray[1] & 0x10000) != 0) {\n          tempVar2 = bitMask | _DAT_40013c00;\n        }\n        tempVar5 = tempVar1 & _DAT_40013c04;\n        if ((inputArray[1] & 0x20000) != 0) {\n          tempVar5 = bitMask | _DAT_40013c04;\n        }\n        tempVar7 = tempVar1 & _DAT_40013c08;\n        if ((inputArray[1] & 0x100000) != 0) {\n          tempVar7 = bitMask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = tempVar2;\n        _DAT_40013c04 = tempVar5;\n        _DAT_40013c08 = tempVar7;\n        tempVar1 = tempVar1 & _DAT_40013c0c;\n        if ((inputArray[1] & 0x200000) != 0) {\n          tempVar1 = bitMask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = tempVar1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registerArray",
                "param_2": "inputArray",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "loopCounter",
                "uVar4": "bitMask",
                "uVar5": "tempVar5",
                "iVar6": "index1",
                "uVar7": "tempVar7",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "store_parameter_08001198",
            "code": "\nvoid storeParameter_08001198(int baseAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(baseAddress + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x18) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "store_parameter_08001198",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_data_if_set_080011a4",
            "code": "\n\n\nvoid updateDataIfSet_080011a4(uint newData)\n\n{\n  if ((_DAT_40013c14 & newData) != 0) {\n    _DAT_40013c14 = newData;\n    FUN_080047d0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_data_if_set_080011a4",
                "param_1": "newData"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flag_080011c0",
            "code": "\nundefined4 updateFlag_080011c0(int *parameter)\n\n{\n  if (*(char *)((int)parameter + 0x3e) == '@') {\n    if (value_1 == 0) {\n      *(uint *)(*parameter + 0x10) = value_2 & 0xfe;\n    }\n    else {\n      *(uint *)(*parameter + 0x10) = value_2 & 0xffU | 1;\n    }\n  }\n  else if (value_3 == 0x4000) {\n    if (*(char *)((int)parameter + 0x3d) == '!') {\n      *(uint *)(*parameter + 0x10) = value_2 & 0xfe;\n    }\n    else {\n      *(uint *)(*parameter + 0x10) = value_2 & 0xffU | 1;\n    }\n  }\n  else if (value_1 == 0) {\n    *(uint *)(*parameter + 0x10) = (uint)(value_2 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (value_1 == 1) {\n    *(uint *)(*parameter + 0x10) = (uint)(value_2 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flag_080011c0",
                "param_1": "parameter",
                "param_1[0x14]": "value_1",
                "param_1[0x11]": "value_2",
                "param_1[4]": "value_3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "update_value_in_pointer_0800124a",
            "code": "\nundefined4 updateValueInPointer_0800124a(int *pointerToValue)\n\n{\n  *(uint *)(*pointerToValue + 0x10) = pointerToValue[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "update_value_in_pointer_0800124a",
                "param_1": "pointerToValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "update_flags_08001256",
            "code": "\nundefined4 updateFlags_08001256(uint **parameters)\n\n{\n  uint *pointer;\n  \n  pointer = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((array != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((array == (uint *)0x0) && (array2 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      array = (uint *)((int)array + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (pointer == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          pointer = *parameters;\n          if ((pointer[1] & 0x800) == 0) {\n            *pointer = *pointer | 0x200;\n          }\n          else {\n            *pointer = *pointer & 0xfffffbff;\n          }\n        }\n        else if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        pointer = *parameters;\n        if ((pointer[1] & 0x800) != 0) {\n          pointer[1] = pointer[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        pointer = *parameters;\n        if ((pointer[1] & 0x800) != 0) {\n          pointer[1] = pointer[1] | 0x1000;\n        }\n      }\n      array = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "update_flags_08001256",
                "param_1": "parameters",
                "puVar1": "pointer",
                "param_1[0x14]": "array",
                "param_1[4]": "array2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 updateData_08001420(int *data)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)byteArrayPtr;\n    byteArrayPtr = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "param_1[9]": "byteArrayPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_array_and_decrement_08001440",
            "code": "\nundefined4 updateArrayAndDecrement_08001440(int *array)\n\n{\n  undefined *elementPtr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    elementPtr = (undefined *)arrayElement;\n    arrayElement = (int)(elementPtr + 1);\n    *elementPtr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_array_and_decrement_08001440",
                "param_1": "array",
                "puVar1": "elementPtr",
                "param_1[9]": "arrayElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "process_params_08001460",
            "code": "\nundefined4 processParams_08001460(uint **inputParams,uint *param1,int param2,uint *param3)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  \n  if (*(char *)((int)inputParams + 0x3d) == '(') {\n    if (param1 == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (param2 == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(inputParams + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputParams + 0xf) = 1;\n      pointerVar = *inputParams;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **inputParams = **inputParams & 0xfffff7ff;\n      *(undefined *)((int)inputParams + 0x3d) = 0x29;\n      *(undefined *)((int)inputParams + 0x3e) = 0x20;\n      returnValue = 0;\n      inputParams[0x10] = (uint *)0x0;\n      inputParams[9] = param1;\n      *(short *)((int)inputParams + 0x2a) = (short)param2;\n      inputParams[0xb] = param3;\n      *(undefined2 *)(inputParams + 10) = *(undefined2 *)((int)inputParams + 0x2a);\n      *(undefined *)(inputParams + 0xf) = 0;\n      (*inputParams)[1] = (*inputParams)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001460": "process_params_08001460",
                "param_1": "inputParams",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "returnValue",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "validate_input_080014ec",
            "code": "\nundefined4 validate_input_080014ec(uint **input_data,uint *optional_param,int param_count,uint *data_array)\n\n{\n  undefined4 result;\n  uint *ptr_data;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (optional_param == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr_data = *input_data;\n      if ((*ptr_data & 1) == 0) {\n        *ptr_data = *ptr_data | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x2a;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      input_data[0x10] = (uint *)0x0;\n      input_data[9] = optional_param;\n      *(short *)((int)input_data + 0x2a) = (short)param_count;\n      input_data[0xb] = data_array;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "validate_input_080014ec",
                "param_1": "input_data",
                "param_2": "optional_param",
                "param_3": "param_count",
                "param_4": "data_array",
                "uVar1": "result",
                "puVar2": "ptr_data"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initializeData_08001578(uint **dataPointer)\n\n{\n  uint *firstValue;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  firstValue = *dataPointer;\n  if ((*firstValue & 1) == 0) {\n    *firstValue = *firstValue | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "dataPointer",
                "puVar1": "firstValue"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "handle_character_080015bc",
            "code": "\nundefined4 handleCharacter_080015bc(int *characterData)\n\n{\n  char currentCharacter;\n  byte *bytePointer;\n  \n  currentCharacter = *(char *)((int)characterData + 0x3d);\n  if (*(short *)((int)characterData + 0x2a) != 0) {\n    bytePointer = (byte *)characterData[9];\n    characterData[9] = (int)(bytePointer + 1);\n    *(unsignedInt *)(*characterData + 0x10) = (unsignedInt)*bytePointer;\n    *(short *)((int)characterData + 0x2a) = *(short *)((int)characterData + 0x2a) + -1;\n    if ((*(short *)((int)characterData + 0x2a) == 0) && (currentCharacter == ')')) {\n      *(unsignedInt *)(*characterData + 4) = *(unsignedInt *)(*characterData + 4) & 0xfffffbff;\n      characterData[0xc] = 0x21;\n      *(undefined *)((int)characterData + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "handle_character_080015bc",
                "param_1": "characterData",
                "cVar1": "currentCharacter",
                "pbVar2": "bytePointer",
                "uint": "unsignedInt"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_data_0800160e",
            "code": "\nundefined4 processData_0800160e(int *data)\n\n{\n  char character;\n  undefined *pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    pointer = (undefined *)data[9];\n    data[9] = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_data_0800165a",
            "code": "\nundefined4 processData_0800165a(int *dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedValue;\n  uint flag;\n  \n  flag = *(uint *)(*dataPointer + 0x18);\n  if ((flag & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(dataPointer + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(dataPointer + 6);\n  }\n  FUN_08003880(dataPointer,(*(uint *)(*dataPointer + 0x18) & 4) == 0,selectedValue,flag,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedValue",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "update_status_08001684",
            "code": "\nundefined4 updateStatus_08001684(uint **ptrs)\n\n{\n  if (((ptrs[0xb] == (uint *)0x4) || (ptrs[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)ptrs + 0x3d) == '(')) {\n    ptrs[0xb] = (uint *)0xffff0000;\n    (*ptrs)[1] = (*ptrs)[1] & 0xfffff8ff;\n    (*ptrs)[5] = 0xfffffbff;\n    **ptrs = **ptrs & 0xfffffbff;\n    ptrs[0xc] = (uint *)0x0;\n    *(undefined *)((int)ptrs + 0x3d) = 0x20;\n    *(undefined *)((int)ptrs + 0x3e) = 0;\n    FUN_080038d0();\n  }\n  else if (*(char *)((int)ptrs + 0x3d) == '!') {\n    ptrs[0xb] = (uint *)0xffff0000;\n    ptrs[0xc] = (uint *)0x21;\n    *(undefined *)((int)ptrs + 0x3d) = 0x20;\n    *(undefined *)((int)ptrs + 0x3e) = 0;\n    (*ptrs)[1] = (*ptrs)[1] & 0xfffff8ff;\n    (*ptrs)[5] = 0xfffffbff;\n    **ptrs = **ptrs & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*ptrs)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "update_status_08001684",
                "param_1": "ptrs"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_data_0800171a",
            "code": "\nundefined4 process_data_0800171a(uint **data_ptr)\n\n{\n  char char_var;\n  uint *ptr_var;\n  \n  char_var = *(char *)((int)data_ptr + 0x3d);\n  ptr_var = data_ptr[0xb];\n  if ((*(short *)(data_ptr + 10) == 0) && (char_var == '!')) {\n    if ((ptr_var == (uint *)0x4) || ((ptr_var == (uint *)0x8 || (ptr_var == (uint *)0xffff0000)))) {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffff8ff;\n      **data_ptr = **data_ptr | 0x200;\n      data_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      if (*(char *)((int)data_ptr + 0x3e) == '@') {\n        *(undefined *)((int)data_ptr + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)data_ptr + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffff8ff;\n      data_ptr[0xc] = (uint *)0x11;\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char_var == '!') || ((*(char *)((int)data_ptr + 0x3e) == '@' && (char_var == '\\\"')))) {\n    if (*(short *)((int)data_ptr + 0x2a) == 0) {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      if (data_ptr[0x14] == (uint *)0x0) {\n        if (data_ptr[0x13] == (uint *)0x1) {\n          (*data_ptr)[4] = (uint)data_ptr[0x12] & 0xff;\n          data_ptr[0x14] = (uint *)((int)data_ptr[0x14] + 2);\n        }\n        else {\n          (*data_ptr)[4] = (uint)((int)data_ptr[0x12] << 0x10) >> 0x18;\n          data_ptr[0x14] = (uint *)((int)data_ptr[0x14] + 1);\n        }\n      }\n      else if (data_ptr[0x14] == (uint *)0x1) {\n        (*data_ptr)[4] = (uint)data_ptr[0x12] & 0xff;\n        data_ptr[0x14] = (uint *)((int)data_ptr[0x14] + 1);\n      }\n      else if (data_ptr[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data_ptr + 0x3d) == '\\\"') {\n          **data_ptr = **data_ptr | 0x100;\n        }\n        else if (*(char *)((int)data_ptr + 0x3d) == '!') {\n          ptr_var = data_ptr[9];\n          data_ptr[9] = (uint *)((int)ptr_var + 1);\n          (*data_ptr)[4] = (uint)*(byte *)ptr_var;\n          *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr_var = data_ptr[9];\n      data_ptr[9] = (uint *)((int)ptr_var + 1);\n      (*data_ptr)[4] = (uint)*(byte *)ptr_var;\n      *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "param_1": "data_ptr",
                "cVar1": "char_var",
                "puVar2": "ptr_var"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_input_08001864",
            "code": "\nundefined4 processInput_08001864(uint **input)\n\n{\n  uint *tempPtr;\n  \n  tempPtr = input[0xb];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) || (tempPtr == (uint *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        flagPtr = (uint *)0x0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(undefined *)((int)input + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)input + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        flagPtr = (uint *)0x11;\n        *(undefined *)((int)input + 0x3e) = 0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      tempPtr = input[9];\n      input[9] = (uint *)((int)tempPtr + 1);\n      (*input)[4] = (uint)*(byte *)tempPtr;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "tempPtr",
                "param_1[0xc]": "flagPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "decode_string_08001904",
            "code": "\nundefined4 decode_string_08001904(uint **string_ptr)\n\n{\n  uint *dest_ptr;\n  \n  if (*(char *)((int)string_ptr + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)string_ptr + 0x2a) < 4) {\n      if (*(ushort *)((int)string_ptr + 0x2a) < 2) {\n        **string_ptr = **string_ptr & 0xfffffbff;\n        (*string_ptr)[1] = (*string_ptr)[1] & 0xfffff8ff;\n        dest_ptr = dest_array_ptr;\n        dest_array_ptr = (uint *)((int)dest_ptr + 1);\n        *(char *)dest_ptr = (char)(*string_ptr)[4];\n        *(short *)((int)string_ptr + 0x2a) = *(short *)((int)string_ptr + 0x2a) + -1;\n        *(undefined *)((int)string_ptr + 0x3d) = 0x20;\n        string_ptr[0xc] = (uint *)0x0;\n        if (*(char *)((int)string_ptr + 0x3e) == '@') {\n          *(undefined *)((int)string_ptr + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)string_ptr + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      dest_ptr = dest_array_ptr;\n      dest_array_ptr = (uint *)((int)dest_ptr + 1);\n      *(char *)dest_ptr = (char)(*string_ptr)[4];\n      *(short *)((int)string_ptr + 0x2a) = *(short *)((int)string_ptr + 0x2a) + -1;\n      if (*(short *)((int)string_ptr + 0x2a) == 3) {\n        (*string_ptr)[1] = (*string_ptr)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "decode_string_08001904",
                "param_1": "string_ptr",
                "puVar1": "dest_ptr",
                "param_1[9]": "dest_array_ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_data_080019a0",
            "code": "\nundefined4 processData_080019a0(uint **dataPtr)\n\n{\n  uint *tempPtr;\n  \n  if (*(short *)((int)dataPtr + 0x2a) == 4) {\n    (*dataPtr)[1] = (*dataPtr)[1] & 0xfffffbff;\n    tempPtr = dataPtr[9];\n    dataPtr[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*dataPtr)[4];\n    *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n  }\n  else if (*(short *)((int)dataPtr + 0x2a) == 3) {\n    (*dataPtr)[1] = (*dataPtr)[1] & 0xfffffbff;\n    **dataPtr = **dataPtr & 0xfffffbff;\n    tempPtr = dataPtr[9];\n    dataPtr[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*dataPtr)[4];\n    *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n  }\n  else if (*(short *)((int)dataPtr + 0x2a) == 2) {\n    if ((int)dataPtr[0xb] - 1U < 2) {\n      **dataPtr = **dataPtr & 0xfffffbff;\n      **dataPtr = **dataPtr | 0x100;\n    }\n    else {\n      **dataPtr = **dataPtr | 0x200;\n    }\n    tempPtr = dataPtr[9];\n    dataPtr[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*dataPtr)[4];\n    *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n    tempPtr = dataPtr[9];\n    dataPtr[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*dataPtr)[4];\n    *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n    (*dataPtr)[1] = (*dataPtr)[1] & 0xfffffcff;\n    *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n    dataPtr[12] = (uint *)0x0;\n    if (*(char *)((int)dataPtr + 0x3e) == '@') {\n      *(undefined *)((int)dataPtr + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)dataPtr + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    tempPtr = dataPtr[9];\n    dataPtr[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*dataPtr)[4];\n    *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "dataPtr",
                "puVar1": "tempPtr",
                "param_1[9]": "dataPtr[9]",
                "param_1[0xc]": "dataPtr[12]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_permissions_08001ab0",
            "code": "\nvoid processPermissions_08001ab0(uint **permissions)\n\n{\n  int result;\n  uint *tempVar1;\n  uint *tempVar2;\n  \n  if (*(byte *)((int)permissions + 0x3d) - 0x29 < 2) {\n    permissions[0xc] = (uint *)0x0;\n    *(undefined *)((int)permissions + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)permissions + 0x3d) != '`') && (((*permissions)[1] & 0x800) == 0)) {\n      *(undefined *)((int)permissions + 0x3d) = 0x20;\n    }\n    permissions[0xc] = (uint *)0x0;\n    *(undefined *)((int)permissions + 0x3e) = 0;\n  }\n  **permissions = **permissions & 0xfffff7ff;\n  tempVar2 = *permissions;\n  if ((tempVar2[1] & 0x800) == 0) {\n    if (*(char *)((int)permissions + 0x3d) == '`') {\n      *(undefined *)((int)permissions + 0x3d) = 0x20;\n      permissions[0x10] = (uint *)0x0;\n      if ((tempVar2[5] & 0x40) != 0) {\n        tempVar1 = permissions[9];\n        permissions[9] = (uint *)((int)tempVar1 + 1);\n        *(char *)tempVar1 = (char)tempVar2[4];\n      }\n      **permissions = **permissions & 0xfffffffe;\n      FUNC_08001aac(permissions);\n    }\n    else {\n      if ((tempVar2[5] & 0x40) != 0) {\n        tempVar1 = permissions[9];\n        permissions[9] = (uint *)((int)tempVar1 + 1);\n        *(char *)tempVar1 = (char)tempVar2[4];\n      }\n      FUN_08003900(permissions);\n    }\n  }\n  else {\n    tempVar2[1] = tempVar2[1] & 0xfffff7ff;\n    if (*(char *)((int)permissions[0xd] + 0x35) == '\\x01') {\n      permissions[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(permissions[0xe]);\n      if (result != 0) {\n        if (((*permissions)[5] & 0x40) != 0) {\n          tempVar2 = permissions[9];\n          permissions[9] = (uint *)((int)tempVar2 + 1);\n          *(char *)tempVar2 = (char)(*permissions)[4];\n        }\n        **permissions = **permissions & 0xfffffffe;\n        *(undefined *)((int)permissions + 0x3d) = 0x20;\n        (*(code *)permissions[0xe][0x14])();\n      }\n    }\n    else {\n      permissions[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(permissions[0xd]);\n      if (result != 0) {\n        **permissions = **permissions & 0xfffffffe;\n        *(undefined *)((int)permissions + 0x3d) = 0x20;\n        (*(code *)permissions[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)permissions + 0x3d) == '(') && (((uint)permissions[0x10] & 4) != 0)) {\n    permissions[0xb] = (uint *)0xffff0000;\n    permissions[0xc] = (uint *)0x0;\n    *(undefined *)((int)permissions + 0x3d) = 0x20;\n    *(undefined *)((int)permissions + 0x3e) = 0;\n    FUN_080038d0(permissions);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_permissions_08001ab0",
                "param_1": "permissions",
                "iVar1": "result",
                "puVar2": "tempVar1",
                "puVar3": "tempVar2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001aac",
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_08001bfc",
            "code": "\nundefined4 processParam_08001bfc(uint **param)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  pointer1 = *param;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = param[9];\n      param[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      pointer1 = param[9];\n      param[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUN_080038d0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    FUN_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_08001bfc",
                "param_1": "param",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "execute_action_based_on_params_08001d00",
            "code": "\nvoid executeActionBasedOnParams_08001d00(int *actionParams)\n\n{\n  int paramValue;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  paramValue = *actionParams;\n  flag3 = *(uint *)(paramValue + 0x18);\n  flag1 = *(uint *)(paramValue + 0x14);\n  flag2 = *(uint *)(paramValue + 4);\n  if ((*(char *)((int)actionParams + 0x3e) == '\\x10') || (*(char *)((int)actionParams + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          FUN_08001256(actionParams);\n        }\n      }\n      else {\n        FUN_0800124a(actionParams);\n      }\n    }\n    else {\n      FUN_080011c0(actionParams);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_08001904(actionParams);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_080019a0(actionParams);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_0800171a(actionParams);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08001864(actionParams);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      FUN_0800165a();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      FUN_08001bfc(actionParams);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_0800160e(actionParams);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08001440(actionParams);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_080015bc(actionParams);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08001420(actionParams);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "execute_action_based_on_params_08001d00",
                "param_1": "actionParams",
                "iVar1": "paramValue",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_0800160e",
                "FUN_08001256",
                "FUN_080015bc",
                "FUN_08001440",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800165a",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_0800171a",
                "FUN_080019a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_flags_08001e68",
            "code": "\nvoid updateFlags_08001e68(uint **params)\n\n{\n  char ch;\n  uint *ptr;\n  uint flags1;\n  uint flags2;\n  \n  ptr = *params;\n  flags1 = ptr[5];\n  flags2 = ptr[1];\n  if (((flags1 & 0x10100) != 0) && ((flags2 & 0x100) != 0)) {\n    params[0x10] = (uint *)((uint)params[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((flags1 & 0x10200) != 0) && ((flags2 & 0x100) != 0)) {\n    params[0x10] = (uint *)((uint)params[0x10] | 2);\n    (*params)[5] = 0xfffffdff;\n  }\n  if (((flags1 & 0x10400) != 0) && ((flags2 & 0x100) != 0)) {\n    ch = *(char *)((int)params + 0x3d);\n    if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) &&\n       (((ch == '!' || (ch == ')')) || ((ch == '(' && (params[0xc] == (uint *)0x21)))))) {\n      FUN_08001684(params);\n    }\n    else {\n      params[0x10] = (uint *)((uint)params[0x10] | 4);\n      if (*(char *)((int)params + 0x3e) == '\\x10') {\n        **params = **params | 0x200;\n      }\n      (*params)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags1 & 0x10800) != 0) && ((flags2 & 0x100) != 0)) {\n    params[0x10] = (uint *)((uint)params[0x10] | 8);\n    (*params)[5] = 0xfffff7ff;\n  }\n  if (params[0x10] != (uint *)0x0) {\n    FUN_08001ab0(params);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_flags_08001e68",
                "param_1": "params",
                "cVar1": "ch",
                "puVar2": "ptr",
                "uVar3": "flags1",
                "uVar4": "flags2"
            },
            "calling": [],
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_and_process_data_08001f9c",
            "code": "\n\n\nundefined4 checkAndProcessData_08001f9c(void)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initialValue = FUN_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initialValue = FUN_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        currentValue = FUN_08000e30();\n      } while ((uint)(currentValue - initialValue) < 0x3e9);\n      return 3;\n    }\n    currentValue = FUN_08000e30();\n  } while ((uint)(currentValue - initialValue) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_and_process_data_08001f9c",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_control_timing_0800201c",
            "code": "\n\n\nundefined4 checkAndControlTiming_0800201c(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isBitSet;\n  \n  if (flags == (uint *)0x0) {\n    return 1;\n  }\n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        startTime = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = FUN_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = FUN_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | flags[4] << 3;\n    }\n    else if (flags[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | flags[4] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isBitSet = (_DAT_40023840 & 0x10000000) == 0;\n    if (isBitSet) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = FUN_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (flags[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (flags[2] == 0) {\n      startTime = FUN_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = FUN_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = FUN_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = FUN_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isBitSet) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (flags[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             flags[7] | flags[8] | flags[9] << 6 | ((flags[10] >> 1) - 1) * 0x10000 |\n             flags[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = FUN_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = FUN_08000e30();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = FUN_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = FUN_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_control_timing_0800201c",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isBitSet"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_frequency_080023b4",
            "code": "\n\n\nuint calculateFrequency_080023b4(void)\n\n{\n  undefined4 additionalBits;\n  uint calculatedFrequency;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    calculatedFrequency = (_DAT_40023804 << 0x11) >> 0x17;\n    calculatedFrequency = FUN_080002d0(calculatedFrequency * 16000000,\n                         (((uint)(calculatedFrequency * 0x20 < calculatedFrequency) * -0x3f -\n                          (uint)(calculatedFrequency * 0x7c0 < calculatedFrequency * 0x1f)) * 8 +\n                         (uint)CARRY4(calculatedFrequency * 0x3d08,calculatedFrequency)) * 0x400 | calculatedFrequency * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,additionalBits);\n  }\n  else {\n    calculatedFrequency = (_DAT_40023804 << 0x11) >> 0x17;\n    calculatedFrequency = FUN_080002d0(calculatedFrequency * 8000000,\n                         (((uint)(calculatedFrequency * 0x20 < calculatedFrequency) * -0x3f -\n                          (uint)(calculatedFrequency * 0x7c0 < calculatedFrequency * 0x1f)) * 8 +\n                         (uint)CARRY4(calculatedFrequency * 0x3d08,calculatedFrequency)) * 0x200,_DAT_40023804 & 0x3f,0,additionalBits);\n  }\n  return calculatedFrequency / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "additionalBits",
                "uVar1": "calculatedFrequency"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "configure_device_08002488",
            "code": "\n\n\nundefined4 configureDevice_08002488(uint *deviceConfig,uint numConfigOptions)\n\n{\n  int startTime;\n  int endTime;\n  uint configValue;\n  \n  if (deviceConfig == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < numConfigOptions) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numConfigOptions);\n    if (numConfigOptions != (numConfigOptions & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*deviceConfig & 2) != 0) {\n    if ((*deviceConfig & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*deviceConfig & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | deviceConfig[2];\n  }\n  if ((*deviceConfig & 1) != 0) {\n    configValue = deviceConfig[1];\n    if (configValue == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (configValue - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = configValue | _DAT_40023808 & 0xfffffffc;\n    startTime = FUN_08000e30();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == deviceConfig[1] * 4) break;\n      endTime = FUN_08000e30();\n      if (5000 < (uint)(endTime - startTime)) {\n        return 3;\n      }\n    }\n  }\n  if (numConfigOptions < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numConfigOptions);\n    if (numConfigOptions != (numConfigOptions & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*deviceConfig & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | deviceConfig[3];\n  }\n  if ((*deviceConfig & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | deviceConfig[4] << 3;\n  }\n  configValue = FUN_080023b4();\n  DAT_2000002c = configValue >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "configure_device_08002488",
                "param_1": "deviceConfig",
                "param_2": "numConfigOptions",
                "iVar1": "startTime",
                "iVar2": "endTime",
                "uVar3": "configValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_080023b4",
                "FUN_08000e30",
                "FUN_08000d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_080025e0",
            "code": "\nundefined4 get_data_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_080025e0"
            },
            "calling": [
                "FUN_080025ec",
                "FUN_0800260c",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "calculate_shifted_value_080025ec",
            "code": "\n\n\nuint calculateShiftedValue_080025ec(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "calculate_shifted_value_0800260c",
            "code": "\n\n\nuint calculateShiftedValue_0800260c(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "calculate_shifted_value_0800260c",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "check_and_modify_flags_0800262c",
            "code": "\n\n\nvoid checkAndModifyFlags_0800262c(int *parameters)\n\n{\n  if (((*(unsigned_integer *)(*parameters + 0xc) & 0x100) != 0) && ((*(unsigned_integer *)(*parameters + 8) & 0x1000) != 0)) {\n    FUN_08003594();\n    *(unsigned_integer *)(*parameters + 0xc) = *(unsigned_integer *)(*parameters + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(unsigned_integer *)(*parameters + 0xc) & 0x200) != 0) && ((*(unsigned_integer *)(*parameters + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(parameters);\n    *(unsigned_integer *)(*parameters + 0xc) = *(unsigned_integer *)(*parameters + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(unknown_value *)((int)parameters + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "check_and_modify_flags_0800262c",
                "param_1": "parameters",
                "uint": "unsigned_integer",
                "undefined": "unknown_value"
            },
            "calling": [],
            "called": [
                "FUN_0800268c",
                "FUN_08003594"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_data_0800268e",
            "code": "\nvoid updateData_0800268e(uint **dataPointer)\n\n{\n  uint *tempPtr;\n  \n  *(undefined *)((int)dataPointer + 0x39) = 2;\n  tempPtr = *dataPointer;\n  if ((value & 0x1111) == 0) {\n    if ((value & 0x444) == 0) {\n      *tempPtr = *tempPtr & 0xfffffffe;\n    }\n  }\n  FUN_0800340c(dataPointer);\n  *(undefined *)((int)dataPointer + 0x39) = 0;\n  *(undefined *)(dataPointer + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_data_0800268e",
                "param_1": "dataPointer",
                "puVar1": "tempPtr",
                "puVar1[8]": "value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_conditions_080026ce",
            "code": "\nvoid process_conditions_080026ce(int *input_array)\n\n{\n  int value;\n  \n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(input_array + 6) = 1;\n    if ((*(uint *)(*input_array + 0x18) & 3) == 0) {\n      FUN_08003754();\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(input_array + 6) = 2;\n    if ((*(uint *)(*input_array + 0x18) & 0x300) == 0) {\n      FUN_08003754(input_array);\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8(input_array);\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(input_array + 6) = 4;\n    if ((*(uint *)(*input_array + 0x1c) & 3) == 0) {\n      FUN_08003754(input_array);\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8(input_array);\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(input_array + 6) = 8;\n    if ((*(uint *)(*input_array + 0x1c) & 0x300) == 0) {\n      FUN_08003754(input_array);\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8(input_array);\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    FUN_0800376e(input_array);\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(input_array);\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(input_array);\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(input_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_conditions_080026ce",
                "param_1": "input_array",
                "iVar1": "value"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800293c",
                "FUN_080026c8",
                "FUN_08003754",
                "FUN_080026ca",
                "FUN_0800293e",
                "FUN_0800376e",
                "FUN_080026cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_in_value_08002848",
            "code": "\nvoid updateBitInValue_08002848(int value,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(value + 0x20) = *(uint *)(value + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(value + 0x20) = *(uint *)(value + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_in_value_08002848",
                "param_1": "value",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_memory_and_flags_08002864",
            "code": "\nundefined4 updateMemoryAndFlags_08002864(uint **memoryPointer,undefined4 value)\n\n{\n  bool isSpecialAddress;\n  uint *pointerValue;\n  \n  FUN_08002848(*memoryPointer,value,0);\n  pointerValue = *memoryPointer;\n  if (pointerValue == (uint *)0x40010000) {\n    isSpecialAddress = true;\n  }\n  else if (pointerValue == (uint *)0x40010400) {\n    isSpecialAddress = true;\n  }\n  else {\n    isSpecialAddress = false;\n  }\n  if (((isSpecialAddress) && ((pointerValue[8] & 0x1111) == 0)) && ((pointerValue[8] & 0x444) == 0)) {\n    pointerValue[0x11] = pointerValue[0x11] & 0xffff7fff;\n  }\n  pointerValue = *memoryPointer;\n  if (((pointerValue[8] & 0x1111) == 0) && ((pointerValue[8] & 0x444) == 0)) {\n    *pointerValue = *pointerValue & 0xfffffffe;\n  }\n  *(undefined *)((int)memoryPointer + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_memory_and_flags_08002864",
                "param_1": "memoryPointer",
                "param_2": "value",
                "bVar1": "isSpecialAddress",
                "puVar2": "pointerValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_param_value_080028d4",
            "code": "\nvoid updateParamValue_080028d4(int baseAddr,uint bitOffset,int newValue)\n\n{\n  *(uint *)(baseAddr + 0x20) = *(uint *)(baseAddr + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddr + 0x20) = *(uint *)(baseAddr + 0x20) | newValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_param_value_080028d4",
                "param_1": "baseAddr",
                "param_2": "bitOffset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "sanitize_user_data_080028f0",
            "code": "\nundefined4 sanitizeUserData_080028f0(uint **userData,undefined4 flag)\n\n{\n  uint *tempPtr;\n  \n  FUN_080028d4(*userData,flag,0);\n  tempPtr = *userData;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    tempPtr[0x11] = tempPtr[0x11] & 0xffff7fff;\n  }\n  tempPtr = *userData;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    *tempPtr = *tempPtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "sanitize_user_data_080028f0",
                "param_1": "userData",
                "param_2": "flag",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "update_memory_08002940",
            "code": "\nvoid updateMemory_08002940(int *memoryPtr)\n\n{\n  *(uint *)(*memoryPtr + 0xc) = *(uint *)(*memoryPtr + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryPtr + 0x14) = *(uint *)(*memoryPtr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryPtr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "update_memory_08002940",
                "param_1": "memoryPtr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 process_data_0800295c(int *data)\n\n{\n  short decremented_value;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)data[8];\n    data[8] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  decremented_value = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = decremented_value;\n  if (decremented_value == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "decremented_value",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_new_value_080029c8",
            "code": "\nvoid calculateNewValue_080029c8(int *input)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int result10;\n  \n  *(uint *)(*input + 0x10) = *(uint *)(*input + 0x10) & 0xffffcfff | input[3];\n  *(uint *)(*input + 0xc) =\n       *(uint *)(*input + 0xc) & 0xffff69f3 | input[2] | input[4] | input[5] | input[7];\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffcff | input[6];\n  if (input[7] == 0x8000) {\n    result10 = *input;\n    if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n      result1 = FUN_080025ec();\n      result6 = input[1];\n      result2 = FUN_080025ec();\n      result7 = input[1];\n      result3 = FUN_080025ec();\n      result8 = input[1];\n      result4 = FUN_080025ec();\n      result9 = input[1];\n      result5 = FUN_080025ec();\n      *(uint *)(result10 + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                          (int)(((ulonglong)(uint)(result5 * 0x19) /\n                                (ulonglong)(uint)(input[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n             (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n      return;\n    }\n    result1 = FUN_0800260c();\n    result6 = input[1];\n    result2 = FUN_0800260c();\n    result7 = input[1];\n    result3 = FUN_0800260c();\n    result8 = input[1];\n    result4 = FUN_0800260c();\n    result9 = input[1];\n    result5 = FUN_0800260c();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n    return;\n  }\n  result10 = *input;\n  if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n    result1 = FUN_080025ec();\n    result6 = input[1];\n    result2 = FUN_080025ec();\n    result7 = input[1];\n    result3 = FUN_080025ec();\n    result8 = input[1];\n    result4 = FUN_080025ec();\n    result9 = input[1];\n    result5 = FUN_080025ec();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  result1 = FUN_0800260c();\n  result6 = input[1];\n  result2 = FUN_0800260c();\n  result7 = input[1];\n  result3 = FUN_0800260c();\n  result8 = input[1];\n  result4 = FUN_0800260c();\n  result9 = input[1];\n  result5 = FUN_0800260c();\n  *(uint *)(result10 + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                      (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n         (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_new_value_080029c8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "iVar10": "result10"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_parameter_alignment_08002d0c",
            "code": "\nundefined4 check_parameter_alignment_08002d0c(uint **array_of_pointers,uint flag,uint expected_result,int comparison_value,uint threshold)\n\n{\n  int comparison_result;\n  \n  do {\n    if (((flag & ~**array_of_pointers) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (comparison_result = FUN_08000e30(), (uint)(comparison_result - comparison_value) <= threshold))));\n  (*array_of_pointers)[3] = (*array_of_pointers)[3] & 0xfffffe5f;\n  (*array_of_pointers)[5] = (*array_of_pointers)[5] & 0xfffffffe;\n  *(undefined *)((int)array_of_pointers + 0x39) = 0x20;\n  *(undefined *)((int)array_of_pointers + 0x3a) = 0x20;\n  *(undefined *)(array_of_pointers + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_parameter_alignment_08002d0c",
                "param_1": "array_of_pointers",
                "param_2": "flag",
                "param_3": "expected_result",
                "param_4": "comparison_value",
                "param_5": "threshold",
                "iVar1": "comparison_result"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_data_structure_08002d72",
            "code": "\nundefined4 initializeDataStructure_08002d72(int *dataStructure)\n\n{\n  if (dataStructure != (int *)0x0) {\n    if (*(char *)((int)dataStructure + 0x39) == '\\0') {\n      *(undefined *)(dataStructure + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)dataStructure + 0x39) = 0x24;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) & 0xffffdfff;\n    FUN_080029c8(dataStructure);\n    *(uint *)(*dataStructure + 0x10) = *(uint *)(*dataStructure + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructure + 0x14) = *(uint *)(*dataStructure + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)dataStructure + 0x39) = 0x20;\n    *(undefined *)((int)dataStructure + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_data_structure_08002d72",
                "param_1": "dataStructure",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "decode_and_process_data_08002dd0",
            "code": "\nundefined4 decode_and_process_data_08002dd0(int *data_ptr,ushort *input_ptr,int input_length,undefined4 unknown_param)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (input_ptr == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (input_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      return_value = FUN_08000e30();\n      *(short *)(data_ptr + 9) = (short)input_length;\n      *(short *)((int)data_ptr + 0x26) = (short)input_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = FUN_08002d0c(data_ptr,0x80,0,return_value,unknown_param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *input_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            input_ptr = input_ptr + 1;\n          }\n          else {\n            input_ptr = (ushort *)((int)input_ptr + 1);\n          }\n        }\n        else {\n          result = FUN_08002d0c(data_ptr,0x80,0,return_value,unknown_param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)input_ptr;\n          input_ptr = (ushort *)((int)input_ptr + 1);\n        }\n      }\n      result = FUN_08002d0c(data_ptr,0x40,0,return_value,unknown_param);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "decode_and_process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "input_length",
                "param_4": "unknown_param",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_params_08002eb2",
            "code": "\nundefined4 validate_params_08002eb2(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array[8] = value1;\n    *(short *)(array + 9) = (short)value2;\n    *(short *)((int)array + 0x26) = (short)value2;\n    array[0xf] = 0;\n    *(undefined *)((int)array + 0x39) = 0x21;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_params_08002eb2",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_inputs_08002efa",
            "code": "\nundefined4 validate_inputs_08002efa(int *input,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input + 0xe) != '\\x01') {\n    input_value_3 = value_1;\n    *(short *)(input + 0xb) = (short)value_2;\n    *(short *)((int)input + 0x2e) = (short)value_2;\n    input_value_6 = 0;\n    *(undefined *)((int)input + 0x3a) = 0x22;\n    *(undefined *)(input + 0xe) = 0;\n    *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) | 1;\n    *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_inputs_08002efa",
                "param_1": "input",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[10]": "input_value_3",
                "param_1[0xf]": "input_value_6"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "clear_bit_and_set_character_08002f4c",
            "code": "\nundefined4 clearBitAndSetCharacter_08002f4c(int *param)\n\n{\n  *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffffbf;\n  *(undefined *)((int)param + 0x39) = 0x20;\n  FUN_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "clear_bit_and_set_character_08002f4c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_data_08002f66",
            "code": "\nundefined4 processData_08002f66(int *data)\n\n{\n  byte *bytePointer;\n  short count;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  FUN_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "count",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_flags_08002ffc",
            "code": "\nvoid processFlags_08002ffc(uint **flagArray)\n\n{\n  int returnValue;\n  uint flagValue2;\n  uint *flagPtr;\n  uint flagValue5;\n  uint flagValue1;\n  \n  flagPtr = *flagArray;\n  flagValue1 = *flagPtr;\n  flagValue2 = flagPtr[3];\n  if ((((flagValue1 & 0xf) == 0) && ((flagValue1 & 0x20) != 0)) && ((flagValue2 & 0x20) != 0)) {\n    FUN_08002f66(flagArray);\n    return;\n  }\n  if (((flagValue1 & 0xf) == 0) || ((flagValue5 = flagPtr[5] & 1, flagValue5 == 0 && ((flagValue2 & 0x120) == 0)))) {\n    if (((flagValue1 & 0x80) != 0) && ((flagValue2 & 0x80) != 0)) {\n      FUN_0800295c(flagArray);\n      return;\n    }\n    if (((flagValue1 & 0x40) != 0) && ((flagValue2 & 0x40) != 0)) {\n      FUN_08002f4c(flagArray);\n    }\n  }\n  else {\n    if (((flagValue1 & 1) != 0) && ((flagValue2 & 0x100) != 0)) {\n      returnValue = (uint *)((uint)returnValue | 1);\n    }\n    if (((flagValue1 & 4) != 0) && (flagValue5 != 0)) {\n      returnValue = (uint *)((uint)returnValue | 2);\n    }\n    if (((flagValue1 & 2) != 0) && (flagValue5 != 0)) {\n      returnValue = (uint *)((uint)returnValue | 4);\n    }\n    if (((flagValue1 & 8) != 0) && (flagValue5 != 0)) {\n      returnValue = (uint *)((uint)returnValue | 8);\n    }\n    if (returnValue != (uint *)0x0) {\n      if (((flagValue1 & 0x20) != 0) && ((flagValue2 & 0x20) != 0)) {\n        FUN_08002f66(flagArray);\n      }\n      if ((((uint)returnValue & 8) == 0) && (((*flagArray)[5] & 0x40) == 0)) {\n        FUNC_08003f94(flagArray);\n        returnValue = (uint *)0x0;\n        return;\n      }\n      FUN_08002940(flagArray);\n      flagPtr = *flagArray;\n      if ((flagPtr[5] & 0x40) == 0) {\n        FUNC_08003f94(flagArray);\n        return;\n      }\n      flagPtr[5] = flagPtr[5] & 0xffffffbf;\n      if (subArray == (uint *)0x0) {\n        FUNC_08003f94(flagArray);\n        return;\n      }\n      subArray[0x14] = (uint)&LAB_0800311c_1;\n      returnValue = FUN_08000f8c(subArray);\n      if (returnValue != 0) {\n        (*(code *)subArray[0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_flags_08002ffc",
                "param_1": "flagArray",
                "iVar1": "returnValue",
                "uVar2": "flagValue2",
                "puVar3": "flagPtr",
                "uVar4": "flagValue5",
                "uVar5": "flagValue1",
                "param_1[0xf]": "returnValue",
                "param_1[0xd]": "subArray"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "address"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "check_bit_value_08003138",
            "code": "\nuint checkBitValue_08003138(uint value,int ptr)\n\n{\n  return *(uint *)(ptr + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "check_bit_value_08003138",
                "param_1": "value",
                "param_2": "ptr"
            },
            "calling": [
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid setBitInArray_0800314e(uint bitIndex,int array)\n\n{\n  uint byteOffset;\n  \n  byteOffset = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(array + byteOffset * 4) = *(uint *)(array + byteOffset * 4) | 1 << (bitIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bitIndex",
                "param_2": "array",
                "uVar1": "byteOffset"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_in_array_0800316c",
            "code": "\nvoid updateBitInArray_0800316c(uint bitPosition,int arrayAddress)\n\n{\n  uint adjustedBitPosition;\n  \n  adjustedBitPosition = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + adjustedBitPosition * 4) = *(uint *)(arrayAddress + adjustedBitPosition * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_in_array_0800316c",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "adjustedBitPosition"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "map_value_to_address_0800318c",
            "code": "\nundefined4 map_value_to_address_0800318c(undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "map_value_to_address_0800318c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_flag_and_return_address_080031fc",
            "code": "\n\n\nundefined4 setFlagAndReturnAddress_080031fc(undefined4 flagIndex)\n\n{\n  undefined4 address;\n  \n  switch(flagIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    address = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    address = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    address = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    address = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    address = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    address = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    address = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    address = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    address = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    address = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    address = 0x40022800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_flag_and_return_address_080031fc",
                "param_1": "flagIndex",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "validate_data_08003380",
            "code": "\nundefined4 validate_data_08003380(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  \n  result = FUN_0800354a(input_1,&DAT_08005a18,input_3,input_4,input_4);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "validate_data_08003380",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "check_input_0800339c",
            "code": "\nundefined4 check_input_0800339c(undefined4 input_value,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = FUN_0800354a(input_value,&DAT_08005a3c,param3,param4,param4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "check_input_0800339c",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_bit_from_address_080033c8",
            "code": "\n\n\nvoid clearBitFromAddress_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_bit_from_address_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "validate_and_process_data_080033d8",
            "code": "\nvoid validate_and_process_data_080033d8(undefined4 input_data)\n\n{\n  int result;\n  int data_array [5];\n  \n  data_array[0] = FUN_080034f4(input_data,&DAT_08005a18);\n  if ((data_array[0] != 0) && ((result = FUN_08003380(input_data), result == 0 || (result == 0x10)))) {\n    FUN_08000f72(data_array,result);\n    FUN_08000f56(data_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "validate_and_process_data_080033d8",
                "param_1": "input_data",
                "iVar1": "result",
                "local_1c": "data_array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380",
                "FUN_08000f72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_0800340c",
            "code": "\nvoid initialize_0800340c(void)\n\n{\n  FUN_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_data_08003414",
            "code": "\nvoid process_data_08003414(undefined4 input_data)\n\n{\n  int status;\n  uint flag;\n  int result_array [16];\n  \n  result_array[0] = FUN_080034f4(input_data,&DAT_08005a3c);\n  if ((result_array[0] != 0) &&\n     ((((status = FUN_0800339c(input_data), status == 0 || (status == 4)) || (status == 8)) ||\n      ((status == 0xc || (status == 0x18)))))) {\n    flag = FUN_0800354a(input_data,&DAT_08005a3c);\n    if ((flag & 0x100000) == 0) {\n      FUN_08002864(result_array,status);\n    }\n    else {\n      FUN_080028f0(result_array,status);\n    }\n    FUN_0800268e(result_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "input_data",
                "iVar1": "status",
                "uVar2": "flag",
                "local_4c": "result_array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_system_0800346c",
            "code": "\nvoid initialize_system_0800346c(void)\n\n{\n  FUN_08000e30();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_system_0800346c"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_program_08003476",
            "code": "\nvoid initializeProgram_08003476(void)\n\n{\n  FUN_08000e18();\n  FUN_08000f4e();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_program_08003476"
            },
            "calling": [],
            "called": [
                "FUN_08003474",
                "FUN_08000f4e",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "initialize_bits_08003486",
            "code": "\nvoid initializeBits_08003486(uint inputValue,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 shiftedValue;\n  uint bitMask;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  \n  shiftedValue = FUN_080031fc((inputValue << 0x18) >> 0x1c);\n  bitMask = 1 << (inputValue & 0xf) & 0xffff;\n  localParam4 = 2;\n  localParam2 = param2;\n  localParam3 = param3;\n  FUN_08000fb4(shiftedValue,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "initialize_bits_08003486",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "shiftedValue",
                "local_24": "bitMask",
                "local_20": "localParam2",
                "local_1c": "localParam3",
                "local_18": "localParam4"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "choose_action_based_on_condition_080034b6",
            "code": "\nvoid chooseActionBasedOnCondition_080034b6(undefined4 input_value,undefined2 input_flag,int condition,undefined4 param_value)\n\n{\n  if (condition == 0) {\n    FUN_08001198(input_value,input_flag,0,param_value,param_value);\n    return;\n  }\n  FUN_08001198(input_value,input_flag,1,param_value,param_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "choose_action_based_on_condition_080034b6",
                "param_1": "input_value",
                "param_2": "input_flag",
                "param_3": "condition",
                "param_4": "param_value"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_application_080034ce",
            "code": "\nvoid initializeApplication_080034ce(void)\n\n{\n  FUN_08000de4();\n  FUN_08000c8c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_application_080034ce"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int target_value,short *values_array)\n\n{\n  while( true ) {\n    if (*values_array == -1) {\n      return 0;\n    }\n    if (*values_array == target_value) break;\n    values_array = values_array + 6;\n  }\n  return *(undefined4 *)(values_array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "target_value",
                "param_2": "values_array"
            },
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "check_valid_parameter_080034f4",
            "code": "\nundefined4 checkValidParameter_080034f4(int inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (inputParam != -1) {\n    returnValue = FUN_080034da();\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "check_valid_parameter_080034f4",
                "param_1": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003978",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint findValueInArray_08003506(int targetValue,short *arrayPtr)\n\n{\n  while( true ) {\n    if (*(int *)(arrayPtr + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(arrayPtr + 2) == targetValue) break;\n    arrayPtr = arrayPtr + 6;\n  }\n  return (int)*arrayPtr;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "targetValue",
                "param_2": "arrayPtr"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "check_parameter_0800351e",
            "code": "\nundefined4 checkParameter_0800351e(int param)\n\n{\n  undefined4 result;\n  \n  if (param != 0) {\n    result = FUN_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "check_parameter_0800351e",
                "param_1": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *arr)\n\n{\n  while( true ) {\n    if (*arr == -1) {\n      return 0xffffffff;\n    }\n    if (*arr == value) break;\n    arr = arr + 6;\n  }\n  return *(undefined4 *)(arr + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "arr"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "check_param_and_return_0800354a",
            "code": "\nundefined4 check_param_and_return_0800354a(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = FUN_0800352e();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "check_param_and_return_0800354a",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003978"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "check_value_in_array_0800355e",
            "code": "\nundefined4 check_value_in_array_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "check_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_min_08003582",
            "code": "\nint compare_and_return_min_08003582(int result,int value2)\n\n{\n  if (result != value2) {\n    if (result == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return result;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_min_08003582",
                "param_1": "result",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (functionPointer *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_hardware_080035bc",
            "code": "\n\n\nvoid initializeHardware_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_hardware_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "clear_flags_based_on_value_080035fc",
            "code": "\n\n\nvoid clearFlagsBasedOnValue_080035fc(int *value)\n\n{\n  if (*value == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*value == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*value == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*value == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*value == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*value == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*value == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*value == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*value == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*value == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*value == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*value == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "clear_flags_based_on_value_080035fc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtractFour_08003750(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_function_08003754",
            "code": "\nvoid executeFunction_08003754(int inputParam)\n\n{\n  int functionPointer;\n  \n  functionPointer = FUN_08003750();\n  if ((*(code **)(functionPointer + 0x48) != (code *)0x0) && (*(char *)(inputParam + 0x18) == '\\x01')) {\n    (**(code **)(functionPointer + 0x48))(functionPointer,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_function_08003754",
                "param_1": "inputParam",
                "iVar1": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_callback_function_0800376e",
            "code": "\nvoid executeCallbackFunction_0800376e(void)\n\n{\n  int result;\n  \n  result = FUN_08003750();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_callback_function_0800376e",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "check_and_call_functions_0800377c",
            "code": "\nvoid check_and_call_functions_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    FUN_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    FUN_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "check_and_call_functions_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtractFour_0800387c(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003880",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_data_08003880",
            "code": "\nvoid processData_08003880(int input_data,int flag,int value,undefined4 param_value)\n\n{\n  int function_result;\n  \n  function_result = FUN_0800387c();\n  if (value == *(int *)(input_data + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(function_result + 0x88) = 0;\n      *(undefined *)(function_result + 0x5e) = 0;\n      if (*(code **)(function_result + 100) != (code *)0x0) {\n        (**(code **)(function_result + 100))();\n      }\n      FUN_08001460(input_data,function_result + 0x68,*(undefined *)(function_result + 0x88),8);\n      return;\n    }\n    *(undefined *)(function_result + 0x5e) = 1;\n    FUN_080014ec(input_data,function_result + 0x68,0x20,8,param_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_data_08003880",
                "param_1": "input_data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param_value",
                "iVar1": "function_result"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_080014ec",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_function_080038d0",
            "code": "\nvoid executeFunction_080038d0(undefined4 param)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (((*(functionPointer **)(result + 0x60) != (functionPointer *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(functionPointer **)(result + 0x60))(result + 0x68);\n  }\n  FUN_08001578(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_function_080038d0",
                "param_1": "param",
                "iVar1": "result",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_call_function_08003900",
            "code": "\nvoid checkAndCallFunction_08003900(undefined4 input)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    FUN_08001578(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUARTPins_08003978(int *uartConfig)\n\n{\n  int uartPeriph1;\n  int uartPeriph2;\n  undefined4 uartPeriphMask;\n  uint uartPinConfig;\n  uint pinMask;\n  uint pinConfig;\n  uint pinPort;\n  undefined4 undefinedVar;\n  uint chipConfig;\n  \n  if (uartConfig != (int *)0x0) {\n    uartPeriph1 = FUN_080034f4((int)*(short *)(uartConfig + 0x16),&DAT_08005ca0);\n    uartPeriph2 = FUN_080034f4((int)*(short *)((int)uartConfig + 0x5a),&DAT_08005c10);\n    if ((uartPeriph2 == 0) || (uartPeriph1 == 0)) {\n      FUN_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPeriph2);\n    }\n    else {\n      uartPeriph1 = FUN_08003582(uartPeriph1);\n      *uartConfig = uartPeriph1;\n      if (uartPeriph1 == 0) {\n        FUN_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPeriph1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uartConfig + 0x11) = 0;\n          *(undefined *)(uartConfig + 0x17) = 0x25;\n        }\n        else if (uartPeriph1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uartConfig + 0x11) = 1;\n          *(undefined *)(uartConfig + 0x17) = 0x26;\n        }\n        else if (uartPeriph1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uartConfig + 0x11) = 2;\n          *(undefined *)(uartConfig + 0x17) = 0x27;\n        }\n        else if (uartPeriph1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uartConfig + 0x11) = 3;\n          *(undefined *)(uartConfig + 0x17) = 0x34;\n        }\n        else if (uartPeriph1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uartConfig + 0x11) = 4;\n          *(undefined *)(uartConfig + 0x17) = 0x35;\n        }\n        else if (uartPeriph1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uartConfig + 0x11) = 5;\n          *(undefined *)(uartConfig + 0x17) = 0x47;\n        }\n        else if (uartPeriph1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uartConfig + 0x11) = 6;\n          *(undefined *)(uartConfig + 0x17) = 0x52;\n        }\n        else if (uartPeriph1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uartConfig + 0x11) = 7;\n          *(undefined *)(uartConfig + 0x17) = 0x53;\n        }\n        uartPeriphMask = FUN_080031fc((uint)((int)*(short *)((int)uartConfig + 0x5a) << 0x18) >> 0x1c);\n        uartPinConfig = FUN_0800354a((int)*(short *)((int)uartConfig + 0x5a),&DAT_08005c10);\n        pinMask = 1 << (*(ushort *)((int)uartConfig + 0x5a) & 0xf) & 0xffff;\n        pinConfig = (uartPinConfig >> 3 & 1) << 4 | uartPinConfig & 7;\n        pinPort = (uartPinConfig << 0x1a) >> 0x1e;\n        chipConfig = (uartPinConfig << 0x11) >> 0x19;\n        undefinedVar = 3;\n        FUN_08000fb4(uartPeriphMask,&pinMask);\n        uartPeriphMask = FUN_080031fc((uint)((int)*(short *)(uartConfig + 0x16) << 0x18) >> 0x1c);\n        uartPinConfig = FUN_0800354a((int)*(short *)(uartConfig + 0x16),&DAT_08005ca0);\n        pinMask = 1 << (*(ushort *)(uartConfig + 0x16) & 0xf) & 0xffff;\n        pinConfig = (uartPinConfig >> 3 & 1) << 4 | uartPinConfig & 7;\n        pinPort = (uartPinConfig << 0x1a) >> 0x1e;\n        FUN_08000fb4(uartPeriphMask,&pinMask);\n        (&DAT_200002b4)[*(byte *)(uartConfig + 0x11)] = uartConfig + 1;\n        uartConfig[1] = *uartConfig;\n        uartConfig[2] = uartConfig[0x12];\n        uartConfig[3] = uartConfig[0x13];\n        uartConfig[4] = uartConfig[0x14];\n        uartConfig[5] = uartConfig[0x15];\n        uartConfig[6] = 0xc;\n        uartConfig[7] = 0;\n        uartConfig[8] = 0;\n        FUN_08002d72(uartConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "uartConfig",
                "iVar1": "uartPeriph1",
                "iVar2": "uartPeriph2",
                "uVar3": "uartPeriphMask",
                "uVar4": "uartPinConfig",
                "local_2c": "pinMask",
                "local_28": "pinConfig",
                "local_24": "pinPort",
                "local_20": "undefinedVar",
                "local_1c": "chipConfig"
            },
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08003582",
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_0800354a",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_data_08003cc8",
            "code": "\nvoid initializeData_08003cc8(void)\n\n{\n  int result;\n  undefined4 secondResult;\n  \n  result = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (result != 0) {\n    secondResult = FUN_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = FUN_0800351e(secondResult,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    FUN_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_data_08003cc8",
                "iVar1": "result",
                "uVar2": "secondResult"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800351e",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "execute_function_08003d18",
            "code": "\nuint execute_function_08003d18(undefined4 some_param,uint some_other_param)\n\n{\n  int initial_value;\n  int result;\n  uint index;\n  \n  initial_value = FUN_08000e30();\n  result = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (result == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (result = FUN_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != result))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (FUN_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    result = FUN_08002dd0((&DAT_200002b4)[index],some_param,some_other_param & 0xffff,1000);\n    if (result == 0) {\n      return some_other_param;\n    }\n    result = FUN_08000e30();\n  } while ((uint)(result - initial_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "execute_function_08003d18",
                "param_1": "some_param",
                "param_2": "some_other_param",
                "iVar1": "initial_value",
                "iVar2": "result",
                "uVar3": "index"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08000e30",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_data_valid_08003dd0",
            "code": "\nbool isDataValid_08003dd0(int data)\n\n{\n  uint result;\n  \n  result = FUN_0800312c((&DAT_200002b4)[*(byte *)(data + 0x44)]);\n  return (result & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_data_valid_08003dd0",
                "param_1": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "check_flag_validity_08003df4",
            "code": "\nbool checkFlagValidity_08003df4(int flagIndex)\n\n{\n  uint result;\n  \n  result = FUN_0800312c((&DAT_200002b4)[*(byteValue *)(flagIndex + 0x44)]);\n  return (result & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "check_flag_validity_08003df4",
                "param_1": "flagIndex",
                "uVar1": "result",
                "byte": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "extract_data_08003e18",
            "code": "\nundefined4 extract_data_08003e18(int input_data,undefined *output_data,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  if (input_data == 0) {\n    return 0xffffffff;\n  }\n  result = FUN_08003dd0();\n  if (result == 0) {\n    *output_data = *(undefined *)(input_data + 0x45);\n    FUN_08002efa((&DAT_200002b4)[*(byte *)(input_data + 0x44)],input_data + 0x45,1,&DAT_200002b4,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "extract_data_08003e18",
                "param_1": "input_data",
                "param_2": "output_data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_data_08003e54",
            "code": "\nvoid updateData_08003e54(int input,undefined4 value,undefined4 unused,undefined4 param)\n\n{\n  int result;\n  uint index;\n  \n  if (input != 0) {\n    result = FUN_08003dd0();\n    if (result == 0) {\n      index = (uint)*(byte *)(input + 0x44);\n      *(undefined4 *)(&DAT_20000214 + index * 4) = value;\n      *(int *)(&DAT_2000023c + index * 4) = input;\n      FUN_08000e60((int)*(char *)(input + 0x5c),0,1,index,param);\n      FUN_08000ec4((int)*(char *)(input + 0x5c));\n      FUN_08002efa((&DAT_200002b4)[*(byte *)(input + 0x44)],input + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "input",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08000e60",
                "FUN_08003dd0",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_08003eac",
            "code": "\nvoid updateData_08003eac(int dataPtr,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPtr != 0) {\n    byteValue = *(byte *)(dataPtr + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = dataPtr;\n    FUN_08000e60((int)*(char *)(dataPtr + 0x5c),0,2);\n    FUN_08000ec4((int)*(char *)(dataPtr + 0x5c));\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 0x68) + (uint)*(ushort *)(dataPtr + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_element_index_08003f00",
            "code": "\nuint find_element_index_08003f00(int element)\n\n{\n  uint index;\n  \n  if (element == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (element == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_element_index_08003f00",
                "param_1": "element",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_selected_function_08003f24",
            "code": "\nvoid executeSelectedFunction_08003f24(void)\n\n{\n  uint functionIndex;\n  \n  functionIndex = FUN_08003f00();\n  if (functionIndex < 10) {\n    (**(code **)(&DAT_20000214 + functionIndex * 4))(*(undefined4 *)(&DAT_2000023c + functionIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_selected_function_08003f24",
                "uVar1": "functionIndex"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "execute_function_08003f48",
            "code": "\nvoid executeFunction_08003f48(void)\n\n{\n  uint returnValue;\n  int result;\n  int dataPointer;\n  \n  returnValue = FUN_08003f00();\n  dataPointer = *(int *)(&DAT_2000028c + returnValue * 4);\n  if ((returnValue < 10) && (result = (**(code **)(&DAT_20000264 + returnValue * 4))(dataPointer), result != -1)) {\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 0x68) + (uint)*(ushort *)(dataPointer + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "execute_function_08003f48",
                "uVar1": "returnValue",
                "iVar2": "result",
                "iVar3": "dataPointer"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedMemory = DAT_200002dc;\n  if (DAT_200002dc + size <= stackPointer) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedMemory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackPointer"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_error_code_080040d0",
            "code": "\nErrorCode get_error_code_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0",
                "undefined4": "ErrorCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_080040d6",
            "code": "\nundefined4 initializeMemory_080040d6(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "check_success_080040e0",
            "code": "\nundefined4 check_success_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "check_success_080040e0"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_function_080040e4",
            "code": "\nundefined4 initializeFunction_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_function_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_data_080040e8",
            "code": "\nundefined4 initializeData_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_data_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "execute_function_080040ec",
            "code": "\nvoid execute_function_080040ec(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  FUN_08003d18(input_2,input_3,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "execute_function_080040ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "set_default_value_080040fc",
            "code": "\nundefined4 setDefaultValue_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "set_default_value_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "check_success_0800410c",
            "code": "\nundefined4 check_success_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "check_success_0800410c"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "execute_operation_08004110",
            "code": "\nvoid executeOperation_08004110(uint opCode,undefined4 param1,undefined4 param2,undefined *data)\n\n{\n  int result;\n  undefined *pointer;\n  int index;\n  \n  if (opCode < 0x60) {\n    index = (int)*(short *)(&DAT_08005d3c + opCode * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    index = -1;\n    pointer = data;\n  }\n  if (index != -1) {\n    result = FUN_08003138(index,&DAT_200002e0,param2,pointer,data);\n    if (result != 0) {\n      result = FUN_0800355e(index,&DAT_08005a18);\n      if (result == 0) {\n        result = FUN_0800355e(index,&DAT_08005a3c);\n        if (result != 0) {\n          FUN_08003414(index);\n        }\n      }\n      else {\n        FUN_080033d8(index);\n      }\n      FUN_0800316c(index,&DAT_200002e0);\n    }\n    switch(param1) {\n    case 0:\n      FUN_08003486(index,0);\n      break;\n    case 1:\n      FUN_08003486(index,1,0);\n      break;\n    case 2:\n      FUN_08003486(index,0,1);\n      break;\n    case 3:\n      FUN_08003486(index,0,2);\n    }\n    FUN_0800314e(index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "execute_operation_08004110",
                "param_1": "opCode",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "data",
                "iVar1": "result",
                "puVar2": "pointer",
                "iVar3": "index"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_0800314e",
                "FUN_080033d8",
                "FUN_08003138",
                "FUN_08003414",
                "FUN_0800355e",
                "FUN_08003486",
                "FUN_0800316c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_data_080041bc",
            "code": "\nvoid processData_080041bc(uint inputSize,undefined4 param2,undefined4 param3,undefined *param4)\n\n{\n  int result;\n  undefined4 shiftedValue;\n  undefined *dataPointer;\n  uint value;\n  \n  if (inputSize < 0x60) {\n    value = (uint)*(short *)(&DAT_08005d3c + inputSize * 2);\n    dataPointer = &DAT_08005d3c;\n  }\n  else {\n    value = 0xffffffff;\n    dataPointer = param4;\n  }\n  if ((value != 0xffffffff) &&\n     (result = FUN_08003138(value,&DAT_2000030c,param3,dataPointer,param4), result != 0)) {\n    shiftedValue = FUN_0800318c((value << 0x18) >> 0x1c);\n    FUN_080034b6(shiftedValue,1 << (value & 0xf) & 0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "inputSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shiftedValue",
                "puVar3": "dataPointer",
                "uVar4": "value"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_0800318c",
                "FUN_08003138",
                "FUN_080034b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_08004204",
            "code": "\nvoid initialize_08004204(void)\n\n{\n  FUN_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_checksum_08004240",
            "code": "\nushort calculate_checksum_08004240(int address)\n\n{\n  return (*(short *)(address + 0x138) + 0x40) - *(short *)(address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_checksum_08004240",
                "param_1": "address"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_data_080042ac",
            "code": "\nvoid updateData_080042ac(int inputData)\n\n{\n  int returnValue;\n  ushort newIndex;\n  undefined newValue;\n  \n  returnValue = FUN_08003e18(inputData,&newValue);\n  if ((returnValue == 0) &&\n     (newIndex = *(short *)(inputData + 100) + 1U & 0x3f, newIndex != *(ushort *)(inputData + 0x66))) {\n    *(undefined *)(*(int *)(inputData + 0x60) + (uint)*(ushort *)(inputData + 100)) = newValue;\n    *(ushort *)(inputData + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "inputData",
                "iVar1": "returnValue",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_data_080042e8",
            "code": "\nundefined4 initializeData_080042e8(int dataPointer,undefined dataValue)\n\n{\n  byte byteValue;\n  byte maskedByteValue;\n  int incrementedValue;\n  \n  *(undefined *)(dataPointer + 0x10) = 1;\n  incrementedValue = *(ushort *)(dataPointer + 0x140) + 1;\n  byteValue = (byte)incrementedValue;\n  maskedByteValue = byteValue & 0x7f;\n  if (incrementedValue == 0) {\n    maskedByteValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataPointer + 0x142) == (ushort)maskedByteValue);\n  *(undefined *)(*(int *)(dataPointer + 0x13c) + (uint)*(ushort *)(dataPointer + 0x140)) = dataValue;\n  *(ushort *)(dataPointer + 0x140) = (ushort)maskedByteValue;\n  incrementedValue = FUN_08003df4(dataPointer + 0xd4);\n  if (incrementedValue == 0) {\n    FUN_08003eac(dataPointer + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_data_080042e8",
                "param_1": "dataPointer",
                "param_2": "dataValue",
                "bVar1": "byteValue",
                "bVar2": "maskedByteValue",
                "iVar3": "incrementedValue"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_structures_08004364",
            "code": "\nvoid initializeDataStructures_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_structures_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "configure_serial_port_08004388",
            "code": "\nvoid configureSerialPort_08004388(int serialPortAddress,undefined4 baudRate,byte config)\n\n{\n  uint errorCode;\n  byte configMask;\n  int configValue;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x144) = config;\n  configMask = config & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    FUN_08003978(serialPortAddress + 0xd4);\n    FUN_08003e54(serialPortAddress + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  FUN_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (errorCode < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + errorCode * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "configure_serial_port_08004388",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "config",
                "extraout_r1": "errorCode",
                "bVar1": "configMask",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "update_parameter_value_08004444",
            "code": "\nvoid updateParameterValue_08004444(int baseAddress,uint offset)\n\n{\n  undefined2 updatedValue;\n  code *jumpTable;\n  \n  if (offset < 0x60) {\n    updatedValue = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    updatedValue = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 0x12e) = updatedValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "update_parameter_value_08004444",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "updatedValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "update_parameter_08004460",
            "code": "\nvoid updateParameter_08004460(int parameterAddress,uint value)\n\n{\n  undefined2 result;\n  \n  if (value < 0x60) {\n    result = *(undefined2 *)(&DAT_08005d3c + value * 2);\n  }\n  else {\n    result = 0xffff;\n  }\n  *(undefined2 *)(parameterAddress + 300) = result;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "update_parameter_08004460",
                "param_1": "parameterAddress",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_param_array_0800447c",
            "code": "\nundefined4 *\ninitializeParamArray_0800447c(undefined4 *paramArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 returnValue;\n  \n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  *paramArray = &PTR_FUN_080042e8_1_08005ed4;\n  if (paramArray == &DAT_20000338) {\n    FUN_08004444(&DAT_20000338,0x4c,param3,&DAT_20000338,param4);\n    FUN_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    returnValue = FUN_0800351e(param2,&DAT_08005c10);\n    *(undefined2 *)((int)paramArray + 0x12e) = returnValue;\n    returnValue = FUN_0800351e(param2,&DAT_08005ca0);\n    *(undefined2 *)(paramArray + 0x4b) = returnValue;\n  }\n  FUN_08004364(paramArray);\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_param_array_0800447c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004444",
                "FUN_08004364",
                "FUN_0800351e",
                "FUN_08004460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "check_and_execute_080044d8",
            "code": "\nvoid check_and_execute_080044d8(int condition,int value,undefined4 argument1,undefined4 argument2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    FUN_0800447c(&DAT_20000338,0x40004800,argument1,0xffff,argument2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "check_and_execute_080044d8",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "argument1",
                "param_4": "argument2"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08005f28;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "check_and_execute_08004560",
            "code": "\nvoid check_and_execute_08004560(int status_flag,int value)\n\n{\n  if ((status_flag == 1) && (value == 0xffff)) {\n    FUN_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "check_and_execute_08004560",
                "param_1": "status_flag",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_params_08004640",
            "code": "\nuint combineParams_08004640(int inputValue,uint flagValue)\n\n{\n  return flagValue | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_params_08004640",
                "param_1": "inputValue",
                "param_2": "flagValue"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_080007f0",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_application_08004648",
            "code": "\nvoid initializeApplication_08004648(void)\n\n{\n  FUN_08000e3c(3);\n  FUN_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_application_08004648"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "execute_infinite_loop_08004658",
            "code": "\nvoid execute_infinite_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  FUN_08000c4c();\n  do {\n    FUN_08000c64();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "execute_infinite_loop_08004658"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004338",
                "FUN_08000c64",
                "FUN_08000c4c",
                "FUN_08004646"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int flag,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    FUN_080047fe(0,&label1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "LAB_0800468c_1": "label1"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_function_or_fallback_080047c0",
            "code": "\nvoid executeFunctionOrFallback_080047c0(int functionHandle)\n\n{\n  int index;\n  \n  if (*(int *)(functionHandle + 8) != 0) {\n    (**(code **)(functionHandle + 0xc))();\n    return;\n  }\n  FUN_08005760();\n  index = FUN_08004678();\n  if ((&DAT_20000494)[index * 5] != 0) {\n    executeFunctionOrFallback_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_function_or_fallback_080047c0",
                "param_1": "functionHandle",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_non_null_value_080047d0",
            "code": "\nvoid checkNonNullValue_080047d0(void)\n\n{\n  int index;\n  \n  index = FUN_08004678();\n  if ((&DAT_20000494)[index * 5] != 0) {\n    FUN_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_non_null_value_080047d0",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "copy_param_values_080047fe",
            "code": "\nvoid copy_param_values_080047fe(undefined4 dst,undefined4 src)\n\n{\n  FUN_08004844(src,dst);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "copy_param_values_080047fe",
                "param_1": "dst",
                "param_2": "src"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "handle_failed_assertion_08004808",
            "code": "\nvoid handleFailedAssertion_08004808(undefined4 condition,undefined4 file,char *functionName,undefined4 line)\n\n{\n  undefined4 fileOffset;\n  char *additionalInfo;\n  undefined8 result;\n  undefined4 param4;\n  \n  fileOffset = *(undefined4 *)(DAT_200000a0 + 0xc);\n  param4 = line;\n  if (functionName == (char *)0x0) goto LAB_0800482c;\n  additionalInfo = \", function: \";\n  do {\n    FUN_08004860(fileOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",line,condition,file\n                 ,additionalInfo,functionName,param4);\n    result = FUN_080051ac();\n    file = (undefined4)((ulonglong)result >> 0x20);\n    fileOffset = (undefined4)result;\nLAB_0800482c:\n    functionName = \"\";\n    additionalInfo = functionName;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "handle_failed_assertion_08004808",
                "param_1": "condition",
                "param_2": "file",
                "param_3": "functionName",
                "param_4": "line",
                "uVar1": "fileOffset",
                "pcVar2": "additionalInfo",
                "uVar3": "result",
                "uVar4": "param4"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left64_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftLeft64_08004844(undefined4 sourceValue,uint shiftAmount)\n\n{\n  return (unsignedLongLong)shiftAmount << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left64_08004844",
                "param_1": "sourceValue",
                "param_2": "shiftAmount",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "execute_function_08004860",
            "code": "\nvoid executeFunction_08004860(undefined4 inputParam1,undefined4 inputParam2,undefined4 stackValue1,undefined4 stackValue2)\n\n{\n  undefined4 stackVariable1;\n  undefined4 stackVariable2;\n  \n  stackVariable1 = stackValue1;\n  stackVariable2 = stackValue2;\n  FUN_08004a84(DAT_200000a0,inputParam1,inputParam2,&stackVariable1,inputParam1,&stackVariable1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "execute_function_08004860",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "stackValue1",
                "param_4": "stackValue2",
                "uStack_8": "stackVariable1",
                "uStack_4": "stackVariable2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "set_memory_080048cc",
            "code": "\nvoid setMemory_080048cc(undefined *memory,undefined value,int size)\n\n{\n  undefined *endMemory;\n  \n  endMemory = memory + size;\n  for (; memory != endMemory; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "set_memory_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endMemory"
            },
            "calling": [
                "FUN_08005400",
                "FUN_08005374",
                "FUN_0800532c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_linked_list_080048dc",
            "code": "\nvoid updateLinkedList_080048dc(undefined4 *param_1,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPtr;\n  int **extraout_r1;\n  int **ppiVar2;\n  int **ppiVar3;\n  int **ppiVar4;\n  int **ppiVar5;\n  bool isEqual;\n  \n  if (size == 0) {\n    return;\n  }\n  ppiVar5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    ppiVar5 = (int **)((int)ppiVar5 + *(int *)(size + -4));\n  }\n  FUNC_0800557c();\n  ppiVar3 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    ppiVar5[1] = (int *)0x0;\n    ppiVar2 = extraout_r1;\n    DAT_200005c8 = ppiVar5;\n  }\n  else {\n    ppiVar3 = DAT_200005c8;\n    if (ppiVar5 < DAT_200005c8) {\n      ppiVar2 = (int **)*ppiVar5;\n      ppiVar3 = (int **)((int)ppiVar5 + (int)ppiVar2);\n      isEqual = DAT_200005c8 == ppiVar3;\n      if (isEqual) {\n        ppiVar3 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      ppiVar5[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = ppiVar5;\n      if (isEqual) {\n        ppiVar3 = (int **)((int)ppiVar3 + (int)ppiVar2);\n        *ppiVar5 = (int *)ppiVar3;\n      }\n    }\n    else {\n      do {\n        ppiVar4 = ppiVar3;\n        ppiVar3 = (int **)ppiVar4[1];\n        if (ppiVar3 == (int **)0x0) break;\n      } while (ppiVar3 <= ppiVar5);\n      ppiVar2 = (int **)*ppiVar4;\n      if ((int **)((int)ppiVar4 + (int)ppiVar2) == ppiVar5) {\n        ppiVar2 = (int **)((int)ppiVar2 + (int)*ppiVar5);\n        *ppiVar4 = (int *)ppiVar2;\n        if (ppiVar3 == (int **)((int)ppiVar4 + (int)ppiVar2)) {\n          currentPtr = *ppiVar3;\n          ppiVar3 = (int **)ppiVar3[1];\n          ppiVar4[1] = (int *)ppiVar3;\n          ppiVar2 = (int **)((int)ppiVar2 + (int)currentPtr);\n          *ppiVar4 = (int *)ppiVar2;\n        }\n      }\n      else if (ppiVar5 < (int **)((int)ppiVar4 + (int)ppiVar2)) {\n        *param_1 = 0xc;\n      }\n      else {\n        ppiVar2 = (int **)((int)ppiVar5 + (int)*ppiVar5);\n        isEqual = ppiVar3 == ppiVar2;\n        if (isEqual) {\n          ppiVar2 = (int **)*ppiVar3;\n          ppiVar3 = (int **)ppiVar3[1];\n        }\n        ppiVar5[1] = (int *)ppiVar3;\n        if (isEqual) {\n          ppiVar2 = (int **)((int)ppiVar2 + (int)*ppiVar5);\n          *ppiVar5 = (int *)ppiVar2;\n        }\n        ppiVar4[1] = (int *)ppiVar5;\n      }\n    }\n  }\n  FUNC_0800557e(param_1,ppiVar2,ppiVar3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPtr",
                "bVar6": "isEqual"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_block_08004978",
            "code": "\nuint allocate_memory_block_08004978(undefined4 *result_ptr,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint new_size;\n  \n  new_size = (size + 3 & 0xfffffffc) + 8;\n  if (new_size < 0xc) {\n    new_size = 0xc;\n  }\n  if (((int)new_size < 0) || (new_size < size)) {\n    *result_ptr = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    last_block = DAT_200005c8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - new_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = new_size;\n          last_block = (uint *)((int)previous_block + difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = FUN_0800500c(result_ptr);\n    }\n    current_block = (uint *)FUN_0800500c(result_ptr,new_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (offset = FUN_0800500c(result_ptr,(int)last_block - (int)current_block), offset != -1)))) {\n      *last_block = new_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(result_ptr);\n      new_size = (int)last_block + 0xbU & 0xfffffff8;\n      offset = new_size - (int)(last_block + 1);\n      if (offset != 0) {\n        *(int *)((int)last_block + offset) = -offset;\n        return new_size;\n      }\n      return new_size;\n    }\n    *result_ptr = 0xc;\n    FUNC_0800557e(result_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "result_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "last_block",
                "uVar6": "new_size"
            },
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e",
                "FUN_0800500c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int data,byte input_byte,byte **input_buffer)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = input_buffer[2] + -1;\n  input_buffer[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)input_buffer[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)input_byte, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *input_buffer;\n    *input_buffer = temp_var2 + 1;\n    *temp_var2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (input_buffer == (byte **)&DAT_08005fc0) {\n    input_buffer = *(byte ***)(data + 4);\n  }\n  else if (input_buffer == (byte **)&DAT_08005fe0) {\n    input_buffer = *(byte ***)(data + 8);\n  }\n  else if (input_buffer == (byte **)&DAT_08005fa0) {\n    input_buffer = *(byte ***)(data + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = input_buffer[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = FUN_080050d0(data,input_buffer,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    temp_var1 = (int)*input_buffer - (int)input_buffer[4];\n    result = (uint)input_byte;\n    if ((temp_var1 < (int)input_buffer[5]) || (temp_var1 = FUN_080052cc(data,input_buffer), temp_var1 == 0)) {\n      input_buffer[2] = input_buffer[2] + -1;\n      temp_var2 = *input_buffer;\n      *input_buffer = temp_var2 + 1;\n      *temp_var2 = input_byte;\n      if ((byte *)(temp_var1 + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = FUN_080052cc(data,input_buffer);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "data",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080052cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "iterate_and_process_08004a60",
            "code": "\nint iterateAndProcess_08004a60(undefined4 input1,undefined4 input2,undefined *dataPtr,int size)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentIndex;\n  \n  endPtr = dataPtr + size;\n  currentIndex = size;\n  do {\n    if (dataPtr == endPtr) {\n      return 0;\n    }\n    result = FUN_08004a34(input1,*dataPtr,input2,size,currentIndex);\n    size = result + 1;\n    dataPtr = dataPtr + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "iterate_and_process_08004a60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "dataPtr",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentIndex"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "extract_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint extractData_08004a84(int input_ptr,undefined4 *data_ptr,byte *byte_ptr,int *count_ptr)\n\n{\n  int result;\n  int *count;\n  bool isNumeric;\n  byte *byte_ptr;\n  byte *byte_ptr;\n  int temp;\n  int temp_var;\n  int *count_ptr;\n  uint options;\n  int precision;\n  undefined4 temp_var_2;\n  int width;\n  int total_count;\n  byte format_char;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined flag;\n  undefined4 temp_var_3;\n  \n  count_ptr = count_ptr;\n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (data_ptr == &DAT_08005fc0) {\n    data_ptr = *(undefined4 **)(input_ptr + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_08005fe0) {\n    data_ptr = *(undefined4 **)(input_ptr + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_08005fa0) {\n    data_ptr = *(undefined4 **)(input_ptr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x1c)) || (data_ptr[4] == 0)) &&\n     (temp_var = FUN_080050d0(input_ptr,data_ptr), temp_var != 0)) {\n    return -1;\n  }\n  total_count = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  byte_ptr = byte_ptr;\nLAB_08004ac6:\n  byte_ptr = byte_ptr;\n  if (*byte_ptr != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  byte_ptr = byte_ptr + 1;\n  if (*byte_ptr != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_var = (int)byte_ptr - (int)byte_ptr;\n  if (temp_var != 0) {\n    result = FUN_08004a60(input_ptr,data_ptr,byte_ptr,temp_var);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(data_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_count;\n    }\n    total_count = total_count + temp_var;\n  }\n  if (*byte_ptr == 0) goto LAB_08004c70;\n  options = 0;\n  width = 0;\n  precision = -1;\n  temp_var_2 = 0;\n  flag = 0;\n  temp_var_3 = 0;\n  byte_ptr = byte_ptr + 1;\n  while( true ) {\n    temp_var = FUN_08000230(\"#-0+ \",*byte_ptr);\n    byte_ptr = byte_ptr + 1;\n    if (temp_var == 0) break;\n    options = 1 << (temp_var + 0xf7ffa094U & 0xff) | options;\n    byte_ptr = byte_ptr;\n  }\n  if ((int)(options << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(options << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*byte_ptr == 0x2a) {\n    count = count_ptr + 1;\n    temp_var = *count_ptr;\n    count_ptr = count;\n    if (temp_var < 0) {\n      width = -temp_var;\n      options = options | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    isNumeric = false;\n    temp_var = width;\n    byte_ptr = byte_ptr;\n    while( true ) {\n      if (9 < *byte_ptr - 0x30) break;\n      temp_var = temp_var * 10 + (*byte_ptr - 0x30);\n      isNumeric = true;\n      byte_ptr = byte_ptr + 1;\n    }\n    if (!isNumeric) goto LAB_08004bae;\n  }\n  width = temp_var;\nLAB_08004bae:\n  if (*byte_ptr == 0x2e) {\n    if (byte_ptr[1] == 0x2a) {\n      precision = *count_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n      byte_ptr = byte_ptr + 2;\n      count_ptr = count_ptr + 1;\n    }\n    else {\n      isNumeric = false;\n      precision = 0;\n      temp_var = 0;\n      while( true ) {\n        byte_ptr = byte_ptr + 1;\n        if (9 < *byte_ptr - 0x30) break;\n        temp_var = temp_var * 10 + (*byte_ptr - 0x30);\n        isNumeric = true;\n      }\n      if (isNumeric) {\n        precision = temp_var;\n      }\n    }\n  }\n  temp_var = FUN_08000230(&DAT_08005f72,*byte_ptr,3);\n  if (temp_var != 0) {\n    options = options | 0x40 << (temp_var + 0xf7ffa08eU & 0xff);\n    byte_ptr = byte_ptr + 1;\n  }\n  format_char = *byte_ptr;\n  byte_ptr = byte_ptr + 1;\n  temp_var = FUN_08000230(\"efgEFG\",format_char,6);\n  if (temp_var == 0) {\n    temp = FUN_08004d9c(input_ptr,&options,data_ptr,0x8004a61,&count_ptr);\n    if (temp == -1) goto LAB_08004c70;\n  }\n  else {\n    count_ptr = (int *)(((int)count_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_count = total_count + temp;\n  byte_ptr = byte_ptr;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "extract_data_08004a84",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "byte_ptr",
                "param_4": "count_ptr",
                "iVar1": "result",
                "piVar2": "count",
                "bVar3": "isNumeric",
                "pbVar4": "byte_ptr",
                "pbVar5": "byte_ptr",
                "unaff_r9": "temp",
                "iVar6": "temp_var",
                "local_8c": "count_ptr",
                "local_88": "options",
                "local_84": "precision",
                "local_80": "temp_var_2",
                "local_7c": "width",
                "local_74": "total_count",
                "local_70": "format_char",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "flag",
                "local_30": "temp_var_3"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230",
                "FUN_080053a0",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "decode_data_08004cb0",
            "code": "\nundefined4\ndecodeData_08004cb0(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint count;\n  uint counter;\n  bool isZero;\n  \n  count = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    count = data[2];\n  }\n  *output = count;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = count + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  count = (uint)*(byte *)((int)data + 0x43);\n  if (count != 0) {\n    count = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + count + 0x43) = 0x30;\n    *(undefined *)((int)data + count + 0x44) = *(undefined *)((int)data + 0x45);\n    count = count + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,count);\n  if (index != -1) {\n    count = data[3];\n    isZero = (*data & 6) == 4;\n    if (isZero) {\n      count = count - *output;\n    }\n    if (isZero) {\n      count = count & ~((int)count >> 0x1f);\n    }\n    else {\n      count = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      count = count + (data[2] - data[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (count == counter) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "decode_data_08004cb0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "count",
                "uVar4": "counter",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "print_formatted_value_08004d9c",
            "code": "\nuint print_formatted_value_08004d9c(undefined4 format,uint *value,undefined4 strlen,code *output,uint **pValue)\n\n{\n  byte byteVal;\n  int index;\n  uint *ptr;\n  int result;\n  char *hexDigits;\n  uint n;\n  uint **pptr;\n  char **ppc;\n  uint len;\n  uint temp;\n  char *dest;\n  char *str;\n  uint localArray [2];\n  \n  byteVal = *(byte *)(value + 6);\n  str = (char *)((int)value + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_08004f56;\n          if (byteVal != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)value + 0x45) = 0x58;\n          hexDigits = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          n = *value;\n          ptr = *pValue;\n          *pValue = ptr + 1;\n          if (((n & 0x80) == 0) && ((int)(n << 0x19) < 0)) {\n            len = (uint)*(ushort *)ptr;\n          }\n          else {\n            len = *ptr;\n          }\n          if ((int)(n << 0x1f) < 0) {\n            *value = n | 0x20;\n          }\n          if (len == 0) {\n            *value = *value & 0xffffffdf;\n          }\n          n = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)value + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_08004dcc;\n          len = *value;\n          ptr = *pValue;\n          if ((len & 0x80) == 0) {\n            *pValue = ptr + 1;\n            if ((len & 0x40) == 0) goto LAB_08004dec;\n            len = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *pValue = ptr + 1;\nLAB_08004dec:\n            len = *ptr;\n          }\n          if ((int)len < 0) {\n            len = -len;\n            *(undefined *)((int)value + 0x43) = 0x2d;\n          }\n          hexDigits = \"0123456789ABCDEF\";\n          n = 10;\n        }\n        temp = value[1];\n        value[2] = temp;\n        dest = str;\n        if ((int)temp < 0) {\n          if (len != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)value + 0x42) = *hexDigits;\n          dest = (char *)((int)value + 0x42);\n        }\n        else {\n          *value = *value & 0xfffffffb;\n          if (len == 0) {\n            if (temp != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              temp = len / n;\n              dest = dest + -1;\n              *dest = hexDigits[len - n * temp];\n              len = temp;\n            } while (temp != 0);\n          }\n        }\n        if (((n == 8) && ((int)(*value << 0x1f) < 0)) && ((int)value[1] <= (int)value[4]))\n        {\n          dest[-1] = '0';\n          dest = dest + -1;\n        }\n        value[4] = (int)str - (int)dest;\n        str = dest;\n        goto LAB_08004ec2;\n      }\n      ptr = *pValue;\n      *pValue = ptr + 1;\n      *(char *)((int)value + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      str = (char *)((int)value + 0x42);\n      len = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_08004e52:\n            len = *value;\n            ptr = *pValue;\n            if ((len & 0x80) == 0) {\n              *pValue = ptr + 1;\n              if ((len & 0x40) == 0) goto LAB_08004e60;\n              len = (uint)*(ushort *)ptr;\n            }\n            else {\n              *pValue = ptr + 1;\nLAB_08004e60:\n              len = *ptr;\n            }\n            hexDigits = \"0123456789ABCDEF\";\n            if (byteVal == 0x6f) {\n              n = 8;\n            }\n            else {\n              n = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteVal == 0x70) {\n            *value = *value | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)value + 0x45) = 0x78;\n            hexDigits = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_08004e52;\n          if (byteVal == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)value + 0x42) = byteVal;\n        goto LAB_08004e2c;\n      }\n      ppc = (char **)*pValue;\n      *pValue = (uint *)(ppc + 1);\n      str = *ppc;\n      index = FUN_08000230(str,0,value[1]);\n      if (index != 0) {\n        value[1] = index - (int)str;\n      }\n      len = value[1];\n    }\n    value[4] = len;\n    *(undefined *)((int)value + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  len = *value;\n  pptr = (uint **)*pValue;\n  n = value[5];\n  if ((len & 0x80) == 0) {\n    *pValue = (uint *)(pptr + 1);\n    ptr = *pptr;\n    if ((len & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)n;\n  }\n  else {\n    *pValue = (uint *)(pptr + 1);\n    ptr = *pptr;\nLAB_08004f42:\n    *ptr = n;\n  }\nLAB_08004f56:\n  value[4] = 0;\nLAB_08004ec2:\n  index = FUN_08004cb0(format,value,localArray,strlen,output);\n  if ((index == -1) || (index = (*output)(format,strlen,str,value[4]), index == -1)) {\nLAB_08004ed6:\n    len = 0xffffffff;\n  }\n  else {\n    if ((int)(*value << 0x1e) < 0) {\n      for (index = 0; index < (int)(value[3] - localArray[0]); index = index + 1) {\n        result = (*output)(format,strlen,(int)value + 0x19,1);\n        if (result == -1) goto LAB_08004ed6;\n      }\n    }\n    len = value[3];\n    if ((int)value[3] < (int)localArray[0]) {\n      len = localArray[0];\n    }\n  }\n  return len;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "print_formatted_value_08004d9c",
                "param_1": "format",
                "param_2": "value",
                "param_3": "strlen",
                "param_4": "output",
                "param_5": "pValue",
                "bVar1": "byteVal",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hexDigits",
                "uVar6": "n",
                "ppuVar7": "pptr",
                "ppcVar8": "ppc",
                "uVar9": "len",
                "uVar10": "temp",
                "pcVar11": "dest",
                "pcVar12": "str",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "process_data_08004fdc",
            "code": "\nvoid processData_08004fdc(undefined4 data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataPtr;\n  undefined4 dataVar;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  \n  dataPtr = DAT_200000a0;\n  dataVar = data;\n  temp1 = param2;\n  temp2 = param3;\n  temp3 = param4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  FUN_08004a84(dataPtr,*(undefined4 *)(dataPtr + 8),data,&temp1,dataVar,&temp1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataPtr",
                "uVar2": "dataVar",
                "uStack_c": "temp1",
                "uStack_8": "temp2",
                "uStack_4": "temp3"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08004a84",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "update_param_if_error_0800500c",
            "code": "\nvoid updateParamIfError_0800500c(int *result,undefined4 value)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUN_08004094(value);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "update_param_if_error_0800500c",
                "param_1": "result",
                "param_2": "value",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "update_and_validate_data_080050d0",
            "code": "\nuint update_and_validate_data_080050d0(undefined4 *output_ptr,undefined4 *input_ptr)\n\n{\n  int data_offset;\n  uint result;\n  ushort flags;\n  \n  data_offset = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  if (input_ptr == &DAT_08005fc0) {\n    input_ptr = *(undefined4 **)(data_offset + 4);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_08005fe0) {\n    input_ptr = *(undefined4 **)(data_offset + 8);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_08005fa0) {\n    input_ptr = *(undefined4 **)(data_offset + 0xc);\n  }\n  flags = *(ushort *)(input_ptr + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_ptr = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_ptr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_ptr[0xd] != input_ptr + 0x11) {\n          FUN_080048dc(output_ptr);\n        }\n        input_ptr[0xd] = 0;\n      }\n      *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xffdb;\n      input_ptr[1] = 0;\n      *input_ptr = input_ptr[4];\n    }\n    *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) | 8;\n  }\n  if ((input_ptr[4] == 0) && ((*(ushort *)(input_ptr + 3) & 0x280) != 0x200)) {\n    FUN_080054fc(output_ptr,input_ptr);\n  }\n  flags = *(ushort *)(input_ptr + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input_ptr[5];\n    }\n    input_ptr[2] = result;\n  }\n  else {\n    input_ptr[2] = 0;\n    input_ptr[6] = -input_ptr[5];\n  }\n  if (input_ptr[4] == 0) {\n    flags = *(ushort *)(input_ptr + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "update_and_validate_data_080050d0",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "iVar1": "data_offset",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080054fc",
                "FUN_080048dc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_data_080051ac",
            "code": "\nvoid processData_080051ac(void)\n\n{\n  uint *dataPtr;\n  int offset;\n  int *pointer;\n  int *tempPointer;\n  uint value;\n  ushort flags;\n  int tempOffset;\n  code *functionPtr;\n  int var1;\n  uint var2;\n  code *jumpTable;\n  bool isZero;\n  undefined8 result;\n  \n  FUN_080055d0(6);\n  jumpTable = (code *)0x80051bb;\n  result = FUN_080040f8(1);\n  pointer = (int *)((ulonglong)result >> 0x20);\n  dataPtr = (uint *)result;\n  flags = *(ushort *)(pointer + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    offset = pointer[4];\n    if (offset != 0) {\n      tempOffset = value << 0x1e;\n      isZero = tempOffset == 0;\n      var1 = *pointer;\n      if (isZero) {\n        tempOffset = pointer[5];\n      }\n      *pointer = offset;\n      if (!isZero) {\n        tempOffset = 0;\n      }\n      pointer[2] = tempOffset;\n      for (var1 = var1 - offset; 0 < var1; var1 = var1 - tempOffset) {\n        tempOffset = (*(code *)pointer[10])(dataPtr,pointer[8],offset,var1);\n        if (tempOffset < 1) {\n          flags = *(ushort *)(pointer + 3);\n          goto LAB_080052b2;\n        }\n        offset = offset + tempOffset;\n      }\n    }\n  }\n  else if (((0 < pointer[1]) || (0 < pointer[0x10])) &&\n          (functionPtr = (code *)pointer[0xb], functionPtr != (code *)0x0)) {\n    var2 = *dataPtr;\n    *dataPtr = 0;\n    if ((flags & 0x1000) == 0) {\n      offset = (*functionPtr)(dataPtr,pointer[8],value & 0x1000,1);\n      if ((offset == -1) && (value = *dataPtr, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(pointer + 3) = *(ushort *)(pointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *dataPtr = var2;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      offset = pointer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer + 3) << 0x1d) < 0) &&\n       (offset = offset - pointer[1], pointer[0xd] != 0)) {\n      offset = offset - pointer[0x10];\n    }\n    offset = (*(code *)pointer[0xb])(dataPtr,pointer[8],offset,0);\n    flags = *(ushort *)(pointer + 3);\n    if ((offset == -1) &&\n       ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(pointer + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    pointer[1] = 0;\n    *pointer = pointer[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((offset != -1 || (*dataPtr == 0)))) {\n      pointer[0x15] = offset;\n    }\n    tempPointer = (int *)pointer[0xd];\n    *dataPtr = var2;\n    if (tempPointer != (int *)0x0) {\n      if (tempPointer != pointer + 0x11) {\n        FUN_080048dc(dataPtr);\n      }\n      pointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "dataPtr",
                "iVar2": "offset",
                "piVar3": "pointer",
                "piVar4": "tempPointer",
                "uVar5": "value",
                "uVar6": "flags",
                "iVar7": "tempOffset",
                "pcVar8": "functionPtr",
                "iVar9": "var1",
                "uVar10": "var2",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isZero",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *dataArray,int *infoArray)\n\n{\n  undefined4 result;\n  int index;\n  int *ptr;\n  uint value;\n  ushort flag;\n  int size;\n  undefined4 var4;\n  undefined4 var5;\n  code *callback;\n  int count;\n  uint temp;\n  code *jmpTable;\n  bool bVar10;\n  \n  if (infoArray[4] != 0) {\n    if ((dataArray != (uint *)0x0) && (dataArray[6] == 0)) {\n      FUN_080053a0();\n    }\n    if (infoArray == &DAT_08005fc0) {\n      infoArray = (int *)dataArray[1];\n    }\n    else if (infoArray == (int *)&DAT_08005fe0) {\n      infoArray = (int *)dataArray[2];\n    }\n    else if (infoArray == (int *)&DAT_08005fa0) {\n      infoArray = (int *)dataArray[3];\n    }\n    if (*(short *)(infoArray + 3) != 0) {\n      flag = *(ushort *)(infoArray + 3);\n      value = (uint)flag;\n      if ((int)(value << 0x1c) < 0) {\n        index = infoArray[4];\n        if (index != 0) {\n          size = value << 0x1e;\n          bVar10 = size == 0;\n          count = *infoArray;\n          if (bVar10) {\n            size = infoArray[5];\n          }\n          *infoArray = index;\n          if (!bVar10) {\n            size = 0;\n          }\n          infoArray[2] = size;\n          for (count = count - index; 0 < count; count = count - size) {\n            size = (*(code *)infoArray[10])(dataArray,infoArray[8],index,count,var4,var5);\n            if (size < 1) {\n              flag = *(ushort *)(infoArray + 3);\n              goto LAB_080052b2;\n            }\n            index = index + size;\n          }\n        }\n      }\n      else if (((0 < infoArray[1]) || (0 < infoArray[0x10])) &&\n              (callback = (code *)infoArray[0xb], callback != (code *)0x0)) {\n        temp = *dataArray;\n        *dataArray = 0;\n        if ((flag & 0x1000) == 0) {\n          index = (*callback)(dataArray,infoArray[8],value & 0x1000,1);\n          if ((index == -1) && (value = *dataArray, value != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jmpTable)();\n              return result;\n            }\n            *dataArray = temp;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          index = infoArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoArray + 3) << 0x1d) < 0) &&\n           (index = index - infoArray[1], infoArray[0xd] != 0)) {\n          index = index - infoArray[0x10];\n        }\n        index = (*(code *)infoArray[0xb])(dataArray,infoArray[8],index,0);\n        flag = *(ushort *)(infoArray + 3);\n        if ((index == -1) &&\n           ((0x1d < *dataArray || (-1 < (int)((0x20400001U >> (*dataArray & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(infoArray + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jmpTable)(0xffffffff);\n          return result;\n        }\n        infoArray[1] = 0;\n        *infoArray = infoArray[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((index != -1 || (*dataArray == 0)))) {\n          infoArray[0x15] = index;\n        }\n        ptr = (int *)infoArray[0xd];\n        *dataArray = temp;\n        if (ptr != (int *)0x0) {\n          if (ptr != infoArray + 0x11) {\n            FUN_080048dc(dataArray);\n          }\n          infoArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jmpTable)();\n          return result;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jmpTable)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "dataArray",
                "param_2": "infoArray",
                "uVar1": "result",
                "iVar2": "index",
                "piVar3": "ptr",
                "uVar4": "value",
                "uVar5": "flag",
                "iVar6": "size",
                "unaff_r4": "var4",
                "unaff_r5": "var5",
                "pcVar7": "callback",
                "iVar8": "count",
                "uVar9": "temp",
                "UNRECOVERED_JUMPTABLE_00": "jmpTable"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_param_struct_0800532c",
            "code": "\nvoid initializeParamStruct_0800532c(undefined4 *paramStruct,undefined2 value1,undefined2 value2)\n\n{\n  *paramStruct = 0;\n  paramStruct[1] = 0;\n  paramStruct[2] = 0;\n  *(undefined2 *)(paramStruct + 3) = value1;\n  paramStruct[0x19] = 0;\n  *(undefined2 *)((int)paramStruct + 0xe) = value2;\n  paramStruct[4] = 0;\n  paramStruct[5] = 0;\n  paramStruct[6] = 0;\n  FUN_080048cc(paramStruct + 0x17,0,8);\n  paramStruct[9] = 0x8005609;\n  paramStruct[10] = 0x800562b;\n  paramStruct[0xb] = 0x8005663;\n  paramStruct[8] = paramStruct;\n  paramStruct[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_param_struct_0800532c",
                "param_1": "paramStruct",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_data_structure_08005374",
            "code": "\nundefined4 * initializeDataStructure_08005374(undefined4 data,int size)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  ptr = (undefined4 *)FUN_08004978(data,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = size;\n    ptr[2] = ptr + 3;\n    FUN_080048cc(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_data_structure_08005374",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initializeData_080053a0(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *tempPointer;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    tempPointer = &DAT_200000a4;\n    data[10] = &LAB_08005320_1;\n    if (data == &DAT_200000a4) {\n      tempPointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000a4) {\n      data[6] = tempPointer;\n    }\n    result = FUN_08005400();\n    data[1] = result;\n    result = FUN_08005400(data);\n    data[2] = result;\n    result = FUN_08005400(data);\n    data[3] = result;\n    FUN_0800532c(data[1],4,0);\n    FUN_0800532c(data[2],9,1);\n    FUN_0800532c(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "tempPointer"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_08005400",
            "code": "\nint * initializeData_08005400(undefined4 *outputPointer,undefined4 inputParameter1,undefined4 inputParameter2,undefined4 inputParameter3)\n\n{\n  int *tempPointer1;\n  int *tempPointer2;\n  int **dataPointerPointer;\n  \n  if (DAT_200000bc == 0) {\n    FUN_080053a0(&DAT_200000a4);\n  }\n  dataPointerPointer = (int **)&DAT_200000ec;\n  do {\n    tempPointer2 = dataPointerPointer[2];\n    tempPointer1 = dataPointerPointer[1];\n    while (tempPointer1 = (int *)((int)tempPointer1 + -1), -1 < (int)tempPointer1) {\n      if (*(short *)(tempPointer2 + 3) == 0) {\n        *(undefined2 *)((int)tempPointer2 + 0xe) = 0xffff;\n        *(undefined2 *)(tempPointer2 + 3) = 1;\n        tempPointer2[0x19] = 0;\n        *tempPointer2 = 0;\n        tempPointer2[2] = 0;\n        tempPointer2[1] = 0;\n        tempPointer2[4] = 0;\n        tempPointer2[5] = 0;\n        tempPointer2[6] = 0;\n        FUN_080048cc(tempPointer2 + 0x17,0,8,1,inputParameter3);\n        tempPointer2[0xd] = 0;\n        tempPointer2[0xe] = 0;\n        tempPointer2[0x12] = 0;\n        tempPointer2[0x13] = 0;\n        return tempPointer2;\n      }\n      tempPointer2 = tempPointer2 + 0x1a;\n    }\n    if (*dataPointerPointer == (int *)0x0) {\n      tempPointer1 = (int *)FUN_08005374(outputPointer,4);\n      *dataPointerPointer = tempPointer1;\n      if (tempPointer1 == (int *)0x0) {\n        *outputPointer = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataPointerPointer = (int **)*dataPointerPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_08005400",
                "param_1": "outputPointer",
                "param_2": "inputParameter1",
                "param_3": "inputParameter2",
                "param_4": "inputParameter3",
                "piVar1": "tempPointer1",
                "piVar2": "tempPointer2",
                "ppiVar3": "dataPointerPointer"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08005374",
                "FUN_080048cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_permissions_080054b4",
            "code": "\nundefined4 checkPermissions_080054b4(undefined4 param_1,int address,undefined4 *resultStatus,uint *permissions)\n\n{\n  int returnValue;\n  undefined4 permissionValue;\n  undefined stackVar [4];\n  uint tempValue;\n  \n  if ((*(short *)(address + 0xe) < 0) ||\n     (returnValue = FUN_080056d4(param_1,(int)*(short *)(address + 0xe),stackVar), returnValue < 0)) {\n    *permissions = 0;\n    if ((int)((uint)*(ushort *)(address + 0xc) << 0x18) < 0) {\n      permissionValue = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *permissions = (uint)((tempValue & 0xf000) == 0x2000);\n  }\n  permissionValue = 0x400;\nLAB_080054f4:\n  *resultStatus = permissionValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_permissions_080054b4",
                "param_2": "address",
                "param_3": "resultStatus",
                "param_4": "permissions",
                "iVar1": "returnValue",
                "uVar2": "permissionValue",
                "auStack_4c": "stackVar",
                "local_48": "tempValue"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "process_data_080054fc",
            "code": "\nvoid processData_080054fc(int input,int *output)\n\n{\n  ushort result;\n  int status;\n  int temp1;\n  int *temp2;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    temp1 = input;\n    temp2 = output;\n    result = FUN_080054b4(input,output,&temp1,&temp2);\n    status = FUN_08004978(input,temp1);\n    if (status != 0) {\n      *(undefined **)(input + 0x28) = &LAB_08005320_1;\n      *output = status;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[5] = temp1;\n      output[4] = status;\n      if ((temp2 != (int *)0x0) &&\n         (status = FUN_080056f8(input,(int)*(short *)((int)output + 0xe)), status != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = result | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "process_data_080054fc",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "temp1",
                "local_14": "temp2"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080054b4",
                "FUN_080056f8",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "execute_function_080055d0",
            "code": "\nint executeFunction_080055d0(uint functionIndex)\n\n{\n  int *ptrData;\n  undefined4 result;\n  int ptrFunction;\n  code *functionAddress;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 *ptrData2;\n  \n  ptrData = DAT_200000a0;\n  ptrData2 = &DAT_200000a0;\n  if (0x1f < functionIndex) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  ptrFunction = DAT_200000a0[0x11];\n  if ((ptrFunction != 0) && (functionAddress = *(code **)(ptrFunction + functionIndex * 4), functionAddress != (code *)0x0)) {\n    if (functionAddress != (code *)0x1) {\n      if (functionAddress == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(ptrFunction + functionIndex * 4) = 0;\n      (*functionAddress)(functionIndex);\n    }\n    return 0;\n  }\n  result = thunk_FUN_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  ptrFunction = FUN_080040fc(result,functionIndex,functionIndex,0,ptrData2,unusedVar1,unusedVar2,unusedVar3);\n  if ((ptrFunction == -1) && (DAT_20000674 != 0)) {\n    *ptrData = DAT_20000674;\n  }\n  return ptrFunction;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "execute_function_080055d0",
                "param_1": "functionIndex",
                "piVar1": "ptrData",
                "uVar2": "result",
                "iVar3": "ptrFunction",
                "pcVar4": "functionAddress",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "in_lr": "unusedVar3",
                "puVar5": "ptrData2"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "FUN_080040fc",
                "thunk_FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "initialize_thunk_0800410c",
            "code": "\nundefined4 initialize_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "initialize_thunk_0800410c"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_data_08005608",
            "code": "\nvoid updateData_08005608(undefined4 dataBuffer,int offset)\n\n{\n  int result;\n  uint modifiedValue;\n  bool isValidResult;\n  \n  result = FUN_0800573c(dataBuffer,(int)*(short *)(offset + 0xe));\n  isValidResult = -1 < result;\n  if (isValidResult) {\n    modifiedValue = *(int *)(offset + 0x54) + result;\n  }\n  else {\n    modifiedValue = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (isValidResult) {\n    *(uint *)(offset + 0x54) = modifiedValue;\n  }\n  if (!isValidResult) {\n    *(short *)(offset + 0xc) = (short)modifiedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_data_08005608",
                "param_1": "dataBuffer",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "modifiedValue",
                "bVar3": "isValidResult"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "process_data_0800562a",
            "code": "\nvoid processData_0800562a(int *resultArray,int inputData,undefined4 paramA,undefined4 paramB)\n\n{\n  int returnValue;\n  undefined4 tmpVar1;\n  undefined4 tmpVar2;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(inputData + 0xc) << 0x17) < 0) {\n    FUN_08005718(resultArray,(int)*(short *)(inputData + 0xe),0,2);\n  }\n  *(ushort *)(inputData + 0xc) = *(ushort *)(inputData + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  returnValue = FUN_080040ec((int)*(short *)(inputData + 0xe),paramA,paramB,paramB,paramB,tmpVar1,\n                       tmpVar2,linkRegister);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *resultArray = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "resultArray",
                "param_2": "inputData",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "returnValue",
                "unaff_r4": "tmpVar1",
                "unaff_r5": "tmpVar2",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "update_status_08005662",
            "code": "\nvoid updateStatus_08005662(undefined4 data,int ptr)\n\n{\n  int result;\n  ushort status;\n  bool isError;\n  \n  result = FUN_08005718(data,(int)*(short *)(ptr + 0xe));\n  isError = result == -1;\n  if (isError) {\n    status = *(ushort *)(ptr + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(ptr + 0x54) = result;\n    status = *(ushort *)(ptr + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(ptr + 0xc) = status;\n  }\n  if (!isError) {\n    *(ushort *)(ptr + 0xc) = status;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "update_status_08005662",
                "param_1": "data",
                "param_2": "ptr",
                "iVar1": "result",
                "uVar2": "status",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "parse_data_080056d4",
            "code": "\nvoid parseData_080056d4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUN_080040d6(arg1,arg2,arg2,0,arg3);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "parse_data_080056d4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_assign_value_080056f8",
            "code": "\nvoid checkAndAssignValue_080056f8(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e0(input);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_assign_value_080056f8",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "extract_and_store_error_code_08005718",
            "code": "\nvoid extract_and_store_error_code_08005718(int *error_code_pointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e4(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *error_code_pointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "extract_and_store_error_code_08005718",
                "param_1": "error_code_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "check_and_update_value_0800573c",
            "code": "\nvoid checkAndUpdateValue_0800573c(int *value,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e8(param2,param3,param4,param4,param4);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *value = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "check_and_update_value_0800573c",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_flags_08005760",
            "code": "\nvoid initializeFlags_08005760(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeFlags_08005760;\n  FUN_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_flags_08005760",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 119954,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000682",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004648",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047c0",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "thunk_FUN_0800410c",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}