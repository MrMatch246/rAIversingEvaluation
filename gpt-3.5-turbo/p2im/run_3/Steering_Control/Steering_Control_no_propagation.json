{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_and_call_func_000817c8",
                "param_1": "data",
                "param_2": "param_2_copy",
                "param_3": "param_3_copy",
                "param_4": "param_4_copy",
                "uStack_c": "data_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy",
                "*DAT_000817ec": "*func_ptr"
            },
            "code": "void process_data_and_call_func_000817c8(undefined4 data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 data_copy = param_2;\n  undefined4 param_3_copy = param_3;\n  undefined4 param_4_copy = param_4;\n  call_func(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data, &data_copy);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "process_data_and_call_func_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_parameters_00081560",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "FUN_0008151c": "execute_error_handling"
            },
            "code": "int compare_parameters_00081560(int first_parameter, int second_parameter)\n{\n  if (first_parameter != second_parameter) {\n    execute_error_handling();\n  }\n  return first_parameter;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "compare_parameters_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "find_first_n_bits_set_00081684",
                "param_1": "bits",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "n",
                "iVar1": "count"
            },
            "code": "int find_first_n_bits_set_00081684(uint *bits, uint mask, uint value, int n){\n    int i = 0;\n    while (n > 0) {\n        if ((*bits & mask) != value) {\n            int count = 0;\n            while (n > 0 && (*bits & mask) == value) {\n                count++;\n                bits++;\n                n--;\n            }\n            return count;\n        }\n        bits++;\n        n--;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "find_first_n_bits_set_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "puVar7": "dest",
                "bVar8": "found_null"
            },
            "code": "void copy_string_000825cc(uint *dest, uint *src) {\n    char current_char;\n    ushort current_short;\n    uint *src_ptr;\n    uint *dest_ptr;\n    uint current_word;\n    uint next_word;\n    bool found_null;\n\n    if ((((uint)dest ^ (uint)src) & 3) != 0) {\n        do {\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            src = (uint *)((int)src + 1);\n            dest = (uint *)((int)dest + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    if (((uint)src & 3) != 0) {\n        src_ptr = src;\n\n        if (((uint)src & 1) != 0) {\n            src_ptr = (uint *)((int)src + 1);\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            dest = (uint *)((int)dest + 1);\n\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n\n        src = src_ptr;\n\n        if (((uint)src_ptr & 2) != 0) {\n            src = (uint *)((int)src_ptr + 2);\n            current_short = *(ushort *)src_ptr;\n            found_null = (current_short & 0xff) == 0;\n\n            if (found_null) {\n                *(char *)dest = (char)current_short;\n            } else {\n                *(ushort *)dest = current_short;\n                found_null = (current_short & 0xff00) == 0;\n                dest = (uint *)((int)dest + 2);\n            }\n\n            if (found_null) {\n                return;\n            }\n        }\n    }\n\n    current_word = *src;\n    src_ptr = src + 1;\n    dest_ptr = dest;\n\n    if (((uint)src & 4) != 0) {\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto LAB_00082630;\n        }\n\n        dest_ptr = dest + 1;\n        *dest = current_word;\n        src_ptr = src + 2;\n        current_word = src[1];\n    }\n\n    while (true) {\n        next_word = *src_ptr;\n        found_null = (current_word + 0xfefefeff & ~current_word & 0x80808080) != 0;\n        dest = dest_ptr;\n\n        if (found_null) {\n            break;\n        }\n\n        dest_ptr = dest + 1;\n        *dest = current_word;\n        current_word = next_word;\n\n        found_null = (next_word + 0xfefefeff & ~next_word & 0x80808080) != 0;\n\n        if (found_null) {\n            break;\n        }\n\n        src_ptr = src_ptr + 2;\n        dest_ptr = dest + 2;\n        *dest = current_word;\n    }\n\nLAB_00082630:\n    do {\n        *(char *)dest = (char)current_word;\n        next_word = current_word & 0xff;\n        current_word = current_word >> 8 | current_word << 0x18;\n        dest = (uint *)((int)dest + 1);\n    } while (next_word != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "DAT_00080134": "should_use_default_parameter",
                "PTR_DAT_0008013c": "default_parameter",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "function"
            },
            "code": "void execute_function_if_not_null_00080118(int parameter_1, char* parameter_2, int parameter_3, int parameter_4)\n{\n  if (DAT_00080134)\n  {\n    parameter_2 = PTR_DAT_0008013c;\n  }\n  if (*DAT_00080140 != 0 && DAT_00080144 != NULL)\n  {\n    (*DAT_00080144)(DAT_00080140, parameter_2, parameter_3, DAT_00080144, parameter_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_character_in_range_00080aa8",
                "param_1": "character",
                "uVar1": "mask"
            },
            "code": "int check_character_in_range_00080aa8(uint character) {\n    uint mask;\n    if (character < 45) {\n        if (character < 32) {\n            mask = 1 << (character & 0xff);\n            if ((mask & *(uint *)(DAT_00080ae8 + 0x18)) != mask) {\n                *(uint *)(DAT_00080ae8 + 0x10) = mask;\n            }\n        }\n        else {\n            mask = 1 << (character - 32 & 0xff);\n            if ((mask & *(uint *)(DAT_00080ae8 + 0x108)) != mask) {\n                *(uint *)(DAT_00080ae8 + 0x100) = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000803fc",
                "FUN_000813dc",
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "check_character_in_range_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "check_and_update_00080f0c",
                "param_1": "index",
                "param_2": "value",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "uint_1",
                "uVar5": "uint_2",
                "uVar6": "uint_3",
                "bVar7": "byte_1",
                "bVar8": "byte_2",
                "iVar9": "index_1",
                "iVar10": "int_1"
            },
            "code": "int check_and_update_00080f0c(int index, int value) {\\n\\\n  undefined *data_ptr_1 = PTR_DAT_00081008;\\n\\\n  undefined *data_ptr_2 = PTR_DAT_0008100c;\\n\\\n  int result = index;\\n\\\n  if (data_ptr_1[index * 0x1c + 0xc] != \"\\0\") {\\n\\\n    if ((data_ptr_2[index] & 0xf) == 4) {\\n\\\n      result = FUN_00080d58(DAT_00081010, data_ptr_1[index * 0x1c + 0x19]);\\n\\\n    }\\n\\\n    byte byte_1 = data_ptr_2[index];\\n\\\n    byte byte_2 = byte_1 & 0xf;\\n\\\n    if ((byte_2 < 3) && (byte_1 != 0)) {\\n\\\n      if (byte_2 == 2 && value == 0) {\\n\\\n        return result;\\n\\\n      }\\n\\\n      else if (byte_2 == 1 && value == 2) {\\n\\\n        return result;\\n\\\n      }\\n\\\n      else if (byte_2 == 3) {\\n\\\n        if (value == 1) {\\n\\\n          return result;\\n\\\n        }\\n\\\n        goto LAB_00080f68;\\n\\\n      }\\n\\\n    }\\n\\\n    if (value != 1) {\\n\\\nLAB_00080f68:\\n\\\n      if (value == 0) {\\n\\\n        int index_1 = index * 0x1c;\\n\\\n        FUN_00080aa8(*(undefined4 *)(data_ptr_1 + index_1 + 8));\\n\\\n        result = FUN_00080a30(*(undefined4 *)(data_ptr_1 + index_1), 3, *(undefined4 *)(data_ptr_1 + index_1 + 4), 0);\\n\\\n        byte_1 = data_ptr_2[index] & 0xf0 | 2;\\n\\\n      }\\n\\\n      else {\\n\\\n        if (value != 2) {\\n\\\n          return result;\\n\\\n        }\\n\\\n        int index_1 = index * 0x1c;\\n\\\n        FUN_00080aa8(*(undefined4 *)(data_ptr_1 + index_1 + 8));\\n\\\n        result = FUN_00080a30(*(undefined4 *)(data_ptr_1 + index_1), 3, *(undefined4 *)(data_ptr_1 + index_1 + 4), 1);\\n\\\n        byte_1 = data_ptr_2[index] & 0xf0 | 1;\\n\\\n      }\\n\\\n      data_ptr_2[index] = byte_1;\\n\\\n      return result;\\n\\\n    }\\n\\\n    int index_1 = index * 0x1c;\\n\\\n    int int_1 = *(int *)(data_ptr_1 + index_1);\\n\\\n    if (byte_1 >> 4 == 0) {\\n\\\n      uVar5 = 4;\\n\\\n    }\\n\\\n    else {\\n\\\n      uVar5 = 5;\\n\\\n    }\\n\\\n    result = FUN_00080a30(int_1, uVar5, *(undefined4 *)(data_ptr_1 + index_1 + 4), *(undefined4 *)(data_ptr_1 + index_1 + 0x10));\\n\\\n    data_ptr_2[index] = data_ptr_2[index] & 0xf0 | 3;\\n\\\n    if (*(int *)(int_1 + 0x18) == -1) {\\n\\\n      uint uVar4 = *(uint *)(data_ptr_1 + index_1 + 8);\\n\\\n      if (0x2c < uVar4) {\\n\\\n        return 1;\\n\\\n      }\\n\\\n      if (uVar4 < 0x20) {\\n\\\n        uVar4 = 1 << (uVar4 & 0xff);\\n\\\n        uint uVar6 = *(uint *)(DAT_00080b28 + 0x18) & uVar4;\\n\\\n        if (uVar6 == uVar4) {\\n\\\n          *(uint *)(DAT_00080b28 + 0x14) = uVar6;\\n\\\n        }\\n\\\n      }\\n\\\n      else {\\n\\\n        uVar4 = 1 << (uVar4 - 0x20 & 0xff);\\n\\\n        uint uVar6 = *(uint *)(DAT_00080b28 + 0x108) & uVar4;\\n\\\n        if (uVar6 == uVar4) {\\n\\\n          *(uint *)(DAT_00080b28 + 0x104) = uVar6;\\n\\\n        }\\n\\\n      }\\n\\\n      return 0;\\n\\\n    }\\n\\\n  }\\n\\\n  return result;\\n\\\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "check_and_update_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_block_00083a74",
                "param_1": "base_address",
                "param_2": "size",
                "iVar1": "data_segment",
                "puVar2": "data_pointer",
                "iVar3": "allocation_result",
                "uVar4": "aligned_size",
                "iVar5": "block_address"
            },
            "code": "int allocate_memory_block_00083a74(int base_address, int size) {\n  int data_segment = DAT_00083b04;\n  do_nothing();\n  uint aligned_size = *(uint *)(*(int *)(data_segment + 8) + 4) & 0xfffffffc;\n  int block_address = ((aligned_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < block_address) {\n    int allocation_result = FUN_0008236c(base_address, 0);\n    if (allocation_result == *(int *)(data_segment + 8) + aligned_size) {\n      allocation_result = FUN_0008236c(base_address, -block_address);\n      undefined *data_pointer = PTR_DAT_00083b08;\n      if (allocation_result != -1) {\n        int data_address = *(int *)PTR_DAT_00083b08;\n        *(uint *)(*(int *)(data_segment + 8) + 4) = aligned_size - block_address | 1;\n        *(int *)data_pointer = data_address - block_address;\n        do_nothing_2(base_address);\n        return 1;\n      }\n      block_address = FUN_0008236c(base_address, 0);\n      data_pointer = PTR_DAT_00083b08;\n      aligned_size = block_address - *(int *)(data_segment + 8);\n      if (0xf < (int)aligned_size) {\n        int data_address = *DAT_00083b0c;\n        *(uint *)(*(int *)(data_segment + 8) + 4) = aligned_size | 1;\n        *(int *)data_pointer = block_address - data_address;\n      }\n    }\n  }\n  do_nothing_2(base_address);\n  return 0;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "findValueFromParam_000844e0",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr",
                "iVar2": "returnValue"
            },
            "code": "void findValueFromParam_000844e0(int* result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr = PTR_DAT_00084504;\n  *(undefined4 *)ptr = 0;\n  int returnValue = FUN_00080ebe(param_2, param_3, param_4);\n  if ((returnValue == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "findValueFromParam_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "allocator",
                "param_2": "size",
                "iVar1": "prev_block",
                "uVar2": "flags",
                "iVar3": "next_block",
                "uVar4": "block_size",
                "iVar5": "block_start",
                "iVar6": "allocator_start",
                "iVar7": "chunk_index_shifted",
                "iVar8": "block_end",
                "uVar9": "block_header",
                "uVar10": "largest_block_size",
                "uVar11": "chunk_index",
                "uVar12": "bitmap",
                "prev_block": "prev_block",
                "next_block": "next_block",
                "flags": "flags",
                "block_size": "block_size",
                "block_start": "block_start",
                "allocator_start": "allocator_start",
                "chunk_index_shifted": "chunk_index_shifted",
                "block_end": "block_end",
                "block_header": "block_header",
                "largest_block_size": "largest_block_size",
                "chunk_index": "chunk_index",
                "bitmap": "bitmap"
            },
            "code": "void allocate_memory_block_00083b10(uintptr_t allocator, size_t size)\n{\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  uintptr_t allocator_start = DAT_00083c98;\n  uint flags = *(uint *)(size + -4);\n  uintptr_t block_start = size + -8;\n  uint block_size = flags & 0xfffffffe;\n  uintptr_t block_end = block_start + block_size;\n  uint block_header = *(uint *)(block_end + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083c98 + 8) == block_end) {\n    block_header = block_header + block_size;\n    if (-1 < (int)(flags << 0x1f)) {\n      block_start = block_start - *(int *)(size + -8);\n      uintptr_t prev_block = *(uintptr_t *)(block_start + 0xc);\n      uintptr_t next_block = *(uintptr_t *)(block_start + 8);\n      block_header = block_header + *(int *)(size + -8);\n      *(uintptr_t *)(next_block + 0xc) = prev_block;\n      *(uintptr_t *)(prev_block + 8) = next_block;\n    }\n    uint largest_block_size = *DAT_00083ca0;\n    *(uint *)(block_start + 4) = block_header | 1;\n    *(int *)(allocator_start + 8) = block_start;\n    if (largest_block_size <= block_header) {\n      FUN_00083a74(allocator, *(uintptr_t *)PTR_DAT_00083ca4);\n    }\n  }\n  else {\n    flags = flags & 1;\n    *(uint *)(block_end + 4) = block_header;\n    if (flags == 0) {\n      block_start = block_start - *(int *)(size + -8);\n      uintptr_t prev_block = *(uintptr_t *)(block_start + 8);\n      block_size = block_size + *(int *)(size + -8);\n      if (prev_block == allocator_start + 8) {\n        flags = 1;\n      }\n      else {\n        uintptr_t next_block = *(uintptr_t *)(block_start + 0xc);\n        *(uintptr_t *)(prev_block + 0xc) = next_block;\n        *(uintptr_t *)(next_block + 8) = prev_block;\n      }\n    }\n    else {\n      flags = 0;\n    }\n    if (-1 < *(int *)(block_end + block_header + 4) << 0x1f) {\n      block_size = block_size + block_header;\n      uintptr_t next_block = *(uintptr_t *)(block_end + 8);\n      if ((flags == 0) && (next_block == DAT_00083c9c)) {\n        *(uintptr_t *)(allocator_start + 0x14) = block_start;\n        *(uintptr_t *)(allocator_start + 0x10) = block_start;\n        *(uintptr_t *)(block_start + 0xc) = next_block;\n        *(uintptr_t *)(block_start + 8) = next_block;\n        *(uint *)(block_start + 4) = block_size | 1;\n        *(uint *)(block_start + block_size) = block_size;\n        goto LAB_00083ba4;\n      }\n      uintptr_t prev_block = *(uintptr_t *)(block_end + 0xc);\n      *(uintptr_t *)(next_block + 0xc) = prev_block;\n      *(uintptr_t *)(prev_block + 8) = next_block;\n    }\n    *(uint *)(block_start + 4) = block_size | 1;\n    *(uint *)(block_start + block_size) = block_size;\n    if (flags == 0) {\n      if (block_size < 0x200) {\n        uint bitmap = *(uint *)(allocator_start + 4);\n        uintptr_t chunk_start = allocator_start + (block_size & 0xfffffff8);\n        uintptr_t chunk_next = *(uintptr_t *)(chunk_start + 8);\n        *(uintptr_t *)(block_start + 8) = chunk_next;\n        *(uintptr_t *)(block_start + 0xc) = chunk_start;\n        *(uint *)(allocator_start + 4) = bitmap | 1 << ((int)(block_size >> 3) >> 2 & 0xffU);\n        *(uintptr_t *)(chunk_start + 8) = block_start;\n        *(uintptr_t *)(chunk_next + 0xc) = block_start;\n        do_nothing();\n        return;\n      }\n      uint chunk_index = block_size >> 9;\n      uintptr_t chunk_start;\n      uintptr_t chunk_next;\n      if (chunk_index < 5) {\n        uint chunk_offset = (block_size >> 6) + 0x38;\n        uint chunk_index_shifted = chunk_offset * 2;\n        chunk_start = allocator_start + chunk_index_shifted * 4;\n        chunk_next = *(uintptr_t *)(chunk_start + 8);\n      }\n      else if (chunk_index < 0x15) {\n        uint chunk_offset = chunk_index + 0x5b;\n        uint chunk_index_shifted = chunk_offset * 2;\n        chunk_start = allocator_start + chunk_index_shifted * 4;\n        chunk_next = *(uintptr_t *)(chunk_start + 8);\n      }\n      else if (chunk_index < 0x55) {\n        uint chunk_offset = (block_size >> 0xc) + 0x6e;\n        uint chunk_index_shifted = chunk_offset * 2;\n        chunk_start = allocator_start + chunk_index_shifted * 4;\n        chunk_next = *(uintptr_t *)(chunk_start + 8);\n      }\n      else if (chunk_index < 0x155) {\n        uint chunk_offset = (block_size >> 0xf) + 0x77;\n        uint chunk_index_shifted = chunk_offset * 2;\n        chunk_start = allocator_start + chunk_index_shifted * 4;\n        chunk_next = *(uintptr_t *)(chunk_start + 8);\n      }\n      else if (chunk_index < 0x555) {\n        uint chunk_offset = (block_size >> 0x12) + 0x7c;\n        uint chunk_index_shifted = chunk_offset * 2;\n        chunk_start = allocator_start + chunk_index_shifted * 4;\n        chunk_next = *(uintptr_t *)(chunk_start + 8);\n      }\n      else {\n        uint chunk_index_shifted = 0xfc * 4;\n        chunk_start = allocator_start + chunk_index_shifted;\n        chunk_next = *(uintptr_t *)(chunk_start + 8);\n      }\n      while (chunk_next != chunk_start) {\n        if ((*(uint *)(chunk_next + 4) & 0xfffffffc) <= block_size) break;\n        chunk_next = *(uintptr_t *)(chunk_next + 8);\n      }\n      uintptr_t prev_block = *(uintptr_t *)(chunk_next + 0xc);\n      *(uintptr_t *)(block_start + 0xc) = chunk_next;\n      *(uintptr_t *)(block_start + 8) = prev_block;\n      *(uintptr_t *)(chunk_next + 8) = block_start;\n      *(uintptr_t *)(prev_block + 0xc) = block_start;\n    }\n  }\nLAB_00083ba4:\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_00083a74",
                "FUN_00081f98",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "get_default_value_00080e80"
            },
            "code": "int get_default_value_00080e80(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "get_default_value_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "formatNumber_thunk_0008113a",
                "param_1": "formatter",
                "param_2": "number",
                "param_3": "base",
                "param_4": "arg",
                "iVar1": "result",
                "iVar2": "negativeSign",
                "FUN_000810cc": "formatNumber",
                "FUN_000810fc": "formatNumber"
            },
            "code": "int formatNumber_thunk_0008113a(void* formatter, uint32_t number, uint8_t base, void* arg)\n{\n  int result;\n  if (base == 0) {\n    result = (**(code **)*formatter)(formatter,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int32_t)number < 0) {\n      int32_t negativeSign = formatNumber_thunk_0008113a(formatter, 0x2d, 0, arg);\n      int32_t absoluteValue = formatNumber_thunk_0008113a(formatter, -number, 10, arg);\n      result = absoluteValue + negativeSign;\n      return result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = formatNumber_thunk_0008113a(formatter, number, base, arg);\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "formatNumber_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "getParamValue_0008236c",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "dataPointer",
                "iVar2": "funcResult"
            },
            "code": "void getParamValue_0008236c(int *output, undefined4 input) {\n  undefined *dataPointer;\n  int funcResult;\n  \n  dataPointer = PTR_DAT_0008238c;\n  *(undefined4 *)PTR_DAT_0008238c = 0;\n  funcResult = getValue(input);\n  if ((funcResult == -1) && (*(int *)dataPointer != 0)) {\n    *output = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "getParamValue_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "setDefaultErrorCode_00080d62",
                "param_1": "errorCode"
            },
            "code": "void setDefaultErrorCode_00080d62(int errorCode)\n{\n    *(int *)(errorCode + 0x14) = 0xFFFF;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "setDefaultErrorCode_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_input_000842a4",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "input_array",
                "param_4": "input_array_value",
                "uVar1": "input_array_value_3",
                "uVar2": "input_array_value_2",
                "puVar3": "input_array_value_ptr",
                "iVar4": "input_array_value_4"
            },
            "code": "uint process_input_000842a4(int input_length, uint input_value, undefined4 *input_array, undefined4 input_array_value)\n{\n  ushort input_array_value_3 = *(ushort *)(input_array + 3);\n  uint input_array_value_2 = (uint)input_array_value_3;\n  input_array[2] = input_array[6];\n  int input_array_value_4 = input_array[4];\n  if ((-1 < (int)(input_array_value_2 << 0x1c)) || (input_array_value_4 == 0)) {\n    input_array_value_4 = process_input_000842a4_helper(input_length, input_array, input_array_value_3, input_array_value_2, input_array_value);\n    if (input_array_value_4 != 0) {\n      return 0xffffffff;\n    }\n    input_array_value_3 = *(ushort *)(input_array + 3);\n    input_array_value_4 = input_array[4];\n    input_array_value_2 = (uint)input_array_value_3;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(input_array_value_2 << 0x12) < 0) {\n    undefined *input_array_value_ptr = (undefined *)*input_array;\n    input_array_value_4 = (int)input_array_value_ptr - input_array_value_4;\n    if (input_array_value_4 < (int)input_array[5]) {\n      input_array_value_4 = input_array_value_4 + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    input_array[0x19] = input_array[0x19] & 0xffffdfff;\n    undefined *input_array_value_ptr = (undefined *)*input_array;\n    *(ushort *)(input_array + 3) = input_array_value_3 | 0x2000;\n    input_array_value_4 = (int)input_array_value_ptr - input_array_value_4;\n    if (input_array_value_4 < (int)input_array[5]) goto LAB_000842d8;\n  }\n  input_array_value_4 = process_input_000842a4_helper_2(input_length, input_array);\n  if (input_array_value_4 != 0) {\n    return 0xffffffff;\n  }\n  undefined *input_array_value_ptr = (undefined *)*input_array;\n  input_array_value_4 = 1;\nLAB_000842d8:\n  input_array[2] = input_array[2] + -1;\n  *input_array = input_array_value_ptr + 1;\n  *input_array_value_ptr = (char)input_value;\n  if (((input_array[5] == input_array_value_4) || (((int)((uint)*(ushort *)(input_array + 3) << 0x1f) < 0 && (input_value == 10)))) && (input_array_value_4 = process_input_000842a4_helper_2(input_length, input_array), input_array_value_4 != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_input_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "clear_and_initialize_array_000814f6",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "calculated_value",
                "FUN_00082688": "calculate_value",
                "FUN_000814d0": "set_array_values"
            },
            "code": "undefined4 * clear_and_initialize_array_000814f6(undefined4 *array, int size)\n{\n  undefined4 value = 0;\n  array[0] = value;\n  array[1] = value;\n  array[2] = value;\n  if (size != 0) {\n    undefined4 calculated_value = calculate_value(size);\n    set_array_values(array, size, calculated_value);\n  }\n  return array;\n}\n",
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "clear_and_initialize_array_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "calculateSum_00080e88",
                "param_1": "new_value",
                "puVar1": "current_value_ptr",
                "iVar2": "previous_value"
            },
            "code": "int calculateSum_00080e88(int new_value)\n{\n  undefined *current_value_ptr;\n  int previous_value;\n  current_value_ptr = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  previous_value = *(int *)current_value_ptr;\n  *(int *)current_value_ptr = new_value + previous_value;\n  return previous_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "calculateSum_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "add_to_list_000836d8",
                "puVar1": "data",
                "puVar2": "list_data_ptr",
                "iVar3": "list_len",
                "iVar4": "list_ptr",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_ptr"
            },
            "code": "void add_to_list_000836d8(void)\n{\n  undefined *data = data_ptr;\n  if (list_empty == 1) {\n    return;\n  }\n  int list_ptr = *(int *)list_ptr_ptr;\n  undefined4 *list_data_ptr = *(undefined4 **)(list_ptr + 0x148);\n  if (list_data_ptr == (undefined4 *)0x0) {\n    list_data_ptr = (undefined4 *)(list_ptr + 0x14c);\n    *(undefined4 **)(list_ptr + 0x148) = list_data_ptr;\n  }\n  int list_len = list_data_ptr[1];\n  if (0x1f < list_len) {\n    if ((list_full == 0) || (list_data_ptr = (undefined4 *)malloc(400), list_data_ptr == (undefined4 *)0x0)) {\n      return;\n    }\n    *list_data_ptr = *(undefined4 *)(list_ptr + 0x148);\n    list_data_ptr[1] = 0;\n    list_len = 0;\n    *(undefined4 **)(list_ptr + 0x148) = list_data_ptr;\n    list_data_ptr[0x62] = 0;\n    list_data_ptr[99] = 0;\n  }\n  list_data_ptr[1] = list_len + 1;\n  list_data_ptr[list_len + 2] = data;\n  (*(code *)jumptable_ptr)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "add_to_list_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "save_value_if_condition_met_000812b8",
                "param_1": "data_structure_ptr",
                "param_2": "value",
                "iVar1": "data_ptr",
                "uVar2": "new_data_structure_capacity",
                "DAT_00081308": "DATA_STRUCTURE_CAPACITY",
                "*(int *)(param_1 + 0x14)": "data_ptr",
                "*(int *)(param_1 + 0x18)": "data_structure_size",
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": "data_structure_capacity",
                "*(int *)(data_ptr + 0x84)": "data_structure_size",
                "*(int *)(data_ptr + 0x80)": "data_structure_capacity",
                "*(int *)(data_structure_size + 0x1c)": "data_structure_size + 0x1c",
                "*(uint *)(data_ptr + 0x84)": "data_structure_size",
                "*(char *)(data_ptr + *(int *)(data_ptr + 0x80))": "data_structure_size",
                "*(uint *)(data_structure_ptr + 0x80)": "data_structure_capacity",
                "*(int *)(data_structure_size + 8)": "data_structure_size + 8"
            },
            "code": "int save_value_if_condition_met_000812b8(int data_structure_ptr, int value) {\n  int data_ptr = *(int *)(data_structure_ptr + 0x14);\n  int data_structure_size = *(int *)(data_structure_ptr + 0x18);\n  int data_structure_capacity = *(int *)(data_structure_size + 0x14);\n  if ((data_structure_capacity << 0x1e < 0) && (*(int *)(data_ptr + 0x84) == *(int *)(data_ptr + 0x80))) {\n    *(int *)(data_structure_size + 0x1c) = value;\n  }\n  else {\n    uint new_data_structure_capacity = DAT_00081308 & *(int *)(data_ptr + 0x80) + 1U;\n    if ((int)new_data_structure_capacity < 0) {\n      new_data_structure_capacity = (new_data_structure_capacity - 1 | 0xffffff80) + 1;\n    }\n    while (*(uint *)(data_ptr + 0x84) == new_data_structure_capacity);\n    *(char *)(data_ptr + *(int *)(data_ptr + 0x80)) = (char)value;\n    *(uint *)(data_structure_ptr + 0x80) = new_data_structure_capacity;\n    *(int *)(data_structure_size + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "save_value_if_condition_met_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "code": "int get_error_code_thunk_00080efe() {\n  return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "get_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "parameter_1",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "uVar1": "result",
                "iVar2": "status",
                "uVar3": "data",
                "pbVar4": "current_byte",
                "uVar5": "index",
                "local_1c": "current_char",
                "abStack_1b": "overflow_buffer"
            },
            "code": "uint process_data_000839b4(undefined4 param_1, uint data_length, byte **data_buffer){\n    uint result;\n    int status;\n    uint data;\n    byte *current_byte;\n    uint index;\n    byte current_char;\n    byte overflow_buffer[3];\n\n    if (-1 < (int)((uint)*(ushort *)(data_buffer + 3) << 0x12)) {\n        *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x2000;\n        data_buffer[0x19] = (byte *)((uint)data_buffer[0x19] | 0x2000);\n    }\n    result = check_data();\n    if ((result == 1) && (data_length - 1 < 0xff)) {\n        data = data_length & 0xff;\n        current_char = (byte)data;\n    }\n    else {\n        result = extract_data(param_1, &current_char, data_length, data_buffer + 0x17);\n        if (result == 0xffffffff) {\n            *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n            return 0xffffffff;\n        }\n        if (result == 0) {\n            return data_length;\n        }\n        data = (uint)current_char;\n    }\n    index = 0;\n    do {\n        current_byte = data_buffer[2] + -1;\n        data_buffer[2] = current_byte;\n        if ((int)current_byte < 0) {\n            if ((int)data_buffer[6] <= (int)current_byte) {\n                **data_buffer = (byte)data;\n                current_byte = *data_buffer;\n                data = (uint)*current_byte;\n                if (data != 10) goto exit_loop;\n            }\n            status = insert_data(param_1, data, data_buffer);\n            if (status == -1) {\n                return 0xffffffff;\n            }\n        }\n        else {\n            **data_buffer = (byte)data;\n            current_byte = *data_buffer;\n            exit_loop:\n            *data_buffer = current_byte + 1;\n        }\n        if (result <= index + 1) {\n            return data_length;\n        }\n        data = (uint)overflow_buffer[index];\n        index = index + 1;\n    } while(true);\n}",
            "called": [
                "FUN_0008400c",
                "FUN_0008434c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_data_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "append_data_to_array_00081570",
                "param_1": "array",
                "param_2": "array_length",
                "param_3": "data_length",
                "iVar1": "result",
                "iVar2": "current_length"
            },
            "code": "int append_data_to_array_00081570(int *array, int array_length, int data_length) {\n    int current_length = array[2];\n    if (array_length == 0) {\n        return 0;\n    }\n    if (data_length != 0) {\n        int result = FUN_000814ae(array, current_length + data_length);\n        if (result == 0) {\n            return 0;\n        }\n        FUN_000825cc(*array + array[2], array_length);\n        array[2] = current_length + data_length;\n    }\n    return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "append_data_to_array_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "set_channel_bit_000803fc",
                "param_1": "channel_index",
                "param_2": "channel_mask",
                "param_3": "channel_bits",
                "param_4": "channel_id",
                "unaff_r4": "unused_register_4",
                "in_lr": "unused_register_lr",
                "uVar1": "channel_data",
                "DAT_00080448": "channel_bits_start",
                "PTR_s____source_tc_c_00080b80": "source_pointer",
                "PTR_s_TC_Start_00080b84": "start_pointer",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "channel_pointer",
                "*DAT_00080b8c": "function_pointer"
            },
            "code": "void set_channel_bit_000803fc(int channel_index, uint32_t channel_mask, uint32_t *channel_bits)\\n\\\n                      {\\n\\\n                          uint64_t channel_id = ((uint64_t)channel_mask << 32) | channel_index;\\n\\\n                          set_channel_mode(channel_bits, channel_index, 4);\\n\\\n                          if(channel_index > 2)\\n\\\n                          {\\n\\\n                              set_channel_data(channel_id, 5);\\n\\\n                          }\\n\\\n                          else\\n\\\n                          {\\n\\\n                              set_channel_data(channel_id, 0);\\n\\\n                          }\\n\\\n                      }",
            "called": [
                "FUN_00080b2c",
                "FUN_00080b90",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "set_channel_bit_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_flag_to_0x2000_00080eb0",
                "param_1": "memory_address",
                "param_2": "size_of_memory",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(memory_address + 4)"
            },
            "code": "void set_memory_flag_to_0x2000_00080eb0(int* memory_address, int size_of_memory) {\n  *(int *)(memory_address + 4) = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_memory_flag_to_0x2000_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "device_id",
                "param_2": "data_ptr",
                "param_3": "target_data",
                "uVar1": "current_data",
                "FUN_000814f6": "initialize_device",
                "FUN_000811e8": "get_next_data",
                "FUN_0008159e": "send_data"
            },
            "code": "void process_data_00081214(uint32_t device_id, uint32_t data_ptr, uint32_t target_data){\n\tuint32_t current_data;\n\tinitialize_device(device_id, DEVICE_PTR);\n\twhile ((current_data = get_next_data(data_ptr)) != -1 && current_data != target_data){\n\t\tsend_data(device_id, current_data & 0xff);\n\t}\n\treturn;\n}",
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_or_return_error_code_0008439c",
                "param_1": "error_code",
                "param_2": "buffer",
                "param_3": "byte_to_write",
                "*param_1": "*error_code",
                "*param_2": "*buffer",
                "*param_2 = (char)param_3": "*buffer = (unsigned char)byte_to_write",
                "0x8a": "138",
                "0xffffffff": "-1"
            },
            "code": "int write_byte_or_return_error_code_0008439c(int *error_code, unsigned char *buffer, unsigned int byte_to_write) {\n  if (buffer == NULL) {\n    return 0;\n  }\n  if (byte_to_write < 256) {\n    *buffer = (unsigned char)byte_to_write;\n    return 1;\n  }\n  *error_code = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_code_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "input_param",
                "param_2": "data_param",
                "param_3": "data_ptr",
                "piVar1": "current_data_item_ptr",
                "iVar2": "process_result",
                "piVar3": "current_data_ptr",
                "uVar4": "processed_data_items_count",
                "puVar5": "current_data_item",
                "uVar6": "num_data_items",
                "uVar7": "current_data_item_index"
            },
            "code": "int process_data_00082824(undefined4 input_param, int data_param, int **data_ptr)\n{\n    int *current_data_ptr;\n    int current_data_size;\n    int *current_data_item_ptr;\n    uint num_data_items;\n    undefined4 *current_data_item;\n    uint current_data_item_index;\n    uint processed_data_items_count;\n    \n    current_data_size = *(int *)(data_param + 100) << 0x12;\n    if (-1 < current_data_size)\n    {\n        int result = FUNC_00083ca8();\n        data_ptr[2] = NULL;\n        data_ptr[1] = NULL;\n        return result;\n    }\n    current_data_ptr = data_ptr[2];\n    current_data_item_ptr = *data_ptr;\n    while (current_data_ptr != NULL)\n    {\n        num_data_items = current_data_item_ptr[1] >> 2;\n        if (num_data_items != 0)\n        {\n            current_data_item = (undefined4 *)(*current_data_item_ptr - 4);\n            processed_data_items_count = 0;\n            do\n            {\n                current_data_item++;\n                int process_result = process_data_00082824_item(input_param, *current_data_item, data_param);\n                processed_data_items_count++;\n                if (process_result == -1) goto exit_label;\n            } while (num_data_items != processed_data_items_count);\n            current_data_ptr = data_ptr[2];\n        }\n        current_data_ptr = (int *)((int)current_data_ptr - (current_data_item_ptr[1] & 0xfffffffc));\n        data_ptr[2] = current_data_ptr;\n        current_data_item_ptr += 2;\n    }\n    int exit_label_result = 0;\nexit_label:\n    data_ptr[2] = NULL;\n    data_ptr[1] = NULL;\n    return exit_label_result;\n}",
            "called": [
                "FUN_000839b4",
                "FUN_00083ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "process_data_0008427c",
                "param_1": "data_ptr",
                "param_2": "data_offset",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "code": "void process_data_0008427c(undefined4 data_ptr,int data_offset)\n{\n  int result;\n  ushort flag;\n  result = get_data(data_ptr,(int)*(short *)(data_offset + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(data_offset + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_offset + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_offset + 0x50) = result;\n  }\n  *(ushort *)(data_offset + 0xc) = flag;\n  return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_config_000809be",
                "param_1": "config_ptr",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "updated_config"
            },
            "code": "void update_config_000809be(int config_ptr, uint32_t update_type, uint32_t update_value) {\n  uint32_t updated_config;\n  *(uint32_t *)(config_ptr + 0x44) = update_value;\n  switch(update_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      updated_config = *(uint32_t *)(config_ptr + 0x70) & *(uint32_t *)(config_ptr + 0x70) & ~update_value;\n      break;\n    case 2:\n      updated_config = *(uint32_t *)(config_ptr + 0x70) | update_value;\n      break;\n    default:\n      goto end_switch;\n  }\n  *(uint32_t *)(config_ptr + 0x70) = updated_config;\nend_switch:\n  *(uint32_t *)(config_ptr + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_config_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_flags_00080a94",
                "param_1": "flag_ptr",
                "param_2": "flags_mask",
                "uVar1": "result"
            },
            "code": "uint check_flags_00080a94(int flag_ptr, uint flags_mask) {\n  uint result = *(uint *)(flag_ptr + 8) & flags_mask;\n  if (result != 0) {\n    if ((flags_mask & *(uint *)(flag_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_flags_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_data_to_0x8000_00081618",
                "DAT_00081620": "data_start_address",
                "PTR_": "pointer_"
            },
            "code": "void set_data_to_0x8000_00081618(void)\n{\n  int *data_pointer = (int *)(DAT_00081620 + 4);\n  *data_pointer = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "output",
                "uVar1": "result_1",
                "lVar2": "result_2"
            },
            "code": "void calculate_difference_0008455c(uint32_t input_1, int32_t input_2, uint32_t param_3, uint32_t param_4, int32_t *output)\n{\n  uint32_t result_1;\n  uint64_t result_2;\n  result_2 = multiply(param_3, param_4);\n  result_1 = (uint32_t)result_2;\n  output[0] = input_1 - result_1;\n  output[1] = input_2 - (int32_t)(result_2 >> 32) - (input_1 < result_1);\n  return;\n}\n",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_of_char_000840f8",
                "param_1": "input_array",
                "param_2": "target_char",
                "param_3": "array_length",
                "puVar1": "result_ptr",
                "uVar2": "current_value",
                "pcVar3": "current_char_ptr",
                "pcVar4": "last_char_ptr",
                "bVar5": "is_match_found"
            },
            "code": "uint * find_first_occurrence_of_char_000840f8(uint *input_array, char target_char, uint *array_length)\n{\n  uint *result_ptr;\n  uint current_value;\n  char *current_char_ptr;\n  char *last_char_ptr;\n  bool is_match_found;\n  \n  if (((uint)input_array & 3) == 0) {\n    // If input array is aligned to 4 bytes, use optimized loop\n    result_ptr = input_array;\n    if (array_length > (uint *)0x3) {\n      do {\n        current_value = *input_array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        result_ptr = input_array;\n        if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n        array_length = array_length + -1;\n        result_ptr = input_array + 1;\n        input_array = input_array + 1;\n      } while (array_length > (uint *)0x3);\n    }\n    input_array = array_length;\n    last_char_ptr = (char *)((int)input_array + -1);\n    if ((input_array != (uint *)0x0) && (*result_ptr != target_char)) {\n      current_char_ptr = (char *)0x0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        is_match_found = current_char_ptr == last_char_ptr;\n        current_char_ptr = current_char_ptr + 1;\n        if (is_match_found) goto LAB_00084150;\n      } while (*input_array != target_char);\n    }\n  }\n  else if (array_length == (uint *)0x0) {\nLAB_00084150:\n    result_ptr = (uint *)0x0;\n  }\n  else if (*input_array != target_char) {\n    result_ptr = (uint *)((int)input_array + 1);\n    array_length = (uint *)((int)array_length + -1);\n    do {\n      input_array = result_ptr;\n      if (((uint)input_array & 3) == 0) goto optimized_loop;\n      if (array_length == (uint *)0x0) goto LAB_00084150;\n      result_ptr = (uint *)((int)input_array + 1);\n      array_length = (uint *)((int)array_length + -1);\n    } while (*input_array != target_char);\n  }\n  return result_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_char_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = FUN_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00083888",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00082824",
                "FUN_000840f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_00081750",
                "FUN_000834f0",
                "FUN_000817c8"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "fill_memory_with_value_00081f00",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "value32",
                "uVar4": "size32",
                "bVar5": "is_size_zero"
            },
            "code": "void fill_memory_with_value_00081f00(uint32_t *memory, uint8_t value, uint32_t size) {\n    uint32_t *ptr1;\n    uint32_t *ptr2;\n    uint32_t value32;\n    uint32_t size32;\n    bool is_size_zero;\n\n    if (((uint32_t)memory & 3) != 0) {\n        is_size_zero = size == 0;\n        ptr1 = memory;\n        size = size - 1;\n        if (is_size_zero) {\n            return;\n        }\n        while (true) {\n            memory = (uint32_t *)((int)ptr1 + 1);\n            *(uint8_t *)ptr1 = value;\n            if (((uint32_t)memory & 3) == 0) {\n                break;\n            }\n            is_size_zero = size == 0;\n            ptr1 = memory;\n            size = size - 1;\n            if (is_size_zero) {\n                return;\n            }\n        }\n    }\n    if (3 < size) {\n        value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n        size32 = size;\n        ptr1 = memory;\n        if (0xf < size) {\n            size32 = size - 0x10;\n            do {\n                *ptr1 = value32;\n                ptr1[1] = value32;\n                ptr1[2] = value32;\n                ptr1[3] = value32;\n                ptr1 = ptr1 + 4;\n            } while (ptr1 != (uint32_t *)((int)memory + (size32 & 0xfffffff0) + 0x10));\n            size = size & 0xf;\n            memory = memory + ((size32 >> 4) + 1) * 4;\n            size32 = size;\n            ptr1 = memory;\n            if (size < 4) {\n                goto LAB_00081f7c;\n            }\n        }\n        do {\n            size = size - 4;\n            *memory = value32;\n            memory = memory + 1;\n        } while (3 < size);\n        memory = (uint32_t *)((int)ptr1 + (size32 - 4 & 0xfffffffc) + 4);\n        size = size32 & 3;\n    }\nLAB_00081f7c:\n    if (size != 0) {\n        ptr1 = memory;\n        do {\n            ptr2 = (uint32_t *)((int)ptr1 + 1);\n            *(uint8_t *)ptr1 = value;\n            ptr1 = ptr2;\n        } while (ptr2 != (uint32_t *)(size + (int)memory));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_max_int_00080eaa"
            },
            "code": "int32_t return_max_int_00080eaa(void) { return INT32_MAX; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_max_int_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_start",
                "puVar3": "src_ptr",
                "uVar4": "remaining",
                "uVar5": "alignment_offset",
                "bVar6": "loop_condition",
                "both_aligned": "is_aligned",
                "remaining > 3": "remaining_bytes",
                "remaining > 11": "remaining_bytes > 11",
                "remaining > 7": "remaining_bytes > 7",
                "remaining > 15": "remaining_bytes > 15"
            },
            "code": "undefined4 *copy_memory_00081d48(undefined4 *dest, undefined4 *src, uint size)\n{\n  undefined4 *dest_start = dest;\n  bool both_aligned = (((uint)src | (uint)dest) & 3) == 0;\n  if (!both_aligned) {\n    if (size < 8) {\n      uint remaining = size - 4;\n      if (remaining > 3) {\n        do {\n          *dest_start++ = *src++;\n          remaining -= 4;\n        } while (remaining > 3);\n      }\n      if (remaining > 0) {\n        *(undefined *)dest_start++ = *(undefined *)src++;\n        if (remaining > 1) {\n          *(undefined *)dest_start++ = *(undefined *)src++;\n          if (remaining > 2) {\n            *(undefined *)dest_start++ = *(undefined *)src++;\n          }\n        }\n      }\n      return dest;\n    }\n    if (((uint)src & 3) != 0) {\n      uint alignment_offset = 4 - ((uint)dest & 3);\n      size -= alignment_offset;\n      if (((uint)dest & 1) != 0) {\n        *(undefined *)dest = *(undefined *)src;\n        dest = (undefined4 *)((int)dest + 1);\n        src = (undefined4 *)((int)src + 1);\n        alignment_offset -= 1;\n      }\n      if ((alignment_offset & 2) != 0) {\n        *(undefined2 *)dest = *(undefined2 *)src;\n        dest = (undefined4 *)((int)dest + 2);\n        src = (undefined4 *)((int)src + 2);\n      }\n    }\n    else {\n      uint alignment_offset = 4 - ((uint)src & 3);\n      size -= alignment_offset;\n      if (((uint)src & 1) != 0) {\n        *(undefined *)dest = *(undefined *)src;\n        dest = (undefined4 *)((int)dest + 1);\n        src = (undefined4 *)((int)src + 1);\n        alignment_offset -= 1;\n      }\n      if ((alignment_offset & 2) != 0) {\n        *(undefined2 *)dest = *(undefined2 *)src;\n        dest = (undefined4 *)((int)dest + 2);\n        src = (undefined4 *)((int)src + 2);\n      }\n    }\n  }\n  while (size > 63) {\n    *dest_start++ = *src++;\n    dest_start[1] = src[1];\n    dest_start[2] = src[2];\n    dest_start[3] = src[3];\n    dest_start[4] = src[4];\n    dest_start[5] = src[5];\n    dest_start[6] = src[6];\n    dest_start[7] = src[7];\n    dest_start[8] = src[8];\n    dest_start[9] = src[9];\n    dest_start[10] = src[10];\n    dest_start[11] = src[11];\n    dest_start[12] = src[12];\n    dest_start[13] = src[13];\n    dest_start[14] = src[14];\n    dest_start[15] = src[15];\n    dest_start += 16;\n    src += 16;\n    size -= 64;\n  }\n  uint remaining = size - 16;\n  while (remaining > 15) {\n    *dest_start++ = *src++;\n    dest_start[1] = src[1];\n    dest_start[2] = src[2];\n    dest_start[3] = src[3];\n    dest_start += 4;\n    src += 4;\n    remaining -= 16;\n  }\n  if (remaining > 11) {\n    *dest_start++ = *src++;\n    dest_start[1] = src[1];\n    dest_start[2] = src[2];\n    dest_start[3] = src[3];\n    dest_start[4] = src[4];\n    dest_start[5] = src[5];\n    dest_start[6] = src[6];\n    dest_start[7] = src[7];\n    dest_start[8] = src[8];\n    dest_start[9] = src[9];\n    dest_start[10] = src[10];\n    dest_start[11] = src[11];\n    dest_start += 12;\n    src += 12;\n    remaining -= 12;\n  }\n  if (remaining > 7) {\n    *dest_start++ = *src++;\n    dest_start[1] = src[1];\n    dest_start[2] = src[2];\n    dest_start[3] = src[3];\n    dest_start += 4;\n    src += 4;\n    remaining -= 8;\n  }\n  if (remaining > 3) {\n    *dest_start++ = *src++;\n    dest_start[1] = src[1];\n    dest_start += 2;\n    src += 2;\n    remaining -= 4;\n  }\n  if (remaining > 0) {\n    *(undefined *)dest_start++ = *(undefined *)src++;\n    if (remaining > 1) {\n      *(undefined *)dest_start++ = *(undefined *)src++;\n      if (remaining > 2) {\n        *(undefined *)dest_start++ = *(undefined *)src++;\n      }\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "findValueAndReturn_00084494",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "funcResult"
            },
            "code": "void findValueAndReturn_00084494(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n    undefined *ptr = PTR_DAT_000844b8;\n    *(undefined4 *)ptr = 0;\n    int funcResult = FUN_00080eb0(arg1, arg2, arg2, 0, arg3);\n    if ((funcResult == -1) && (*(int *)ptr != 0)) {\n        *result = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "findValueAndReturn_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "determine_result_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "FUN_0008458c": "calculate_result"
            },
            "code": "int determine_result_00084530(int input1, int input2, int input3, int input4) {\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      result = -1;\n    }\n    return result;\n  }\n  result = calculate_result();\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "determine_result_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_and_do_nothing_00080970",
                "FUN_00081248": "check_value"
            },
            "code": "void check_and_do_nothing_00080970(void)\n{\n  int result;\n  result = check_value(PTR_DAT_000809a4);\n  if (result != 0) {\n    do_nothing_0008073a();\n  }\n  result = check_value(PTR_DAT_000809a8);\n  if (result != 0) {\n    do_nothing_00080748();\n  }\n  result = check_value(PTR_DAT_000809ac);\n  if (result != 0) {\n    do_nothing_0008074a();\n  }\n  result = check_value(PTR_DAT_000809b0);\n  if (result != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}\n",
            "called": [
                "FUN_0008073a",
                "FUN_00080748",
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_0008074a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "validate_input_and_call_function_00084018",
                "param_1": "input",
                "param_2": "data",
                "uVar1": "value_at_index_3",
                "iVar2": "function_return_value",
                "uVar4": "value_as_uint",
                "bVar5": "flag",
                "auStack_54": "stack_var",
                "local_50": "local_var",
                "iVar3": "function_return_value2",
                "PTR_FUN_0008427c_1_000840f4": "PTR_FUN_0008427c_1_000840f4",
                "PTR_LAB_0008387c_1_000840f0": "PTR_LAB_0008387c_1_000840f0",
                "var1": "var1",
                "var2": "var2",
                "var3": "var3",
                "var4": "var4",
                "validate_input": "validate_input",
                "execute_function": "execute_function"
            },
            "code": "void validate_input_and_call_function_00084018(int input, int *data) {\n  ushort value_at_index_3 = *(ushort *)(data + 3);\n  uint value_as_uint = (uint)value_at_index_3;\n  bool flag = false;\n  undefined stack_var[4];\n  uint local_var;\n  \n  if ((int)(value_as_uint << 0x1e) < 0) {\n    *data = (int)data + 0x43;\n    data[4] = (int)data + 0x43;\n    data[5] = 1;\n    return;\n  }\n  \n  if (-1 < *(short *)((int)data + 0xe)) {\n    int function_return_value = validate_input(input, (int)*(short *)((int)data + 0xe), stack_var);\n    if (-1 < function_return_value) {\n      bool flag2 = (local_var & 0xf000) == 0x2000;\n      \n      if (((local_var & 0xf000) == 0x8000) && ((undefined *)data[10] == PTR_FUN_0008427c_1_000840f4)) {\n        int var1 = 0x400;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x400;\n        data[0x13] = 0x400;\n      } else {\n        int var2 = 0x400;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    value_at_index_3 = *(ushort *)(data + 3);\n    value_as_uint = (uint)value_at_index_3;\n  }\n  \n  *(ushort *)(data + 3) = value_at_index_3 | 0x800;\n  \n  if ((value_as_uint & 0x80) == 0) {\n    int var3 = 0x400;\n  } else {\n    int var4 = 0x40;\n  }\n  flag = false;\n  \nLAB_00084074:\n  int function_return_value2 = execute_function(input, var3);\n  value_at_index_3 = *(ushort *)(data + 3);\n  \n  if (function_return_value2 == 0) {\n    if (-1 < (int)((uint)value_at_index_3 << 0x16)) {\n      *(ushort *)(data + 3) = value_at_index_3 | 2;\n      *data = (int)data + 0x43;\n      data[4] = (int)data + 0x43;\n      data[5] = 1;\n    }\n  } else {\n    *(undefined **)(input + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n    *(ushort *)(data + 3) = value_at_index_3 | 0x80;\n    *data = function_return_value2;\n    data[4] = function_return_value2;\n    data[5] = var3;\n    if ((flag2) && (function_return_value2 = validate_input(input, (int)*(short *)((int)data + 0xe)), function_return_value2 != 0))\n    {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "validate_input_and_call_function_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_uint_from_string_000815de",
                "param_1": "string_ptr",
                "pbVar4": "curr_char",
                "uVar5": "curr_char_val",
                "bVar1": "curr_char_val",
                "bVar2": "is_negative",
                "uVar10": "max_uint_val",
                "uVar9": "max_uint_val_by_ten",
                "iVar8": "num_digits_parsed",
                "uVar3": "parsed_uint",
                "pbVar6": "curr_char"
            },
            "code": "uint parse_uint_from_string_000815de(byte **string_ptr)\n{\n  if (*string_ptr == NULL) {\n    return 0;\n  }\n  byte *curr_char = *string_ptr;\n  bool is_negative = false;\n  if (*curr_char == '-') {\n    is_negative = true;\n    curr_char++;\n  }\n  else if (*curr_char == '+') {\n    curr_char++;\n  }\n  uint max_uint_val = is_negative ? INT32_MIN : INT32_MAX;\n  uint max_uint_val_by_ten = max_uint_val / 10;\n  int num_digits_parsed = 0;\n  uint parsed_uint = 0;\n  while (true) {\n    byte curr_char_val = *(byte *)(*DAT_000827f8 + *curr_char + 1);\n    if ((curr_char_val & 4) == 0) {\n      if ((curr_char_val & 3) == 0) {\n        if (num_digits_parsed == 0) {\n          *(undefined4 *)*DAT_00082810 = 0x22;\n          return is_negative ? INT32_MIN : INT32_MAX;\n        }\n        else {\n          return is_negative ? -parsed_uint : parsed_uint;\n        }\n      }\n      int char_val_offset = (curr_char_val & 3) == 1 ? 0x37 : 0x57;\n      int digit_val = *curr_char - char_val_offset;\n      if (digit_val < 0 || digit_val > 9) {\n        if (num_digits_parsed == 0) {\n          *(undefined4 *)*DAT_00082810 = 0x22;\n          return is_negative ? INT32_MIN : INT32_MAX;\n        }\n        else {\n          return is_negative ? -parsed_uint : parsed_uint;\n        }\n      }\n      if (parsed_uint > max_uint_val_by_ten || (parsed_uint == max_uint_val_by_ten && (max_uint_val % 10) < digit_val)) {\n        *(undefined4 *)*DAT_00082810 = 0x22;\n        return is_negative ? INT32_MIN : INT32_MAX;\n      }\n      parsed_uint = parsed_uint * 10 + digit_val;\n      num_digits_parsed++;\n    }\n    curr_char++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_uint_from_string_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "data",
                "param_2": "data_length",
                "iVar1": "result",
                "iVar2": "function_result",
                "local_488": "buffer_ptrs",
                "local_480": "buffer_size",
                "local_47c": "flag",
                "local_47a": "flag2",
                "local_478": "buffer",
                "local_474": "var1",
                "local_470": "var2",
                "local_46c": "var3",
                "local_464": "var4",
                "local_424": "var5",
                "auStack_420": "stack_buffer"
            },
            "code": "int process_data_000834f0(undefined4 data, int data_length) {\n  int result = 0;\n  int function_result = 0;\n  undefined *buffer_ptrs[2];\n  undefined4 buffer_size = 0x400;\n  ushort flag = *(ushort *)(data_length + 0xc) & 0xfffd;\n  undefined2 flag2 = *(undefined2 *)(data_length + 0xe);\n  undefined *buffer = buffer_ptrs[0];\n  undefined4 var1 = *(undefined4 *)(data_length + 100);\n  undefined4 var2 = *(undefined4 *)(data_length + 0x1c);\n  undefined4 var3 = *(undefined4 *)(data_length + 0x24);\n  buffer_ptrs[0] = (undefined *)auStack_420;\n  function_result = FUNC_0008289c(data, buffer_ptrs);\n  if ((function_result >= 0) && (FUN_00083850(data, buffer_ptrs) != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_length + 0xc) = *(ushort *)(data_length + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_data_000841e4",
                "param_1": "data",
                "piVar3": "data_pointer",
                "iVar4": "function_pointer",
                "pcVar5": "function_address",
                "ppiVar6": "data_array_pointer",
                "unaff_r4": "register_4",
                "unaff_r5": "register_5",
                "in_lr": "link_register",
                "*DAT_000841f0": "data_array",
                "PTR_DAT_00084218": "data_pointer_2",
                "thunk_FUN_00080efe": "call_function_00080efe",
                "do_nothing_00080efc": "do_nothing_00080efc"
            },
            "code": "int process_data_000841e4(uint data)\n{\n  int *data_pointer = **DAT_000841f0;\n  if (data > 0x1f) {\n    *data_pointer = 0x16;\n    return -1;\n  }\n  int *function_pointer = data_pointer[0xb7];\n  if ((function_pointer == 0) || (*(code **)(function_pointer + data * 4) == (code *)0x0)) {\n    int ***DAT_000841f0_pointer = *DAT_000841f0;\n    undefined4 function_result = call_function_00080efe(data_pointer);\n    undefined *pointer_to_data = PTR_DAT_00084218;\n    *(undefined4 *)pointer_to_data = 0;\n    int result = do_nothing_00080efc(function_result, data, data, 0, *DAT_000841f0_pointer, register_4, register_5, link_register);\n    if ((result == -1) && (*(int *)pointer_to_data != 0)) {\n      *data_pointer = *(int *)pointer_to_data;\n      return -1;\n    }\n    return result;\n  }\n  if (*(code **)(function_pointer + data * 4) == (code *)0x1) {\n    return 0;\n  }\n  if (*(code **)(function_pointer + data * 4) != (code *)0xffffffff) {\n    *(undefined4 *)(function_pointer + data * 4) = 0;\n    (*(code **)(function_pointer + data * 4))(data);\n    return 0;\n  }\n  *data_pointer = 0x16;\n  return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_data_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_uint_to_string_with_base_0008113a",
                "*param_1": "output_buffer",
                "param_2": "value",
                "param_3": "base",
                "param_4": "minimum_width",
                "iVar1": "num_chars_written",
                "iVar2": "negative_sign_written"
            },
            "code": "int convert_uint_to_string_with_base_0008113a(uint32_t *output_buffer, uint32_t value, uint32_t base, uint32_t minimum_width) {\n    int num_chars_written;\n    int negative_sign_written = 0;\n    \n    if (base == 0) {\n        return -1;\n    }\n    \n    if (base == 10 && (int32_t)value < 0) {\n        negative_sign_written = 1;\n        value = -value;\n    }\n    \n    if (minimum_width > 0) {\n        num_chars_written = convert_uint_to_string_with_base_0008113a(output_buffer, value / base, base, minimum_width - 1);\n    } else {\n        num_chars_written = 0;\n    }\n    \n    if (negative_sign_written) {\n        output_buffer[num_chars_written] = \"-\";\n        num_chars_written++;\n    }\n    \n    output_buffer[num_chars_written] = \"0123456789abcdefghijklmnopqrstuvwxyz\"[value % base];\n    num_chars_written++;\n    \n    return num_chars_written;\n}",
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "convert_uint_to_string_with_base_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_value_at_address_0008400c",
                "*DAT_00084014": "PTR_DAT_00084014",
                "return": "return",
                "*": "value_address",
                "int": "int"
            },
            "code": "int get_value_at_address_0008400c(void)\n{\n    int* value_address = *DAT_00084014;\n    return *value_address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_value_at_address_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "validate_and_process_input_000814d0",
                "param_1": "input_array",
                "param_2": "input_value",
                "param_3": "input_length",
                "iVar1": "validation_result",
                "FUN_000814ae": "check_input_validity",
                "FUN_00081480": "initialize_input_array",
                "FUN_000825cc": "process_input"
            },
            "code": "undefined4 *validate_and_process_input_000814d0(undefined4 *input_array, undefined4 input_value, undefined4 input_length)\n{\n  int validation_result = check_input_validity(input_array, input_length);\n  if (validation_result == 0) {\n    initialize_input_array(input_array);\n  }\n  else {\n    input_array[2] = input_value;\n    process_input(*input_array, input_length);\n  }\n  return input_array;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "load_elf32_relocation_table_00080c20",
                "puVar1": "rel_table_start",
                "puVar2": "rel_table_end",
                "puVar4": "rel_data",
                "iVar3": "i",
                "rel_data_start": "PTR_DAT_00080c8c"
            },
            "code": "void load_elf32_relocation_table_00080c20(void)\n{\n  undefined *rel_table_start = PTR_Elf32_Rel_ARRAY_00080c7c;\n  undefined *rel_table_end = DAT_00080c78;\n  undefined4 *rel_data = (undefined4 *)PTR_DAT_00080c80;\n  if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c) {\n    for (int i = 0; rel_table_start + i < PTR_DAT_00080c84; i += 4) {\n      *(undefined4 *)(rel_table_start + i) = *(undefined4 *)(rel_table_end + i);\n    }\n  }\n  for (; rel_data < DAT_00080c88; rel_data++) {\n    *rel_data = 0;\n  }\n  undefined *rel_data_start = PTR_DAT_00080c8c + -0x20000000;\n  *(uint *)(DAT_00080c90 + 8) = (uint)PTR_DAT_00080c8c & 0x1fffff80;\n  if (rel_data_start < (undefined *)0x100000) {\n    *(uint *)(DAT_00080c90 + 8) = *(uint *)(DAT_00080c90 + 8) | 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while(true);\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "load_elf32_relocation_table_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "puVar2": "ptr_data",
                "puVar3": "ptr_info",
                "puVar4": "ptr_count",
                "uVar5": "max_data_size",
                "iVar6": "mem_offset",
                "bVar1": "flag"
            },
            "code": "void update_data_0008044c(int index, int data, int offset)\n{\n    byte flag;\n    uint* ptr_data = PTR_DAT_00080544;\n    uint* ptr_info = PTR_DAT_00080548;\n    byte* ptr_count = PTR_DAT_00080554;\n    int mem_offset = index * 0xc;\n    offset = offset * 0x40;\n    if ((ptr_data[index] & 0x80) == 0)\n    {\n        if ((char)ptr_data[index] + mem_offset < (int)(uint)(byte)*ptr_count)\n        {\n            int info_index = (char)ptr_data[index] + mem_offset;\n            if ((int)((uint)(byte)ptr_info[info_index * 8 + 1] << 0x19) < 0)\n            {\n                FUN_00081014(ptr_info[info_index * 8] & 0x3f, 0);\n            }\n        }\n    }\n    else\n    {\n        *(uint*)(data + offset) |= 4;\n    }\n    flag = *ptr_count;\n    ptr_data[index]++;\n    if ((char)ptr_data[index] + mem_offset < (int)(uint)flag && (char)ptr_data[index] < '\\f')\n    {\n        int info_index = (char)ptr_data[index] + mem_offset;\n        *(int*)(data + offset + 0x14) = *(int*)(data + offset + 0x10) + *(int*)(ptr_info + info_index * 8 + 4);\n        if ((int)((uint)(byte)ptr_info[info_index * 8 + 1] << 0x19) >= 0)\n        {\n            return;\n        }\n        FUN_00081014(ptr_info[info_index * 8] & 0x3f, 1);\n        return;\n    }\n    data = data + offset;\n    uint max_data_size = (*DAT_0008054c / DAT_00080550) * 20000 >> 5;\n    if (max_data_size <= *(int*)(data + 0x10) + 4U)\n    {\n        max_data_size = *(int*)(data + 0x10) + 4;\n    }\n    *(uint*)(data + 0x14) = max_data_size;\n    ptr_data[index] = 0xff;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "update_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "process_data_000810d8",
                "param_1": "data_1",
                "param_3": "data_3",
                "param_4": "data_4",
                "PTR_DAT_000810e4": "PTR_DATA"
            },
            "code": "void process_data_000810d8(undefined4 data_1, undefined4 data_3, undefined4 data_4, undefined4 data_5)\n{\n  call_function(data_1, PTR_DAT_000810e4, data_3, data_4, data_5);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "process_data_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "code": "int get_error_code_00080efe(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "get_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_string_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "dst_word",
                "puVar3": "src_word",
                "puVar4": "end_of_source",
                "puVar6": "end_of_destination",
                "uVar5": "bytes_to_copy",
                "uVar7": "words_to_copy"
            },
            "code": "void reverse_copy_string_00081e34(uint8_t *destination, uint8_t *source, uint32_t length) {\n    if ((destination < source) && ((uint8_t *)((int)source + length) > destination)) {\n        uint8_t *end_of_source = (uint8_t *)((int)source + length);\n        uint8_t *end_of_destination = (uint8_t *)((int)destination + length);\n        for (uint32_t i = 0; i < length; i++) {\n            end_of_destination--;\n            end_of_source--;\n            *end_of_destination = *end_of_source;\n        }\n    }\n    else if (length >= 16 && (((uint32_t)destination | (uint32_t)source) & 3) == 0) {\n        uint32_t *src_word = (uint32_t *)source;\n        uint32_t *dst_word = (uint32_t *)destination;\n        uint32_t words_to_copy = (length - 16) >> 4;\n        for (uint32_t i = 0; i < words_to_copy; i++) {\n            dst_word[0] = src_word[0];\n            dst_word[1] = src_word[1];\n            dst_word[2] = src_word[2];\n            dst_word[3] = src_word[3];\n            src_word += 4;\n            dst_word += 4;\n        }\n        uint32_t bytes_to_copy = length & 0xF;\n        uint8_t *src_byte = (uint8_t *)src_word;\n        uint8_t *dst_byte = (uint8_t *)dst_word;\n        for (uint32_t i = 0; i < bytes_to_copy; i++) {\n            *dst_byte++ = *src_byte++;\n        }\n    }\n    else {\n        for (uint32_t i = 0; i < length; i++) {\n            *destination++ = *source++;\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "reverse_copy_string_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "update_byte_array_000805a8",
                "*param_1": "*byte_array",
                "bVar1": "current_byte",
                "*PTR_DAT_000805d8": "*byte_count",
                "DAT_000805dc": "data_array",
                "PTR_DAT_000805e4": "data_offsets",
                "DAT_000805e0": "divisor",
                "uint *puVar2": "uint *data_ptr",
                "*(uint *)(PTR_DAT_000805e4 + (uint)bVar1 * 8 + 4)": "*(uint *)(data_offsets + (uint)current_byte * 8 + 4)",
                "puVar2": "data_ptr",
                "calculation": "calculation"
            },
            "code": "void update_byte_array_000805a8(byte *byte_array)\n{\n  byte current_byte = *PTR_DAT_000805d8;\n  if (current_byte < 0x3c) {\n    *PTR_DAT_000805d8 = current_byte + 1;\n    uint *data_ptr = DAT_000805dc;\n    *byte_array = current_byte;\n    uint calculation = (*data_ptr / DAT_000805e0) * 0x5dc >> 5;\n    *(uint *)(PTR_DAT_000805e4 + (uint)bVar1 * 8 + 4) = calculation;\n    return;\n  }\n  *byte_array = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "update_byte_array_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_000815ec",
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_000810cc(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "get_next_byte_from_buffer_00081276",
                "param_1": "buffer_address",
                "bVar1": "next_byte",
                "iVar2": "buffer_pointer"
            },
            "code": "uint get_next_byte_from_buffer_00081276(int buffer_address)\n{\n  int buffer_pointer = *(int *)(buffer_address + 0x10);\n  if (*(int *)(buffer_pointer + 0x80) != *(int *)(buffer_pointer + 0x84)) {\n    byte next_byte = *(byte *)(buffer_pointer + *(int *)(buffer_pointer + 0x84));\n    *(uint *)(buffer_pointer + 0x84) = (*(int *)(buffer_pointer + 0x84) + 1U) & 0x7f;\n    return (uint)next_byte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "get_next_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "getParamValue_000844bc",
                "param_1": "outParamValue",
                "param_2": "paramValue",
                "puVar1": "dataPtr",
                "iVar2": "result"
            },
            "code": "void getParamValue_000844bc(int *outParamValue, undefined4 paramValue)\n{\n  undefined *dataPtr;\n  int result;\n  dataPtr = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  result = findParamValue(paramValue);\n  if ((result == -1) && (*(int *)dataPtr != 0)) {\n    *outParamValue = *(int *)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "getParamValue_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "decode_data_00083850",
                "param_1": "data_ptr",
                "param_2": "header_ptr",
                "piVar1": "current_block_ptr",
                "iVar2": "current_block_size",
                "uVar3": "header_flags",
                "uVar4": "header_length",
                "iVar5": "data_length",
                "pcVar6": "decoder_fn",
                "unaff_r4": "result",
                "iVar7": "data_offset",
                "header_offset": "header_offset",
                "DAT_0008389c": "NULL",
                "PTR_000838a0": "0",
                "PTR_000838a4": "4",
                "PTR_000838a8": "6",
                "PTR_000838ac": "7",
                "PTR_000838b0": "9",
                "PTR_000838b4": "10",
                "PTR_000838b8": "12",
                "PTR_000838bc": "15",
                "PTR_000838c0": "16",
                "PTR_000838c4": "20"
            },
            "code": "undefinedPTR_000838a4 decode_data_00083850(int *data_ptr, int *header_ptr) {\n    int *current_block_ptr;\n    int current_block_size;\n    ushort header_flags;\n    uint header_length;\n    code *decoder_fn;\n    undefinedPTR_000838a4 result;\n    int data_length;\n    int data_offset;\n    int header_offset;\n    \n    if ((data_ptr != DAT_PTR_000838a0PTR_000838a0PTR_000838a0838PTR_000838b0c) && (data_ptr[1PTR_000838a4] == PTR_000838a0)) {\n        FUN_PTR_000838a0PTR_000838a0PTR_000838a083888();\n    }\n    if (*(short *)(header_ptr + PTR_000838a8) == PTR_000838a0) {\n        return PTR_000838a0;\n    }\n    header_flags = *(ushort *)(header_ptr + PTR_000838a8);\n    if ((int)((uint)header_flags << PTR_000838a0x1c) < PTR_000838a0) {\n        header_offset = header_ptr[PTR_000838a4];\n        if (header_offset == PTR_000838a0) {\n            return PTR_000838a0;\n        }\n        data_offset = *header_ptr;\n        if ((header_flags & 3) == PTR_000838a0) {\n            data_length = header_ptr[5];\n        }\n        else {\n            data_length = PTR_000838a0;\n        }\n        *header_ptr = header_offset;\n        current_block_size = data_offset - header_offset;\n        header_ptr[2] = data_length;\n        do {\n            if (current_block_size < 1) {\n                return PTR_000838a0;\n            }\n            current_block_size -= (*(code *)header_ptr[PTR_000838b0])(data_ptr,header_ptr[PTR_000838ac],header_offset,current_block_size,result);\n            header_offset += current_block_size;\n        } while (current_block_size > PTR_000838a0);\n        *(ushort *)(header_ptr + PTR_000838a8) = *(ushort *)(header_ptr + PTR_000838a8) | PTR_000838a0xPTR_000838a4PTR_000838a0;\n        return PTR_000838a0xffffffff;\n    }\n    *(ushort *)(header_ptr + PTR_000838a8) = header_flags | PTR_000838a0x8PTR_000838a0PTR_000838a0;\n    if ((header_ptr[1] < 1) && (header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838bc] < 1)) {\n        return PTR_000838a0;\n    }\n    decoder_fn = (code *)header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838bPTR_000838a4];\n    if (decoder_fn == DAT_PTR_000838a0PTR_000838a0PTR_000838a0838PTR_000838b0c) {\n        return PTR_000838a0;\n    }\n    header_length = (uint)(header_flags | PTR_000838a0x8PTR_000838a0PTR_000838a0);\n    data_offset = *data_ptr;\n    *data_ptr = PTR_000838a0;\n    if ((header_flags & PTR_000838a0xPTR_PTR_000838a0PTR_000838a0PTR_000838a0838bPTR_000838a4PTR_000838a0PTR_000838a0) == PTR_000838a0) {\n        data_length = (*decoder_fn)(data_ptr,header_ptr[PTR_000838ac],header_length & PTR_000838a0xPTR_PTR_000838a0PTR_000838a0PTR_000838a0838bPTR_000838a4PTR_000838a0PTR_000838a0,1);\n        if ((data_length == -1) && (*data_ptr != PTR_000838a0)) {\n            if ((*data_ptr == PTR_000838a0x1d) || (*data_ptr == PTR_000838a0xPTR_PTR_000838a0PTR_000838a0PTR_000838a0838cPTR_000838a0)) {\n                *data_ptr = data_offset;\n                return PTR_000838a0;\n            }\n            *(ushort *)(header_ptr + PTR_000838a8) = *(ushort *)(header_ptr + PTR_000838a8) | PTR_000838a0xPTR_000838a4PTR_000838a0;\n            return PTR_000838a0xffffffff;\n        }\n        header_flags = *(ushort *)(header_ptr + PTR_000838a8);\n        decoder_fn = (code *)header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838bPTR_000838a4];\n    }\n    else {\n        data_length = header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838cPTR_000838a4];\n    }\n    if (((int)(header_flags << PTR_000838a0x1d) < PTR_000838a0) && (data_length = data_length - header_ptr[1], header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838b8] != PTR_000838a0)) {\n        data_length = data_length - header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838bc];\n    }\n    data_length = (*decoder_fn)(data_ptr,header_ptr[PTR_000838ac],data_length,PTR_000838a0);\n    if (data_length == -1) {\n        if (*data_ptr != PTR_000838a0) {\n            if ((*data_ptr != PTR_000838a0x1d) && (*data_ptr != PTR_000838a0xPTR_PTR_000838a0PTR_000838a0PTR_000838a0838cPTR_000838a0)) {\n                *(ushort *)(header_ptr + PTR_000838a8) = *(ushort *)(header_ptr + PTR_000838a8) | PTR_000838a0xPTR_000838a4PTR_000838a0;\n                return PTR_000838a0xffffffff;\n            }\n            *(ushort *)(header_ptr + PTR_000838a8) = *(ushort *)(header_ptr + PTR_000838a8) & PTR_000838a0xfPTR_000838acff;\n            *header_ptr = header_ptr[PTR_000838a4];\n            header_ptr[1] = PTR_000838a0;\n            goto LAB_PTR_000838a0PTR_000838a0PTR_000838a083PTR_000838acPTR_000838acPTR_000838a4;\n        }\n        header_flags = *(ushort *)(header_ptr + PTR_000838a8) & PTR_000838a0xfPTR_000838acff;\n        header_ptr[1] = PTR_000838a0;\n        *(ushort *)(header_ptr + PTR_000838a8) = header_flags;\n        *header_ptr = header_ptr[PTR_000838a4];\n    }\n    else {\n        header_flags = *(ushort *)(header_ptr + PTR_000838a8) & PTR_000838a0xfPTR_000838acff;\n        *header_ptr = header_ptr[PTR_000838a4];\n        *(ushort *)(header_ptr + PTR_000838a8) = header_flags;\n        header_ptr[1] = PTR_000838a0;\n    }\n    if ((int)((uint)header_flags << PTR_000838a0x13) < PTR_000838a0) {\n        header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838cPTR_000838a4] = data_length;\n    }\nLAB_PTR_000838a0PTR_000838a0PTR_000838a083PTR_000838acPTR_000838acPTR_000838a4:\n    current_block_ptr = (int *)header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838b8];\n    *data_ptr = data_offset;\n    if (current_block_ptr == DAT_PTR_000838a0PTR_000838a0PTR_000838a0838PTR_000838b0c) {\n        return PTR_000838a0;\n    }\n    if (current_block_ptr != header_ptr + PTR_PTR_000838a0PTR_000838a0PTR_000838a0838cPTR_000838a0) {\n        FUN_PTR_000838a0PTR_000838a0PTR_000838a083bPTR_PTR_000838a0PTR_000838a0PTR_000838a0838bPTR_000838a4(data_ptr);\n    }\n    header_ptr[PTR_PTR_000838a0PTR_000838a0PTR_000838a0838b8] = PTR_000838a0;\n    return PTR_000838a0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "decode_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "run_process_000815ec",
                "FUN_00081618": "initialize_system",
                "FUN_00080774": "setup_network",
                "do_nothing_000815e8": "do_nothing",
                "do_nothing_00080f08": "enable_logging",
                "FUN_000801e0": "start_process",
                "DAT_00081614": "data_available",
                "FUN_00080250": "check_status",
                "FUN_00080970": "process_data"
            },
            "code": "void run_process_000815ec(void)\n{\n  initialize_system();\n  setup_network();\n  do_nothing();\n  enable_logging(true);\n  start_process();\n  do {\n    do {\n      check_status();\n    } while (DAT_00081614 == 0);\n    process_data();\n  } while( true );\n}",
            "called": [
                "FUN_00080970",
                "FUN_00080f08",
                "FUN_000815e8",
                "FUN_00080250",
                "FUN_00081618",
                "FUN_00080774",
                "FUN_000801e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "run_process_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "set_bits_in_memory_00080d3e",
                "param_1": "memory_address",
                "param_2": "value_to_set",
                "param_3": "bit_mask",
                "param_4": "bit_shift_amount",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bits_in_memory_00080d3e(uint32_t* memory_address, uint32_t value_to_set, uint32_t bit_mask, uint32_t bit_shift_amount) {\n    uint32_t current_value = *memory_address;\n    uint32_t masked_value = value_to_set & bit_mask;\n    uint32_t shifted_value = masked_value << bit_shift_amount;\n    uint32_t new_value = current_value | shifted_value;\n    *memory_address = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "set_param_and_return_array_00081438",
                "param_1": "array",
                "param_2": "param",
                "FUN_00081348": "initialize_array"
            },
            "code": "undefined4* set_param_and_return_array_00081438(undefined4* array, undefined4 param) {\n  initialize_array();\n  *array = PTR_PTR_FUNCTION_1_00081458;\n  array[9] = param;\n  return array;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "set_param_and_return_array_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_offset_00080b90",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value",
                "*(undefined4 *)(param_1 + param_2 * 0x40 + 0x14)": "*(int *)(address_to_set)",
                "undefined4": "int",
                "*(int *)(address_to_set)": "value",
                "address_to_set": "address_to_set"
            },
            "code": "void set_value_at_offset_00080b90(int base_address, int offset, int value) {\n    int address_to_set = base_address + offset * 0x40 + 0x14;\n    *(int *)(address_to_set) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "iVar2": "temp",
                "uVar3": "temp1",
                "uVar4": "temp2"
            },
            "code": "uint32_t process_data_0008356c(uint32_t *output, int *input)\n{\n  uint32_t uVar1;\n  int32_t iVar2;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  \n  if ((*PTR_DAT_0008362c != 0) && (*(int *)(*PTR_DAT_0008362c + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar4 = *(uint16_t *)(input + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int32_t)(uVar3 << 0x1c) < 0) {\n    iVar2 = input[4];\n  }\n  else {\n    if (-1 < (int32_t)(uVar3 << 0x1b)) {\n      *output = 9;\n      *(uint16_t *)(input + 3) = uVar4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int32_t)(uVar3 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          FUN_00083b10(output);\n          uVar4 = *(uint16_t *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      iVar2 = input[4];\n      uVar4 = uVar4 & 0xffdb;\n      *input = iVar2;\n      input[1] = 0;\n    }\n    else {\n      iVar2 = input[4];\n    }\n    *(uint16_t *)(input + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    FUN_00084018(output, input);\n    uVar3 = (uint32_t)*(uint16_t *)(input + 3);\n    iVar2 = input[4];\n  }\n  uVar1 = uVar3 & 1;\n  if (uVar1 == 0) {\n    if (-1 < (int32_t)(uVar3 << 0x1e)) {\n      uVar1 = input[5];\n    }\n    input[2] = uVar1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int32_t)((uint32_t)*(uint16_t *)(input + 3) << 0x18) < 0)) {\n    *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10",
                "FUN_00084018"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_data_00080b98",
                "puVar1": "ptr_data",
                "iVar2": "ptr_data_2",
                "DAT_00080c04": "data_array",
                "DAT_00080c08": "data_array_2",
                "DAT_00080c0c": "data_value_2",
                "DAT_00080c10": "data_value_1",
                "DAT_00080c14": "data_value_3",
                "DAT_00080c18": "data_value_4",
                "DAT_00080c1c": "data_array_3"
            },
            "code": "void initialize_data_00080b98(void)\n{\n    int *ptr_data = DAT_00080c04;\n    *DAT_00080c04 = 0x400;\n    DAT_00080c04[0x80] = 0x400;\n    int ptr_data_2 = DAT_00080c08;\n    if (-1 < *(int *)(DAT_00080c08 + 0x20) << 7) {\n        *(int *)(DAT_00080c08 + 0x20) = DAT_00080c10;\n        do {\n        } while (-1 < *(int *)(ptr_data_2 + 0x68) << 0x1f);\n    }\n    *(int *)(ptr_data_2 + 0x20) = DAT_00080c0c;\n    do {\n    } while (-1 < *(int *)(ptr_data_2 + 0x68) << 0xf);\n    *(unsigned int *)(DAT_00080c08 + 0x30) = *(unsigned int *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1;\n    do {\n    } while (-1 < *(int *)(ptr_data_2 + 0x68) << 0x1c);\n    *(int *)(DAT_00080c08 + 0x28) = DAT_00080c14;\n    do {\n    } while (-1 < *(int *)(ptr_data_2 + 0x68) << 0x1e);\n    *(unsigned int *)(DAT_00080c08 + 0x30) = 0x11;\n    do {\n    } while (-1 < *(int *)(ptr_data_2 + 0x68) << 0x1c);\n    *(unsigned int *)(DAT_00080c08 + 0x30) = 0x12;\n    do {\n    } while (-1 < *(int *)(ptr_data_2 + 0x68) << 0x1c);\n    *DAT_00080c1c = DAT_00080c18;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_data_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "calculate_sum_of_two_values_000810e8",
                "param_1": "input_value",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_000810a6": "get_first_value",
                "FUN_000810d8": "get_second_value"
            },
            "code": "int calculate_sum_of_two_values_000810e8(undefined4 input_value)\n{\n  int first_value = get_first_value();\n  int second_value = get_second_value(input_value);\n  return second_value + first_value;\n}",
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_two_values_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "array_address",
                "param_2": "bit_position"
            },
            "code": "void set_bit_at_position_00080d58(int array_address, uint8_t bit_position){\n  uint8_t bit_mask = 1 << (bit_position & 0xff);\n  *(int *)(array_address + 0x14) = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "reset_array_00081480",
                "param_1": "array_ptr",
                "*param_1": "*array_ptr",
                "FUN_00081800": "clear_array",
                "param_1[1]": "array_ptr[1]",
                "param_1[2]": "array_ptr[2]"
            },
            "code": "void reset_array_00081480(int *array_ptr)\n{\n  if (*array_ptr != 0) {\n    clear_array();\n  }\n  *array_ptr = 0;\n  array_ptr[2] = 0;\n  array_ptr[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "reset_array_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "execute_function_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "FUNC_00081fac": "execute_function",
                "*DAT_00081fa8": "function_ptr"
            },
            "code": "void execute_function_with_params_00081f9c(int* *DAT_00081fa8, int param_1, int param_2)\n{\n  execute_function(*DAT_00081fa8, param_1, param_2);\n  return;\n}\n",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input",
                "*(int *)(param_1 + 0x10)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_2",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2 + 1",
                "difference": "result"
            },
            "code": "uint calculate_difference_00081248(int param_1)\n{\n    int* ptr_1 = *(int *)(param_1 + 0x10);\n    int* ptr_2 = ptr_1 + 0x20;\n    int difference = *ptr_2 - *(ptr_2 + 1) & 0x7f;\n    return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "execute_function_00081800",
                "param_1": "parameter",
                "*DAT_0008180c": "function_pointer"
            },
            "code": "void execute_function_00081800(void* *DAT_0008180c, undefined4 parameter) {\n  *DAT_0008180c(parameter);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081472",
                "FUN_0008151c",
                "FUN_00081480"
            ],
            "imported": false,
            "current_name": "execute_function_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input_num",
                "param_2": "input_num2",
                "param_3": "input_num3",
                "param_4": "input_num4",
                "param_5": "result_array",
                "uVar1": "product",
                "lVar2": "long_product"
            },
            "code": "void calculate_difference_0008458c(uint input_num, int input_num2, undefined4 input_num3, undefined4 input_num4, int *result_array)\n{\n  uint product;\n  long long long_product;\n  long_product = multiply_numbers();\n  long_product = long_product * CONCAT44(input_num4, input_num3);\n  product = (uint)long_product;\n  *result_array = input_num - product;\n  result_array[1] = (input_num2 - (int)((ulonglong)long_product >> 0x20)) - (uint)(input_num < product);\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "data_ptr",
                "param_2": "data_count",
                "param_3": "data_value",
                "param_4": "result_ptr",
                "uVar1": "function_result",
                "iVar2": "function_status",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008434c(undefined4 *data_ptr, int data_count, undefined4 data_value, undefined4 *result_ptr)\n{\n    undefined4 function_result;\n    int function_status;\n    code *function_pointer;\n    undefined stack_buffer[12];\n    \n    if (data_count == 0)\n    {\n        function_pointer = *DAT_00084398;\n        function_result = get_function_result();\n        function_status = (*function_pointer)(data_ptr, stack_buffer, 0, function_result, result_ptr);\n    }\n    else\n    {\n        function_pointer = *DAT_00084398;\n        function_result = get_function_result();\n        function_status = (*function_pointer)(data_ptr, data_count, data_value, function_result, result_ptr);\n    }\n    \n    if (function_status == -1)\n    {\n        *result_ptr = 0;\n        *data_ptr = 0x8a;\n    }\n    return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "send_data_packet_0008159e",
                "param_1": "data",
                "param_2": "length",
                "param_3": "destination_address",
                "local_c": "masked_length",
                "uStack_8": "destination"
            },
            "code": "void send_data_packet_0008159e(uint8_t *data, uint32_t length, uint8_t *destination_address)\n{\n  uint32_t masked_length = length & 0xffff00ff;\n  uint8_t *destination = destination_address;\n  send_packet(data, &masked_length, 1, 0, destination_address);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "send_data_packet_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "validate_input_000806a0",
                "*param_1": "*input_array",
                "param_2": "input_length",
                "bVar1": "result_byte",
                "puVar2": "data_pointer",
                "uVar3": "data_value",
                "uVar4": "input_value",
                "uVar5": "data_address",
                "iVar6": "loop_counter",
                "uVar7": "array_index"
            },
            "code": "byte validate_input_000806a0(byte *input_array, undefined4 input_length) {\n  byte result_byte;\n  undefined *data_pointer;\n  undefined4 data_value;\n  uint input_value;\n  undefined4 data_address;\n  int loop_counter;\n  uint array_index;\n\n  if (0x3b < *input_array) {\n    goto LAB_00080660;\n  }\n\n  FUN_00080f0c(input_length, 1, 0x220, *input_array, 0x960);\n  data_pointer = PTR_DAT_00080694;\n  input_value = (uint)*input_array;\n  result_byte = PTR_DAT_00080694[input_value * 8];\n  input_array[2] = 0;\n  array_index = input_value / 0xc;\n  data_pointer[input_value * 8] = result_byte & 0xc0 | (byte)input_length & 0x3f;\n  input_array[1] = 0;\n  loop_counter = 0;\n\n  do {\n    if ((int)((uint)(byte)data_pointer[(loop_counter + array_index * 0xc) * 8] << 0x19) < 0) {\n      goto LAB_00080652;\n    }\n\n    loop_counter = loop_counter + 1;\n  } while (loop_counter != 0xc);\n\n  data_value = DAT_00080698;\n\n  if (array_index == 0) {\n    data_address = 0x1e;\n  } else if (array_index == 1) {\n    data_address = 0x1f;\n  } else if (array_index == 2) {\n    data_address = 0x20;\n  } else if (array_index == 3) {\n    array_index = 2;\n    data_address = 0x1d;\n  } else if (array_index == 4) {\n    array_index = 0;\n    data_address = 0x1b;\n  }\n\n  FUN_000803fc(data_value, array_index, data_address, data_address);\n\nLAB_00080652:\n  data_pointer[(uint)*input_array * 8] = data_pointer[(uint)*input_array * 8] | 0x40;\n\nLAB_00080660:\n  return *input_array;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "validate_input_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copyIfNotZero_0008151c",
                "param_1": "source",
                "param_2": "destination"
            },
            "code": "void copyIfNotZero_0008151c(int *source, int *destination)\n{\n  if (*source != 0) {\n    if ((*destination != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n      if ((uint)destination[2] <= (uint)source[1]) {\n        FUN_000825cc();\n        source[2] = destination[2];\n        goto LAB_00081558;\n      }\n    }\n    FUN_00081800();\n  }\n  *source = *destination;\n  source[1] = destination[1];\n  source[2] = destination[2];\n  *destination = 0;\n  destination[1] = 0;\nLAB_00081558:\n  destination[2] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copyIfNotZero_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "line_num",
                "param_2": "file_name",
                "param_3": "message",
                "param_4": "error_code",
                "uVar1": "error_code_copy",
                "uVar2": "error_code_param",
                "puVar3": "message_ptr",
                "PTR_s___function__00081728": "assertion_failed_message",
                "PTR_s_assertion___s__failed__file___s__0008172c": "file_name_string",
                "PTR_s__00081730": "default_message"
            },
            "code": "void assertion_failed_000816f8(undefined4 line_num, undefined4 file_name, undefined* message, undefined4 error_code)\n{\n  undefined4 error_code_copy = *(undefined4 *)(*error_code_ptr + 0xc);\n  undefined4 error_code_param = error_code;\n  undefined *message_ptr = PTR_s___function__00081728;\n  if (message == NULL) goto LAB_0008171c;\n  do {\n    error_code = line_num;\n    FUN_00081750(error_code_copy, PTR_s_assertion___s__failed__file___s__0008172c, error_code_param, line_num, file_name, message_ptr, message);\n    undefined8 result = FUN_000836ec();\n    file_name = (undefined4)((ulonglong)result >> 0x20);\n    error_code_copy = (undefined4)result;\nLAB_0008171c:\n    message = PTR_s__00081730;\n    error_code_param = error_code;\n    message_ptr = PTR_s__00081730;\n  } while( true );\n}",
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "assertion_failed_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data_ptr",
                "uVar1": "result",
                "iVar2": "helper_result",
                "iVar3": "data",
                "DAT_00084490": "data_start"
            },
            "code": "int process_data_00084484(int data_ptr) {\n  int data = *DAT_00084490;\n  if (data_ptr == 0) {\n    return 0;\n  }\n  if (data != 0 && *(int *)(data + 0x38) == 0) {\n    initialize_data();\n  }\n  if (*(short *)(data_ptr + 0xc) != 0) {\n    int result = process_data_00084484_helper(data, data_ptr);\n    if (*(code **)(data_ptr + 0x2c) != (code *)0x0) {\n      int helper_result = (**(code **)(data_ptr + 0x2c))(data, *(undefined4 *)(data_ptr + 0x1c));\n      if (helper_result < 0) {\n        result = -1;\n      }\n    }\n    if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x18) < 0) {\n      process_data_00084484_error(data, *(undefined4 *)(data_ptr + 0x10));\n    }\n    if (*(int *)(data_ptr + 0x30) != 0) {\n      if (*(int *)(data_ptr + 0x30) != data_ptr + 0x40) {\n        process_data_00084484_error(data);\n      }\n      *(undefined4 *)(data_ptr + 0x30) = 0;\n    }\n    if (*(int *)(data_ptr + 0x44) != 0) {\n      process_data_00084484_error(data);\n      *(undefined4 *)(data_ptr + 0x44) = 0;\n    }\n    do_nothing_0008397c();\n    *(undefined2 *)(data_ptr + 0xc) = 0;\n    do_nothing_00083980();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_index",
                "PTR_": "buffer_address + ",
                "DAT_": ""
            },
            "code": "void update_buffer_000811ca(int buffer_address, undefined new_value)\n{\n  uint new_index = *(int *)(PTR_0x80) + 1U & 0x7f;\n  uint current_index = *(uint *)(PTR_0x84);\n  if (new_index != current_index) {\n    *(undefined *)(PTR_*(int *)(PTR_0x80)) = new_value;\n    *(uint *)(PTR_0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "print_message_and_values_00080164",
                "param_1": "message",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "unused",
                "PTR_DAT_0008017c": "PTR_MESSAGE_START",
                "PTR_DAT_00080180": "PTR_VALUE1_START",
                "DAT_000806f8": "print_string",
                "DAT_000806f8_1": "print_integer"
            },
            "code": "void print_message_and_values_00080164(char* message, int value1, int value2)\n{\n  DAT_000806f8(PTR_DAT_0008017c, message);\n  DAT_000806f8_1(PTR_DAT_00080180, value1);\n  DAT_000806f8_1(PTR_VALUE2_START, value2);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "print_message_and_values_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "data",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "sVar1": "data_shortened",
                "uVar4": "data_ushort",
                "puVar2": "ptr_data",
                "iVar3": "return_value"
            },
            "code": "void process_data_00084244(int* output, int data, int unused_param1, int unused_param2)\n{\n    short data_shortened = *(short*)(data + 0xE);\n    ushort data_ushort = *(ushort*)(data + 0xC);\n\n    if ((int)((uint)data_ushort << 0x17) < 0)\n    {\n        FUN_000844e0(output, data_shortened, 0, 2);\n        data_ushort = *(ushort*)(data + 0xC);\n    }\n\n    *(ushort*)(data + 0xC) = data_ushort & 0xEFFF;\n    void* ptr_data = PTR_DAT_000843dc;\n    *(int*)ptr_data = 0;\n    int return_value = FUN_00080ec8((int)data_shortened, unused_param1, unused_param2, unused_param2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n\n    if ((return_value == -1) && (*(int*)ptr_data != 0))\n    {\n        *output = *(int*)ptr_data;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "validate_input_00081496",
                "param_1": "input_array",
                "param_2": "array_length",
                "iVar1": "result"
            },
            "code": "int validate_input_00081496(int *input_array, int array_length, undefined4 param_3, undefined4 param_4)\n{\n  int result;\n  result = validate_input_00081496_helper(*input_array, array_length + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *input_array = result;\n    input_array[1] = array_length;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "validate_input_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_data_00084004",
                "DAT_00084008": "data"
            },
            "code": "int get_data_00084004() {\n    return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_data_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr",
                "puVar2": "flag_ptr",
                "PTR_DAT_0008107c": "data_ptr",
                "PTR_DAT_00081080": "flag_ptr",
                "iVar3": "result",
                "uVar4": "data_value",
                "iVar5": "data_index"
            },
            "code": "void update_data_00081014(int index, int value, undefined4 param_3)\n{\n  undefined *PTR_DAT_0008107c = PTR_DAT_0008107c;\n  undefined *PTR_DAT_00081080 = PTR_DAT_00081080;\n  if (PTR_DAT_0008107c[index * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081080[index] & 0xf) == 5) {\n      FUN_00080f0c(index, 1, param_3, 5, index, value, param_3);\n    }\n    PTR_DAT_00081080[index] = PTR_DAT_00081080[index] & 0xf | (byte)(value << 4);\n    int data_index = *(int *)(PTR_DAT_0008107c + index * 0x1c);\n    undefined4 data_value = *(undefined4 *)(PTR_DAT_0008107c + index * 0x1c + 4);\n    int result = FUN_00080a94(data_index, data_value);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data_index + 100) = data_value;\n        return;\n      }\n      *(undefined4 *)(data_index + 0x60) = data_value;\n      return;\n    }\n    FUN_00080a0a(data_index, data_value, value, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080a0a",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_data_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "insert_value_at_index_000816ec",
                "param_1": "value",
                "param_2": "index",
                "param_3": "array",
                "puVar1": "current_array",
                "iVar3": "pointer_to_current_array",
                "uVar2": "current_index",
                "uVar4": "bit_mask"
            },
            "code": "void insert_value_at_index_000816ec(uint32_t value, uint32_t index, uint32_t *array)\n{\n  uint32_t *current_array = *(uint32_t **)(*(int *)(PTR_DAT_000836d0) + 0x148);\n  if (current_array == NULL) {\n    current_array = (uint32_t *)(*(int *)(PTR_DAT_000836d0) + 0x14c);\n    *(uint32_t **)(*(int *)(PTR_DAT_000836d0) + 0x148) = current_array;\n  }\n  uint32_t current_index = current_array[1];\n  if (current_index > 0x1f) {\n    if ((DAT_000836d4 == 0) || (current_array = (uint32_t *)FUN_000817f0(400), current_array == NULL)) {\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    *current_array = *(uint32_t *)(*(int *)(PTR_DAT_000836d0) + 0x148);\n    current_array[1] = 0;\n    current_index = 0;\n    *(uint32_t **)(*(int *)(PTR_DAT_000836d0) + 0x148) = current_array;\n    current_array[0x62] = 0;\n    current_array[99] = 0;\n  }\n  uint32_t bit_mask = 1 << (current_index & 0xff);\n  current_array[current_index + 0x22] = value;\n  current_array[0x62] |= bit_mask;\n  current_array[current_index + 0x42] = array[index];\n  current_array[99] |= bit_mask;\n  current_array[1] = current_index + 1;\n  current_array[current_index + 2] = index;\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "insert_value_at_index_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = FUN_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00083b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_000817f0",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "check_if_param_valid_000814ae",
                "param_1": "ptr_param_list",
                "param_2": "param_list_size",
                "*param_1": "*ptr_param1",
                "(uint)param_1[1]": "param2",
                "iVar1": "result",
                "return 0": "status = 0",
                "return 1": "return status",
                "*(undefined *)*param_1": "*(uint8_t*)*ptr_param1"
            },
            "code": "int check_if_param_valid_000814ae(int* ptr_param_list, uint32_t param_list_size)\n{\n    int status = 1;\n    int* ptr_param1 = ptr_param_list;\n    uint32_t param2 = *(ptr_param_list + 1);\n    \n    if ((*ptr_param1 == 0) || (param2 < param_list_size))\n    {\n        int result = FUN_00081496(ptr_param1);\n        if (result == 0)\n        {\n            status = 0;\n        }\n        if (*(ptr_param_list + 2) == 0)\n        {\n            *(uint8_t*)*ptr_param1 = 0;\n        }\n    }\n    return status;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "check_if_param_valid_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_functions_00081778",
                "PTR_DAT_000817b8": "PTR_FUNCTIONS_END",
                "PTR_DAT_000817bc": "PTR_FUNCTIONS_START",
                "ppcVar4": "function_ptr",
                "iVar3": "i",
                "puVar2": "PTR_DATA_END",
                "puVar1": "PTR_DATA_START",
                "do_nothing_00085844": "do_nothing",
                "iVar5": "num_functions",
                "num_data": "num_data",
                "data_ptr": "data_ptr"
            },
            "code": "void execute_functions_00081778(){\n    int num_functions = (int)PTR_DAT_000817b8 - (int)PTR_DAT_000817bc >> 2;\n    if (num_functions != 0) {\n        code **function_ptr = (code **)(PTR_DAT_000817bc - 4);\n        int i = 0;\n        do {\n            i++;\n            function_ptr++;\n            (**function_ptr)();\n        } while (num_functions != i);\n    }\n    undefined *data_end = PTR_DATA_END;\n    undefined *data_start = PTR_DATA_START;\n    do_nothing_00085844();\n    int num_data = (int)data_start - (int)data_end >> 2;\n    if (num_data != 0) {\n        code **data_ptr = (code **)(data_end - 4);\n        int i = 0;\n        do {\n            i++;\n            data_ptr++;\n            (**data_ptr)();\n        } while (num_data != i);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_functions_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_and_return_value_000800f4",
                "param_1": "input_value",
                "*PTR_DAT_0008010c": "string_ptr",
                "DAT_00080110": "integer_data",
                "DAT_00080114": "integer_value"
            },
            "code": "int check_and_return_value_000800f4(int input_value) {\n  if (**PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      input_value = DAT_00080114;\n    }\n    **PTR_DAT_0008010c = 1;\n  }\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_value_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "execute_function_000810c4",
                "FUN_000810a6": "call_subfunction"
            },
            "code": "void execute_function_000810c4(void)\n{\n  call_subfunction();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "execute_function_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "set_bit_00080d30",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "data_",
                "DAT_": "bit_"
            },
            "code": "void set_bit_00080d30(uint32_t* data, uint32_t DAT_position, uint32_t DAT_value) {\n    uint32_t* PTR_ptr = data + 1;\n    uint32_t current_value = *PTR_ptr;\n    uint32_t mask = (DAT_value & 1) << DAT_position;\n    *PTR_ptr = current_value | mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bit_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_value_at_index_00080c98",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "max_value",
                "local_58": "local_array",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_value_at_index_00080c98(uint32_t *output_array, uint32_t input_value, int divisor, int max_value)\\n\\\n    {\\n\\\n        uint32_t local_array[16];\\n\\\n        uint32_t index = 0;\\n\\\n        \\n\\\n        local_array[0] = *PTR_DAT_00080d28;\\n\\\n        local_array[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\\n\\\n        local_array[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\\n\\\n        local_array[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\\n\\\n        local_array[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\\n\\\n        local_array[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\\n\\\n        local_array[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\\n\\\n        local_array[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\\n\\\n        local_array[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\\n\\\n        local_array[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\\n\\\n        local_array[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\\n\\\n        local_array[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\\n\\\n        local_array[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\\n\\\n        local_array[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\\n\\\n        local_array[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\\n\\\n        local_array[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\\n\\\n        \\n\\\n        output_array[0] = 1;\\n\\\n        output_array[1] = 0;\\n\\\n        output_array[0x48] = 0x202;\\n\\\n        output_array[0x41] = 0;\\n\\\n        output_array[0x45] = 0;\\n\\\n        \\n\\\n        uint32_t quotient = input_value / (uint32_t)(divisor * 2);\\n\\\n        if (input_value == divisor * 2 * quotient) {\\n\\\n            quotient = quotient - 1;\\n\\\n        }\\n\\\n        \\n\\\n        for (int i = 0; i < 16; i++) {\\n\\\n            if ((uint32_t)(max_value * (int)((uint64_t)input_value / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c) <= local_array[i]) {\\n\\\n                output_array[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\\n\\\n                return 0;\\n\\\n            }\\n\\\n            index++;\\n\\\n        }\\n\\\n        return 0xffffffff;\\n\\\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param_2, int param_3, int param_4)\n{\n  exiting_with_status(PTR_s_Exiting_with_status__d__00080ef8, status_code, param_3, param_4, param_4);\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "calculate_result_000811e8",
                "param_1": "input_array",
                "iVar1": "current_value",
                "thunk_FUN_000816d8": "get_initial_value"
            },
            "code": "int calculate_result_000811e8(int *input_array)\n{\n  int current_value;\n  int initial_value = get_initial_value();\n  input_array[3] = initial_value;\n  do {\n    current_value = (**(code **)(*input_array + 0xc))(input_array);\n    if (current_value >= 0) {\n      return current_value;\n    }\n    current_value = get_initial_value();\n  } while ((uint)(current_value - input_array[3]) < (uint)input_array[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "calculate_result_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_data_000806f8",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "new_length",
                "PTR_DAT_000806f4": "ptr_data_1",
                "DAT_000806ec": "data_1",
                "DAT_000806f0": "data_2"
            },
            "code": "void calculate_data_000806f8(byte *data, uint data_length){\n  uint length = data_length;\n  \n  if (length < 0x220) {\n    uint uVar1 = length;\n    if (0xb3 < length) {\n      uVar1 = 0xb4;\n    }\n    length = calculate_new_length(uVar1 & ~((int)uVar1 >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,(600 - (char)data[2]) * 4,length);\n  }\n  if (*data < 0x3c) {\n    uint uVar1 = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == SBORROW4(length,uVar1)) && (uVar1 = (600 - (char)data[2]) * 4, (int)length <= (int)uVar1)) {\n      uVar1 = length;\n    }\n    *(uint *)(PTR_DAT_000806f4 + (uint)*data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (uVar1 - 2) >> 5;\n  }\n  return;\n}",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_data_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "base",
                "pcVar1": "current_char",
                "uVar2": "quotient",
                "pcVar3": "output_ptr",
                "cVar4": "remainder_char",
                "uVar5": "remainder",
                "local_15": "buffer"
            },
            "code": "void convert_decimal_to_base_n_000810fc(char* output, const uint32_t input, const uint32_t base) {\n    char *current_char;\n    uint32_t quotient;\n    char *output_ptr;\n    char remainder_char;\n    uint32_t remainder;\n    char buffer[5];\n    buffer[1] = 0;\n    if (base < 2) {\n        base = 10;\n    }\n    current_char = buffer;\n    do {\n        output_ptr = current_char;\n        quotient = input / base;\n        remainder = input - base * quotient & 0xff;\n        remainder_char = (char)remainder;\n        if (remainder < 10) {\n            remainder_char = remainder_char + '0';\n        }\n        else {\n            remainder_char = remainder_char + '7';\n        }\n        *output_ptr = remainder_char;\n        input = quotient;\n        current_char = output_ptr - 1;\n    } while (quotient != 0);\n    reverse_string(output, buffer);\n}\n\nvoid reverse_string(char* output, char* input) {\n    size_t length = strlen(input);\n    for (size_t i = 0; i < length; ++i) {\n        output[i] = input[length - i - 1];\n    }\n    output[length] = '\\0';\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_n_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "drive_control_00080250",
                "puVar1": "drive_mode",
                "uVar2": "motor_speed",
                "uVar3": "steer_angle",
                "iVar4": "drive_mode_status",
                "puVar5": "drive_mode_flag",
                "auStack_1c": "log_buffer",
                "PTR_DAT_000803bc": "drive_mode_ptr",
                "PTR_DAT_000803c0": "drive_mode_flag_ptr",
                "PTR_DAT_000803cc": "manual_control_flag_ptr",
                "PTR_DAT_000803c8": "drive_mode_status_ptr",
                "PTR_DAT_000803d4": "motor_speed_ptr",
                "PTR_DAT_000803d8": "steer_angle_ptr",
                "PTR_DAT_000803dc": "steer_angle",
                "PTR_DAT_000803e0": "motor_speed",
                "PTR_DAT_000803e4": "saved_steer_angle",
                "PTR_DAT_000803e8": "autonomous_control_mode_str",
                "PTR_DAT_000803ec": "steer_str",
                "PTR_DAT_000803f0": "motor_str",
                "PTR_s_Entered_manual_control_mode__000803d0": "entered_manual_control_mode_str",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "entered_autonomous_control_mode_str",
                "PTR_s_steer_000803f4": "steer_str_2",
                "PTR_s_motor_000803f8": "motor_str_2",
                "PTR_s_error_000803c4": "error_str"
            },
            "code": "void drive_control_00080250() {\n  uint32_t drive_mode = init_drive_mode();\n  wait(10);\n  uint32_t *drive_mode_flag = init_drive_mode_flag();\n  *drive_mode_flag = *drive_mode_flag ^ 1;\n  set_drive_mode(drive_mode);\n  uint32_t *manual_control_flag = init_manual_control_flag();\n  if (*drive_mode < 0x641) {\n    if (*drive_mode - 0x385U < 299) {\n      if (*manual_control_flag != 0) {\n        log_drive_control_00080250();\n        print_message(PTR_s_Entered_manual_control_mode__000803d0);\n        *manual_control_flag = 0;\n      }\n      wait(10);\n      uint32_t PTR_DAT_000803e0 = set_PTR_DAT_000803e0(1000, 2000, 0x28, 0x96);\n      uint32_t PTR_DAT_000803dc = set_PTR_DAT_000803dc(1000, 2000, 0x28, 0x96);\n      uint32_t *PTR_DAT_000803d4 = init_PTR_DAT_000803d4();\n      uint32_t *PTR_DAT_000803d8 = init_PTR_DAT_000803d8();\n      *PTR_DAT_000803d4 = PTR_DAT_000803e0;\n      *PTR_DAT_000803d8 = PTR_DAT_000803dc;\n      while (get_drive_mode() == drive_mode) {\n        wait(10);\n        log_drive_control_00080250();\n        set_PTR_DAT_000803dc(PTR_DAT_000803dc, PTR_DAT_000803d8, 10);\n        set_PTR_DAT_000803e0(PTR_DAT_000803e0, PTR_DAT_000803d4);\n      }\n      save_PTR_DAT_000803e0(PTR_DAT_000803e0, PTR_DAT_000803d4);\n      save_PTR_DAT_000803dc(PTR_DAT_000803e4, PTR_DAT_000803d8);\n    }\n    else {\n      if (*manual_control_flag == 0) {\n        log_drive_control_00080250();\n        print_message(PTR_s_Entered_autonomous_control_mode__000803e8);\n      }\n      *manual_control_flag = 1;\n      while (get_drive_mode() == drive_mode) {\n        wait(10);\n        log_drive_control_00080250();\n        uint32_t PTR_DAT_000803dc = get_PTR_DAT_000803dc();\n        uint32_t PTR_DAT_000803e0 = get_PTR_DAT_000803e0();\n        save_PTR_DAT_000803dc(PTR_DAT_000803e4, PTR_DAT_000803dc);\n        save_PTR_DAT_000803e0(PTR_DAT_000803e0, PTR_DAT_000803e0);\n      }\n    }\n  }\n  else {\n    log_drive_control_00080250();\n    print_message(PTR_s_error_000803c4);\n  }\n}\n",
            "called": [
                "FUN_0008145c",
                "FUN_00081276",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_00081014",
                "FUN_000815b8",
                "thunk_FUN_0008113a",
                "FUN_00081248",
                "FUN_00081214",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_0008117a",
                "FUN_000806f8",
                "FUN_000810c4",
                "FUN_000815de",
                "FUN_00081560",
                "FUN_00081624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "drive_control_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_param_00080d6a",
                "param_1": "base_address",
                "param_2": "new_value"
            },
            "code": "void set_param_00080d6a(int base_address, int new_value) {\n  *(int *)(base_address + 0x28) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_param_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_device_000813dc",
                "param_1": "device_address",
                "param_2": "device_speed",
                "puVar1": "device_info_ptr",
                "iVar2": "device_info_var",
                "puVar3": "device_info_array_ptr"
            },
            "code": "void initialize_device_000813dc(uint32_t device_address, uint32_t device_speed) {\n  uint32_t *device_info_ptr;\n  int32_t device_info_var;\n  uint32_t *device_info_array_ptr;\n  \n  initialize_bus(*(uint32_t *)(device_address + 0x20));\n  \n  device_info_array_ptr = *(uint32_t **)(device_address + 0x18);\n  device_info_array_ptr[0x48] = 0x202;\n  *device_info_array_ptr = 0xac;\n  device_info_ptr = DAT_000813d4;\n  device_info_array_ptr[1] = 0x800;\n  device_info_array_ptr[8] = *device_info_ptr / device_speed >> 4;\n  device_info_array_ptr[3] = 0xffffffff;\n  device_info_array_ptr[2] = 0x61;\n  *(int32_t *)(DAT_000813d8 + ((uint32_t)(int32_t)(char)*(uint8_t *)(device_address + 0x1c) >> 5) * 4) = 1 << (uint32_t)(*(uint8_t *)(device_address + 0x1c) & 0x1f);\n  \n  device_info_var = *(int32_t *)(device_address + 0x10);\n  *(uint32_t *)(device_info_var + 0x84) = 0;\n  *(uint32_t *)(device_info_var + 0x80) = 0;\n  device_info_var = *(int32_t *)(device_address + 0x14);\n  *(uint32_t *)(device_info_var + 0x84) = 0;\n  *(uint32_t *)(device_info_var + 0x80) = 0;\n  *device_info_array_ptr = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "initialize_device_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_params_00080a0a",
                "param_1": "param_array",
                "param_2": "new_param",
                "param_3": "has_zero",
                "param_4": "has_one",
                "param_5": "has_two"
            },
            "code": "void update_params_00080a0a(undefined4 *param_array, undefined4 new_param, int has_zero, int has_one, int has_two) {\n  param_array[0x11] = new_param;\n  if (has_two == 0) {\n    param_array[0x18] = new_param;\n  }\n  else {\n    param_array[0x19] = new_param;\n  }\n  if (has_one == 0) {\n    param_array[0x15] = new_param;\n  }\n  else {\n    param_array[0x14] = new_param;\n  }\n  if (has_zero == 0) {\n    param_array[0xd] = new_param;\n  }\n  else {\n    param_array[0xc] = new_param;\n  }\n  param_array[4] = new_param;\n  *param_array = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "update_params_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_count",
                "param_3": "channel_config",
                "iVar1": "channel_offset",
                "iVar2": "channel_address",
                "uVar3": "channel_info"
            },
            "code": "void configure_channel_00080b2c(uint32_t channel_id, uint32_t channel_count, char *channel_config) {\n  uint64_t channel_info = ((uint64_t)channel_count << 32) | channel_id;\n  if (channel_count > 2) {\n    channel_config = DEFAULT_CHANNEL_CONFIG;\n    channel_info = (*CHANNEL_INFO_FUNCTION)(DEFAULT_CHANNEL_SOURCE, CHANNEL_INFO_SIZE, DEFAULT_CHANNEL_CONFIG, sizeof(TC_CHANNEL));\n  }\n  uint32_t channel_offset = (uint32_t)(channel_info >> 32) * CHANNEL_INFO_SIZE;\n  uint32_t channel_address = (uint32_t)channel_info + channel_offset;\n  *(uint32_t *)(channel_address) = 2;\n  *(uint32_t *)(channel_address + CHANNEL_CONFIG_OFFSET) = 0xffffffff;\n  *(char **)(channel_address + CHANNEL_CONFIG_POINTER_OFFSET) = channel_config;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_data_00080774",
                "puVar1": "data_ptr1",
                "puVar2": "data_ptr2",
                "iVar3": "loop_iterator1",
                "iVar4": "loop_iterator2",
                "iVar5": "loop_iterator3",
                "iVar6": "loop_iterator4",
                "iVar7": "loop_iterator5",
                "iVar8": "loop_iterator6",
                "DAT_00080878": "data_array1",
                "FUN_00080b98": "initialize_subsystem",
                "DAT_0008087c": "data_array2",
                "DAT_00080880": "data_array3",
                "FUN_00081778": "initialize_subsystem2",
                "FUN_00081014": "initialize_subsystem3",
                "DAT_00080890": "data_array4",
                "DAT_0008088c": "data_array3",
                "DAT_00080888": "data_array2",
                "DAT_00080884": "data_array1",
                "FUN_00080a30": "initialize_subsystem4",
                "FUN_00080aa8": "initialize_subsystem6",
                "FUN_00080c98": "initialize_subsystem7",
                "FUN_00080d3e": "initialize_subsystem8",
                "FUN_00080d30": "initialize_subsystem9",
                "FUN_00080d6a": "initialize_subsystem10",
                "FUN_00080d62": "initialize_subsystem11",
                "DAT_00080898": "data_array5",
                "DAT_00080894": "data_array6"
            },
            "code": "void initialize_data_00080774(void)\n{\n  uint *data_ptr1;\n  undefined4 *data_ptr2;\n  int loop_iterator1;\n  int loop_iterator2;\n  int loop_iterator3;\n  int loop_iterator4;\n  int loop_iterator5;\n  int loop_iterator6;\n\n  data_ptr1 = DAT_00080878;\n  initialize_subsystem();\n  data_ptr2 = DAT_0008087c;\n  DAT_0008087c[1] = *data_ptr1 / 1000 - 1;\n  *(undefined *)(DAT_00080880 + 0x23) = 0xf0;\n  data_ptr2[2] = 0;\n  *data_ptr2 = 7;\n  initialize_subsystem2();\n  loop_iterator5 = 0;\n  do {\n    loop_iterator6 = loop_iterator5 + 1;\n    initialize_subsystem3(loop_iterator5,0);\n    loop_iterator4 = DAT_00080890;\n    loop_iterator3 = DAT_00080880;\n    loop_iterator2 = DAT_0008087c;\n    loop_iterator1 = DAT_00080878;\n    loop_iterator5 = loop_iterator6;\n  } while (loop_iterator6 != 0x4f);\n  *(undefined4 *)(loop_iterator1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(loop_iterator2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(loop_iterator4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(loop_iterator3 + 0xa0) = 0xffffffff;\n  initialize_subsystem4(loop_iterator1,1,0x300,0);\n  initialize_subsystem3(0,1);\n  initialize_subsystem4(loop_iterator1,1,0xc00,0);\n  initialize_subsystem4(loop_iterator1,1,0x3000,0);\n  initialize_subsystem5(loop_iterator2,2,0x30,0);\n  initialize_subsystem4(loop_iterator4,1,0xc00,0);\n  initialize_subsystem4(loop_iterator1,1,3,0);\n  initialize_subsystem4(loop_iterator4,1,0xc000,0);\n  initialize_subsystem6(0x25);\n  initialize_subsystem7(DAT_00080898,*data_ptr1,DAT_00080894,0xc);\n  initialize_subsystem8(DAT_00080898,0,0x300000,1);\n  initialize_subsystem9(DAT_00080898,0,0);\n  initialize_subsystem10(DAT_00080898,0xffffffff);\n  initialize_subsystem11(DAT_00080898);\n  return;\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d30",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080b98",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080d62",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_data_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "calculate_checksum_00080ec2"
            },
            "code": "int calculate_checksum_00080ec2() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "calculate_checksum_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_00083888",
                "param_1": "param",
                "*puVar1": "ptr1",
                "uVar2": "var1",
                "*puVar3": "ptr2",
                "*puVar4": "ptr3",
                "*puVar5": "ptr4",
                "*puVar6": "ptr5",
                "PTR_LAB_0008387c_1_00083968": "ptr_label_1",
                "DAT_00083970": "var_1",
                "PTR_FUN_00084220_1_0008396c": "ptr_fun_1",
                "PTR_LAB_0008429c_1_00083978": "ptr_label_2"
            },
            "code": "void initialize_00083888(int param){\n                        undefined *ptr1;\n                        undefined4 var1;\n                        undefined *ptr2;\n                        undefined *ptr3;\n                        undefined4 *ptr4;\n                        undefined4 *ptr5;\n                        if (*(int *)(param + 0x38) == 0) {\n                            ptr5 = *(undefined4 **)(param + 4);\n                            *(undefined **)(param + 0x3c) = PTR_LAB_0008387c_1_00083968;\n                            *(undefined4 *)(param + 0x2e4) = 3;\n                            *(int *)(param + 0x2e8) = param + 0x2ec;\n                            *(undefined4 *)(param + 0x2e0) = 0;\n                            *(undefined2 *)(ptr5 + 3) = 4;\n                            *ptr5 = 0;\n                            ptr5[1] = 0;\n                            ptr5[2] = 0;\n                            ptr5[0x19] = 0;\n                            *(undefined2 *)((int)ptr5 + 0xe) = 0;\n                            ptr5[4] = 0;\n                            ptr5[5] = 0;\n                            ptr5[6] = 0;\n                            memset(ptr5 + 0x17,0,8);\n                            ptr2 = PTR_LAB_0008429c_1_00083978;\n                            ptr1 = PTR_FUN_00084220_1_0008396c;\n                            var1 = DAT_00083970;\n                            ptr4 = *(undefined4 **)(param + 8);\n                            ptr5[7] = ptr5;\n                            ptr5[8] = ptr1;\n                            ptr5[9] = var1;\n                            ptr5[10] = ptr2;\n                            ptr5[0xb] = ptr2;\n                            *(undefined2 *)((int)ptr4 + 0xe) = 1;\n                            *(undefined2 *)(ptr4 + 3) = 9;\n                            *ptr4 = 0;\n                            ptr4[1] = 0;\n                            ptr4[2] = 0;\n                            ptr4[0x19] = 0;\n                            ptr4[4] = 0;\n                            ptr4[5] = 0;\n                            ptr4[6] = 0;\n                            memset(ptr4 + 0x17,0,8);\n                            ptr5 = *(undefined4 **)(param + 0xc);\n                            ptr4[7] = ptr4;\n                            ptr4[8] = ptr1;\n                            ptr4[9] = var1;\n                            ptr4[10] = ptr2;\n                            ptr4[0xb] = ptr2;\n                            *(undefined2 *)(ptr5 + 3) = 0x12;\n                            *(undefined2 *)((int)ptr5 + 0xe) = 2;\n                            *ptr5 = 0;\n                            ptr5[1] = 0;\n                            ptr5[2] = 0;\n                            ptr5[0x19] = 0;\n                            ptr5[4] = 0;\n                            ptr5[5] = 0;\n                            ptr5[6] = 0;\n                            memset(ptr5 + 0x17,0,8);\n                            ptr5[7] = ptr5;\n                            ptr5[8] = ptr1;\n                            ptr5[9] = var1;\n                            ptr5[10] = ptr2;\n                            ptr5[0xb] = ptr2;\n                            *(undefined4 *)(param + 0x38) = 1;\n                        }\n                    }",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_00083850",
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "initialize_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "param_6": "parameter_6",
                "puVar1": "data_pointer_1",
                "PTR_PTR_FUN_000812b8_1_00081368": "data_pointer_2"
            },
            "code": "void initialize_parameters_00081348(int* parameters, int parameter_2, char parameter_3, int parameter_4, int parameter_5, int parameter_6)\n{\n    parameters[0] = data_pointer_1;\n    parameters[1] = 0;\n    parameters[2] = 1000;\n    parameters[3] = parameter_5;\n    parameters[4] = parameter_4;\n    parameters[5] = parameter_6;\n    parameters[6] = parameter_2;\n    *(char*)(parameters + 7) = parameter_3;\n    parameters[8] = PTR_PTR_FUN_000812b8_1_00081368;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_parameters_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_time_00081624",
                "param_1": "index",
                "param_2": "value",
                "param_3": "multiplier",
                "param_4": "constant",
                "puVar1": "data_pointer",
                "iVar2": "result",
                "uVar3": "time_value",
                "DAT_0008167c": "data_pointer",
                "PTR_DAT_00081678": "memory_pointer",
                "calculation": "calculation"
            },
            "code": "int calculate_time_00081624(int index, int value, int multiplier, undefined4 constant) {\n  uint *DAT_0008167c = DAT_0008167c;\n  int result = 0;\n  undefined4 time_value = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n  if (value == 0) {\n    time_value = 0;\n  }\n  int calculation = FUN_00081684(*(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c, *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4), time_value, ((*DAT_0008167c / DAT_00081680) * multiplier) / 0x12, constant);\n  if (calculation != 0) {\n    result = (int)((ulonglong)(calculation * 18000 + 16000) / ((ulonglong)*DAT_0008167c / 1000));\n  }\n  return result;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_time_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_bytes_to_data_buffer_00080ec8",
                "param_1": "buffer_start",
                "param_2": "source_address",
                "param_3": "num_bytes",
                "iVar1": "i"
            },
            "code": "uint copy_bytes_to_data_buffer_00080ec8(undefined4 buffer_start, int source_address, uint num_bytes){\n  int i;\n  for (i = 0; i < (int)num_bytes; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(source_address + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_data_buffer_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "calculate_sum_of_functions_0008117a",
                "param_1": "input_param",
                "iVar1": "result_of_first_function",
                "iVar2": "result_of_second_function",
                "FUN_0008113a": "call_first_function",
                "FUN_000810d8": "call_second_function",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int calculate_sum_of_functions_0008117a(int input_param)\n{\n  int sum_of_functions = 0;\n  int result_of_first_function = call_first_function();\n  int result_of_second_function = call_second_function(input_param);\n  sum_of_functions = result_of_first_function + result_of_second_function;\n  return sum_of_functions;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_functions_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "check_and_interrupt_if_zero_000801e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_00080244": "PTR_DEVICE_CONFIG",
                "PTR_DAT_00080160": "PTR_STATUS",
                "PTR_DAT_00080248": "PTR_DEVICE_A",
                "PTR_DAT_0008024c": "PTR_DEVICE_B",
                "FUN_000813dc": "initialize_device",
                "FUN_00080f0c": "enable_feature / disable_feature",
                "FUN_000806a0": "configure_device",
                "FUN_00080164": "initialize_system",
                "do_nothing_00080f08": "wait_for_system"
            },
            "code": "int check_and_interrupt_if_zero_000801e0(int param1, int param2, int param3, int param4) {\n  initialize_device(PTR_DAT_00080244, 0xe100, param3, param4, param4);\n  enable_feature(0xd, 1);\n  enable_feature(6, 1);\n  enable_feature(0x39, 0);\n  disable_feature(4);\n  disable_feature(3);\n  disable_feature(2);\n  configure_device(PTR_DAT_00080248, 5);\n  configure_device(PTR_DAT_0008024c, 6);\n  initialize_system();\n  wait_for_system(1000);\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0",
                "FUN_000813dc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_and_interrupt_if_zero_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_buffer_000811b0",
                "param_1": "buffer_address",
                "FUN_00081f00": "set_memory",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + 128)",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + 132)"
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n    set_memory(buffer_address, 0, 128);\n    *(int *)(buffer_address + 128) = 0;\n    *(int *)(buffer_address + 132) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "execute_function_with_data_000817f0",
                "param_1": "param",
                "*DAT_000817fc": "data",
                "FUNC_00081810": "function_pointer"
            },
            "code": "void execute_function_with_*execute_function_with_data_000817f0(void* *execute_function_with_data_000817f0, int param)\n{\n  function_pointer = **execute_function_with_data_000817f0;\n  function_pointer(param);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_new_value_0008145c",
                "param_1": "current_value",
                "param_2": "previous_value",
                "param_3": "max_value",
                "param_4": "min_value",
                "param_5": "new_max_value"
            },
            "code": "int calculate_new_value_0008145c(int current_value, int previous_value, int max_value, int min_value, int new_max_value) {\n    int difference = current_value - previous_value;\n    int range = max_value - min_value;\n    int new_range = new_max_value - min_value;\n    int scaled_difference = (difference * new_range) / range;\n    int new_value = scaled_difference + min_value;\n    return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_new_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "get_one_00080eba"
            },
            "code": "int get_one_00080eba() {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "get_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00081e34(piVar9,param_2);\n      }\n      FUN_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "*DAT_000811a8": "*PTR_COUNT",
                "iVar1": "count",
                "*DAT_000811ac": "*DAT_FUNCTION_POINTER"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1": "params",
                "param_2": "new_param_value",
                "param_3": "param_flags",
                "bVar1": "is_flagged",
                "bVar2": "is_second_flagged",
                "bVar3": "is_third_flagged"
            },
            "code": "void update_parameters_000809e4(uint32_t *params, uint32_t new_param_value, uint32_t param_flags) {\n    bool is_flagged = (int)(param_flags << 0x1f) < 0;\n    params[0x11] = new_param_value;\n    if (is_flagged) {\n        params[0x19] = new_param_value;\n    }\n    if (!is_flagged) {\n        params[0x18] = new_param_value;\n    }\n    bool is_second_flagged = (param_flags & 10) != 0;\n    if (is_second_flagged) {\n        params[8] = new_param_value;\n    }\n    if (!is_second_flagged) {\n        params[9] = new_param_value;\n    }\n    bool is_third_flagged = ((int)(param_flags << 0x1e) < 0) || ((int)(param_flags << 0x1c) < 0);\n    if (is_third_flagged) {\n        params[0x20] = new_param_value;\n    }\n    params[5] = new_param_value;\n    *params = new_param_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_parameters_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "returnZero_00080ebe"
            },
            "code": "int returnZero_00080ebe() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "returnZero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "PTR_DAT_000816e0": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_thunk_000816d8() {\n    int* pointer_to_value = (int*)PTR_DAT_000816e0;\n    return *pointer_to_value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_data_from_pointer_000816d8",
                "PTR_DAT_000816e0": "data_pointer"
            },
            "code": "int get_data_from_pointer_000816d8(){\n    int* PTR_DAT_000816e0 = (int*)PTR_DAT_000816e0;\n    return *PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_byte_000815b8",
                "param_1": "byte_list",
                "param_2": "byte_to_check",
                "uVar1": "byte_count",
                "iVar2": "result"
            },
            "code": "int check_byte_000815b8(byte **byte_list, byte *byte_to_check) {\n    uint byte_count;\n    int result;\n    \n    if (byte_list[2] == NULL) {\n        if (byte_to_check == NULL) {\n            return 1;\n        }\n    }\n    else {\n        if (byte_to_check != NULL) {\n            byte_count = get_byte_count(*byte_list);\n            goto LAB_000815d4;\n        }\n        byte_to_check = *byte_list;\n    }\n    byte_count = (uint)*byte_to_check;\nLAB_000815d4:\n    result = 1 - byte_count;\n    if (byte_count > 1) {\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_byte_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "calculateAndUpdateSum_00084220",
                "param_1": "data",
                "param_2": "ptrData",
                "iVar1": "result"
            },
            "code": "void calculateAndUpdateSum_00084220(int data, int* ptrData){\n  int result = calculate(data, *(short *)(ptrData + 0xe));\n  if (result >= 0) {\n    *(int *)(ptrData + 0x50) += result;\n    return;\n  }\n  *(ushort *)(ptrData + 0xc) &= 0xefff;\n  return;\n}\n",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "calculateAndUpdateSum_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "reverse_and_return_pointer_00081472",
                "param_1": "pointer_to_reverse",
                "*param_1": "*pointer_to_reverse",
                "FUN_00081800": "reverse_list"
            },
            "code": "undefined4 *reverse_and_return_pointer_00081472(undefined4 *pointer_to_reverse)\n{\n  reverse_list(*pointer_to_reverse);\n  return pointer_to_reverse;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "reverse_and_return_pointer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "add_item_to_list_000836ec",
                "uVar1": "item",
                "puVar2": "list_ptr",
                "iVar3": "list_size",
                "iVar4": "LIST_START_PTR",
                "UNRECOVERED_JUMPTABLE_00": "jump_to",
                "PTR_DAT_000836d0": "LIST_END_PTR",
                "DAT_000836d4": "LIST_OVERFLOW_FLAG"
            },
            "code": "void add_item_to_list_000836ec(void)\n{\n    int item = get_next_item();\n    int *list_ptr = *(int **)LIST_START_PTR;\n    if (list_ptr == NULL)\n    {\n        list_ptr = (int *)(*(int *)PTR_DAT_000836d0);\n        *(int **)LIST_START_PTR = list_ptr;\n    }\n    int list_size = list_ptr[1];\n    if (list_size > 31)\n    {\n        if ((*(int *)DAT_000836d4 == 0) ||\n           ((list_ptr = (int *)allocate_memory(400)) == NULL))\n        {\n            exit_program();\n            return;\n        }\n        *list_ptr = *(int *)(*(int **)LIST_START_PTR);\n        list_ptr[1] = 0;\n        list_size = 0;\n        *(int **)LIST_START_PTR = list_ptr;\n        list_ptr[98] = 0;\n        list_ptr[99] = 0;\n    }\n    list_ptr[1] = list_size + 1;\n    list_ptr[list_size + 2] = item;\n    jump_to(0x836fb);\n    return;\n}",
            "called": [
                "FUN_000841e4",
                "FUN_000817f0",
                "FUN_00080eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "add_item_to_list_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_and_send_to_server_00081750",
                "param_1": "server_port",
                "param_2": "server_ip",
                "param_3": "data_size",
                "param_4": "data_buffer",
                "uStack_8": "size",
                "uStack_4": "buffer",
                "*DAT_00081774": "server_socket",
                "FUNC_0008289c": "send_data_to_server"
            },
            "code": "void process_data_and_send_to_server_00081750(int server_port, char* server_ip, int data_size, char* data_buffer)\n{\n    int port = server_port;\n    char* ip_address = server_ip;\n    int size = data_size;\n    char* buffer = data_buffer;\n    send_data_to_server(**DAT_00081774, ip_address, port, buffer, size);\n    return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_data_and_send_to_server_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_bytes_until_null_00082688",
                "param_1": "address",
                "puVar2": "aligned_address",
                "iVar1": "byte_count",
                "uVar3": "data",
                "bVar4": "is_null_byte"
            },
            "code": "int count_bytes_until_null_00082688(uint32_t address) {\n  int byte_count = -(address & 3);\n  uint32_t *aligned_address = (uint32_t *)(address & 0xfffffffc);\n  uint32_t data = *aligned_address;\n  if ((address & 3) != 0) {\n    data = data | 0xffffffffU >> ((byte_count + 4U & 0x1f) << 3);\n  }\n  while (aligned_address++, (data + 0xfefefeff & ~data & 0x80808080) == 0) {\n    byte_count += 4;\n    data = *aligned_address;\n  }\n  bool is_null_byte = (data & 0xff) == 0;\n  if (!is_null_byte) {\n    byte_count += 1;\n    is_null_byte = (data & 0xff00) == 0;\n  }\n  if (!is_null_byte) {\n    byte_count += 1;\n    is_null_byte = (data & 0xff0000) == 0;\n  }\n  if (!is_null_byte) {\n    byte_count += 1;\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "processInput_00084508",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void processInput_00084508(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n    undefined *ptr = PTR_DAT_0008452c;\n    *(undefined4 *)ptr = 0;\n    int result = doProcessing(input1, input2, input3);\n    if ((result == -1) && (*(int *)ptr != 0)) {\n        *output = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "processInput_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "flag",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, unsigned int flag) {\n    bool is_negative_flag;\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*data_ptr)(data_ptr, data_type, data_value);\n            is_negative_flag = (int)(flag << 0x1f) < 0;\n            *(int *)(data_ptr + 0x44) = data_value;\n            if (is_negative_flag) {\n                *(int *)(data_ptr + 100) = data_value;\n            }\n            if (!is_negative_flag) {\n                *(int *)(data_ptr + 0x60) = data_value;\n            }\n            break;\n        case 3:\n            (*data_ptr)(data_ptr, data_value, flag, data_ptr, data_ptr);\n            break;\n        case 4:\n        case 5:\n            (*data_ptr)(data_ptr, data_value, data_type == 5, (flag << 0x1d) >> 0x1f, flag & 1, data_type, data_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_000809be",
                "FUN_00080a0a",
                "FUN_000809e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_data_structures_0008089c",
                "param_1": "heap_start",
                "param_2": "heap_end",
                "param_3": "buffer_end",
                "puVar1": "heap_start",
                "puVar2": "heap_end",
                "puVar3": "data_start",
                "puVar4": "data_end",
                "puVar5": "buffer_end",
                "puVar6": "buffer_start"
            },
            "code": "void initialize_data_structures_0008089c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *heap_start;\n  undefined *heap_end;\n  undefined *data_start;\n  undefined *data_end;\n  undefined *buffer_start;\n  undefined *buffer_end;\n  \n  heap_end = PTR_DAT_00080934;\n  heap_start = PTR_DAT_00080930;\n  FUN_000811b0(heap_start);\n  FUN_000811b0(heap_end);\n  buffer_end = PTR_DAT_00080968;\n  data_start = PTR_DAT_0008093c;\n  FUN_00081348(PTR_DAT_00080940, DAT_00080938, 8, 8, heap_start, heap_end, param_3);\n  heap_start = PTR_DAT_00080944;\n  FUN_000811b0(buffer_end);\n  buffer_start = PTR_DAT_0008096c;\n  FUN_000811b0(data_start);\n  heap_end = PTR_DAT_00080948;\n  FUN_000811b0(heap_start);\n  data_end = PTR_DAT_0008094c;\n  FUN_000811b0(buffer_start);\n  FUN_000811b0(heap_end);\n  FUN_000811b0(data_end);\n  FUN_00081438(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, buffer_end, buffer_start);\n  FUN_00081438(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, data_start, heap_end);\n  FUN_00081438(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, heap_start, data_end);\n  return;\n}",
            "called": [
                "FUN_00081348",
                "FUN_000811b0",
                "FUN_00081438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "alloc_size"
            },
            "code": "void process_data_000810a6(int *data_ptr, int data_size, undefined4 arg3, undefined4 arg4) {\n  if (data_size != 0) {\n    int alloc_size = allocate_memory(data_size);\n    (**(code **)(*data_ptr + 4))(data_ptr, data_size, alloc_size, *(code **)(*data_ptr + 4), arg4);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810e8",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810c4"
            ],
            "imported": false,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 110435,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081560",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080f0c",
            "FUN_00083a74",
            "FUN_000844e0",
            "FUN_00083b10",
            "FUN_00080e80",
            "thunk_FUN_0008113a",
            "FUN_0008236c",
            "FUN_00080d62",
            "FUN_000842a4",
            "FUN_000814f6",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_000839b4",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00080eb0",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_00082824",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_000834f0",
            "FUN_000841e4",
            "FUN_0008113a",
            "FUN_0008400c",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_0008044c",
            "FUN_000810d8",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080d3e",
            "FUN_00081438",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000810e8",
            "FUN_00080d58",
            "FUN_00081480",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_00081800",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084484",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081496",
            "FUN_00084004",
            "FUN_00081014",
            "FUN_000816ec",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_000810c4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000810fc",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080774",
            "FUN_00080ec2",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_0008117a",
            "FUN_000801e0",
            "FUN_000811b0",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00084220",
            "FUN_00081472",
            "FUN_000836ec",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_00080a30",
            "FUN_0008089c",
            "FUN_000810a6"
        ]
    ],
    "locked_functions": []
}