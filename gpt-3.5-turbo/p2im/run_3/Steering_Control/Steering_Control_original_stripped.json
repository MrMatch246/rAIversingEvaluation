{
    "functions": {
        "FUN_000809b4": {
            "renaming": {
                "FUN_000809b4": "set_value_at_address_000809b4",
                "param_1": "address",
                "param_2": "value",
                "param_3": "flag",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(address + 0x60)"
            },
            "code": "void set_value_at_address_000809b4(int address, int value, int flag)\n{\n  if (flag != 0) {\n    *(int *)(address + 100) = value;\n    return;\n  }\n  *(int *)(address + 0x60) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809b4",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_value_at_address_000809b4"
        },
        "FUN_00081560": {
            "renaming": {
                "String::operator_": "moveStringIfNotEqual",
                "this": "currentString",
                "rval": "newString",
                "FUN_00081560": "moveStringIfNotEqual_00081560"
            },
            "code": "String * __thiscall moveStringIfNotEqual_00081560(String *currentString,String *newString)\n{\n  if (currentString != newString) {\n    move(currentString,newString);\n  }\n  return currentString;\n}",
            "called": [
                "move"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "moveStringIfNotEqual_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00080e6a": {
            "renaming": {
                "FUN_00080e6a": "tickResetAndIncrementIfFalse_00080e6a",
                "iVar1": "isFalse"
            },
            "code": "void tickResetAndIncrementIfFalse_00080e6a(void)\n{\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "TimeTick_Increment",
                "tickReset",
                "__false"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e6a",
            "calling": [],
            "imported": false,
            "current_name": "tickResetAndIncrementIfFalse_00080e6a"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "data",
                "param_2": "pattern_mask",
                "param_3": "pattern",
                "param_4": "max_checks",
                "iVar1": "num_matches"
            },
            "code": "int check_bit_pattern_00081684(uint *data, uint pattern_mask, uint pattern, int max_checks) {\n  int num_checks = 0;\n  while(max_checks > 0) {\n    if((*data & pattern_mask) != pattern) {\n      int num_matches = 0;\n      while(num_checks != num_matches) {\n        if((*data & pattern_mask) != pattern) {\n          return num_matches;\n        }\n        num_matches++;\n      }\n      return 0;\n    }\n    max_checks--;\n    num_checks++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "pulseIn"
            ],
            "imported": false,
            "current_name": "check_bit_pattern_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr_32bit_next",
                "puVar4": "source_ptr_32bit",
                "uVar5": "current_32bit",
                "uVar6": "current_byte",
                "puVar7": "destination_ptr_32bit_next",
                "puVar8": "destination_ptr_32bit",
                "pcVar9": "destination_ptr",
                "bVar10": "is_null_char"
            },
            "code": "char* copy_string_000825cc(char* destination, char* source)\n{\n    char current_char;\n    ushort current_short;\n    uint* source_ptr_32bit;\n    uint* destination_ptr_32bit;\n    uint current_32bit;\n    uint* source_ptr_32bit_next;\n    uint* destination_ptr_32bit_next;\n    bool is_null_char;\n\n    char* destination_ptr = destination;\n\n    if ((((uint)destination ^ (uint)source) & 3) != 0)\n    {\n        do\n        {\n            current_char = *source;\n            *destination_ptr = current_char;\n            source++;\n            destination_ptr++;\n        } while (current_char != '\\0');\n\n        return destination;\n    }\n\n    destination_ptr_32bit = (uint*)destination;\n\n    if (((uint)source & 3) != 0)\n    {\n        source_ptr_32bit = (uint*)source;\n\n        if (((uint)source & 1) != 0)\n        {\n            source_ptr_32bit = (uint*)(source + 1);\n            current_char = *source;\n            destination_ptr_32bit = (uint*)(destination + 1);\n            *destination = current_char;\n\n            if (current_char == '\\0')\n            {\n                return destination;\n            }\n        }\n\n        source = (char*)source_ptr_32bit;\n\n        if (((uint)source_ptr_32bit & 2) != 0)\n        {\n            source = (char*)((int)source_ptr_32bit + 2);\n            current_short = *(ushort*)source_ptr_32bit;\n            is_null_char = (current_short & 0xff) == 0;\n\n            if (is_null_char)\n            {\n                *(char*)destination_ptr_32bit = (char)current_short;\n            }\n            else\n            {\n                *(ushort*)destination_ptr_32bit = current_short;\n                is_null_char = (current_short & 0xff00) == 0;\n                destination_ptr_32bit = (uint*)((int)destination_ptr_32bit + 2);\n            }\n\n            if (is_null_char)\n            {\n                return destination;\n            }\n        }\n    }\n\n    current_32bit = *(uint*)source;\n    source_ptr_32bit_next = (uint*)((int)source + 4);\n    destination_ptr_32bit_next = destination_ptr_32bit;\n\n    if (((uint)source & 4) != 0)\n    {\n        if ((current_32bit + 0xfefefeff & ~current_32bit & 0x80808080) != 0)\n        {\n            goto LAB_00082630;\n        }\n\n        destination_ptr_32bit_next = destination_ptr_32bit + 1;\n        *destination_ptr_32bit = current_32bit;\n        source_ptr_32bit_next = (uint*)((int)source + 8);\n        current_32bit = *(uint*)((int)source + 4);\n    }\n\n    while (true)\n    {\n        source_ptr_32bit = source_ptr_32bit_next + 1;\n        current_32bit = *source_ptr_32bit_next;\n        destination_ptr_32bit = destination_ptr_32bit_next;\n\n        if ((current_32bit + 0xfefefeff & ~current_32bit & 0x80808080) != 0)\n        {\n            break;\n        }\n\n        destination_ptr_32bit_next = destination_ptr_32bit + 1;\n        *destination_ptr_32bit = current_32bit;\n        current_32bit = *source_ptr_32bit;\n\n        if ((current_32bit + 0xfefefeff & ~current_32bit & 0x80808080) != 0)\n        {\n            break;\n        }\n\n        source_ptr_32bit_next = source_ptr_32bit + 2;\n        destination_ptr_32bit_next = destination_ptr_32bit + 2;\n        *destination_ptr_32bit_next = current_32bit;\n    }\n\nLAB_00082630:\n\n    do\n    {\n        *(char*)destination_ptr_32bit = (char)current_32bit;\n        uint current_byte = current_32bit & 0xff;\n        current_32bit = current_32bit >> 8 | current_32bit << 0x18;\n        destination_ptr_32bit = (uint*)((int)destination_ptr_32bit + 1);\n    } while (current_byte != 0);\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00083984": {
            "renaming": {
                "FUN_00083984": "execute_global_destructors_00083984",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_array"
            },
            "code": "void execute_global_destructors_00083984(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_000839b0 - (int)PTR___do_global_dtors_aux_fini_array_entry_000839ac >> 2;\n  if (num_destructors != 0) {\n    code** destructor_array = (code**)(PTR___do_global_dtors_aux_fini_array_entry_000839ac + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor_array--;\n      (**destructor_array)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083984",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_00083984"
        },
        "FUN_00080598": {
            "renaming": {
                "FUN_00080598": "servoHandlerTimer5_00080598",
                "_timer5": "timer5",
                "DAT_000805a4": "servoData"
            },
            "code": "void servoHandlerTimer5_00080598(void)\n{\n  Servo_Handler(timer5, DAT_000805a4, '\\0');\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080598",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerTimer5_00080598"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_character_00080aa8",
                "param_1": "character",
                "uVar1": "bit_mask",
                "DAT_00080ae8": "data_ptr",
                "lower_bound": "0x2d",
                "upper_bound": "0x20"
            },
            "code": "int check_character_00080aa8(uint8_t character) {\n    uint8_t lower_bound = 0x2d;\n    uint8_t upper_bound = 0x20;\n    uint32_t* DAT_00080ae8 = DAT_00080ae8;\n    uint32_t bit_mask;\n\n    if (character < lower_bound) {\n        if (character < upper_bound) {\n            bit_mask = 1 << (character & 0xff);\n            if ((bit_mask & *(DAT_00080ae8 + 0x18)) != bit_mask) {\n                *(DAT_00080ae8 + 0x10) = bit_mask;\n            }\n        }\n        else {\n            bit_mask = 1 << (character - upper_bound & 0xff);\n            if ((bit_mask & *(DAT_00080ae8 + 0x108)) != bit_mask) {\n                *(DAT_00080ae8 + 0x100) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "pinMode",
                "init",
                "init",
                "_initISR"
            ],
            "imported": false,
            "current_name": "check_character_00080aa8"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_available_00080118",
                "param_1": "param1",
                "param_2": "object_ptr",
                "param_3": "param2",
                "param_4": "param3",
                "DAT_00080134": "global_variable",
                "PTR_object_7862_0008013c": "object_ptr_global_ptr",
                "PTR__etext_00080140": "end_of_text_address",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_available_00080118(int param1, void* object_ptr, int param2, int param3){\n  if (DAT_00080134 != 0) {\n    object_ptr = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, object_ptr, param2, DAT_00080144, param3);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_available_00080118"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "heap_start",
                "param_2": "size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_info",
                "iVar3": "sbrk_res",
                "uVar4": "heap_size",
                "iVar5": "padding",
                "_sbrk_r": "sbrk",
                "PTR___malloc_av__00083b04": "malloc_av",
                "__malloc_lock": "lock_heap",
                "PTR___malloc_current_mallinfo_00083b08": "malloc_info",
                "PTR___malloc_sbrk_base_00083b0c": "malloc_sbrk_base",
                "__malloc_unlock": "unlock_heap"
            },
            "code": "int allocate_memory_00083a74(void* heap_start, int size) {\n  void* PTR___malloc_av__00083b04 = PTR___PTR___malloc_av__00083b04__00083b04;\n  __malloc_lock();\n  uint heap_size = *(uint *)(*(int *)(PTR___malloc_av__00083b04 + 8) + 4) & 0xfffffffc;\n  int padding = ((heap_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < padding) {\n    int sbrk_res = _sbrk_r(heap_start, 0);\n    if (sbrk_res == *(int *)(PTR___malloc_av__00083b04 + 8) + heap_size) {\n      sbrk_res = _sbrk_r(heap_start, -padding);\n      void* PTR___malloc_current_mallinfo_00083b08 = PTR___malloc_current_mallinfo_00083b08;\n      if (sbrk_res != -1) {\n        int info = *(int *)PTR___malloc_current_mallinfo_00083b08;\n        *(uint *)(*(int *)(PTR___malloc_av__00083b04 + 8) + 4) = heap_size - padding | 1;\n        *(int *)PTR___malloc_current_mallinfo_00083b08 = info - padding;\n        __malloc_unlock(heap_start);\n        return 1;\n      }\n      int heap_end = _sbrk_r(heap_start, 0);\n      void* PTR___malloc_sbrk_base_00083b0c = PTR___PTR___malloc_sbrk_base_00083b0c_00083b0c;\n      uint new_heap_size = heap_end - *(int *)(PTR___malloc_av__00083b04 + 8);\n      if (0xf < (int)new_heap_size) {\n        int sbrk_base = *(int *)PTR___malloc_sbrk_base_00083b0c;\n        *(uint *)(*(int *)(PTR___malloc_av__00083b04 + 8) + 4) = new_heap_size | 1;\n        *(int *)PTR___malloc_current_mallinfo_00083b08 = heap_end - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(heap_start);\n  return 0;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083a74"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "return_zero_00080e80"
            },
            "code": "int return_zero_00080e80(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "return_zero_00080e80"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "memory_address",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(memory_address + 0x14)",
                "0xffff": "-1"
            },
            "code": "void set_default_value_00080d62(int memory_address)\n{\n  *(int *)(memory_address + 0x14) = -1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_default_value_00080d62"
        },
        "FUN_00080e84": {
            "renaming": {
                "FUN_00080e84": "wait_forever_00080e84"
            },
            "code": "void wait_forever_00080e84(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e84",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e84"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6::FUN_000814f6": "String::String",
                "cstr": "input_str",
                "length": "str_length",
                "this->buffer": "this->buffer",
                "this->capacity": "this->capacity",
                "this->len": "this->len",
                "copy": "copy_to_buffer",
                "FUN_000814f6": "String_000814f6"
            },
            "code": "String_000814f6 * __thiscall String_000814f6::String_000814f6(String_000814f6 *this,char *input_str)\n{\n  size_t str_length;\n  this->buffer = (char *)0x0;\n  this->capacity = 0;\n  this->len = 0;\n  if (input_str != (char *)0x0) {\n    str_length = strlen(input_str);\n    copy_to_buffer(this,input_str,str_length);\n  }\n  return this;\n}",
            "called": [
                "copy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "_GLOBAL__sub_I_steering",
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "String_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "allocate_memory_00080e88",
                "incr": "increment",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory",
                "PTR_heap_00080e9c": "heap_start",
                "PTR__ebss_00080ea0": "end_of_bss"
            },
            "code": "caddr_t allocate_memory_00080e88(int increment) {\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_00080e9c;\n  if (*(int *)PTR_heap_00080e9c == 0) {\n    *(undefined **)PTR_heap_00080e9c = PTR__ebss_00080ea0;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + increment;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "register_exit_function_if_not_registered_000836d8",
                "DAT_000836e4": "global_exit_function_ptr",
                "DAT_000836e8": "global_exit_function_ptr_cleanup_function"
            },
            "code": "void register_exit_function_if_not_registered_000836d8(void)\n{\n  if (DAT_000836e4 != 0) {\n    atexit(DAT_000836e4);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "register_exit_function_if_not_registered_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "transmit_000812b8",
                "this": "self",
                "uc_data": "data",
                "pRVar1": "tx_buffer",
                "uVar2": "new_head",
                "PTR_00081308": "0x7f"
            },
            "code": "size_t __thiscall UARTClass::transmit_000812b8(UARTClass *this,uint8_t data)\n{\n  RingBuffer *tx_buffer;\n  uint status;\n  tx_buffer = this->tx_buffer;\n  status = this->_pUart->UART_SR << 0x1e;\n  if (status < 0 && tx_buffer->_iTail == tx_buffer->_iHead) {\n    this->_pUart->UART_THR = (uint)data;\n  }\n  else {\n    uint new_head = (DAT_00081308 & tx_buffer->_iHead + 1U) & PTR_00081308;\n    if ((int)new_head < 0) {\n      new_head = (new_head - 1 | 0xffffff80) + 1;\n    }\n    while (tx_buffer->_iTail == new_head);\n    tx_buffer->_aucBuffer[tx_buffer->_iHead] = data;\n    tx_buffer->_iHead = new_head;\n    this->_pUart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "transmit_000812b8"
        },
        "FUN_00081570": {
            "renaming": {
                "String::FUN_00081570": "reserve_and_copy_string",
                "this": "str",
                "cstr": "c_string",
                "length": "length",
                "size": "new_size",
                "uVar1": "success_flag",
                "FUN_00081570": "reserve_and_copy_string_00081570"
            },
            "code": "uchar reserve_and_copy_string_00081570(String *str,char *c_string,uint length)\n{\n  uchar success_flag;\n  uint new_size;\n  \n  if (c_string == NULL) {\n    return \"\\0\";\n  }\n  \n  if (length != 0) {\n    new_size = str->length + length;\n    success_flag = reserve(str,new_size);\n    if (success_flag == \"\\0\") {\n      return \"\\0\";\n    }\n    strcpy(str->buffer + str->length,c_string);\n    str->length = new_size;\n  }\n  return \"\\x01\";\n}",
            "called": [
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "concat"
            ],
            "imported": false,
            "current_name": "reserve_and_copy_string_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configure_and_start_timer_000803fc",
                "tc": "timer",
                "channel": "channel",
                "id": "peripheral_id",
                "irqn": "interrupt_number",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "TC_Configure": "configure_timer",
                "TC_SetRA": "set_timer_compare_value",
                "DAT_00080448": "interrupt_enable_register_base_address",
                "TC_IER_COVFS": "timer_overflow_interrupt_enable_bitmask",
                "TC_Start": "start_timer"
            },
            "code": "void configure_and_start_timer_000803fc(Tc *timer, uint32_t channel, uint32_t peripheral_id, IRQn_Type interrupt_number)\n{\n  pmc_enable_periph_clk(peripheral_id);\n  TC_Configure(timer, channel, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC);\n  TC_SetRA(timer, channel, 0xa41);\n  uint32_t *interrupt_enable_register = (uint32_t *)(DAT_00080448 + ((uint)(int)interrupt_number >> 5) * 4);\n  *interrupt_enable_register = 1 << ((int)interrupt_number & 0x1fU);\n  timer->TC_CHANNEL[channel].TC_IER = TC_IER_COVFS;\n  TC_Start(timer, channel);\n  return;\n}",
            "called": [
                "TC_Start",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_SetRA"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "configure_and_start_timer_000803fc"
        },
        "FUN_00083630": {
            "renaming": {
                "FUN_00083630": "add_to_buffer_00083630",
                "param_1": "type",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_len",
                "iVar3": "global_ptr",
                "uVar4": "bit_mask"
            },
            "code": "int add_to_buffer_00083630(int type, int data1, int data2, int data3) {\n  int* global_ptr = *(int**)global_impure_ptr;\n  int* buffer_ptr = *(int**)(global_ptr + 0x148);\n  if (buffer_ptr == NULL) {\n    buffer_ptr = (int*)(global_ptr + 0x14c);\n    *(int**)(global_ptr + 0x148) = buffer_ptr;\n  }\n  uint32_t buffer_len = buffer_ptr[1];\n  if (buffer_len > 0x1f) {\n    if (global_data != 0) {\n      int* new_buffer = (int*)malloc(400);\n      if (new_buffer != NULL) {\n        *new_buffer = *(int*)(global_ptr + 0x148);\n        new_buffer[1] = 0;\n        buffer_len = 0;\n        *(int**)(global_ptr + 0x148) = new_buffer;\n        new_buffer[0x62] = 0;\n        new_buffer[99] = 0;\n        goto LAB_00083686;\n      }\n    }\n    return -1;\n  }\nLAB_00083686:\n  if (type != 0) {\n    uint32_t bit_mask = 1 << (buffer_len & 0xff);\n    buffer_ptr[buffer_len + 0x22] = data2;\n    buffer_ptr[0x62] = buffer_ptr[0x62] | bit_mask;\n    buffer_ptr[buffer_len + 0x42] = data3;\n    if (type == 2) {\n      buffer_ptr[99] = bit_mask | buffer_ptr[99];\n    }\n  }\n  buffer_ptr[1] = buffer_len + 1;\n  buffer_ptr[buffer_len + 2] = data1;\n  return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083630",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083630"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "ReadUntilTerminator_00081214",
                "this": "stream",
                "terminator": "terminator",
                "iVar1": "current_char",
                "__return_storage_ptr__": "__return_storage_ptr__"
            },
            "code": "String* __thiscall ReadUntilTerminator_00081214(String* __return_storage_ptr__, Stream* stream, char terminator) {\n  int current_char;\n  String::String(__return_storage_ptr__, PTR_DAT_00081240);\n  while (true) {\n    current_char = timedRead(stream);\n    if ((current_char < 0) || (current_char == terminator)) {\n      break;\n    }\n    String::concat(__return_storage_ptr__, (char)current_char);\n  }\n  return __return_storage_ptr__;\n}",
            "called": [
                "concat",
                "String",
                "timedRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "ReadUntilTerminator_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "memory",
                "param_2": "byte_to_write",
                "param_3": "memory_size",
                "*param_1": "*memory",
                "(undefined *)0x0": "NULL",
                "0xffffffff": "-1"
            },
            "code": "int write_byte_to_memory_0008439c(int* memory, unsigned char byte_to_write, size_t memory_size) {\n  if (memory == NULL) {\n    return 0;\n  }\n  if (memory_size < 256) {\n    *memory = (int)byte_to_write;\n    return 1;\n  }\n  *memory = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "seek_and_update_position_0008427c",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "seek_result",
                "uVar2": "flag"
            },
            "code": "void seek_and_update_position_0008427c(int file_descriptor, int* buffer_address){\n    int seek_result = _lseek_r(file_descriptor, (int)*(short *)(buffer_address + 0xe));\n    ushort flag;\n    if (seek_result == -1){\n        flag = *(ushort *)(buffer_address + 0xc) & 0xefff;\n    }\n    else{\n        flag = *(ushort *)(buffer_address + 0xc) | 0x1000;\n        *(int *)(buffer_address + 0x50) = seek_result;\n    }\n    *(ushort *)(buffer_address + 0xc) = flag;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_position_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "set_param_000809be",
                "param_1": "base_address",
                "param_2": "param_type",
                "param_3": "new_param",
                "uVar1": "and_result",
                "uVar2": "or_result",
                "PTR_": "base_address",
                "DAT_": "param_type, new_param, and_result, or_result"
            },
            "code": "void set_param_000809be(uint32_t PTR_, uint32_t new_param, uint32_t param_type)\n{\n  *(uint32_t *)(PTR_ + PARAM_OFFSET) = new_param;\n  switch(param_type) {\n  case NO_OP:\n  case OP_TYPE_1:\n  case OP_TYPE_2:\n  case OP_TYPE_3:\n    return;\n  case OP_TYPE_4:\n    uint32_t and_result = *(uint32_t *)(PTR_ + AND_OFFSET) & *(uint32_t *)(PTR_ + AND_OFFSET) & ~new_param;\n    *(uint32_t *)(PTR_ + AND_OFFSET) = and_result;\n    break;\n  case OP_TYPE_5:\n    uint32_t or_result = *(uint32_t *)(PTR_ + OR_OFFSET) | new_param;\n    *(uint32_t *)(PTR_ + OR_OFFSET) = or_result;\n    break;\n  default:\n    goto switch_default;\n  }\n  *(uint32_t *)(PTR_ + DEFAULT_OFFSET) = new_param;\n  return;\n\nswitch_default:\n  *(uint32_t *)(PTR_ + DEFAULT_OFFSET) = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_param_000809be"
        },
        "FUN_00080d70": {
            "renaming": {
                "FUN_00080d70": "execute_isr_if_present_00080d70",
                "PTR_gpf_isr_00080d7c": "gpf_isr_pointer"
            },
            "code": "void execute_isr_if_present_00080d70(void)\n{\n  code* isr = *(code**)PTR_gpf_isr_00080d7c;\n  if (isr != (code*)0x0)\n  {\n    (*isr)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d70",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_if_present_00080d70"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "__s": "buffer",
                "__c": "character",
                "__n": "size",
                "puVar1": "end_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "current_word_value",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "not_character_mask",
                "bVar8": "found"
            },
            "code": "void * find_first_occurrence_000840f8(void *buffer, int character, size_t size)\n{\n  uint *current_word;\n  uint *end_word;\n  uint character_mask;\n  uint not_character_mask;\n  byte *current_byte;\n  byte *last_byte;\n  uint current_word_value;\n  bool found;\n  \n  character_mask = character & 0xff;\n  if (((uint)buffer & 3) == 0) {\n    current_word = (uint *)buffer;\n    end_word = (uint *)(size - 3 + (int)buffer);\n    if (size > 3) {\n      character_mask |= character_mask << 8;\n      character_mask |= character_mask << 16;\n      not_character_mask = ~character_mask;\n      do {\n        current_word_value = *current_word ^ character_mask;\n        found = (current_word_value + 0xfefefeff & not_character_mask & 0x80808080) == 0;\n        if (!found) {\n          break;\n        }\n        size -= 4;\n        current_word++;\n      } while (size > 3);\n    }\n    current_byte = (byte *)current_word;\n    last_byte = (byte *)(size + (int)buffer - 1);\n    if (buffer != NULL && *current_byte != character_mask) {\n      do {\n        current_byte++;\n        found = current_byte == last_byte;\n        if (found) {\n          return NULL;\n        }\n      } while (*current_byte != character_mask);\n    }\n  }\n  else if (size != 0) {\n    if (*buffer != character_mask) {\n      current_byte = (byte *)buffer + 1;\n      size--;\n      do {\n        if (((uint)current_byte & 3) == 0) {\n          break;\n        }\n        if (size == 0) {\n          return NULL;\n        }\n        current_byte++;\n        size--;\n      } while (*current_byte != character_mask);\n      if (size > 0) {\n        current_word = (uint *)current_byte;\n        end_word = (uint *)(size - 3 + (int)current_byte);\n        character_mask |= character_mask << 8;\n        character_mask |= character_mask << 16;\n        not_character_mask = ~character_mask;\n        do {\n          current_word_value = *current_word ^ character_mask;\n          found = (current_word_value + 0xfefefeff & not_character_mask & 0x80808080) == 0;\n          if (found || size < 4) {\n            break;\n          }\n          size -= 4;\n          current_word++;\n        } while (current_word <= end_word);\n        current_byte = (byte *)current_word;\n        last_byte = (byte *)(size + (int)current_byte - 1);\n        if (!found || *current_byte != character_mask) {\n          do {\n            current_byte++;\n            found = current_byte == last_byte;\n            if (found) {\n              return NULL;\n            }\n          } while (*current_byte != character_mask);\n        }\n      }\n    }\n  }\n  else {\n    return NULL;\n  }\n  return current_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_000840f8"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "receive_and_transmit_000813e4",
                "this": "uart",
                "_pUart": "peripheral",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "RVar2": "status",
                "pRVar1": "buffer"
            },
            "code": "void __thiscall receive_and_transmit_000813e4(UARTClass *uart)\n{\n  RingBuffer *rx_buffer = uart->rx_buffer;\n  RingBuffer *tx_buffer = uart->tx_buffer;\n  RoReg status = uart->_pUart->UART_SR;\n  if ((int)(status << 31) < 0) {\n    RingBuffer::store_char(rx_buffer,(uint8_t)uart->_pUart->UART_RHR);\n  }\n  if ((int)(status << 30) < 0) {\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      uart->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n      return;\n    }\n    uart->_pUart->UART_IDR = 2;\n  }\n  return;\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "USART1_Handler",
                "USART3_Handler",
                "USART0_Handler",
                "UART_Handler"
            ],
            "imported": false,
            "current_name": "receive_and_transmit_000813e4"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "__sbprintf",
                "__aeabi_uldivmod",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "memchr",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "byte_dest",
                "puVar2": "uint_dest",
                "puVar3": "uint_dest",
                "puVar4": "byte_dest",
                "puVar5": "uint_src",
                "puVar6": "byte_src",
                "uVar7": "count",
                "uVar8": "remaining_bytes",
                "bVar9": "condition_met",
                "undefined": "uint8_t",
                "undefined2": "uint16_t",
                "undefined4": "uint32_t"
            },
            "code": "void * copy_memory_00081d48(void * destination, const void * source, size_t num_bytes)\n{\n    uint32_t * uint_dest = (uint32_t *) destination;\n    const uint32_t * uint_src = (const uint32_t *) source;\n\n    if ((((uint32_t)source | (uint32_t)destination) & 3) != 0)\n    {\n        if (num_bytes < 8)\n        {\n            uint8_t * byte_dest = (uint8_t *) destination;\n            const uint8_t * byte_src = (const uint8_t *) source;\n            while (num_bytes--)\n            {\n                *byte_dest++ = *byte_src++;\n            }\n            return destination;\n        }\n\n        if ((((uint32_t)source & 3) != 0) && (((uint32_t)destination & 3) != 0))\n        {\n            uint32_t count = 4 - ((uint32_t)destination & 3);\n            num_bytes -= count;\n\n            if (count == 1)\n            {\n                *(uint8_t *)destination = *(uint8_t *)source;\n                destination = (uint8_t *)destination + 1;\n                source = (uint8_t *)source + 1;\n            }\n            else if (count == 2)\n            {\n                *(uint16_t *)destination = *(uint16_t *)source;\n                destination = (uint16_t *)destination + 1;\n                source = (uint16_t *)source + 1;\n            }\n            else if (count == 3)\n            {\n                *(uint16_t *)destination = *(uint16_t *)source;\n                *(uint8_t *)((uint32_t)destination + 2) = *(uint8_t *)((uint32_t)source + 2);\n                destination = (uint8_t *)destination + 3;\n                source = (uint8_t *)source + 3;\n            }\n        }\n    }\n\n    while (num_bytes >= 16)\n    {\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        *uint_dest++ = *uint_src++;\n        num_bytes -= 16;\n    }\n\n    if (num_bytes != 0)\n    {\n        uint8_t * byte_dest = (uint8_t *) uint_dest;\n        const uint8_t * byte_src = (const uint8_t *) uint_src;\n\n        while (num_bytes--)\n        {\n            *byte_dest++ = *byte_src++;\n        }\n    }\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00083fbc": {
            "renaming": {
                "FUN_00083fbc": "process_items_00083fbc",
                "param_1": "item_count",
                "param_2": "item_processor",
                "piVar5": "item",
                "uVar4": "result",
                "iVar2": "item_index",
                "iVar3": "item_length",
                "*(ushort *)(iVar2 + 0xc)": "*(ushort *)(item_index + 0xc)",
                "*(short *)(iVar2 + 0xe)": "*(short *)(item_index + 0xe)",
                "uVar1": "processed_item"
            },
            "code": "uint process_items_00083fbc(int item_count, code *item_processor)\n{\n  uint result = 0;\n  int *item = (int *)(item_count + 0x2e0);\n  if (item != (int *)0x0) {\n    do {\n      int item_index = item[2];\n      int item_length = item[1] + -1;\n      if (-1 < item_length) {\n        do {\n          item_length = item_length + -1;\n          if ((1 < *(ushort *)(item_index + 0xc)) && (*(short *)(item_index + 0xe) != -1)) {\n            uint processed_item = (*item_processor)(item_index);\n            result = result | processed_item;\n          }\n          item_index = item_index + 0x68;\n        } while (item_length != -1);\n      }\n      item = (int *)*item;\n    } while (item != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083fbc",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_items_00083fbc"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "get_file_status_00084494",
                "param_1": "status",
                "param_2": "file_descriptor",
                "param_3": "file_stats",
                "puVar1": "error_ptr",
                "iVar2": "file_status"
            },
            "code": "void get_file_status_00084494(int *status, int file_descriptor, stat *file_stats) {\n                    undefined *error_ptr;\n                    int file_status;\n                    \n                    error_ptr = PTR_errno_000844b8;\n                    *(undefined4 *)PTR_errno_000844b8 = 0;\n                    file_status = _fstat(file_descriptor, file_stats);\n                    \n                    if ((file_status == -1) && (*(int *)error_ptr != 0)) {\n                        *status = *(int *)error_ptr;\n                        return;\n                    }\n                    return;\n                }",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_00084494"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "allocate_memory_00084018",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "file_permissions",
                "iVar2": "file_status",
                "iVar3": "allocated_memory_block",
                "uVar4": "file_permission_bits",
                "bVar5": "is_executable",
                "auStack_54": "memory_block_uninitialized",
                "local_50": "memory_block_size"
            },
            "code": "void allocate_memory_00084018(int file_descriptor, int *memory_block)\n{\n    ushort file_permissions = *(ushort *)(memory_block + 3);\n    uint file_permission_bits = (uint)file_permissions;\n    bool is_executable = false;\n    uint memory_block_size;\n    undefined memory_block_uninitialized[4];\n\n    if ((int)(file_permission_bits << 0x1e) < 0)\n    {\n        *memory_block = (int)memory_block + 0x43;\n        memory_block[4] = (int)memory_block + 0x43;\n        memory_block[5] = 1;\n        return;\n    }\n\n    if (-1 < *(short *)((int)memory_block + 0xe))\n    {\n        int file_status = _fstat_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe), memory_block_uninitialized);\n        if (-1 < file_status)\n        {\n            is_executable = (memory_block_size & 0xf000) == 0x2000;\n\n            if (((memory_block_size & 0xf000) == 0x8000) && (memory_block[10] == PTR_DAT_000840f4))\n            {\n                memory_block_size = 0x400;\n                *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x400;\n                memory_block[0x13] = 0x400;\n            }\n            else\n            {\n                memory_block_size = 0x400;\n                *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x800;\n            }\n            goto LAB_00084074;\n        }\n        file_permissions = *(ushort *)(memory_block + 3);\n        file_permission_bits = (uint)file_permissions;\n    }\n\n    *(ushort *)(memory_block + 3) = file_permissions | 0x800;\n\n    if ((file_permission_bits & 0x80) == 0)\n    {\n        memory_block_size = 0x400;\n    }\n    else\n    {\n        memory_block_size = 0x40;\n    }\n    is_executable = false;\nLAB_00084074:\n    int *allocated_memory_block = _malloc_r(file_descriptor, memory_block_size);\n\n    if (allocated_memory_block == 0)\n    {\n        if (-1 < (int)((uint)file_permissions << 0x16))\n        {\n            *(ushort *)(memory_block + 3) = file_permissions | 2;\n            *memory_block = (int)memory_block + 0x43;\n            memory_block[4] = (int)memory_block + 0x43;\n            memory_block[5] = 1;\n        }\n    }\n    else\n    {\n        *(undefined4 *)(file_descriptor + 0x3c) = PTR_DAT_000840f0;\n        *(ushort *)(memory_block + 3) = file_permissions | 0x80;\n        *memory_block = allocated_memory_block;\n        memory_block[4] = allocated_memory_block;\n        memory_block[5] = memory_block_size;\n\n        if ((is_executable) && (_isatty_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe)) != 0))\n        {\n            *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "String::FUN_000815de": "convertStringToLong",
                "this": "str",
                "lVar1": "result",
                "buffer": "buffer",
                "FUN_000815de": "convertStringToLong_000815de"
            },
            "code": "long convertStringToLong_000815de(String *str) {\n  long result = 0;\n  if (str->buffer != NULL) {\n    result = atol(str->buffer);\n  }\n  return result;\n}",
            "called": [
                "atol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000815de"
        },
        "FUN_00080578": {
            "renaming": {
                "FUN_00080578": "servoHandlerTimer3_00080578",
                "_timer3": "timer",
                "DAT_00080584": "position",
                "'\\x02'": "mode"
            },
            "code": "void servoHandlerTimer3_00080578(int timer, int DAT_00080584, char mode)\n{\n  Servo_Handler(timer, DAT_00080584, mode);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080578",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerTimer3_00080578"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "execute_signal_handler_000841e4",
                "__sig": "signal_number",
                "iVar1": "return_value",
                "_FUN_000841e4_r": "execute_signal_handler_recursive"
            },
            "code": "int execute_signal_handler_000841e4(int signal_number) {\n  int return_value;\n  return_value = execute_signal_handler_000841e4_recursive(*(undefined4 *)PTR__impure_ptr_000841f0, signal_number);\n  return return_value;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "execute_signal_handler_000841e4"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_mb_cur_max_0008400c",
                "PTR___mb_cur_max_00084014": "mb_cur_max_ptr"
            },
            "code": "int get_mb_cur_max_0008400c(void)\n{\n    int *PTR___mb_cur_max_00084014 = (int*) PTR___mb_cur_max_00084014;\n    return *PTR___mb_cur_max_00084014;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_mb_cur_max_0008400c"
        },
        "FUN_00080e60": {
            "renaming": {
                "FUN_00080e60": "infiniteLoop_00080e60"
            },
            "code": "void infiniteLoop_00080e60(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e60",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "infiniteLoop_00080e60"
        },
        "FUN_000814d0": {
            "renaming": {
                "String::FUN_000814d0": "String::setString",
                "this": "this",
                "cstr": "str",
                "length": "length",
                "uVar1": "isReserved",
                "reserve": "reserveStringMemory",
                "invalidate": "invalidateString",
                "len": "length",
                "buffer": "strBuffer",
                "FUN_000814d0": "setString_000814d0"
            },
            "code": "String* __thiscall String::setString_000814d0(String* this, char* str, uint length)\\n{\\n    uchar isReserved = reserveStringMemory(this, length);\\n    if (isReserved == \"\\0\") {\\n        invalidateString(this);\\n    }\\n    else {\\n        this->length = length;\\n        strcpy(this->strBuffer, str);\\n    }\\n    return this;\\n}",
            "called": [
                "strcpy",
                "reserve",
                "invalidate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "setString_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_initialized_data_to_completed_00080c20",
                "puVar1": "initialized_data_start",
                "puVar2": "initialized_data_end",
                "iVar3": "i",
                "puVar4": "completed_data_start",
                "p": "p",
                "exception_table_start": "exception_table_start"
            },
            "code": "void copy_initialized_data_to_completed_00080c20() {\n  undefined *initialized_data_start = PTR_banzai_00080c7c;\n  undefined *initialized_data_end = PTR__etext_00080c78;\n  undefined4 *completed_data_start = (undefined4 *)PTR_completed_7857_00080c80;\n  if (initialized_data_end != initialized_data_start) {\n    for (int i = 0; initialized_data_start + i < PTR_completed_7857_00080c84; i += 4) {\n      *(undefined4 *)(initialized_data_start + i) = *(undefined4 *)(initialized_data_end + i);\n    }\n  }\n  for (undefined4 *p = (undefined4 *)DAT_00080c90; p < (undefined4 *)PTR__ebss_00080c88; p++) {\n    *p = 0;\n  }\n  undefined *exception_table_start = PTR_exception_table_00080c8c + -0x20000000;\n  *(uint *)(DAT_00080c90 + 8) = (uint)PTR_exception_table_00080c8c & 0x1fffff80;\n  if (exception_table_start < (undefined *)0x100000) {\n    *(uint *)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while (true) {}\n}",
            "called": [
                "main",
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_initialized_data_to_completed_00080c20"
        },
        "FUN_00080e62": {
            "renaming": {
                "FUN_00080e62": "run_indefinitely_00080e62"
            },
            "code": "void run_indefinitely_00080e62(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e62",
            "calling": [],
            "imported": false,
            "current_name": "run_indefinitely_00080e62"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "servo_timer_sequence_0008044c",
                "timer": "timer_index",
                "tc": "timer_counter",
                "channel": "channel_value",
                "bVar1": "servo_count_value",
                "puVar2": "channel_array",
                "puVar3": "servo_count",
                "puVar4": "servos_array",
                "uVar5": "unused_variable",
                "RVar6": "system_core_clock",
                "iVar7": "servo_index"
            },
            "code": "void servo_timer_sequence_0008044c(timer16_Sequence_t timer, Tc *timer_counter, uint8_t channel)\n{\n  uint8_t *servo_count = PTR_ServoCount_00080554;\n  uint8_t *channel_array = PTR_Channel_00080544;\n  uint8_t timer_index = (uint8_t)timer;\n  uint8_t channel_value = channel_array[timer_index];\n  if ((channel_value & 0x80) == 0) {\n    int servo_index = timer_index * 0xc;\n    if (((char)channel_value + servo_index < (int)(uint8_t)*servo_count) && ((int)((uint32_t)(uint8_t)PTR_servos_00080548[((char)channel_value + servo_index) * 8] << 0x19) < 0)) {\n      digitalWrite((uint8_t)PTR_servos_00080548[(servo_index + (char)channel_value) * 8] & 0x3f, 0);\n    }\n  }\n  else {\n    timer_counter->TC_CHANNEL[channel].TC_CCR = timer_counter->TC_CHANNEL[channel].TC_CCR | 4;\n  }\n  uint8_t servo_count_value = *servo_count;\n  channel_array[timer_index] = channel_array[timer_index] + 1;\n  uint8_t *servos_array = PTR_servos_00080548;\n  int servo_index = timer_index * 0xc;\n  if (((char)channel_array[timer_index] + servo_index < (int)(uint8_t)servo_count_value) && ((char)channel_value < '\f')) {\n    timer_counter->TC_CHANNEL[channel].TC_RA = timer_counter->TC_CHANNEL[channel].TC_CV + *(int *)(servos_array + ((char)channel_array[timer_index] + servo_index) * 8 + 4);\n    if (-1 < (int)((uint32_t)(uint8_t)servos_array[((char)channel_array[timer_index] + servo_index) * 8] << 0x19)) {\n      return;\n    }\n    digitalWrite((uint8_t)servos_array[(servo_index + (char)channel_array[timer_index]) * 8] & 0x3f, 1);\n    return;\n  }\n  RwReg system_core_clock = (*(uint32_t *)PTR_SystemCoreClock_0008054c / DAT_00080550) * 20000 >> 5;\n  if (system_core_clock <= timer_counter->TC_CHANNEL[channel].TC_CV + 4) {\n    system_core_clock = timer_counter->TC_CHANNEL[channel].TC_CV + 4;\n  }\n  timer_counter->TC_CHANNEL[channel].TC_RA = system_core_clock;\n  channel_array[timer_index] = 0xff;\n}\n",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [
                "TC5_Handler",
                "TC3_Handler",
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler"
            ],
            "imported": false,
            "current_name": "servo_timer_sequence_0008044c"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_process_id_00080efe"
            },
            "code": "__pid_t get_process_id_00080efe(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_memcpy_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "puVar5": "dest_byte_ptr",
                "puVar7": "padding_bytes",
                "uVar6": "remaining_bytes",
                "uVar8": "num_words",
                "PTR_0000000c": "unsigned char*",
                "PTR_00000010": "uint*",
                "DAT_00000014": "uint",
                "DAT_00000018": "uint",
                "DAT_0000001c": "uint",
                "DAT_00000020": "uint",
                "DAT_00000024": "unsigned char*",
                "DAT_00000028": "unsigned char*"
            },
            "code": "void * reverse_memcpy_00081e34(void *destination, void *source, size_t num_bytes) {\n    int i;\n    DAT_00000014 remaining_bytes;\n    DAT_00000014 padding_bytes;\n    DAT_00000014 num_words;\n    DAT_00000014 num_full_words;\n    DAT_00000014 *dest_ptr;\n    DAT_00000014 *src_ptr;\n    unsigned char *dest_byte_ptr;\n    unsigned char *src_byte_ptr;\n    \n    // If source and destination overlap and source is higher than destination\n    if ((source < destination) && ((PTR_0000000c)source + num_bytes > (PTR_0000000c)destination)) {\n        dest_byte_ptr = (PTR_0000000c)destination + num_bytes;\n        remaining_bytes = num_bytes - 1;\n        if (num_bytes != 0) {\n            do {\n                src_byte_ptr = (PTR_0000000c)source + remaining_bytes;\n                dest_byte_ptr--;\n                remaining_bytes--;\n                *dest_byte_ptr = *src_byte_ptr;\n            } while (remaining_bytes != -1);\n        }\n        return destination;\n    }\n    \n    // If number of bytes is less than 16 or not word-aligned\n    if ((num_bytes < 16) || (((DAT_00000014)destination | (DAT_00000014)source) & 3)) {\n        if (num_bytes == 0) {\n            return destination;\n        }\n    }\n    // If number of bytes is greater than or equal to 16 and word-aligned\n    else {\n        num_words = num_bytes >> 2;\n        num_full_words = num_words & ~3;\n        dest_ptr = (PTR_00000010)destination;\n        src_ptr = (PTR_00000010)source;\n        for (i = 0; i < num_full_words; i += 4) {\n            dest_ptr[i] = src_ptr[i];\n            dest_ptr[i+1] = src_ptr[i+1];\n            dest_ptr[i+2] = src_ptr[i+2];\n            dest_ptr[i+3] = src_ptr[i+3];\n        }\n        padding_bytes = num_words & 3;\n        remaining_bytes = padding_bytes << 2;\n        dest_byte_ptr = (PTR_0000000c)(dest_ptr + num_full_words);\n        src_byte_ptr = (PTR_0000000c)(src_ptr + num_full_words);\n        for (i = 0; i < remaining_bytes; i++) {\n            dest_byte_ptr[i] = src_byte_ptr[i];\n        }\n        if (num_bytes & 3) {\n            dest_byte_ptr[remaining_bytes] = src_byte_ptr[remaining_bytes];\n        }\n        return destination;\n    }\n    // If number of bytes is less than 16 and not word-aligned\n    dest_byte_ptr = (PTR_0000000c)destination;\n    src_byte_ptr = (PTR_0000000c)source;\n    for (i = 0; i < num_bytes; i++) {\n        dest_byte_ptr[i] = src_byte_ptr[i];\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_memcpy_00081e34"
        },
        "FUN_00080e66": {
            "renaming": {
                "FUN_00080e66": "wait_for_input_00080e66"
            },
            "code": "void wait_for_input_00080e66(void)\n{\n  while(true);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e66",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_input_00080e66"
        },
        "FUN_000826e8": {
            "renaming": {
                "FUN_000826e8": "parse_integer_000826e8",
                "param_1": "out_result",
                "param_2": "input_string",
                "param_3": "endptr",
                "param_4": "base",
                "pbVar4": "current_position",
                "pbVar6": "current_char_position",
                "bVar1": "char_properties",
                "bVar2": "is_negative",
                "uVar3": "parsed_value",
                "uVar5": "current_digit_value",
                "uVar9": "overflow_threshold",
                "uVar10": "max_divisor",
                "iVar7": "ascii_offset",
                "iVar8": "parse_success"
            },
            "code": "uint parse_integer_000826e8(undefined4 *out_result, byte *input_string, byte **endptr, uint base)\n{\n    byte current_char;\n    uint current_digit_value;\n    uint max_divisor;\n    uint overflow_threshold;\n    int parse_success;\n    uint parsed_value;\n    byte *current_position;\n\n    current_position = input_string;\n    do {\n        current_char = *current_position;\n        current_position++;\n        current_digit_value = (uint)current_char;\n        current_char = *(byte *)(*(int *)PTR___ctype_ptr___000827f8 + current_digit_value + 1);\n    } while ((current_char & 8) != 0);\n\n    if (current_digit_value == 0x2d) {\n        current_position++;\n        current_digit_value = (uint)*current_position;\n        parse_success = 1;\n    }\n    else if (current_digit_value == 0x2b) {\n        current_digit_value = (uint)*current_position;\n        current_position++;\n        parse_success = 1;\n    }\n    else {\n        parse_success = 1;\n    }\n\n    if ((base & 0xffffffef) == 0) {\n        if (current_digit_value == 0x30) {\n            if ((*current_position & 0xdf) == 0x58) {\n                current_digit_value = (uint)current_position[1];\n                base = 0x10;\n                current_position += 2;\n            }\n            else if (base == 0) {\n                base = 8;\n            }\n        }\n        else if (base == 0) {\n            base = 10;\n        }\n    }\n\n    if ((current_char & 8) == 0) {\n        max_divisor = 0x7fffffff;\n    }\n    else {\n        max_divisor = 0x80000000;\n    }\n    overflow_threshold = max_divisor / base;\n    parse_success = 0;\n    parsed_value = 0;\n\n    do {\n        current_char = *(byte *)(*(int *)PTR___ctype_ptr___000827f8 + current_digit_value + 1);\n        if ((current_char & 4) == 0) {\n            if ((current_char & 3) == 0) break;\n            if ((current_char & 3) == 1) {\n                current_digit_value -= 0x37;\n            }\n            else {\n                current_digit_value -= 0x57;\n            }\n        }\n        else {\n            current_digit_value -= 0x30;\n        }\n        if ((int)base <= current_digit_value) break;\n        if (parse_success != -1) {\n            if ((overflow_threshold <= parsed_value && parsed_value != overflow_threshold) || ((parsed_value == overflow_threshold && ((int)(max_divisor - base * overflow_threshold) < current_digit_value)))) {\n                parse_success = -1;\n            }\n            else {\n                parsed_value = base * parsed_value + current_digit_value;\n                parse_success = 1;\n            }\n        }\n        current_digit_value = (uint)*current_position;\n        current_position++;\n    } while (true);\n\n    if (parse_success == -1) {\n        if ((current_char & 8) == 0) {\n            parsed_value = 0x7fffffff;\n        }\n        else {\n            parsed_value = 0x80000000;\n        }\n        *out_result = 0x22;\n        if (endptr == (byte **)0x0) {\n            return parsed_value;\n        }\n    }\n    else {\n        if ((current_char & 8) != 0) {\n            parsed_value = -parsed_value;\n        }\n        if (endptr == (byte **)0x0) {\n            return parsed_value;\n        }\n        if (parse_success != 0) goto LAB_0008278c;\n    }\n    current_position--;\nLAB_0008278c:\n    *endptr = current_position;\n    return parsed_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000826e8",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "parse_integer_000826e8"
        },
        "FUN_00080df0": {
            "renaming": {
                "FUN_00080df0": "iterate_callbacks_on_bits_set_in_uint32_t_00080df0",
                "uVar1": "leading_zeroes",
                "uVar2": "bits_set",
                "PTR_callbacksPioC_00080e24": "callbacks_pointer",
                "DAT_00080e20": "data_pointer"
            },
            "code": "void iterate_callbacks_on_bits_set_in_uint32_t_00080df0() {\n  uint32_t bits_set = *(uint32_t *)(DAT_00080e20 + 0x4c);\n  while( true ) {\n    uint32_t leading_zeroes = count_leading_zeroes(bits_set);\n    if (leading_zeroes > 0x1f) break;\n    uint32_t index = 0x1f - leading_zeroes;\n    code *callback = *(code **)(PTR_callbacksPioC_00080e24 + index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bits_set &= ~(1 << index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080df0",
            "calling": [],
            "imported": false,
            "current_name": "iterate_callbacks_on_bits_set_in_uint32_t_00080df0"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "initialize_stream_if_not_initialized_00083850",
                "param_1": "stream_address",
                "param_2": "short_address"
            },
            "code": "void initialize_stream_if_not_initialized_00083850(int stream_address, int short_address){\n\tif ((stream_address != 0) && (*(int *)(stream_address + 0x38) == 0)) {\n\t\t__sinit();\n\t}\n\tif (*(short *)(short_address + 0xc) == 0) {\n\t\treturn;\n\t}\n\t__sflush_r(stream_address);\n\treturn;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "__sbprintf",
                "__swbuf_r",
                "_fclose_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "initialize_stream_if_not_initialized_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "main_000815ec",
                "in_r0": "ctx",
                "DAT_00081614": "data"
            },
            "code": "int main_000815ec(void)\n{\n  EVP_PKEY_CTX *ctx;\n  _watchdogDefaultSetup();\n  init(ctx);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_00081614 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "serialEventRun",
                "setup",
                "_watchdogDefaultSetup",
                "delay",
                "loop",
                "init",
                "initVariant"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_000815ec"
        },
        "FUN_000827fc": {
            "renaming": {
                "FUN_000827fc": "convertStringToLong_000827fc",
                "__nptr": "stringToConvert",
                "__endptr": "endOfConversion",
                "__base": "conversionBase",
                "lVar1": "convertedValue"
            },
            "code": "long convertStringToLong_000827fc(char *stringToConvert, char **endOfConversion, int conversionBase){\n  long convertedValue;\n  convertedValue = _convertStringToLong_000827fc_r(*(undefined4 *)PTR__impure_ptr_00082810, stringToConvert, endOfConversion, conversionBase);\n  return convertedValue;\n}",
            "called": [
                "_strtol_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000827fc",
            "calling": [
                "atol"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000827fc"
        },
        "FUN_00080588": {
            "renaming": {
                "FUN_00080588": "set_servo_timer4_position_00080588",
                "_timer4": "timer4_instance",
                "DAT_00080594": "servo_position",
                "'\\x02'": "servo_mode"
            },
            "code": "void set_servo_timer4_position_00080588(void)\n{\n  Servo_Handler(timer4_instance, DAT_00080594, servo_mode);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080588",
            "calling": [],
            "imported": false,
            "current_name": "set_servo_timer4_position_00080588"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_data_at_address_00080d3e",
                "param_1": "address",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_1 + 4)": "*(address + 1)",
                "uint": "uint32_t"
            },
            "code": "void update_data_at_address_00080d3e(uint32_t* address, uint32_t data1, uint32_t data2, uint32_t data3) {\n  uint32_t mask1 = 0xF000000u;\n  uint32_t mask2 = 0x30000000u;\n  uint32_t current_data = *(address + 1);\n  uint32_t new_data = data1 | current_data | ((data2 & mask1) << 0x18) | ((data3 & mask2) << 0x1C);\n  *(address + 1) = new_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_data_at_address_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438::FUN_00081438": "UARTConstructor",
                "this": "self",
                "pUsart": "usart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_00081458": "PTR_PTR_write_1_00081458",
                "_pUsart": "_usart",
                "FUN_00081438": "UARTConstructor_00081438"
            },
            "code": "UARTConstructor_00081438 * __thiscall UARTConstructor_00081438(UARTConstructor_00081438 *this, Usart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n  UARTClass::UARTClass(&this->super_UARTClass, (Uart *)usart, irq, id, rx_buffer, tx_buffer);\n  *(undefined **)&this->super_UARTClass = PTR_PTR_write_1_00081458;\n  this->_usart = usart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTConstructor_00081438"
        },
        "FUN_000841f4": {
            "renaming": {
                "FUN_000841f4": "kill_process_if_exists_000841f4",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "error_ptr"
            },
            "code": "void kill_process_if_exists_000841f4(int *error_code, int process_id, int signal) {\n  undefined *error_ptr;\n  error_ptr = PTR_errno_00084218;\n  *(undefined4 *)PTR_errno_00084218 = 0;\n  _kill(process_id, signal);\n  if ((process_id == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841f4",
            "calling": [
                "_raise_r",
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_if_exists_000841f4"
        },
        "FUN_000812a0": {
            "renaming": {
                "FUN_000812a0": "waitForTransmitComplete_000812a0",
                "this": "UARTClassInstance",
                "_tx_buffer": "txBuffer",
                "_iHead": "txBufferHead",
                "_iTail": "txBufferTail",
                "_pUart": "uart"
            },
            "code": "void __thiscall UARTClass::waitForTransmitComplete_000812a0(UARTClass *this)\n{\n  while (this->txBufferHead != this->txBufferTail);\n  while (-1 < (int)(this->uart->UART_SR << 0x16));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812a0",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmitComplete_000812a0"
        },
        "FUN_0008130c": {
            "renaming": {
                "FUN_0008130c": "update_rx_buffer_0008130c",
                "_rx_buffer": "rx_buffer",
                "_iHead": "rx_buffer_head",
                "_iTail": "rx_buffer_tail",
                "**(code **)(*(int *)this + 0x14))()": "call_function_pointer",
                "DAT_00081344": "rx_interrupt_status_register",
                "_dwIrq": "irq",
                "_dwId": "id",
                "pmc_disable_periph_clk": "disable_peripheral_clock"
            },
            "code": "void __thiscall UARTClass::update_rx_buffer_0008130c(UARTClass *this)\n{\n  this->rx_buffer_head = this->rx_buffer_tail;\n  (**(code **)(*(int *)this + 0x14))();\n  *(int *)(DAT_00081344 + (((uint)(int)this->irq >> 5) + 0x20) * 4) = 1 << (uint)(byte)(this->irq & 0x1f);\n  pmc_disable_periph_clk(this->id);\n  return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008130c",
            "calling": [],
            "imported": false,
            "current_name": "update_rx_buffer_0008130c"
        },
        "FUN_0008142e": {
            "renaming": {
                "FUN_0008142e": "initializeUSART_0008142e",
                "this": "usart",
                "dwBaudRate": "baudRate",
                "PTR_super_UARTClass": "super_UARTClass",
                "DAT_000008c0": "baudRateConstant"
            },
            "code": "void __thiscall initializeUSART_0008142e(USARTClass *usart, uint32_t baudRate)\n{\n    UARTClass::init(&usart->PTR_super_UARTClass, baudRate, 0x8c0);\n    return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008142e",
            "calling": [],
            "imported": false,
            "current_name": "initializeUSART_0008142e"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "array_address",
                "param_2": "position",
                "*(int *)(param_1 + 0x14)": "*array_ptr",
                "uint": "uint8_t",
                "bit_position": "bit_position",
                "array_ptr": "array_ptr"
            },
            "code": "void set_bit_at_position_00080d58(int array_address, uint8_t position) {\n    uint8_t bit_position = position & 0xff;\n    int* array_ptr = (int*)(array_address + 0x14);\n    *array_ptr = 1 << bit_position;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "print_buffer_00081084",
                "this": "print_instance",
                "size": "buffer_size",
                "pPVar1": "print_pointer",
                "sVar2": "bytes_written",
                "PTR_Print": "_vptr_Print",
                "DAT_0008109a": "location"
            },
            "code": "size_t __thiscall print_buffer_00081084(Print *print_instance, uint8_t *buffer, size_t buffer_size) {\n  Print *print_pointer;\n  size_t bytes_written = 0;\n  print_pointer = print_instance;\n  while ((bytes_written != buffer_size && (print_pointer = (Print *)(**print_instance->PTR_Print)(print_pointer,(uint)buffer[bytes_written]), print_pointer != (Print *)0x0))) {\n    bytes_written = bytes_written + 1;\n  }\n  return bytes_written;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_00081084"
        },
        "FUN_00080558": {
            "renaming": {
                "FUN_00080558": "servoHandlerTimer1_00080558",
                "DAT_00080564": "position",
                "Servo_Handler": "servoHandler",
                "_timer1": "timer",
                "'\\0'": "mode"
            },
            "code": "void servoHandlerTimer1_00080558(char timer, int DAT_00080564, char mode)\n{\n  Servo_Handler(timer, DAT_00080564, mode);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080558",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerTimer1_00080558"
        },
        "FUN_00083708": {
            "renaming": {
                "FUN_00083708": "decode_data_00083708",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "current_position",
                "iVar2": "temp_int2",
                "uVar3": "flags",
                "uVar4": "temp_uint",
                "iVar5": "temp_buffer_length",
                "pcVar6": "function_pointer",
                "iVar7": "remaining_length",
                "temp_int": "temp_int",
                "temp_int2": "temp_int2",
                "temp_int3": "temp_int3",
                "temp_buffer_length": "temp_buffer_length",
                "function_pointer": "function_pointer",
                "current_position": "current_position",
                "remaining_length": "remaining_length",
                "flags": "flags",
                "temp_uint": "temp_uint"
            },
            "code": "int decode_data_00083708(int *input_buffer, int *output_buffer)\n{\n    int *current_position;\n    int remaining_length;\n    ushort flags;\n    uint temp_uint;\n    int temp_int;\n    code *function_pointer;\n    int temp_buffer_length;\n    int temp_int2;\n    int temp_int3;\n\n    flags = *(ushort *)(output_buffer + 3);\n\n    if ((int)((uint)flags << 0x1c) < 0) {\n        temp_int2 = output_buffer[4];\n        if (temp_int2 == 0) {\n            return 0;\n        }\n        temp_int = *output_buffer;\n        if ((flags & 3) == 0) {\n            temp_int3 = output_buffer[5];\n        }\n        else {\n            temp_int3 = 0;\n        }\n        *output_buffer = temp_int2;\n        temp_int = temp_int - temp_int2;\n        output_buffer[2] = temp_int3;\n        do {\n            if (temp_int < 1) {\n                return 0;\n            }\n            temp_int3 = (*(code *)output_buffer[9])(input_buffer, output_buffer[7], temp_int2, temp_int);\n            temp_int = temp_int - temp_int3;\n            temp_int2 = temp_int2 + temp_int3;\n        } while (0 < temp_int3);\n        *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n        return 0xffffffff;\n    }\n\n    *(ushort *)(output_buffer + 3) = flags | 0x800;\n\n    if ((output_buffer[1] < 1) && (output_buffer[0xf] < 1)) {\n        return 0;\n    }\n    function_pointer = (code *)output_buffer[10];\n\n    if (function_pointer == (code *)0x0) {\n        return 0;\n    }\n    temp_uint = (uint)(flags | 0x800);\n    temp_int2 = *input_buffer;\n    *input_buffer = 0;\n    if ((flags & 0x1000) == 0) {\n        temp_int3 = (*function_pointer)(input_buffer, output_buffer[7], temp_uint & 0x1000, 1);\n        if ((temp_int3 == -1) && (temp_buffer_length = *input_buffer, temp_buffer_length != 0)) {\n            if ((temp_buffer_length == 0x1d) || (temp_buffer_length == 0x16)) {\n                *input_buffer = temp_int2;\n                return 0;\n            }\n            *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n            return 0xffffffff;\n        }\n        flags = *(ushort *)(output_buffer + 3);\n        function_pointer = (code *)output_buffer[10];\n    }\n    else {\n        temp_int3 = output_buffer[0x14];\n    }\n    if (((int)(temp_uint << 0x1d) < 0) && (temp_int3 = temp_int3 - output_buffer[1], output_buffer[0xc] != 0)) {\n        temp_int3 = temp_int3 - output_buffer[0xf];\n    }\n    temp_int3 = (*function_pointer)(input_buffer, output_buffer[7], temp_int3, 0);\n    if (temp_int3 == -1) {\n        temp_buffer_length = *input_buffer;\n        if (temp_buffer_length != 0) {\n            if ((temp_buffer_length != 0x1d) && (temp_buffer_length != 0x16)) {\n                *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n                return 0xffffffff;\n            }\n            *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) & 0xf7ff;\n            *output_buffer = output_buffer[4];\n            output_buffer[1] = 0;\n            goto LAB_00083774;\n        }\n        flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n        output_buffer[1] = 0;\n        *(ushort *)(output_buffer + 3) = flags;\n        *output_buffer = output_buffer[4];\n    }\n    else {\n        flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n        *output_buffer = output_buffer[4];\n        *(ushort *)(output_buffer + 3) = flags;\n        output_buffer[1] = 0;\n    }\n    if ((int)((uint)flags << 0x13) < 0) {\n        output_buffer[0x14] = temp_int3;\n    }\nLAB_00083774:\n    current_position = (int *)output_buffer[0xc];\n    *input_buffer = temp_int2;\n\n    if (current_position == (int *)0x0) {\n        return 0;\n    }\n    if (current_position != output_buffer + 0x10) {\n        _free_r(input_buffer);\n    }\n    output_buffer[0xc] = 0;\n    return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083708",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_00083708"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference",
                "uVar1": "product_low",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008458c(uint32_t dividend, int divisor, uint32_t multiplicand_low, uint32_t multiplicand_high, int *difference) {\n\tuint32_t product_low = dividend * multiplicand_low;\n\tuint32_t product_high = dividend * multiplicand_high;\n\tuint64_t product = ((uint64_t)product_high << 32) | product_low;\n\tint borrow = (product_low > product);\n\tdifference[0] = dividend - product_low;\n\tdifference[1] = divisor - ((product_high << 32) | borrow) - (product == 0);\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "convert_wide_to_multibyte_string_0008434c",
                "param_1": "multibyte_string",
                "param_2": "multibyte_string_size",
                "param_3": "null_byte",
                "param_4": "wide_string",
                "uVar1": "locale_charset",
                "iVar2": "result",
                "pcVar3": "wctomb_function",
                "auStack_24": "buffer"
            },
            "code": "void convert_wide_to_multibyte_string_0008434c(undefined4 *multibyte_string, int multibyte_string_size, undefined4 null_byte, undefined4 *wide_string) {\n  undefined4 locale_charset = __locale_charset();\n  code *wctomb_function = *(code **)PTR___wctomb_00084398;\n  int result;\n  if (multibyte_string_size == 0) {\n    result = (*wctomb_function)(multibyte_string, (undefined *)wide_string, 0, locale_charset, wide_string);\n  }\n  else {\n    result = (*wctomb_function)(multibyte_string, multibyte_string_size, null_byte, locale_charset, wide_string);\n  }\n  if (result == -1) {\n    *wide_string = 0;\n    *multibyte_string = 0x8a;\n  }\n  return;\n}",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wide_to_multibyte_string_0008434c"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "CopyString_0008151c",
                "this": "destination",
                "rhs": "source",
                "__dest": "destination_buffer",
                "PTR_0008155c": "DAT_0008155c",
                "DAT_0008155c": "DAT_0008155c",
                "free": "free",
                "strcpy": "strcpy",
                "len": "len",
                "capacity": "capacity",
                "buffer": "buffer"
            },
            "code": "void __thiscall CopyString_0008151c(String *destination, String *source) {\n    char *destination_buffer = destination->buffer;\n    char *source_buffer = source->buffer;\n    int source_len = source->len;\n    int destination_capacity = destination->capacity;\n    if (destination_buffer != NULL && source_buffer != NULL && PTR_0008155c != 0 && source_len <= destination_capacity) {\n        strcpy(destination_buffer, source_buffer);\n        destination->len = source_len;\n    } else {\n        free(destination_buffer);\n        destination->buffer = source_buffer;\n        destination->capacity = source->capacity;\n        destination->len = source_len;\n        source->buffer = NULL;\n        source->capacity = 0;\n    }\n    source->len = 0;\n}",
            "called": [
                "strcpy",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "operator="
            ],
            "imported": false,
            "current_name": "CopyString_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_and_abort_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "function",
                "param_4": "assertion",
                "puVar1": "message",
                "puVar2": "format_string",
                "PTR_s__00081730": "file_string",
                "PTR_s___function__00081728": "function_string",
                "PTR_s_assertion___s__failed__file___s__0008172c": "assertion_string",
                "PTR__impure_ptr_00081724": "stderr"
            },
            "code": "void print_assertion_failed_message_and_abort_000816f8(const char* file, int line, const char* function, const char* assertion, const char* message) {\n  const char* format_string = (message != NULL) ? \"%s:%d: %s: Assertion '%s' failed: %s\\n\" : \"%s:%d: %s: Assertion '%s' failed.\\n\";\n  const char* message_string = (message != NULL) ? message : \"\";\n  const char* PTR_s___function__00081728 = (function != NULL) ? function : \"\";\n  const char* PTR_s_assertion___s__failed__file___s__0008172c = (assertion != NULL) ? assertion : \"\";\n  const char* PTR_s__00081730 = (file != NULL) ? file : \"\";\n  fprintf(PTR__impure_ptr_00081724, format_string, PTR_s__00081730, line, PTR_s___function__00081728, PTR_s_assertion___s__failed__file___s__0008172c, message_string);\n  abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "TC_Start",
                "TC_Configure"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_message_and_abort_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "read_file_00084484",
                "__stream": "file",
                "iVar1": "result"
            },
            "code": "int read_file_00084484(FILE* file)\n{\n  int result = _read_file_00084484_r(*(undefined4 *)PTR__impure_ptr_00084490,file);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "read_file_00084484"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "write_to_file_00084244",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "flags"
            },
            "code": "void write_to_file_00084244(int file_descriptor, int offset, void *buffer, size_t size) {\n  ushort flags = *(ushort *)(offset + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(offset + 0xe),0,2);\n    flags = *(ushort *)(offset + 0xc);\n  }\n  *(ushort *)(offset + 0xc) = flags & 0xefff;\n  _write_r(file_descriptor,(int)*(short *)(offset + 0xe),buffer,size);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_00084244"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "PTR_lc_ctype_charset_00084008": "lc_ctype_charset"
            },
            "code": "const char* get_charset_00084004() { \n  return PTR_lc_ctype_charset_00084008; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084004"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "register_exit_handler_000816ec",
                "param_1": "handler",
                "param_2": "arg"
            },
            "code": "void register_exit_handler_000816ec(void (*handler)(void), void *arg)\n{\n  __cxa_atexit(arg, handler);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "register_exit_handler_000816ec"
        },
        "FUN_00080568": {
            "renaming": {
                "FUN_00080568": "servoHandlerTimer2_00080568",
                "_timer2": "timer",
                "DAT_00080574": "servoValue",
                "'\\x01'": "direction"
            },
            "code": "void servoHandlerTimer2_00080568(int timer, int DAT_00080574, char direction) {\n  Servo_Handler(timer, DAT_00080574, direction);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080568",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerTimer2_00080568"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "resize_000814ae",
                "this": "string",
                "size": "new_size",
                "uVar1": "success",
                "changeBuffer": "change_buffer",
                "len": "length"
            },
            "code": "uchar __thiscall String::resize_000814ae(String *string,uint new_size)\\n{\\n  uchar success = 0;\\n  if ((string->buffer == (char *)0x0) || (string->capacity < new_size)) {\\n    success = change_buffer(string,new_size);\\n    if (success == \"\\0\") {\\n      return \"\\0\";\\n    }\\n    if (string->length == 0) {\\n      *string->buffer = \"\\0\";\\n    }\\n  }\\n  return \"\\x01\";\\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "copy",
                "concat"
            ],
            "imported": false,
            "current_name": "resize_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_preinit_array_functions_00081778",
                "PTR___preinit_array_end_000817b8": "preinit_array_end",
                "PTR___preinit_array_end_000817bc": "preinit_array_begin",
                "ppcVar4": "function_pointer",
                "iVar3": "i",
                "puVar2": "fini_begin",
                "puVar1": "fini_end",
                "PTR__fini_000817c0": "_fini",
                "PTR___preinit_array_end_000817c4": "__fini_array_end",
                "iVar5": "num_functions"
            },
            "code": "void execute_preinit_array_functions_00081778(void)\n{\n  int num_functions = (int)PTR___preinit_array_end_000817b8 - (int)PTR___PTR___preinit_array_end_000817b8_000817bc >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(PTR___PTR___preinit_array_end_000817b8_000817bc - 4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n}\n\nvoid executePTR__fini_000817c0_functions(void)\n{\n  undefined *fini_begin = (undefined *)&PTR__fini_000817c0;\n  undefined *fini_end = (undefined *)&PTR___preinit_array_end_000817c4;\n  int num_functions = (int)fini_end - (int)fini_begin >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(fini_begin - 4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n}\n",
            "called": [
                "_init",
                "register_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_functions_00081778"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_flags_at_address_00080d30",
                "param_1": "address",
                "param_2": "flags",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 4)": "*flags_address",
                "uint": "uint32_t"
            },
            "code": "void update_flags_at_address_00080d30(int address, uint32_t flags, uint32_t bit_value)\n{\n  uint32_t* flags_address = (uint32_t*)(address + 4);\n  *flags_address = flags | *flags_address | (bit_value & 1) << 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_flags_at_address_00080d30"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_program_00080eec",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_message"
            },
            "code": "void exit_program_00080eec(int status)\n{\n  char* PTR_s_Exiting_with_status__d__00080ef8 = \"Exiting with status %d\";\n  iprintf(PTR_s_Exiting_with_status__d__00080ef8, status);\n  while(true){}\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "exit_program_00080eec"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "mapValueToMicroseconds_000806f8",
                "value": "inputValue",
                "min": "servoMin",
                "max": "servoMax",
                "mappedValue": "outputValue"
            },
            "code": "void __thiscall Servo::mapValueToMicroseconds_000806f8(Servo *servo, int value) {\n  int min = servo->min;\n  int max = servo->max;\n  int mappedValue;\n\n  if (value < 544) {\n    if (179 < value) {\n      value = 180;\n    }\n    mappedValue = map(value & ~(value >> 31), 0, 180, (1360 - min) * 4, (8400 - max) * 4);\n  }\n  mapValueToMicroseconds_000806f8Microseconds(servo, mappedValue);\n  return;\n}",
            "called": [
                "map",
                "writeMicroseconds"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "imported": false,
            "current_name": "mapValueToMicroseconds_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(char *__s1,char *__s2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  byte *pbVar3;\n  byte *pbVar4;\n  uint *puVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  if ((((uint)__s1 | (uint)__s2) & 7) != 0) {\n    puVar1 = (uint *)__s1;\n    if (((uint)__s1 & 3) != 0) {\n      puVar1 = (uint *)((uint)__s1 & 0xfffffffc) + 1;\n      uVar6 = *(uint *)((uint)__s1 & 0xfffffffc);\n      pbVar3 = (byte *)__s2;\n      if (((uint)__s1 & 1) == 0) {\nLAB_00082410:\n        pbVar4 = pbVar3 + 1;\n        uVar7 = uVar6 >> 0x10 & 0xff;\n        iVar2 = uVar7 - *pbVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar7 == 0) {\n          return 0;\n        }\n      }\n      else {\n        pbVar4 = (byte *)__s2;\n        if (((uint)__s1 & 2) == 0) {\n          pbVar3 = (byte *)(__s2 + 1);\n          uVar7 = uVar6 >> 8 & 0xff;\n          iVar2 = uVar7 - (byte)*__s2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar7 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      __s2 = (char *)(pbVar4 + 1);\n      iVar2 = (uVar6 >> 0x18) - (uint)*pbVar4;\n      if ((iVar2 != 0) || (uVar6 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar6 = (uint)__s2 & 3;\n    if (uVar6 != 0) {\n      puVar5 = (uint *)((uint)__s2 & 0xfffffffc);\n      if (uVar6 == 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x10;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffff;\n          if ((uVar9 & 0x8080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else if (uVar6 < 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 8;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffffff;\n          if ((uVar9 & 0x808080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x18;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xff;\n          if ((uVar9 & 0x80) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar6 = (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n    __s1 = (char *)puVar1;\n    puVar5 = (uint *)__s2;\n    if (((uint)puVar1 & 4) != 0) {\n      __s1 = (char *)(puVar1 + 1);\n      uVar6 = *puVar1;\n      puVar5 = (uint *)((int)__s2 + 4);\n      uVar8 = *(uint *)__s2;\n      uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n      if (uVar6 != uVar8 || uVar10 != 0) {\nLAB_0008259a:\n        uVar7 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n                uVar6 >> 0x18;\n        uVar6 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n                uVar8 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    __s2 = (char *)puVar5;\n    if (((uint)puVar5 & 4) != 0) {\n      uVar6 = *puVar5;\n      puVar1 = puVar5 + 1;\n      do {\n        uVar7 = *(uint *)__s1;\n        uVar8 = *(uint *)((int)__s1 + 4);\n        uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        if (uVar7 != uVar6 || uVar10 != 0) goto LAB_0008258e;\n        uVar9 = *puVar1;\n        uVar6 = puVar1[1];\n        uVar10 = uVar8 + 0xfefefeff & ~uVar8 & 0x80808080;\n        __s1 = (char *)((int)__s1 + 8);\n        puVar1 = puVar1 + 2;\n      } while (uVar8 == uVar9 && uVar10 == 0);\n      uVar7 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 |\n              uVar9 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar6 = *(uint *)__s1;\n    uVar7 = *(uint *)((int)__s1 + 4);\n    uVar8 = *(uint *)__s2;\n    uVar9 = *(uint *)((int)__s2 + 4);\n    uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    if (uVar6 != uVar8 || uVar10 != 0) goto LAB_0008259a;\n    uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n    __s1 = (char *)((int)__s1 + 8);\n    __s2 = (char *)((int)__s2 + 8);\n  } while (uVar7 == uVar9 && uVar10 == 0);\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\nLAB_0008259e:\n  uVar8 = uVar10 << 0x18 | (uVar10 >> 8 & 0xff) << 0x10 | (uVar10 >> 0x10 & 0xff) << 8 |\n          uVar10 >> 0x18;\n  if (uVar8 != 0) {\n    iVar2 = count_leading_zeroes(uVar8);\n    uVar7 = uVar7 >> (0x18U - iVar2 & 0xff);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar7 <= uVar6) {\n    iVar2 = -(uint)(uVar7 < uVar6);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "equals"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000816c8": {
            "renaming": {
                "FUN_000816c8": "incrementTickCount_000816c8",
                "PTR__dwTickCount_000816d4": "tickCountPtr"
            },
            "code": "void incrementTickCount_000816c8(void)\n{\n  int* PTR__dwTickCount_000816d4 = (int*) PTR__dwTickCount_000816d4;\n  *PTR__dwTickCount_000816d4 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816c8",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_000816c8"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "print_number_to_string_000810fc",
                "this": "print_object",
                "n": "number",
                "base": "base",
                "pcVar1": "string_pointer",
                "sVar2": "string_length",
                "uVar3": "base_value",
                "uVar4": "quotient",
                "uVar6": "remainder",
                "str": "string_length",
                "cVar5": "digit",
                "buf": "buffer"
            },
            "code": "size_t __thiscall print_number_to_string_000810fc(Print *print_object, ulong number, uint8_t base) {\n  char *string_pointer;\n  size_t string_length;\n  uint base_value;\n  uint quotient, remainder;\n  char buffer[33];\n  base_value = (uint)base;\n  buffer[32] = '\\0';\n  if (base_value < 2) {\n    base_value = 10;\n  }\n  string_pointer = buffer + 0x1f;\n  do {\n    string_length = string_pointer;\n    quotient = number / base_value;\n    remainder = number - base_value * quotient & 0xff;\n    char digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *string_length = digit;\n    number = quotient;\n    string_pointer = string_length + -1;\n  } while (quotient != 0);\n  size_t bytes_written = write(print_object, string_length);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_to_string_000810fc"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "count_lines_00080ec2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_length"
            },
            "code": "int count_lines_00080ec2(int file_descriptor, char *buffer, int buffer_length){\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "count_lines_00080ec2"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_00080774",
                "ctx": "context",
                "puVar1": "system_core_clock_pointer",
                "puVar2": "data_pointer",
                "iVar3": "pin_2",
                "iVar4": "pin_1",
                "iVar5": "pin_4",
                "iVar6": "result",
                "ulPin": "pin_number",
                "uVar7": "next_pin"
            },
            "code": "int initialize_00080774(EVP_PKEY_CTX *context) {\n  uint32_t pin_number = 0;\n  uint32_t system_clock = *(uint *)PTR_SystemCoreClock_00080878 / 1000 - 1;\n  SystemInit();\n  uint32_t *data_pointer = DAT_0008087c;\n  data_pointer[1] = system_clock;\n  *(undefined *)(DAT_00080880 + 0x23) = 0xf0;\n  data_pointer[2] = 0;\n  *data_pointer = 7;\n  __libc_initialize_00080774_array();\n  while (pin_number != 0x4f) {\n    digitalWrite(pin_number, 0);\n    int pin_1 = DAT_00080884;\n    int pin_2 = DAT_00080888;\n    int pin_3 = DAT_0008088c;\n    int pin_4 = DAT_00080890;\n    pin_number++;\n  }\n  *(undefined4 *)(DAT_00080884 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(pin_2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(pin_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(pin_4 + 0xa0) = 0xffffffff;\n  PIO_Configure(pin_1, 1, 0x300, 0);\n  digitalWrite(0, 1);\n  PIO_Configure(pin_1, 1, 0xc00, 0);\n  PIO_Configure(pin_1, 1, 0x3000, 0);\n  PIO_Configure(pin_3, 2, 0x30, 0);\n  PIO_Configure(pin_2, 1, 0xc00, 0);\n  PIO_Configure(pin_1, 1, 3, 0);\n  PIO_Configure(pin_2, 1, 0xc000, 0);\n  pmc_enable_periph_clk(0x25);\n  adc_initialize_00080774(DAT_00080898, system_clock, DAT_00080894, 0xc);\n  adc_configure_timing(DAT_00080898, 0, 0x300000, 1);\n  adc_configure_trigger(DAT_00080898, 0, 0);\n  adc_disable_interrupt(DAT_00080898, 0xffffffff);\n  int result = adc_disable_all_channel(DAT_00080898);\n  analogOutputInit();\n  return result;\n}",
            "called": [
                "SystemInit",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "adc_disable_interrupt",
                "PIO_Configure",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_init",
                "analogOutputInit",
                "adc_configure_trigger"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_00080774"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_pulse_width_00081624",
                "pin": "pin_number",
                "state": "state_value",
                "timeout": "timeout_value",
                "puVar1": "system_core_clock_ptr",
                "uVar2": "pulse_width",
                "uVar3": "pin_description_offset",
                "PTR_SystemCoreClock_0008167c": "system_core_clock_ptr",
                "PTR_g_APinDescription_00081678": "pin_description_ptr",
                "DAT_00081680": "data_00081680"
            },
            "code": "uint32_t calculate_pulse_width_00081624(uint32_t pin_number, uint32_t state, uint32_t timeout) {\n  uint32_t* PTR_SystemCoreClock_0008167c = PTR_SystemCoreClock_0008167c;\n  uint32_t PTR_g_APinDescription_00081678 = PTR_g_APinDescription_00081678 + pin_number * 0x1c;\n  uint32_t pin_description_offset = 4;\n  uint32_t state_value = *(uint32_t *)(PTR_g_APinDescription_00081678 + pin_description_offset);\n  if (state == 0) {\n    state_value = 0;\n  }\n  uint32_t pulse_width = countPulseASM(*(int *)(PTR_g_APinDescription_00081678) + 0x3c, *(uint32_t *)(PTR_g_APinDescription_00081678 + pin_description_offset), state_value, ((*(uint32_t *)PTR_SystemCoreClock_0008167c / DAT_00081680) * timeout) / 0x12);\n  if (pulse_width != 0) {\n    pulse_width = (uint32_t)((uint64_t)(pulse_width * 18000 + 16000) / ((uint64_t)*(uint32_t *)PTR_SystemCoreClock_0008167c / 1000));\n  }\n  return pulse_width;\n}",
            "called": [
                "countPulseASM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_pulse_width_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_to_memory_00080ec8",
                "file_UNUSED": "file_unused",
                "ptr": "source",
                "len": "length",
                "iVar1": "index"
            },
            "code": "int copy_to_memory_00080ec8(int file_unused, char *source, int length) {\n  int index;\n  for (index = 0; index < length; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)(byte)source[index];\n  }\n  return length & ~(length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_to_memory_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "__thiscall Print::FUN_0008117a": "calculate_print_length",
                "this": "print_obj",
                "num": "num",
                "base": "base",
                "sVar1": "print_result",
                "sVar2": "length_result",
                "FUN_0008117a": "calculate_print_length_0008117a"
            },
            "code": "size_t calculate_print_length_0008117a(Print *print_obj,int num,int base)\n{\n  size_t print_result;\n  size_t length_result;\n  \n  print_result = print(print_obj,num,base);\n  length_result = calculate_print_length_0008117a(print_obj);\n  return length_result + print_result;\n}",
            "called": [
                "println",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_print_length_0008117a"
        },
        "FUN_000843e0": {
            "renaming": {
                "FUN_000843e0": "close_file_with_error_handling_000843e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_pointer",
                "iVar2": "close_result"
            },
            "code": "void close_file_with_error_handling_000843e0(int *error_code, int file_descriptor) {\n  undefined *errno_pointer;\n  int close_result;\n  errno_pointer = PTR_errno_00084400;\n  *(undefined4 *)PTR_errno_00084400 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_pointer != 0)) {\n    *error_code = *(int *)errno_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843e0",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_with_error_handling_000843e0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "memory_pointer",
                "_FUN_000817f0_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_000817f0(size_t size)\n{\n  void *memory_pointer;\n  memory_pointer = (void *)_allocate_memory_000817f0_r(*(undefined4 *)PTR__impure_ptr_000817fc, size);\n  return memory_pointer;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_000817f0"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_one_00080eba(int file_unused) {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_0008173c": {
            "renaming": {
                "FUN_0008173c": "register_exit_proc_0008173c",
                "param_1": "exit_code",
                "param_2": "process_func",
                "param_3": "cleanup_func",
                "__register_exitproc": "register_exit_handler"
            },
            "code": "void register_exit_proc_0008173c(int exit_code, void* process_func, void* cleanup_func, void* arg) {\n    __register_exitproc(exit_code, process_func, cleanup_func, arg);\n    return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008173c",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_proc_0008173c"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__00082368;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_00082078;\n  }\n  if (uVar9 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__00082368 + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__00082368 + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000820a0;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "_malloc_r",
                "__malloc_unlock",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "realloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "check_ticks_and_call_callback_00081190",
                "iVar1": "ticks_left"
            },
            "code": "void check_ticks_and_call_callback_00081190(void)\n{\n  int ticks_left = *(int *)PTR_ticks_000811a8;\n  if (ticks_left != -1 && --ticks_left == 0)\n  {\n    (*DAT_000811ac)();\n  }\n  *(int *)PTR_ticks_000811a8 = ticks_left;\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_call_callback_00081190"
        },
        "FUN_000805e8": {
            "renaming": {
                "__thiscall Servo::FUN_000805e8": "attach",
                "this": "servo",
                "pin": "pin",
                "min": "min_pulse_width",
                "max": "max_pulse_width",
                "bVar1": "servo_byte",
                "puVar2": "servo_array",
                "pTVar3": "timer",
                "channel": "channel",
                "id": "id",
                "iVar4": "i",
                "uVar5": "servo_index",
                "FUN_000805e8": "attach_000805e8"
            },
            "code": "uint8_t __thiscall Servo::attach_000805e8(int pin, int min_pulse_width, int max_pulse_width) {\n  if (this->servoIndex > 59) return 0;\n  pinMode(pin, OUTPUT);\n  uint8_t* servo_array = PTR_servos_00080694;\n  uint8_t servo_index = this->servoIndex;\n  uint8_t servo_byte = servo_array[servo_index * 8];\n  this->max = (int8_t)((24000 - max_pulse_width) / 4);\n  uint32_t channel = servo_index / 12;\n  servo_array[servo_index * 8] = (servo_byte & 0xC0) | (pin & 0x3F);\n  this->min = (int8_t)((5500 - min_pulse_width) / 4);\n  for (int i = 0; i < 12; i++) {\n    if ((int)((uint)(byte)servo_array[(i + channel * 12) * 8] << 0x19) < 0) return 0;\n  }\n  uint32_t id;\n  Tc* timer;\n  if (channel == 0) {\n    id = 0x1E;\n    timer = DAT_00080698;\n  }\n  else if (channel == 1) {\n    id = 0x1F;\n    timer = DAT_00080698;\n  }\n  else if (channel == 2) {\n    id = 0x20;\n    timer = DAT_00080698;\n  }\n  else if (channel == 3) {\n    id = 0x1D;\n    channel = 2;\n    timer = DAT_00080698;\n  }\n  else if (channel == 4) {\n    id = 0x1B;\n    channel = 0;\n    timer = DAT_00080698;\n  }\n  else {\n    return 0;\n  }\n  _initISR(timer, channel, id, (IRQn_Type)id);\n  servo_array[servo_index * 8] = servo_byte | 0x40;\n  return this->servoIndex;\n}",
            "called": [
                "pinMode",
                "_initISR"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805e8",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "attach_000805e8"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "zero_return_00080ebe"
            },
            "code": "int zero_return_00080ebe(int file_not_used, int ptr_not_used, int dir_not_used) {\n                     return 0;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "zero_return_00080ebe"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "getTickCount_000816d8",
                "PTR__dwTickCount_000816e0": "PTR_TickCount"
            },
            "code": "unsigned long getTickCount_000816d8(void)\n{\n  return *(unsigned long *)PTR__dwTickCount_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "String::FUN_000815b8": "compare_strings",
                "this": "str1",
                "cstr": "str2",
                "uVar1": "result",
                "uVar2": "cmp_result",
                "FUN_000815b8": "compare_strings_000815b8"
            },
            "code": "unsigned char compare_strings_000815b8(String *str1, char *str2) {\n    unsigned char result;\n    uint32_t cmp_result;\n    if (str1->length == 0) {\n        if (str2 == NULL) {\n            result = 1;\n        }\n    } else {\n        if (str2 != NULL) {\n            cmp_result = strcmp(str1->buffer, str2);\n            if (cmp_result == 0) {\n                result = 1;\n            } else {\n                result = 0;\n            }\n        } else {\n            str2 = str1->buffer;\n            result = 1;\n        }\n    }\n    return result;\n}",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "compare_strings_000815b8"
        },
        "FUN_00080e28": {
            "renaming": {
                "FUN_00080e28": "process_pio_callbacks_00080e28",
                "uVar1": "leading_zeroes",
                "uVar2": "active_callbacks",
                "PTR_callbacksPioD_00080e5c": "PTR_callbacks",
                "DAT_00080e58": "PIO_BASE"
            },
            "code": "void process_pio_callbacks_00080e28(void)\n{\n  uint32_t active_callbacks = *(uint32_t *)(DAT_00080e58 + 0x4c);\n  while( true ) {\n    uint32_t leading_zeroes = count_leading_zeroes(active_callbacks);\n    if (leading_zeroes > 0x1f) break;\n    uint32_t bit_index = 0x1f - leading_zeroes;\n    code* callback = *(code **)(PTR_callbacksPioD_00080e5cPioD_00080e5c + bit_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    active_callbacks &= ~(1 << bit_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e28",
            "calling": [],
            "imported": false,
            "current_name": "process_pio_callbacks_00080e28"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "read_and_update_00084220",
                "param_1": "file_descriptor",
                "param_2": "data_address",
                "iVar1": "bytes_read"
            },
            "code": "void read_and_update_00084220(int file_descriptor, int data_address)\n{\n  int bytes_read;\n\n  bytes_read = _read_r(file_descriptor, (int)*(short *)(data_address + 0xe));\n  if (bytes_read >= 0) {\n    *(int *)(data_address + 0x50) += bytes_read;\n    return;\n  }\n  *(ushort *)(data_address + 0xc) &= 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_00084220"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_00081750",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "uStack_8": "stack_data_1",
                "uStack_4": "stack_data_2"
            },
            "code": "void process_data_00081750(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  undefined4 stack_data_1;\n  undefined4 stack_data_2;\n  \n  stack_data_1 = data_3;\n  stack_data_2 = data_4;\n  _process_data_00081750_r(*(undefined4 *)PTR__impure_ptr_00081774, data_1, data_2, &stack_data_1);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "process_data_00081750"
        },
        "FUN_00080db8": {
            "renaming": {
                "FUN_00080db8": "execute_pio_callbacks_00080db8",
                "uVar1": "leading_zeros",
                "uVar2": "callbacks_address",
                "PTR_callbacksPioB_00080dec": "callbacks_pointer",
                "DAT_00080de8": "data_address",
                "bit_mask": "bit_mask",
                "callback_index": "callback_index"
            },
            "code": "void execute_pio_callbacks_00080db8(void)\n{\n  uint32_t bit_mask;\n  uint8_t leading_zeros;\n  uint32_t callbacks_address = *(uint32_t *)(DAT_00080de8 + 0x4c);\n  while( true ) {\n    leading_zeros = count_leading_zeroes(callbacks_address);\n    if (leading_zeros > 0x1f) {\n        break;\n    }\n    uint8_t callback_index = 0x1f - leading_zeros;\n    if (*(code **)(PTR_callbacksPioB_00080dec + callback_index * 4) != NULL) {\n      (**(code **)(PTR_callbacksPioB_00080dec + callback_index * 4))();\n    }\n    bit_mask = ~(1 << callback_index);\n    callbacks_address &= bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080db8",
            "calling": [],
            "imported": false,
            "current_name": "execute_pio_callbacks_00080db8"
        },
        "FUN_0008421c": {
            "renaming": {
                "FUN_0008421c": "get_process_id_0008421c"
            },
            "code": "__pid_t get_process_id_0008421c(void)\n{\n  return -1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0008421c"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_UARTs_0008089c",
                "*puVar1": "rx_buffer1",
                "*puVar2": "tx_buffer1",
                "*this": "rx_buffer3",
                "*this_00": "tx_buffer4",
                "*this_01": "rx_buffer2",
                "*this_02": "tx_buffer2"
            },
            "code": "void initialize_UARTs_0008089c(void)\n{\n  RingBuffer *rx_buffer1 = (RingBuffer *)PTR_rx_buffer1_00080930;\n  RingBuffer::RingBuffer(rx_buffer1);\n\n  RingBuffer *tx_buffer1 = (RingBuffer *)PTR_tx_buffer1_00080934;\n  RingBuffer::RingBuffer(tx_buffer1);\n\n  RingBuffer *rx_buffer2 = (RingBuffer *)PTR_rx_buffer2_00080968;\n  RingBuffer::RingBuffer(rx_buffer2);\n\n  RingBuffer *rx_buffer3 = (RingBuffer *)PTR_rx_buffer3_0008093c;\n  RingBuffer::RingBuffer(rx_buffer3);\n\n  RingBuffer *rx_buffer4 = (RingBuffer *)PTR_rx_buffer4_00080944;\n  RingBuffer::RingBuffer(rx_buffer4);\n\n  RingBuffer *tx_buffer2 = (RingBuffer *)PTR_tx_buffer2_0008096c;\n  RingBuffer::RingBuffer(tx_buffer2);\n\n  RingBuffer *tx_buffer3 = (RingBuffer *)PTR_tx_buffer3_00080948;\n  RingBuffer::RingBuffer(tx_buffer3);\n\n  RingBuffer *tx_buffer4 = (RingBuffer *)PTR_tx_buffer4_0008094c;\n  RingBuffer::RingBuffer(tx_buffer4);\n\n  UARTClass *serial = (UARTClass *)PTR_Serial_00080940;\n  UARTClass::UARTClass(serial, DAT_00080938, UART_IRQn, 8, rx_buffer1, tx_buffer1);\n\n  USARTClass *serial1 = (USARTClass *)PTR_Serial1_00080954;\n  USARTClass::USARTClass(serial1, DAT_00080950, USART0_IRQn, 0x11, rx_buffer2, tx_buffer2);\n\n  USARTClass *serial2 = (USARTClass *)PTR_Serial2_0008095c;\n  USARTClass::USARTClass(serial2, DAT_00080958, USART1_IRQn, 0x12, rx_buffer3, tx_buffer3);\n\n  USARTClass *serial3 = (USARTClass *)PTR_Serial3_00080964;\n  USARTClass::USARTClass(serial3, DAT_00080960, USART3_IRQn, 0x14, rx_buffer4, tx_buffer4);\n}\n",
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_UARTs_0008089c"
        },
        "FUN_000816e4": {
            "renaming": {
                "FUN_000816e4": "set_flag_at_address_000816e4",
                "param_1": "address",
                "*(undefined4 *)(param_1 + 4)": "*address"
            },
            "code": "void set_flag_at_address_000816e4(int* address) {\n    *address = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e4",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_at_address_000816e4"
        },
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "uStack_c": "value1",
                "uStack_8": "value2",
                "uStack_4": "value3"
            },
            "code": "void process_data_000817c8(int data, int* ptr1, int* ptr2, int* ptr3)\n{\n  int value1 = *ptr1;\n  int value2 = *ptr2;\n  int value3 = *ptr3;\n  _process_data_000817c8_helper(*(int *)PTR__impure_ptr_000817ec, *(int *)(*(int *)PTR__impure_ptr_000817ec + 8), data, &value1);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00080750": {
            "renaming": {
                "FUN_00080750": "handle_UART_interrupt_00080750",
                "PTR_Serial1_00080758": "serial1"
            },
            "code": "void handle_UART_interrupt_00080750(void)\n{\n  UARTClass* PTR_Serial1_00080758 = (UARTClass*) PTR_Serial1_00080758;\n  PTR_Serial1_00080758->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080750",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080750"
        },
        "FUN_00080f0a": {
            "renaming": {
                "FUN_00080f0a": "do_nothing_00080f0a"
            },
            "code": "\nvoid do_nothing_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f0a"
        },
        "FUN_00080ea4": {
            "renaming": {
                "FUN_00080ea4": "check_file_existence_00080ea4",
                "cOld_UNUSED": "old_file_path",
                "cNew_UNUSED": "new_file_path"
            },
            "code": "int check_file_existence_00080ea4(char *old_file_path, char *new_file_path)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ea4",
            "calling": [],
            "imported": false,
            "current_name": "check_file_existence_00080ea4"
        },
        "FUN_00082814": {
            "renaming": {
                "FUN_00082814": "get_signal_status_00082814",
                "__pid": "pid",
                "__sig": "signal",
                "iVar1": "status"
            },
            "code": "int get_signal_status_00082814(__pid_t pid, int signal) {\n  int status = _get_signal_status_00082814_r(*(undefined4 *)PTR__impure_ptr_00082820, pid, signal);\n  return status;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082814",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_status_00082814"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "configurePin_00080f0c",
                "ulPin": "pinNumber",
                "ulMode": "mode",
                "puVar1": "pinDescription",
                "puVar2": "pinStatus",
                "uVar3": "peripheralId",
                "bVar4": "currentMode",
                "bVar5": "currentStatus",
                "iVar6": "pinConfig",
                "iVar7": "pinDescriptionIndex"
            },
            "code": "void configurePin_00080f0c(uint32_t pinNumber, uint32_t mode) {\\n\\tuint8_t* pinStatus = PTR_g_pinStatus_0008100c;\\n\\tuint8_t* pinDescription = PTR_g_APinDescription_00081008;\\n\\tif (pinDescription[pinNumber * 0x1c + 0xc] != \"\\0\") {\\n\\t\\tif ((pinStatus[pinNumber] & 0xf) == 4) {\\n\\t\\t\\tadc_disable_channel(DAT_00081010, pinDescription[pinNumber * 0x1c + 0x19]);\\n\\t\\t}\\n\\t\\tuint8_t currentStatus = pinStatus[pinNumber];\\n\\t\\tuint8_t currentMode = currentStatus & 0xf;\\n\\t\\tif ((currentMode < 3) && (currentStatus != 0)) {\\n\\t\\t\\tif (currentMode == 2 && mode == 0) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\telse if (currentMode == 1 && mode == 2) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\telse if (currentMode == 3 && mode == 1) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (mode == 1) {\\n\\t\\t\\tint pinDescriptionIndex = pinNumber * 0x1c;\\n\\t\\t\\tint pinConfig = *(int *)(pinDescription + pinDescriptionIndex);\\n\\t\\t\\tuint32_t peripheralId = (currentStatus >> 4 == 0) ? 4 : 5;\\n\\t\\t\\tPIO_Configure(pinConfig, peripheralId, *(uint32_t *)(pinDescription + pinDescriptionIndex + 4), *(uint32_t *)(pinDescription + pinDescriptionIndex + 0x10));\\n\\t\\t\\tpinStatus[pinNumber] = (currentStatus & 0xf0) | 3;\\n\\t\\t\\tif (*(int *)(pinConfig + 0x18) == -1) {\\n\\t\\t\\t\\tpmc_disable_periph_clk(*(uint32_t *)(pinDescription + pinDescriptionIndex + 8));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (mode == 0) {\\n\\t\\t\\tint pinDescriptionIndex = pinNumber * 0x1c;\\n\\t\\t\\tpmc_enable_periph_clk(*(uint32_t *)(pinDescription + pinDescriptionIndex + 8));\\n\\t\\t\\tPIO_Configure(*(uint32_t *)(pinDescription + pinDescriptionIndex), 3, *(uint32_t *)(pinDescription + pinDescriptionIndex + 4), 0);\\n\\t\\t\\tpinStatus[pinNumber] = (currentStatus & 0xf0) | 2;\\n\\t\\t}\\n\\t\\telse if (mode == 2) {\\n\\t\\t\\tint pinDescriptionIndex = pinNumber * 0x1c;\\n\\t\\t\\tpmc_enable_periph_clk(*(uint32_t *)(pinDescription + pinDescriptionIndex + 8));\\n\\t\\t\\tPIO_Configure(*(uint32_t *)(pinDescription + pinDescriptionIndex), 3, *(uint32_t *)(pinDescription + pinDescriptionIndex + 4), 1);\\n\\t\\t\\tpinStatus[pinNumber] = (currentStatus & 0xf0) | 1;\\n\\t\\t}\\n\\t}\\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "attach",
                "setup",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "configurePin_00080f0c"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "seek_file_000844e0",
                "param_1": "error",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_000844e0(int *error, int file_descriptor, int offset, int whence) {\n  int seek_result = 0;\n  int *error_ptr = PTR_errno_00084504;\n  *error_ptr = 0;\n  seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*(int *)error_ptr != 0)) {\n    *error = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "FUNC_00083b10"
            },
            "code": "\nvoid FUNC_00083b10(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083c98;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083c98 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083ca0;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083ca4);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083c9c)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083ba4;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083c98 + 4) =\n             *(uint *)(PTR___malloc_av__00083c98 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_malloc_trim_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083b10",
            "calling": [
                "_realloc_r",
                "__sflush_r",
                "_malloc_r",
                "__swsetup_r",
                "_fclose_r",
                "__sfvwrite_r",
                "free"
            ],
            "imported": false,
            "current_name": "FUNC_00083b10"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "mem_ptr"
            },
            "code": "void allocate_memory_0008236c(int *error_code, int size) {\n  undefined *errno_ptr;\n  caddr_t mem_ptr;\n  errno_ptr = PTR_errno_0008238c;\n  *(undefined4 *)PTR_errno_0008238c = 0;\n  mem_ptr = _sbrk(size);\n  if ((mem_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "write_to_stream_000842a4",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "character_short",
                "uVar2": "character_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "swsetup_result"
            },
            "code": "uint write_to_stream_000842a4(int stream, uint character, undefined4 *buffer, undefined4 buffer_size)\n{\n  ushort character_short;\n  uint character_uint;\n  undefined *buffer_pointer;\n  int swsetup_result;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n    __sinit();\n  }\n  character_short = *(ushort *)(buffer + 3);\n  character_uint = (uint)character_short;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(character_uint << 0x1c)) || (swsetup_result = buffer[4], swsetup_result == 0)) {\n    swsetup_result = __swsetup_r(stream, buffer, character_short, character_uint, buffer_size);\n    if (swsetup_result != 0) {\n      return 0xffffffff;\n    }\n    character_short = *(ushort *)(buffer + 3);\n    swsetup_result = buffer[4];\n    character_uint = (uint)character_short;\n  }\n  character = character & 0xff;\n  if ((int)(character_uint << 0x12) < 0) {\n    buffer_pointer = (undefined *)*buffer;\n    swsetup_result = (int)buffer_pointer - swsetup_result;\n    if (swsetup_result < (int)buffer[5]) {\n      goto LAB_000842d6;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = character_short | 0x2000;\n    swsetup_result = (int)buffer_pointer - swsetup_result;\n    if (swsetup_result < (int)buffer[5]) {\n      goto LAB_000842d6;\n    }\n  }\n  swsetup_result = _fflush_r(stream, buffer);\n  if (swsetup_result != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*buffer;\n  swsetup_result = 1;\nLAB_000842d6:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((buffer[5] == swsetup_result) || (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) && (swsetup_result = _fflush_r(stream, buffer), swsetup_result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_000842a4"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "convert_and_write_to_stream_000839b4",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "uVar1": "mb_cur_max",
                "iVar2": "swbuf_result",
                "uVar3": "converted_character",
                "pbVar4": "buffer_ptr",
                "uVar5": "buffer_index",
                "local_1c": "single_byte",
                "abStack_1b": "stack_bytes"
            },
            "code": "uint convert_and_write_to_stream_000839b4(undefined4 stream, uint character, byte **buffer)\n{\n  uint mb_cur_max;\n  int swbuf_result;\n  uint converted_character;\n  byte *buffer_ptr;\n  uint buffer_index = 0;\n  byte single_byte;\n  byte stack_bytes[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  mb_cur_max = __locale_mb_cur_max();\n  if ((mb_cur_max == 1) && (character - 1 < 0xff)) {\n    converted_character = character & 0xff;\n    single_byte = (byte)converted_character;\n  }\n  else {\n    mb_cur_max = _wcrtomb_r(stream,&single_byte,character,buffer + 0x17);\n    if (mb_cur_max == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (mb_cur_max == 0) {\n      return character;\n    }\n    converted_character = (uint)single_byte;\n  }\n  do {\n    buffer_ptr = buffer[2] + -1;\n    buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)buffer[6] <= (int)buffer_ptr) {\n        **buffer = (byte)converted_character;\n        buffer_ptr = *buffer;\n        converted_character = (uint)*buffer_ptr;\n        if (converted_character != 10) goto end_of_loop;\n      }\n      swbuf_result = __swbuf_r(stream,converted_character,buffer);\n      if (swbuf_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)converted_character;\n      buffer_ptr = *buffer;\nend_of_loop:\n      *buffer = buffer_ptr + 1;\n    }\n    if (mb_cur_max <= buffer_index + 1) {\n      return character;\n    }\n    converted_character = (uint)stack_bytes[buffer_index];\n    buffer_index = buffer_index + 1;\n  } while( true );\n}",
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_and_write_to_stream_000839b4"
        },
        "FUN_00081176": {
            "renaming": {
                "__thiscall Print::FUN_00081176": "printNumber",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "tempLength",
                "FUN_00081176": "printNumber_00081176"
            },
            "code": "size_t Print::printNumber_00081176(Print *this,int number,int base){\n  size_t length;\n  if (base == 0) {\n    length = (**this->_vptr_Print)(this,number & 0xff);\n    return length;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      length = printChar(this,'-');\n      length += printNumber_00081176(this,-number,base);\n      return length;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  length = printNumber_00081176(this,number,base);\n  return length;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printNumber_00081176"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_file_mode_to_directory_00080eb0",
                "file_UNUSED": "file_stat",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_directory_00080eb0(stat *file_stat) {\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_00080eb0"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "convertStringToLong_00081734",
                "__nptr": "stringToConvert",
                "lVar1": "convertedLong"
            },
            "code": "long convertStringToLong_00081734(char *stringToConvert)\n{\n  long convertedLong;\n  convertedLong = strtol(stringToConvert, (char **)0x0, 10);\n  return convertedLong;\n}",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "toInt"
            ],
            "imported": false,
            "current_name": "convertStringToLong_00081734"
        },
        "FUN_00080768": {
            "renaming": {
                "FUN_00080768": "handleSerial3Interrupt_00080768",
                "PTR_Serial3_00080770": "&Serial3"
            },
            "code": "void handleSerial3Interrupt_00080768(void)\n{\n  UARTClass::IrqHandler(PTR_Serial3_00080770);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080768",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial3Interrupt_00080768"
        },
        "FUN_00082824": {
            "renaming": {
                "__sprint_r_part_0": "__write_to_file_with_buffer",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "buffer_pointer",
                "piVar1": "current_buffer_pointer",
                "iVar2": "return_value",
                "piVar3": "current_buffer_address",
                "uVar4": "characters_written",
                "puVar5": "current_character_pointer",
                "uVar6": "buffer_size",
                "uVar7": "characters_left_to_write",
                "FUN_00082824": "__write_to_file_with_buffer_00082824"
            },
            "code": "int __write_to_file_with_buffer_00082824(undefined4 file_descriptor,int buffer_address,int **buffer_pointer)\n{\n  int *current_buffer_pointer;\n  int return_value;\n  int *current_buffer_address;\n  uint buffer_size;\n  undefined4 *current_character_pointer;\n  uint characters_left_to_write;\n  uint characters_written;\n  \n  if (-1 < *(int *)(buffer_address + 100) << 0x12) {\n    return_value = __sfvwrite_r();\n    buffer_pointer[2] = (int *)0x0;\n    buffer_pointer[1] = (int *)0x0;\n    return return_value;\n  }\n  current_buffer_address = *buffer_pointer;\n  current_buffer_pointer = buffer_pointer[2];\n  while (current_buffer_pointer != (int *)0x0) {\n    buffer_size = current_buffer_address[1];\n    characters_left_to_write = buffer_size >> 2;\n    if (characters_left_to_write != 0) {\n      current_character_pointer = (undefined4 *)(*current_buffer_address + -4);\n      characters_written = 0;\n      do {\n        current_character_pointer = current_character_pointer + 1;\n        return_value = _fputwc_r(file_descriptor,*current_character_pointer,buffer_address);\n        characters_written = characters_written + 1;\n        if (return_value == -1) goto LAB_00082864;\n      } while (characters_left_to_write != characters_written);\n      current_buffer_pointer = buffer_pointer[2];\n    }\n    current_buffer_pointer = (int *)((int)current_buffer_pointer - (buffer_size & 0xfffffffc));\n    buffer_pointer[2] = current_buffer_pointer;\n    current_buffer_address = current_buffer_address + 2;\n  }\n  return_value = 0;\nLAB_00082864:\n  buffer_pointer[2] = (int *)0x0;\n  buffer_pointer[1] = (int *)0x0;\n  return return_value;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__write_to_file_with_buffer_00082824"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_bitwise_combination_00080a94",
                "param_1": "ptr_param_1",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_combination_00080a94(int ptr_param_1, uint param_2)\n{\n  uint result = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (result != 0) {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bitwise_combination_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618",
                "DAT_00081620": "watchdog_timer"
            },
            "code": "void disable_watchdog_timer_00081618(void)\n{\n    WDT_Disable(DAT_00081620);\n    return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "lower_bits",
                "param_4": "upper_bits",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008455c(uint dividend, int divisor, uint32_t lower_bits, uint32_t upper_bits, int *difference) {\n  uint32_t product = dividend * ((uint64_t)upper_bits << 32 | lower_bits);\n  uint32_t quotient = product / divisor;\n  difference[0] = dividend - quotient;\n  difference[1] = divisor - (product >> 32) - (difference[0] > dividend);\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "memset_custom_00081f00",
                "__s": "ptr",
                "__c": "value",
                "__n": "num",
                "puVar1": "current_word",
                "puVar2": "aligned_ptr",
                "puVar3": "end_word",
                "uVar4": "value_word",
                "uVar5": "num_words",
                "bVar6": "is_empty"
            },
            "code": "void * memset_custom_00081f00(void *ptr, int value, size_t num){\n    uint *current_word;\n    uint *aligned_ptr;\n    uint *end_word;\n    uint value_word;\n    uint num_words;\n    bool is_empty;\n    \n    aligned_ptr = (uint *)ptr;\n    is_empty = ((uint)ptr & 3) == 0;\n    if (!is_empty) {\n        if (num == 0) {\n            return ptr;\n        }\n        current_word = (uint *)ptr;\n        num--;\n        while (true) {\n            aligned_ptr = (uint *)((int)current_word + 1);\n            *(char *)current_word = (char)value;\n            if (((uint)aligned_ptr & 3) == 0) {\n                break;\n            }\n            if (num == 0) {\n                return ptr;\n            }\n            current_word = aligned_ptr;\n            num--;\n        }\n    }\n    value_word = value & 0xffU | (value & 0xffU) << 8;\n    value_word |= value_word << 0x10;\n    num_words = num;\n    current_word = aligned_ptr;\n    if (0xf < num) {\n        num_words = num - 0x10;\n        end_word = (uint *)((int)aligned_ptr + (num_words & 0xfffffff0) + 0x10);\n        do {\n            *current_word = value_word;\n            current_word[1] = value_word;\n            current_word[2] = value_word;\n            current_word[3] = value_word;\n            current_word += 4;\n        } while (current_word != end_word);\n        num = num & 0xf;\n        aligned_ptr += ((num_words >> 4) + 1) * 4;\n        current_word = aligned_ptr;\n        if (num < 4) {\n            goto end;\n        }\n    }\n    end_word = (uint *)((int)current_word + (num - 4 & 0xfffffffc) + 4);\n    num = num & 3;\n    while (current_word != end_word) {\n        *current_word = value_word;\n        current_word++;\n    }\n    end:\n    if (num != 0) {\n        current_word = aligned_ptr + (num - 1);\n        do {\n            *(char *)current_word = (char)value;\n            current_word--;\n        } while (current_word >= aligned_ptr);\n    }\n    return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "imported": false,
            "current_name": "memset_custom_00081f00"
        },
        "FUN_0008075c": {
            "renaming": {
                "FUN_0008075c": "handle_UART_interrupt_0008075c",
                "PTR_Serial2_00080764": "serial2"
            },
            "code": "void handle_UART_interrupt_0008075c(void)\n{\n  UARTClass* PTR_Serial2_00080764 = (UARTClass*) PTR_Serial2_00080764;\n  PTR_Serial2_00080764->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008075c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_0008075c"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_error_00080eaa",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_error_00080eaa(int file_unused)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_00080eaa"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "divide_numbers_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void divide_numbers_00084530(int dividend, int divisor, int *quotient, int *remainder) {\n  if ((divisor == 0) && (dividend == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      *quotient = -1;\n    }\n    else {\n      __aeabi_idiv0(*quotient);\n    }\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__aeabi_idiv0",
                "__gnu_uldivmod_helper"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_numbers_00084530"
        },
        "FUN_00085860": {
            "renaming": {
                "FUN_00085860": "do_nothing_00085860"
            },
            "code": "\nvoid do_nothing_00085860(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085860",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085860"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "checkSerialEvents_00080970",
                "iVar1": "availableBytes",
                "PTR_Serial_000809a4": "serialPtr1",
                "PTR_Serial1_000809a8": "serialPtr2",
                "PTR_Serial2_000809ac": "serialPtr3",
                "PTR_Serial3_000809b0": "serialPtr4",
                "serialEvent": "processSerialEvent1",
                "serialEvent1": "processSerialEvent2",
                "serialEvent2": "processSerialEvent3",
                "serialEvent3": "processSerialEvent4"
            },
            "code": "void checkSerialEvents_00080970(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_000809a4);\n  if (availableBytes != 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_000809a8);\n  if (availableBytes != 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_000809ac);\n  if (availableBytes != 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_000809b0);\n  if (availableBytes != 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent3",
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialEvents_00080970"
        },
        "FUN_000806ac": {
            "renaming": {
                "FUN_000806ac": "setAngle_000806ac",
                "this": "servo",
                "value": "angle",
                "iVar1": "min_offset",
                "iVar2": "min_offset_scaled",
                "servoIndex": "index",
                "PTR_servos_000806f4": "servos_pointer",
                "PTR_SystemCoreClock_000806ec": "system_clock_pointer",
                "DAT_000806f0": "data"
            },
            "code": "void __thiscall Servo::setAngle_000806ac(Servo *servo, int angle) {\n  int min_offset = 0x88 - servo->min_angle;\n  int min_offset_scaled = min_offset * 4;\n  if ((angle + min_offset_scaled * -1 < 0 == SBORROW4(angle, min_offset_scaled)) && (angle <= (600 - servo->max_angle) * 4)) {\n    *(uint *)(PTR_servos_000806f4 + (uint)servo->index * 8 + 4) = (*(uint *)PTR_SystemCoreClock_000806ec / DAT_000806f0) * (angle + -2) >> 5;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806ac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setAngle_000806ac"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "check_memory_status_20070000",
                "DAT_2007001c": "memory_address",
                "DAT_20070020": "memory_value1",
                "DAT_20070028": "memory_address2",
                "DAT_20070024": "memory_value2"
            },
            "code": "void check_memory_status_20070000(void)\n{\n    disableIRQinterrupts();\n    while ((*(int *)(DAT_2007001c + 8) << 0x1f) > -1);\n    *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n    while ((*(int *)(DAT_2007001c + 8) << 0x1f) > -1);\n    *DAT_20070028 = DAT_20070024;\n    while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "check_memory_status_20070000"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "print_and_flush_000834f0",
                "param_1": "output_stream",
                "param_2": "file_descriptor",
                "iVar1": "printf_return_value",
                "iVar2": "fflush_return_value",
                "local_488": "local_buffer_pointer",
                "local_480": "buffer_size",
                "local_47c": "flags",
                "local_47a": "unused",
                "local_478": "output_buffer_pointer",
                "local_474": "buffer_size",
                "local_470": "unused",
                "local_464": "unused",
                "local_424": "unused",
                "auStack_420": "buffer"
            },
            "code": "int print_and_flush_000834f0(FILE* output_stream, int file_descriptor) {\\n\\\n    int printf_return_value;\\n\\\n    int fflush_return_value;\\n\\\n    char buffer[1024];\\n\\\n    char* local_buffer_pointer[2];\\n\\\n    char* output_buffer_pointer = local_buffer_pointer[0];\\n\\\n    unsigned short flags = *(unsigned short*)(file_descriptor + 0xc) & 0xfffd;\\n\\\n    unsigned int buffer_size = 0x400;\\n\\\n    printf_return_value = vsnprintf(output_buffer_pointer, buffer_size, *(char**)(file_descriptor + 100), *(va_list**)(file_descriptor + 0x1c));\\n\\\n    if (printf_return_value >= 0) {\\n\\\n        fflush_return_value = fflush(output_stream);\\n\\\n        if (fflush_return_value != 0) {\\n\\\n            printf_return_value = -1;\\n\\\n        }\\n\\\n    } else {\\n\\\n        printf_return_value = -1;\\n\\\n    }\\n\\\n    if ((unsigned int)flags << 0x19 < 0) {\\n\\\n        *(unsigned short*)(file_descriptor + 0xc) = *(unsigned short*)(file_descriptor + 0xc) | 0x40;\\n\\\n    }\\n\\\n    return printf_return_value;\\n\\\n    }",
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_and_flush_000834f0"
        },
        "FUN_0008125a": {
            "renaming": {
                "FUN_0008125a": "get_next_byte_0008125a",
                "this": "uart",
                "pRVar2": "rx_buffer",
                "uVar1": "next_byte",
                "_rx_buffer": "rx_buffer",
                "_iHead": "head",
                "_iTail": "tail",
                "_aucBuffer": "buffer"
            },
            "code": "uint32_t get_next_byte_0008125a(UARTClass *uart) {\n  uint32_t next_byte;\n  RingBuffer *rx_buffer = uart->rx_buffer;\n  if (rx_buffer->head == rx_buffer->tail) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (uint32_t)rx_buffer->buffer[rx_buffer->tail];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008125a",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_0008125a"
        },
        "FUN_0008113a": {
            "renaming": {
                "__thiscall Print::FUN_0008113a": "printNumber",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "length2",
                "FUN_0008113a": "printChar_0008113a",
                "FUN_0008113aNumber": "printNumber"
            },
            "code": "size_t __thiscall Print::printChar_0008113a(Print *this,long number,int base) {\n  size_t length;\n  if (base == 0) {\n    length = (**this->_vptr_Print)(this,number & 0xff);\n    return length;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      length = printChar_0008113a(this,'-');\n      length += printChar_0008113a(this,-number,base);\n      return length;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  length = printChar_0008113a(this,number,(uint8_t)base);\n  return length;\n}",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "println",
                "print"
            ],
            "imported": false,
            "current_name": "printChar_0008113a"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "printMessage_000810d8",
                "this": "printObj",
                "sVar1": "bytesWritten",
                "PTR_DAT_000810e4": "message"
            },
            "code": "size_t Print::printMessage_000810d8(Print *printObj)\n{\n  size_t bytesWritten;\n  bytesWritten = write(printObj, PTR_DAT_000810e4);\n  return bytesWritten;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printMessage_000810d8"
        },
        "FUN_00080f04": {
            "renaming": {
                "FUN_00080f04": "getTickCount_00080f04",
                "PTR__dwTickCount_000816e0": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00080f04(void)\n{\n  return *(uint32_t *)PTR__dwTickCount_000816e0;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "timedRead"
            ],
            "imported": false,
            "current_name": "getTickCount_00080f04"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8::FUN_000805a8": "initializeServo",
                "*this": "servo",
                "bVar1": "servoCount",
                "PTR_FUN_000805a8Count_000805d8": "servoCountPtr",
                "PTR_SystemCoreClock_000805dc": "systemCoreClockPtr",
                "DAT_000805e0": "SERVO_CLOCK_DIVIDER",
                "PTR_servos_000805e4": "servosPtr",
                "FUN_000805a8": "initializeServo_000805a8"
            },
            "code": "initializeServo_000805a8* __thiscall initializeServo_000805a8(initializeServo_000805a8* servo)\n{\n  byte servoCount = *PTR_initializeServo_000805a8Count_000805d8;\n  if (servoCount < 0x3c) {\n    *PTR_initializeServo_000805a8Count_000805d8 = servoCount + 1;\n    uint* PTR_SystemCoreClock_000805dc = PTR_SystemCoreClock_000805dc;\n    servo->servoIndex = servoCount;\n    *(uint*)(PTR_servos_000805e4 + (uint)servoCount * 8 + 4) = (*(uint*)PTR_SystemCoreClock_000805dc / DAT_000805e0) * 0x5dc >> 5;\n    return servo;\n  }\n  servo->servoIndex = 0xff;\n  return servo;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "initializeServo_000805a8"
        },
        "FUN_00080184": {
            "renaming": {
                "FUN_00080184": "initialize_servos_and_strings_00080184",
                "this": "string_this",
                "cstr": "string_literal",
                "uVar1": "exit_function",
                "puVar2": "dso_handle_ptr",
                "this_00": "value_this",
                "in_r3": "in_r3"
            },
            "code": "void initialize_servos_and_strings_00080184(void)\n{\n  undefined *string_this = PTR_command_000801c8;\n  undefined *string_literal = PTR_DAT_000801cc;\n  Servo steering_servo = Servo((Servo *)PTR_steering_000801c4);\n  Servo throttle_servo = Servo((Servo *)PTR_throttle_000801d0);\n  undefined *dso_handle_ptr = PTR___dso_handle_000801d8;\n  undefined4 exit_function = DAT_000801d4;\n  undefined *value_this = PTR_value_000801dc;\n  String command_string = String((String *)string_this, string_literal);\n  __aeabi_atexit(string_this, exit_function, dso_handle_ptr);\n  String value_string = String((String *)value_this, string_literal);\n  __aeabi_atexit(value_this, exit_function, dso_handle_ptr, in_r3);\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "Servo",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080184",
            "calling": [],
            "imported": false,
            "current_name": "initialize_servos_and_strings_00080184"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "setup",
                "main",
                "loop"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "__thiscall Print::FUN_000810cc": "printCharacter",
                "this": "this",
                "c": "character",
                "sVar1": "bytesWritten",
                "_vptr_Print": "_vptr_Print",
                "FUN_000810cc": "printCharacter_000810cc"
            },
            "code": "size_t __thiscall Print::printCharacter_000810cc(Print *this, char character) {\n  size_t bytesWritten;\n  bytesWritten = (**this->_vptr_Print)(this, (int)character);\n  return bytesWritten;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printCharacter_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "readByteFromRXBuffer_00081276",
                "this": "uartObject",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numberOfBytes",
                "pRVar2": "rxBuffer",
                "bVar1": "byteToRead"
            },
            "code": "ssize_t __thiscall UARTClass::readByteFromRXBuffer_00081276(UARTClass *this,int fileDescriptor,void *buffer,size_t numberOfBytes){\n  byte byteToRead;\n  RingBuffer *rxBuffer;\n  \n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteToRead = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteToRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readByteFromRXBuffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "check_isatty_000844bc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_isatty_000844bc(int *error_code, int file_descriptor) {\\n\\\n        undefined *error_ptr = PTR_errno_000844dc;\\n\\\n        *(undefined4 *)PTR_errno_000844dc = 0;\\n\\\n        int is_terminal = _isatty(file_descriptor);\\n\\\n        if (is_terminal == -1 && (*(int *)error_ptr != 0)) {\\n\\\n            *error_code = *(int *)error_ptr;\\n\\\n            return;\\n\\\n        }\\n\\\n        return;\\n\\\n    }",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_isatty_000844bc"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "array_start",
                "param_2": "index",
                "param_3": "value",
                "*(undefined4 *)(param_1 + param_2 * 0x40 + 0x14)": "*address_of_index",
                "undefined4": "int",
                "offset": "offset",
                "address_of_index": "address_of_index"
            },
            "code": "void set_value_at_index_00080b90(int array_start, int index, int value) {\n    int offset = index * 0x40 + 0x14;\n    int* address_of_index = (int*)(array_start + offset);\n    *address_of_index = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_input_0008356c",
                "param_1": "output_array",
                "param_2": "input_array",
                "uVar1": "is_odd",
                "uVar3": "value_as_uint32",
                "uVar4": "value",
                "iVar2": "temp",
                "PTR__impure_ptr_0008362c": "PTR__impure_ptr",
                "_free_r": "free_memory",
                "__smakebuf_r": "make_buffer",
                "__sinit": "initialize_stream"
            },
            "code": "int process_input_0008356c(uint16_t *input_array, int *output_array){\n    uint16_t value = input_array[3];\n    uint32_t value_as_uint32 = (uint32_t)value;\n    int result = 0;\n    int temp = output_array[4];\n    if ((int)(value_as_uint32 << 0x1c) < 0) {\n        result = output_array[4];\n    }\n    else {\n        if (-1 < (int)(value_as_uint32 << 0x1b)) {\n        *output_array = 9;\n        input_array[3] = value | 0x40;\n        return -1;\n        }\n        if ((int)(value_as_uint32 << 0x1d) < 0) {\n        if ((int *)output_array[12] != (int *)0x0) {\n            if ((int *)output_array[12] != output_array + 0x10) {\n            _free_r(&result);\n            value = input_array[3];\n            }\n            output_array[12] = 0;\n        }\n        temp = output_array[4];\n        value = value & 0xffdb;\n        *output_array = temp;\n        output_array[1] = 0;\n        }\n    input_array[3] = value | 8;\n    value_as_uint32 = (uint32_t)(value | 8);\n    }\n    if ((temp == 0) && ((value_as_uint32 & 0x280) != 0x200)) {\n        __smakebuf_r(&result,output_array);\n        value_as_uint32 = (uint32_t)input_array[3];\n        temp = output_array[4];\n    }\n    uint32_t uVar1 = value_as_uint32 & 1;\n    if (uVar1 == 0) {\n        if (-1 < (int)(value_as_uint32 << 0x1e)) {\n        uVar1 = output_array[5];\n        }\n        output_array[2] = uVar1;\n    }\n    else {\n        output_array[6] = -output_array[5];\n        output_array[2] = 0;\n    }\n    if ((temp == 0) && ((int)((uint32_t)input_array[3] << 0x18) < 0)) {\n        input_array[3] = input_array[3] | 0x40;\n        return -1;\n    }\n    return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "process_input_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_clock_00080b98",
                "*puVar1": "dat_00080c04",
                "iVar2": "dat_00080c08",
                "system_core_clock_address": "PTR_SystemCoreClock_00080c1c",
                "system_core_clock_value": "DAT_00080c18",
                "dat_00080c10": "DAT_00080c10",
                "dat_00080c0c": "DAT_00080c0c",
                "dat_00080c14": "DAT_00080c14"
            },
            "code": "void initialize_clock_00080b98(void)\n{\n  uint32_t *system_core_clock_address = PTR_SystemCoreClock_00080c1c;\n  uint32_t *dat_00080c04 = DAT_00080c04;\n  uint32_t *dat_00080c08 = DAT_00080c08;\n  uint32_t system_core_clock_value = DAT_00080c18;\n  uint32_t dat_00080c10 = DAT_00080c10;\n  uint32_t dat_00080c0c = DAT_00080c0c;\n  uint32_t dat_00080c14 = DAT_00080c14;\n\n  *dat_00080c04 = 0x400;\n  dat_00080c04[0x80] = 0x400;\n\n  if (-1 < *(int *)(dat_00080c08 + 0x20) << 7) {\n    *(uint32_t *)(dat_00080c08 + 0x20) = dat_00080c10;\n    while (-1 < *(int *)(dat_00080c08 + 0x68) << 0x1f);\n  }\n\n  *(uint32_t *)(dat_00080c08 + 0x20) = dat_00080c0c;\n  while (-1 < *(int *)(dat_00080c08 + 0x68) << 0xf);\n\n  *(uint32_t *)(dat_00080c08 + 0x30) = *(uint32_t *)(dat_00080c08 + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(dat_00080c08 + 0x68) << 0x1c);\n\n  *(uint32_t *)(dat_00080c08 + 0x28) = dat_00080c14;\n  while (-1 < *(int *)(dat_00080c08 + 0x68) << 0x1e);\n\n  *(uint32_t *)(dat_00080c08 + 0x30) = 0x11;\n  while (-1 < *(int *)(dat_00080c08 + 0x68) << 0x1c);\n\n  *(uint32_t *)(dat_00080c08 + 0x30) = 0x12;\n  while (-1 < *(int *)(dat_00080c08 + 0x68) << 0x1c);\n\n  *system_core_clock_address = system_core_clock_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_clock_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "printString_000810e8",
                "c": "string",
                "sVar1": "bytes_written",
                "sVar2": "total_bytes_written"
            },
            "code": "size_t __thiscall Print::printString_000810e8(Print *this,char *string)\n{\n  size_t bytes_written;\n  size_t total_bytes_written;\n  bytes_written = write(this,string);\n  total_bytes_written = printString_000810e8(this);\n  return total_bytes_written + bytes_written;\n}",
            "called": [
                "write",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printString_000810e8"
        },
        "FUN_000843b8": {
            "renaming": {
                "FUN_000843b8": "write_to_file_000843b8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000843b8(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n    undefined *error_ptr;\n    int write_result;\n\n    error_ptr = PTR_errno_000843dc;\n    *(undefined4 *)PTR_errno_000843dc = 0;\n    write_result = _write(file_descriptor, buffer, buffer_size);\n    if ((write_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843b8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000843b8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_0008073c": {
            "renaming": {
                "FUN_0008073c": "handle_UART_irq_0008073c",
                "PTR_Serial_00080744": "PTR_Serial"
            },
            "code": "void handle_UART_irq_0008073c(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial_00080744);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_irq_0008073c"
        },
        "FUN_00081480": {
            "renaming": {
                "String::FUN_00081480": "resetString",
                "this": "str",
                "buffer": "strBuffer",
                "len": "strLength",
                "capacity": "strCapacity",
                "FUN_00081480": "resetString_00081480"
            },
            "code": "void resetString_00081480(String *str){\n\tif (str->buffer != NULL) {\n\t\tfree(str->buffer);\n\t}\n\tstr->buffer = NULL;\n\tstr->len = 0;\n\tstr->capacity = 0;\n\treturn;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "resetString_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "allocate_memory_00081f9c",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "new_ptr"
            },
            "code": "void * allocate_memory_00081f9c(void *ptr, size_t size) {\n  void *new_ptr;\n  new_ptr = (void *)_allocate_memory_00081f9c_r(*(undefined4 *)PTR__impure_ptr_00081fa8, ptr, size);\n  return new_ptr;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081f9c"
        },
        "FUN_00081244": {
            "renaming": {
                "__thiscall UARTClass::FUN_00081244": "isUARTClassActive",
                "*this": "uart_class_ptr",
                "FUN_00081244": "isUARTClassActive_00081244"
            },
            "code": "bool isUARTClassActive_00081244(UARTClass *uart_class_ptr) {\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081244",
            "calling": [],
            "imported": false,
            "current_name": "isUARTClassActive_00081244"
        },
        "FUN_000836fc": {
            "renaming": {
                "FUN_000836fc": "register_exit_process_000836fc",
                "__func": "function_name",
                "iVar1": "exit_proc"
            },
            "code": "int register_exit_process_000836fc(__func *function_name){\n                    int exit_proc;\n                    exit_proc = __register_exitproc(0,function_name,0,0);\n                    return exit_proc;\n                  }",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836fc",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_process_000836fc"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculateBufferLength_00081248",
                "this": "UARTInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "bufferLength": "bufferLength"
            },
            "code": "int __thiscall UARTClass::calculateBufferLength_00081248(UARTClass *this)\n{\n    int headIndex = this->_rx_buffer->_iHead;\n    int tailIndex = this->_rx_buffer->_iTail;\n    int bufferLength = headIndex - tailIndex & 0x7f;\n    return bufferLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "imported": false,
            "current_name": "calculateBufferLength_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "execute_function_00081800",
                "__ptr": "__function_pointer",
                "_FUN_00081800_r": "_execute_function_r"
            },
            "code": "void execute_function_00081800(void *__function_pointer) {\n  _execute_function_00081800_r(*(undefined4 *)PTR__impure_ptr_0008180c,__function_pointer);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "~String",
                "invalidate",
                "move"
            ],
            "imported": false,
            "current_name": "execute_function_00081800"
        },
        "FUN_0008418c": {
            "renaming": {
                "FUN_0008418c": "process_signal_0008418c",
                "param_1": "signal_status",
                "param_2": "signal_num",
                "param_3": "pid",
                "param_4": "signal_data",
                "_Var1": "process_id",
                "uVar2": "result",
                "iVar3": "signal_handler",
                "pcVar4": "signal_handler"
            },
            "code": "int process_signal_0008418c(int *signal_status, uint signal_num, int pid, int signal_data){\n  __pid_t process_id;\n  int result;\n  code *signal_handler;\n  \n  if (signal_num > 31) {\n    *signal_status = 22;\n    return -1;\n  }\n  signal_handler = *(code **)(signal_status[183] + signal_num * 4);\n  if ((signal_handler == NULL) || (signal_handler == (code *)0x0)) {\n    process_id = _getpid_r();\n    result = _kill_r(signal_status, process_id, signal_num, signal_data);\n    return result;\n  }\n  if (signal_handler == (code *)0x1) {\n    return 0;\n  }\n  if (signal_handler != (code *)0xffffffff) {\n    *(int *)(signal_status[183] + signal_num * 4) = 0;\n    (*signal_handler)(signal_num);\n    return 0;\n  }\n  *signal_status = 22;\n  return 1;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008418c",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_signal_0008418c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_00080b64": {
            "renaming": {
                "FUN_00080b64": "set_channel_value_00080b64",
                "param_1": "channel_value",
                "param_2": "num_channels",
                "uVar1": "channel_data",
                "PTR_s____source_tc_c_00080b80": "source_pointer",
                "PTR_s_FUN_00080b64_00080b84": "function_pointer",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "channel_pointer"
            },
            "code": "void set_channel_value_00080b64(uint32_t channel_value, uint32_t num_channels) {\n  uint64_t channel_data = ((uint64_t)num_channels << 32) | channel_value;\n  if (num_channels > 2) {\n    channel_data = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80,0x5c,PTR_s_set_channel_value_00080b64_00080b84,PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88);\n  }\n  uint32_t* channel_data_ptr = (uint32_t*)((int)channel_data + (int)(channel_data >> 0x20) * 0x40);\n  *channel_data_ptr = 5;\n  return;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b64",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_channel_value_00080b64"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "call_afl_0008014c",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "PTR_noHyperCall_00080160",
                "aflCall": "aflCall"
            },
            "code": "uint32_t call_afl_0008014c(int ticks)\\n\\\n{\\n\\\n  uint32_t result = 0;\\n\\\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\\n\\\n    result = aflCall(1, ticks, 0);\\n\\\n  }\\n\\\n  return result;\\n\\\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_0008014c"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "getCharIndex_0008159e",
                "this": "this",
                "c": "c",
                "buf": "buffer",
                "sStack_a": "stackVar",
                "uVar1": "result"
            },
            "code": "uchar String::getCharIndex_0008159e(String *this, char c) {\n  char buffer[2];\n  short stackVar;\n  uchar result = getCharIndex_0008159e(this, buffer, 1);\n  return result;\n}",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "getCharIndex_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "initializePin_000806a0",
                "this": "servo",
                "pin": "pin",
                "uVar1": "result"
            },
            "code": "uint8_t __thiscall Servo::initializePin_000806a0(Servo *servo, int pin)\n{\n  uint8_t result = initializePin_000806a0(servo, pin, 0x220, 0x960);\n  return result;\n}",
            "called": [
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializePin_000806a0"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "addByteToBuffer_000811ca",
                "this": "ringBufferInstance",
                "c": "byteToAdd",
                "_iHead": "headIndex",
                "uVar1": "nextHeadIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "bufferArray"
            },
            "code": "void __thiscall RingBuffer::addByteToBuffer_000811ca(RingBuffer *ringBufferInstance, uint8_t byteToAdd) {\n    uint nextHeadIndex;\n    nextHeadIndex = (ringBufferInstance->_iHead + 1U) & 0x7f;\n    if (nextHeadIndex != ringBufferInstance->_iTail) {\n        ringBufferInstance->_aucBuffer[ringBufferInstance->_iHead] = byteToAdd;\n        ringBufferInstance->_iHead = nextHeadIndex;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "addByteToBuffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "setThrottleAndSteeringTo90Degrees_00080164",
                "PTR_throttle_0008017c": "throttleServo",
                "PTR_steering_00080180": "steeringServo"
            },
            "code": "void setThrottleAndSteeringTo90Degrees_00080164(void)\n{\n  Servo::write(PTR_throttle_0008017c, 90);\n  Servo::write(PTR_steering_00080180, 90);\n  return;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "setThrottleAndSteeringTo90Degrees_00080164"
        },
        "FUN_00081496": {
            "renaming": {
                "String::FUN_00081496": "resizeString",
                "this": "str",
                "maxStrLen": "maxStrLen",
                "pcVar1": "newBuffer",
                "uchar": "unsigned char",
                "FUN_00081496": "resizeString_00081496"
            },
            "code": "unsigned char resizeString_00081496(String* str, uint32_t maxStrLen) {\n\tchar *newBuffer = (char*)realloc(str->buffer, maxStrLen + 1);\n\tif (newBuffer != NULL) {\n\t\tstr->buffer = newBuffer;\n\t\tstr->capacity = maxStrLen;\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resizeString_00081496"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "setPinValue_00081014",
                "ulPin": "pin",
                "ulVal": "value",
                "puVar1": "pinDescPtr",
                "puVar2": "pinStatusPtr",
                "iVar3": "outputDataStatus",
                "uVar4": "pinDescVal1",
                "uVar5": "pinDescVal2",
                "uVar6": "value"
            },
            "code": "void setPinValue_00081014(uint32_t pin, uint32_t value) {\n  uint32_t *pinStatusPtr = PTR_g_pinStatus_00081080;\n  uint32_t *pinDescPtr = PTR_g_APinDescription_0008107c;\n  uint32_t pinDescOffset = pin * 0x1c + 0xc;\n\n  if (pinDescPtr[pinDescOffset] != \"\\0\") {\n    uint32_t pinStatus = pinStatusPtr[pin];\n    if ((pinStatus & 0xf) == 5) {\n      pinMode(pin, OUTPUT);\n    }\n    pinStatusPtr[pin] = (pinStatus & 0xf) | (value << 4);\n    uint32_t pinDescOffset1 = pin * 0x1c;\n    uint32_t pinDescOffset2 = pinDescOffset1 + 4;\n    uint32_t pinDescVal1 = *(uint32_t *)(pinDescPtr + pinDescOffset1);\n    uint32_t pinDescVal2 = *(uint32_t *)(pinDescPtr + pinDescOffset2);\n    int outputDataStatus = PIO_GetOutputDataStatus(pinDescVal1, pinDescVal2);\n    if (outputDataStatus == 0) {\n      PIO_PullUp(pinDescVal1, pinDescVal2, value);\n      return;\n    }\n    PIO_SetOutput(pinDescVal1, pinDescVal2, value, 0, 1, value);\n  }\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_SetOutput",
                "PIO_GetOutputDataStatus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "Servo_Handler",
                "loop",
                "init"
            ],
            "imported": false,
            "current_name": "setPinValue_00081014"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "do_nothing_000845bc"
            },
            "code": "\nvoid do_nothing_000845bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000845bc"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_00083da2;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_00083da2;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_00083da2;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_00083da2;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_00083da2;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_00083da2:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_fflush_r",
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "memcpy",
                "__swsetup_r",
                "memchr",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00084404": {
            "renaming": {
                "FUN_00084404": "flush_and_free_00084404",
                "param_1": "file",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "file_error",
                "FILE_FLAGS_OFFSET": "0x38",
                "STREAM_FLAGS_OFFSET": "0xC",
                "ERROR_HANDLER_OFFSET": "0x2C",
                "ERROR_HANDLER_ARG_OFFSET": "0x1C",
                "BUFFER_OFFSET": "0x10",
                "BACKUP_BUFFER_OFFSET": "0x30",
                "BACKUP_BUFFER_SIZE": "0x40",
                "LOCK_OFFSET": "0x44",
                "__sinit": "initialize_stream",
                "_fflush_r": "fflush",
                "_free_r": "free",
                "__sfp_lock_acquire": "acquire_lock",
                "__sfp_lock_release": "release_lock",
                "code": "function_pointer"
            },
            "code": "int flush_and_free_00084404(int file, int stream)\n{\n    int result = 0;\n    int file_error = 0;\n\n    if (stream != 0)\n    {\n        if ((file != 0) && (*(int *)(file + FILE_FLAGS_OFFSET) == 0))\n        {\n            initialize_stream();\n        }\n\n        if (*(short *)(stream + STREAM_FLAGS_OFFSET) != 0)\n        {\n            result = fflush(file, stream);\n            if ((*(function_pointer *)(stream + ERROR_HANDLER_OFFSET) != (function_pointer)0x0) && (file_error = (**(function_pointer *)(stream + ERROR_HANDLER_OFFSET))(file, *(int *)(stream + ERROR_HANDLER_ARG_OFFSET)), file_error < 0))\n            {\n                result = -1;\n            }\n\n            if ((int)((uint)*(ushort *)(stream + STREAM_FLAGS_OFFSET) << 0x18) < 0)\n            {\n                free(file, *(int *)(stream + BUFFER_OFFSET));\n            }\n\n            if (*(int *)(stream + BACKUP_BUFFER_OFFSET) != 0)\n            {\n                if (*(int *)(stream + BACKUP_BUFFER_OFFSET) != stream + BACKUP_BUFFER_SIZE)\n                {\n                    free(file);\n                }\n\n                *(int *)(stream + BACKUP_BUFFER_OFFSET) = 0;\n            }\n\n            if (*(int *)(stream + LOCK_OFFSET) != 0)\n            {\n                free(file);\n                *(int *)(stream + LOCK_OFFSET) = 0;\n            }\n\n            acquire_lock();\n            *(ushort *)(stream + STREAM_FLAGS_OFFSET) = 0;\n            release_lock();\n        }\n    }\n\n    return result;\n}",
            "called": [
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084404",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_00084404"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00081b3c;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00081b3c + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00081b3c + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + 0x10);\n  puVar12 = PTR___malloc_av__00081b3c + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00081b3c + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00081b3c + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00081d44 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00081d44 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00081c5e;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00081c5e:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00081b44;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_00081b1a;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00081b44 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00081b50;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00081b50 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00081b50 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00081b44 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00081b50;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00081b04;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_00081b48 < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_00081b48 = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00081b4c < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00081b4c = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "_realloc_r",
                "__smakebuf_r",
                "malloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "get_etext_address_if_completed_flag_not_set_000800f4",
                "param_1": "etext_address",
                "PTR_completed_7857_0008010c": "completed_flag_ptr",
                "DAT_00080110": "unused_variable",
                "PTR__etext_00080114": "etext_address"
            },
            "code": "char *get_etext_address_if_completed_flag_not_set_000800f4(char *PTR__etext_00080114, char *PTR_completed_7857_0008010c){\n    if (*PTR_completed_7857_0008010c == \"\\0\") {\n        if (*PTR__etext_00080114 != 0) {\n            PTR__etext_00080114 = PTR__etext_00080114;\n        }\n        *PTR_completed_7857_0008010c = 1;\n    }\n    return PTR__etext_00080114;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "get_etext_address_if_completed_flag_not_set_000800f4"
        },
        "FUN_00080aec": {
            "renaming": {
                "FUN_00080aec": "check_bit_00080aec",
                "param_1": "bit_index",
                "uVar1": "bit_mask",
                "uVar2": "data_value",
                "DAT_00080b28": "data_ptr"
            },
            "code": "int check_bit_00080aec(uint bit_index)\n{\n    uint bit_mask;\n    uint* DAT_00080b28;\n    if (bit_index < 45)\n    {\n        if (bit_index < 32)\n        {\n            bit_mask = 1 << bit_index;\n            DAT_00080b28 = (uint*)DAT_00080b28 + 0x18;\n            if ((*DAT_00080b28 & bit_mask) == bit_mask)\n            {\n                *(DAT_00080b28 + 1) = bit_mask;\n            }\n        }\n        else\n        {\n            bit_mask = 1 << (bit_index - 32);\n            DAT_00080b28 = (uint*)DAT_00080b28 + 0x108;\n            if ((*DAT_00080b28 & bit_mask) == bit_mask)\n            {\n                *(DAT_00080b28 + 1) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aec",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_00080aec"
        },
        "FUN_0008136c": {
            "renaming": {
                "FUN_0008136c": "initializeUART_0008136c",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "modeReg": "modeReg",
                "_dwId": "id",
                "_pUart": "uartInstance",
                "PTR_SystemCoreClock_000813d4": "systemCoreClockAddress",
                "UART_PTCR": "UART_PTCR",
                "UART_CR": "UART_CR",
                "UART_MR": "UART_MR",
                "UART_BRGR": "UART_BRGR",
                "UART_IDR": "UART_IDR",
                "UART_IER": "UART_IER",
                "_dwIrq": "irq",
                "DAT_000813d8": "interruptDisableRegisterAddress",
                "RingBuffer": "RingBuffer",
                "_rx_buffer": "rxBuffer",
                "_tx_buffer": "txBuffer",
                "_iTail": "tail",
                "_iHead": "head"
            },
            "code": "void __thiscall initializeUART_0008136c(UARTClass *uart, uint32_t baudRate, uint32_t modeReg) {\n  pmc_enable_periph_clk(uart->id);\n  Uart *uartInstance = uart->uartInstance;\n  uartInstance->UART_PTCR = 0x202;\n  uartInstance->UART_CR = 0xac;\n  uint32_t systemClock = *(uint *)PTR_SystemCoreClock_000813d4 / baudRate >> 4;\n  uartInstance->UART_MR = modeReg;\n  uartInstance->UART_BRGR = systemClock;\n  uartInstance->UART_IDR = 0xffffffff;\n  uartInstance->UART_IER = 0x61;\n  uint32_t interruptBit = 1 << (uart->irq & 0x1f);\n  uint32_t *interruptDisableRegister = DAT_000813d8 + (uart->irq >> 5) * 4;\n  *interruptDisableRegister = interruptBit;\n  RingBuffer *rxBuffer = uart->rxBuffer;\n  rxBuffer->tail = 0;\n  rxBuffer->head = 0;\n  RingBuffer *txBuffer = uart->txBuffer;\n  txBuffer->tail = 0;\n  txBuffer->head = 0;\n  uartInstance->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008136c",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initializeUART_0008136c"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "print_string_000810c4",
                "this": "print_object",
                "str": "string_to_print",
                "sVar1": "bytes_written"
            },
            "code": "size_t __thiscall Print::print_string_000810c4(Print *this, char *string_to_print)\n{\n  size_t bytes_written;\n  bytes_written = write(this, string_to_print);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_string_000810c4"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_value_at_index_00080c98",
                "param_1": "result",
                "param_2": "total_elements",
                "param_3": "element_size",
                "param_4": "target_size",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "local_58": "local_values",
                "PTR_DAT_00080d28": "PTR_DAT",
                "DAT_00080d2c": "DAT"
            },
            "code": "uint32_t find_value_at_index_00080c98(uint32_t *result, uint32_t total_elements, int element_size, int target_size)\n{\n  uint32_t quotient;\n  uint32_t remainder;\n  uint32_t local_values[16];\n  \n  local_values[0] = *(uint32_t *)PTR_DAT_00080d2c_00080d28_00080d28;\n  local_values[1] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 4);\n  local_values[2] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 8);\n  local_values[3] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0xc);\n  local_values[4] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x10);\n  local_values[5] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x14);\n  local_values[6] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x18);\n  local_values[7] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x1c);\n  local_values[8] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x20);\n  local_values[9] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x24);\n  local_values[10] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x28);\n  local_values[11] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x2c);\n  local_values[12] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x30);\n  local_values[13] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x34);\n  local_values[14] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x38);\n  local_values[15] = *(uint32_t *)(PTR_DAT_00080d2c_00080d28_00080d28 + 0x3c);\n  \n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  \n  quotient = total_elements / (uint32_t)(element_size * 2);\n  if (total_elements == element_size * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  \n  remainder = 0;\n  for (int i = 0; i < 16; i++) {\n    uint32_t local_value = local_values[i];\n    uint32_t divisor = (uint32_t)(((uint64_t)total_elements / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c_00080d2c);\n    uint32_t product = element_size * divisor;\n    \n    if (target_size * divisor <= local_value) {\n      result[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    \n    remainder += local_value;\n    if (remainder >= product) {\n      remainder -= product;\n      quotient--;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080c98"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "waitForDataToBeAvailable_000811e8",
                "uVar1": "currentTime",
                "iVar2": "receivedData"
            },
            "code": "int __thiscall Stream::waitForDataToBeAvailable_000811e8(Stream *this)\n{\n  uint32_t currentTime;\n  int receivedData;\n  currentTime = millis();\n  this->_startMillis = currentTime;\n  do {\n    receivedData = (*(this->super_Print)._vptr_Print[3])();\n    if (receivedData >= 0) {\n      return receivedData;\n    }\n    currentTime = millis();\n  } while (currentTime - this->_startMillis < this->_timeout);\n  return -1;\n}",
            "called": [
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "waitForDataToBeAvailable_000811e8"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "controlVehicle_00080250",
                "puVar2": "rxMode",
                "puVar3": "modePtr",
                "uVar4": "equalsResult",
                "uVar5": "pulseWidth",
                "lVar6": "mappedValue",
                "iVar7": "availableBytes",
                "__fd": "fd",
                "__in_chrg": "inCharge",
                "__in_chrg_00": "inCharge0",
                "__fd_00": "fd0",
                "pvVar8": "buffer",
                "sVar9": "bufferSize",
                "SStack_1c": "command"
            },
            "code": "void controlVehicle_00080250()\n{\n  uint32_t pulseWidth = pulseIn(4,1,20000);\n  uint32_t *rxMode = (uint32_t*)rxModePtr;\n  *rxMode = pulseWidth;\n  delay(10);\n  byte ledStatus = *ledStatusPtr;\n  *ledStatusPtr = (char)(ledStatus ^ 1);\n  digitalWrite(13, ledStatus ^ 1);\n  uint32_t mode = *modePtr;\n  if (*rxMode < 0x641) {\n    if (*rxMode - 0x385U < 299) {\n      if (mode != 0) {\n        straightAndStop();\n        Serial.println(\"Entered manual control mode.\");\n        *modePtr = 0;\n      }\n      delay(10);\n      uint32_t steerPulseWidth = pulseIn(3,1,20000);\n      long steerMapped = map(0,1000,2000,0x28,0x96);\n      uint32_t *rxSteer = (uint32_t*)rxSteerPtr;\n      *(long*)rxSteer = steerMapped;\n      void *buffer = (void*)0x7d0;\n      size_t bufferSize = 0x28;\n      long motorMapped = map(steerPulseWidth, 1000, 2000, 0x28, 0x96);\n      uint32_t *rxMotor = (uint32_t*)rxMotorPtr;\n      *(long*)rxMotor = motorMapped;\n      while (UARTClass::available(&Serial) > 0) {\n        UARTClass::read(&Serial, fd, buffer, bufferSize);\n        Serial.print(*(int*)rxSteer);\n        Serial.print(\",\");\n        Serial.println(*(int*)rxMotor);\n      }\n      Servo::write(&throttle, *(int*)rxMotor);\n      Servo::write(&steering, *(int*)rxSteer);\n    }\n    else {\n      if (mode == 0) {\n        straightAndStop();\n        Serial.println(\"Entered autonomous control mode.\");\n      }\n      size_t bufferSize = 1;\n      *modePtr = 1;\n      while (UARTClass::available(&Serial) > 0) {\n        String command = Serial.readStringUntil(',');\n        String value = Serial.readStringUntil('\\n');\n        UARTClass::read(&Serial, fd, buffer, bufferSize);\n        if (command.equals(\"steer\")) {\n          long steerValue = value.toInt();\n          Servo::write(&steering, steerValue);\n        }\n        else if (command.equals(\"motor\")) {\n          long motorValue = value.toInt();\n          Servo::write(&throttle, motorValue);\n        }\n      }\n    }\n  }\n  else {\n    straightAndStop();\n    Serial.println(\"Error: Pulse width too high.\");\n  }\n}\n",
            "called": [
                "map",
                "println",
                "pulseIn",
                "print",
                "print",
                "println",
                "delay",
                "~String",
                "toInt",
                "straightAndStop",
                "available",
                "write",
                "equals",
                "digitalWrite",
                "read",
                "readStringUntil",
                "operator="
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "controlVehicle_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_value_at_offset_00080d6a",
                "param_1": "base_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void set_value_at_offset_00080d6a(int base_address, int offset, int value) {\n    *(int *)(base_address + offset) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initializeUART_000813dc",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "init": "initUART",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void __thiscall initializeUART_000813dc(UARTClass *uart, uint32_t baudRate)\n{\n  init(uart, baudRate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeUART_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_param_values_00080a0a",
                "param_1": "param_values",
                "param_2": "new_value",
                "param_3": "has_param3",
                "param_4": "has_param4",
                "param_5": "has_param5",
                "0x11": "17",
                "0x18": "24",
                "0x19": "25",
                "0x15": "21",
                "0x14": "20",
                "0xd": "13",
                "0xc": "12"
            },
            "code": "void update_param_values_00080a0a(int *param_values, int new_value, int has_param5, int has_param4, int has_param3) {\n    param_values[17] = new_value;\n    if (has_param5 == 0) {\n        param_values[24] = new_value;\n    }\n    else {\n        param_values[25] = new_value;\n    }\n    if (has_param4 == 0) {\n        param_values[21] = new_value;\n    }\n    else {\n        param_values[20] = new_value;\n    }\n    if (has_param3 == 0) {\n        param_values[13] = new_value;\n    }\n    else {\n        param_values[12] = new_value;\n    }\n    param_values[4] = new_value;\n    *param_values = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_param_values_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "initialize_channel_info_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_data_size",
                "param_3": "channel_data",
                "uVar3": "channel_info",
                "iVar1": "channel_data_offset",
                "iVar2": "channel_info_address"
            },
            "code": "void initialize_channel_info_00080b2c(uint32_t channel_id, uint32_t channel_data_size, char* channel_data)\n{\n    uint64_t channel_info = ((uint64_t)channel_data_size << 32) | channel_id;\n    if(channel_data_size > 2)\n    {\n        channel_data = __func__;\n        channel_info = (*DAT_00080b60)(\"s____source.tc.c\", 0x40, __func__, \"s_dwChannel____sizeof__pTc__TC_CHA\");\n    }\n    uint32_t channel_data_offset = (uint32_t)(channel_info >> 32) * 0x40;\n    uint32_t channel_info_address = (uint32_t)channel_info + channel_data_offset;\n    *(uint32_t*)(channel_info_address) = 2;\n    *(uint32_t*)(channel_info_address + 0x28) = 0xffffffff;\n    *(char**)(channel_info_address + 4) = channel_data;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "initialize_channel_info_00080b2c"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure_address",
                "puVar5": "data_structure_1",
                "puVar6": "data_structure_2",
                "uVar1": "DEFAULT_VALUE_5",
                "uVar2": "DEFAULT_VALUE_4",
                "uVar3": "DEFAULT_VALUE_3",
                "uVar4": "DEFAULT_VALUE_2"
            },
            "code": "void initialize_data_structures_00083888(int data_structure_address)\n{\n    if (*(int *)(data_structure_address + 0x38) == 0) {\n        int* data_structure_1 = *(int **)(data_structure_address + 4);\n        int* data_structure_2 = *(int **)(data_structure_address + 8);\n        int* data_structure_3 = *(int **)(data_structure_address + 0xc);\n        \n        // Initialize data structure 1\n        *(int *)(data_structure_address + 0x3c) = DEFAULT_VALUE_1;\n        *(int *)(data_structure_address + 0x2e4) = 3;\n        *(int *)(data_structure_address + 0x2e8) = data_structure_address + 0x2ec;\n        *(int *)(data_structure_address + 0x2e0) = 0;\n        *(short *)(data_structure_1 + 3) = 4;\n        *data_structure_1 = 0;\n        data_structure_1[1] = 0;\n        data_structure_1[2] = 0;\n        data_structure_1[0x19] = 0;\n        *(short *)((int)data_structure_1 + 0xe) = 0;\n        data_structure_1[4] = 0;\n        data_structure_1[5] = 0;\n        data_structure_1[6] = 0;\n        memset(data_structure_1 + 0x17,0,8);\n        \n        // Initialize data structure 2\n        int DEFAULT_VALUE_2 = DAT_00083978;\n        int DEFAULT_VALUE_3 = DAT_00083974;\n        int DEFAULT_VALUE_4 = DAT_00083970;\n        int DEFAULT_VALUE_5 = DAT_0008396c;\n        data_structure_1[7] = data_structure_1;\n        data_structure_1[8] = DEFAULT_VALUE_5;\n        data_structure_1[9] = DEFAULT_VALUE_4;\n        data_structure_1[10] = DEFAULT_VALUE_3;\n        data_structure_1[0xb] = DEFAULT_VALUE_2;\n        *(short *)((int)data_structure_2 + 0xe) = 1;\n        *(short *)(data_structure_2 + 3) = 9;\n        *data_structure_2 = 0;\n        data_structure_2[1] = 0;\n        data_structure_2[2] = 0;\n        data_structure_2[0x19] = 0;\n        data_structure_2[4] = 0;\n        data_structure_2[5] = 0;\n        data_structure_2[6] = 0;\n        memset(data_structure_2 + 0x17,0,8);\n        \n        // Initialize data structure 3\n        data_structure_2[7] = data_structure_2;\n        data_structure_2[8] = DEFAULT_VALUE_5;\n        data_structure_2[9] = DEFAULT_VALUE_4;\n        data_structure_2[10] = DEFAULT_VALUE_3;\n        data_structure_2[0xb] = DEFAULT_VALUE_2;\n        *(short *)(data_structure_3 + 3) = 0x12;\n        *(short *)((int)data_structure_3 + 0xe) = 2;\n        *data_structure_3 = 0;\n        data_structure_3[1] = 0;\n        data_structure_3[2] = 0;\n        data_structure_3[0x19] = 0;\n        data_structure_3[4] = 0;\n        data_structure_3[5] = 0;\n        data_structure_3[6] = 0;\n        memset(data_structure_3 + 0x17,0,8);\n        \n        data_structure_3[7] = data_structure_3;\n        data_structure_3[8] = DEFAULT_VALUE_5;\n        data_structure_3[9] = DEFAULT_VALUE_4;\n        data_structure_3[10] = DEFAULT_VALUE_3;\n        data_structure_3[0xb] = DEFAULT_VALUE_2;\n        *(int *)(data_structure_address + 0x38) = 1;\n    }\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "__swsetup_r",
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "UART_00081348",
                "this": "UART_object",
                "Uart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "_pUart": "_uart",
                "_dwIrq": "_irq",
                "_rx_buffer": "_rx_buffer",
                "_dwId": "_id",
                "_tx_buffer": "_tx_buffer",
                "puVar1": "temp_ptr"
            },
            "code": " \n\n// Constructor function for a UART_00081348 object\n// Initializes UART_00081348 object with given parameters\n// Returns a pointer to the UART_00081348 object\n\nUART_00081348::UART_00081348(Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  this->field_0x4 = 0; // Initialize field_0x4 to 0\n  this->field_0x8 = 1000; // Initialize field_0x8 to 1000\n  this->_uart = uart; // Set the UART_00081348 object\n  this->_irq = irq; // Set the IRQ number\n  this->_rx_buffer = rx_buffer; // Set the receive buffer\n  this->_id = id; // Set the ID\n  this->_tx_buffer = tx_buffer; // Set the transmit buffer\n  return this; // Return a pointer to the UART_00081348 object\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "imported": false,
            "current_name": "UART_00081348"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initializeCar_000801e0",
                "PTR_Serial_00080244": "serialCommunication",
                "0xd": "LED_PIN",
                "6": "THROTTLE_PIN",
                "0x39": "REVERSE_PIN",
                "4": "BRAKE_PIN",
                "3": "FWD_PIN",
                "PTR_steering_00080248": "steeringServo",
                "PTR_throttle_0008024c": "throttleServo",
                "straightAndStop": "stopCar",
                "delay": "wait",
                "startForkserver": "startServer"
            },
            "code": "void initializeCar_000801e0() {\n  UARTClass::begin(PTR_Serial_00080244, 57600);\n  pinMode(LED_PIN, OUTPUT);\n  pinMode(BRAKE_PIN, OUTPUT);\n  pinMode(THROTTLE_PIN, INPUT);\n  pinMode(REVERSE_PIN, INPUT);\n  pinMode(FWD_PIN, INPUT);\n  Servo::attach(PTR_steering_00080248, STEERING_PIN);\n  Servo::attach(PTR_throttle_0008024c, THROTTLE_SERVO_PIN);\n  straightAndStop();\n  delay(1000);\n  startForkserver(0);\n  return;\n}\n",
            "called": [
                "pinMode",
                "straightAndStop",
                "startForkserver",
                "delay",
                "attach",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeCar_000801e0"
        },
        "FUN_00080d80": {
            "renaming": {
                "FUN_00080d80": "process_callbacks_on_pioA_00080d80",
                "uVar1": "bit_position",
                "uVar2": "bit_mask"
            },
            "code": "void process_callbacks_on_pioA_00080d80(void)\n{\n  uint32_t bit_mask;\n  uint32_t bit_position;\n  \n  bit_mask = *(uint32_t *)(DAT_00080db0 + 0x4c);\n  while(true)\n  {\n    bit_position = count_leading_zeroes(bit_mask);\n    if(bit_position > 0x1f)\n    {\n      break;\n    }\n    bit_position = 0x1f - bit_position;\n    if(*(code **)(PTR_callbacksPioA_00080db4 + bit_position * 4) != (code *)0x0)\n    {\n      (**(code **)(PTR_callbacksPioA_00080db4 + bit_position * 4))();\n    }\n    bit_mask = bit_mask & ~(1 << bit_position);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d80",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_on_pioA_00080d80"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0::FUN_000811b0": "initializeBuffer",
                "this": "buffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "FUN_000811b0": "initializeBuffer_000811b0"
            },
            "code": "initializeBuffer_000811b0 * __thiscall initializeBuffer_000811b0(initializeBuffer_000811b0 *buffer)\n{\n  memset(buffer,0,0x80);\n  buffer->headIndex = 0;\n  buffer->tailIndex = 0;\n  return buffer;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initializeBuffer_000811b0"
        },
        "FUN_0008387c": {
            "renaming": {
                "FUN_0008387c": "walk_function_0008387c",
                "param_1": "ptr",
                "DAT_00083884": "action"
            },
            "code": "void walk_function_0008387c(void* ptr, void (*DAT_00083884)(void*))\n{\n  _fwalk(ptr, DAT_00083884);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008387c",
            "calling": [],
            "imported": false,
            "current_name": "walk_function_0008387c"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "map_value_to_range_0008145c",
                "x": "value",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max",
                "uint": "uint32_t"
            },
            "code": "uint32_t map_value_to_range_0008145c(uint32_t value, uint32_t input_min, uint32_t input_max, uint32_t output_min, uint32_t output_max) {\n  uint32_t input_range = input_max - input_min;\n  uint32_t output_range = output_max - output_min;\n  uint32_t scaled_value = ((value - input_min) * output_range) / input_range;\n  return scaled_value + output_min;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "write",
                "loop"
            ],
            "imported": false,
            "current_name": "map_value_to_range_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_params_000809e4",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "is_bitmask_set"
            },
            "code": "void set_params_000809e4(uint32_t *param_array, uint32_t value, uint32_t bitmask) {\n  bool is_bitmask_set = (int)(bitmask << 0x1f) < 0;\n  param_array[17] = value;\n  if (is_bitmask_set) {\n    param_array[25] = value;\n  } else {\n    param_array[24] = value;\n  }\n  bool is_bit_set = (bitmask & 10) != 0;\n  if (is_bit_set) {\n    param_array[8] = value;\n  } else {\n    param_array[9] = value;\n  }\n  if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n    param_array[32] = value;\n  }\n  param_array[5] = value;\n  *param_array = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_params_000809e4"
        },
        "FUN_00081470": {
            "renaming": {
                "FUN_00081470": "do_nothing_00081470"
            },
            "code": "\nvoid __thiscall String::do_nothing_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081470",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_00081470"
        },
        "FUN_00081472": {
            "renaming": {
                "_String": "freeStringBuffer",
                "this": "string",
                "__in_chrg": "isOwner",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "buffer": "buffer",
                "FUN_00081472": "freeStringBuffer_00081472"
            },
            "code": "void * freeStringBuffer_00081472(String* string, int isOwner) {\n  free(string->buffer);\n  return string;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "freeStringBuffer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "raise_signal_and_exit_000836ec",
                "PTR_": "",
                "DAT_": "",
                "void": "",
                "raise": "raise",
                "_exit": "_exit",
                "6": "SIGABRT",
                "1": "EXIT_FAILURE"
            },
            "code": "void raise_signal_and_exit_000836ec(void)\n{\n  raise(SIGABRT);\n  _exit(EXIT_FAILURE);\n}",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "raise_signal_and_exit_000836ec"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "interrupt_and_return_00080148",
                "a0": "value_to_return",
                "a1": "interrupt_number",
                "a2": "interrupt_argument"
            },
            "code": "uint32_t interrupt_and_return_00080148(uint32_t value_to_return,uint32_t interrupt_number,int32_t interrupt_argument)\n{\n  software_interrupt(interrupt_number);\n  return value_to_return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_and_return_00080148"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "calculate_string_length_00082688",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "is_last_word"
            },
            "code": "size_t calculate_string_length_00082688(char* string) {\n  size_t length = 0;\n  uint32_t* word_ptr = (uint32_t*)((uint32_t)string & 0xfffffffc);\n  size_t offset = -((uint32_t)string & 3);\n  uint32_t word = *word_ptr;\n  if (((uint32_t)string & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while (word_ptr++, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset += 4;\n    word = *word_ptr;\n  }\n  bool is_last_word = (word & 0xff) == 0;\n  if (!is_last_word) {\n    offset++;\n    is_last_word = (word & 0xff00) == 0;\n  }\n  if (!is_last_word) {\n    offset++;\n    is_last_word = (word & 0xff0000) == 0;\n  }\n  if (!is_last_word) {\n    offset++;\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "write",
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "calculate_string_length_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "read_file_00084508",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "bytes_read"
            },
            "code": "void read_file_00084508(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int bytes_read;\n  error_ptr = PTR_errno_0008452c;\n  *(undefined4 *)PTR_errno_0008452c = 0;\n  bytes_read = _read(file_descriptor, buffer, buffer_size);\n  if ((bytes_read == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084508"
        },
        "FUN_0008429c": {
            "renaming": {
                "FUN_0008429c": "close_file_descriptor_0008429c",
                "param_1": "file_descriptor",
                "param_2": "file_descriptor_offset",
                "*PTR_00000010": "file_descriptor_value"
            },
            "code": "void close_file_descriptor_0008429c(void* file_descriptor, int file_descriptor_offset)\n{\n  int *PTR_00000010 = *(short*)(file_descriptor_offset + 0xe);\n  _close_r(file_descriptor, *PTR_00000010);\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008429c",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_0008429c"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_input_00080a30",
                "param_1": "input_buffer",
                "param_2": "input_type",
                "param_3": "input_value",
                "param_4": "input_flag",
                "bVar1": "is_negative"
            },
            "code": "int process_input_00080a30(int input_buffer, int input_type, int input_value, uint32_t input_flag) {\n    bool is_negative = (int)(input_flag << 0x1f) < 0;\n    switch(input_type) {\n        case 1:\n        case 2:\n            (*PTR_FUNC_00080a88)(input_buffer, input_type, input_value);\n            *(int *)(input_buffer + 0x44) = input_value;\n            if (is_negative) {\n                *(int *)(input_buffer + 100) = input_value;\n            }\n            if (!is_negative) {\n                *(int *)(input_buffer + 0x60) = input_value;\n            }\n            break;\n        case 3:\n            (*PTR_FUNC_00080a8c)(input_buffer, input_value, input_flag, PTR_FUNC_00080a8c, input_buffer);\n            break;\n        case 4:\n        case 5:\n            (*PTR_FUNC_00080a90)(input_buffer, input_value, input_type == 5, (input_flag << 0x1d) >> 0x1f, input_flag & 1, input_type, input_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_input_00080a30"
        },
        "FUN_000810a6": {
            "renaming": {
                "__thiscall Print::FUN_000810a6": "size_t Print::printString",
                "*str": "*string",
                "sVar1": "stringLength",
                "sVar2": "printedLength",
                "FUN_000810a6": "printString_000810a6"
            },
            "code": "size_t Print::printString_000810a6(Print *this,char *string)\n{\n  size_t stringLength;\n  size_t printedLength;\n  if (string != nullptr) {\n    stringLength = strlen(string);\n    printedLength = (*this->_vptr_Print[1])(stringLength,string,stringLength);\n    return printedLength;\n  }\n  return (size_t)string;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "print",
                "println",
                "println",
                "printNumber"
            ],
            "imported": false,
            "current_name": "printString_000810a6"
        }
    },
    "used_tokens": 137793,
    "layers": [
        [
            "FUN_000809b4",
            "FUN_00080e6a",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00083984",
            "FUN_00080598",
            "FUN_00080aa8",
            "FUN_00080118",
            "FUN_00083a74",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00083630",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080d70",
            "FUN_000840f8",
            "FUN_000813e4",
            "FUN_00081d48",
            "FUN_00083fbc",
            "FUN_00084494",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_00080578",
            "FUN_0008400c",
            "FUN_00080e60",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_00080e62",
            "FUN_0008044c",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_00080e66",
            "FUN_000826e8",
            "FUN_00080df0",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080588",
            "FUN_00080d3e",
            "FUN_000841f4",
            "FUN_000812a0",
            "FUN_0008130c",
            "FUN_0008142e",
            "FUN_00080d58",
            "FUN_00081084",
            "FUN_00080558",
            "FUN_00083708",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084244",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00080568",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_00080d30",
            "FUN_00080eec",
            "FUN_000816c8",
            "FUN_000810fc",
            "FUN_00080ec2",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_000843e0",
            "FUN_00080eba",
            "FUN_0008173c",
            "FUN_00081190",
            "FUN_000805e8",
            "FUN_00080ebe",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00080e28",
            "FUN_00084220",
            "FUN_00080db8",
            "FUN_0008421c",
            "FUN_0008089c",
            "FUN_000816e4",
            "FUN_00080750",
            "FUN_00080ea4",
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000842a4",
            "FUN_000839b4",
            "FUN_00080eb0",
            "FUN_00081734",
            "FUN_00080768",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_00081f00",
            "FUN_0008075c",
            "FUN_00080eaa",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000806ac",
            "FUN_20070000",
            "FUN_000834f0",
            "FUN_0008125a",
            "FUN_000810d8",
            "FUN_00080f04",
            "FUN_000805a8",
            "FUN_00080184",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000843b8",
            "FUN_0008073c",
            "FUN_00081480",
            "FUN_00081244",
            "FUN_000836fc",
            "FUN_00081248",
            "FUN_0008418c",
            "FUN_0008014c",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00081496",
            "FUN_00081014",
            "FUN_00084404",
            "FUN_000800f4",
            "FUN_00080aec",
            "FUN_0008136c",
            "FUN_000810c4",
            "FUN_00080c98",
            "FUN_000811e8",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_000801e0",
            "FUN_00080d80",
            "FUN_0008387c",
            "FUN_0008145c",
            "FUN_000809e4",
            "FUN_000836ec",
            "FUN_00080148",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_0008429c",
            "FUN_00080a30",
            "FUN_000810a6"
        ],
        [
            "FUN_00081560",
            "FUN_000814f6",
            "FUN_000841e4",
            "FUN_000827fc",
            "FUN_00081438",
            "FUN_00084484",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_000817f0",
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_00082814",
            "FUN_00081176",
            "FUN_00082824",
            "FUN_0008113a",
            "FUN_000810e8",
            "FUN_00081f9c",
            "FUN_00081800",
            "FUN_00080b64",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_000811b0",
            "FUN_00081472"
        ]
    ],
    "locked_functions": []
}