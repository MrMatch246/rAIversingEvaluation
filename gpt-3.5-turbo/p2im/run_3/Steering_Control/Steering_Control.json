{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_if_not_set_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlagIfNotSet_000800f4(undefined4 inputParameter)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputParameter;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_not_set_000800f4",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "interpolate_data_00080164",
            "code": "\nvoid interpolate_data_00080164(undefined4 arg_1,undefined4 arg_2,undefined4 arg_3,undefined4 arg_4)\n\n{\n  interpolate_values_000806f8(&DAT_200708e8,0x5a);\n  interpolate_values_000806f8(&DAT_200708d4,0x5a,arg_3,arg_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "interpolate_data_00080164",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_check_module_000801e0",
            "code": "\nundefined8 initialize_and_check_module_000801e0(undefined4 option_1,undefined4 option_2,undefined4 input_1,undefined4 input_2)\n\n{\n  initialize_module(&DAT_20070be8,0xe100,input_1,input_2,input_2);\n  update_parameter_value(0xd,1);\n  update_parameter_value(6,1);\n  update_parameter_value(0x39,0);\n  update_parameter_value(4,0);\n  update_parameter_value(3,0);\n  update_parameter_value(2,0);\n  update_array_value(&DAT_200708d4,5);\n  update_array_value(&DAT_200708e8,6);\n  interpolate_data();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    interrupt_operation(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_check_module_000801e0",
                "param_1": "option_1",
                "param_2": "option_2",
                "param_3": "input_1",
                "param_4": "input_2",
                "initialize_module_000813dc": "initialize_module",
                "update_parameter_value_00080f0c": "update_parameter_value",
                "update_parameter_value_000806a0": "update_array_value",
                "interpolate_data_00080164": "interpolate_data",
                "software_interrupt": "interrupt_operation"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 result;\n  int difference;\n  undefined *ptr;\n  undefined stackArray [12];\n  \n  DAT_200708c0 = calculate_result_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  update_parameter_value_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        interpolate_data_00080164();\n        calculate_sum_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = calculate_result_00081624(3,1,20000);\n      DAT_200708d8 = calculate_interpolation_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculate_interpolation_0008145c(result,1000,2000,0x28,0x96);\n      while (difference = calculate_difference_00081248(&DAT_20070be8), 0 < difference) {\n        get_next_byte_00081276(&DAT_20070be8);\n        thunk_convert_base_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        process_num_operation_000810c4(&DAT_20070be8,&DAT_00084b13);\n        calculate_sum_with_converted_base_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      interpolate_values_000806f8(&DAT_200708e8,DAT_200708ec);\n      interpolate_values_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        interpolate_data_00080164();\n        calculate_sum_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      difference = calculate_difference_00081248(&DAT_20070be8);\n      if (0 < difference) {\n        process_and_update_string_00081214(stackArray,&DAT_20070be8,0x2c);\n        check_and_reset_parameters_00081560(&DAT_200708dc,stackArray);\n        process_and_return_pointer_00081472(stackArray);\n        process_and_update_string_00081214(stackArray,&DAT_20070be8,10);\n        check_and_reset_parameters_00081560(&DAT_200708c8,stackArray);\n        process_and_return_pointer_00081472(stackArray);\n        get_next_byte_00081276(&DAT_20070be8);\n        difference = check_buffer_validity_000815b8(&DAT_200708dc,\"steer\");\n        if (difference == 0) goto LAB_0008039c;\n        result = extract_number_000815de(&DAT_200708c8);\n        ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    interpolate_data_00080164();\n    calculate_sum_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  difference = check_buffer_validity_000815b8(&DAT_200708dc,\"motor\");\n  if (difference != 0) {\n    result = extract_number_000815de(&DAT_200708c8);\n    ptr = &DAT_200708e8;\nLAB_000803b2:\n    interpolate_values_000806f8(ptr,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "uVar1": "result",
                "iVar2": "difference",
                "puVar3": "ptr",
                "auStack_1c": "stackArray"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "configure_and_start_tc_channel_000803fc",
            "code": "\nvoid configure_and_start_tc_channel_000803fc(int channel,uint index,undefined4 bit,uint bit_position)\n\n{\n  undefined4 temp_register;\n  undefined4 link_register;\n  undefined8 combined_values;\n  \n  combined_values = CONCAT44(index,channel);\n  check_bit_and_set_00080aa8(bit);\n  configure_tc_channel_00080b2c(channel,index,0xc002);\n  update_array_element_00080b90(channel,index,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel + index * 0x40 + 0x24) = 4;\n  if (2 < index) {\n    combined_values = assertion_failed_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         temp_register,link_register);\n  }\n  *(undefined4 *)((int)combined_values + (int)((ulonglong)combined_values >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "configure_and_start_tc_channel_000803fc",
                "param_1": "channel",
                "param_2": "index",
                "param_3": "bit",
                "param_4": "bit_position",
                "unaff_r4": "temp_register",
                "in_lr": "link_register",
                "uVar1": "combined_values"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_parameter_value_0008044c",
            "code": "\nvoid updateParameterValue_0008044c(int inputIndex,int outputArray,int offset)\n\n{\n  uint parameterLimit;\n  int indexOffset;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[inputIndex] & 0x80) == 0) {\n    indexOffset = inputIndex * 0xc;\n    if (((char)(&DAT_200708f1)[inputIndex] + indexOffset < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[inputIndex] + indexOffset) * 8] << 0x19) < 0\n       )) {\n      updateParameter((&DAT_200708f8)[(indexOffset + (char)(&DAT_200708f1)[inputIndex]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(outputArray + offset) = *(uint *)(outputArray + offset) | 4;\n  }\n  parameterLimit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[inputIndex] = (&DAT_200708f1)[inputIndex] + '\\x01';\n  indexOffset = inputIndex * 0xc;\n  if (((char)(&DAT_200708f1)[inputIndex] + indexOffset < (int)parameterLimit) &&\n     ((char)(&DAT_200708f1)[inputIndex] < '\\f')) {\n    *(int *)(outputArray + offset + 0x14) =\n         *(int *)(outputArray + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[inputIndex] + indexOffset) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[inputIndex] + indexOffset) * 8] << 0x19\n                  )) {\n      return;\n    }\n    updateParameter((&DAT_200708f8)[(indexOffset + (char)(&DAT_200708f1)[inputIndex]) * 8] & 0x3f,1);\n    return;\n  }\n  outputArray = outputArray + offset;\n  parameterLimit = (RelocationOffset / 1000000) * 20000 >> 5;\n  if (parameterLimit <= *(int *)(outputArray + 0x10) + 4U) {\n    parameterLimit = *(int *)(outputArray + 0x10) + 4;\n  }\n  *(uint *)(outputArray + 0x14) = parameterLimit;\n  (&DAT_200708f1)[inputIndex] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_parameter_value_0008044c",
                "param_1": "inputIndex",
                "param_2": "outputArray",
                "param_3": "offset",
                "uVar1": "parameterLimit",
                "iVar2": "indexOffset",
                "update_parameter_value_00081014": "updateParameter",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "RelocationOffset"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "decode_and_store_value_000805a8",
            "code": "\nvoid decodeAndStoreValue_000805a8(byte *output)\n\n{\n  char tempChar;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    tempChar = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = tempChar;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "decode_and_store_value_000805a8",
                "param_1": "output",
                "cVar1": "tempChar",
                "uVar2": "counter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "update_parameter_value_000806a0",
            "code": "\nbyte updateParameterValue_000806a0(byte *data,undefined4 value)\n\n{\n  byte byteValue;\n  undefined4 baseAddress;\n  uint index;\n  undefined4 configValue;\n  int counter;\n  uint dataValue;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  update_parameter_value_00080f0c(value,1,0x220,*data,0x960);\n  dataValue = (uint)*data;\n  byteValue = (&DAT_200708f8)[dataValue * 8];\n  data[2] = 0;\n  index = dataValue / 0xc;\n  (&DAT_200708f8)[dataValue * 8] = byteValue & 0xc0 | (byte)value & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    baseAddress = 0x40084000;\n    configValue = 0x1e;\nLAB_0008064c:\n    configure_and_start_tc_channel_000803fc(baseAddress,index,configValue,configValue);\n  }\n  else {\n    if (index == 1) {\n      baseAddress = 0x40084000;\n      configValue = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      baseAddress = 0x40084000;\n      configValue = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      baseAddress = 0x40080000;\n      index = 2;\n      configValue = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      baseAddress = 0x40080000;\n      index = 0;\n      configValue = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "update_parameter_value_000806a0",
                "param_1": "data",
                "param_2": "value",
                "bVar1": "byteValue",
                "uVar2": "baseAddress",
                "uVar3": "index",
                "uVar4": "configValue",
                "iVar5": "counter",
                "uVar6": "dataValue"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "interpolate_values_000806f8",
            "code": "\nvoid interpolateValues_000806f8(byte *byteArray,uint size)\n\n{\n  uint minSize;\n  \n  if ((int)size < 0x220) {\n    minSize = size;\n    if (0xb3 < (int)size) {\n      minSize = 0xb4;\n    }\n    size = calculateInterpolation(minSize & ~((int)minSize >> 0x1f),0,0xb4,(0x88 - (char)byteArray[1]) * 4,\n                           (600 - (char)byteArray[2]) * 4,size);\n  }\n  if (*byteArray < 0x3c) {\n    minSize = (0x88 - (char)byteArray[1]) * 4;\n    if (((int)(size + (0x88 - (char)byteArray[1]) * -4) < 0 == SBORROW4(size,minSize)) &&\n       (minSize = (600 - (char)byteArray[2]) * 4, (int)size <= (int)minSize)) {\n      minSize = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*byteArray * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * (minSize - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "interpolate_values_000806f8",
                "param_1": "byteArray",
                "param_2": "size",
                "uVar1": "minSize",
                "calculate_interpolation_0008145c": "calculateInterpolation"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int i;\n  int j;\n  \n  initialize_system_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_functions_00081778();\n  i = 0;\n  do {\n    j = i + 1;\n    update_parameter_value_00081014(i,0);\n    i = j;\n  } while (j != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_value_00080a30(0x400e0e00,1,0x300,0);\n  update_parameter_value_00081014(0,1);\n  update_value_00080a30(0x400e0e00,1,0xc00,0);\n  update_value_00080a30(0x400e0e00,1,0x3000,0);\n  update_value_00080a30(0x400e1400,2,0x30,0);\n  update_value_00080a30(0x400e1000,1,0xc00,0);\n  update_value_00080a30(0x400e0e00,1,3,0);\n  update_value_00080a30(0x400e1000,1,0xc000,0);\n  check_bit_and_set_00080aa8(0x25);\n  calculate_threshold_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_configuration_00080d3e(0x400c0000,0,0x300000,1);\n  update_value_with_params_00080d30(0x400c0000,0,0);\n  set_pointer_value_00080d6a(0x400c0000,0xffffffff);\n  initialize_value_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "i",
                "iVar2": "j"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_all_memory_0008089c",
            "code": "\nvoid initialize_all_memory_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory_000811b0(&DAT_20070c0c);\n  initialize_memory_000811b0(&DAT_20070b60);\n  initialize_function_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initialize_memory_000811b0(&DAT_20070e6c);\n  initialize_memory_000811b0(&DAT_20070ef4);\n  initialize_memory_000811b0(&DAT_20070f7c);\n  initialize_memory_000811b0(&DAT_20070ad8);\n  initialize_memory_000811b0(&DAT_20070d0c);\n  initialize_memory_000811b0(&DAT_20070d94);\n  initialize_and_set_data_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_set_data_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_set_data_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_all_memory_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculateDifference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculateDifference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculateDifference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "result",
                "calculate_difference_00081248": "calculateDifference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_value_000809be",
            "code": "\nvoid updateValue_000809be(int baseAddress,undefined4 action,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(action) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_value_000809be",
                "param_1": "baseAddress",
                "param_2": "action",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_parameters_000809e4",
            "code": "\nvoid updateParameters_000809e4(undefined4 *paramsArray,undefined4 newValue,uint flags)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (int)(flags << 0x1f) < 0;\n  paramsArray[0x11] = newValue;\n  if (isFlagSet) {\n    paramsArray[0x19] = newValue;\n  }\n  if (!isFlagSet) {\n    paramsArray[0x18] = newValue;\n  }\n  isFlagSet = (flags & 10) != 0;\n  if (isFlagSet) {\n    paramsArray[8] = newValue;\n  }\n  if (!isFlagSet) {\n    paramsArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    paramsArray[0x20] = newValue;\n  }\n  paramsArray[5] = newValue;\n  *paramsArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1": "paramsArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_param_values_00080a0a",
            "code": "\nvoid setParamValues_00080a0a(undefined4 *paramArray,undefined4 paramValue,int isParam3Zero,int isParam4Zero,int isParam5Zero)\n\n{\n  paramArray[0x11] = paramValue;\n  if (isParam5Zero == 0) {\n    paramArray[0x18] = paramValue;\n  }\n  else {\n    paramArray[0x19] = paramValue;\n  }\n  if (isParam4Zero == 0) {\n    paramArray[0x15] = paramValue;\n  }\n  else {\n    paramArray[0x14] = paramValue;\n  }\n  if (isParam3Zero == 0) {\n    paramArray[0xd] = paramValue;\n  }\n  else {\n    paramArray[0xc] = paramValue;\n  }\n  paramArray[4] = paramValue;\n  *paramArray = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "param_3": "isParam3Zero",
                "param_4": "isParam4Zero",
                "param_5": "isParam5Zero"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_value_00080a30",
            "code": "\nundefined4 updateValue_00080a30(int data,int option,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    performUpdate(data,option,value);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(data + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(data + 0x60) = value;\n    }\n    break;\n  case 3:\n    setParameters(data,value,flags,0x809e5,data);\n    break;\n  case 4:\n  case 5:\n    setValues(data,value,option == 5,(flags << 0x1d) >> 0x1f,flags & 1,option,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_value_00080a30",
                "param_1": "data",
                "param_2": "option",
                "param_3": "value",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_value_000809be": "performUpdate",
                "update_parameters_000809e4": "setParameters",
                "set_param_values_00080a0a": "setValues"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_and_return_result_00080a94",
            "code": "\nuint checkAndReturnResult_00080a94(int input,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_and_return_result_00080a94",
                "param_1": "input",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_bit_and_set_00080aa8",
            "code": "\n\n\nundefined4 checkBitAndSet_00080aa8(uint inputValue)\n\n{\n  uint bitPattern;\n  \n  if (inputValue < 0x2d) {\n    if (inputValue < 0x20) {\n      bitPattern = 1 << (inputValue & 0xff);\n      if ((bitPattern & _DAT_400e0618) != bitPattern) {\n        _DAT_400e0610 = bitPattern;\n      }\n    }\n    else {\n      bitPattern = 1 << (inputValue - 0x20 & 0xff);\n      if ((bitPattern & _DAT_400e0708) != bitPattern) {\n        _DAT_400e0700 = bitPattern;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "inputValue",
                "uVar1": "bitPattern"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTCChannel_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int offset;\n  int channelAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = assertion_failed_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelAddress = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "channelAddress"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "update_array_element_00080b90",
            "code": "\nvoid updateArrayElement_00080b90(int arrayBaseAddress,int index,undefined4 newValue)\n\n{\n  *(undefined4 *)(arrayBaseAddress + index * 0x40 + 0x14) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "update_array_element_00080b90",
                "param_1": "arrayBaseAddress",
                "param_2": "index",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_system_00080b98",
            "code": "\n\n\nvoid initializeSystem_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfOffset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "elfOffset"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_control_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *result,uint totalTime,int numCycles,int scalingFactor)\n\n{\n  uint numIntervals;\n  uint i;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  numIntervals = totalTime / (uint)(numCycles * 2);\n  if (totalTime == numCycles * 2 * numIntervals) {\n    numIntervals = numIntervals - 1;\n  }\n  i = 0;\n  do {\n    if ((uint)(scalingFactor * (int)(((ulonglong)totalTime / (ulonglong)((numIntervals + 1) * 2)) / 1000000)) <=\n        thresholds[i]) {\n      result[1] = (i & 0xf) << 0x10 | (numIntervals & 0xff) << 8 | result[1];\n      return 0;\n    }\n    i = i + 1;\n  } while (i != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "result",
                "param_2": "totalTime",
                "param_3": "numCycles",
                "param_4": "scalingFactor",
                "uVar1": "numIntervals",
                "uVar2": "i",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_value_with_params_00080d30",
            "code": "\nvoid updateValueWithParams_00080d30(int inputAddress,uint valueToSet,uint bitToSet)\n\n{\n  *(uint *)(inputAddress + 4) = valueToSet | *(uint *)(inputAddress + 4) | (bitToSet & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_value_with_params_00080d30",
                "param_1": "inputAddress",
                "param_2": "valueToSet",
                "param_3": "bitToSet"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_configuration_00080d3e",
            "code": "\nvoid updateConfiguration_00080d3e(int configPointer,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(configPointer + 4) =\n       value2 | *(uint *)(configPointer + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_configuration_00080d3e",
                "param_1": "configPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_value_00080d62",
            "code": "\nvoid initializeValue_00080d62(int inputPointer)\n\n{\n  *(undefined4 *)(inputPointer + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_value_00080d62",
                "param_1": "inputPointer"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_pointer_value_00080d6a",
            "code": "\nvoid setPointerValue_00080d6a(int pointerOffset,undefined4 newValue)\n\n{\n  *(undefined4 *)(pointerOffset + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_pointer_value_00080d6a",
                "param_1": "pointerOffset",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_application_00080e80",
            "code": "\nvoid initializeApplication_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_application_00080e80",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_with_previous_value_00080e88",
            "code": "\nint addWithPreviousValue_00080e88(int valueToAdd)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = valueToAdd + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_with_previous_value_00080e88",
                "param_1": "valueToAdd",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "initialize_return_value_00080eaa",
            "code": "\nundefined4 initializeReturnValue_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "initialize_return_value_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "initialize_application_00080eba",
            "code": "\nundefined4 initializeApplication_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "initialize_application_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_00080ebe",
            "code": "\nint initialize_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nundefined4 initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param_1,int source,uint length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unmodifiedParam2,undefined4 unmodifiedParam3,undefined4 unmodifiedParam4)\n\n{\n  process_relocation_000817c8(\"Exiting with status %d.\\n\",status,unmodifiedParam3,unmodifiedParam4,unmodifiedParam4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unmodifiedParam2",
                "param_3": "unmodifiedParam3",
                "param_4": "unmodifiedParam4"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_default_value_00080efe",
            "code": "\nundefined4 get_default_value_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_default_value_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_global_variable_thunk_000816d8",
            "code": "\nundefined4 get_global_variable_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_global_variable_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "update_parameter_value_00080f0c",
            "code": "\n\n\nint updateParameterValue_00080f0c(int index,int value)\n\n{\n  int updatedValue;\n  uint bitValue;\n  undefined4 bitFlag;\n  uint updatedBit;\n  byte lowerNibble;\n  byte byteValue;\n  int tempIndex;\n  int tempValue;\n  \n  updatedValue = index;\n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 4) {\n      updatedValue = set_bit_00080d58(0x400c0000,(&DAT_00084b5d)[index * 0x1c]);\n    }\n    byteValue = (&DAT_20070e1c)[index];\n    lowerNibble = byteValue & 0xf;\n    if ((lowerNibble < 3) && (byteValue != 0)) {\n      if (lowerNibble == 2) {\n        if (value == 0) {\n          return updatedValue;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (value == 2) {\n          return updatedValue;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (value == 1) {\n          return updatedValue;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (value != 1) {\nLAB_00080f68:\n      if (value == 0) {\n        updatedValue = index * 0x1c;\n        check_bit_and_set_00080aa8(*(undefined4 *)(&DAT_00084b4c + updatedValue));\n        updatedValue = update_value_00080a30(*(undefined4 *)(&DAT_00084b44 + updatedValue),3,\n                             *(undefined4 *)(&DAT_00084b48 + updatedValue),0);\n        byteValue = (&DAT_20070e1c)[index] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return updatedValue;\n        }\n        updatedValue = index * 0x1c;\n        check_bit_and_set_00080aa8(*(undefined4 *)(&DAT_00084b4c + updatedValue));\n        updatedValue = update_value_00080a30(*(undefined4 *)(&DAT_00084b44 + updatedValue),3,\n                             *(undefined4 *)(&DAT_00084b48 + updatedValue),1);\n        byteValue = (&DAT_20070e1c)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[index] = byteValue;\n      return updatedValue;\n    }\n    tempIndex = index * 0x1c;\n    tempValue = *(int *)(&DAT_00084b44 + tempIndex);\n    if (byteValue >> 4 == 0) {\n      bitFlag = 4;\n    }\n    else {\n      bitFlag = 5;\n    }\n    updatedValue = update_value_00080a30(tempValue,bitFlag,*(undefined4 *)(&DAT_00084b48 + tempIndex),\n                         *(undefined4 *)(&DAT_00084b54 + tempIndex));\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf0 | 3;\n    if (*(int *)(tempValue + 0x18) == -1) {\n      bitValue = *(uint *)(&DAT_00084b4c + tempIndex);\n      if (0x2c < bitValue) {\n        return 1;\n      }\n      if (bitValue < 0x20) {\n        bitValue = 1 << (bitValue & 0xff);\n        updatedBit = _DAT_400e0618 & bitValue;\n        if (updatedBit == bitValue) {\n          _DAT_400e0614 = updatedBit;\n        }\n      }\n      else {\n        bitValue = 1 << (bitValue - 0x20 & 0xff);\n        updatedBit = _DAT_400e0708 & bitValue;\n        if (updatedBit == bitValue) {\n          _DAT_400e0704 = updatedBit;\n        }\n      }\n      return 0;\n    }\n  }\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "update_parameter_value_00080f0c",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "updatedValue",
                "uVar2": "bitValue",
                "uVar3": "bitFlag",
                "uVar4": "updatedBit",
                "bVar5": "lowerNibble",
                "bVar6": "byteValue",
                "iVar7": "tempIndex",
                "iVar8": "tempValue"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_parameter_value_00081014",
            "code": "\nvoid updateParameterValue_00081014(int index,int valueFlag,undefined4 newValue)\n\n{\n  int result;\n  undefined4 paramValue;\n  int paramAddress;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_parameter_value_00080f0c(index,1,newValue,5,index,valueFlag,newValue);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(valueFlag << 4);\n    paramAddress = *(int *)(&DAT_00084b44 + index * 0x1c);\n    paramValue = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = check_and_return_result_00080a94(paramAddress,paramValue);\n    if (result == 0) {\n      if (valueFlag != 0) {\n        *(undefined4 *)(paramAddress + 100) = paramValue;\n        return;\n      }\n      *(undefined4 *)(paramAddress + 0x60) = paramValue;\n      return;\n    }\n    set_param_values_00080a0a(paramAddress,paramValue,valueFlag,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_parameter_value_00081014",
                "param_1": "index",
                "param_2": "valueFlag",
                "param_3": "newValue",
                "iVar1": "result",
                "uVar2": "paramValue",
                "iVar3": "paramAddress"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_integer_000810a6",
            "code": "\nvoid processInteger_000810a6(int *integerArray,int value,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 leadingZeros;\n  \n  if (value != 0) {\n    leadingZeros = countLeadingZeros(value);\n    (**(code **)(*integerArray + 4))(integerArray,value,leadingZeros,*(code **)(*integerArray + 4),param2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_integer_000810a6",
                "param_1": "integerArray",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "leadingZeros",
                "count_leading_zeros_00082688": "countLeadingZeros"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "process_num_operation_000810c4",
            "code": "\nvoid process_num_operation_000810c4(void)\n\n{\n  perform_integer_processing();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "process_num_operation_000810c4",
                "process_integer_000810a6": "perform_integer_processing"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_with_integer_param_000810d8",
            "code": "\nvoid process_with_integer_param_000810d8(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_integer_operation(input_param_1,&DAT_00085635,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_with_integer_param_000810d8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "process_integer_000810a6": "process_integer_operation"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 inputParam)\n\n{\n  int processedValue1;\n  int processedValue2;\n  \n  processedValue1 = process_integer_000810a6();\n  processedValue2 = process_with_integer_param_000810d8(inputParam);\n  return processedValue2 + processedValue1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "inputParam",
                "iVar1": "processedValue1",
                "iVar2": "processedValue2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_decimal_to_base_000810fc",
            "code": "\nvoid convertDecimalToBase_000810fc(undefined4 output,uint decimal,uint base)\n\n{\n  char *result;\n  uint quotient;\n  char *currentDigit;\n  char convertedDigit;\n  uint remainder;\n  char convertedNumber [5];\n  \n  convertedNumber[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  result = convertedNumber;\n  do {\n    currentDigit = result;\n    quotient = decimal / base;\n    remainder = decimal - base * quotient & 0xff;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *currentDigit = convertedDigit;\n    decimal = quotient;\n    result = currentDigit + -1;\n  } while (quotient != 0);\n  process_integer_000810a6(output,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_000810fc",
                "param_1": "output",
                "param_2": "decimal",
                "param_3": "base",
                "pcVar1": "result",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "convertedDigit",
                "uVar5": "remainder",
                "local_15": "convertedNumber"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_base_0008113a",
            "code": "\nint convertBase_0008113a(undefined4 *data_ptr,uint value,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*data_ptr)(data_ptr,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = execute_function_000810cc(data_ptr,0x2d);\n      negative_result = convert_decimal_to_base_000810fc(data_ptr,-value,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_000810fc(data_ptr,value,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_base_0008113a",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_result"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_decimal_thunk_0008113a",
            "code": "\nint convert_decimal_thunk_0008113a(undefined4 *array,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_value;\n  \n  if (base == 0) {\n    result = (**(code **)*array)(array,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function_000810cc(array,0x2d);\n      negative_value = convert_decimal_thunk_0008113a_to_base_000810fc(array,-number,10);\n      return negative_value + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_thunk_0008113a_to_base_000810fc(array,number,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_decimal_thunk_0008113a",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_value"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_with_converted_base_0008117a",
            "code": "\nint calculateSumWithConvertedBase_0008117a(undefined4 inputNumber)\n\n{\n  int convertedValue;\n  int processedValue;\n  \n  convertedValue = convert_base_0008113a();\n  processedValue = process_with_integer_param_000810d8(inputNumber);\n  return processedValue + convertedValue;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_with_converted_base_0008117a",
                "param_1": "inputNumber",
                "iVar1": "convertedValue",
                "iVar2": "processedValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_complete_00081190",
            "code": "\nvoid executeIfRelocationComplete_00081190(void)\n\n{\n  if ((relocationArray[6].relInfo != 0xffffffff) &&\n     (relocationArray[6].relInfo = relocationArray[6].relInfo - 1,\n     relocationArray[6].relInfo == 0)) {\n    (*(functionToCall *)((int)&relocationArray[0].relOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_complete_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relInfo",
                "r_offset": "relOffset",
                "code": "functionToCall"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  fillMemoryPattern(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress",
                "fill_memory_with_pattern_00081f00": "fillMemoryPattern"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_index_and_value_000811ca",
            "code": "\nvoid updateIndexAndValue_000811ca(int array,undefined value)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(array + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(array + 0x84)) {\n    *(undefined *)(array + *(int *)(array + 0x80)) = value;\n    *(uint *)(array + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_index_and_value_000811ca",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "process_data_000811e8",
            "code": "\nint process_data_000811e8(int *data_array)\n\n{\n  int global_variable_value;\n  \n  global_variable_value = get_global_variable_value();\n  data_array[3] = global_variable_value;\n  do {\n    global_variable_value = (**(code **)(*data_array + 0xc))(data_array);\n    if (-1 < global_variable_value) {\n      return global_variable_value;\n    }\n    global_variable_value = get_global_variable_value();\n  } while ((uint)(global_variable_value - data_array[3]) < (uint)data_array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "param_1": "data_array",
                "iVar1": "global_variable_value",
                "get_global_variable_thunk_000816d8": "get_global_variable_value"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_and_update_string_00081214",
            "code": "\nvoid process_and_update_string_00081214(undefined4 input_param,undefined4 data_param,uint target_value)\n\n{\n  uint result;\n  \n  initialize_memory_and_copy_string(input_param,&DAT_00085637);\n  while ((result = process_data(data_param), -1 < (int)result && (result != target_value))) {\n    update_string_and_memory(input_param,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_and_update_string_00081214",
                "param_1": "input_param",
                "param_2": "data_param",
                "param_3": "target_value",
                "uVar1": "result",
                "initialize_memory_and_copy_string_000814f6": "initialize_memory_and_copy_string",
                "process_data_000811e8": "process_data",
                "update_string_and_memory_0008159e": "update_string_and_memory"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "get_next_byte_00081276",
            "code": "\nuint get_next_byte_00081276(int data_ptr)\n\n{\n  byte next_byte;\n  int ptr_data;\n  \n  ptr_data = *(int *)(data_ptr + 0x10);\n  if (*(int *)(ptr_data + 0x80) != *(int *)(ptr_data + 0x84)) {\n    next_byte = *(byte *)(ptr_data + *(int *)(ptr_data + 0x84));\n    *(uint *)(ptr_data + 0x84) = *(int *)(ptr_data + 0x84) + 1U & 0x7f;\n    return (uint)next_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "get_next_byte_00081276",
                "param_1": "data_ptr",
                "bVar1": "next_byte",
                "iVar2": "ptr_data"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataPointer,undefined4 newData)\n\n{\n  int infoPointer;\n  uint updatedValue;\n  \n  infoPointer = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(infoPointer + 0x84) == *(int *)(infoPointer + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newData;\n  }\n  else {\n    updatedValue = *(int *)(infoPointer + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(infoPointer + 0x84) == updatedValue);\n    *(char *)(infoPointer + *(int *)(infoPointer + 0x80)) = (char)newData;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataPointer",
                "param_2": "newData",
                "iVar1": "infoPointer",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_00081348",
            "code": "\nvoid initializeFunction_00081348(undefined4 *functionParams,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  functionParams[1] = 0;\n  functionParams[2] = 1000;\n  functionParams[6] = value1;\n  *functionParams = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(functionParams + 7) = value2;\n  functionParams[4] = value4;\n  functionParams[8] = value3;\n  functionParams[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_00081348",
                "param_1": "functionParams",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_module_000813dc",
            "code": "\nvoid initializeModule_000813dc(int moduleBaseAddress,uint pageSize)\n\n{\n  int tempPtr;\n  undefined4 *moduleInfoPtr;\n  \n  check_bit_and_set_00080aa8(*(undefined4 *)(moduleBaseAddress + 0x20));\n  moduleInfoPtr = *(undefined4 **)(moduleBaseAddress + 0x18);\n  moduleInfoPtr[0x48] = 0x202;\n  *moduleInfoPtr = 0xac;\n  moduleInfoPtr[1] = 0x800;\n  moduleInfoPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  moduleInfoPtr[3] = 0xffffffff;\n  moduleInfoPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(moduleBaseAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(moduleBaseAddress + 0x1c) & 0x1f);\n  tempPtr = *(int *)(moduleBaseAddress + 0x10);\n  *(undefined4 *)(tempPtr + 0x84) = 0;\n  *(undefined4 *)(tempPtr + 0x80) = 0;\n  tempPtr = *(int *)(moduleBaseAddress + 0x14);\n  *(undefined4 *)(tempPtr + 0x84) = 0;\n  *(undefined4 *)(tempPtr + 0x80) = 0;\n  *moduleInfoPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_module_000813dc",
                "param_1": "moduleBaseAddress",
                "param_2": "pageSize",
                "iVar1": "tempPtr",
                "puVar2": "moduleInfoPtr"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_set_data_00081438",
            "code": "\nundefined4 * initializeAndSetData_00081438(undefined4 *outputPointer,undefined4 inputData)\n\n{\n  initialize_function_00081348();\n  *outputPointer = &PTR_update_data_000812b8_1_00085680;\n  outputPointer[9] = inputData;\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_set_data_00081438",
                "param_1": "outputPointer",
                "param_2": "inputData"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int startValue,int startRangeValue,int endRangeValue,int startRange,int endRange)\n\n{\n  return (uint)((startValue - startRangeValue) * (endRange - startRange)) / (uint)(endRangeValue - startRangeValue) + startRange;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startRangeValue",
                "param_3": "endRangeValue",
                "param_4": "startRange",
                "param_5": "endRange"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "process_and_return_pointer_00081472",
            "code": "\nundefined4 * processAndReturnPointer_00081472(undefined4 *inputPtr)\n\n{\n  processRelocatedOffset(*inputPtr);\n  return inputPtr;\n}\n\n",
            "renaming": {
                "FUN_00081472": "process_and_return_pointer_00081472",
                "param_1": "inputPtr",
                "process_relocated_offset_00081800": "processRelocatedOffset"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_variables_00081480",
            "code": "\nvoid resetVariables_00081480(int *inputArray)\n\n{\n  if (*inputArray != 0) {\n    process_relocated_offset_00081800();\n  }\n  *inputArray = 0;\n  inputArray[2] = 0;\n  inputArray[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_variables_00081480",
                "param_1": "inputArray",
                "param_1[2]": "inputArray[2]",
                "param_1[1]": "inputArray[1]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "reallocate_or_copy_memory_and_update_00081496",
            "code": "\nint reallocate_or_copy_memory_and_update_00081496(int *ptr_buffer,int buffer_size,undefined4 ptr_source,undefined4 ptr_destination)\n\n{\n  int result;\n  \n  result = reallocate_or_copy_memory_00081f9c(*ptr_buffer,buffer_size + 1,ptr_source,ptr_destination,ptr_destination);\n  if (result != 0) {\n    *ptr_buffer = result;\n    ptr_buffer[1] = buffer_size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "reallocate_or_copy_memory_and_update_00081496",
                "param_1": "ptr_buffer",
                "param_2": "buffer_size",
                "param_3": "ptr_source",
                "param_4": "ptr_destination",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_memory_and_update_000814ae",
            "code": "\nundefined4 checkMemoryAndUpdate_000814ae(int *memory,uint requiredSize)\n\n{\n  int result;\n  \n  if ((*memory == 0) || ((uint)memory[1] < requiredSize)) {\n    result = reallocate_or_copy_memory_and_update_00081496(memory);\n    if (result == 0) {\n      return 0;\n    }\n    if (memory[2] == 0) {\n      *(undefined *)*memory = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_memory_and_update_000814ae",
                "param_1": "memory",
                "param_2": "requiredSize",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_memory_and_copy_string_000814d0",
            "code": "\nundefined4 * updateMemoryAndCopyString_000814d0(undefined4 *output,undefined4 sourceString,undefined4 newMemory)\n\n{\n  int memoryCheckResult;\n  \n  memoryCheckResult = check_memory_and_update_000814ae(output,newMemory);\n  if (memoryCheckResult == 0) {\n    reset_variables_00081480(output);\n  }\n  else {\n    output[2] = newMemory;\n    copy_string_000825cc(*output,sourceString);\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_memory_and_copy_string_000814d0",
                "param_1": "output",
                "param_2": "sourceString",
                "param_3": "newMemory",
                "iVar1": "memoryCheckResult"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_memory_and_copy_string_000814f6",
            "code": "\nundefined4 * initializeMemoryAndCopyString_000814f6(undefined4 *memoryPointer,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *memoryPointer = 0;\n  memoryPointer[1] = 0;\n  memoryPointer[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082688(inputValue);\n    update_memory_and_copy_string_000814d0(memoryPointer,inputValue,leadingZerosCount);\n  }\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_memory_and_copy_string_000814f6",
                "param_1": "memoryPointer",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "copy_and_reset_parameters_0008151c",
            "code": "\nvoid copyAndResetParameters_0008151c(int *sourceParams,int *destinationParams)\n\n{\n  if (*sourceParams != 0) {\n    if ((*destinationParams != 0) && ((uint)destinationParams[2] <= (uint)sourceParams[1])) {\n      copyString();\n      sourceParams[2] = destinationParams[2];\n      goto LAB_00081558;\n    }\n    processRelocatedOffset();\n  }\n  *sourceParams = *destinationParams;\n  sourceParams[1] = destinationParams[1];\n  sourceParams[2] = destinationParams[2];\n  *destinationParams = 0;\n  destinationParams[1] = 0;\nLAB_00081558:\n  destinationParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "copy_and_reset_parameters_0008151c",
                "param_1": "sourceParams",
                "param_2": "destinationParams",
                "copy_string_000825cc": "copyString",
                "process_relocated_offset_00081800": "processRelocatedOffset"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_reset_parameters_00081560",
            "code": "\nint check_and_reset_parameters_00081560(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    copy_and_reset_parameters_0008151c();\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_reset_parameters_00081560",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_string_and_memory_00081570",
            "code": "\nundefined4 updateStringAndMemory_00081570(int *array,int length,int offset)\n\n{\n  int memoryCheckResult;\n  int previousOffset;\n  \n  previousOffset = array[2];\n  if (length == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    memoryCheckResult = check_memory_and_update_000814ae(array,previousOffset + offset);\n    if (memoryCheckResult == 0) {\n      return 0;\n    }\n    copy_string_000825cc(*array + array[2],length);\n    array[2] = previousOffset + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_string_and_memory_00081570",
                "param_1": "array",
                "param_2": "length",
                "param_3": "offset",
                "iVar1": "memoryCheckResult",
                "iVar2": "previousOffset"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "update_string_and_memory_0008159e",
            "code": "\nvoid updateStringAndMemory_0008159e(undefined4 inputParam,undefined4 UNUSED_param,undefined4 paramToUpdate)\n\n{\n  undefined4 localVariable_1;\n  undefined4 localVariable_2;\n  \n  localVariable_2 = paramToUpdate;\n  update_string_and_memory_00081570(inputParam,&localVariable_1,1,0,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "update_string_and_memory_0008159e",
                "param_1": "inputParam",
                "param_2": "UNUSED_param",
                "param_3": "paramToUpdate",
                "local_c": "localVariable_1",
                "uStack_8": "localVariable_2"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_buffer_validity_000815b8",
            "code": "\nint checkBufferValidity_000815b8(byte **bufferPtr,byte *checkPtr)\n\n{\n  uint bufferSize;\n  int isValid;\n  \n  if (bufferPtr[2] == (byte *)0x0) {\n    if (checkPtr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (checkPtr != (byte *)0x0) {\n      bufferSize = compare_buffers_00082390(*bufferPtr);\n      goto LAB_000815d4;\n    }\n    checkPtr = *bufferPtr;\n  }\n  bufferSize = (uint)*checkPtr;\nLAB_000815d4:\n  isValid = 1 - bufferSize;\n  if (1 < bufferSize) {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_buffer_validity_000815b8",
                "param_1": "bufferPtr",
                "param_2": "checkPtr",
                "uVar1": "bufferSize",
                "iVar2": "isValid"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "extract_number_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint extractNumber_000815de(byte **input)\n\n{\n  byte tempByte1;\n  byte tempByte2;\n  uint result;\n  byte *currentByte;\n  uint byteValue;\n  byte *nextByte;\n  int tempInt1;\n  int negativeFlag;\n  uint maxDivisor;\n  uint maxResult;\n  \n  currentByte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    nextByte = currentByte;\n    currentByte = nextByte + 1;\n    byteValue = (uint)*nextByte;\n    tempByte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    tempByte2 = tempByte1 & 8;\n  } while ((tempByte1 & 8) != 0);\n  if (byteValue == 0x2d) {\n    currentByte = nextByte + 2;\n    byteValue = (uint)nextByte[1];\n    tempByte2 = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)nextByte[1];\n    currentByte = nextByte + 2;\n  }\n  if (tempByte2 == 0) {\n    maxResult = 0x7fffffff;\n  }\n  else {\n    maxResult = 0x80000000;\n  }\n  maxDivisor = maxResult / 10;\n  negativeFlag = 0;\n  result = 0;\n  do {\n    tempByte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((tempByte1 & 4) == 0) {\n      if ((tempByte1 & 3) == 0) {\nLAB_0008277e:\n        if (negativeFlag == -1) {\n          if (tempByte2 == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (tempByte2 != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((tempByte1 & 3) == 1) {\n        tempInt1 = 0x37;\n      }\n      else {\n        tempInt1 = 0x57;\n      }\n      tempInt1 = byteValue - tempInt1;\n    }\n    else {\n      tempInt1 = byteValue - 0x30;\n    }\n    if (9 < tempInt1) goto LAB_0008277e;\n    if (negativeFlag != -1) {\n      if ((maxDivisor <= result && result != maxDivisor) || ((result == maxDivisor && ((int)(maxResult % 10) < tempInt1))))\n      {\n        negativeFlag = -1;\n      }\n      else {\n        result = result * 10 + tempInt1;\n        negativeFlag = 1;\n      }\n    }\n    byteValue = (uint)*currentByte;\n    currentByte = currentByte + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "extract_number_000815de",
                "param_1": "input",
                "bVar1": "tempByte1",
                "bVar2": "tempByte2",
                "uVar3": "result",
                "pbVar4": "currentByte",
                "uVar5": "byteValue",
                "pbVar6": "nextByte",
                "iVar7": "tempInt1",
                "iVar8": "negativeFlag",
                "uVar9": "maxDivisor",
                "uVar10": "maxResult"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_control_system_000815ec",
            "code": "\nvoid runControlSystem_000815ec(void)\n\n{\n  initializeData();\n  initializeSystem();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initializeAndCheckModule();\n  do {\n    controlSystem();\n    checkAndExecuteFunctions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_control_system_000815ec",
                "initialize_data_00081618": "initializeData",
                "initialize_system_00080774": "initializeSystem",
                "initialize_and_check_module_000801e0": "initializeAndCheckModule",
                "control_system_00080250": "controlSystem",
                "check_and_execute_functions_00080970": "checkAndExecuteFunctions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_data_00081618",
            "code": "\n\n\nvoid initializeData_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_data_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = check_condition_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((array[6].r_offset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)array[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_condition_00081684",
            "code": "\nint check_condition_00081684(uint *input_array,uint bit_mask,uint expected_value,int max_iterations)\n\n{\n  int iteration_count;\n  \n  do {\n    if ((*input_array & bit_mask) != expected_value) {\n      do {\n        if ((*input_array & bit_mask) == expected_value) {\n          iteration_count = 0;\n          do {\n            if ((*input_array & bit_mask) != expected_value) {\n              return iteration_count;\n            }\n            iteration_count = iteration_count + 1;\n          } while (max_iterations != iteration_count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_condition_00081684",
                "param_1": "input_array",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "iVar1": "iteration_count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_value_000816d8",
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_parameters_000816ec",
            "code": "\nvoid updateParameters_000816ec(dword value1,dword value2,dword value3)\n\n{\n  dword *relocatedPtr;\n  uint index;\n  uint bitMask;\n  code *jumpTable;\n  \n  if (relocationEntries[48].r_offset == 0) {\n    relocationEntries[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocationEntries[48].r_offset + 4);\n  relocatedPtr = (dword *)relocationEntries[48].r_offset;\n  if (0x1f < (int)index) {\n    relocatedPtr = (dword *)reallocate_memory_000817f0(400);\n    if (relocatedPtr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    *relocatedPtr = relocationEntries[48].r_offset;\n    relocatedPtr[1] = 0;\n    index = 0;\n    relocationEntries[48].r_offset = (dword)relocatedPtr;\n    relocatedPtr[0x62] = 0;\n    relocatedPtr[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocatedPtr[index + 0x22] = value1;\n  relocatedPtr[0x62] = relocatedPtr[0x62] | bitMask;\n  relocatedPtr[index + 0x42] = value3;\n  relocatedPtr[99] = bitMask | relocatedPtr[99];\n  relocatedPtr[1] = index + 1;\n  relocatedPtr[index + 2] = value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_parameters_000816ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "pdVar1": "relocatedPtr",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "assertion_failed_000816f8",
            "code": "\nvoid assertionFailed_000816f8(undefined4 msg,undefined4 fileName,char *lineNumber,undefined4 functionName)\n\n{\n  undefined4 relocationOffset;\n  undefined4 temp;\n  char *messagePart;\n  undefined8 translationResult;\n  \n  relocationOffset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (lineNumber == (char *)0x0) goto LAB_0008171c;\n  temp = functionName;\n  messagePart = \", function: \";\n  do {\n    functionName = msg;\n    execute_relocation_00081750(relocationOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",temp,msg,fileName,\n                 messagePart,lineNumber);\n    translationResult = initialize_translation_000836ec();\n    fileName = (undefined4)((ulonglong)translationResult >> 0x20);\n    relocationOffset = (undefined4)translationResult;\nLAB_0008171c:\n    lineNumber = \"\";\n    temp = functionName;\n    messagePart = lineNumber;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "msg",
                "param_2": "fileName",
                "param_3": "lineNumber",
                "param_4": "functionName",
                "uVar1": "relocationOffset",
                "uVar2": "temp",
                "pcVar3": "messagePart",
                "uVar4": "translationResult"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "execute_relocation_00081750",
            "code": "\nvoid executeRelocation_00081750(undefined4 offset,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 param2_temp;\n  undefined4 param3_temp;\n  \n  param2_temp = param2;\n  param3_temp = param3;\n  process_data_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,param1,&param2_temp);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "execute_relocation_00081750",
                "param_1": "offset",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uStack_8": "param2_temp",
                "uStack_4": "param3_temp"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctions_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointers;\n  \n  FUNC_00085844();\n  functionPointers = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointers = functionPointers + 1;\n    (**functionPointers)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_functions_00081778",
                "ppcVar2": "functionPointers",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "process_relocation_000817c8",
            "code": "\nvoid processRelocation_000817c8(undefined4 firstParam,undefined4 secondParam,undefined4 thirdParam,undefined4 fourthParam)\n\n{\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  undefined4 stackVar3;\n  \n  stackVar1 = secondParam;\n  stackVar2 = thirdParam;\n  stackVar3 = fourthParam;\n  process_data_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),firstParam,&stackVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "process_relocation_000817c8",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "thirdParam",
                "param_4": "fourthParam",
                "uStack_c": "stackVar1",
                "uStack_8": "stackVar2",
                "uStack_4": "stackVar3"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "reallocate_memory_000817f0",
            "code": "\nvoid reallocateMemory_000817f0(undefined4 memorySize)\n\n{\n  reallocate_memory_00081810(relocationTable[140].r_offset,memorySize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "reallocate_memory_000817f0",
                "param_1": "memorySize",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "process_relocated_offset_00081800",
            "code": "\nvoid process_relocated_offset_00081800(undefined4 input)\n\n{\n  process_relocation_00083b10(relocation_table[140].offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "process_relocated_offset_00081800",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "reallocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * reallocateMemory_00081810(undefined4 *buffer,uint size)\n\n{\n  dword temp1;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  dword temp7;\n  uint temp8;\n  int temp9;\n  undefined *tempPtr;\n  dword temp10;\n  dword temp11;\n  int temp12;\n  dword *tempPtr2;\n  uint temp13;\n  undefined *tempPtr3;\n  dword *tempPtr4;\n  uint temp14;\n  \n  if (size + 0xb < 0x17) {\n    temp13 = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    temp13 = size + 0xb & 0xfffffff8;\n    if (((int)temp13 < 0) || (temp13 < size)) {\nLAB_00081876:\n      *buffer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(buffer);\n  temp1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp13 < 0x1f8) {\n    temp12 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp13);\n    if ((temp12 != temp13 + 0x20070464) ||\n       (temp2 = temp12 + 8, temp12 = *(int *)(temp12 + 0x14), temp2 != temp12)) {\n      temp5 = *(int *)(temp12 + 0xc);\n      temp9 = (*(uint *)(temp12 + 4) & 0xfffffffc) + temp12;\n      temp13 = *(uint *)(temp9 + 4);\n      temp2 = *(int *)(temp12 + 8);\n      *(int *)(temp2 + 0xc) = temp5;\n      *(int *)(temp5 + 8) = temp2;\n      *(uint *)(temp9 + 4) = temp13 | 1;\n      FUNC_00081f98(buffer);\n      return (int *)(temp12 + 8);\n    }\n    temp14 = (temp13 >> 3) + 2;\n  }\n  else {\n    temp14 = temp13 >> 9;\n    if (temp14 == 0) {\n      temp2 = 0x7e;\n      temp12 = 0x3f;\n    }\n    else if (temp14 < 5) {\n      temp12 = (temp13 >> 6) + 0x38;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x15) {\n      temp12 = temp14 + 0x5b;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x55) {\n      temp12 = (temp13 >> 0xc) + 0x6e;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x155) {\n      temp12 = (temp13 >> 0xf) + 0x77;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x555) {\n      temp12 = (temp13 >> 0x12) + 0x7c;\n      temp2 = temp12 * 2;\n    }\n    else {\n      temp2 = 0xfc;\n      temp12 = 0x7e;\n    }\n    for (temp7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp2]; temp2 * 4 + 0x20070464U != temp7\n        ; temp7 = *(dword *)(temp7 + 0xc)) {\n      temp14 = *(uint *)(temp7 + 4) & 0xfffffffc;\n      temp5 = temp14 - temp13;\n      if (0xf < temp5) {\n        temp12 = temp12 + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        temp2 = temp14 + temp7;\n        temp13 = *(uint *)(temp2 + 4);\n        temp5 = *(int *)(temp7 + 0xc);\n        temp12 = *(int *)(temp7 + 8);\n        *(int *)(temp12 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp12;\n        *(uint *)(temp2 + 4) = temp13 | 1;\n        FUNC_00081f98(buffer);\n        return (int *)(temp7 + 8);\n      }\n    }\n    temp14 = temp12 + 1;\n  }\n  temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp4 = temp3 & 0xfffffffc;\n    temp6 = temp4 - temp13;\n    if (0xf < (int)temp6) {\n      temp7 = temp13 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp13 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp7;\n      *(undefined4 *)(temp7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp7 + 8) = 0x2007046c;\n      *(uint *)(temp7 + 4) = temp6 | 1;\n      *(uint *)(temp7 + temp6) = temp6;\n      FUNC_00081f98(buffer);\n      return (int *)(temp1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(temp4 + temp1 + 4) = *(uint *)(temp4 + temp1 + 4) | 1;\n      FUNC_00081f98(buffer);\n      return (int *)(temp1 + 8);\n    }\n    if (temp4 < 0x200) {\n      temp4 = temp3 & 0xfffffff8;\n      temp12 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4);\n      temp7 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(temp1 + 8) = temp12;\n      *(uint *)(temp1 + 0xc) = temp4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4) = temp1;\n      *(dword *)(temp12 + 0xc) = temp1;\n    }\n    else {\n      temp6 = temp3 >> 9;\n      if (temp6 < 5) {\n        temp2 = (temp3 >> 6) + 0x38;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x15) {\n        temp2 = temp6 + 0x5b;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x55) {\n        temp2 = (temp3 >> 0xc) + 0x6e;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x155) {\n        temp2 = (temp3 >> 0xf) + 0x77;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x555) {\n        temp2 = (temp3 >> 0x12) + 0x7c;\n        temp12 = temp2 * 2;\n      }\n      else {\n        temp12 = 0xfc;\n        temp2 = 0x7e;\n      }\n      temp7 = temp12 * 4 + 0x20070464;\n      temp10 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp12];\n      if (temp10 == temp7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp2 >> 2 & 0xffU);\n        temp11 = temp10;\n      }\n      else {\n        do {\n          temp11 = temp10;\n          if ((*(uint *)(temp10 + 4) & 0xfffffffc) <= temp4) break;\n          temp10 = *(dword *)(temp10 + 8);\n          temp11 = temp10;\n        } while (temp7 != temp10);\n        temp10 = *(dword *)(temp11 + 0xc);\n      }\n      temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(temp1 + 0xc) = temp10;\n      *(dword *)(temp1 + 8) = temp11;\n      *(dword *)(temp10 + 8) = temp1;\n      *(dword *)(temp11 + 0xc) = temp1;\n    }\n  }\n  temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp3 = 1 << ((int)temp14 >> 2 & 0xffU);\n  if (temp3 <= temp7) {\n    if ((temp7 & temp3) == 0) {\n      temp14 = temp14 & 0xfffffffc;\n      do {\n        temp3 = temp3 << 1;\n        temp14 = temp14 + 4;\n      } while ((temp7 & temp3) == 0);\n    }\n    do {\n      tempPtr4 = &Elf32_Rel_ARRAY_20070000[temp14 + 0x8c].r_info;\n      tempPtr2 = tempPtr4;\n      temp4 = temp14;\n      do {\n        for (tempPtr = (undefined *)tempPtr2[3]; tempPtr2 != (dword *)tempPtr;\n            tempPtr = *(undefined **)(tempPtr + 0xc)) {\n          temp6 = *(uint *)(tempPtr + 4) & 0xfffffffc;\n          temp8 = temp6 - temp13;\n          if (0xf < (int)temp8) {\n            temp2 = *(int *)(tempPtr + 8);\n            temp12 = *(int *)(tempPtr + 0xc);\n            tempPtr3 = tempPtr + temp13;\n            *(uint *)(tempPtr + 4) = temp13 | 1;\n            *(int *)(temp2 + 0xc) = temp12;\n            *(int *)(temp12 + 8) = temp2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)tempPtr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)tempPtr3;\n            *(undefined4 *)(tempPtr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(tempPtr3 + 8) = 0x2007046c;\n            *(uint *)(tempPtr3 + 4) = temp8 | 1;\n            *(uint *)(tempPtr3 + temp8) = temp8;\n            FUNC_00081f98(buffer);\n            return (int *)(tempPtr + 8);\n          }\n          if (-1 < (int)temp8) {\n            temp12 = *(int *)(tempPtr + 8);\n            temp2 = *(int *)(tempPtr + 0xc);\n            *(uint *)(tempPtr + temp6 + 4) = *(uint *)(tempPtr + temp6 + 4) | 1;\n            *(int *)(temp12 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp12;\n            FUNC_00081f98(buffer);\n            return (int *)(tempPtr + 8);\n          }\n        }\n        temp4 = temp4 + 1;\n        tempPtr2 = tempPtr2 + 2;\n      } while ((temp4 & 3) != 0);\n      do {\n        temp6 = temp14 & 3;\n        tempPtr = (undefined *)(tempPtr4 + -2);\n        temp14 = temp14 - 1;\n        if (temp6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp3;\n          break;\n        }\n        tempPtr4 = (dword *)*tempPtr4;\n      } while (tempPtr4 == (dword *)tempPtr);\n      temp3 = temp3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp3 &&\n           temp3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp14 = temp4, temp3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp3) == 0; temp3 = temp3 << 1) {\n        temp14 = temp14 + 4;\n      }\n    } while( true );\n  }\n  temp14 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp13 <= temp14) &&\n     (temp3 = temp14 - temp13, temp7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp3))\n  goto LAB_00081b1a;\n  temp3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp14;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp4 = temp13 + DAT_20071218 + 0x10;\n  }\n  else {\n    temp4 = temp13 + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  temp7 = update_value_and_check_0008236c(buffer,temp4);\n  if ((temp7 == 0xffffffff) || ((temp7 < temp3 && (temp1 != 0x20070464)))) {\n    temp14 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp6 = DAT_2007121c + temp4;\n    DAT_2007121c = temp6;\n    if ((temp3 == temp7) && ((temp3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp4 + temp14 | 1;\n    }\n    else {\n      temp10 = temp7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp10 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp6 + (temp7 - temp3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp10;\n      temp3 = temp7 & 7;\n      if (temp3 == 0) {\n        temp12 = 0x1000;\n      }\n      else {\n        temp7 = temp7 + (8 - temp3);\n        temp12 = 0x1008 - temp3;\n      }\n      temp12 = temp12 - (temp4 + temp7 & 0xfff);\n      temp2 = update_value_and_check_0008236c(buffer,temp12);\n      if (temp2 == -1) {\n        temp3 = 1;\n        temp12 = 0;\n      }\n      else {\n        temp3 = (temp2 - temp7) + temp12 | 1;\n      }\n      temp6 = DAT_2007121c + temp12;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp7;\n      DAT_2007121c = temp6;\n      *(uint *)(temp7 + 4) = temp3;\n      if (temp1 != 0x20070464) {\n        if (temp14 < 0x10) {\n          *(undefined4 *)(temp7 + 4) = 1;\n          temp14 = 0;\n          goto LAB_00081b04;\n        }\n        temp14 = temp14 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = temp14 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + temp14 + 4) = 5;\n        *(undefined4 *)(temp1 + temp14 + 8) = 5;\n        if (0xf < temp14) {\n          process_relocation_00083b10(buffer,temp1 + 8);\n          temp6 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp6) {\n      DAT_20071214 = temp6;\n    }\n    if (DAT_20071210 < temp6) {\n      DAT_20071210 = temp6;\n    }\n    temp14 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp3 = temp14 - temp13;\n  if ((temp14 < temp13) || ((int)temp3 < 0x10)) {\n    FUNC_00081f98(buffer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp13 + temp7;\n  *(uint *)(temp7 + 4) = temp13 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 | 1;\n  FUNC_00081f98(buffer);\n  return (int *)(temp7 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "reallocate_memory_00081810",
                "param_1": "buffer",
                "param_2": "size",
                "dVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "dVar7": "temp7",
                "uVar8": "temp8",
                "iVar9": "temp9",
                "puVar10": "tempPtr",
                "dVar11": "temp10",
                "dVar12": "temp11",
                "iVar13": "temp12",
                "pdVar14": "tempPtr2",
                "uVar15": "temp13",
                "puVar16": "tempPtr3",
                "pdVar17": "tempPtr4",
                "uVar18": "temp14"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *dstPointer;\n  undefined4 *srcPointer;\n  undefined4 *tempPointer;\n  uint remainingLength;\n  uint remainingLength2;\n  bool loopCondition;\n  \n  srcPointer = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      remainingLength2 = length - 4;\n      if (3 < length) {\n        do {\n          dstPointer = source;\n          tempPointer = srcPointer;\n          loopCondition = remainingLength2 != 0;\n          remainingLength2 = remainingLength2 - 1;\n          *(undefined *)tempPointer = *(undefined *)dstPointer;\n          srcPointer = (undefined4 *)((int)tempPointer + 1);\n          source = (undefined4 *)((int)dstPointer + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)tempPointer + 1) =\n             *(undefined *)(undefined4 *)((int)dstPointer + 1);\n        *(undefined *)((int)tempPointer + 2) = *(undefined *)((int)dstPointer + 2);\n        *(undefined *)((int)tempPointer + 3) = *(undefined *)((int)dstPointer + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingLength2 = 4 - ((uint)destination & 3);\n      length = length - remainingLength2;\n      dstPointer = destination;\n      tempPointer = source;\n      if (((uint)destination & 1) != 0) {\n        tempPointer = (undefined4 *)((int)source + 1);\n        dstPointer = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPointer = dstPointer;\n      source = tempPointer;\n      if ((remainingLength2 & 2) != 0) {\n        source = (undefined4 *)((int)tempPointer + 2);\n        srcPointer = (undefined4 *)((int)dstPointer + 2);\n        *(undefined2 *)dstPointer = *(undefined2 *)tempPointer;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *srcPointer = *source;\n    srcPointer[1] = source[1];\n    srcPointer[2] = source[2];\n    srcPointer[3] = source[3];\n    srcPointer[4] = source[4];\n    srcPointer[5] = source[5];\n    srcPointer[6] = source[6];\n    srcPointer[7] = source[7];\n    srcPointer[8] = source[8];\n    srcPointer[9] = source[9];\n    srcPointer[10] = source[10];\n    srcPointer[0xb] = source[0xb];\n    srcPointer[0xc] = source[0xc];\n    srcPointer[0xd] = source[0xd];\n    srcPointer[0xe] = source[0xe];\n    srcPointer[0xf] = source[0xf];\n    srcPointer = srcPointer + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *srcPointer = *source;\n      srcPointer[1] = source[1];\n      srcPointer[2] = source[2];\n      srcPointer[3] = source[3];\n      srcPointer = srcPointer + 4;\n      source = source + 4;\n      loopCondition = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (loopCondition);\n  }\n  remainingLength2 = remainingLength + 0xc;\n  tempPointer = srcPointer;\n  dstPointer = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = dstPointer + 1;\n      *tempPointer = *dstPointer;\n      loopCondition = 3 < remainingLength2;\n      remainingLength2 = remainingLength2 - 4;\n      srcPointer = tempPointer + 1;\n      tempPointer = tempPointer + 1;\n      dstPointer = source;\n    } while (loopCondition);\n  }\nLAB_00081dcc:\n  if (remainingLength2 + 4 != 0) {\n    dstPointer = srcPointer;\n    tempPointer = source;\n    if ((remainingLength2 & 1) != 0) {\n      tempPointer = (undefined4 *)((int)source + 1);\n      dstPointer = (undefined4 *)((int)srcPointer + 1);\n      *(undefined *)srcPointer = *(undefined *)source;\n    }\n    if ((remainingLength2 + 4 & 2) != 0) {\n      *(undefined2 *)dstPointer = *(undefined2 *)tempPointer;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dstPointer",
                "puVar2": "srcPointer",
                "puVar3": "tempPointer",
                "uVar4": "remainingLength",
                "uVar5": "remainingLength2",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *copyPtr;\n  uint copySize;\n  undefined *copyEnd;\n  uint remainderSize;\n  \n  if ((source < destination) && (copyPtr = (undefined4 *)((int)source + size), destination < copyPtr)) {\n    copyEnd = (undefined *)((int)destination + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        copyPtr = (undefined4 *)((int)copyPtr + -1);\n        index = index + -1;\n        copyEnd = copyEnd + -1;\n        *copyEnd = *(undefined *)copyPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    copyPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = copyPtr + 4;\n      *copyPtr = *srcPtr;\n      copyPtr[1] = srcPtr[1];\n      copyPtr[2] = srcPtr[2];\n      copyPtr[3] = srcPtr[3];\n      copyPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainderSize = size & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    copySize = remainderSize;\n    copyPtr = destination;\n    srcPtr = source;\n    if (3 < remainderSize) {\n      do {\n        copySize = copySize - 4;\n        *copyPtr = *srcPtr;\n        copyPtr = copyPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < copySize);\n      index = (remainderSize - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remainderSize = size & 3;\n    }\n    size = remainderSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  copyPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)copyPtr + 1);\n    *(undefined *)copyPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    copyPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "copyPtr",
                "uVar5": "copySize",
                "puVar6": "copyEnd",
                "uVar7": "remainderSize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_memory_with_pattern_00081f00",
            "code": "\nvoid fillMemoryWithPattern_00081f00(undefined4 *destination,undefined pattern,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  undefined4 pattern32;\n  uint remainingLength;\n  bool isPatternZero;\n  \n  if (((uint)destination & 3) != 0) {\n    isPatternZero = length == 0;\n    destPtr = destination;\n    length = length - 1;\n    if (isPatternZero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = pattern;\n      if (((uint)destination & 3) == 0) break;\n      isPatternZero = length == 0;\n      destPtr = destination;\n      length = length - 1;\n      if (isPatternZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    pattern32 = CONCAT22(CONCAT11(pattern,pattern),CONCAT11(pattern,pattern));\n    remainingLength = length;\n    destPtr = destination;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      do {\n        *destPtr = pattern32;\n        destPtr[1] = pattern32;\n        destPtr[2] = pattern32;\n        destPtr[3] = pattern32;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (remainingLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      destination = destination + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      destPtr = destination;\n      if (length < 4) goto LAB_00081f7c;\n    }\n    do {\n      length = length - 4;\n      *destination = pattern32;\n      destination = destination + 1;\n    } while (3 < length);\n    destination = (undefined4 *)((int)destPtr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_00081f7c:\n  if (length != 0) {\n    destPtr = destination;\n    do {\n      tempPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = pattern;\n      destPtr = tempPtr;\n    } while (tempPtr != (undefined4 *)(length + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_memory_with_pattern_00081f00",
                "param_1": "destination",
                "param_2": "pattern",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "tempPtr",
                "uVar3": "pattern32",
                "uVar4": "remainingLength",
                "bVar5": "isPatternZero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_or_copy_memory_00081f9c",
            "code": "\nvoid reallocateOrCopyMemory_00081f9c(undefined4 source,undefined4 destination)\n\n{\n  reallocate_or_copy_memory_00081fac(relocationTable[140].r_offset,source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_or_copy_memory_00081f9c",
                "param_1": "source",
                "param_2": "destination",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "reallocate_or_copy_memory_00081fac",
            "code": "\nint * reallocateOrCopyMemory_00081fac(undefined4 *memoryPointer,int *existingMemory,uint requiredSize)\n\n{\n  dword calculatedValue1;\n  int *newMemory;\n  uint calculatedValue2;\n  int tempVariable1;\n  uint sizeAndFlag;\n  int tempVariable2;\n  int *tempPointer;\n  uint existingBlockSize;\n  uint requiredBlockSize;\n  int *tempPointer2;\n  \n  if (existingMemory == (int *)0x0) {\n    newMemory = (int *)reallocate_memory_00081810(memoryPointer,requiredSize);\n    return newMemory;\n  }\n  FUNC_00081f94();\n  sizeAndFlag = existingMemory[-1];\n  existingBlockSize = sizeAndFlag & 0xfffffffc;\n  newMemory = existingMemory + -2;\n  if (requiredSize + 0xb < 0x17) {\n    requiredBlockSize = 0x10;\n  }\n  else {\n    requiredBlockSize = requiredSize + 0xb & 0xfffffff8;\n    if ((int)requiredBlockSize < 0) goto LAB_00082078;\n  }\n  if (requiredBlockSize < requiredSize) {\nLAB_00082078:\n    *memoryPointer = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)existingBlockSize < (int)requiredBlockSize) {\n    calculatedValue1 = (int)newMemory + existingBlockSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == calculatedValue1) {\n      calculatedValue2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      calculatedValue1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(requiredBlockSize + 0x10) <= (int)(calculatedValue2 + existingBlockSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemory + requiredBlockSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (calculatedValue2 + existingBlockSize) - requiredBlockSize | 1;\n        existingMemory[-1] = requiredBlockSize | existingMemory[-1] & 1U;\n        FUNC_00081f98(memoryPointer);\n        return existingMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(calculatedValue1 + 4) & 0xfffffffe) + calculatedValue1 + 4) & 1) == 0) {\n      calculatedValue2 = *(uint *)(calculatedValue1 + 4) & 0xfffffffc;\n      if ((int)requiredBlockSize <= (int)(calculatedValue2 + existingBlockSize)) {\n        tempVariable2 = *(int *)(calculatedValue1 + 0xc);\n        tempVariable1 = *(int *)(calculatedValue1 + 8);\n        *(int *)(tempVariable1 + 0xc) = tempVariable2;\n        *(int *)(tempVariable2 + 8) = tempVariable1;\n        existingBlockSize = calculatedValue2 + existingBlockSize;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      calculatedValue2 = 0;\n      calculatedValue1 = 0;\n    }\n    if (-1 < (int)(sizeAndFlag << 0x1f)) {\n      tempPointer2 = (int *)((int)newMemory - existingMemory[-2]);\n      sizeAndFlag = (tempPointer2[1] & 0xfffffffcU) + existingBlockSize;\n      if (calculatedValue1 != 0) {\n        if (calculatedValue1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(requiredBlockSize + 0x10) <= (int)(calculatedValue2 + sizeAndFlag)) {\n            newMemory = tempPointer2 + 2;\n            tempVariable1 = *newMemory;\n            tempVariable2 = tempPointer2[3];\n            existingBlockSize = existingBlockSize - 4;\n            *(int *)(tempVariable1 + 0xc) = tempVariable2;\n            *(int *)(tempVariable2 + 8) = tempVariable1;\n            if (existingBlockSize < 0x25) {\n              tempPointer = newMemory;\n              if (0x13 < existingBlockSize) {\n                tempPointer2[2] = *existingMemory;\n                tempPointer2[3] = existingMemory[1];\n                if (existingBlockSize < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  tempPointer = tempPointer2 + 4;\n                }\n                else {\n                  tempPointer2[4] = existingMemory[2];\n                  tempPointer2[5] = existingMemory[3];\n                  if (existingBlockSize == 0x24) {\n                    tempPointer2[6] = existingMemory[4];\n                    tempPointer = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    tempPointer2[7] = *tempPointer;\n                    tempPointer = tempPointer2 + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    tempPointer = tempPointer2 + 6;\n                  }\n                }\n              }\n              *tempPointer = *existingMemory;\n              tempPointer[1] = existingMemory[1];\n              tempPointer[2] = existingMemory[2];\n            }\n            else {\n              copy_memory_00081e34(newMemory,existingMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)tempPointer2 + requiredBlockSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (calculatedValue2 + sizeAndFlag) - requiredBlockSize | 1;\n            tempPointer2[1] = requiredBlockSize | tempPointer2[1] & 1U;\n            FUNC_00081f98(memoryPointer);\n            return newMemory;\n          }\n        }\n        else {\n          calculatedValue2 = calculatedValue2 + sizeAndFlag;\n          if ((int)requiredBlockSize <= (int)calculatedValue2) {\n            tempVariable2 = *(int *)(calculatedValue1 + 0xc);\n            tempVariable1 = *(int *)(calculatedValue1 + 8);\n            *(int *)(tempVariable1 + 0xc) = tempVariable2;\n            *(int *)(tempVariable2 + 8) = tempVariable1;\n            tempPointer = tempPointer2 + 2;\n            tempVariable1 = *tempPointer;\n            tempVariable2 = tempPointer2[3];\n            sizeAndFlag = existingBlockSize - 4;\n            *(int *)(tempVariable1 + 0xc) = tempVariable2;\n            *(int *)(tempVariable2 + 8) = tempVariable1;\n            existingBlockSize = calculatedValue2;\n            if (sizeAndFlag < 0x25) {\n              newMemory = tempPointer;\n              if (0x13 < sizeAndFlag) {\n                tempPointer2[2] = *existingMemory;\n                tempPointer2[3] = existingMemory[1];\n                if (sizeAndFlag < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  newMemory = tempPointer2 + 4;\n                }\n                else {\n                  tempPointer2[4] = existingMemory[2];\n                  tempPointer2[5] = existingMemory[3];\n                  if (sizeAndFlag == 0x24) {\n                    tempPointer2[6] = existingMemory[4];\n                    newMemory = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    tempPointer2[7] = *newMemory;\n                    newMemory = tempPointer2 + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    newMemory = tempPointer2 + 6;\n                  }\n                }\n              }\n              *newMemory = *existingMemory;\n              newMemory[1] = existingMemory[1];\n              newMemory[2] = existingMemory[2];\n              sizeAndFlag = tempPointer2[1];\n              newMemory = tempPointer2;\n              existingMemory = tempPointer;\n            }\n            else {\n              copy_memory_00081e34(tempPointer,existingMemory);\n              sizeAndFlag = tempPointer2[1];\n              newMemory = tempPointer2;\n              existingMemory = tempPointer;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)requiredBlockSize <= (int)sizeAndFlag) {\n        tempPointer = tempPointer2 + 2;\n        tempVariable1 = *tempPointer;\n        tempVariable2 = tempPointer2[3];\n        calculatedValue2 = existingBlockSize - 4;\n        *(int *)(tempVariable1 + 0xc) = tempVariable2;\n        *(int *)(tempVariable2 + 8) = tempVariable1;\n        existingBlockSize = sizeAndFlag;\n        if (calculatedValue2 < 0x25) {\n          newMemory = tempPointer;\n          if (0x13 < calculatedValue2) {\n            tempPointer2[2] = *existingMemory;\n            tempPointer2[3] = existingMemory[1];\n            if (calculatedValue2 < 0x1c) {\n              existingMemory = existingMemory + 2;\n              newMemory = tempPointer2 + 4;\n            }\n            else {\n              tempPointer2[4] = existingMemory[2];\n              tempPointer2[5] = existingMemory[3];\n              if (calculatedValue2 == 0x24) {\n                tempPointer2[6] = existingMemory[4];\n                newMemory = existingMemory + 5;\n                existingMemory = existingMemory + 6;\n                tempPointer2[7] = *newMemory;\n                newMemory = tempPointer2 + 8;\n              }\n              else {\n                existingMemory = existingMemory + 4;\n                newMemory = tempPointer2 + 6;\n              }\n            }\n          }\n          *newMemory = *existingMemory;\n          newMemory[1] = existingMemory[1];\n          newMemory[2] = existingMemory[2];\n          sizeAndFlag = tempPointer2[1];\n          newMemory = tempPointer2;\n          existingMemory = tempPointer;\n        }\n        else {\n          copy_memory_00081e34(tempPointer,existingMemory);\n          sizeAndFlag = tempPointer2[1];\n          newMemory = tempPointer2;\n          existingMemory = tempPointer;\n        }\n        goto LAB_00082088;\n      }\n    }\n    tempPointer2 = (int *)reallocate_memory_00081810(memoryPointer,requiredSize);\n    if (tempPointer2 == (int *)0x0) goto LAB_000820a0;\n    sizeAndFlag = existingMemory[-1];\n    if (tempPointer2 + -2 != (int *)((sizeAndFlag & 0xfffffffe) + (int)newMemory)) {\n      existingBlockSize = existingBlockSize - 4;\n      if (existingBlockSize < 0x25) {\n        newMemory = existingMemory;\n        tempPointer = tempPointer2;\n        if (0x13 < existingBlockSize) {\n          *tempPointer2 = *existingMemory;\n          tempPointer2[1] = existingMemory[1];\n          if (existingBlockSize < 0x1c) {\n            newMemory = existingMemory + 2;\n            tempPointer = tempPointer2 + 2;\n          }\n          else {\n            tempPointer2[2] = existingMemory[2];\n            tempPointer2[3] = existingMemory[3];\n            if (existingBlockSize == 0x24) {\n              tempPointer2[4] = existingMemory[4];\n              tempPointer2[5] = existingMemory[5];\n              newMemory = existingMemory + 6;\n              tempPointer = tempPointer2 + 6;\n            }\n            else {\n              newMemory = existingMemory + 4;\n              tempPointer = tempPointer2 + 4;\n            }\n          }\n        }\n        *tempPointer = *newMemory;\n        tempPointer[1] = newMemory[1];\n        tempPointer[2] = newMemory[2];\n      }\n      else {\n        copy_memory_00081e34(tempPointer2,existingMemory);\n      }\n      process_relocation_00083b10(memoryPointer,existingMemory);\n      goto LAB_000820a0;\n    }\n    existingBlockSize = existingBlockSize + (tempPointer2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  calculatedValue2 = existingBlockSize - requiredBlockSize;\n  tempPointer2 = existingMemory;\n  if (calculatedValue2 < 0x10) {\n    newMemory[1] = sizeAndFlag & 1 | existingBlockSize;\n    *(uint *)((int)newMemory + existingBlockSize + 4) = *(uint *)((int)newMemory + existingBlockSize + 4) | 1;\n  }\n  else {\n    newMemory[1] = sizeAndFlag & 1 | requiredBlockSize;\n    *(uint *)((int)newMemory + requiredBlockSize + 4) = calculatedValue2 | 1;\n    *(uint *)((int)newMemory + calculatedValue2 + requiredBlockSize + 4) = *(uint *)((int)newMemory + calculatedValue2 + requiredBlockSize + 4) | 1;\n    process_relocation_00083b10(memoryPointer,(int)newMemory + requiredBlockSize + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(memoryPointer);\n  return tempPointer2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "reallocate_or_copy_memory_00081fac",
                "param_1": "memoryPointer",
                "param_2": "existingMemory",
                "param_3": "requiredSize",
                "dVar1": "calculatedValue1",
                "piVar2": "newMemory",
                "uVar3": "calculatedValue2",
                "iVar4": "tempVariable1",
                "uVar5": "sizeAndFlag",
                "iVar6": "tempVariable2",
                "piVar7": "tempPointer",
                "uVar8": "existingBlockSize",
                "uVar9": "requiredBlockSize",
                "piVar10": "tempPointer2"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "update_value_and_check_0008236c",
            "code": "\nvoid updateValueAndCheck_0008236c(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = add_with_previous_value_00080e88(inputValue);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "update_value_and_check_0008236c",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_buffers_00082390",
            "code": "\nint compareBuffers_00082390(uint *buffer1,uint *buffer2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint value1;\n  uint temp1;\n  uint value2;\n  uint temp2;\n  uint temp3;\n  \n  if ((((uint)buffer1 | (uint)buffer2) & 7) != 0) {\n    ptr1 = buffer1;\n    if (((uint)buffer1 & 3) != 0) {\n      ptr1 = (uint *)((uint)buffer1 & 0xfffffffc) + 1;\n      value1 = *(uint *)((uint)buffer1 & 0xfffffffc);\n      ptr2 = buffer2;\n      if (((uint)buffer1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp1 = value1 >> 0x10 & 0xff;\n        result = temp1 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = buffer2;\n        if (((uint)buffer1 & 2) == 0) {\n          ptr2 = (uint *)((int)buffer2 + 1);\n          temp1 = value1 >> 8 & 0xff;\n          result = temp1 - *(byte *)buffer2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp1 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      buffer2 = (uint *)((int)ptr3 + 1);\n      result = (value1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (value1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    value1 = (uint)buffer2 & 3;\n    if (value1 != 0) {\n      buffer2 = (uint *)((uint)buffer2 & 0xfffffffc);\n      if (value1 == 2) {\n        value1 = *buffer2;\n        do {\n          buffer2 = buffer2 + 1;\n          value2 = *ptr1;\n          value1 = value1 >> 0x10;\n          temp2 = value2 + 0xfefefeff & ~value2;\n          temp3 = temp2 & 0x80808080;\n          temp1 = value2 & 0xffff;\n          if ((temp2 & 0x8080) != 0 || temp1 != value1) goto LAB_0008258e;\n          value1 = *buffer2;\n          temp1 = temp1 ^ value2;\n          value2 = value1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp3 == 0 && temp1 == value2);\n      }\n      else if (value1 < 2) {\n        value1 = *buffer2;\n        do {\n          buffer2 = buffer2 + 1;\n          value2 = *ptr1;\n          value1 = value1 >> 8;\n          temp2 = value2 + 0xfefefeff & ~value2;\n          temp3 = temp2 & 0x80808080;\n          temp1 = value2 & 0xffffff;\n          if ((temp2 & 0x808080) != 0 || temp1 != value1) goto LAB_0008258e;\n          value1 = *buffer2;\n          temp1 = temp1 ^ value2;\n          value2 = value1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp3 == 0 && temp1 == value2);\n      }\n      else {\n        value1 = *buffer2;\n        do {\n          buffer2 = buffer2 + 1;\n          value2 = *ptr1;\n          value1 = value1 >> 0x18;\n          temp2 = value2 + 0xfefefeff & ~value2;\n          temp3 = temp2 & 0x80808080;\n          temp1 = value2 & 0xff;\n          if ((temp2 & 0x80) != 0 || temp1 != value1) goto LAB_0008258e;\n          value1 = *buffer2;\n          temp1 = temp1 ^ value2;\n          value2 = value1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp3 == 0 && temp1 == value2);\n      }\n      temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n              temp1 >> 0x18;\n      value1 = (value2 >> 8 & 0xff) << 0x10 | (value2 >> 0x10 & 0xff) << 8 | value2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    buffer1 = ptr1;\n    ptr2 = buffer2;\n    if (((uint)ptr1 & 4) != 0) {\n      buffer1 = ptr1 + 1;\n      value1 = *ptr1;\n      ptr2 = buffer2 + 1;\n      value2 = *buffer2;\n      temp3 = value1 + 0xfefefeff & ~value1 & 0x80808080;\n      if (value1 != value2 || temp3 != 0) {\nLAB_0008259a:\n        temp1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 |\n                value1 >> 0x18;\n        value1 = value2 << 0x18 | (value2 >> 8 & 0xff) << 0x10 | (value2 >> 0x10 & 0xff) << 8 |\n                value2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    buffer2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      value1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp1 = *buffer1;\n        value2 = buffer1[1];\n        temp3 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n        if (temp1 != value1 || temp3 != 0) goto LAB_0008258e;\n        temp2 = *ptr1;\n        value1 = ptr1[1];\n        temp3 = value2 + 0xfefefeff & ~value2 & 0x80808080;\n        buffer1 = buffer1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (value2 == temp2 && temp3 == 0);\n      temp1 = value2 << 0x18 | (value2 >> 8 & 0xff) << 0x10 | (value2 >> 0x10 & 0xff) << 8 |\n              value2 >> 0x18;\n      value1 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    value1 = *buffer1;\n    temp1 = buffer1[1];\n    value2 = *buffer2;\n    temp2 = buffer2[1];\n    temp3 = value1 + 0xfefefeff & ~value1 & 0x80808080;\n    if (value1 != value2 || temp3 != 0) goto LAB_0008259a;\n    temp3 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    buffer1 = buffer1 + 2;\n    buffer2 = buffer2 + 2;\n  } while (temp1 == temp2 && temp3 == 0);\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  value1 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\nLAB_0008259e:\n  value2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n  if (value2 != 0) {\n    value2 = 0x18 - LZCOUNT(value2);\n    temp1 = temp1 >> (value2 & 0xff);\n    value1 = value1 >> (value2 & 0xff);\n  }\n  result = 1;\n  if (temp1 <= value1) {\n    result = -(uint)(temp1 < value1);\n  }\n  return result;\nLAB_0008258e:\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  value1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 | value1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_buffers_00082390",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "value1",
                "uVar6": "temp1",
                "uVar7": "value2",
                "uVar8": "temp2",
                "uVar9": "temp3"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copyString_000825cc(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *tempPtr1;\n  uint *tempPtr2;\n  uint currentInt;\n  uint tempInt;\n  uint *destPtr;\n  bool isZero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    tempPtr2 = src;\n    if (((uint)src & 1) != 0) {\n      tempPtr2 = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = tempPtr2;\n    if (((uint)tempPtr2 & 2) != 0) {\n      src = (uint *)((int)tempPtr2 + 2);\n      currentShort = *(ushort *)tempPtr2;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentInt = *src;\n  tempPtr2 = src + 1;\n  destPtr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentInt + 0xfefefeff & ~currentInt & 0x80808080) != 0) goto LAB_00082630;\n    destPtr = dest + 1;\n    *dest = currentInt;\n    tempPtr2 = src + 2;\n    currentInt = src[1];\n  }\n  while( true ) {\n    tempPtr1 = tempPtr2 + 1;\n    tempInt = *tempPtr2;\n    dest = destPtr;\n    if ((currentInt + 0xfefefeff & ~currentInt & 0x80808080) != 0) break;\n    dest = destPtr + 1;\n    *destPtr = currentInt;\n    currentInt = tempInt;\n    if ((tempInt + 0xfefefeff & ~tempInt & 0x80808080) != 0) break;\n    tempPtr2 = tempPtr2 + 2;\n    currentInt = *tempPtr1;\n    destPtr = destPtr + 2;\n    *dest = tempInt;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)currentInt;\n    tempInt = currentInt & 0xff;\n    currentInt = currentInt >> 8 | currentInt << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (tempInt != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "tempPtr1",
                "puVar4": "tempPtr2",
                "uVar5": "currentInt",
                "uVar6": "tempInt",
                "puVar7": "destPtr",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int leadingZerosCount;\n  uint *words;\n  uint word;\n  bool isZeroByte;\n  \n  words = (uint *)(input & 0xfffffffc);\n  leadingZerosCount = -(input & 3);\n  word = *words;\n  if ((input & 3) != 0) {\n    word = word | 0xffffffffU >> ((leadingZerosCount + 4U & 0x1f) << 3);\n  }\n  while (words = words + 1, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    leadingZerosCount = leadingZerosCount + 4;\n    word = *words;\n  }\n  isZeroByte = (word & 0xff) == 0;\n  if (!isZeroByte) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZeroByte = (word & 0xff00) == 0;\n  }\n  if (!isZeroByte) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZeroByte = (word & 0xff0000) == 0;\n  }\n  if (!isZeroByte) {\n    leadingZerosCount = leadingZerosCount + 1;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leadingZerosCount",
                "puVar2": "words",
                "uVar3": "word",
                "bVar4": "isZeroByte"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 arg1,int arg2,int **ptrArray)\n\n{\n  int *ptr1;\n  int returnValue;\n  int *ptr2;\n  uint count1;\n  undefined4 *ptr3;\n  uint value;\n  uint count2;\n  \n  if (-1 < *(int *)(arg2 + 100) << 0x12) {\n    returnValue = process_data_00083ca8();\n    ptrArray[2] = (int *)0x0;\n    ptrArray[1] = (int *)0x0;\n    return returnValue;\n  }\n  ptr2 = ptrArray[2];\n  ptr1 = *ptrArray;\n  while (ptr2 != (int *)0x0) {\n    value = ptr1[1];\n    count2 = value >> 2;\n    if (count2 != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      count1 = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        returnValue = execute_relocation_000839b4(arg1,*ptr3,arg2);\n        count1 = count1 + 1;\n        if (returnValue == -1) goto LAB_00082864;\n      } while (count2 != count1);\n      ptr2 = ptrArray[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value & 0xfffffffc));\n    ptrArray[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  returnValue = 0;\nLAB_00082864:\n  ptrArray[2] = (int *)0x0;\n  ptrArray[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "ptrArray",
                "piVar1": "ptr1",
                "iVar2": "returnValue",
                "piVar3": "ptr2",
                "uVar4": "count1",
                "puVar5": "ptr3",
                "uVar6": "value",
                "uVar7": "count2"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_data_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processData_0008289c(int dataPointer,int infoPointer,int *******formatStringPointer,int **argumentsPointer)\n\n{\n  bool isSigned;\n  bool isLong;\n  bool isAlternate;\n  char signChar;\n  bool isZeroPadded;\n  int ********argListPointer;\n  int *argPointer;\n  int argIndex;\n  char digitChar;\n  int *******currentFormatCharPointer;\n  uint digitValue;\n  int **tempPointer;\n  uint formatFlag;\n  uint tempValue1;\n  int tempValue3;\n  int ********ptempPointer1;\n  int tempValue4;\n  int *******tempPointer2;\n  int *tempPointer3;\n  int *******tempPointer4;\n  uint tempValue2;\n  int *piVar22;\n  int *******tempPointer5;\n  undefined4 tempValue5;\n  int ********ptempPointer6;\n  bool isNegative;\n  longlong tempLongLong;\n  int *******currentDataPtr;\n  int *******totalDataPtr;\n  int **argsPtr;\n  int totalArgCount;\n  char *digits;\n  char currentFormatChar;\n  undefined zeroPadChar;\n  undefined digitsChar1;\n  int ********currentArgPtr;\n  int argCount;\n  int *******dataPtrArray;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******tempDataPtrArray [16];\n  \n  if ((dataPointer != 0) && (*(int *)(dataPointer + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  formatFlag = (uint)*(ushort *)(infoPointer + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(infoPointer + 0xc) << 0x12)) {\n    formatFlag = formatFlag | 0x2000;\n    *(short *)(infoPointer + 0xc) = (short)formatFlag;\n    *(uint *)(infoPointer + 100) = *(uint *)(infoPointer + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlag << 0x1c) < 0) && (*(int *)(infoPointer + 0x10) != 0)) {\n    if ((formatFlag & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    argIndex = handle_relocation_0008356c(dataPointer,infoPointer);\n    if (argIndex != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(infoPointer + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(infoPointer + 0xe)) {\n    argIndex = process_data_000834f0(dataPointer,infoPointer,formatStringPointer,argumentsPointer);\n    return argIndex;\n  }\nLAB_000828ee:\n  digits = (char *)0x0;\n  dataPtrArray = (int *******)0x0;\n  argCount = 0;\n  totalArgCount = 0;\n  argListPointer = (int ********)local_68;\n  argsPtr = argumentsPointer;\n  currentArgPtr = (int ********)local_68;\nLAB_00082902:\n  currentFormatCharPointer = formatStringPointer;\n  if ((*(char *)formatStringPointer != '\\0') && (*(char *)formatStringPointer != '%')) {\n    do {\n      currentFormatCharPointer = (int *******)((int)currentFormatCharPointer + 1);\n      if (*(char *)currentFormatCharPointer == '\\0') break;\n    } while (*(char *)currentFormatCharPointer != '%');\n    tempPointer4 = (int *******)((int)currentFormatCharPointer - (int)formatStringPointer);\n    if (tempPointer4 != (int *******)0x0) {\n      argCount = argCount + 1;\n      dataPtrArray = (int *******)((int)dataPtrArray + (int)tempPointer4);\n      *argListPointer = formatStringPointer;\n      argListPointer[1] = tempPointer4;\n      if (argCount < 8) {\n        argListPointer = argListPointer + 2;\n      }\n      else {\n        if (dataPtrArray == (int *******)0x0) {\n          totalArgCount = totalArgCount + (int)tempPointer4;\n          argCount = 0;\n          argListPointer = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n        argListPointer = (int ********)local_68;\n        if (argIndex != 0) goto LAB_00083142;\n      }\n      totalArgCount = totalArgCount + (int)tempPointer4;\n    }\n  }\nLAB_00082952:\n  if (*(char *)currentFormatCharPointer != '\\0') {\n    currentFormatChar = '\\0';\n    tempValue1 = (uint)*(byte *)((int)currentFormatCharPointer + 1);\n    formatFlag = 0;\n    isZeroPadded = false;\n    isLong = false;\n    isSigned = false;\n    isAlternate = false;\n    isNegative = false;\n    tempPointer4 = (int *******)0x0;\n    totalDataPtr = (int *******)0xffffffff;\n    formatStringPointer = (int *******)((int)currentFormatCharPointer + 1);\nLAB_00082976:\n    formatStringPointer = (int *******)((int)formatStringPointer + 1);\nLAB_0008297a:\n    switch(tempValue1) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (tempValue1 != 0) {\n        currentDataPtr = (int *******)0x1;\n        totalDataPtr = (int *******)0x1;\n        ptempPointer6 = (int ********)&local_90;\n        local_90 = (char)tempValue1;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isAlternate = true;\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      goto LAB_00082976;\n    case 0x2a:\n      tempPointer4 = (int *******)*argsPtr;\n      argsPtr = argsPtr + 1;\n      if ((int)tempPointer4 < 0) {\n        tempPointer4 = (int *******)-(int)tempPointer4;\n        goto switchD_00082984_caseD_2d;\n      }\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      goto LAB_00082976;\n    case 0x2b:\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      currentFormatChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      formatFlag = formatFlag | 4;\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      goto LAB_00082976;\n    case 0x2e:\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      currentFormatCharPointer = (int *******)((int)formatStringPointer + 1);\n      if (tempValue1 == 0x2a) {\n        tempValue1 = (uint)*(byte *)((int)formatStringPointer + 1);\n        totalDataPtr = (int *******)*argsPtr;\n        argsPtr = argsPtr + 1;\n        formatStringPointer = currentFormatCharPointer;\n        if ((int)totalDataPtr < 0) {\n          totalDataPtr = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digitValue = tempValue1 - 0x30;\n      if (digitValue < 10) {\n        tempValue2 = 0;\n        do {\n          formatStringPointer = (int *******)((int)currentFormatCharPointer + 1);\n          tempValue1 = (uint)*(byte *)currentFormatCharPointer;\n          tempValue2 = digitValue + tempValue2 * 10;\n          digitValue = tempValue1 - 0x30;\n          currentFormatCharPointer = formatStringPointer;\n        } while (digitValue < 10);\n        totalDataPtr = (int *******)(tempValue2 | (int)tempValue2 >> 0x1f);\n      }\n      else {\n        totalDataPtr = (int *******)0x0;\n        formatStringPointer = currentFormatCharPointer;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      formatFlag = formatFlag | 0x80;\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isLong = true;\n      if (isSigned == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argsPtr = (int **)((int)argsPtr + 7U & 0xfffffff8);\n      tempPointer3 = *argsPtr;\n      piVar22 = argsPtr[1];\n      argsPtr = argsPtr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isLong = true;\n      if (isSigned != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      argIndex = (uint)isLong << 4;\n      tempValue3 = (uint)isSigned << 5;\n      if ((isLong == 0) && (tempValue3 = (uint)isNegative << 6, isNegative != 0)) {\n        tempPointer3 = (int *)(uint)*(ushort *)argsPtr;\n        argsPtr = argsPtr + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        argIndex = tempValue3;\n        tempPointer3 = *argsPtr;\n        argsPtr = argsPtr + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isLong = true;\n      if (isSigned != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isLong) || (isNegative == false)) {\n        argIndex = 1;\n        tempPointer3 = *argsPtr;\n        argsPtr = argsPtr + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        tempPointer3 = (int *)(uint)*(ushort *)argsPtr;\n        argsPtr = argsPtr + 1;\n        argIndex = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (isSigned == false) goto LAB_00082efa;\nLAB_00082d1a:\n      tempPointer = (int **)((int)argsPtr + 7U & 0xfffffff8);\n      argsPtr = tempPointer + 2;\n      tempPointer3 = *tempPointer;\n      piVar22 = tempPointer[1];\n      goto LAB_00082d2e;\n    case 99:\n      tempPointer3 = *argsPtr;\n      argsPtr = argsPtr + 1;\n      currentDataPtr = (int *******)0x1;\n      local_90 = SUB41(tempPointer3,0);\n      totalDataPtr = (int *******)0x1;\n      ptempPointer6 = (int ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isSigned != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isLong == false) && (isNegative != false)) {\n        tempPointer3 = (int *)(int)*(short *)argsPtr;\n        argsPtr = argsPtr + 1;\n        piVar22 = (int *)((int)tempPointer3 >> 0x1f);\n      }\n      else {\n        tempPointer3 = *argsPtr;\n        argsPtr = argsPtr + 1;\n        piVar22 = (int *)((int)tempPointer3 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        isNegative = tempPointer3 != (int *)0x0;\n        tempPointer3 = (int *)-(int)tempPointer3;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isNegative);\n        currentFormatChar = '-';\n        signChar = '-';\n        argIndex = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)totalDataPtr) {\n        formatFlag = formatFlag & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      tempValue1 = (uint)tempPointer3 | (uint)piVar22;\n      argIndex = 1;\n      signChar = currentFormatChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNegative = true;\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      goto LAB_00082976;\n    case 0x6c:\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      if (tempValue1 == 0x6c) {\n        isSigned = true;\n        tempValue1 = (uint)*(byte *)((int)formatStringPointer + 1);\n        formatStringPointer = (int *******)((int)formatStringPointer + 1);\n      }\n      else {\n        isLong = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isSigned == false) {\n        if (isLong == false) {\n          if (isNegative) {\n            tempPointer3 = *argsPtr;\n            argsPtr = argsPtr + 1;\n            *(short *)tempPointer3 = (short)totalArgCount;\n          }\n          else {\n            tempPointer3 = *argsPtr;\n            argsPtr = argsPtr + 1;\n            *tempPointer3 = totalArgCount;\n          }\n        }\n        else {\n          tempPointer3 = *argsPtr;\n          argsPtr = argsPtr + 1;\n          *tempPointer3 = totalArgCount;\n        }\n      }\n      else {\n        tempPointer3 = *argsPtr;\n        argsPtr = argsPtr + 1;\n        *tempPointer3 = totalArgCount;\n        tempPointer3[1] = totalArgCount >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isSigned == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      tempPointer = (int **)((int)argsPtr + 7U & 0xfffffff8);\n      argsPtr = tempPointer + 2;\n      tempPointer3 = *tempPointer;\n      piVar22 = tempPointer[1];\n      argIndex = 0;\n      break;\n    case 0x70:\n      tempPointer3 = *argsPtr;\n      argsPtr = argsPtr + 1;\n      digitsChar1 = 0x78;\n      isZeroPadded = true;\n      piVar22 = (int *)0x0;\n      zeroPadChar = 0x30;\n      digits = \"0123456789abcdef\";\n      argIndex = 2;\n      break;\n    case 0x71:\n      isSigned = true;\n      tempValue1 = (uint)*(byte *)formatStringPointer;\n      goto LAB_00082976;\n    case 0x73:\n      ptempPointer6 = (int ********)*argsPtr;\n      currentFormatChar = '\\0';\n      argsPtr = argsPtr + 1;\n      if (ptempPointer6 != (int ********)0x0) {\n        if ((int)totalDataPtr < 0) {\n          totalDataPtr = (int *******)count_leading_zeros_00082688(ptempPointer6);\n          currentFormatCharPointer = (int *******)0x0;\n          signChar = currentFormatChar;\n        }\n        else {\n          argIndex = find_first_occurrence_000840f8(ptempPointer6,0,totalDataPtr);\n          signChar = currentFormatChar;\n          if (argIndex == 0) {\n            currentFormatCharPointer = (int *******)0x0;\n          }\n          else {\n            tempPointer2 = (int *******)(argIndex - (int)ptempPointer6);\n            if ((int)totalDataPtr <= (int)(int *******)(argIndex - (int)ptempPointer6)) {\n              tempPointer2 = totalDataPtr;\n            }\n            currentFormatCharPointer = (int *******)0x0;\n            totalDataPtr = tempPointer2;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < totalDataPtr) {\n        totalDataPtr = (int *******)0x6;\n      }\n      currentDataPtr = (int *******)((uint)totalDataPtr & ~((int)totalDataPtr >> 0x1f));\n      ptempPointer6 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      currentFormatChar = '\\0';\n      currentFormatCharPointer = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isSigned) goto LAB_00082ce0;\nLAB_00082bc6:\n      tempPointer = (int **)((int)argsPtr + 7U & 0xfffffff8);\n      argsPtr = tempPointer + 2;\n      tempPointer3 = *tempPointer;\n      piVar22 = tempPointer[1];\n      argIndex = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (isSigned != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isLong == false) && (isNegative != false)) {\n        piVar22 = (int *)0x0;\n        tempPointer3 = (int *)(uint)*(ushort *)argsPtr;\n        argsPtr = argsPtr + 1;\n      }\n      else {\n        tempPointer3 = *argsPtr;\n        argsPtr = argsPtr + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isAlternate) && (((uint)tempPointer3 | (uint)piVar22) != 0)) {\n        isZeroPadded = true;\n        zeroPadChar = 0x30;\n        argIndex = 2;\n        digitsChar1 = (char)tempValue1;\n      }\n      else {\n        argIndex = 2;\n      }\n    }\n    currentFormatChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)totalDataPtr) {\n      formatFlag = formatFlag & 0xffffff7f;\n    }\n    tempValue1 = (uint)tempPointer3 | (uint)piVar22;\njoined_r0x00082adc:\n    tempLongLong = CONCAT44(piVar22,tempPointer3);\n    currentFormatCharPointer = totalDataPtr;\n    if ((tempValue1 == 0) && (totalDataPtr == (int *******)0x0)) {\n      ptempPointer6 = (int ********)local_68;\n      if ((argIndex != 0) || (!isAlternate)) goto LAB_00082b04;\n      ptempPointer6 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (argIndex == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < tempPointer3) {\n        ptempPointer1 = (int ********)(&cStack_6a + 1);\n        do {\n          ptempPointer6 = ptempPointer1;\n          tempValue5 = (undefined4)((ulonglong)tempLongLong >> 0x20);\n          digitChar = '\\n';\n          calculate_remainder_00084530((int)tempLongLong,tempValue5,10,0);\n          *(char *)ptempPointer6 = digitChar + '0';\n          tempLongLong = calculate_remainder_00084530((int)tempLongLong,tempValue5,10,0);\n          ptempPointer1 = (int ********)((int)ptempPointer6 + -1);\n        } while (tempLongLong != 0);\n        totalDataPtr = (int *******)((int)local_68 - (int)ptempPointer6);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)tempPointer3 + '0';\n      ptempPointer6 = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ptempPointer1 = (int ********)(&cStack_6a + 1);\n    if (argIndex != 2) goto LAB_000830e2;\n    do {\n      ptempPointer6 = ptempPointer1;\n      tempValue1 = (uint)tempPointer3 & 0xf;\n      tempPointer3 = (int *)((uint)tempPointer3 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ptempPointer6 = digits[tempValue1];\n      ptempPointer1 = (int ********)((int)ptempPointer6 + -1);\n    } while (((uint)tempPointer3 | (uint)piVar22) != 0);\n    totalDataPtr = (int *******)((int)local_68 - (int)ptempPointer6);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (dataPtrArray != (int *******)0x0) {\n    process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(infoPointer + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalArgCount;\nLAB_000830e2:\n  do {\n    ptempPointer6 = ptempPointer1;\n    argPointer = (int *)((uint)tempPointer3 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    argIndex = ((uint)tempPointer3 & 7) + 0x30;\n    *(char *)ptempPointer6 = (char)argIndex;\n    ptempPointer1 = (int ********)((int)ptempPointer6 + -1);\n    tempPointer3 = argPointer;\n  } while (((uint)argPointer | (uint)piVar22) != 0);\n  if (isAlternate) {\n    if (argIndex == 0x30) {\nLAB_00082afe:\n      totalDataPtr = (int *******)((int)local_68 - (int)ptempPointer6);\n    }\n    else {\n      *(undefined *)((int)ptempPointer6 + -1) = 0x30;\n      ptempPointer6 = ptempPointer1;\n      totalDataPtr = (int *******)((int)local_68 - (int)ptempPointer1);\n    }\n  }\n  else {\nLAB_00083282:\n    totalDataPtr = (int *******)((int)local_68 - (int)ptempPointer6);\n  }\nLAB_00082b04:\n  currentDataPtr = totalDataPtr;\n  if ((int)totalDataPtr < (int)currentFormatCharPointer) {\n    currentDataPtr = currentFormatCharPointer;\n  }\n  if (signChar != '\\0') {\n    currentDataPtr = (int *******)((int)currentDataPtr + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    currentDataPtr = (int *******)((int)currentDataPtr + 2);\n  }\n  if ((formatFlag == 0) &&\n     (tempPointer2 = (int *******)((int)tempPointer4 - (int)currentDataPtr), 0 < (int)tempPointer2)) {\n    if ((int)tempPointer2 < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        tempPointer5 = tempPointer2;\n        argIndex = argCount + 1;\n        dataPtrArray = dataPtrArray + 4;\n        *argListPointer = (int *******)0x856f0;\n        argListPointer[1] = (int *******)0x10;\n        if (argIndex < 8) {\n          tempValue3 = argCount + 2;\n          argListPointer = argListPointer + 2;\n          argCount = argIndex;\n        }\n        else if (dataPtrArray == (int *******)0x0) {\n          tempValue3 = 1;\n          argListPointer = (int ********)local_68;\n          argCount = 0;\n        }\n        else {\n          argCount = argIndex;\n          argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n          if (argIndex != 0) goto LAB_00083142;\n          tempValue3 = argCount + 1;\n          argListPointer = (int ********)local_68;\n        }\n        tempPointer2 = tempPointer5 + -4;\n      } while (0x10 < (int)tempPointer2);\n      tempPointer2 = tempPointer5 + -4;\n      argCount = tempValue3;\n    }\n    dataPtrArray = (int *******)((int)dataPtrArray + (int)tempPointer2);\n    *argListPointer = (int *******)0x856f0;\n    argListPointer[1] = tempPointer2;\n    if (argCount < 8) {\n      argIndex = argCount + 1;\n      argListPointer = argListPointer + 2;\n    }\n    else if (dataPtrArray == (int *******)0x0) {\n      argIndex = 1;\n      argCount = 0;\n      argListPointer = (int ********)local_68;\n    }\n    else {\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n      argIndex = argCount + 1;\n      argListPointer = (int ********)local_68;\n    }\n  }\n  else {\n    argIndex = argCount + 1;\n  }\n  tempValue3 = argIndex;\n  if (currentFormatChar != '\\0') {\n    dataPtrArray = (int *******)((int)dataPtrArray + 1);\n    tempValue3 = 1;\n    *argListPointer = (int *******)&currentFormatChar;\n    argListPointer[1] = (int *******)0x1;\n    argCount = argIndex;\n    if (argIndex < 8) {\n      tempValue3 = argIndex + 1;\n      argListPointer = argListPointer + 2;\n    }\n    else if (dataPtrArray == (int *******)0x0) {\n      argCount = 0;\n      argListPointer = (int ********)local_68;\n    }\n    else {\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n      tempValue3 = argCount + 1;\n      argListPointer = (int ********)local_68;\n    }\n  }\n  argIndex = tempValue3;\n  tempValue4 = argCount;\n  if (isZeroPadded) {\n    dataPtrArray = (int *******)((int)dataPtrArray + 2);\n    *argListPointer = (int *******)&zeroPadChar;\n    argListPointer[1] = (int *******)0x2;\n    if (tempValue3 < 8) {\n      argIndex = tempValue3 + 1;\n      tempValue4 = tempValue3;\n      argListPointer = argListPointer + 2;\n    }\n    else if (dataPtrArray == (int *******)0x0) {\n      argIndex = 1;\n      tempValue4 = 0;\n      argListPointer = (int ********)local_68;\n    }\n    else {\n      argCount = tempValue3;\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n      argIndex = argCount + 1;\n      tempValue4 = argCount;\n      argListPointer = (int ********)local_68;\n    }\n  }\n  argCount = tempValue4;\n  if ((formatFlag == 0x80) &&\n     (tempPointer2 = (int *******)((int)tempPointer4 - (int)currentDataPtr), 0 < (int)tempPointer2)) {\n    if (0x10 < (int)tempPointer2) {\n      do {\n        while( true ) {\n          tempPointer5 = tempPointer2;\n          argCount = tempValue4 + 1;\n          dataPtrArray = dataPtrArray + 4;\n          *argListPointer = (int *******)\"0000000000000000\";\n          argListPointer[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          argIndex = tempValue4 + 2;\n          argListPointer = argListPointer + 2;\nLAB_000831f2:\n          tempValue4 = argCount;\n          tempPointer2 = tempPointer5 + -4;\n          if ((int)(tempPointer5 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (dataPtrArray != (int *******)0x0) {\n          argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n          if (argIndex == 0) {\n            argIndex = argCount + 1;\n            argListPointer = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        argIndex = 1;\n        tempValue4 = 0;\n        tempPointer2 = tempPointer5 + -4;\n        argListPointer = (int ********)local_68;\n      } while (0x10 < (int)(tempPointer5 + -4));\nLAB_00083218:\n      tempPointer2 = tempPointer5 + -4;\n    }\n    dataPtrArray = (int *******)((int)dataPtrArray + (int)tempPointer2);\n    *argListPointer = (int *******)\"0000000000000000\";\n    argListPointer[1] = tempPointer2;\n    argCount = argIndex;\n    if (argIndex < 8) {\n      argIndex = argIndex + 1;\n      argListPointer = argListPointer + 2;\n    }\n    else if (dataPtrArray == (int *******)0x0) {\n      argIndex = 1;\n      argCount = 0;\n      argListPointer = (int ********)local_68;\n    }\n    else {\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n      argIndex = argCount + 1;\n      argListPointer = (int ********)local_68;\n    }\n  }\n  currentFormatCharPointer = (int *******)((int)currentFormatCharPointer - (int)totalDataPtr);\n  ptempPointer1 = (int ********)local_68;\n  if ((int)currentFormatCharPointer < 1) {\nLAB_0008302a:\n    dataPtrArray = (int *******)((int)dataPtrArray + (int)totalDataPtr);\n    *argListPointer = (int *******)ptempPointer6;\n    argListPointer[1] = totalDataPtr;\n    totalDataPtr = dataPtrArray;\n    argCount = argIndex;\n    if (argIndex < 8) goto LAB_000831be;\n    if (dataPtrArray == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    tempValue3 = argCount;\n    if (0x10 < (int)currentFormatCharPointer) {\n      do {\n        while( true ) {\n          tempPointer2 = currentFormatCharPointer;\n          argCount = tempValue3 + 1;\n          dataPtrArray = dataPtrArray + 4;\n          *argListPointer = (int *******)\"0000000000000000\";\n          argListPointer[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          argIndex = tempValue3 + 2;\n          argListPointer = argListPointer + 2;\nLAB_00082fe6:\n          tempValue3 = argCount;\n          currentFormatCharPointer = tempPointer2 + -4;\n          if ((int)(tempPointer2 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (dataPtrArray != (int *******)0x0) {\n          argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n          if (argIndex == 0) {\n            argIndex = argCount + 1;\n            argListPointer = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        argIndex = 1;\n        argListPointer = (int ********)local_68;\n        tempValue3 = 0;\n        currentFormatCharPointer = tempPointer2 + -4;\n      } while (0x10 < (int)(tempPointer2 + -4));\nLAB_0008300e:\n      currentFormatCharPointer = tempPointer2 + -4;\n    }\n    dataPtrArray = (int *******)((int)dataPtrArray + (int)currentFormatCharPointer);\n    *argListPointer = (int *******)\"0000000000000000\";\n    argListPointer[1] = currentFormatCharPointer;\n    if (argIndex < 8) {\n      argIndex = argIndex + 1;\n      argListPointer = argListPointer + 2;\n      goto LAB_0008302a;\n    }\n    if (dataPtrArray != (int *******)0x0) {\n      argCount = argIndex;\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n      argIndex = argCount + 1;\n      argListPointer = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    tempDataPtrArray[0] = totalDataPtr;\n    argCount = 1;\n    argListPointer = (int ********)local_68;\n    local_68 = (undefined  [4])ptempPointer6;\nLAB_000831be:\n    ptempPointer1 = argListPointer + 2;\n    dataPtrArray = totalDataPtr;\n  }\n  if (((formatFlag & 4) != 0) &&\n     (currentFormatCharPointer = (int *******)((int)tempPointer4 - (int)currentDataPtr), 0 < (int)currentFormatCharPointer)) {\n    argIndex = argCount;\n    if ((int)currentFormatCharPointer < 0x11) {\n      tempValue3 = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = argIndex + 1;\n          dataPtrArray = dataPtrArray + 4;\n          *ptempPointer1 = (int *******)0x856f0;\n          ptempPointer1[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          tempValue3 = argIndex + 2;\n          ptempPointer1 = ptempPointer1 + 2;\nLAB_0008307a:\n          currentFormatCharPointer = currentFormatCharPointer + -4;\n          argIndex = argCount;\n          if ((int)currentFormatCharPointer < 0x11) goto LAB_000830a2;\n        }\n        if (dataPtrArray != (int *******)0x0) {\n          argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n          if (argIndex == 0) {\n            tempValue3 = argCount + 1;\n            ptempPointer1 = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        currentFormatCharPointer = currentFormatCharPointer + -4;\n        tempValue3 = 1;\n        argIndex = 0;\n        ptempPointer1 = (int ********)local_68;\n      } while (0x10 < (int)currentFormatCharPointer);\n    }\nLAB_000830a2:\n    dataPtrArray = (int *******)((int)dataPtrArray + (int)currentFormatCharPointer);\n    *ptempPointer1 = (int *******)0x856f0;\n    ptempPointer1[1] = currentFormatCharPointer;\n    argCount = tempValue3;\n    if (7 < tempValue3) {\n      if (dataPtrArray == (int *******)0x0) {\n        if ((int)currentDataPtr < (int)tempPointer4) {\n          currentDataPtr = tempPointer4;\n        }\n        totalArgCount = totalArgCount + (int)currentDataPtr;\n        goto LAB_00083186;\n      }\n      argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr);\n      if (argIndex != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)currentDataPtr < (int)tempPointer4) {\n    currentDataPtr = tempPointer4;\n  }\n  totalArgCount = totalArgCount + (int)currentDataPtr;\n  if ((dataPtrArray != (int *******)0x0) &&\n     (argIndex = process_data_00082824(dataPointer,infoPointer,&currentArgPtr), argIndex != 0)) goto LAB_00083142;\nLAB_00083186:\n  argCount = 0;\n  argListPointer = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digitValue = tempValue1 - 0x30;\n  tempPointer4 = (int *******)0x0;\n  currentFormatCharPointer = formatStringPointer;\n  do {\n    formatStringPointer = (int *******)((int)currentFormatCharPointer + 1);\n    tempValue1 = (uint)*(byte *)currentFormatCharPointer;\n    tempPointer4 = (int *******)(digitValue + (int)tempPointer4 * 10);\n    digitValue = tempValue1 - 0x30;\n    currentFormatCharPointer = formatStringPointer;\n  } while (digitValue < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  tempValue1 = (uint)*(byte *)formatStringPointer;\n  if (currentFormatChar == '\\0') {\n    currentFormatChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_data_0008289c",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "param_3": "formatStringPointer",
                "param_4": "argumentsPointer",
                "bVar1": "isSigned",
                "bVar2": "isLong",
                "bVar3": "isAlternate",
                "cVar4": "signChar",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "argListPointer",
                "piVar7": "argPointer",
                "iVar8": "argIndex",
                "cVar9": "digitChar",
                "pppppppiVar10": "currentFormatCharPointer",
                "uVar11": "digitValue",
                "ppiVar12": "tempPointer",
                "uVar13": "formatFlag",
                "uVar14": "tempValue1",
                "uVar21": "tempValue2",
                "iVar15": "tempValue3",
                "pppppppiVar16": "tempPointer1",
                "iVar17": "tempValue4",
                "pppppppiVar18": "tempPointer2",
                "piVar19": "tempPointer3",
                "pppppppiVar20": "tempPointer4",
                "uVar24": "tempValue5",
                "pppppppiVar23": "tempPointer5",
                "pppppppiVar25": "tempPointer6",
                "bVar26": "isNegative",
                "lVar27": "tempLongLong",
                "local_dc": "currentDataPtr",
                "local_d4": "totalDataPtr",
                "local_c8": "argsPtr",
                "local_c4": "totalArgCount",
                "local_c0": "digits",
                "local_a1": "currentFormatChar",
                "local_a0": "zeroPadChar",
                "local_9f": "digitsChar1",
                "local_9c": "currentArgPtr",
                "local_98": "argCount",
                "local_94": "dataPtrArray",
                "local_64": "tempDataPtrArray"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int processResult;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort flag;\n  undefined2 value;\n  undefined *pointer;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 specialValue;\n  undefined stackBuffer [1024];\n  \n  specialValue = *(undefined4 *)(param2 + 100);\n  constant3 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  constant4 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stackBuffer;\n  flag = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  constant1 = 0x400;\n  constant2 = 0;\n  pointer = buffer[0];\n  result = process_data_0008289c(param1,buffer);\n  if ((-1 < result) && (processResult = process_data_00083850(param1,buffer), processResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "processResult",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "pointer",
                "local_474": "constant1",
                "local_470": "constant2",
                "local_46c": "constant3",
                "local_464": "constant4",
                "local_424": "specialValue",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "handle_relocation_0008356c",
            "code": "\nundefined4 handle_relocation_0008356c(undefined4 *result,int *data_array)\n\n{\n  int value1;\n  int value2;\n  uint flag;\n  ushort short_value;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  short_value = *(ushort *)(data_array + 3);\n  flag = (uint)short_value;\n  if ((int)(flag << 0x1c) < 0) {\n    value2 = data_array[4];\n  }\n  else {\n    if (-1 < (int)(flag << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data_array + 3) = short_value | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(flag << 0x1d) < 0) {\n      if ((int *)data_array[0xc] != (int *)0x0) {\n        if ((int *)data_array[0xc] != data_array + 0x10) {\n          process_relocation_00083b10(result);\n          short_value = *(ushort *)(data_array + 3);\n        }\n        data_array[0xc] = 0;\n      }\n      value2 = data_array[4];\n      short_value = short_value & 0xffdb;\n      *data_array = value2;\n      data_array[1] = 0;\n    }\n    else {\n      value2 = data_array[4];\n    }\n    *(ushort *)(data_array + 3) = short_value | 8;\n    flag = (uint)(short_value | 8);\n  }\n  if ((value2 == 0) && ((flag & 0x280) != 0x200)) {\n    initialize_memory_00084018(result,data_array);\n    flag = (uint)*(ushort *)(data_array + 3);\n    value2 = data_array[4];\n  }\n  if ((flag & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(flag << 0x1e)) {\n      value1 = data_array[5];\n    }\n    data_array[2] = value1;\n  }\n  else {\n    data_array[6] = -data_array[5];\n    data_array[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(data_array + 3) << 0x18) < 0)) {\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "handle_relocation_0008356c",
                "param_1": "result",
                "param_2": "data_array",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "flag",
                "uVar4": "short_value"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_translation_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeTranslation_000836ec(void)\n\n{\n  dword *translationPtr;\n  dword exitStatus;\n  int translationIndex;\n  code *unrecoveredJumpTable;\n  \n  translateValue(6);\n  unrecoveredJumpTable = (code *)0x836fb;\n  exitStatus = exitWithStatus(1);\n  if (relArray[48].r_offset == 0) {\n    relArray[48].r_offset = 0x20070184;\n  }\n  translationIndex = *(int *)(relArray[48].r_offset + 4);\n  translationPtr = (dword *)relArray[48].r_offset;\n  if (0x1f < translationIndex) {\n    translationPtr = (dword *)reallocateMemory(400);\n    if (translationPtr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    *translationPtr = relArray[48].r_offset;\n    translationPtr[1] = 0;\n    translationIndex = 0;\n    relArray[48].r_offset = (dword)translationPtr;\n    translationPtr[0x62] = 0;\n    translationPtr[99] = 0;\n  }\n  translationPtr[1] = translationIndex + 1;\n  translationPtr[translationIndex + 2] = exitStatus;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_translation_000836ec",
                "pdVar1": "translationPtr",
                "dVar2": "exitStatus",
                "iVar3": "translationIndex",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "translate_value_000841e4": "translateValue",
                "exit_with_status_00080eec": "exitWithStatus",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "reallocate_memory_000817f0": "reallocateMemory"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 process_data_00083850(int *input_data,int *output_data)\n\n{\n  int *ptr_var1;\n  int var2;\n  ushort var3;\n  uint var4;\n  int var5;\n  code *function_ptr;\n  undefined4 result;\n  int var7;\n  \n  if ((input_data != (int *)0x0) && (input_data[0xe] == 0)) {\n    initialize_data_structures_00083888();\n  }\n  if (*(short *)(output_data + 3) == 0) {\n    return 0;\n  }\n  var3 = *(ushort *)(output_data + 3);\n  if ((int)((uint)var3 << 0x1c) < 0) {\n    var7 = output_data[4];\n    if (var7 == 0) {\n      return 0;\n    }\n    var2 = *output_data;\n    if ((var3 & 3) == 0) {\n      var5 = output_data[5];\n    }\n    else {\n      var5 = 0;\n    }\n    *output_data = var7;\n    var2 = var2 - var7;\n    output_data[2] = var5;\n    do {\n      if (var2 < 1) {\n        return 0;\n      }\n      var5 = (*(code *)output_data[9])(input_data,output_data[7],var7,var2,result);\n      var2 = var2 - var5;\n      var7 = var7 + var5;\n    } while (0 < var5);\nLAB_000837c8:\n    *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_data + 3) = var3 | 0x800;\n  if ((output_data[1] < 1) && (output_data[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_data[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  var4 = (uint)(var3 | 0x800);\n  var7 = *input_data;\n  *input_data = 0;\n  if ((var3 & 0x1000) == 0) {\n    var2 = (*function_ptr)(input_data,output_data[7],var4 & 0x1000,1);\n    if ((var2 == -1) && (var5 = *input_data, var5 != 0)) {\n      if ((var5 == 0x1d) || (var5 == 0x16)) {\n        *input_data = var7;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    var4 = (uint)*(ushort *)(output_data + 3);\n    function_ptr = (code *)output_data[10];\n  }\n  else {\n    var2 = output_data[0x14];\n  }\n  if (((int)(var4 << 0x1d) < 0) && (var2 = var2 - output_data[1], output_data[0xc] != 0)) {\n    var2 = var2 - output_data[0xf];\n  }\n  var2 = (*function_ptr)(input_data,output_data[7],var2,0);\n  if (var2 == -1) {\n    var5 = *input_data;\n    if (var5 != 0) {\n      if ((var5 != 0x1d) && (var5 != 0x16)) {\n        *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) & 0xf7ff;\n      *output_data = output_data[4];\n      output_data[1] = 0;\n      goto LAB_00083774;\n    }\n    var3 = *(ushort *)(output_data + 3) & 0xf7ff;\n    output_data[1] = 0;\n    *(ushort *)(output_data + 3) = var3;\n    *output_data = output_data[4];\n  }\n  else {\n    var3 = *(ushort *)(output_data + 3) & 0xf7ff;\n    *output_data = output_data[4];\n    *(ushort *)(output_data + 3) = var3;\n    output_data[1] = 0;\n  }\n  if ((int)((uint)var3 << 0x13) < 0) {\n    output_data[0x14] = var2;\n  }\nLAB_00083774:\n  ptr_var1 = (int *)output_data[0xc];\n  *input_data = var7;\n  if (ptr_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr_var1 != output_data + 0x10) {\n    process_relocation_00083b10(input_data);\n  }\n  output_data[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "input_data",
                "param_2": "output_data",
                "piVar1": "ptr_var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "pcVar6": "function_ptr",
                "unaff_r4": "result",
                "iVar7": "var7"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructAddress)\n\n{\n  undefined4 *struct1;\n  undefined4 *struct2;\n  \n  if (*(int *)(dataStructAddress + 0x38) == 0) {\n    struct1 = *(undefined4 **)(dataStructAddress + 4);\n    *(undefined **)(dataStructAddress + 0x3c) = &initPattern1;\n    *(undefined4 *)(dataStructAddress + 0x2e4) = 3;\n    *(int *)(dataStructAddress + 0x2e8) = dataStructAddress + 0x2ec;\n    *(undefined4 *)(dataStructAddress + 0x2e0) = 0;\n    *(undefined2 *)(struct1 + 3) = 4;\n    *struct1 = 0;\n    struct1[1] = 0;\n    struct1[2] = 0;\n    struct1[0x19] = 0;\n    *(undefined2 *)((int)struct1 + 0xe) = 0;\n    struct1[4] = 0;\n    struct1[5] = 0;\n    struct1[6] = 0;\n    fillMemoryWithPattern(struct1 + 0x17,0,8);\n    struct2 = *(undefined4 **)(dataStructAddress + 8);\n    struct1[7] = struct1;\n    struct1[8] = 0x84221;\n    struct1[9] = 0x84245;\n    struct1[10] = 0x8427d;\n    struct1[0xb] = &initPattern2;\n    *(undefined2 *)((int)struct2 + 0xe) = 1;\n    *(undefined2 *)(struct2 + 3) = 9;\n    *struct2 = 0;\n    struct2[1] = 0;\n    struct2[2] = 0;\n    struct2[0x19] = 0;\n    struct2[4] = 0;\n    struct2[5] = 0;\n    struct2[6] = 0;\n    fillMemoryWithPattern(struct2 + 0x17,0,8);\n    struct1 = *(undefined4 **)(dataStructAddress + 0xc);\n    struct2[7] = struct2;\n    struct2[8] = 0x84221;\n    struct2[9] = 0x84245;\n    struct2[10] = 0x8427d;\n    struct2[0xb] = &initPattern2;\n    *(undefined2 *)(struct1 + 3) = 0x12;\n    *(undefined2 *)((int)struct1 + 0xe) = 2;\n    *struct1 = 0;\n    struct1[1] = 0;\n    struct1[2] = 0;\n    struct1[0x19] = 0;\n    struct1[4] = 0;\n    struct1[5] = 0;\n    struct1[6] = 0;\n    fillMemoryWithPattern(struct1 + 0x17,0,8);\n    struct1[7] = struct1;\n    struct1[8] = 0x84221;\n    struct1[9] = 0x84245;\n    struct1[10] = 0x8427d;\n    struct1[0xb] = &initPattern2;\n    *(undefined4 *)(dataStructAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructAddress",
                "puVar1": "struct1",
                "puVar2": "struct2",
                "&LAB_0008387c_1": "&initPattern1",
                "&LAB_0008429c_1": "&initPattern2",
                "fill_memory_with_pattern_00081f00": "fillMemoryWithPattern"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "execute_relocation_000839b4",
            "code": "\nuint execute_relocation_000839b4(undefined4 arg1,uint size,byte **data)\n\n{\n  int relocation_offset;\n  uint result;\n  uint byte_value;\n  byte *byte_ptr;\n  uint index;\n  byte current_byte;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  relocation_offset = get_relocation_offset_0008400c();\n  if ((relocation_offset == 1) && (size - 1 < 0xff)) {\n    byte_value = size & 0xff;\n    current_byte = (byte)byte_value;\n    result = 1;\n  }\n  else {\n    result = execute_elf_relocation_0008434c(arg1,&current_byte,size,data + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return size;\n    }\n    byte_value = (uint)current_byte;\n  }\n  index = 0;\n  do {\n    byte_ptr = data[2] + -1;\n    data[2] = byte_ptr;\n    if ((int)byte_ptr < 0) {\n      if ((int)data[6] <= (int)byte_ptr) {\n        **data = (byte)byte_value;\n        byte_ptr = *data;\n        byte_value = (uint)*byte_ptr;\n        if (byte_value != 10) goto LAB_00083a04;\n      }\n      relocation_offset = process_data_000842a4(arg1,byte_value,data);\n      if (relocation_offset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)byte_value;\n      byte_ptr = *data;\nLAB_00083a04:\n      *data = byte_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return size;\n    }\n    byte_value = (uint)byte_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "execute_relocation_000839b4",
                "param_1": "arg1",
                "param_2": "size",
                "param_3": "data",
                "iVar1": "relocation_offset",
                "uVar2": "result",
                "uVar3": "byte_value",
                "pbVar4": "byte_ptr",
                "uVar5": "index",
                "local_1c": "current_byte",
                "abStack_1b": "byte_array"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "update_and_check_value_00083a74",
            "code": "\nundefined4 update_and_check_value_00083a74(undefined4 param_1,int param_2)\n\n{\n  int result;\n  uint temp;\n  int offset;\n  \n  FUNC_00081f94();\n  temp = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  offset = ((temp - param_2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < offset) {\n    result = update_value_and_check_0008236c(param_1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + temp) {\n      result = update_value_and_check_0008236c(param_1,-offset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp - offset | 1;\n        FUNC_00081f98(param_1);\n        return 1;\n      }\n      offset = update_value_and_check_0008236c(param_1,0);\n      if (0xf < (int)(offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(param_1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "update_and_check_value_00083a74",
                "iVar1": "result",
                "uVar2": "temp",
                "iVar3": "offset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_relocation_00083b10",
            "code": "\nvoid processRelocation_00083b10(undefined4 arg1,int arg2)\n\n{\n  int index;\n  bool isSpecialCase;\n  uint flags;\n  dword currentReloc;\n  int tmpIndex;\n  uint offset;\n  dword prevReloc;\n  uint newOffset;\n  dword nextReloc;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  flags = *(uint *)(arg2 + -4);\n  prevReloc = arg2 - 8;\n  offset = flags & 0xfffffffe;\n  currentReloc = prevReloc + offset;\n  newOffset = *(uint *)(currentReloc + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentReloc) {\n    newOffset = newOffset + offset;\n    if (-1 < (int)(flags << 0x1f)) {\n      prevReloc = prevReloc - *(int *)(arg2 + -8);\n      tmpIndex = *(int *)(prevReloc + 0xc);\n      index = *(int *)(prevReloc + 8);\n      newOffset = newOffset + *(int *)(arg2 + -8);\n      *(int *)(index + 0xc) = tmpIndex;\n      *(int *)(tmpIndex + 8) = index;\n    }\n    currentReloc = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(prevReloc + 4) = newOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = prevReloc;\n    if (currentReloc <= newOffset) {\n      update_and_check_value_00083a74(arg1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currentReloc + 4) = newOffset;\n    if ((flags & 1) == 0) {\n      prevReloc = prevReloc - *(int *)(arg2 + -8);\n      index = *(int *)(prevReloc + 8);\n      offset = offset + *(int *)(arg2 + -8);\n      if (index == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        tmpIndex = *(int *)(prevReloc + 0xc);\n        *(int *)(index + 0xc) = tmpIndex;\n        *(int *)(tmpIndex + 8) = index;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(currentReloc + newOffset + 4) << 0x1f) {\n      offset = offset + newOffset;\n      index = *(int *)(currentReloc + 8);\n      if ((!isSpecialCase) && (index == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = prevReloc;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = prevReloc;\n        *(undefined4 *)(prevReloc + 0xc) = 0x2007046c;\n        *(undefined4 *)(prevReloc + 8) = 0x2007046c;\n        *(uint *)(prevReloc + 4) = offset | 1;\n        *(uint *)(prevReloc + offset) = offset;\n        goto LAB_00083ba4;\n      }\n      tmpIndex = *(int *)(currentReloc + 0xc);\n      *(int *)(index + 0xc) = tmpIndex;\n      *(int *)(tmpIndex + 8) = index;\n    }\n    *(uint *)(prevReloc + 4) = offset | 1;\n    *(uint *)(prevReloc + offset) = offset;\n    if (!isSpecialCase) {\n      if (offset < 0x200) {\n        flags = offset & 0xfffffff8;\n        index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(prevReloc + 8) = index;\n        *(uint *)(prevReloc + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags) = prevReloc;\n        *(dword *)(index + 0xc) = prevReloc;\n        FUNC_00081f98(arg1);\n        return;\n      }\n      flags = offset >> 9;\n      if (flags < 5) {\n        index = (offset >> 6) + 0x38;\n        tmpIndex = index * 2;\n      }\n      else if (flags < 0x15) {\n        index = flags + 0x5b;\n        tmpIndex = index * 2;\n      }\n      else if (flags < 0x55) {\n        index = (offset >> 0xc) + 0x6e;\n        tmpIndex = index * 2;\n      }\n      else if (flags < 0x155) {\n        index = (offset >> 0xf) + 0x77;\n        tmpIndex = index * 2;\n      }\n      else if (flags < 0x555) {\n        index = (offset >> 0x12) + 0x7c;\n        tmpIndex = index * 2;\n      }\n      else {\n        tmpIndex = 0xfc;\n        index = 0x7e;\n      }\n      nextReloc = tmpIndex * 4 + 0x20070464;\n      currentReloc = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tmpIndex];\n      if (currentReloc == nextReloc) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        nextReloc = currentReloc;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentReloc + 4) & 0xfffffffc) <= offset) break;\n          currentReloc = *(dword *)(currentReloc + 8);\n        } while (nextReloc != currentReloc);\n        nextReloc = *(dword *)(currentReloc + 0xc);\n      }\n      *(dword *)(prevReloc + 0xc) = nextReloc;\n      *(dword *)(prevReloc + 8) = currentReloc;\n      *(dword *)(nextReloc + 8) = prevReloc;\n      *(dword *)(currentReloc + 0xc) = prevReloc;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_relocation_00083b10",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "index",
                "bVar2": "isSpecialCase",
                "uVar3": "flags",
                "dVar4": "currentReloc",
                "iVar5": "tmpIndex",
                "uVar6": "offset",
                "dVar7": "prevReloc",
                "uVar8": "newOffset",
                "dVar9": "nextReloc"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *data,uint *array,uint **arrayPtr)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort temp3;\n  uint temp4;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint newSize;\n  uint count1;\n  uint count2;\n  uint temp5;\n  \n  if (arrayPtr[2] != (uint *)0x0) {\n    temp3 = *(ushort *)(array + 3);\n    temp4 = (uint)temp3;\n    if (((int)(temp4 << 0x1c) < 0) && (array[4] != 0)) {\n      ptr2 = *arrayPtr;\n    }\n    else {\n      result = handle_relocation_0008356c(data,array);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      temp3 = *(ushort *)(array + 3);\n      temp4 = (uint)temp3;\n      ptr2 = *arrayPtr;\n    }\n    if ((temp3 & 2) == 0) {\n      temp1 = temp4 & 2;\n      count1 = temp1;\n      length = temp1;\n      temp5 = temp1;\n      if ((temp4 & 1) == 0) {\n        temp1 = 0;\n        count1 = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            count1 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          length = array[2];\n          if ((int)(temp4 << 0x16) < 0) {\n            if (temp1 < length) {\n              temp4 = *array;\n              length = temp1;\n            }\n            else if ((temp4 & 0x480) == 0) {\n              temp4 = *array;\n            }\n            else {\n              result = *array - array[4];\n              length = result + 1 + temp1;\n              newSize = (int)(array[5] * 3) / 2;\n              if (length <= newSize) {\n                length = newSize;\n              }\n              if ((int)(temp4 << 0x15) < 0) {\n                newSize = reallocate_memory_00081810(data,length);\n                if (newSize == 0) {\n                  *data = 0xc;\n                  temp3 = *(ushort *)(array + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_00081d48(newSize,array[4],result);\n                *(ushort *)(array + 3) = *(ushort *)(array + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                newSize = reallocate_or_copy_memory_00081fac(data);\n                if (newSize == 0) {\n                  process_relocation_00083b10(data,array[4]);\n                  temp3 = *(ushort *)(array + 3) & 0xff7f;\n                  *data = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp4 = newSize + result;\n              array[4] = newSize;\n              array[5] = length;\n              *array = temp4;\n              array[2] = length - result;\n              length = temp1;\n            }\n            copy_memory_00081e34(temp4,count1,length);\n            array[2] = array[2] - length;\n            *array = *array + length;\n            length = temp1;\n          }\n          else if ((array[4] < *array) || (temp4 = array[5], temp1 < temp4)) {\n            if (temp1 < length) {\n              length = temp1;\n            }\n            copy_memory_00081e34(*array,count1,length);\n            temp4 = array[2];\n            array[2] = temp4 - length;\n            *array = *array + length;\n            if ((temp4 - length == 0) && (result = process_data_00083850(data,array), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            length = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              length = temp1;\n            }\n            length = (*(code *)array[9])(data,array[7],count1,(length / temp4) * temp4);\n            if ((int)length < 1) goto LAB_00083da2;\n          }\n          ptr1 = arrayPtr[2];\n          count1 = count1 + length;\n          temp1 = temp1 - length;\n          arrayPtr[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          temp4 = (uint)*(ushort *)(array + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            length = *ptr2;\n            temp1 = ptr2[1];\n            temp5 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp5 == 0) {\n            result = find_first_occurrence_000840f8(length,10,temp1);\n            if (result == 0) {\n              count1 = temp1 + 1;\n              temp5 = 1;\n            }\n            else {\n              count1 = (result + 1) - length;\n              temp5 = 1;\n            }\n          }\n          newSize = *array;\n          temp4 = count1;\n          if (temp1 <= count1) {\n            temp4 = temp1;\n          }\n          temp2 = array[5];\n          if ((array[4] < newSize) && (count2 = array[2] + temp2, (int)count2 < (int)temp4)) {\n            copy_memory_00081e34(newSize,length,count2);\n            *array = *array + count2;\n            result = process_data_00083850(data,array);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp4 < (int)temp2) {\n            copy_memory_00081e34(newSize,length,temp4);\n            array[2] = array[2] - temp4;\n            *array = temp4 + *array;\n            count2 = temp4;\n          }\n          else {\n            count2 = (*(code *)array[9])(data,array[7],length,temp2);\n            if ((int)count2 < 1) goto LAB_00083da2;\n          }\n          count1 = count1 - count2;\n          if (count1 == 0) {\n            result = process_data_00083850(data,array);\n            if (result != 0) goto LAB_00083da2;\n            temp5 = 0;\n          }\n          ptr1 = arrayPtr[2];\n          length = length + count2;\n          temp1 = temp1 - count2;\n          arrayPtr[2] = (uint *)((int)ptr1 - count2);\n        } while ((uint *)((int)ptr1 - count2) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      temp4 = 0;\n      do {\n        while( true ) {\n          count1 = temp4;\n          if (0x7ffffbff < temp4) {\n            count1 = 0x7ffffc00;\n          }\n          if (temp4 != 0) break;\n          temp1 = *ptr2;\n          temp4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)array[9])(data,array[7],temp1,count1);\n        if (result < 1) {\nLAB_00083da2:\n          temp3 = *(ushort *)(array + 3);\nLAB_00083da4:\n          *(ushort *)(array + 3) = temp3 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = arrayPtr[2];\n        temp1 = temp1 + result;\n        temp4 = temp4 - result;\n        arrayPtr[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "data",
                "param_2": "array",
                "param_3": "arrayPtr",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "length",
                "uVar9": "newSize",
                "uVar10": "count1",
                "uVar11": "count2",
                "local_2c": "temp5"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_magic_number_00084004",
            "code": "\nundefined4 getMagicNumber_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_magic_number_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword getRelocationOffset_0008400c(void)\n\n{\n  return relArrayrelocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "[275].r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_memory_00084018",
            "code": "\nvoid initializeMemory_00084018(int memoryManager,int *memoryBlock)\n\n{\n  ushort flag;\n  int memorySize;\n  int allocatedMemory;\n  uint flag2;\n  bool isFlagSet;\n  undefined tempStack [4];\n  uint localVariable;\n  \n  flag = *(ushort *)(memoryBlock + 3);\n  flag2 = (uint)flag;\n  if ((int)(flag2 << 0x1e) < 0) {\n    *memoryBlock = (int)memoryBlock + 0x43;\n    memoryBlock[4] = (int)memoryBlock + 0x43;\n    memoryBlock[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memoryBlock + 0xe)) {\n    memorySize = initialize_and_check_memory_00084494(memoryManager,(int)*(short *)((int)memoryBlock + 0xe),tempStack);\n    if (-1 < memorySize) {\n      isFlagSet = (localVariable & 0xf000) == 0x2000;\n      if (((localVariable & 0xf000) == 0x8000) && (memoryBlock[10] == 0x8427d)) {\n        memorySize = 0x400;\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x400;\n        memoryBlock[0x13] = 0x400;\n      }\n      else {\n        memorySize = 0x400;\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    flag = *(ushort *)(memoryBlock + 3);\n    flag2 = (uint)flag;\n  }\n  *(ushort *)(memoryBlock + 3) = flag | 0x800;\n  if ((flag2 & 0x80) == 0) {\n    memorySize = 0x400;\n  }\n  else {\n    memorySize = 0x40;\n  }\n  isFlagSet = false;\nLAB_00084074:\n  allocatedMemory = reallocate_memory_00081810(memoryManager,memorySize);\n  flag = *(ushort *)(memoryBlock + 3);\n  if (allocatedMemory == 0) {\n    if (-1 < (int)((uint)flag << 0x16)) {\n      *(ushort *)(memoryBlock + 3) = flag | 2;\n      *memoryBlock = (int)memoryBlock + 0x43;\n      memoryBlock[4] = (int)memoryBlock + 0x43;\n      memoryBlock[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(memoryManager + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(memoryBlock + 3) = flag | 0x80;\n    *memoryBlock = allocatedMemory;\n    memoryBlock[4] = allocatedMemory;\n    memoryBlock[5] = memorySize;\n    if ((isFlagSet) && (memorySize = initialize_application_000844bc(memoryManager,(int)*(short *)((int)memoryBlock + 0xe)), memorySize != 0))\n    {\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_memory_00084018",
                "param_1": "memoryManager",
                "param_2": "memoryBlock",
                "uVar1": "flag",
                "iVar2": "memorySize",
                "iVar3": "allocatedMemory",
                "uVar4": "flag2",
                "bVar5": "isFlagSet",
                "auStack_54": "tempStack",
                "local_50": "localVariable"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_occurrence_000840f8",
            "code": "\nuint * find_first_occurrence_000840f8(uint *data,char target,uint length)\n\n{\n  uint result;\n  int index;\n  uint *current;\n  bool found;\n  \n  if (((uint)data & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      current = data;\n      do {\n        result = *current ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = current;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        length = length - 4;\n        data = current + 1;\n        current = current + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_00084150;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    current = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = current;\n      if (((uint)data & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      current = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "current",
                "bVar4": "found"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "translate_value_000841e4",
            "code": "\nint translateValue_000841e4(uint value)\n\n{\n  dword offset;\n  undefined4 defaultValue;\n  int funcPtr;\n  code *function;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 linkReg;\n  undefined4 constant;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < value) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  funcPtr = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((funcPtr == 0) || (function = *(code **)(funcPtr + value * 4), function == (code *)0x0)) {\n    defaultValue = thunk_get_default_value_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    funcPtr = FUNC_00080efc(defaultValue,value,value,0,constant,arg1,arg2,linkReg);\n    if ((funcPtr == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return funcPtr;\n  }\n  if (function == (code *)0x1) {\n    return 0;\n  }\n  if (function != (code *)0xffffffff) {\n    *(undefined4 *)(funcPtr + value * 4) = 0;\n    (*function)(value);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "translate_value_000841e4",
                "param_1": "value",
                "dVar1": "offset",
                "uVar2": "defaultValue",
                "iVar3": "funcPtr",
                "pcVar4": "function",
                "unaff_r4": "arg1",
                "unaff_r5": "arg2",
                "in_lr": "linkReg",
                "uVar5": "constant"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_return_value_thunk_00080efe",
            "code": "\nundefined4 getReturnValue_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_return_value_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_value_based_on_initialization_result_00084220",
            "code": "\nvoid updateValueBasedOnInitializationResult_00084220(undefined4 resultPtr,int dataPtr)\n\n{\n  int initResult;\n  \n  initResult = initializeAndCheckValue(resultPtr,(int)*(short *)(dataPtr + 0xe));\n  if (-1 < initResult) {\n    *(int *)(dataPtr + 0x50) = *(int *)(dataPtr + 0x50) + initResult;\n    return;\n  }\n  *(ushort *)(dataPtr + 0xc) = *(ushort *)(dataPtr + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_value_based_on_initialization_result_00084220",
                "param_1": "resultPtr",
                "param_2": "dataPtr",
                "iVar1": "initResult",
                "initialize_and_check_value_00084508": "initializeAndCheckValue"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *output,int input,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  ushort data;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  data = *(ushort *)(input + 0xc);\n  if ((int)((uint)data << 0x17) < 0) {\n    initializeAndCheck(output,(int)*(short *)(input + 0xe),0,2);\n    data = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = data & 0xefff;\n  DAT_20071244 = 0;\n  result = copyBytes((int)*(short *)(input + 0xe),value1,value2,value2,temp1,temp2,\n                       temp3,temp4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "input",
                "param_3": "value1",
                "param_4": "value2",
                "unaff_r4": "temp1",
                "unaff_r5": "temp2",
                "unaff_r6": "temp3",
                "in_lr": "temp4",
                "uVar2": "data",
                "initialize_and_check_000844e0": "initializeAndCheck",
                "copy_bytes_00080ec8": "copyBytes",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "initialize_and_check_0008427c",
            "code": "\nvoid initializeAndCheck_0008427c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort modifiedValue;\n  \n  result = initialize_and_check_000844e0(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    modifiedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    modifiedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = modifiedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "initialize_and_check_0008427c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "modifiedValue"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int data,uint value,undefined4 *data_array,undefined4 param_4)\n\n{\n  ushort array_value;\n  uint array_index;\n  undefined *pointer;\n  int result;\n  \n  if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  array_value = *(ushort *)(data_array + 3);\n  array_index = (uint)array_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(array_index << 0x1c)) || (result = data_array[4], result == 0)) {\n    result = handle_relocation(data,data_array,array_value,array_index,param_4);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    array_value = *(ushort *)(data_array + 3);\n    result = data_array[4];\n    array_index = (uint)array_value;\n  }\n  value = value & 0xff;\n  if ((int)(array_index << 0x12) < 0) {\n    pointer = (undefined *)*data_array;\n    result = (int)pointer - result;\n    if (result < (int)data_array[5]) {\nLAB_000842d6:\n      result = result + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    pointer = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = array_value | 0x2000;\n    result = (int)pointer - result;\n    if (result < (int)data_array[5]) goto LAB_000842d6;\n  }\n  result = process_data_000842a4_subroutine(data,data_array);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*data_array;\n  result = 1;\nLAB_000842d8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = pointer + 1;\n  *pointer = (char)value;\n  if (((data_array[5] == result) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (value == 10)))) &&\n     (result = process_data_000842a4_subroutine(data,data_array), result != 0)) {\n    return 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "data_array",
                "uVar1": "array_value",
                "uVar2": "array_index",
                "puVar3": "pointer",
                "iVar4": "result",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "handle_relocation_0008356c": "handle_relocation",
                "process_data_00083850": "process_data_subroutine"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_elf_relocation_0008434c",
            "code": "\nvoid executeElfRelocation_0008434c(undefined4 *output,int size,undefined4 offset,undefined4 *status)\n\n{\n  dword relocationInfo;\n  undefined4 magicNumber;\n  int result;\n  undefined tempBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    magicNumber = get_magic_number_00084004();\n    result = (*(code *)relocationInfo)(output,tempBuffer,0,magicNumber,status);\n  }\n  else {\n    magicNumber = get_magic_number_00084004();\n    result = (*(code *)relocationInfo)(output,size,offset,magicNumber,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_elf_relocation_0008434c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "offset",
                "param_4": "status",
                "dVar1": "relocationInfo",
                "uVar2": "magicNumber",
                "iVar3": "result",
                "auStack_24": "tempBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "update_memory_0008439c",
            "code": "\nundefined4 updateMemory_0008439c(undefined4 *outputData,undefined *inputData,uint value)\n\n{\n  if (inputData == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *inputData = (char)value;\n    return 1;\n  }\n  *outputData = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "update_memory_0008439c",
                "param_1": "outputData",
                "param_2": "inputData",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_data_00084484",
            "code": "\nundefined4 process_data_00084484(int data_param)\n\n{\n  dword relocation_offset;\n  undefined4 result;\n  int relocation_result;\n  \n  relocation_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (data_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083888();\n    }\n    if (*(short *)(data_param + 0xc) != 0) {\n      result = process_data_00084484_00083850(relocation_offset,data_param);\n      if ((*(code **)(data_param + 0x2c) != (code *)0x0) &&\n         (relocation_result = (**(code **)(data_param + 0x2c))(relocation_offset,*(undefined4 *)(data_param + 0x1c)), relocation_result < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data_param + 0xc) << 0x18) < 0) {\n        process_relocation_00083b10(relocation_offset,*(undefined4 *)(data_param + 0x10));\n      }\n      if (*(int *)(data_param + 0x30) != 0) {\n        if (*(int *)(data_param + 0x30) != data_param + 0x40) {\n          process_relocation_00083b10(relocation_offset);\n        }\n        *(undefined4 *)(data_param + 0x30) = 0;\n      }\n      if (*(int *)(data_param + 0x44) != 0) {\n        process_relocation_00083b10(relocation_offset);\n        *(undefined4 *)(data_param + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(data_param + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data_param",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "iVar3": "relocation_result"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "initialize_and_check_memory_00084494",
            "code": "\nvoid initializeAndCheckMemory_00084494(int *resultPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_memory_00080eb0(param2,param3,param3,0,param4);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "initialize_and_check_memory_00084494",
                "param_1": "resultPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "initialize_application_000844bc",
            "code": "\nvoid initialize_application_000844bc(int *output_value,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_application_000844bc_00080eba(input_value);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output_value = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "initialize_application_000844bc",
                "param_1": "output_value",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "initialize_and_check_000844e0",
            "code": "\nvoid initializeAndCheck_000844e0(int *outputPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = initialize_00080ebe(param2,param3,param4);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *outputPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "initialize_and_check_000844e0",
                "param_1": "outputPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "initialize_and_check_value_00084508",
            "code": "\nvoid initializeAndCheckValue_00084508(int *outputValue,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initializeResult;\n  \n  DAT_20071244 = 0;\n  initializeResult = initialize_00080ec2(arg1,arg2,arg3);\n  if ((initializeResult == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "initialize_and_check_value_00084508",
                "param_1": "outputValue",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initializeResult"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_remainder_00084530",
            "code": "\nint calculate_remainder_00084530(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int remainder;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  remainder = calculate_remainder_00084530_0008458c();\n  return remainder;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_remainder_00084530",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "remainder"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_calculate_difference_0008455c",
            "code": "\nvoid subtractAndCalculateDifference_0008455c(uint inputValue,int subtractionValue,undefined4 lowerPart,undefined4 higherPart,int *resultArray)\n\n{\n  uint convertedValue;\n  longlong calculatedValue;\n  \n  calculatedValue = calculate_division_000845c0();\n  calculatedValue = calculatedValue * CONCAT44(higherPart,lowerPart);\n  convertedValue = (uint)calculatedValue;\n  *resultArray = inputValue - convertedValue;\n  resultArray[1] = (subtractionValue - (int)((ulonglong)calculatedValue >> 0x20)) - (uint)(inputValue < convertedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_calculate_difference_0008455c",
                "param_1": "inputValue",
                "param_2": "subtractionValue",
                "param_3": "lowerPart",
                "param_4": "higherPart",
                "param_5": "resultArray",
                "uVar1": "convertedValue",
                "lVar2": "calculatedValue"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_remainder_0008458c",
            "code": "\nvoid calculate_remainder_0008458c(uint dividend,int divisor,undefined4 low_bits_of_multiplier,undefined4 high_bits_of_multiplier,int *result_array)\n\n{\n  uint unsigned_remainder;\n  longlong product;\n  \n  product = divide_and_find_remainder_00084860();\n  product = product * CONCAT44(high_bits_of_multiplier,low_bits_of_multiplier);\n  unsigned_remainder = (uint)product;\n  *result_array = dividend - unsigned_remainder;\n  result_array[1] = (divisor - (int)((ulonglong)product >> 0x20)) - (uint)(dividend < unsigned_remainder);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_remainder_0008458c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "low_bits_of_multiplier",
                "param_4": "high_bits_of_multiplier",
                "param_5": "result_array",
                "uVar1": "unsigned_remainder",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "calculate_division_000845c0",
            "code": "\nundefined8 calculateDivision_000845c0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint q1;\n  uint q2;\n  uint u1;\n  uint u2;\n  int shiftCount;\n  uint product1;\n  uint product2;\n  uint isNegativeDividend;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isBorrow;\n  \n  if ((int)divisor < 0) {\n    isBorrow = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)isBorrow;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)remainder < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    isBorrow = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)isBorrow;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount != 0) {\n        q2 = dividend >> (0x20U - shiftCount & 0xff);\n        quotient = quotient << shiftCount;\n        dividend = dividend << shiftCount;\n        divisor = divisor << shiftCount | q2;\n      }\n      q1 = quotient >> 0x10;\n      u1 = divisor / q1;\n      product1 = (quotient & 0xffff) * u1;\n      temp1 = dividend >> 0x10 | (divisor - q1 * u1) * 0x10000;\n      q2 = u1;\n      if (temp1 <= product1 && product1 - temp1 != 0) {\n        isBorrow = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        q2 = u1 - 1;\n        if ((isBorrow == false) && (temp1 <= product1 && product1 - temp1 != 0)) {\n          q2 = u1 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      product2 = (temp1 - product1) / q1;\n      u1 = (quotient & 0xffff) * product2;\n      product1 = dividend & 0xffff | ((temp1 - product1) - q1 * product2) * 0x10000;\n      q1 = product2;\n      if (product1 <= u1 && u1 - product1 != 0) {\n        q1 = product2 - 1;\n        if ((CARRY4(product1,quotient) == false) &&\n           (product1 + quotient <= u1 && u1 - (product1 + quotient) != 0)) {\n          q1 = product2 - 2;\n        }\n      }\n      q1 = q1 | q2 << 0x10;\n      q2 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        u1 = quotient >> 0x10;\n        temp3 = quotient & 0xffff;\n        q2 = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        q2 = divisor >> (0x20U - shiftCount & 0xff);\n        u1 = quotient >> 0x10;\n        temp1 = q2 / u1;\n        temp3 = quotient & 0xffff;\n        product1 = temp3 * temp1;\n        product2 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        q2 = product2 >> 0x10 | (q2 - u1 * temp1) * 0x10000;\n        dividend = dividend << shiftCount;\n        q1 = temp1;\n        if (q2 <= product1 && product1 - q2 != 0) {\n          isBorrow = CARRY4(q2,quotient);\n          q2 = q2 + quotient;\n          q1 = temp1 - 1;\n          if ((isBorrow == false) && (q2 <= product1 && product1 - q2 != 0)) {\n            q1 = temp1 - 2;\n            q2 = q2 + quotient;\n          }\n        }\n        u2 = (q2 - product1) / u1;\n        temp1 = temp3 * u2;\n        divisor = product2 & 0xffff | ((q2 - product1) - u1 * u2) * 0x10000;\n        q2 = u2;\n        if (divisor <= temp1 && temp1 - divisor != 0) {\n          isBorrow = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          q2 = u2 - 1;\n          if ((isBorrow == false) && (divisor <= temp1 && temp1 - divisor != 0)) {\n            q2 = u2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp1;\n        q2 = q2 | q1 << 0x10;\n      }\n      q1 = divisor / u1;\n      temp1 = temp3 * q1;\n      product2 = dividend >> 0x10 | (divisor - u1 * q1) * 0x10000;\n      product1 = q1;\n      if (product2 <= temp1 && temp1 - product2 != 0) {\n        isBorrow = CARRY4(product2,quotient);\n        product2 = product2 + quotient;\n        product1 = q1 - 1;\n        if ((isBorrow == false) && (product2 <= temp1 && temp1 - product2 != 0)) {\n          product1 = q1 - 2;\n          product2 = product2 + quotient;\n        }\n      }\n      u2 = (product2 - temp1) / u1;\n      temp3 = temp3 * u2;\n      u1 = dividend & 0xffff | ((product2 - temp1) - u1 * u2) * 0x10000;\n      q1 = u2;\n      if (u1 <= temp3 && temp3 - u1 != 0) {\n        q1 = u2 - 1;\n        if ((CARRY4(u1,quotient) == false) &&\n           (u1 + quotient <= temp3 && temp3 - (u1 + quotient) != 0)) {\n          q1 = u2 - 2;\n        }\n      }\n      q1 = q1 | product1 << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    q2 = 0;\n    q1 = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        q2 = 0;\n        q1 = 1;\n      }\n      else {\n        q1 = 0;\n        q2 = 0;\n      }\n    }\n    else {\n      q2 = 0x20 - shiftCount;\n      u1 = divisor >> (q2 & 0xff);\n      temp3 = quotient >> (q2 & 0xff) | remainder << shiftCount;\n      temp1 = temp3 >> 0x10;\n      q1 = u1 / temp1;\n      product2 = (temp3 & 0xffff) * q1;\n      product1 = divisor << shiftCount | dividend >> (q2 & 0xff);\n      u1 = product1 >> 0x10 | (u1 - temp1 * q1) * 0x10000;\n      q2 = q1;\n      if (u1 <= product2 && product2 - u1 != 0) {\n        isBorrow = CARRY4(u1,temp3);\n        u1 = u1 + temp3;\n        q2 = q1 - 1;\n        if ((isBorrow == false) && (u1 <= product2 && product2 - u1 != 0)) {\n          q2 = q1 - 2;\n          u1 = u1 + temp3;\n        }\n      }\n      u2 = (u1 - product2) / temp1;\n      temp2 = (temp3 & 0xffff) * u2;\n      u1 = product1 & 0xffff | ((u1 - product2) - temp1 * u2) * 0x10000;\n      q1 = u2;\n      if (u1 <= temp2 && temp2 - u1 != 0) {\n        isBorrow = CARRY4(u1,temp3);\n        u1 = u1 + temp3;\n        q1 = u2 - 1;\n        if ((isBorrow == false) && (u1 <= temp2 && temp2 - u1 != 0)) {\n          q1 = u2 - 2;\n          u1 = u1 + temp3;\n        }\n      }\n      q1 = q1 | q2 << 0x10;\n      temp = (ulonglong)q1 * (ulonglong)(quotient << shiftCount);\n      product1 = (uint)((ulonglong)temp >> 0x20);\n      q2 = 0;\n      if ((u1 - temp2 < product1) ||\n         ((u1 - temp2 == product1 && (dividend << shiftCount < (uint)temp)))) {\n        q1 = q1 - 1;\n        q2 = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    isBorrow = q1 != 0;\n    q1 = -q1;\n    q2 = -q2 - (uint)isBorrow;\n  }\n  return CONCAT44(q2,q1);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "calculate_division_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "q1",
                "uVar3": "q2",
                "uVar4": "u1",
                "uVar5": "u2",
                "iVar6": "shiftCount",
                "uVar7": "product1",
                "uVar8": "product2",
                "uVar9": "isNegativeDividend",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "bVar13": "isBorrow"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "divide_and_find_remainder_00084860",
            "code": "\nulonglong divideAndFindRemainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong product;\n  uint result;\n  uint dividendHigh;\n  uint divisorHigh;\n  uint productLow;\n  uint dividendLow;\n  uint quotientHigh;\n  uint quotientLow;\n  uint temp;\n  int shift;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift = LZCOUNT(quotient);\n      if (shift == 0) {\n        divisor = divisor - quotient;\n        dividendHigh = quotient >> 0x10;\n        productLow = quotient & 0xffff;\n        result = 1;\n      }\n      else {\n        quotient = quotient << shift;\n        quotientLow = divisor >> (0x20U - shift & 0xff);\n        dividendHigh = quotient >> 0x10;\n        temp = quotientLow / dividendHigh;\n        productLow = quotient & 0xffff;\n        result = productLow * temp;\n        dividendLow = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        divisorHigh = dividendLow >> 0x10 | (quotientLow - dividendHigh * temp) * 0x10000;\n        dividend = dividend << shift;\n        quotientLow = temp;\n        if (divisorHigh <= result && result - divisorHigh != 0) {\n          carryFlag = CARRY4(divisorHigh,quotient);\n          divisorHigh = divisorHigh + quotient;\n          quotientLow = temp - 1;\n          if ((carryFlag == false) && (divisorHigh <= result && result - divisorHigh != 0)) {\n            quotientLow = temp - 2;\n            divisorHigh = divisorHigh + quotient;\n          }\n        }\n        quotientHigh = (divisorHigh - result) / dividendHigh;\n        temp = productLow * quotientHigh;\n        divisor = dividendLow & 0xffff | ((divisorHigh - result) - dividendHigh * quotientHigh) * 0x10000;\n        result = quotientHigh;\n        if (divisor <= temp && temp - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result = quotientHigh - 1;\n          if ((carryFlag == false) && (divisor <= temp && temp - divisor != 0)) {\n            result = quotientHigh - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp;\n        result = result | quotientLow << 0x10;\n      }\n      temp = divisor / dividendHigh;\n      divisorHigh = productLow * temp;\n      dividendLow = dividend >> 0x10 | (divisor - dividendHigh * temp) * 0x10000;\n      quotientLow = temp;\n      if (dividendLow <= divisorHigh && divisorHigh - dividendLow != 0) {\n        carryFlag = CARRY4(dividendLow,quotient);\n        dividendLow = dividendLow + quotient;\n        quotientLow = temp - 1;\n        if ((carryFlag == false) && (dividendLow <= divisorHigh && divisorHigh - dividendLow != 0)) {\n          quotientLow = temp - 2;\n          dividendLow = dividendLow + quotient;\n        }\n      }\n      temp = (dividendLow - divisorHigh) / dividendHigh;\n      productLow = productLow * temp;\n      dividendLow = dividend & 0xffff | ((dividendLow - divisorHigh) - dividendHigh * temp) * 0x10000;\n      dividendHigh = temp;\n      if (dividendLow <= productLow && productLow - dividendLow != 0) {\n        dividendHigh = temp - 1;\n        if ((CARRY4(dividendLow,quotient) == false) &&\n           (dividendLow + quotient <= productLow && productLow - (dividendLow + quotient) != 0)) {\n          dividendHigh = temp - 2;\n        }\n      }\n      return CONCAT44(result,dividendHigh | quotientLow << 0x10);\n    }\n    shift = LZCOUNT(quotient);\n    if (shift != 0) {\n      quotientLow = dividend >> (0x20U - shift & 0xff);\n      quotient = quotient << shift;\n      dividend = dividend << shift;\n      divisor = quotientLow | divisor << shift;\n    }\n    result = quotient >> 0x10;\n    dividendHigh = divisor / result;\n    productLow = (quotient & 0xffff) * dividendHigh;\n    temp = dividend >> 0x10 | (divisor - result * dividendHigh) * 0x10000;\n    quotientLow = dividendHigh;\n    if (temp <= productLow && productLow - temp != 0) {\n      carryFlag = CARRY4(temp,quotient);\n      temp = temp + quotient;\n      quotientLow = dividendHigh - 1;\n      if ((carryFlag == false) && (temp <= productLow && productLow - temp != 0)) {\n        quotientLow = dividendHigh - 2;\n        temp = temp + quotient;\n      }\n    }\n    dividendLow = (temp - productLow) / result;\n    dividendHigh = (quotient & 0xffff) * dividendLow;\n    productLow = dividend & 0xffff | ((temp - productLow) - result * dividendLow) * 0x10000;\n    result = dividendLow;\n    if (productLow <= dividendHigh && dividendHigh - productLow != 0) {\n      result = dividendLow - 1;\n      if ((CARRY4(productLow,quotient) == false) &&\n         (productLow + quotient <= dividendHigh && dividendHigh - (productLow + quotient) != 0)) {\n        result = dividendLow - 2;\n      }\n    }\n    result = result | quotientLow << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift = LZCOUNT(remainder);\n    if (shift == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shift;\n      quotientLow = divisor >> (result & 0xff);\n      dividendHigh = remainder << shift | quotient >> (result & 0xff);\n      productLow = dividendHigh >> 0x10;\n      divisorHigh = quotientLow / productLow;\n      temp = (dividendHigh & 0xffff) * divisorHigh;\n      dividendLow = dividend >> (result & 0xff) | divisor << shift;\n      result = dividendLow >> 0x10 | (quotientLow - productLow * divisorHigh) * 0x10000;\n      quotientLow = divisorHigh;\n      if (result <= temp && temp - result != 0) {\n        carryFlag = CARRY4(result,dividendHigh);\n        result = result + dividendHigh;\n        quotientLow = divisorHigh - 1;\n        if ((carryFlag == false) && (result <= temp && temp - result != 0)) {\n          quotientLow = divisorHigh - 2;\n          result = result + dividendHigh;\n        }\n      }\n      divisorHigh = (result - temp) / productLow;\n      quotientHigh = (dividendHigh & 0xffff) * divisorHigh;\n      productLow = dividendLow & 0xffff | ((result - temp) - productLow * divisorHigh) * 0x10000;\n      result = divisorHigh;\n      if (productLow <= quotientHigh && quotientHigh - productLow != 0) {\n        carryFlag = CARRY4(productLow,dividendHigh);\n        productLow = productLow + dividendHigh;\n        result = divisorHigh - 1;\n        if ((carryFlag == false) && (productLow <= quotientHigh && quotientHigh - productLow != 0)) {\n          result = divisorHigh - 2;\n          productLow = productLow + dividendHigh;\n        }\n      }\n      result = result | quotientLow << 0x10;\n      product = (ulonglong)result * (ulonglong)(quotient << shift);\n      quotientLow = (uint)((ulonglong)product >> 0x20);\n      if ((productLow - quotientHigh < quotientLow) || ((productLow - quotientHigh == quotientLow && (dividend << shift < (uint)product)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084860": "divide_and_find_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "dividendHigh",
                "uVar4": "divisorHigh",
                "uVar5": "productLow",
                "uVar6": "dividendLow",
                "uVar7": "quotientHigh",
                "uVar8": "quotientLow",
                "uVar9": "temp",
                "iVar10": "shift",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 95364,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}