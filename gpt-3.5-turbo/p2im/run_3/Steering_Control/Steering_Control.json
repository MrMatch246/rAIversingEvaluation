{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_and_call_function_000817c8",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "uStack_c": "second_param",
                "uStack_8": "third_param",
                "uStack_4": "fourth_param"
            },
            "code": "void process_data_and_call_function_000817c8(int data, int* ptr1, int* ptr2, int* ptr3) {\n  int second_param = *ptr1;\n  int third_param = *ptr2;\n  int fourth_param = *ptr3;\n  call_function(*DAT_000817ec, *(int *)(*DAT_000817ec + 8), data, &second_param);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_and_copy_00081560",
                "param_1": "value1",
                "param_2": "value2",
                "copy_data_0008151c": "copy_data"
            },
            "code": "int compare_and_copy_00081560(int value1, int value2)\n{\n    if (value1 != value2) {\n        copy_data();\n    }\n    return value1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "compare_and_copy_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "check_bits_set_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "max_checks",
                "iVar1": "num_found",
                "*param_1": "*data"
            },
            "code": "int check_bits_set_00081684(uint *data, uint mask, uint expected, int max_checks) {\n  int num_checks = 0;\n  while (max_checks > 0) {\n    if ((*data & mask) != expected) {\n      while (max_checks > 0) {\n        if ((*data & mask) == expected) {\n          int num_found = 0;\n          do {\n            if ((*data & mask) != expected) {\n              return num_found;\n            }\n            num_found++;\n          } while (num_found != max_checks);\n          return 0;\n        }\n        max_checks--;\n      }\n      return 0;\n    }\n    max_checks--;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "check_bits_set_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_check_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "aligned_src",
                "puVar4": "aligned_dest",
                "uVar5": "current_word",
                "uVar6": "current_byte",
                "puVar7": "aligned_dest",
                "bVar8": "is_null_byte"
            },
            "code": "void copy_string_with_alignment_check_000825cc(uint *dest, uint *src) {\n    char current_char;\n    ushort current_short;\n    uint *aligned_src;\n    uint current_word;\n    uint *aligned_dest;\n    bool is_null_byte;\n\n    if ((((uint)dest ^ (uint)src) & 3) != 0) {\n        do {\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            src = (uint *)((int)src + 1);\n            dest = (uint *)((int)dest + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    if (((uint)src & 3) != 0) {\n        aligned_src = src;\n        if (((uint)src & 1) != 0) {\n            aligned_src = (uint *)((int)src + 1);\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            dest = (uint *)((int)dest + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        src = aligned_src;\n        if (((uint)aligned_src & 2) != 0) {\n            aligned_src = (uint *)((int)aligned_src + 2);\n            current_short = *(ushort *)src;\n            is_null_byte = (current_short & 0xff) == 0;\n            if (is_null_byte) {\n                *(char *)dest = (char)current_short;\n            }\n            else {\n                *(ushort *)dest = current_short;\n                is_null_byte = (current_short & 0xff00) == 0;\n                dest = (uint *)((int)dest + 2);\n            }\n            if (is_null_byte) {\n                return;\n            }\n        }\n    }\n\n    current_word = *src;\n    aligned_src = src + 1;\n    aligned_dest = dest;\n    if (((uint)src & 4) != 0) {\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto LAB_00082630;\n        }\n        aligned_dest = dest + 1;\n        *dest = current_word;\n        aligned_src = src + 2;\n        current_word = src[1];\n    }\n    while (true) {\n        current_word = *aligned_src;\n        dest = aligned_dest;\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            break;\n        }\n        *aligned_dest = current_word;\n        aligned_src = aligned_src + 2;\n        aligned_dest = aligned_dest + 2;\n    }\n\nLAB_00082630:\n    do {\n        *(char *)dest = (char)current_word;\n        uint current_byte = current_word & 0xff;\n        current_word = current_word >> 8 | current_word << 0x18;\n        dest = (uint *)((int)dest + 1);\n    } while (current_byte != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_0008151c",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "copy_string_with_alignment_check_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_callback_if_set_00080118",
                "param_1": "flag",
                "param_2": "data",
                "param_3": "size",
                "param_4": "extra_param",
                "DAT_00080134": "flag_value",
                "PTR_DAT_0008013c": "data_pointer",
                "DAT_00080140": "callback_function",
                "DAT_00080144": "callback"
            },
            "code": "void execute_callback_if_set_00080118(int flag, char* data, int size, code* DAT_00080144, int extra_param) {\n  if (flag != 0) {\n    data = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080144 != 0) && (DAT_00080140 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, data, size, DAT_00080144, extra_param);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_callback_if_set_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_param_00080aa8",
                "param_1": "param",
                "uVar1": "mask"
            },
            "code": "int check_param_00080aa8(uint param)\n{\n    uint mask;\n    if (param < 45)\n    {\n        if (param < 32)\n        {\n            mask = 1 << (param & 0xff);\n            if ((mask & *(uint *)(DAT_00080ae8 + 0x18)) != mask)\n            {\n                *(uint *)(DAT_00080ae8 + 0x10) = mask;\n            }\n        }\n        else\n        {\n            mask = 1 << (param - 32 & 0xff);\n            if ((mask & *(uint *)(DAT_00080ae8 + 0x108)) != mask)\n            {\n                *(uint *)(DAT_00080ae8 + 0x100) = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "check_param_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "process_data_00080f0c",
                "param_1": "index",
                "param_2": "type",
                "puVar1": "data",
                "puVar2": "flags",
                "iVar3": "result",
                "uVar4": "mask1",
                "uVar5": "mask2",
                "uVar6": "byte_count",
                "bVar7": "byte1",
                "bVar8": "byte2",
                "iVar9": "param1",
                "iVar10": "data_address"
            },
            "code": "int process_data_00080f0c(int index, int type)\n{\n  uint32_t mask1;\n  uint32_t mask2;\n  int result;\n  uint8_t byte1;\n  uint8_t byte2;\n  uint8_t byte3;\n  uint8_t byte4;\n  uint8_t byte5;\n  uint8_t byte6;\n  uint8_t byte7;\n  uint8_t byte8;\n  uint8_t byte9;\n  uint8_t byte10;\n  uint8_t byte11;\n  uint8_t byte12;\n  uint8_t byte13;\n  uint8_t byte14;\n  uint8_t byte15;\n  uint8_t byte16;\n  uint8_t *data;\n  uint8_t *flags;\n  data = PTR_DAT_00081008;\n  flags = PTR_DAT_0008100c;\n  if (data[index * 0x1c + 0xc] != 0)\n  {\n    if ((flags[index] & 0xf) == 4)\n    {\n      result = set_bit(DAT_00081010, data[index * 0x1c + 0x19]);\n    }\n    byte1 = flags[index];\n    byte2 = byte1 & 0xf;\n    if (byte2 < 3 && byte1 != 0)\n    {\n      if (byte2 == 2 && type == 0)\n      {\n        return result;\n      }\n      else if (byte2 == 1 && type == 2)\n      {\n        return result;\n      }\n      else if (byte2 == 3)\n      {\n        if (type == 1)\n        {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (type != 1)\n    {\nLAB_00080f68:\n      if (type == 0)\n      {\n        int param1 = index * 0x1c;\n        check_param(*(uint32_t *)(data + param1 + 8));\n        result = process_data_00080f0c(*(uint32_t *)(data + param1), 3);\n        byte1 = flags[index] & 0xf0 | 2;\n      }\n      else\n      {\n        if (type != 2)\n        {\n          return result;\n        }\n        int param1 = index * 0x1c;\n        check_param(*(uint32_t *)(data + param1 + 8));\n        result = process_data_00080f0c(*(uint32_t *)(data + param1), 3, 1);\n        byte1 = flags[index] & 0xf0 | 1;\n      }\n      flags[index] = byte1;\n      return result;\n    }\n    int param1 = index * 0x1c;\n    int data_address = *(int *)(data + param1);\n    if (byte1 >> 4 == 0)\n    {\n      mask1 = 4;\n    }\n    else\n    {\n      mask1 = 5;\n    }\n    byte1 = *(uint8_t *)(data + param1 + 0x10);\n    byte2 = *(uint8_t *)(data + param1 + 0x14);\n    byte3 = *(uint8_t *)(data + param1 + 0x18);\n    byte4 = *(uint8_t *)(data + param1 + 0x1c);\n    byte5 = *(uint8_t *)(data + param1 + 0x20);\n    byte6 = *(uint8_t *)(data + param1 + 0x24);\n    byte7 = *(uint8_t *)(data + param1 + 0x28);\n    byte8 = *(uint8_t *)(data + param1 + 0x2c);\n    byte9 = *(uint8_t *)(data + param1 + 0x30);\n    byte10 = *(uint8_t *)(data + param1 + 0x34);\n    byte11 = *(uint8_t *)(data + param1 + 0x38);\n    byte12 = *(uint8_t *)(data + param1 + 0x3c);\n    byte13 = *(uint8_t *)(data + param1 + 0x40);\n    byte14 = *(uint8_t *)(data + param1 + 0x44);\n    byte15 = *(uint8_t *)(data + param1 + 0x48);\n    byte16 = *(uint8_t *)(data + param1 + 0x4c);\n    result = process_data_00080f0c(data_address, mask1, byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8, byte9, byte10, byte11, byte12, byte13, byte14, byte15, byte16);\n    flags[index] = flags[index] & 0xf0 | 3;\n    if (*(int *)(data_address + 0x18) == -1)\n    {\n      uint32_t byte_count = *(uint32_t *)(data + param1 + 8);\n      if (byte_count > 0x2c)\n      {\n        return 1;\n      }\n      if (byte_count < 0x20)\n      {\n        mask2 = 1 << (byte_count & 0xff);\n        uint32_t result_mask = *(uint32_t *)(DAT_00080b28 + 0x18) & mask2;\n        if (result_mask == mask2)\n        {\n          *(uint32_t *)(DAT_00080b28 + 0x14) = result_mask;\n        }\n      }\n      else\n      {\n        mask2 = 1 << (byte_count - 0x20 & 0xff);\n        uint32_t result_mask = *(uint32_t *)(DAT_00080b28 + 0x108) & mask2;\n        if (result_mask == mask2)\n        {\n          *(uint32_t *)(DAT_00080b28 + 0x104) = result_mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080d58",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_00081014",
                "FUN_000801e0",
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "process_data_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_block_00083a74",
                "param_1": "base_address",
                "param_2": "block_size",
                "iVar1": "data_segment_start",
                "puVar2": "ptr_data_segment",
                "iVar3": "previous_block_start",
                "uVar4": "adjusted_block_size",
                "iVar5": "block_start_address",
                "getPreviousValue_0008236c": "getPreviousValue",
                "DAT_00083b04": "data_segment_start",
                "PTR_DAT_00083b08": "ptr_data_segment",
                "DAT_00083b0c": "data_segment_end"
            },
            "code": "int allocate_memory_block_00083a74(uint32_t base_address, int block_size)\n{\n  int DAT_00083b04 = DAT_00083b04;\n  do_nothing();\n  uint32_t adjusted_block_size = (*(uint32_t *)(*(int *)(DAT_00083b04 + 8) + 4) & 0xfffffffc);\n  int block_start_address = ((adjusted_block_size - block_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < block_start_address) {\n    int previous_block_end = getPreviousValue(base_address, 0);\n    if (previous_block_end == *(int *)(DAT_00083b04 + 8) + adjusted_block_size) {\n      int previous_block_start = getPreviousValue(base_address, -block_start_address);\n      undefined *PTR_DAT_00083b08 = PTR_DAT_00083b08;\n      if (previous_block_start != -1) {\n        int DAT_00083b04_value = *(int *)PTR_DAT_00083b08;\n        *(uint32_t *)(*(int *)(DAT_00083b04 + 8) + 4) = adjusted_block_size - block_start_address | 1;\n        *(int *)PTR_DAT_00083b08 = DAT_00083b04_value - block_start_address;\n        do_nothing(param_1);\n        return 1;\n      }\n      block_start_address = getPreviousValue(base_address, 0);\n      PTR_DAT_00083b08 = PTR_DAT_00083b08;\n      uint32_t block_size_difference = block_start_address - *(int *)(DAT_00083b04 + 8);\n      if (0xf < (int)block_size_difference) {\n        int DAT_00083b0c = *DAT_00083b0c;\n        *(uint32_t *)(*(int *)(DAT_00083b04 + 8) + 4) = block_size_difference | 1;\n        *(int *)PTR_DAT_00083b08 = block_start_address - DAT_00083b0c;\n      }\n    }\n  }\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "get_default_value_000844e0",
                "param_1": "output",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "default_value_ptr",
                "iVar2": "default_value"
            },
            "code": "void get_default_value_000844e0(int* output, int param1, int param2, int param3) {\n  undefined* default_value_ptr = PTR_DAT_00084504;\n  *(int*)default_value_ptr = 0;\n  int default_value = get_default_value_000844e0_00080ebe(param1, param2, param3);\n  if (default_value == -1 && *(int*)default_value_ptr != 0) {\n    *output = *(int*)default_value_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "get_default_value_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "memory",
                "param_2": "size",
                "iVar1": "prev_block_start",
                "uVar2": "block_size",
                "iVar3": "prev_block_end",
                "uVar4": "aligned_size",
                "iVar5": "block_start",
                "iVar6": "index",
                "iVar8": "last_block",
                "uVar7": "next_block_size",
                "DAT_00083c98": "last_block",
                "DAT_00083c9c": "last_block + 8",
                "PTR_DAT_00083ca0": "pointer to threshold",
                "PTR_DAT_00083ca4": "pointer to default size"
            },
            "code": "void allocate_memory_block_00083b10(void* memory, int size) {\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  int DAT_00083c98 = DAT_00083c98;\n  uint block_size = *(uint *)(size - 4);\n  int block_start = size - 8;\n  uint aligned_size = block_size & 0xfffffffe;\n  int block_end = block_start + aligned_size;\n  uint next_block_size = *(uint *)(block_end + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083c98 + 8) == block_end) {\n    next_block_size += aligned_size;\n    if (-1 < (int)(block_size << 0x1f)) {\n      block_start = block_start - *(int *)(size - 8);\n      int prev_block_start = *(int *)(block_start + 0xc);\n      int prev_block_end = *(int *)(block_start + 8);\n      next_block_size += *(int *)(size - 8);\n      *(int *)(prev_block_end + 0xc) = prev_block_start;\n      *(int *)(prev_block_start + 8) = prev_block_end;\n    }\n    uint threshold = *DAT_00083ca0;\n    *(uint *)(block_start + 4) = next_block_size | 1;\n    *(int *)(DAT_00083c9c) = block_start;\n    if (threshold <= next_block_size) {\n      allocate_memory_block_00083b10(memory, *(undefined4 *)PTR_DAT_00083ca4);\n    }\n  }\n  else {\n    block_size = block_size & 1;\n    *(uint *)(block_end + 4) = next_block_size;\n    if (block_size == 0) {\n      block_start = block_start - *(int *)(size - 8);\n      int prev_block_end = *(int *)(block_start + 8);\n      aligned_size = aligned_size + *(int *)(size - 8);\n      if (prev_block_end == DAT_00083c9c) {\n        block_size = 1;\n      }\n      else {\n        int prev_block_start = *(int *)(block_start + 0xc);\n        *(int *)(prev_block_end + 0xc) = prev_block_start;\n        *(int *)(prev_block_start + 8) = prev_block_end;\n      }\n    }\n    else {\n      block_size = 0;\n    }\n    if (-1 < *(int *)(block_end + next_block_size + 4) << 0x1f) {\n      aligned_size = aligned_size + next_block_size;\n      int prev_block_end = *(int *)(block_end + 8);\n      if ((block_size == 0) && (prev_block_end == DAT_00083c9c)) {\n        *(int *)(DAT_00083c98 + 0x14) = block_start;\n        *(int *)(DAT_00083c98 + 0x10) = block_start;\n        *(int *)(block_start + 0xc) = prev_block_end;\n        *(int *)(block_start + 8) = prev_block_end;\n        *(uint *)(block_start + 4) = aligned_size | 1;\n        *(uint *)(block_start + aligned_size) = aligned_size;\n        goto LAB_00083ba4;\n      }\n      int prev_block_start = *(int *)(block_end + 0xc);\n      *(int *)(prev_block_end + 0xc) = prev_block_start;\n      *(int *)(prev_block_start + 8) = prev_block_end;\n    }\n    *(uint *)(block_start + 4) = aligned_size | 1;\n    *(uint *)(block_start + aligned_size) = aligned_size;\n    if (block_size == 0) {\n      if (aligned_size < 0x200) {\n        uint mask = *(uint *)(DAT_00083c98 + 4);\n        int free_block_start = DAT_00083c98 + (aligned_size & 0xfffffff8);\n        int free_block_end = *(int *)(free_block_start + 8);\n        *(int *)(block_start + 8) = free_block_end;\n        *(int *)(block_start + 0xc) = free_block_start;\n        *(uint *)(DAT_00083c98 + 4) = mask | 1 << ((int)(aligned_size >> 3) >> 2 & 0xffU);\n        *(int *)(free_block_start + 8) = block_start;\n        *(int *)(free_block_end + 0xc) = block_start;\n        do_nothing_00081f98(memory);\n        return;\n      }\n      uint log_size = aligned_size >> 9;\n      if (log_size < 5) {\n        int index = (aligned_size >> 6) + 0x38;\n        int offset = index * 2;\n      }\n      else if (log_size < 0x15) {\n        int index = log_size + 0x5b;\n        int offset = index * 2;\n      }\n      else if (log_size < 0x55) {\n        int index = (aligned_size >> 0xc) + 0x6e;\n        int offset = index * 2;\n      }\n      else if (log_size < 0x155) {\n        int index = (aligned_size >> 0xf) + 0x77;\n        int offset = index * 2;\n      }\n      else if (log_size < 0x555) {\n        int index = (aligned_size >> 0x12) + 0x7c;\n        int offset = index * 2;\n      }\n      else {\n        int offset = 0xfc;\n        int index = 0x7e;\n      }\n      int free_block_start = DAT_00083c98 + offset * 4;\n      int free_block_end = *(int *)(free_block_start + 8);\n      if (free_block_end == free_block_start) {\n        *(uint *)(DAT_00083c98 + 4) = *(uint *)(DAT_00083c98 + 4) | 1 << (index >> 2 & 0xffU);\n        free_block_end = free_block_start;\n      }\n      else {\n        do {\n          if ((*(uint *)(free_block_end + 4) & 0xfffffffc) <= aligned_size) break;\n          free_block_end = *(int *)(free_block_end + 8);\n        } while (free_block_start != free_block_end);\n        free_block_end = *(int *)(free_block_end + 0xc);\n      }\n      *(int *)(block_start + 0xc) = free_block_end;\n      *(int *)(block_start + 8) = free_block_start;\n      *(int *)(free_block_end + 8) = block_start;\n      *(int *)(free_block_start + 0xc) = block_start;\n    }\n  }\nLAB_00083ba4:\n  do_nothing(memory);\n  return;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084484",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081800"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "return_zero_00080e80"
            },
            "code": "int return_zero_00080e80(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "convert_number_to_string_thunk_0008113a",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "format_character",
                "iVar1": "result",
                "iVar2": "negative",
                "execute_function_pointer_000810cc": "execute_function_pointer",
                "convert_decimal_to_base_n_000810fc": "convert_decimal_to_base_n"
            },
            "code": "int convert_number_to_string_thunk_0008113a(undefined4 *function_pointer, uint number, uint base, undefined4 format_character) {\n  int result;\n  int negative = 0;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer, number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)number < 0) {\n      negative = 1;\n      result = execute_function_pointer_000810cc(function_pointer, 0x2d);\n      number = -number;\n    }\n  } else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_n(function_pointer, number, base, format_character);\n  if (negative) {\n    result += execute_function_pointer_000810cc(function_pointer, 0x2d);\n  }\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "convert_number_to_string_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "getPreviousValue_0008236c",
                "param_1": "result",
                "param_2": "arg",
                "puVar1": "ptr",
                "iVar2": "previousValue"
            },
            "code": "void getPreviousValue_0008236c(int *result, undefined4 arg)\n{\n    undefined *ptr = PTR_DAT_0008238c;\n    *(undefined4 *)ptr = 0;\n    int previousValue = addAndGetPreviousValue(arg);\n    if (previousValue == -1 && *(int *)ptr != 0)\n    {\n        *result = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "getPreviousValue_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "value_ptr",
                "*PTR_": "*",
                "undefined4": "unsigned int",
                "DAT_": "data_"
            },
            "code": "void set_default_value_00080d62(int value_ptr){\n    *PTR_(undefined4 *PTR_)(value_ptr + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_default_value_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_input_data_000842a4",
                "param_1": "input_length",
                "param_2": "input_data",
                "param_3": "data_structures",
                "param_4": "data_structure_size",
                "uVar1": "input_short",
                "uVar2": "input_int",
                "puVar3": "data_pointer",
                "iVar4": "data_start"
            },
            "code": "uint process_input_data_000842a4(int input_length, uint input_data, undefined4 *data_structures, undefined4 data_structure_size)\n{\n  ushort input_short;\n  uint input_int;\n  undefined *data_pointer;\n  int data_start;\n\n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  input_short = *(ushort *)(data_structures + 3);\n  input_int = (uint)input_short;\n  data_structures[2] = data_structures[6];\n  if ((-1 < (int)(input_int << 0x1c)) || (data_start = data_structures[4], data_start == 0)) {\n    data_start = check_and_initialize_data_structures(input_length, data_structures, input_short, input_int, data_structure_size);\n    if (data_start != 0) {\n      return 0xffffffff;\n    }\n    input_short = *(ushort *)(data_structures + 3);\n    data_start = data_structures[4];\n    input_int = (uint)input_short;\n  }\n  input_data = input_data & 0xff;\n  if ((int)(input_int << 0x12) < 0) {\n    data_pointer = (undefined *)*data_structures;\n    data_start = (int)data_pointer - data_start;\n    if (data_start < (int)data_structures[5]) {\n      goto LAB_000842d6;\n    }\n  }\n  else {\n    data_structures[0x19] = data_structures[0x19] & 0xffffdfff;\n    data_pointer = (undefined *)*data_structures;\n    *(ushort *)(data_structures + 3) = input_short | 0x2000;\n    data_start = (int)data_pointer - data_start;\n    if (data_start < (int)data_structures[5]) {\n      goto LAB_000842d6;\n    }\n  }\n  data_start = process_data(input_length, data_structures);\n  if (data_start != 0) {\n    return 0xffffffff;\n  }\n  data_pointer = (undefined *)*data_structures;\n  data_start = 1;\nLAB_000842d8:\n  data_structures[2] = data_structures[2] + -1;\n  *data_structures = data_pointer + 1;\n  *data_pointer = (char)input_data;\n  if (((data_structures[5] == data_start) || (((int)((uint)*(ushort *)(data_structures + 3) << 0x1f) < 0 && (input_data == 10)))) && (data_start = process_data(input_length, data_structures), data_start != 0)) {\n    return 0xffffffff;\n  }\n  return input_data;\n}\n",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_input_data_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "initialize_params_000814f6",
                "param_1": "params",
                "param_2": "param_len",
                "uVar1": "count",
                "count_bytes_until_null_00082688": "count_bytes_until_null",
                "execute_command_and_update_params_000814d0": "execute_command_and_update_params"
            },
            "code": "undefined4 *initialize_params_000814f6(undefined4 *params, int param_len)\n{\n  undefined4 count;\n  params[0] = 0;\n  params[1] = 0;\n  params[2] = 0;\n  if (param_len != 0) {\n    count = count_bytes_until_null(param_len);\n    execute_command_and_update_params(params, param_len, count);\n  }\n  return params;\n}",
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "initialize_params_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "add_to_global_and_return_previous_00080e88",
                "param_1": "input",
                "puVar1": "global_ptr",
                "iVar2": "previous_value"
            },
            "code": "int add_to_global_and_return_previous_00080e88(int input) {\n  undefined *global_ptr;\n  int previous_value;\n  global_ptr = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  previous_value = *(int *)global_ptr;\n  *(int *)global_ptr = input + previous_value;\n  return previous_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "add_to_global_and_return_previous_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "add_to_buffer_000836d8",
                "PTR_DAT_000836e8": "buffer_data",
                "DAT_000836e4": "buffer_size",
                "PTR_DAT_000836d0": "buffer_index_ptr",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "code": "void add_to_buffer_000836d8(void)\n{\n    unsigned char *data = PTR_DAT_000836e8;\n    if (DAT_000836e4 == 0)\n    {\n        return;\n    }\n    int buffer_index = *(int *)PTR_DAT_000836d0;\n    unsigned int *buffer_ptr = *(unsigned int **)(buffer_index + 0x148);\n    if (buffer_ptr == (unsigned int *)0x0)\n    {\n        buffer_ptr = (unsigned int *)(buffer_index + 0x14c);\n        *(unsigned int **)(buffer_index + 0x148) = buffer_ptr;\n    }\n    int buffer_length = buffer_ptr[1];\n    if (0x1f < buffer_length)\n    {\n        if ((PTR_DAT_000836e8 == 0) || (buffer_ptr = (unsigned int *)malloc(400), buffer_ptr == (unsigned int *)0x0))\n        {\n            return;\n        }\n        *buffer_ptr = *(unsigned int *)(buffer_index + 0x148);\n        buffer_ptr[1] = 0;\n        buffer_length = 0;\n        *(unsigned int **)(buffer_index + 0x148) = buffer_ptr;\n        buffer_ptr[0x62] = 0;\n        buffer_ptr[99] = 0;\n    }\n    buffer_ptr[1] = buffer_length + 1;\n    buffer_ptr[buffer_length + 2] = data;\n    jump_table(buffer_index);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "add_to_buffer_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "write_to_buffer_000812b8",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer",
                "uVar2": "new_buffer_write_index",
                "DAT_00081308": "BUFFER_SIZE",
                "buffer_size": "buffer_size",
                "buffer_write_index": "buffer_write_index",
                "buffer_read_index": "buffer_read_index",
                "buffer_info": "buffer_info"
            },
            "code": "int write_to_buffer_000812b8(int buffer_address, int data) {\n    int buffer = *(int *)(buffer_address + 0x14);\n    int buffer_info = *(int *)(buffer_address + 0x18);\n    int buffer_size = *(int *)(buffer_info + 0x14);\n    int buffer_write_index = *(int *)(buffer + 0x80);\n    int buffer_read_index = *(int *)(buffer + 0x84);\n\n    if ((*(int *)(buffer_info + 0x14) << 0x1e < 0) && (*(int *)(buffer + 0x84) == *(int *)(buffer + 0x80))) {\n        *(int *)(buffer_info + 0x1c) = data;\n    }\n    else {\n        uint32_t new_buffer_write_index = (DAT_00081308 & (buffer_write_index + 1U));\n        if ((int)new_buffer_write_index < 0) {\n            new_buffer_write_index = (new_buffer_write_index - 1 | 0xffffff80) + 1;\n        }\n        while (*(uint *)(buffer + 0x84) == new_buffer_write_index);\n        *(char *)(buffer + buffer_write_index) = (char)data;\n        *(uint *)(buffer + 0x80) = new_buffer_write_index;\n        *(int *)(buffer_info + 8) = 2;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "return_error_code_thunk_00080efe"
            },
            "code": "int32_t return_error_code_thunk_00080efe(void)\n{\n  return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "return_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "data_size",
                "param_3": "data",
                "uVar1": "first_value",
                "uVar3": "processed_size",
                "pbVar4": "current_byte",
                "uVar5": "i",
                "local_1c": "local_byte",
                "abStack_1b": "buffer",
                "get_first_value_0008400c": "get_first_value",
                "process_data_0008434c": "process_data",
                "process_input_data_000842a4": "process_input_data"
            },
            "code": "uint process_data_000839b4(uint32_t param1, uint32_t data_size, byte **data)\n{\n  uint first_value = get_first_value();\n  uint processed_size;\n  uint8_t current_byte;\n  uint8_t local_byte;\n  uint8_t buffer[3];\n  if ((int)((uint)*(ushort *)(data + 3) << 0x12) >= 0)\n  {\n    *(ushort *)(data + 3) |= 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  if (first_value == 1 && data_size - 1 < 0xff)\n  {\n    local_byte = (uint8_t)(data_size & 0xff);\n  }\n  else\n  {\n    processed_size = process_data_000839b4_0008434c(param1, &local_byte, data_size, data + 0x17);\n    if (processed_size == 0xffffffff)\n    {\n      *(ushort *)(data + 3) |= 0x40;\n      return 0xffffffff;\n    }\n    if (processed_size == 0)\n    {\n      return data_size;\n    }\n  }\n  uint i = 0;\n  do\n  {\n    current_byte = data[2][-1];\n    data[2] = &current_byte;\n    if ((int)current_byte < 0)\n    {\n      if ((int)data[6] <= (int)current_byte)\n      {\n        **data = (byte)local_byte;\n        current_byte = **data;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      processed_size = process_input_data(param1, current_byte, data);\n      if (processed_size == -1)\n      {\n        return 0xffffffff;\n      }\n    }\n    else\n    {\n      **data = (byte)local_byte;\n      current_byte = **data;\n      *data = data[0] + 1;\n    }\n    if (data_size <= i + 1)\n    {\n      return data_size;\n    }\n    local_byte = buffer[i];\n    i++;\n  } while (true);\n}",
            "called": [
                "FUN_000842a4",
                "FUN_0008434c",
                "FUN_0008400c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_data_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "execute_and_update_00081570",
                "param_1": "params",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "current_offset"
            },
            "code": "int execute_and_update_00081570(int *params, int offset, int size) {\n    int current_offset = params[2];\n    if (size == 0) {\n        return 0;\n    }\n    if (offset != 0) {\n        int result = execute_and_update_00081570_params_000814ae(params, current_offset + offset);\n        if (result == 0) {\n            return 0;\n        }\n        copy_string_with_alignment_check_000825cc(*params + current_offset, size);\n        params[2] = current_offset + offset;\n    }\n    return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "execute_and_update_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "initialize_and_configure_TC_channel_000803fc",
                "param_1": "channel_number",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "unaff_r4": "unaff_r4",
                "in_lr": "in_lr",
                "uVar1": "combined_params",
                "check_param_00080aa8": "check_param",
                "configure_and_initialize_TC_ch_00080b2c": "configure_and_initialize_TC_channel",
                "set_value_at_offset_00080b90": "set_value_at_offset",
                "DAT_00080448": "DATA_SECTION_START",
                "function_pointer": "function_pointer"
            },
            "code": "void initialize_and_configure_TC_channel_000803fc(int channel_number, uint32_t param2, uint32_t param3, uint32_t param4)\n{\n    uint64_t combined_params = ((uint64_t)param2 << 32) | channel_number;\n    check_param_00080aa8(param3);\n    configure_and_initialize_TC_channel(channel_number, param2, 0xc002);\n    set_value_at_offset(channel_number, param2, 0xa41);\n    *(int *)(DAT_00080448 + (param4 >> 5) * 4) = 1 << (param4 & 0x1f);\n    *(uint32_t *)(channel_number + param2 * 0x40 + 0x24) = 4;\n    if (param2 > 2) {\n        combined_params = (*function_pointer)(\"s____source_tc_c_00080b80\", 0x5c, \"s_TC_Start_00080b84\", \"s_dwChannel____sizeof__pTc__TC_CHA_00080b88\", unaff_r4, in_lr);\n    }\n    *(uint32_t *)((int)combined_params + (int)((uint64_t)combined_params >> 0x20) * 0x40) = 5;\n}\n",
            "called": [
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_00080b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "initialize_and_configure_TC_channel_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_permissions_00080eb0",
                "param_1": "address",
                "param_2": "size",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(address + 4)"
            },
            "code": "void set_memory_permissions_00080eb0(void *address, int size) {\n  *(int *)(address + 4) = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "find_and_execute_value_00081214",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "target_value",
                "uVar1": "value_found",
                "initialize_params_000814f6": "initialize_parameters",
                "find_value_000811e8": "find_value",
                "execute_and_update_0008159e": "execute_and_update",
                "PTR_DAT_00081240": "PTR_DATA"
            },
            "code": "void find_and_execute_value_00081214(uint32_t param_1, uint32_t param_2, uint32_t target_value) {\n  uint32_t value_found;\n  initialize_parameters(param_1, PTR_DAT_00081240);\n  while ((value_found = find_value(param_2), value_found != -1 && value_found != target_value)) {\n    execute_and_update(param_1, value_found & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "find_and_execute_value_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_or_return_error_code_0008439c",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "buffer_size",
                "*param_1": "*buffer",
                "*param_2": "*byte"
            },
            "code": "int write_byte_or_return_error_code_0008439c(uint8_t *buffer, uint8_t byte, uint buffer_size) {\n  if (buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *buffer = byte;\n    return 1;\n  }\n  *buffer = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_code_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "processDataAndReturnResult_00082824",
                "param_1": "data",
                "param_2": "dataSize",
                "param_3": "resultArray",
                "piVar1": "dataArray",
                "iVar2": "processResult",
                "piVar3": "resultSize",
                "uVar4": "numData",
                "puVar5": "dataStart",
                "uVar6": "dataLength",
                "uVar7": "dataLengthInBytes"
            },
            "code": "int processDataAndReturnResult_00082824(void* data, int dataSize, int** resultArray)\n{\n    int* dataArray = *resultArray;\n    int* resultSize = resultArray[2];\n    uint numData = 0;\n\n    if (-1 < *(int *)(dataSize + 100) << 0x12) {\n        int result = FUNC_00083ca8();\n        resultArray[2] = NULL;\n        resultArray[1] = NULL;\n        return result;\n    }\n\n    while (resultSize != NULL) {\n        uint dataLength = dataArray[1] >> 2;\n        if (dataLength != 0) {\n            undefined4* dataStart = (undefined4*)(*dataArray - 4);\n            for (uint i = 0; i < dataLength; i++) {\n                int processResult = process_data_000839b4(data, *(dataStart + i), dataSize);\n                numData++;\n                if (processResult == -1) {\n                    resultArray[2] = NULL;\n                    resultArray[1] = NULL;\n                    return -1;\n                }\n            }\n        }\n        resultSize = (int*)((int)resultSize - (dataArray[1] & 0xfffffffc));\n        resultArray[2] = resultSize;\n        dataArray += 2;\n    }\n\n    resultArray[2] = NULL;\n    resultArray[1] = NULL;\n    return 0;\n}",
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "processDataAndReturnResult_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "setDefaultParamValue_0008427c",
                "param_1": "paramIndex",
                "param_2": "paramData",
                "iVar1": "defaultValue",
                "uVar2": "flag"
            },
            "code": "void setDefaultParamValue_0008427c(int paramIndex, int* paramData) {\n  int defaultValue = get_default_value(paramIndex, (int)*(short *)(paramData + 0xe));\n  ushort flag = *(ushort *)(paramData + 0xc) & 0xefff;\n  if (defaultValue != -1) {\n    *(int *)(paramData + 0x50) = defaultValue;\n    flag |= 0x1000;\n  }\n  *(ushort *)(paramData + 0xc) = flag;\n  return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "setDefaultParamValue_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "set_parameter_000809be",
                "param_1": "base_address",
                "param_2": "parameter",
                "param_3": "value",
                "uVar1": "mask"
            },
            "code": "void set_parameter_000809be(uint32_t base_address, uint32_t parameter, uint32_t value) {\n  *(uint32_t *)(base_address + 0x44) = value;\n  switch(parameter) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    uint32_t mask = *(uint32_t *)(base_address + 0x70) & ~value;\n    *(uint32_t *)(base_address + 0x70) = mask;\n    break;\n  case 2:\n    *(uint32_t *)(base_address + 0x70) |= value;\n    break;\n  default:\n    *(uint32_t *)(base_address + 4) = value;\n    break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "set_parameter_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_if_bit_set_00080a94",
                "param_1": "address",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "code": "uint check_if_bit_set_00080a94(int address, uint bitmask)\n{\n  uint result = *(uint *)(address + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_if_bit_set_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_data_to_0x8000_00081618",
                "DAT_00081620": "data_start_address",
                "PTR_": "unchanged",
                "DAT_": "unchanged"
            },
            "code": "void set_data_to_0x8000_00081618(void)\n{\n  int* data_pointer = (int*)(DAT_00081620 + 4);\n  int data = 0x8000;\n  *data_pointer = data;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "output_array",
                "uVar1": "result_1",
                "lVar2": "result_2"
            },
            "code": "void calculate_difference_0008455c(uint input_1, int input_2, undefined4 param_3, undefined4 param_4, int *output_array)\n{\n    uint result_1;\n    long long result_2;\n\n    // Call a function to get a long long value\n    result_2 = get_long_long_value();\n    // Multiply the long long value with the parameters and store the result in result_2\n    result_2 = result_2 * CONCAT44(param_4, param_3);\n    // Truncate the long long value to an unsigned int and store it in result_1\n    result_1 = (uint)result_2;\n    // Calculate the difference between input_1 and result_1 and store it in output_array[0]\n    output_array[0] = input_1 - result_1;\n    // Calculate the difference between input_2 and the high 32 bits of result_2 and store it in output_array[1]\n    output_array[1] = (input_2 - (int)((ulonglong)result_2 >> 0x20)) - (uint)(input_1 < result_1);\n    return;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_char_in_buffer_000840f8",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_end",
                "puVar1": "current_buffer_position",
                "uVar2": "buffer_size",
                "pcVar3": "current_char",
                "pcVar4": "last_char",
                "bVar5": "found_target_char"
            },
            "code": "uint *find_char_in_buffer_000840f8(uint *buffer, char target_char, uint *buffer_end)\n{\n  uint *current_buffer_position;\n  uint buffer_size;\n  char *current_char;\n  char *last_char;\n  bool found_target_char;\n  \n  if (((uint)buffer & 3) == 0) {\n    current_buffer_position = buffer;\n    if (buffer_end > (buffer + 3)) {\n      do {\n        buffer_size = *buffer ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        current_buffer_position = buffer;\n        if ((buffer_size + 0xfefefeff & ~buffer_size & 0x80808080) != 0) break;\n        buffer_end = buffer_end - 1;\n        current_buffer_position = buffer + 1;\n        buffer = buffer + 1;\n      } while (buffer_end > (buffer + 3));\n    }\n    buffer = buffer_end;\n    last_char = (char *)((int)buffer - 1);\n    if ((buffer != (uint *)0x0) && (*current_buffer_position != target_char)) {\n      current_char = (char *)0x0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        found_target_char = current_char == last_char;\n        current_char = current_char + 1;\n        if (found_target_char) goto LAB_00084150;\n      } while (*(char *)buffer != target_char);\n    }\n  }\n  else if (buffer_end == (uint *)0x0) {\nLAB_00084150:\n    buffer = (uint *)0x0;\n  }\n  else if (*buffer != target_char) {\n    current_buffer_position = (uint *)((int)buffer + 1);\n    buffer_end = (uint *)((int)buffer_end - 1);\n    do {\n      buffer = current_buffer_position;\n      if (((uint)buffer & 3) == 0) goto LAB_00084128;\n      if (buffer_end == (uint *)0x0) goto LAB_00084150;\n      current_buffer_position = (uint *)((int)buffer + 1);\n      buffer_end = (uint *)((int)buffer_end - 1);\n    } while (*buffer != target_char);\n  }\n  return buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = check_and_initialize_data_structures_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_and_check_errors_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_buffer_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_or_return_negative_one_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_or_return_negative_one_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = processDataAndReturnResult_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_000817c8",
                "FUN_000834f0",
                "FUN_00081750"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "memset32_aligned_00081f00",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "data8",
                "puVar2": "data8_next",
                "uVar3": "value32",
                "uVar4": "size32",
                "bVar5": "is_unaligned"
            },
            "code": "void memset32_aligned_00081f00(uint32_t* data, uint8_t value, uint32_t size) {\n  uint32_t* data32;\n  uint32_t value32 = (value << 24) | (value << 16) | (value << 8) | value;\n  bool is_unaligned = ((uint)data & 3) != 0;\n  if (is_unaligned) {\n    if (size == 0) {\n      return;\n    }\n    *data = value;\n    size--;\n    data++;\n  }\n  data32 = (uint32_t*) data;\n  while (size >= 16) {\n    *data32++ = value32;\n    *data32++ = value32;\n    *data32++ = value32;\n    *data32++ = value32;\n    size -= 16;\n  }\n  while (size >= 4) {\n    *data32++ = value32;\n    size -= 4;\n  }\n  data = (uint32_t*) data32;\n  while (size > 0) {\n    *data++ = value;\n    size--;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "imported": false,
            "current_name": "memset32_aligned_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_max_value_00080eaa"
            },
            "code": "uint32_t return_max_value_00080eaa(void)\n{\n  return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_max_value_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copyMemoryToBuffer_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "uVar4": "i",
                "uVar5": "remainingSize",
                "bVar6": "isAligned"
            },
            "code": "undefined4 *copyMemoryToBuffer_00081d48(undefined4 *destination, undefined4 *source, uint size)\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint i;\n  bool isAligned;\n  \n  destPtr = destination;\n  isAligned = (((uint)source | (uint)destination) & 3) == 0;\n  \n  if (!isAligned)\n  {\n    if (size < 8)\n    {\n      remainingSize = size - 4;\n      if (remainingSize > 3)\n      {\n        do\n        {\n          *destPtr = *source;\n          destPtr = (undefined4 *)((int)destPtr + 1);\n          source = (undefined4 *)((int)source + 1);\n          remainingSize = remainingSize - 1;\n        } while (remainingSize > 3);\n        *(undefined *)(undefined4 *)((int)destPtr + 1) =\n             *(undefined *)(undefined4 *)((int)source + 1);\n        *(undefined *)((int)destPtr + 2) = *(undefined *)((int)source + 2);\n        *(undefined *)((int)destPtr + 3) = *(undefined *)((int)source + 3);\n        return destination;\n      }\n      else\n      {\n        goto LAB_00081dcc;\n      }\n    }\n    else\n    {\n      if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)))\n      {\n        remainingSize = 4 - ((uint)destination & 3);\n        size = size - remainingSize;\n        srcPtr = source;\n        destPtr = destination;\n        if (((uint)destination & 1) != 0)\n        {\n          srcPtr = (undefined4 *)((int)source + 1);\n          destPtr = (undefined4 *)((int)destination + 1);\n          *(undefined *)destination = *(undefined *)source;\n        }\n        if ((remainingSize & 2) != 0)\n        {\n          srcPtr = (undefined4 *)((int)srcPtr + 2);\n          destPtr = (undefined4 *)((int)destPtr + 2);\n          *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n        }\n      }\n    }\n  }\n  \n  for (i = 0; i < size / 16; i++)\n  {\n    *destPtr = *source;\n    destPtr[1] = source[1];\n    destPtr[2] = source[2];\n    destPtr[3] = source[3];\n    destPtr[4] = source[4];\n    destPtr[5] = source[5];\n    destPtr[6] = source[6];\n    destPtr[7] = source[7];\n    destPtr[8] = source[8];\n    destPtr[9] = source[9];\n    destPtr[10] = source[10];\n    destPtr[11] = source[11];\n    destPtr[12] = source[12];\n    destPtr[13] = source[13];\n    destPtr[14] = source[14];\n    destPtr[15] = source[15];\n    destPtr = destPtr + 16;\n    source = source + 16;\n  }\n  \n  remainingSize = size - i * 16;\n  \n  if (remainingSize > 15)\n  {\n    do\n    {\n      *destPtr = *source;\n      destPtr[1] = source[1];\n      destPtr[2] = source[2];\n      destPtr[3] = source[3];\n      destPtr = destPtr + 4;\n      source = source + 4;\n      remainingSize = remainingSize - 16;\n    } while (remainingSize > 15);\n  }\n  \n  if (remainingSize > 3)\n  {\n    srcPtr = source;\n    destPtr = destPtr;\n    do\n    {\n      source = srcPtr + 1;\n      *destPtr = *srcPtr;\n      remainingSize = remainingSize - 4;\n      destPtr = destPtr + 1;\n      srcPtr = source;\n    } while (remainingSize > 3);\n  }\n  \n  if (remainingSize > 0)\n  {\n    if ((remainingSize & 1) != 0)\n    {\n      *(undefined *)destPtr = *(undefined *)source;\n      source = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtr + 1);\n    }\n    if ((remainingSize & 2) != 0)\n    {\n      *(undefined2 *)destPtr = *(undefined2 *)source;\n    }\n  }\n  \n  return destination;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copyMemoryToBuffer_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "set_memory_permissions_00084494",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "permission_flags",
                "puVar1": "ptr_data",
                "iVar2": "permission_result"
            },
            "code": "void set_memory_permissions_00084494(int *result, int start_address, int end_address, int permission_flags, int process_id)\n{\n    undefined *ptr_data = PTR_DAT_000844b8;\n    *(int *)PTR_DAT_000844b8 = 0;\n    int permission_result = set_memory_permissions_00084494_00080eb0(start_address, end_address, end_address, permission_flags, process_id);\n    if ((permission_result == -1) && (*(int *)ptr_data != 0)) {\n        *result = *(int *)ptr_data;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "calculate_difference_or_return_negative_one_00084530",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "difference"
            },
            "code": "int calculate_difference_or_return_negative_one_00084530(int first_param, int second_param, int third_param, int fourth_param) {\n  int difference;\n  \n  if ((fourth_param == 0) && (third_param == 0)) {\n    if (second_param != 0 || first_param != 0) {\n      first_param = -1;\n    }\n    return first_param;\n  }\n  difference = calculate_difference_0008458c();\n  return difference;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "calculate_difference_or_return_negative_one_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_differences_and_do_nothing_00080970",
                "calculate_difference_00081248": "calculate_difference",
                "PTR_DAT_000809a4": "PTR_DATA_1",
                "PTR_DAT_000809a8": "PTR_DATA_2",
                "PTR_DAT_000809ac": "PTR_DATA_3",
                "PTR_DAT_000809b0": "PTR_DATA_4",
                "do_nothing_0008073a": "do_nothing_1",
                "do_nothing_00080748": "do_nothing_2",
                "do_nothing_0008074a": "do_nothing_3",
                "do_nothing_0008074c": "do_nothing_4"
            },
            "code": "void check_differences_and_do_nothing_00080970(void)\n{\n  int difference;\n  difference = calculate_difference(PTR_DAT_000809a4);\n  if (difference != 0) {\n    do_nothing_0008073a();\n  }\n  difference = calculate_difference(PTR_DAT_000809a8);\n  if (difference != 0) {\n    do_nothing_00080748();\n  }\n  difference = calculate_difference(PTR_DAT_000809ac);\n  if (difference != 0) {\n    do_nothing_0008074a();\n  }\n  difference = calculate_difference(PTR_DAT_000809b0);\n  if (difference != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}",
            "called": [
                "FUN_0008074c",
                "FUN_0008073a",
                "FUN_0008074a",
                "FUN_00080748",
                "FUN_00081248"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_differences_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "set_memory_permissions_00084018",
                "param_1": "process_id",
                "param_2": "memory_info",
                "uVar1": "permission_bits",
                "iVar2": "set_memory_result",
                "iVar3": "function_result",
                "uVar4": "permission_value",
                "bVar5": "is_permission_valid",
                "auStack_54": "stack_array",
                "local_50": "local_value"
            },
            "code": "void set_memory_permissions_00084018(int process_id, int* memory_info){\n    ushort permission_bits = *(ushort *)(memory_info + 3);\n    uint permission_value = (uint)permission_bits;\n    if ((int)(permission_value << 0x1e) < 0) {\n        *memory_info = (int)memory_info + 0x43;\n        memory_info[4] = (int)memory_info + 0x43;\n        memory_info[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)memory_info + 0xe)) {\n        int set_memory_result = set_memory_permissions_00084018_00084494(process_id,(int)*(short *)((int)memory_info + 0xe), auStack_54);\n        if (-1 < set_memory_result) {\n            bool is_permission_valid = (local_50 & 0xf000) == 0x2000;\n            if (((local_50 & 0xf000) == 0x8000) && ((undefined *)memory_info[10] == PTR_FUN_0008427c_1_000840f4)) {\n                int permission_flag = 0x400;\n                *(ushort *)(memory_info + 3) = permission_bits | 0x400;\n                memory_info[0x13] = 0x400;\n            }\n            else {\n                int permission_flag = 0x400;\n                *(ushort *)(memory_info + 3) = permission_bits | 0x800;\n            }\n            goto LAB_00084074;\n        }\n        permission_bits = *(ushort *)(memory_info + 3);\n        permission_value = (uint)permission_bits;\n    }\n    *(ushort *)(memory_info + 3) = permission_bits | 0x800;\n    int permission_flag = ((permission_value & 0x80) == 0) ? 0x400 : 0x40;\n    bool is_permission_valid = false;\nLAB_00084074:\n    int function_result = FUNC_00081810(process_id, permission_flag);\n    permission_bits = *(ushort *)(memory_info + 3);\n    if (function_result == 0) {\n        if (-1 < (int)((uint)permission_bits << 0x16)) {\n            *(ushort *)(memory_info + 3) = permission_bits | 2;\n            *memory_info = (int)memory_info + 0x43;\n            memory_info[4] = (int)memory_info + 0x43;\n            memory_info[5] = 1;\n        }\n    }\n    else {\n        *(undefined **)(process_id + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n        *(ushort *)(memory_info + 3) = permission_bits | 0x80;\n        *memory_info = function_result;\n        memory_info[4] = function_result;\n        memory_info[5] = permission_flag;\n        if ((is_permission_valid) && (function_result = returnIfNotMinusOne_000844bc(process_id, (int)*(short *)((int)memory_info + 0xe)), function_result != 0)) {\n            *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_number_from_string_000815de",
                "param_1": "input_string",
                "pbVar4": "current_char",
                "pbVar6": "current_char",
                "uVar5": "current_byte",
                "bVar1": "current_char_info",
                "bVar2": "is_negative",
                "uVar10": "max_value",
                "uVar9": "max_div_10",
                "iVar7": "current_digit",
                "iVar8": "current_digit",
                "uVar3": "result"
            },
            "code": "uint parse_number_from_string_000815de(byte **input_string) {\n  if (*input_string == NULL) {\n    return 0;\n  }\n  byte *current_char = *input_string;\n  byte current_byte = *(current_char++);\n  byte current_char_info = *(byte *)(*DAT_000827f8 + current_byte + 1);\n  bool is_negative = false;\n  if ((current_char_info & 8) != 0) {\n    is_negative = true;\n    current_byte = *(current_char++);\n  }\n  uint max_value = is_negative ? 0x80000000 : 0x7fffffff;\n  uint max_div_10 = max_value / 10;\n  int current_digit = 0;\n  uint result = 0;\n  while (true) {\n    current_char_info = *(byte *)(*DAT_000827f8 + current_byte + 1);\n    if ((current_char_info & 4) == 0) {\n      if ((current_char_info & 3) == 0) {\n        if (current_digit == -1) {\n          *(undefined4 *)*DAT_00082810 = 0x22;\n          result = is_negative ? 0x80000000 : 0x7fffffff;\n        } else if (is_negative) {\n          result = -result;\n        }\n        return result;\n      }\n      current_digit = (current_char_info & 3) == 1 ? 0x37 : 0x57;\n      current_digit = current_byte - current_digit;\n    } else {\n      current_digit = current_byte - 0x30;\n    }\n    if (current_digit > 9) {\n      if (current_digit == -1) {\n        *(undefined4 *)*DAT_00082810 = 0x22;\n        result = is_negative ? 0x80000000 : 0x7fffffff;\n      } else {\n        result = is_negative ? -result : result;\n      }\n      return result;\n    }\n    if (current_digit != -1) {\n      if ((max_div_10 <= result && result != max_div_10) || ((result == max_div_10 && ((int)(max_value % 10) < current_digit)))) {\n        current_digit = -1;\n      } else {\n        result = result * 10 + current_digit;\n        current_digit = 1;\n      }\n    }\n    current_byte = *(current_char++);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_number_from_string_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "process_data_and_check_errors_000834f0",
                "param_1": "first_param",
                "param_2": "second_param",
                "iVar1": "result",
                "iVar2": "process_result",
                "local_488": "stack_buffer_ptrs",
                "local_480": "buffer_size_1",
                "local_47c": "buffer_size_2",
                "local_47a": "buffer_size_3",
                "local_478": "buffer_1_ptr",
                "local_474": "buffer_2_size",
                "local_470": "buffer_2_2",
                "local_46c": "buffer_2_3",
                "local_464": "buffer_3",
                "local_424": "stack_buffer",
                "auStack_420": "stack_buffer"
            },
            "code": "int process_data_and_check_errors_000834f0(undefined4 first_param, int second_param)\n{\n    int result;\n    int process_result;\n    undefined *stack_buffer_ptrs[2];\n    undefined4 buffer_size_1;\n    ushort buffer_size_2;\n    undefined2 buffer_size_3;\n    undefined *buffer_1_ptr;\n    undefined4 buffer_2_size;\n    undefined4 buffer_2_1;\n    undefined4 buffer_2_2;\n    undefined4 buffer_2_3;\n    undefined4 buffer_3;\n    undefined stack_buffer[1024];\n\n    buffer_3 = *(undefined4 *)(second_param + 100);\n    buffer_2_3 = *(undefined4 *)(second_param + 0x1c);\n    buffer_size_3 = *(undefined2 *)(second_param + 0xe);\n    buffer_2_1 = *(undefined4 *)(second_param + 0x24);\n    stack_buffer_ptrs[0] = stack_buffer;\n    buffer_size_2 = *(ushort *)(second_param + 0xc) & 0xfffd;\n    buffer_size_1 = 0x400;\n    buffer_2_size = 0x400;\n    buffer_2_2 = 0;\n    buffer_1_ptr = stack_buffer_ptrs[0];\n    result = FUNC_0008289c(first_param, stack_buffer_ptrs);\n    if ((-1 < result) && ((process_result = process_data_00083850(first_param, stack_buffer_ptrs)) != 0)) {\n        result = -1;\n    }\n    if ((int)((uint)buffer_size_2 << 0x19) < 0) {\n        *(ushort *)(second_param + 0xc) = *(ushort *)(second_param + 0xc) | 0x40;\n    }\n    return result;\n}",
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_and_check_errors_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_input_000841e4",
                "param_1": "input_size",
                "puVar1": "ptr_data",
                "uVar2": "error_code",
                "piVar3": "data_ptr",
                "iVar4": "func_ptr",
                "pcVar5": "func_code_ptr",
                "unaff_r4": "reg4",
                "unaff_r5": "reg5",
                "in_lr": "link_reg",
                "ppiVar6": "data_ptr_ptr",
                "DAT_000841f0": "data_pointer",
                "PTR_DAT_00084218": "data_ptr_address"
            },
            "code": "int process_input_000841e4(uint input_size){\n                    uint max_size = 0x1f;\n                    int *data_ptr = *DAT_000841f0;\n                    if (input_size > max_size) {\n                        *data_ptr = 0x16;\n                        return -1;\n                    }\n                    int func_ptr = data_ptr[0xb7];\n                    if ((func_ptr == 0) || (*(code **)(func_ptr + input_size * 4) == (code *)0x0)) {\n                        int **data_ptr_ptr = DAT_000841f0;\n                        undefined4 error_code = get_error_code(data_ptr);\n                        undefined *ptr_data = PTR_DAT_00084218;\n                        *(undefined4 *)ptr_data = 0;\n                        int ret_val = do_nothing(error_code, input_size, input_size, 0, data_ptr_ptr, reg4, reg5, link_reg);\n                        if ((ret_val == -1) && (*(int *)ptr_data != 0)) {\n                            *data_ptr = *(int *)ptr_data;\n                            return -1;\n                        }\n                        return ret_val;\n                    }\n                    code *func_code_ptr = *(code **)(func_ptr + input_size * 4);\n                    if (func_code_ptr == (code *)0x1) {\n                        return 0;\n                    }\n                    if (func_code_ptr != (code *)0xffffffff) {\n                        *(undefined4 *)(func_ptr + input_size * 4) = 0;\n                        (*func_code_ptr)(input_size);\n                        return 0;\n                    }\n                    *data_ptr = 0x16;\n                    return 1;\n                }",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_input_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_base_to_decimal_0008113a",
                "param_1": "input_array",
                "param_2": "input_length",
                "param_3": "base",
                "param_4": "output_type",
                "iVar1": "result",
                "iVar2": "sign_character"
            },
            "code": "int convert_base_to_decimal_0008113a(uint32_t *input_array, uint32_t input_length, uint32_t base, uint32_t output_type) {\n    int result = 0;\n    int sign = 1;\n\n    if (base == 0) {\n        result = (**(code **)*input_array)(input_array, input_length & 0xff);\n        return result;\n    }\n\n    if (base == 10) {\n        if ((int)input_length < 0) {\n            int sign_character = execute_function_pointer(input_array, 0x2d);\n            int absolute_value = convert_decimal_to_base_n(input_array, -input_length, 10);\n            return absolute_value + sign_character;\n        }\n    }\n    else {\n        base = base & 0xff;\n    }\n\n    result = convert_decimal_to_base_n(input_array, input_length, base, output_type);\n    return result;\n}",
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_base_to_decimal_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_first_value_0008400c",
                "*DAT_00084014": "*PTR_first_value"
            },
            "code": "int get_first_value_0008400c() {\n    return *DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_first_value_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "execute_command_and_update_params_000814d0",
                "param_1": "params",
                "param_2": "command",
                "param_3": "param_3",
                "iVar1": "status",
                "zero_out_memory_00081480": "zero_out_memory",
                "copy_string_with_alignment_check_000825cc": "copy_string_with_alignment_check"
            },
            "code": "undefined4* execute_command_and_update_params_000814d0(undefined4* params, undefined4 param_3, undefined4 command) {\n    int status = execute_and_update_params(params, param_3);\n    if (status == 0) {\n        zero_out_memory(params);\n    }\n    else {\n        params[2] = param_3;\n        copy_string_with_alignment_check(*params, command);\n    }\n    return params;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "execute_command_and_update_params_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "initialize_sections_and_call_main_00080c20",
                "puVar1": "rel_array",
                "puVar2": "data_ptr",
                "iVar3": "i",
                "puVar4": "data_array",
                "ptr": "ptr",
                "section_ptr": "section_ptr"
            },
            "code": "void initialize_sections_and_call_main_00080c20(void)\n{\n  uint32_t* rel_array = PTR_Elf32_Rel_ARRAY_00080c7c;\n  uint8_t* data_ptr = DAT_00080c78;\n  uint32_t* data_array = (uint32_t*)PTR_DAT_00080c80;\n  if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c) {\n    for (int i = 0; rel_array + i < (uint32_t*)PTR_DAT_00080c84; i += 4) {\n      *(uint32_t*)(rel_array + i) = *(uint32_t*)(data_ptr + i);\n    }\n  }\n  for (uint32_t* ptr = data_array; ptr < (uint32_t*)DAT_00080c88; ptr++) {\n    *ptr = 0;\n  }\n  uint8_t* section_ptr = PTR_DAT_00080c8c + -0x20000000;\n  *(uint32_t*)(DAT_00080c90 + 8) = (uint32_t)PTR_DAT_00080c8c & 0x1fffff80;\n  if (section_ptr < (uint8_t*)0x100000) {\n    *(uint32_t*)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "initialize_sections_and_call_main_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "process_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "bVar1": "flag",
                "puVar2": "counter_ptr",
                "puVar3": "flag_ptr",
                "puVar4": "data_ptr",
                "uVar5": "time",
                "iVar6": "index_offset"
            },
            "code": "void process_data_0008044c(int index, int* data, int offset)\n{\n    byte flag = *flag_ptr;\n    int* counter_ptr = counter_arr;\n    int* data_ptr = data_arr;\n    int* ptr = ptr_arr;\n    int index_offset = index * 12;\n    int data_offset = offset * 64;\n    \n    if ((ptr[index] & 0x80) == 0)\n    {\n        if ((char)ptr[index] + index_offset < (int)(uint)(byte)*flag_ptr && (int)((uint)(byte)data_ptr[((char)ptr[index] + index_offset) * 8] << 0x19) < 0)\n        {\n            process_data_0008044c(data_ptr[(index_offset + (char)ptr[index]) * 8] & 0x3f, 0);\n        }\n    }\n    else\n    {\n        *(uint *)(data + data_offset) |= 4;\n    }\n    \n    counter_ptr[index]++;\n    \n    if ((char)counter_ptr[index] + index_offset < (int)(uint)flag && (char)ptr[index] < 0x0C)\n    {\n        *(int *)(data + data_offset + 0x14) = *(int *)(data + data_offset + 0x10) + *(int *)(data_ptr + ((char)ptr[index] + index_offset) * 8 + 4);\n        if (-1 < (int)((uint)(byte)ptr_arr[((char)counter_ptr[index] + index_offset) * 8] << 0x19))\n        {\n            return;\n        }\n        process_data_0008044c(data_ptr[(index_offset + (char)ptr[index]) * 8] & 0x3f, 1);\n        return;\n    }\n    \n    data += data_offset;\n    uint time = (*time_ptr / *time_const_ptr) * 20000 >> 5;\n    if (time <= *(int *)(data + 0x10) + 4U)\n    {\n        time = *(int *)(data + 0x10) + 4;\n    }\n    *(uint *)(data + 0x14) = time;\n    counter_ptr[index] = 0xff;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "processDataAndReturn_000810d8",
                "param_1": "data",
                "param_2": "ptrData",
                "param_3": "size",
                "param_4": "param_4",
                "PTR_DAT_000810e4": "ptrData",
                "param_5": "param_5"
            },
            "code": "void processDataAndReturn_000810d8(void* data, void* PTR_DAT_000810e4, int size, int param_4, int param_5) {\n  process_data(data, PTR_DAT_000810e4, size, param_4, param_5);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "imported": false,
            "current_name": "processDataAndReturn_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "undefined4": "uint32_t",
                "0xffffffff": "ERROR_CODE"
            },
            "code": "uint32_t get_error_code_00080efe(void)\n{\n    return ERROR_CODE;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "get_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "remaining",
                "puVar6": "temp_byte_ptr",
                "uVar7": "remaining_bytes"
            },
            "code": "void reverse_copy_00081e34(void* dest, void* src, size_t size) {\n  if (dest >= src && dest < (void*)((uintptr_t)src + size)) {\n    uint8_t* dest_ptr = (uint8_t*)dest + size - 1;\n    uint8_t* src_ptr = (uint8_t*)src + size - 1;\n    for (size_t i = 0; i < size; i++) {\n      *dest_ptr-- = *src_ptr--;\n    }\n    return;\n  }\n  if (size < 16) {\n    return;\n  }\n  if ((((uintptr_t)dest | (uintptr_t)src) & 3) == 0) {\n    uint32_t* dest_ptr = (uint32_t*)dest;\n    uint32_t* src_ptr = (uint32_t*)src;\n    size_t i = (size - 16) / 16 + 1;\n    size_t remaining = size & 0xf;\n    for (; i > 0; i--) {\n      dest_ptr[0] = src_ptr[0];\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr[2] = src_ptr[2];\n      dest_ptr[3] = src_ptr[3];\n      dest_ptr += 4;\n      src_ptr += 4;\n    }\n    if (remaining == 0) {\n      return;\n    }\n    dest = (uint32_t*)dest + i;\n    src = (uint32_t*)src + i;\n    size = remaining;\n  }\n  uint8_t* dest_ptr = (uint8_t*)dest;\n  uint8_t* src_ptr = (uint8_t*)src;\n  for (size_t i = 0; i < size; i++) {\n    *dest_ptr++ = *src_ptr++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "increment_and_calculate_000805a8",
                "*param_1": "*output",
                "bVar1": "count",
                "*PTR_DAT_000805d8": "*count_ptr",
                "DAT_000805dc": "data_array_ptr",
                "PTR_DAT_000805e4": "data_table_ptr",
                "DAT_000805e0": "data_divisor"
            },
            "code": "void increment_and_calculate_000805a8(byte *output)\n{\n  byte count = *PTR_DAT_000805d8;\n  if (count < 0x3c) {\n    *PTR_DAT_000805d8 = count + 1;\n    uint *data_ptr = DAT_000805dc;\n    *output = count;\n    *(uint *)(PTR_DAT_000805e4 + (uint)count * 8 + 4) = (*data_ptr / DAT_000805e0) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "increment_and_calculate_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "*param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_000810cc(void *function_pointer) {\n  (*(void(*)())function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "get_byte_from_buffer_00081276",
                "param_1": "buffer_address",
                "iVar2": "buffer_ptr",
                "bVar1": "byte_to_return",
                "buffer_read_ptr": "buffer_read_ptr",
                "buffer_write_ptr": "buffer_write_ptr"
            },
            "code": "uint get_byte_from_buffer_00081276(int buffer_address) {\n    int buffer_ptr = *(int *)(buffer_address + 0x10);\n    int buffer_read_ptr = *(int *)(buffer_ptr + 0x80);\n    int buffer_write_ptr = *(int *)(buffer_ptr + 0x84);\n    if (buffer_read_ptr != buffer_write_ptr) {\n        byte byte_to_return = *(byte *)(buffer_ptr + buffer_write_ptr);\n        *(uint *)(buffer_ptr + 0x84) = (buffer_write_ptr + 1U) & 0x7f;\n        return (uint)byte_to_return;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "get_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "returnIfNotMinusOne_000844bc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void returnIfNotMinusOne_000844bc(int *output, undefined4 input) {\n  undefined *ptr = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  int result = return_one_00080eba(input);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "returnIfNotMinusOne_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "input_data",
                "param_2": "output_data",
                "piVar1": "data_ptr_1",
                "iVar2": "data_var_1",
                "uVar3": "data_var_2",
                "uVar4": "data_var_3",
                "iVar5": "data_var_4",
                "pcVar6": "function_ptr",
                "unaff_r4": "return_value",
                "iVar7": "data_var_5"
            },
            "code": "undefined4 process_data_00083850(int *input_data, int *output_data)\n{\n  int *data_ptr_1;\n  int data_var_1;\n  ushort data_var_2;\n  uint data_var_3;\n  int data_var_4;\n  code *function_ptr;\n  undefined4 return_value;\n  int data_var_5;\n  \n  if ((input_data != (int *)0x0) && (input_data[0xe] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(output_data + 3) == 0) {\n    return 0;\n  }\n  data_var_2 = *(ushort *)(output_data + 3);\n  if ((int)((uint)data_var_2 << 0x1c) < 0) {\n    data_var_5 = output_data[4];\n    if (data_var_5 == 0) {\n      return 0;\n    }\n    data_var_1 = *output_data;\n    if ((data_var_2 & 3) == 0) {\n      data_var_4 = output_data[5];\n    }\n    else {\n      data_var_4 = 0;\n    }\n    *output_data = data_var_5;\n    data_var_1 = data_var_1 - data_var_5;\n    output_data[2] = data_var_4;\n    do {\n      if (data_var_1 < 1) {\n        return 0;\n      }\n      data_var_4 = (*(code *)output_data[9])(input_data,output_data[7],data_var_5,data_var_1,return_value);\n      data_var_1 = data_var_1 - data_var_4;\n      data_var_5 = data_var_5 + data_var_4;\n    } while (0 < data_var_4);\n    *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_data + 3) = data_var_2 | 0x800;\n  if ((output_data[1] < 1) && (output_data[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_data[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  data_var_3 = (uint)(data_var_2 | 0x800);\n  data_var_5 = *input_data;\n  *input_data = 0;\n  if ((data_var_2 & 0x1000) == 0) {\n    data_var_1 = (*function_ptr)(input_data,output_data[7],data_var_3 & 0x1000,1);\n    if ((data_var_1 == -1) && (data_var_4 = *input_data, data_var_4 != 0)) {\n      if ((data_var_4 == 0x1d) || (data_var_4 == 0x16)) {\n        *input_data = data_var_5;\n        return 0;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    data_var_3 = (uint)*(ushort *)(output_data + 3);\n    function_ptr = (code *)output_data[10];\n  }\n  else {\n    data_var_1 = output_data[0x14];\n  }\n  if (((int)(data_var_3 << 0x1d) < 0) && (data_var_1 = data_var_1 - output_data[1], output_data[0xc] != 0)) {\n    data_var_1 = data_var_1 - output_data[0xf];\n  }\n  data_var_1 = (*function_ptr)(input_data,output_data[7],data_var_1,0);\n  if (data_var_1 == -1) {\n    data_var_4 = *input_data;\n    if (data_var_4 != 0) {\n      if ((data_var_4 != 0x1d) && (data_var_4 != 0x16)) {\n        *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) & 0xf7ff;\n      *output_data = output_data[4];\n      output_data[1] = 0;\n      goto LAB_00083774;\n    }\n    data_var_2 = *(ushort *)(output_data + 3) & 0xf7ff;\n    output_data[1] = 0;\n    *(ushort *)(output_data + 3) = data_var_2;\n    *output_data = output_data[4];\n  }\n  else {\n    data_var_2 = *(ushort *)(output_data + 3) & 0xf7ff;\n    *output_data = output_data[4];\n    *(ushort *)(output_data + 3) = data_var_2;\n    output_data[1] = 0;\n  }\n  if ((int)((uint)data_var_2 << 0x13) < 0) {\n    output_data[0x14] = data_var_1;\n  }\nLAB_00083774:\n  data_ptr_1 = (int *)output_data[0xc];\n  *input_data = data_var_5;\n  if (data_ptr_1 == (int *)0x0) {\n    return 0;\n  }\n  if (data_ptr_1 != output_data + 0x10) {\n    allocate_memory_block(input_data);\n  }\n  output_data[0xc] = 0;\n  return 0;\n}\n",
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_000834f0"
            ],
            "imported": false,
            "current_name": "process_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "initialize_and_process_data_000815ec",
                "set_data_to_0x8000_00081618": "set_data_to_address_0x8000_00081618",
                "process_device_data_00080774": "process_device_data",
                "do_nothing_000815e8": "do_nothing",
                "do_nothing_00080f08": "do_nothing_with_flag",
                "initialize_and_process_data_000801e0": "initialize_and_process_data_000801e0",
                "process_control_mode_00080250": "process_control_mode",
                "DAT_00081614": "flag",
                "check_differences_and_do_nothing_00080970": "check_differences_and_do_nothing"
            },
            "code": "void initialize_and_process_data_000815ec() {\n    set_data_to_address_0x8000_00081618();\n    process_device_data();\n    do_nothing_000815e8();\n    do_nothing_00080f08(1);\n    initialize_and_process_data_000815ec_000801e0();\n    do {\n        do {\n            process_control_mode();\n        } while (DAT_00081614 == 0);\n        check_differences_and_do_nothing_000815e8();\n    } while(true);\n}",
            "called": [
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_00080774",
                "FUN_00080f08",
                "FUN_000815e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_data_00080d3e",
                "param_1": "data_ptr",
                "param_2": "new_value_1",
                "param_3": "new_value_2",
                "param_4": "new_value_3",
                "PTR_": "ptr_to_",
                "DAT_": "data_",
                "*(": "*",
                ") =": " =",
                "param_1 + 4": "data_ptr + 4",
                "uint": "uint32_t",
                "& 0xf": " & 0xf000000u",
                "& 3": " & 0x30000000u",
                "(param_2 & 0xf) << 0x18": "new_value_2 << 0x18",
                "(param_4 & 3) << 0x1c": "new_value_3 & 0x30000000u"
            },
            "code": "void update_data_00080d3e(uint32_t* DAT_ptr, uint32_t new_value_1, uint32_t new_value_2, uint32_t new_value_3)\n{\n  uint32_t* PTR_data = DAT_ptr + 4;\n  uint32_t mask_1 = 0xf000000u;\n  uint32_t mask_2 = 0x30000000u;\n  uint32_t value_1 = new_value_1 & mask_1;\n  uint32_t value_2 = new_value_3 & mask_2;\n  uint32_t old_value = *PTR_data;\n  *PTR_data = old_value | value_1 | value_2 | (new_value_2 << 0x18);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_data_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "write_buffer_with_value_and_pointer_00081438",
                "param_1": "buffer",
                "param_2": "value",
                "initializeValuesAndPointers_00081348": "initialize_values_and_pointers",
                "*param_1": "*buffer",
                "PTR_PTR_write_to_buffer_000812b8_1_00081458": "buffer_pointer",
                "param_1[9]": "buffer[9]"
            },
            "code": "undefined4 *write_buffer_with_value_and_pointer_00081438(undefined4 *buffer, undefined4 value)\n{\n    initialize_values_and_pointers();\n    *buffer = PTR_PTR_write_to_buffer_000812b8_1_00081458;\n    buffer[9] = value;\n    return buffer;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "write_buffer_with_value_and_pointer_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_offset_00080b90",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value"
            },
            "code": "void set_value_at_offset_00080b90(int base_address, int offset, int value) {\n  *(int *)(base_address + offset * 0x40 + 0x14) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "check_and_initialize_data_structures_0008356c",
                "param_1": "out_param",
                "param_2": "in_param",
                "uVar1": "result",
                "iVar2": "temp_int",
                "uVar3": "temp_uint",
                "uVar4": "temp_ushort"
            },
            "code": "uint32_t check_and_initialize_data_structures_0008356c(uint32_t *out_param, int32_t *in_param)\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint16_t uVar4;\n\n    if ((*DAT_0008362c != 0) && (*(int *)(*DAT_0008362c + 0x38) == 0)) {\n        initialize_data_structures_00083888();\n    }\n    uVar4 = *(uint16_t *)(in_param + 3);\n    uVar3 = (uint32_t)uVar4;\n    if ((int32_t)(uVar3 << 0x1c) < 0) {\n        iVar2 = in_param[4];\n    }\n    else {\n        if (-1 < (int32_t)(uVar3 << 0x1b)) {\n            *out_param = 9;\n            *(uint16_t *)(in_param + 3) = uVar4 | 0x40;\n            return 0xffffffff;\n        }\n        if ((int32_t)(uVar3 << 0x1d) < 0) {\n            if ((int32_t *)in_param[0xc] != (int32_t *)0x0) {\n                if ((int32_t *)in_param[0xc] != in_param + 0x10) {\n                    allocate_memory_block_00083b10(out_param);\n                    uVar4 = *(uint16_t *)(in_param + 3);\n                }\n                in_param[0xc] = 0;\n            }\n            iVar2 = in_param[4];\n            uVar4 = uVar4 & 0xffdb;\n            *in_param = iVar2;\n            in_param[1] = 0;\n        }\n        else {\n            iVar2 = in_param[4];\n        }\n        *(uint16_t *)(in_param + 3) = uVar4 | 8;\n        uVar3 = (uint32_t)(uVar4 | 8);\n    }\n    if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n        set_memory_permissions_00084018(out_param, in_param);\n        uVar3 = (uint32_t)*(uint16_t *)(in_param + 3);\n        iVar2 = in_param[4];\n    }\n    uVar1 = uVar3 & 1;\n    if (uVar1 == 0) {\n        if (-1 < (int32_t)(uVar3 << 0x1e)) {\n            uVar1 = in_param[5];\n        }\n        in_param[2] = uVar1;\n    }\n    else {\n        in_param[6] = -in_param[5];\n        in_param[2] = 0;\n    }\n    if ((iVar2 == 0) && ((int32_t)((uint32_t)*(uint16_t *)(in_param + 3) << 0x18) < 0)) {\n        *(uint16_t *)(in_param + 3) = *(uint16_t *)(in_param + 3) | 0x40;\n        return 0xffffffff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_00084018",
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "check_and_initialize_data_structures_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_device_00080b98",
                "puVar1": "device_data_ptr",
                "iVar2": "device_data_int",
                "DAT_00080c04": "DEVICE_DATA_START_PTR",
                "*DAT_00080c04": "DEVICE_DATA_VALUE_1",
                "puVar1[0x80]": "DEVICE_DATA_OFFSET_1",
                "DAT_00080c08": "DEVICE_DATA_OFFSET_2",
                "*(int *)(DAT_00080c08 + 0x20)": "*(int *)(DEVICE_DATA_START_PTR + DEVICE_DATA_OFFSET_3)",
                "DAT_00080c10": "DEVICE_DATA_VALUE_2",
                "*(int *)(iVar2 + 0x68)": "*(int *)(device_data_int + DEVICE_DATA_OFFSET_4)",
                "*(undefined4 *)(iVar2 + 0x20)": "*(uint32_t *)(device_data_int + DEVICE_DATA_OFFSET_3)",
                "DAT_00080c0c": "DEVICE_DATA_VALUE_3",
                "*(uint *)(DAT_00080c08 + 0x30)": "*(uint32_t *)(DEVICE_DATA_START_PTR + DEVICE_DATA_OFFSET_5)",
                "DEVICE_DATA_MASK_1": "DEVICE_DATA_MASK_1",
                "DEVICE_DATA_MASK_2": "DEVICE_DATA_MASK_2",
                "DEVICE_DATA_MASK_3": "DEVICE_DATA_MASK_3",
                "DEVICE_DATA_MASK_4": "DEVICE_DATA_MASK_4",
                "DAT_00080c14": "DEVICE_DATA_VALUE_4",
                "DAT_00080c18": "DEVICE_DATA_END_PTR",
                "*DAT_00080c1c": "DEVICE_DATA_END_PTR"
            },
            "code": "void initialize_device_00080b98(void)\n{\n    uint32_t *device_data_ptr;\n    int device_data_int;\n\n    device_data_ptr = DAT_00080c04;\n    *device_data_ptr = *DAT_00080c04;\n    device_data_ptr[DEVICE_DATA_OFFSET_1] = *DAT_00080c04;\n    device_data_int = DAT_00080c08;\n    if (-1 < *(int *)(DAT_00080c08 + 0x20) << DEVICE_DATA_SHIFT_1) {\n        *(uint32_t *)(DAT_00080c04 + DEVICE_DATA_OFFSET_3) = DAT_00080c10;\n        while (-1 < *(int *)(device_data_int + DEVICE_DATA_OFFSET_4) << DEVICE_DATA_SHIFT_2);\n    }\n    *(uint32_t *)(device_data_int + DEVICE_DATA_OFFSET_3) = DAT_00080c0c;\n    while (-1 < *(int *)(device_data_int + DEVICE_DATA_OFFSET_4) << DEVICE_DATA_SHIFT_3);\n    *(uint *)(DAT_00080c08 + 0x30) = *(uint *)(DAT_00080c08 + 0x30) & DEVICE_DATA_MASK_1 | DEVICE_DATA_MASK_2;\n    while (-1 < *(int *)(device_data_int + DEVICE_DATA_OFFSET_4) << DEVICE_DATA_SHIFT_4);\n    *(uint32_t *)(DAT_00080c04 + DEVICE_DATA_OFFSET_6) = DAT_00080c14;\n    while (-1 < *(int *)(device_data_int + DEVICE_DATA_OFFSET_4) << DEVICE_DATA_SHIFT_5);\n    *(uint *)(DAT_00080c08 + 0x30) = DEVICE_DATA_MASK_3;\n    while (-1 < *(int *)(device_data_int + DEVICE_DATA_OFFSET_4) << DEVICE_DATA_SHIFT_4);\n    *(uint *)(DAT_00080c08 + 0x30) = DEVICE_DATA_MASK_4;\n    DAT_00080c18 = DEVICE_DATA_VALUE_5;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_device_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "processDataAndReturnPlusProcessData_000810e8",
                "param_1": "param_1",
                "iVar1": "processDataResult",
                "iVar2": "processDataAndReturnResult",
                "process_data_000810a6": "process_data",
                "processDataAndReturn_000810d8": "processDataAndReturn"
            },
            "code": "int processDataAndReturnPlusProcessData_000810e8(){\n  int processDataResult, processDataAndReturnResult;\n  processDataResult = process_data();\n  processDataAndReturnResult = processDataAndReturn(param_1);\n  return processDataAndReturnResult + processDataResult;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "processDataAndReturnPlusProcessData_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "array_index",
                "param_2": "bit_index",
                "*(int *)(param_1 + 0x14)": "*array_ptr",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_00080d58(int array_index, uint bit_index)\n{\n    int* array_ptr = (int*)(array_index + 0x14);\n    int bit_mask = 1 << (bit_index & 0xff);\n    *array_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "zero_out_memory_00081480",
                "*param_1": "*data",
                "PTR_00081800": "allocate_memory_block"
            },
            "code": "void zero_out_memory_00081480(int *data)\n{\n  if (*data != 0) {\n    PTR_00081800();\n  }\n  *data = 0;\n  data[2] = 0;\n  data[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "zero_out_memory_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "execute_function_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "FUNC_00081fac": "function_pointer",
                "*DAT_00081fa8": "function_pointer"
            },
            "code": "void execute_function_with_params_00081f9c(void* FUNC_00081fac, int param_1, int param_2)\n{\n  *DAT_00081fa8(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr2",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr3",
                "result": "result"
            },
            "code": "int calculate_difference_00081248(int input_param) {\n    int* ptr1 = *(int **)(input_param + 0x10);\n    int* ptr2 = ptr1 + 0x80;\n    int* ptr3 = ptr1 + 0x84;\n    int result = *ptr2 - *ptr3;\n    return result & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "allocate_memory_block_00081800",
                "param_1": "size",
                "*DAT_0008180c": "pointer"
            },
            "code": "void allocate_memory_block_00081800(void* *DAT_0008180c, int size)\n{\n  allocate_memory_block_00081800(*DAT_0008180c, size);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "lVar2": "result1",
                "uVar1": "result3"
            },
            "code": "void calculate_difference_0008458c(uint input1, int input2, undefined4 param3, undefined4 param4, int *output) {\n  uint result1 = FUNC_00084860();\n  uint64_t result2 = (uint64_t)result1 * ((uint64_t)param4 << 32 | param3);\n  uint result3 = (uint)result2;\n  output[0] = input1 - result3;\n  output[1] = input2 - ((int)(result2 >> 32) + ((input1 < result3) ? 1 : 0));\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "data_value",
                "param_4": "result",
                "uVar1": "data_value",
                "iVar2": "function_status",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_data"
            },
            "code": "void process_data_0008434c(undefined4 *data, int data_size, undefined4 data_value, undefined4 *result) {\n  undefined4 function_result;\n  int function_status;\n  code *function_pointer;\n  undefined stack_data[12];\n  \n  if (data_size == 0) {\n    function_pointer = *DAT_00084398;\n    data_value = get_dat_value_00084004();\n    function_status = (*function_pointer)(data, stack_data, 0, data_value, result);\n  }\n  else {\n    function_pointer = *DAT_00084398;\n    data_value = get_dat_value_00084004();\n    function_status = (*function_pointer)(data, data_size, data_value, data_value, result);\n  }\n  if (function_status == -1) {\n    *result = 0;\n    *data = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "execute_and_update_0008159e",
                "param_1": "address",
                "param_2": "data",
                "param_3": "param",
                "local_c": "masked_data",
                "uStack_8": "param_copy"
            },
            "code": "void execute_and_update_0008159e(uint32_t *address, uint32_t *data, uint32_t size, uint32_t offset, uint32_t param) {\n  uint32_t masked_data = data & 0xffff00ff;\n  uint32_t param_copy = param;\n  execute_and_update_0008159e_00081570(address, &masked_data, size, offset, param_copy);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "execute_and_update_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "*param_1": "*data",
                "param_2": "length",
                "bVar1": "result",
                "puVar2": "ptr_data_table",
                "uVar3": "DAT_00080698",
                "uVar4": "data_index",
                "uVar5": "data_value",
                "iVar6": "i",
                "uVar7": "data_value",
                "LAB_00080660": "end_processing",
                "LAB_00080652": "end_processing",
                "0x3b": "max_data_value",
                "0xc": "table_size",
                "0x220": "data_value_1",
                "0x960": "data_value_2"
            },
            "code": "byte process_data_000806a0(byte *data, uint32_t length)\n{\n  byte result;\n  uint8_t *ptr_data_table;\n  uint32_t data_value;\n  uint32_t data_index;\n  uint32_t table_index;\n  uint32_t table_value;\n  \n  if (0x3b < *data) {\n    goto end_processing;\n  }\n  \n  process_data_000806a0_00080f0c(length,1,0x220,*data,0x960);\n  ptr_data_table = PTR_DAT_00080694;\n  data_index = (uint32_t)*data;\n  table_value = ptr_data_table[data_index * 8];\n  data[2] = 0;\n  table_index = data_index / 0xc;\n  ptr_data_table[data_index * 8] = table_value & 0xc0 | (byte)length & 0x3f;\n  data[1] = 0;\n  \n  for (int i = 0; i < 0xc; i++) {\n    if ((int)((uint)(byte)ptr_data_table[(i + table_index * 0xc) * 8] << 0x19) < 0) {\n      goto end_processing;\n    }\n  }\n  \n  if (table_index == 0) {\n    data_value = 0x1e;\n  }\n  else if (table_index == 1) {\n    data_value = 0x1f;\n  }\n  else if (table_index == 2) {\n    data_value = 0x20;\n  }\n  else if (table_index == 3) {\n    table_index = 2;\n    data_value = 0x1d;\n  }\n  else if (table_index == 4) {\n    table_index = 0;\n    data_value = 0x1b;\n  }\n  \n  initialize_and_configure_TC_channel_000803fc(DAT_00080698,table_index,data_value,data_value);\n  ptr_data_table[(uint32_t)*data * 8] = ptr_data_table[(uint32_t)*data * 8] | 0x40;\n  \n  end_processing:\n  result = *data;\n  return result;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copy_data_0008151c",
                "param_1": "destination",
                "param_2": "source"
            },
            "code": "void copy_data_0008151c(int *destination, int *source)\n{\n    if (*destination != 0) {\n        if ((*source != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n            if ((uint)source[2] <= (uint)destination[1]) {\n                copy_string_with_alignment_check_000825cc();\n                destination[2] = source[2];\n                goto END;\n            }\n        }\n        allocate_memory_block_00081800();\n    }\n    *destination = *source;\n    destination[1] = source[1];\n    destination[2] = source[2];\n    *source = 0;\n    source[1] = 0;\nEND:\n    source[2] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copy_data_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "execute_assertion_and_process_input_000816f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "assertion_message",
                "param_4": "assertion_param",
                "uVar1": "counter",
                "uVar2": "param4",
                "puVar3": "function_name"
            },
            "code": "void execute_assertion_and_process_input_000816f8(undefined4 param1, undefined4 param2, undefined* assertion_message, undefined4 assertion_param) {\n  undefined4 counter = *(undefined4 *)(*DAT_00081724 + 0xc);\n  undefined4 param4 = assertion_param;\n  undefined* function_name = PTR_s___function__00081728;\n  if (assertion_message == (undefined *)0x0) {\n    goto LAB_0008171c;\n  }\n  do {\n    assertion_param = param1;\n    execute_function_with_args_00081750(counter, PTR_s_assertion___s__failed__file___s__0008172c, param4, param1, param2, function_name, assertion_message);\n    undefined8 processed_input = process_input_and_increment_counter_000836ec();\n    param2 = (undefined4)((ulonglong)processed_input >> 0x20);\n    counter = (undefined4)processed_input;\n  LAB_0008171c:\n    assertion_message = PTR_s__00081730;\n    param4 = assertion_param;\n    function_name = PTR_s__00081730;\n  } while (true);\n}",
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "imported": false,
            "current_name": "execute_assertion_and_process_input_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data_ptr",
                "iVar3": "data_struct_ptr",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "process_data_00083850": "process_data_helper",
                "iVar2": "result",
                "allocate_memory_block_00083b10": "allocate_memory_block",
                "do_nothing_0008397c": "do_nothing",
                "do_nothing_00083980": "do_nothing"
            },
            "code": "int process_data_00084484(int data_ptr)\n{\n  int data_struct_ptr = *PTR_DAT_00084490;\n  if (data_ptr != 0) {\n    if ((data_struct_ptr != 0) && (*(int *)(data_struct_ptr + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(data_ptr + 0xc) != 0) {\n      int result = process_data_00084484_00083850(data_struct_ptr, data_ptr);\n      if ((*(code **)(data_ptr + 0x2c) != (code *)0x0) && (result = (**(code **)(data_ptr + 0x2c))(data_struct_ptr, *(undefined4 *)(data_ptr + 0x1c)), result < 0)) {\n        return -1;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x18) < 0) {\n        allocate_memory_block(data_struct_ptr, *(undefined4 *)(data_ptr + 0x10));\n      }\n      if (*(int *)(data_ptr + 0x30) != 0) {\n        if (*(int *)(data_ptr + 0x30) != data_ptr + 0x40) {\n          allocate_memory_block(data_struct_ptr);\n        }\n        *(undefined4 *)(data_ptr + 0x30) = 0;\n      }\n      if (*(int *)(data_ptr + 0x44) != 0) {\n        allocate_memory_block(data_struct_ptr);\n        *(undefined4 *)(data_ptr + 0x44) = 0;\n      }\n      do_nothing_0008397c();\n      *(undefined2 *)(data_ptr + 0xc) = 0;\n      do_nothing_00083980();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083980",
                "FUN_00083850",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "write_to_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "data",
                "uVar1": "next_index"
            },
            "code": "void write_to_buffer_000811ca(int buffer_address, char data) {\n  uint next_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (next_index != *(uint *)(buffer_address + 0x84)) {\n    *(char *)(buffer_address + *(int *)(buffer_address + 0x80)) = data;\n    *(uint *)(buffer_address + 0x80) = next_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "calculate_new_values_00080164",
                "param_1": "ptr1",
                "param_2": "val1",
                "param_3": "ptr2",
                "param_4": "val2",
                "calculate_new_value_000806f8": "calculate_new_value",
                "PTR_DAT_0008017c": "ptr1",
                "PTR_DAT_00080180": "ptr2"
            },
            "code": "void calculate_new_values_00080164(void *PTR_DAT_0008017c, int val1, void *PTR_DAT_00080180, int val2)\n{\n  calculate_new_value(PTR_DAT_0008017c, 0x5a);\n  calculate_new_value(PTR_DAT_00080180, 0x5a, val1, val2);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "calculate_new_values_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "decode_and_copy_data_00084244",
                "param_1": "result",
                "param_2": "data_ptr",
                "param_3": "data_start",
                "param_4": "data_end",
                "sVar1": "data_length",
                "uVar4": "flag",
                "puVar2": "default_val_ptr",
                "iVar3": "copy_result"
            },
            "code": "void decode_and_copy_data_00084244(int *result, int data_ptr, undefined4 data_start, undefined4 data_end) {\n  short data_length = *(short *)(data_ptr + 0xe);\n  ushort flag = *(ushort *)(data_ptr + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    get_default_value(result, data_length, 0, 2);\n    flag = *(ushort *)(data_ptr + 0xc);\n  }\n  *(ushort *)(data_ptr + 0xc) = flag & 0xefff;\n  undefined *default_val_ptr = PTR_DAT_000843dc;\n  *(undefined4 *)default_val_ptr = 0;\n  int copy_result = copy_data_to_result(data_length, data_start, data_end, data_end, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((copy_result == -1) && (*(int *)default_val_ptr != 0)) {\n    *result = *(int *)default_val_ptr;\n    return;\n  }\n  return;\n}\n",
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "decode_and_copy_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "execute_and_update_params_00081496",
                "param_1": "ptr_param_array",
                "param_2": "param_count",
                "iVar1": "result"
            },
            "code": "int execute_and_update_params_00081496(int *ptr_param_array, int param_count, undefined4 param_3, undefined4 param_4)\n{\n  int result = execute_function_with_params(*ptr_param_array, param_count + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *ptr_param_array = result;\n    ptr_param_array[1] = param_count;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "execute_and_update_params_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_dat_value_00084004",
                "DAT_00084008": "data_value"
            },
            "code": "int get_dat_value_00084004(void)\n{\n    return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "process_data_00081014",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "var1",
                "uVar4": "var2",
                "iVar5": "var3",
                "check_if_bit_set_00080a94": "check_if_bit_set",
                "update_array_with_value_00080a0a": "update_array_with_value"
            },
            "code": "void process_data_00081014(int index, int value1, int value2) {\n  int* ptr1 = PTR_DAT_0008107c;\n  int* ptr2 = PTR_DAT_00081080;\n  int var1 = ptr1[index * 0x1c + 0xc];\n  if (var1 != 0) {\n    if ((ptr2[index] & 0xf) == 5) {\n      process_data_00081014_00080f0c(index, 1, value2, 5, index, value1, value2);\n    }\n    ptr2[index] = ptr2[index] & 0xf | (byte)(value1 << 4);\n    int var2 = *(int *)(ptr1 + index * 0x1c);\n    int var3 = *(int *)(ptr1 + index * 0x1c + 4);\n    int var4 = check_if_bit_set(var2, var3);\n    if (var4 == 0) {\n      if (value1 != 0) {\n        *(int *)(var2 + 100) = var3;\n        return;\n      }\n      *(int *)(var2 + 0x60) = var3;\n      return;\n    }\n    update_array_with_value(var2, var3, value1, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080f0c",
                "FUN_00080a0a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_0008044c",
                "FUN_00080250",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_data_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "add_data_to_buffer_000816ec",
                "param_1": "data",
                "param_2": "bitmask",
                "param_3": "buffer_index",
                "puVar1": "buffer_start",
                "iVar3": "BUFFER_START_PTR",
                "uVar2": "buffer_size",
                "DAT_000836d4": "BUFFER_OVERFLOW_FLAG",
                "UNRECOVERED_JUMPTABLE_00": "allocate_memory"
            },
            "code": "void add_data_to_buffer_000816ec(int data, int bitmask, int buffer_index) {\n  int* buffer_start = *(int **)BUFFER_START_PTR;\n  if (buffer_start == NULL) {\n    buffer_start = (int *)(*(int *)BUFFER_START_PTR + BUFFER_OFFSET);\n    *(int **)BUFFER_START_PTR = buffer_start;\n  }\n  uint buffer_size = buffer_start[1];\n  if (buffer_size > 31) {\n    if ((DAT_000836d4 == 0) || ((buffer_start = (int *)allocate_memory(400)) == NULL)) {\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    *buffer_start = *(int **)BUFFER_START_PTR;\n    buffer_start[1] = 0;\n    buffer_size = 0;\n    *(int **)BUFFER_START_PTR = buffer_start;\n    buffer_start[98] = 0;\n    buffer_start[99] = 0;\n  }\n  uint bitmask_shifted = 1 << (bitmask & 0xff);\n  buffer_start[buffer_size + 0x22] = data;\n  buffer_start[98] |= bitmask_shifted;\n  buffer_start[buffer_size + 0x42] = buffer_index;\n  buffer_start[99] |= bitmask_shifted;\n  buffer_start[1] = buffer_size + 1;\n  buffer_start[buffer_size + 2] = bitmask;\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "add_data_to_buffer_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = check_and_initialize_data_structures_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                copyMemoryToBuffer_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = process_data_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_char_in_buffer_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = process_data_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = process_data_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_0008356c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = getPreviousValue_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = getPreviousValue_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_00081fac",
                "FUN_000817f0"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "execute_and_update_params_000814ae",
                "param_1": "params",
                "param_2": "param_2",
                "iVar1": "status"
            },
            "code": "int execute_and_update_params_000814ae(int *params)\n{\n    int status;\n    if ((params[0] == 0) || ((uint)params[1] < params[2])) {\n        status = execute_and_update_params_000814ae(params);\n        if (status == 0) {\n            return 0;\n        }\n        if (params[3] == 0) {\n            *(undefined *)*params = 0;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "execute_and_update_params_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_function_pointers_00081778",
                "PTR_DAT_000817b8": "NUM_FUNCTION_POINTERS",
                "PTR_DAT_000817bc": "FUNCTION_POINTERS_START",
                "PTR_DAT_000817c4": "END_OF_DATA_SECTION",
                "PTR_LAB_000817c0": "START_OF_DATA_SECTION",
                "ppcVar4": "current_pointer",
                "iVar3": "i",
                "puVar1": "start",
                "puVar2": "end",
                "iVar5": "num_pointers",
                "num_data_items": "num_data_items",
                "current_data_item": "current_data_item"
            },
            "code": "void execute_function_pointers_00081778(void)\n{\n  int num_pointers = (int)PTR_DAT_000817b8 - (int)PTR_DAT_000817bc >> 2;\n  if (num_pointers != 0) {\n    code **current_pointer = (code **)(PTR_DAT_000817bc + -4);\n    int i = 0;\n    do {\n      i++;\n      current_pointer++;\n      (**current_pointer)();\n    } while (num_pointers != i);\n  }\n  undefined *end = PTR_DAT_000817c4;\n  undefined *start = PTR_LAB_000817c0;\n  do_nothing_00085844();\n  int num_data_items = (int)start - (int)end >> 2;\n  if (num_data_items != 0) {\n    code **current_data_item = (code **)(end + -4);\n    int i = 0;\n    do {\n      i++;\n      current_data_item++;\n      (**current_data_item)();\n    } while (num_data_items != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_000836d8",
                "FUN_00085844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_function_pointers_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "param",
                "*PTR_DAT_0008010c": "*pointer_to_initialized",
                "DAT_00080110": "global_initialized_value",
                "DAT_00080114": "global_initialization_value"
            },
            "code": "int check_if_initialized_000800f4(int param) {\n  if (*PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      param = DAT_00080114;\n    }\n    *PTR_DAT_0008010c = 1;\n  }\n  return param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "process_and_return_data_000810c4",
                "process_data_000810a6": "process_data"
            },
            "code": "void process_and_return_data_000810c4(void)\n{\n  process_data();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_and_return_data_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "set_bit_in_uint_at_offset_00080d30",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "bit_value",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "void set_bit_in_uint_at_offset_00080d30(uint* data, uint offset, uint bit_value) {\n  uint* PTR_offset = data + offset/sizeof(uint);\n  uint current_value_at_offset = *PTR_offset;\n  uint new_value_at_offset = current_value_at_offset | bit_value | ((bit_value & 1) << 7);\n  *PTR_offset = new_value_at_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_at_offset_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_index_of_value_00080c98",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "array_length",
                "local_58": "local_array",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "int find_index_of_value_00080c98(uint *output_array, uint input_value, int divisor, int array_length) {\n  uint local_array[16];\n  for (int i = 0; i < 16; i++) {\n    local_array[i] = *(uint *)(PTR_DAT_00080d28 + i*4);\n  }\n  output_array[0] = 1;\n  output_array[1] = 0;\n  output_array[72] = 514;\n  output_array[65] = 0;\n  output_array[69] = 0;\n  uint quotient = input_value / (uint)(divisor * 2);\n  if (input_value == divisor * 2 * quotient) {\n    quotient--;\n  }\n  for (int i = 0; i < 16; i++) {\n    if ((uint)(array_length * quotient / (uint)DAT_00080d2c) <= local_array[i]) {\n      output_array[1] = (i & 0xf) << 16 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_index_of_value_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_status_message"
            },
            "code": "void exit_with_status_00080eec(int status_code, int arg2, int arg3, int arg4) {\n  process_data_and_call_function_000817c8(PTR_s_Exiting_with_status__d__00080ef8, status_code, arg3, arg4, arg4);\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "find_value_000811e8",
                "param_1": "search_array",
                "iVar1": "current_value"
            },
            "code": "int find_value_000811e8(int *search_array)\n{\n  int current_value = get_current_value();\n  search_array[3] = current_value;\n  do {\n    current_value = (**(code **)(*search_array + 0xc))(search_array);\n    if (-1 < current_value) {\n      return current_value;\n    }\n    current_value = get_current_value();\n  } while ((uint)(current_value - search_array[3]) < (uint)search_array[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "find_value_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_new_value_000806f8",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "newSize",
                "calculate_new_value_0008145c": "calculate_new_value_helper",
                "*param_1": "*data",
                "PTR_DAT_000806f4": "ptrData",
                "*DAT_000806ec": "*dat1",
                "DAT_000806f0": "dat2"
            },
            "code": "void calculate_new_value_000806f8(uint8_t *data, uint size) {\n  uint newSize;\n  if (size < 546) {\n    newSize = size;\n    if (179 < size) {\n      newSize = 180;\n    }\n    newSize = calculate_new_value_000806f8_helper(newSize & ~(newSize >> 31), 0, 180, (136 - (char)data[1]) * 4, (600 - (char)data[2]) * 4, size);\n  }\n  if (*data < 60) {\n    uint tempSize = (136 - (char)data[1]) * 4;\n    if (((int)(size + (136 - (char)data[1]) * -4) < 0 == SBORROW4(size, tempSize)) && (tempSize = (600 - (char)data[2]) * 4, (int)size <= (int)tempSize)) {\n      tempSize = size;\n    }\n    *(uint *)(PTR_DAT_000806f4 + (uint)*data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (tempSize - 2) >> 5;\n  }\n  return;\n}\n",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "calculate_new_value_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "param_1": "value",
                "param_2": "base",
                "param_3": "buffer_size",
                "pcVar1": "buffer_ptr",
                "pcVar3": "current_buffer_ptr",
                "uVar2": "quotient",
                "uVar5": "remainder",
                "cVar4": "digit",
                "local_15": "buffer"
            },
            "code": "void convert_decimal_to_base_n_000810fc(uint32_t value, uint32_t base, uint8_t* buffer) {\n  char* buffer_ptr = buffer;\n  char digit;\n  uint32_t quotient = value;\n  uint32_t remainder;\n  if (base < 2) {\n    base = 10;\n  }\n  do {\n    remainder = quotient % base;\n    quotient = quotient / base;\n    if (remainder < 10) {\n      digit = remainder + '0';\n    }\n    else {\n      digit = remainder + '7';\n    }\n    *buffer_ptr++ = digit;\n  } while (quotient != 0);\n  *buffer_ptr = '\\0';\n}\n",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_n_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "process_control_mode_00080250",
                "puVar1": "ptr_undefined_1",
                "uVar2": "time_taken",
                "uVar3": "new_value",
                "iVar4": "difference",
                "puVar5": "ptr_undefined_2",
                "auStack_1c": "stack_array",
                "PTR_DAT_000803bc": "time_ptr",
                "PTR_DAT_000803cc": "mode_ptr",
                "PTR_DAT_000803c0": "mode_change_flag_ptr",
                "PTR_DAT_000803c8": "error_msg_ptr",
                "PTR_DAT_000803d4": "time_1_ptr",
                "PTR_DAT_000803d8": "time_2_ptr",
                "PTR_DAT_000803dc": "return_data_ptr",
                "PTR_DAT_000803e0": "motor_value_ptr",
                "PTR_DAT_000803e4": "steer_value_ptr",
                "PTR_DAT_000803e8": "auto_mode_msg_ptr",
                "PTR_DAT_000803ec": "steer_input_ptr",
                "PTR_DAT_000803f0": "motor_input_ptr",
                "PTR_s_steer_000803f4": "msg_steer_ptr",
                "PTR_s_motor_000803f8": "msg_motor_ptr",
                "PTR_s_error_000803c4": "error_ptr",
                "PTR_s_Entered_manual_control_mode__000803d0": "manual_mode_msg_ptr"
            },
            "code": "void process_control_mode_00080250(void)\n{\n  int time_taken;\n  int *mode = PTR_DAT_000803cc;\n  int *motor_value = PTR_DAT_000803e0;\n  int *steer_value = PTR_DAT_000803e4;\n  int *mode_change_flag = PTR_DAT_000803c0;\n  int *error_msg = PTR_DAT_000803c8;\n  int *input_buffer = PTR_DAT_000803c8;\n  int *steer_input = PTR_DAT_000803ec;\n  int *motor_input = PTR_DAT_000803f0;\n  int *msg_steer = PTR_s_steer_000803f4;\n  int *msg_motor = PTR_s_motor_000803f8;\n  int *error = PTR_s_error_000803c4;\n  int *manual_mode_msg = PTR_s_Entered_manual_control_mode__000803d0;\n  int *auto_mode_msg = PTR_s_Entered_autonomous_control_mode__000803e8;\n  int *time_1 = PTR_DAT_000803d4;\n  int *time_2 = PTR_DAT_000803d8;\n  int time_3;\n  time_taken = calculate_time_taken(4, 1, 20000);\n  *PTR_DAT_000803bc = time_taken;\n  do_nothing(10);\n  *mode_change_flag ^= 1;\n  process_data(0xd);\n  if (*PTR_DAT_000803bc < 0x641)\n  {\n    if (*PTR_DAT_000803bc - 0x385U < 299)\n    {\n      if (*mode != 0)\n      {\n        calculate_new_values();\n        processDataAndReturnPlusProcessData(PTR_DAT_000803c8, manual_mode_msg);\n        *mode = 0;\n      }\n      do_nothing(10);\n      time_1 = calculate_time_taken(3, 1, 20000);\n      time_3 = calculate_new_value(time_1, 1000, 2000, 0x28, 0x96);\n      *time_1 = time_3;\n      time_2 = calculate_new_value(time_1, 1000, 2000, 0x28, 0x96);\n      while (calculate_difference(PTR_DAT_000803c8) > 0)\n      {\n        get_byte_from_buffer(PTR_DAT_000803c8);\n        thunk_convert_base_to_decimal(PTR_DAT_000803c8, *time_3, 10);\n        process_and_return_data(PTR_DAT_000803c8, PTR_DAT_000803dc);\n        convert_base_and_process_data(PTR_DAT_000803c8, *time_2, 10);\n      }\n      calculate_new_value(PTR_DAT_000803e0, *time_2);\n      calculate_new_value(PTR_DAT_000803e4, *time_3);\n    }\n    else\n    {\n      if (*mode == 0)\n      {\n        calculate_new_values();\n        processDataAndReturnPlusProcessData(PTR_DAT_000803c8, auto_mode_msg);\n      }\n      *mode = 1;\n      while (calculate_difference(PTR_DAT_000803c8) > 0)\n      {\n        find_and_execute_value(auStack_1c, PTR_DAT_000803c8, 0x2c);\n        compare_and_copy(PTR_DAT_000803ec, auStack_1c);\n        allocate_memory_and_return_pointer(auStack_1c);\n        find_and_execute_value(auStack_1c, PTR_DAT_000803c8, 10);\n        compare_and_copy(PTR_DAT_000803f0, auStack_1c);\n        allocate_memory_and_return_pointer(auStack_1c);\n        get_byte_from_buffer(PTR_DAT_000803c8);\n        if (check_input(PTR_DAT_000803ec, msg_steer) != 0)\n        {\n          *steer_value = parse_number_from_string(PTR_DAT_000803f0);\n        }\n        else if (check_input(PTR_DAT_000803ec, msg_motor) != 0)\n        {\n          *motor_value = parse_number_from_string(PTR_DAT_000803f0);\n        }\n      }\n    }\n  }\n  else\n  {\n    calculate_new_values();\n    processDataAndReturnPlusProcessData(PTR_DAT_000803c8, error);\n  }\n}\n",
            "called": [
                "FUN_0008117a",
                "FUN_00081014",
                "FUN_000815b8",
                "FUN_000810c4",
                "FUN_0008145c",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_00081214",
                "FUN_00081624",
                "FUN_00081248",
                "FUN_00081560",
                "thunk_FUN_0008113a",
                "FUN_00081276",
                "FUN_000815de",
                "FUN_00080f08",
                "FUN_000806f8",
                "FUN_00081472"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "process_control_mode_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_value_at_offset_00080d6a",
                "param_1": "base_address",
                "undefined4": "offset",
                "param_2": "value"
            },
            "code": "void set_value_at_offset_00080d6a(int base_address, int offset, int value) {\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_device_000813dc",
                "param_1": "device_address",
                "param_2": "device_speed",
                "puVar1": "device_data",
                "iVar2": "device_data_address",
                "puVar3": "device_config",
                "check_param_00080aa8": "check_device_address"
            },
            "code": "void initialize_device_000813dc(int device_address, uint32_t device_speed)\n{\n  uint32_t *device_config;\n  int device_config_address;\n  uint32_t *device_data;\n  int device_data_address;\n  uint32_t *device_status;\n  int device_status_address;\n\n  check_param_00080aa8(device_address);\n  device_config_address = device_address + 0x18;\n  device_config = *(uint32_t **)device_config_address;\n  device_config[0x48] = 0x202;\n  *device_config = 0xac;\n  device_data = DAT_000813d4;\n  device_config[1] = 0x800;\n  device_config[8] = *device_data / device_speed >> 4;\n  device_config[3] = 0xffffffff;\n  device_config[2] = 0x61;\n  device_status_address = DAT_000813d8 + ((uint32_t)(int32_t)(char)*(uint8_t *)(device_address + 0x1c) >> 5) * 4;\n  *(int32_t *)device_status_address = 1 << (uint32_t)(*(uint8_t *)(device_address + 0x1c) & 0x1f);\n  device_data_address = *(int32_t *)(device_address + 0x10);\n  *(uint32_t *)(device_data_address + 0x84) = 0;\n  *(uint32_t *)(device_data_address + 0x80) = 0;\n  device_status_address = *(int32_t *)(device_address + 0x14);\n  *(uint32_t *)(device_status_address + 0x84) = 0;\n  *(uint32_t *)(device_status_address + 0x80) = 0;\n  *device_config = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "initialize_device_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_array_with_value_00080a0a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "has_value_at_index_1",
                "param_4": "has_value_at_index_2",
                "param_5": "has_value_at_index_3",
                "PTR_": "array",
                "DAT_": "value"
            },
            "code": "void update_array_with_value_00080a0a(int* PTR_, int DAT_, int has_DAT__at_index_1, int has_DAT__at_index_2, int has_DAT__at_index_3) {\n    PTR_[17] = DAT_;\n    if (has_DAT__at_index_3 == 0) {\n        PTR_[24] = DAT_;\n    }\n    else {\n        PTR_[25] = DAT_;\n    }\n    if (has_DAT__at_index_2 == 0) {\n        PTR_[21] = DAT_;\n    }\n    else {\n        PTR_[20] = DAT_;\n    }\n    if (has_DAT__at_index_1 == 0) {\n        PTR_[13] = DAT_;\n    }\n    else {\n        PTR_[12] = DAT_;\n    }\n    PTR_[4] = DAT_;\n    *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "update_array_with_value_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_and_initialize_TC_ch_00080b2c",
                "param_1": "channel_num",
                "param_2": "source_num",
                "param_3": "config_ptr",
                "uVar3": "channel_source",
                "PTR_s_TC_Configure_00080b58": "tc_configure_ptr",
                "DAT_00080b60": "tc_init_func_ptr",
                "PTR_s____source_tc_c_00080b54": "source_tc_c_ptr",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c": "sizeof(TC_CHANNEL)",
                "iVar1": "channel_offset",
                "iVar2": "channel_addr"
            },
            "code": "void configure_and_initialize_TC_ch_00080b2c(uint32_t channel_num, uint32_t source_num, void *config_ptr) {\n  uint64_t channel_source = ((uint64_t)source_num << 32) | channel_num;\n  if (channel_num > 2) {\n    config_ptr = PTR_s_TC_Configure_00080b58;\n    channel_source = (*DAT_00080b60)(PTR_s____source_tc_c_00080b54, 0x40, PTR_s_TC_Configure_00080b58, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c);\n  }\n  uint32_t channel_offset = (uint32_t)(channel_source >> 32) * 0x40;\n  uint32_t channel_addr = (uint32_t)channel_source + channel_offset;\n  *(uint32_t *)(channel_addr) = 2;\n  *(uint32_t *)(channel_addr + 0x28) = 0xffffffff;\n  *(void **)(channel_addr + 4) = config_ptr;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_and_initialize_TC_ch_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "process_device_data_00080774",
                "puVar1": "device_data_ptr",
                "puVar2": "data_ptr",
                "iVar3": "device_data_1",
                "iVar4": "device_data_2",
                "iVar5": "device_data_3",
                "iVar6": "device_data_4",
                "iVar7": "i",
                "iVar8": "loop_counter",
                "initialize_device_00080b98": "initialize_device",
                "execute_function_pointers_00081778": "execute_function_pointers",
                "process_data_00081014": "process_data",
                "DAT_00080878": "device_data_1_ptr",
                "DAT_0008087c": "device_data_2_ptr",
                "DAT_00080884": "device_data_1",
                "DAT_00080888": "device_data_2",
                "DAT_0008088c": "device_data_3",
                "DAT_00080890": "device_data_4",
                "DAT_00080894": "device_data_6",
                "DAT_00080898": "device_data_5",
                "check_param_00080aa8": "check_param",
                "find_index_of_value_00080c98": "find_index_of_value",
                "update_data_00080d3e": "update_data",
                "set_bit_in_uint_at_offset_00080d30": "set_bit_in_uint_at_offset",
                "set_value_at_offset_00080d6a": "set_value_at_offset",
                "set_default_value_00080d62": "set_default_value"
            },
            "code": "void process_device_data_00080774()\n{\n  uint *device_data_ptr;\n  undefined4 *data_ptr;\n  int i;\n  int DAT_00080884;\n  int DAT_00080888;\n  int DAT_0008088c;\n  int DAT_00080890;\n\n  device_data_ptr = DAT_00080878;\n  initialize_device();\n  data_ptr = DAT_0008087c;\n  DAT_0008087c[1] = *device_data_ptr / 1000 - 1;\n  *(undefined *)(DAT_0008088c_ptr + 0x23) = 0xf0;\n  data_ptr[2] = 0;\n  *data_ptr = 7;\n  execute_function_pointers();\n  i = 0;\n  do {\n    process_data(i, 0);\n    DAT_00080890 = DAT_00080890_ptr;\n    DAT_0008088c = DAT_0008088c_ptr;\n    DAT_00080888 = DAT_0008087c;\n    DAT_00080884 = DAT_00080878;\n    i++;\n  } while (i != 0x4f);\n  *(undefined4 *)(DAT_00080884 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(DAT_00080888 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(DAT_0008088c + 0xa0) = 0xffffffff;\n  *(undefined4 *)(DAT_00080890 + 0xa0) = 0xffffffff;\n  process_data(DAT_00080884, 1, 0x300, 0);\n  process_data(0, 1);\n  process_data(DAT_00080884, 1, 0xc00, 0);\n  process_data(DAT_00080884, 1, 0x3000, 0);\n  process_data(DAT_00080888, 2, 0x30, 0);\n  process_data(DAT_0008088c, 1, 0xc00, 0);\n  process_data(DAT_00080884, 1, 3, 0);\n  process_data(DAT_0008088c, 1, 0xc000, 0);\n  check_param_00080aa8(0x25);\n  find_index_of_value(DAT_00080898, *device_data_ptr, DAT_00080894, 0xc);\n  update_data(DAT_00080898, 0, 0x300000, 1);\n  set_bit_in_uint_at_offset(DAT_00080898, 0, 0);\n  set_value_at_offset(DAT_00080898, 0xffffffff);\n  set_default_value_00080d62(DAT_00080898);\n}\n",
            "called": [
                "FUN_00080a30",
                "FUN_00081014",
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00080d62",
                "FUN_00080aa8",
                "FUN_00080b98",
                "FUN_00080d6a",
                "FUN_00080d30",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "process_device_data_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int return_zero_00080ec2(void) {\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure_address",
                "puVar1": "pointer1",
                "uVar2": "variable1",
                "puVar3": "pointer2",
                "puVar4": "pointer3",
                "puVar5": "pointer4",
                "puVar6": "pointer5"
            },
            "code": "void initialize_data_structures_00083888(int data_structure_address)\n{\n  if (*(int *)(data_structure_address + 0x38) != 0) {\n    return;\n  }\n  undefined4 *ptr1 = *(undefined4 **)(data_structure_address + 4);\n  *(undefined **)(data_structure_address + 0x3c) = message;\n  *(undefined4 *)(data_structure_address + 0x2e4) = 3;\n  *(int *)(data_structure_address + 0x2e8) = data_structure_address + 0x2ec;\n  *(undefined4 *)(data_structure_address + 0x2e0) = 0;\n  *(undefined2 *)(ptr1 + 3) = 4;\n  *ptr1 = 0;\n  ptr1[1] = 0;\n  ptr1[2] = 0;\n  ptr1[0x19] = 0;\n  *(undefined2 *)((int)ptr1 + 0xe) = 0;\n  ptr1[4] = 0;\n  ptr1[5] = 0;\n  ptr1[6] = 0;\n  memset32_aligned(ptr1 + 0x17,0,8);\n  undefined *ptr2 = message;\n  undefined *ptr3 = function1;\n  undefined4 var1 = 0;\n  undefined *ptr4 = function2;\n  undefined *ptr5 = message2;\n  undefined4 *ptr6 = *(undefined4 **)(data_structure_address + 8);\n  ptr1[7] = ptr1;\n  ptr1[8] = ptr2;\n  ptr1[9] = var1;\n  ptr1[10] = ptr3;\n  ptr1[0xb] = ptr4;\n  *(undefined2 *)((int)ptr6 + 0xe) = 1;\n  *(undefined2 *)(ptr6 + 3) = 9;\n  *ptr6 = 0;\n  ptr6[1] = 0;\n  ptr6[2] = 0;\n  ptr6[0x19] = 0;\n  ptr6[4] = 0;\n  ptr6[5] = 0;\n  ptr6[6] = 0;\n  memset32_aligned(ptr6 + 0x17,0,8);\n  undefined4 *ptr7 = *(undefined4 **)(data_structure_address + 0xc);\n  ptr6[7] = ptr6;\n  ptr6[8] = ptr2;\n  ptr6[9] = var1;\n  ptr6[10] = ptr3;\n  ptr6[0xb] = ptr4;\n  *(undefined2 *)(ptr7 + 3) = 0x12;\n  *(undefined2 *)((int)ptr7 + 0xe) = 2;\n  *ptr7 = 0;\n  ptr7[1] = 0;\n  ptr7[2] = 0;\n  ptr7[0x19] = 0;\n  ptr7[4] = 0;\n  ptr7[5] = 0;\n  ptr7[6] = 0;\n  memset32_aligned(ptr7 + 0x17,0,8);\n  ptr7[7] = ptr7;\n  ptr7[8] = ptr2;\n  ptr7[9] = var1;\n  ptr7[10] = ptr3;\n  ptr7[0xb] = ptr4;\n  *(int *)(data_structure_address + 0x38) = 1;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_0008289c",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initializeValuesAndPointers_00081348",
                "param_1": "valuesArray",
                "param_2": "value1",
                "param_3": "character",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "puVar1": "PTR_PTR_FUN_000812b8_1_00081368"
            },
            "code": "void initializeValuesAndPointers_00081348(int* valuesArray, int value1, char character, int value2, int value3, int value4)\n{\n  valuesArray[0] = (int)&PTR_PTR_FUN_000812b8_1_00081368;\n  valuesArray[1] = 0;\n  valuesArray[2] = 1000;\n  *(char*)(valuesArray + 7) = character;\n  valuesArray[4] = value2;\n  valuesArray[5] = value3;\n  valuesArray[6] = value1;\n  valuesArray[8] = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "imported": false,
            "current_name": "initializeValuesAndPointers_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_time_taken_00081624",
                "param_1": "index",
                "param_2": "is_zero",
                "param_3": "multiplier",
                "param_4": "divisor",
                "puVar1": "data_pointer",
                "iVar2": "result",
                "uVar3": "value"
            },
            "code": "int calculate_time_taken_00081624(int index, int is_zero, int multiplier, undefined4 divisor)\n{\n  uint *data_pointer;\n  int result;\n  undefined4 value;\n  data_pointer = DAT_0008167c;\n  value = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n  if (is_zero == 0) {\n    value = 0;\n  }\n  result = check_bits_set_00081684(*(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4),value,\n                       ((*DAT_0008167c / DAT_00081680) * multiplier) / 0x12,divisor);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) / ((ulonglong)*data_pointer / 1000));\n  }\n  return result;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_time_taken_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_bytes_to_dat_00080ec8",
                "param_1": "src",
                "param_2": "src_len",
                "param_3": "dat_len",
                "iVar1": "i",
                "DAT_00080ee8": "dat_ptr"
            },
            "code": "uint copy_bytes_to_dat_00080ec8(uint8_t *src, int src_len, uint dat_len) {\n  int i;\n  uint8_t *DAT_00080ee8 = (uint8_t *)DAT_00080ee8;\n  for (i = 0; i < (int)dat_len; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(src + i);\n  }\n  return dat_len & ~((int)dat_len >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_dat_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "convert_base_and_process_data_0008117a",
                "param_1": "base",
                "iVar1": "decimal_value",
                "iVar2": "processed_data",
                "convert_base_to_decimal_0008113a": "convert_base_to_decimal",
                "processDataAndReturn_000810d8": "process_data_and_return"
            },
            "code": "int convert_base_and_process_data_0008117a(int base){\n  int decimal_value = convert_base_to_decimal(base);\n  int processed_data = process_data_and_return(base);\n  return processed_data + decimal_value;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "convert_base_and_process_data_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initialize_and_process_data_000801e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_device_000813dc": "initialize_device",
                "process_data_00080f0c": "process_data",
                "calculate_new_values_00080164": "calculate_new_values",
                "do_nothing_00080f08": "do_nothing",
                "PTR_DAT_00080244": "PTR_DEVICE_CONFIG",
                "PTR_DAT_00080248": "PTR_DEVICE_DATA1",
                "PTR_DAT_0008024c": "PTR_DEVICE_DATA2",
                "PTR_DAT_00080160": "PTR_STATUS_REGISTER"
            },
            "code": "int initialize_and_process_data_000801e0(int param1, int param2, int param3, int param4)\n{\n    initialize_device(PTR_DAT_00080244, 0xe100, param3, param4, param4);\n    process_data(0xd, 1);\n    process_data(6, 1);\n    process_data(0x39, 0);\n    process_data(4, 0);\n    process_data(3, 0);\n    process_data(2, 0);\n    process_data(PTR_DAT_00080248, 5);\n    process_data(PTR_DAT_0008024c, 6);\n    calculate_new_values();\n    do_nothing_00080f08(1000);\n    if (*(int *)PTR_DAT_00080160 == 0)\n    {\n        software_interrupt(0x3f);\n        return 1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_array_000811b0",
                "param_1": "array_address",
                "memset32_aligned_00081f00": "memset32",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int initialize_array_000811b0(int array_address)\n{\n    int array_size = 128;\n    int zero = 0;\n    memset32(array_address, zero, array_size);\n    *(int *)(array_address + 128) = 0;\n    *(int *)(array_address + 132) = 0;\n    return array_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_array_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "execute_function_with_data_pointer_000817f0",
                "param_1": "parameter",
                "*DAT_000817fc": "data_pointer",
                "FUNC_00081810": "function_with_data_pointer"
            },
            "code": "void execute_function_with_data_pointer_000817f0(void* *DAT_000817fc, int parameter)\n{\n  FUNC_00081810(**DAT_000817fc, parameter);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_pointer_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_new_value_0008145c",
                "param_1": "current_value",
                "param_2": "previous_value",
                "param_3": "end_value",
                "param_4": "start_value",
                "param_5": "end_range",
                "uint": "unsigned int"
            },
            "code": "int calculate_new_value_0008145c(int current_value, int previous_value, int end_value, int start_value, int end_range) {\n    int range = end_value - previous_value;\n    int difference = current_value - previous_value;\n    int new_range = end_range - start_value;\n    int new_value = ((difference * new_range) / range) + start_value;\n    return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_new_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba"
            },
            "code": "int return_one_00080eba(void)\n{\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00081e34(piVar9,param_2);\n      }\n      allocate_memory_block_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if (count != -1) {\n      count--;\n      *DAT_000811a8 = count;\n      if (count == 0) {\n          (*DAT_000811ac)();\n      }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "values",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "is_bitmask_negative"
            },
            "code": "void set_values_000809e4(uint32_t *values, uint32_t value, uint32_t bitmask)\n{\n    bool is_bitmask_negative = (int)(bitmask << 0x1f) < 0;\n    values[17] = value;\n    if (is_bitmask_negative) {\n        values[25] = value;\n    }\n    if (!is_bitmask_negative) {\n        values[24] = value;\n    }\n    bool is_second_bit_set = (bitmask & 0x2) != 0;\n    if (is_second_bit_set) {\n        values[8] = value;\n    }\n    if (!is_second_bit_set) {\n        values[9] = value;\n    }\n    if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n        values[32] = value;\n    }\n    values[5] = value;\n    *values = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "set_values_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "get_default_value_00080ebe"
            },
            "code": "int get_default_value_00080ebe(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "get_default_value_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "undefined4": "int",
                "PTR_DAT_000816e0": "value_pointer",
                "*(undefined4 *)PTR_DAT_000816e0": "*value_pointer"
            },
            "code": "int get_value_from_pointer_thunk_000816d8(){\n    int* PTR_DAT_000816e0 = (int*)PTR_DAT_000816e0;\n    int value = *(undefined4 *)PTR_DAT_000816e0;\n    return value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_value_from_pointer_000816d8",
                "PTR_DAT_000816e0": "pointer_data"
            },
            "code": "get_value_from_pointer_000816d8() {\n    return *(undefined4 *)PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_input_000815b8",
                "param_1": "input_buffer",
                "param_2": "input_data",
                "uVar1": "input_length",
                "iVar2": "result"
            },
            "code": "int check_input_000815b8(byte **input_buffer, byte *input_data) {\n  uint input_length;\n  int result;\n  if (input_buffer[2] == NULL) {\n    if (input_data == NULL) {\n      return 1;\n    }\n  }\n  else {\n    if (input_data != NULL) {\n      input_length = get_input_length(*input_buffer);\n      goto LAB_000815d4;\n    }\n    input_data = *input_buffer;\n  }\n  input_length = (uint)*input_data;\nLAB_000815d4:\n  result = 1 - input_length;\n  if (input_length > 1) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_input_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "process_and_update_value_00084220",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "processed_value"
            },
            "code": "void process_and_update_value_00084220(undefined4 value, int *data)\n{\n  int processed_value = process_and_set_value(value, (int)*(short *)(data + 0xe));\n  if (processed_value >= 0) {\n    *(int *)(data + 0x50) += processed_value;\n    return;\n  }\n  *(ushort *)(data + 0xc) &= 0xefff;\n  return;\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "process_and_update_value_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "allocate_memory_and_return_pointer_00081472",
                "param_1": "memory_block_pointer"
            },
            "code": "void allocate_memory_and_return_pointer_00081472(int *memory_block_pointer)\n{\n    allocate_memory_block_00081800(*memory_block_pointer);\n}\n",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_return_pointer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "process_input_and_increment_counter_000836ec",
                "uVar1": "exit_status",
                "puVar2": "data_ptr_2",
                "iVar3": "counter",
                "iVar4": "data_section",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_ptr"
            },
            "code": "void process_input_and_increment_counter_000836ec(void)\n{\n  int counter;\n  int *data_ptr;\n  int *jump_table_ptr;\n  int exit_status = 1;\n  int data_section = *(int *)PTR_DAT_000836d0;\n  int *data_ptr_2 = *(int **)(data_section + 0x148);\n  if (data_ptr_2 == (int *)0x0) {\n    data_ptr_2 = (int *)(data_section + 0x14c);\n    *(int **)(data_section + 0x148) = data_ptr_2;\n  }\n  counter = data_ptr_2[1];\n  if (counter > 31) {\n    if ((DAT_000836d4 == 0) || (execute_function_with_data_pointer_000817f0(400) == (int *)0x0)) {\n      jump_table_ptr = (int *)0x836fb;\n      (*jump_table_ptr)(0xffffffff);\n      return;\n    }\n    data_ptr = execute_function_with_data_pointer_000817f0(400);\n    *data_ptr = *(int *)(data_section + 0x148);\n    data_ptr[1] = 0;\n    counter = 0;\n    *(int **)(data_section + 0x148) = data_ptr;\n    data_ptr_2[98] = 0;\n    data_ptr_2[99] = 0;\n  }\n  data_ptr_2[1] = counter + 1;\n  data_ptr_2[counter + 2] = exit_status;\n  jump_table_ptr = (int *)0x836fb;\n  (*jump_table_ptr)(0);\n  return;\n}",
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_input_and_increment_counter_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "execute_function_with_args_00081750",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "ptr_arg3",
                "uStack_4": "ptr_arg4",
                "FUNC_0008289c": "execute_function",
                "DAT_00081774": "data_pointer"
            },
            "code": "void execute_function_with_args_00081750(int arg1, int arg2, int* arg3, int* arg4) {\n  int* ptr_arg3 = arg3;\n  int* ptr_arg4 = arg4;\n  FUNC_0008289c(*DAT_00081774, arg1, arg2, ptr_arg3);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "execute_function_with_args_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_bytes_until_null_00082688",
                "param_1": "address",
                "iVar1": "byte_offset",
                "puVar2": "address_ptr",
                "uVar3": "word",
                "bVar4": "is_null_byte"
            },
            "code": "int count_bytes_until_null_00082688(uint address)\n{\n    int byte_count = 0;\n    uint *address_ptr = (uint *)(address & 0xfffffffc);\n    int byte_offset = -(address & 3);\n    uint word = *address_ptr;\n    if ((address & 3) != 0) {\n        word |= 0xffffffffU >> ((byte_offset + 4U & 0x1f) << 3);\n    }\n    while (address_ptr++, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n        byte_offset += 4;\n        word = *address_ptr;\n    }\n    bool is_null_byte = (word & 0xff) == 0;\n    if (!is_null_byte) {\n        byte_offset += 1;\n        is_null_byte = (word & 0xff00) == 0;\n    }\n    if (!is_null_byte) {\n        byte_offset += 1;\n        is_null_byte = (word & 0xff0000) == 0;\n    }\n    if (!is_null_byte) {\n        byte_offset += 1;\n    }\n    return byte_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "process_and_set_value_00084508",
                "param_1": "output_value",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_and_set_value_00084508(int *output_value, undefined4 input1, undefined4 input2, undefined4 input3) {\n                      undefined *ptr = PTR_DAT_0008452c;\n                      *(undefined4 *)PTR_DAT_0008452c = 0;\n                      int result = calculate_result(input1, input2, input3);\n                      if ((result == -1) && (*(int *)ptr != 0)) {\n                          *output_value = *(int *)ptr;\n                          return;\n                      }\n                      return;\n                  }",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "process_and_set_value_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data",
                "param_2": "type",
                "param_3": "metadata",
                "param_4": "flags",
                "bVar1": "is_negative_flag",
                "DAT_00080a88": "data_processor",
                "DAT_00080a8c": "metadata_processor",
                "DAT_00080a90": "flag_processor"
            },
            "code": "int process_data_00080a30(int data, int type, int metadata, uint32_t flags) {\n  bool is_negative_flag = (int)(flags << 0x1f) < 0;\n  switch(type) {\n    case 1:\n    case 2:\n      (*DAT_00080a88)(data, type, metadata);\n      *(int *)(data + 0x44) = metadata;\n      if (is_negative_flag) {\n        *(int *)(data + 100) = metadata;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data + 0x60) = metadata;\n      }\n      break;\n    case 3:\n      (*DAT_00080a8c)(data, metadata, flags, DAT_00080a8c, data);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080a90)(data, metadata, type == 5, (flags << 0x1d) >> 0x1f, flags & 1, type, metadata);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000809e4",
                "FUN_00080a0a",
                "FUN_000809be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_data_arrays_0008089c",
                "param_1": "data_array_start",
                "param_2": "second_data_array_start",
                "param_3": "num_elements",
                "puVar1": "first_array_start",
                "puVar2": "second_array_start",
                "puVar3": "third_array_start",
                "puVar4": "fourth_array_start",
                "puVar5": "fifth_array_start",
                "puVar6": "sixth_array_start"
            },
            "code": "void initialize_data_arrays_0008089c(undefined4 param_1, undefined4 param_2, undefined4 num_elements)\n{\n    undefined *first_array_start = PTR_DAT_00080930;\n    undefined *second_array_start = PTR_DAT_00080934;\n    initialize_array_000811b0(first_array_start);\n    initialize_array_000811b0(second_array_start);\n    undefined *third_array_start = PTR_DAT_0008093c;\n    undefined *fourth_array_start = PTR_DAT_00080940;\n    initializeValuesAndPointers_00081348(fourth_array_start, DAT_00080938, 8, 8, first_array_start, second_array_start, num_elements);\n    undefined *fifth_array_start = PTR_DAT_00080944;\n    undefined *sixth_array_start = PTR_DAT_00080948;\n    initialize_array_000811b0(fifth_array_start);\n    initialize_array_000811b0(sixth_array_start);\n    undefined *seventh_array_start = PTR_DAT_0008094c;\n    undefined *eighth_array_start = PTR_DAT_0008096c;\n    initialize_array_000811b0(seventh_array_start);\n    initialize_array_000811b0(eighth_array_start);\n    write_buffer_with_value_and_pointer_00081438(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, third_array_start, eighth_array_start);\n    write_buffer_with_value_and_pointer_00081438(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, second_array_start, sixth_array_start);\n    write_buffer_with_value_and_pointer_00081438(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, fifth_array_start, seventh_array_start);\n}",
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_arrays_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "count"
            },
            "code": "void process_data_000810a6(int* data_ptr, int data_length, undefined4 arg3, undefined4 arg4) {\n  undefined4 count;\n  \n  if (data_length != 0) {\n    count = count_bytes_until_null_00082688(data_length);\n    (**(code **)(*data_ptr + 4))(data_ptr, data_length, count, *(code **)(*data_ptr + 4), arg4);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810e8",
                "FUN_000810fc"
            ],
            "imported": false,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 111124,
    "layers": [
        [
            "FUN_000825cc",
            "FUN_0008236c",
            "FUN_000836d8",
            "FUN_000812b8",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_00084494",
            "FUN_000815de",
            "FUN_000841e4",
            "FUN_0008400c",
            "FUN_00080c20",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_00080d3e",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080d58",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_0008458c",
            "FUN_000811ca",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080eec",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080ec2",
            "FUN_00081348",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00080a30"
        ],
        [
            "FUN_00080f0c",
            "FUN_00083a74",
            "FUN_000844e0",
            "FUN_000803fc",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000844bc",
            "FUN_00081438",
            "FUN_0008434c",
            "FUN_00081496",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_00083888",
            "FUN_000811b0",
            "FUN_000836ec",
            "FUN_00084508",
            "FUN_000810a6"
        ],
        [
            "FUN_00083b10",
            "FUN_0008427c",
            "FUN_00084018",
            "FUN_000810d8",
            "FUN_000806a0",
            "FUN_000816f8",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081014",
            "FUN_000814ae",
            "FUN_000810c4",
            "FUN_000810fc",
            "FUN_00084220",
            "FUN_0008089c"
        ],
        [
            "thunk_FUN_0008113a",
            "FUN_00081570",
            "FUN_0008113a",
            "FUN_0008044c",
            "FUN_00083850",
            "FUN_0008356c",
            "FUN_000810e8",
            "FUN_00081800",
            "FUN_00080774",
            "FUN_000801e0"
        ],
        [
            "FUN_000842a4",
            "FUN_000834f0",
            "FUN_00081480",
            "FUN_0008159e",
            "FUN_0008151c",
            "FUN_00084484",
            "FUN_0008117a",
            "FUN_00081472"
        ],
        [
            "FUN_00081560",
            "FUN_000839b4",
            "FUN_000814d0"
        ],
        [
            "FUN_000814f6",
            "FUN_00082824"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}