{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_sys_clock_frequency_08003440",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pll_mul_factor_table",
                "pllmul": "pll_mul",
                "prediv": "prediv",
                "tmpreg": "tmp_reg",
                "sysclockfreq": "sys_clock_freq",
                "pllclk": "pll_clk",
                "uVar1": "u_var_1"
            },
            "code": "uint32_t calculate_sys_clock_frequency_08003440(void)\n{\n    uint32_t sys_clock_freq, pll_clk, tmp_reg;\n    uint8_t prediv_factor_table[2];\n    uint8_t pll_mul_factor_table[16];\n    uint32_t pll_mul, prediv;\n    uint u_var_1 = *(uint *)(DAT_080034F8 + 4);\n    pll_mul_factor_table[0] = *(undefined4 *)PTR__etext_080034f0;\n    pll_mul_factor_table[1] = *(undefined4 *)(PTR__etext_080034f0 + 4);\n    pll_mul_factor_table[2] = *(undefined4 *)(PTR__etext_080034f0 + 8);\n    pll_mul_factor_table[3] = *(undefined4 *)(PTR__etext_080034f0 + 0xc);\n    prediv_factor_table = *(uint8_t (*) [2])PTR_DAT_080034f4;\n\n    if ((u_var_1 & 0xc) == 4)\n    {\n        sys_clock_freq = DAT_080034fc;\n    }\n    else if ((u_var_1 & 0xc) == 8)\n    {\n        if ((u_var_1 & 0x10000) == 0)\n        {\n            pll_clk = DAT_08003500 * (uint)pll_mul_factor_table[u_var_1 >> 0x12 & 0xf];\n        }\n        else\n        {\n            pll_mul = pll_mul_factor_table[u_var_1 >> 0x12 & 0xf];\n            prediv = prediv_factor_table[*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1];\n            pll_clk = (DAT_080034fc * pll_mul) / prediv;\n        }\n        sys_clock_freq = pll_clk;\n    }\n    else\n    {\n        sys_clock_freq = DAT_080034fc;\n    }\n    return sys_clock_freq;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_sys_clock_frequency_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "HAL_TIM_Base_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004f2c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_current_tick_08004f2c"
        },
        "FUN_080056bc": {
            "renaming": {
                "FUN_080056bc": "do_nothing_080056bc"
            },
            "code": "\nvoid do_nothing_080056bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056bc"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "configure_uart_080046ec",
                "*huart": "*uart_handle",
                "uVar1": "mantissa",
                "uVar2": "apb_freq",
                "uVar3": "fraction",
                "uVar4": "pclk_freq",
                "uVar5": "apb_freq",
                "uVar6": "apb_freq",
                "uVar7": "apb_freq",
                "uVar8": "apb_freq",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "uVar12": "baud_rate",
                "tmpreg": "tmpreg",
                "huart->Instance": "uart_handle->Instance",
                "huart->Init.StopBits": "uart_handle->Init.StopBits",
                "huart->Init.Mode": "uart_handle->Init.Mode",
                "huart->Init.WordLength": "uart_handle->Init.WordLength",
                "huart->Init.Parity": "uart_handle->Init.Parity",
                "huart->Init.HwFlowCtl": "uart_handle->Init.HwFlowCtl",
                "DAT_08004914": "USART1",
                "DAT_08004918": "16"
            },
            "code": "void configure_uart_080046ec(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t pclk_freq, baud_rate, mantissa, fraction, apb_freq;\n  uint32_t stop_bits, mode, word_length, parity, hw_flow_ctl;\n  pclk_freq = (uart_handle->Instance == DAT_08004914) ? HAL_RCC_GetPCLK2Freq() : HAL_RCC_GetPCLK1Freq();\n  baud_rate = uart_handle->Init.BaudRate;\n  stop_bits = uart_handle->Init.StopBits;\n  mode = uart_handle->Init.Mode;\n  word_length = uart_handle->Init.WordLength;\n  parity = uart_handle->Init.Parity;\n  hw_flow_ctl = uart_handle->Init.HwFlowCtl;\n  uart_handle->Instance->CR2 = stop_bits | (uart_handle->Instance->CR2 & 0xffffcfff);\n  uart_handle->Instance->CR1 = (uart_handle->Instance->CR1 & 0xffffe9f3) | mode | word_length | parity;\n  uart_handle->Instance->CR3 = hw_flow_ctl | (uart_handle->Instance->CR3 & 0xfffffcff);\n  apb_freq = (uart_handle->Instance == DAT_08004914) ? HAL_RCC_GetPCLK2Freq() : HAL_RCC_GetPCLK1Freq();\n  mantissa = (uint32_t)(apb_freq / (baud_rate * DAT_08004918));\n  fraction = (uint32_t)(((apb_freq / (baud_rate * DAT_08004918.0)) - mantissa) * DAT_08004918);\n  uart_handle->Instance->BRR = (mantissa << 4) | fraction;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "init_timer_08005500",
                "HVar1": "status",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config",
                "PTR_htim2_08005590": "htim2",
                "_Error_Handler": "_Error_Handler",
                "PTR_s____src_main_c_08005594": "__FILE__",
                "HAL_TIM_Base_Init": "HAL_TIM_Base_Init",
                "HAL_TIM_ConfigClockSource": "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_MasterConfigSynchronization": "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_OK": "HAL_OK",
                "TIM_CLOCKSOURCE_INTERNAL": "TIM_CLOCKSOURCE_INTERNAL",
                "TIM_TRGO_RESET": "TIM_TRGO_RESET",
                "TIM_MASTERSLAVEMODE_DISABLE": "TIM_MASTERSLAVEMODE_DISABLE"
            },
            "code": "void init_timer_08005500(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_config;\n\n  *(uint32_t *)PTR_htim2_08005590 = 0x40000000;\n  *(uint32_t *)(PTR_htim2_08005590 + 4) = 36000;\n  *(uint32_t *)(PTR_htim2_08005590 + 8) = 0;\n  *(uint32_t *)(PTR_htim2_08005590 + 0xc) = 0x14;\n  *(uint32_t *)(PTR_htim2_08005590 + 0x10) = 0;\n  *(uint32_t *)(PTR_htim2_08005590 + 0x18) = 0;\n\n  status = HAL_TIM_Base_Init((TIM_HandleTypeDef *)PTR_htim2_08005590);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource((TIM_HandleTypeDef *)PTR_htim2_08005590,&clock_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization((TIM_HandleTypeDef *)PTR_htim2_08005590,&master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "init_timer_08005500"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "delay_08003568",
                "mdelay": "milliseconds",
                "Delay": "cycles",
                "bVar1": "delay_complete",
                "DAT_080035a0": "SYS_CLOCK_FREQ_CONSTANT",
                "PTR_SystemCoreClock_0800359c": "SYS_CLOCK_FREQ_PTR"
            },
            "code": "void delay_08003568(uint32_t milliseconds)\n{\n  bool delay_08003568_complete;\n  uint32_t cycles = milliseconds * (uint)((ulonglong)SYS_CLOCK_FREQ * (ulonglong)*PTR_SystemCoreClock_0800359c >> 0x29);\n  do {\n    delay_08003568_complete = cycles == 0;\n    cycles--;\n  } while (!delay_08003568_complete);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_08003568"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "I2C_wait_for_flag_08002c2e",
                "*hi2c": "*i2c_handler",
                "Timeout": "timeout_ms",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "hi2c->Instance->SR1": "i2c_handler->Instance->SR1",
                "HAL_OK": "HAL_OK",
                "I2C_IsAcknowledgeFailed": "I2C_IsAcknowledgeFailed",
                "HAL_GetTick()": "HAL_GetTick()",
                "0xffffffff": "I2C_TIMEOUT_INFINITE",
                "i2c_handler->ErrorCode": "i2c_handler->ErrorCode",
                "i2c_handler->PreviousState": "i2c_handler->PreviousState",
                "i2c_handler->State": "i2c_handler->State",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR",
                "4": "I2C_FLAG_ADDR"
            },
            "code": "HAL_StatusTypeDef I2C_wait_for_flag_08002c2e(I2C_HandleTypeDef *i2c_handler, uint32_t timeout_ms, uint32_t start_tick) {\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  while(true) {\n    if ((i2c_handler->Instance->SR1 & I2C_FLAG_ADDR) == I2C_FLAG_ADDR) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handler);\n    if (status != HAL_OK) {\n      break;\n    }\n    if ((timeout_ms != I2C_TIMEOUT_INFINITE) && ((timeout_ms == 0) || ((current_tick = HAL_GetTick()) > (start_tick + timeout_ms)))) {\n      i2c_handler->ErrorCode |= I2C_ERROR_TIMEOUT;\n      i2c_handler->PreviousState = I2C_STATE_NONE;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "I2C_wait_for_flag_08002c2e"
        },
        "FUN_080008ec": {
            "renaming": {
                "FUN_080008ec": "compare_080008ec",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "xorOfNum2Num4",
                "bVar2": "isNum1Num2Zero",
                "bVar3": "isNum3Num4Zero"
            },
            "code": "uint compare_080008ec(uint num1, uint num2, uint num3, uint num4) {\n  bool isNum1Num2Zero = (num1 | (num2 << 1)) == 0;\n  bool isNum3Num4Zero = (num3 | (num4 << 1)) == 0;\n  if (isNum1Num2Zero && isNum3Num4Zero) {\n    if ((((int)(num2 << 1) >> 0x15) == -1) || (((int)(num4 << 1) >> 0x15) == -1)) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (num2 == num4) {\n      if (num1 == num3) {\n        return 1;\n      }\n    }\n    else {\n      uint xorOfNum2Num4 = num2 ^ num4;\n      if (xorOfNum2Num4 != 0) {\n        bool isXorOfNum2Num4Positive = (int)xorOfNum2Num4 > -1;\n        if (isXorOfNum2Num4Positive) {\n          if (num2 == num4) {\n            return 1;\n          }\n        }\n        else {\n          if (num4 <= num2) {\n            if (num3 <= num1) {\n              return 1;\n            }\n          }\n          else {\n            if (num1 <= num3) {\n              return 1;\n            }\n          }\n        }\n      }\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ec",
            "calling": [],
            "imported": false,
            "current_name": "compare_080008ec"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "compare_double_values_08000978",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "expected_first_value",
                "param_4": "expected_second_value"
            },
            "code": "void compare_double_values_08000978(double first_value, double second_value, double expected_first_value, double expected_second_value)\n{\n  __aeabi_cdcmpeq(expected_first_value, expected_second_value, first_value, second_value);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08000978"
        },
        "FUN_0800101c": {
            "renaming": {
                "FUN_0800101c": "isLessThanOrEqualToZero_0800101c",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool isLessThanOrEqualToZero_0800101c(void)\n{\n    bool is_CY_zero = __aeabi_cfrcmple();\n    bool is_ZR_zero = !(bool)in_CY;\n    return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800101c",
            "calling": [],
            "imported": false,
            "current_name": "isLessThanOrEqualToZero_0800101c"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "waitForever_080056d4"
            },
            "code": "void waitForever_080056d4(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [],
            "imported": false,
            "current_name": "waitForever_080056d4"
        },
        "FUN_080078b4": {
            "renaming": {
                "FUN_080078b4": "register_exit_proc_080078b4",
                "__func": "exit_function",
                "iVar1": "exit_status",
                "__register_exitproc": "__register_exit_proc"
            },
            "code": "int register_exit_proc_080078b4(__func *exit_function)\n{\n  int exit_status;\n  exit_status = __register_exitproc(0, exit_function, 0);\n  return exit_status;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078b4",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_080078b4"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "handle_timer_period_elapsed_080017b4",
                "TIM_HandleTypeDef": "timer_handle",
                "0x0": "NULL"
            },
            "code": "void handle_timer_period_elapsed_080017b4(void)\n{\n  TIM_HandleTypeDef* timer_handle = (TIM_HandleTypeDef*)0x0;\n  HAL_TIM_PeriodElapsedCallback(timer_handle);\n  return;\n}",
            "called": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_timer_period_elapsed_080017b4"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_string_08001030",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08001030(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "divide_080011ec",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void divide_080011ec(int divide_080011ecnd, int divisor, int quotient, int remainder) {\n    if ((remainder == 0) && (quotient == 0)) {\n        if (divisor != 0 || divide_080011ecnd != 0) {\n            divisor = -1;\n            divide_080011ecnd = -1;\n        }\n        __aeabi_idiv0(divide_080011ecnd, divisor);\n        return;\n    }\n    __udivmoddi4();\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "divide_080011ec"
        },
        "FUN_080056ce": {
            "renaming": {
                "FUN_080056ce": "infinite_loop_080056ce"
            },
            "code": "void infinite_loop_080056ce() {\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ce",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_080056ce"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "transmit_uart_data_08004f3c",
                "str": "data",
                "len": "length"
            },
            "code": "void transmit_uart_data_08004f3c(char *data, uint32_t length)\n{\n  HAL_UART_Transmit(&huart1, (uint8_t *)data, (uint16_t)length, 0x32);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_08004f3c"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_value",
                "bVar2": "is_zero",
                "bVar3": "is_greater_or_equal"
            },
            "code": "uint check_parameters_080008fc(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n    uint result;\n    bool is_negative_1;\n    bool is_equal;\n    bool is_zero;\n    bool is_not_equal;\n    bool is_greater_or_equal;\n    if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) && ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) || (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0))))))\n    {\n        result = 1;\n    }\n    else\n    {\n        is_zero = (first_param | second_param << 1) == 0;\n        if (is_zero)\n        {\n            is_zero = (third_param | fourth_param << 1) == 0;\n        }\n        is_equal = second_param == fourth_param;\n        if (is_zero)\n        {\n            is_equal = first_param == third_param;\n        }\n        is_not_equal = !is_equal;\n        if (is_not_equal)\n        {\n            uint xor_value = second_param ^ fourth_param;\n            is_zero = xor_value == 0;\n            if (-1 < (int)xor_value)\n            {\n                is_zero = second_param == fourth_param;\n            }\n            is_greater_or_equal = -1 < (int)xor_value && fourth_param <= second_param;\n            if (is_zero)\n            {\n                is_greater_or_equal = third_param <= first_param;\n            }\n            is_negative_1 = (int)fourth_param >> 0x1f;\n            if (!is_greater_or_equal)\n            {\n                is_negative_1 = ~is_negative_1;\n            }\n            result = is_negative_1 | 1;\n        }\n        else\n        {\n            result = 0;\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_080008fc"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_NVIC_priority_group_08001714",
                "PriorityGroup": "priority_group"
            },
            "code": "void set_NVIC_priority_group_08001714(uint32_t priority_group)\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}",
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_NVIC_priority_group_08001714"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "convert_to_double_08000988",
                "param_1": "input_number"
            },
            "code": "float64_t convert_to_double_08000988(float32_t input_number)\n{\n    __nedf2();\n    return input_number;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt"
            ],
            "imported": false,
            "current_name": "convert_to_double_08000988"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "calculate_quotient_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "temp",
                "iVar3": "subtract",
                "iVar4": "divisor_size",
                "iVar5": "i",
                "uVar6": "remainder",
                "puVar7": "divisor_ptr",
                "puVar8": "dividend_ptr",
                "puVar9": "last_divisor_ptr",
                "puVar11": "current_divisor_ptr",
                "puVar12": "next_divisor_ptr"
            },
            "code": "uint calculate_quotient_080078c0(int dividend[], int divisor[], int dividend_size, int divisor_size) {\n  uint quotient = 0;\n  int remainder = 0;\n  int i = dividend_size - 1;\n  uint temp = 0;\n  while (i >= divisor_size - 1) {\n    if (dividend[i] == divisor[divisor_size - 1]) {\n      quotient = UINT_MAX;\n      temp = 0;\n      for (int j = 0; j < divisor_size; j++) {\n        if (divisor[j] != dividend[i - divisor_size + 1 + j]) {\n          quotient = (dividend[i - divisor_size + 1 + j] + temp) / divisor[j];\n          break;\n        }\n      }\n      if (quotient == UINT_MAX) {\n        quotient = 1;\n        remainder = 0;\n        break;\n      }\n      remainder = (dividend[i - divisor_size + 1] - quotient * divisor[0]) * 0x10000 + dividend[i - divisor_size + 2];\n      for (int j = divisor_size - 2; j >= 0; j--) {\n        int product = quotient * divisor[j];\n        int subtract = remainder - product;\n        remainder = subtract * 0x10000 + dividend[i - divisor_size + j + 2];\n        dividend[i - divisor_size + j + 2] = (subtract >> 16) + dividend[i - divisor_size + j + 1] - (product >> 16);\n      }\n      dividend[i + 1] = (remainder >> 16) + dividend[i - divisor_size + 1 + divisor_size];\n      i--;\n    } else {\n      quotient = (dividend[i] * 0x10000 + dividend[i - 1]) / divisor[divisor_size - 1];\n      remainder = (dividend[i] * 0x10000 + dividend[i - 1]) % divisor[divisor_size - 1];\n      for (int j = divisor_size - 2; j >= 0; j--) {\n        int product = quotient * divisor[j];\n        int subtract = remainder - product;\n        remainder = subtract * 0x10000 + dividend[i - divisor_size + j + 2];\n        dividend[i - divisor_size + j + 2] = (subtract >> 16) + dividend[i - divisor_size + j + 1] - (product >> 16);\n      }\n      dividend[i + 1] = (remainder >> 16) + dividend[i - divisor_size + 1 + divisor_size];\n      i--;\n    }\n  }\n  return quotient;\n}",
            "called": [
                "__mcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_quotient_080078c0"
        },
        "FUN_080056e0": {
            "renaming": {
                "FUN_080056e0": "do_nothing_080056e0"
            },
            "code": "\nvoid do_nothing_080056e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056e0"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,uint param_6,\n              int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    _Bfree(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = __aeabi_dcmpeq(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = __d2b(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30);\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = __floatunsidf(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = __subdf3(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = __aeabi_i2d(iVar13);\n  uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = __aeabi_d2iz();\n  iVar10 = __aeabi_dcmplt((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = __aeabi_i2d(local_74);\n    iVar10 = __aeabi_dcmpeq((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = __aeabi_dcmpgt(*(undefined4 *)(PTR___mprec_tens_08007c04 + local_74 * 8),\n                              *(undefined4 *)((int)(PTR___mprec_tens_08007c04 + local_74 * 8) + 4),\n                              param_3,local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)_Balloc(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)_Balloc(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = __muldf3(param_3,local_7c,\n                          *(undefined4 *)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8),\n                          *(undefined4 *)\n                           ((int)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR___mprec_bigtens_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]);\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR___mprec_tens_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = __divdf3(param_3,local_7c,*(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x20),\n                          *(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = __muldf3((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = __divdf3(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = __aeabi_dcmplt(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0))\n    {\n      if (local_68 == 0) {\n        uVar21 = __aeabi_i2d(iVar9);\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = __muldf3(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = __aeabi_i2d(iVar9 + 1);\n        uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                          (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = __aeabi_i2d(iVar9);\n    uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = __aeabi_d2iz(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -4);\n      uVar21 = __aeabi_i2d();\n      uVar21 = __subdf3(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = __muldf3(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = __aeabi_d2iz();\n            uVar23 = __aeabi_i2d();\n            uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                              (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = __aeabi_dadd((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = __subdf3(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = __aeabi_dcmpgt((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = __divdf3(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = __subdf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = __aeabi_d2iz();\n              uVar23 = __aeabi_i2d();\n              uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8)\n              ;\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = __subdf3(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = __aeabi_dcmpgt((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR___mprec_tens_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        __divdf3(param_3,uVar4,uVar8,uVar11);\n        bVar2 = __aeabi_d2iz();\n        uVar21 = __aeabi_i2d();\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = __subdf3(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            __divdf3((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = __aeabi_d2iz();\n            uVar22 = __aeabi_i2d();\n            uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = __subdf3((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = __aeabi_dcmpgt((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = __aeabi_dcmpeq((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 ||\n            ((bVar2 & 1) == 0)))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = __muldf3(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = __aeabi_dcmpge((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = __i2b(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = __pow5mult(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = __pow5mult(param_1,uVar12,iVar9);\n          uVar8 = __multiply(param_1,uVar12,uVar3);\n          _Bfree(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = __pow5mult(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = __i2b(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = __pow5mult(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = __hi0bits(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = __lshift(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = __lshift(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = __mcmp(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = __multadd(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = __multadd(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = __multadd(param_1,uVar5,5);\n        iVar9 = __mcmp(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = quorem(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = __lshift(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = _Balloc(param_1,*(undefined4 *)(local_80 + 4));\n        memcpy((void *)(iVar9 + 0xc),(void *)(local_80 + 0xc),(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = __lshift(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = quorem(uVar3,uVar5);\n      iVar13 = __mcmp(uVar3,local_80);\n      iVar10 = __mdiff(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = __mcmp(uVar3);\n        _Bfree(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = __lshift(param_1,uVar3,1);\n          iVar13 = __mcmp(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = __multadd(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = __lshift(param_1,uVar3,1);\n    iVar9 = __mcmp(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      _Bfree(param_1);\n    }\n  }\n  _Bfree(param_1,uVar12);\nLAB_08008294:\n  _Bfree(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__floatunsidf",
                "_Bfree",
                "__lshift",
                "__pow5mult",
                "__multadd",
                "__aeabi_dcmplt",
                "__divdf3",
                "__i2b",
                "__multiply",
                "__aeabi_i2d",
                "__mcmp",
                "_Balloc",
                "__subdf3",
                "__d2b",
                "__mdiff",
                "__hi0bits",
                "memcpy",
                "__aeabi_d2iz",
                "quorem",
                "__aeabi_dcmpge",
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "configure_GPIO_pins_080017c4",
                "GPIOx": "GPIO",
                "GPIO_Init": "GPIO_Init",
                "uVar1": "alternate_function_high",
                "uVar2": "alternate_function_low",
                "uVar3": "pin_mask",
                "uVar4": "pin_state",
                "uVar5": "mode",
                "pGVar6": "GPIO_ptr",
                "iVar7": "port_index",
                "tmpreg": "tmp_reg",
                "configregister": "config_register",
                "registeroffset": "register_offset",
                "temp": "temp",
                "iocurrent": "io_current",
                "ioposition": "io_position",
                "config": "config",
                "position": "position",
                "DAT_08001a4c": "GPIO_MODE_ANALOG",
                "DAT_08001a50": "GPIO_MODE_AF_PP",
                "DAT_08001a54": "GPIO_MODE_AF_OD",
                "DAT_08001a58": "GPIO_MODE_IT_RISING",
                "DAT_08001a5c": "GPIO_MODE_IT_FALLING",
                "DAT_08001a60": "GPIO_MODE_IT_RISING_FALLING",
                "DAT_08001a64": "SYSCFG_PTR",
                "DAT_08001a68": "EXTI_PTR",
                "DAT_08001a6c": "GPIOA_PTR",
                "DAT_08001a70": "GPIOB_PTR",
                "DAT_08001a74": "GPIOC_PTR",
                "DAT_08001a78": "GPIOD_PTR",
                "DAT_08001a7c": "EXTI_LINE_PTR"
            },
            "code": "void configure_GPIO_pins_080017c4(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *GPIO_Init) {\n    uint32_t config = 0;\n    uint32_t position = 0;\n    do {\n        if (position > 0xf) {\n            return;\n        }\n        uint32_t pin_mask = 1 << (position & 0xff);\n        uint32_t pin_state = GPIO_Init->Pin & pin_mask;\n        if (pin_state == pin_mask) {\n            uint32_t mode = GPIO_Init->Mode;\n            if (mode == DAT_08001a50) {\n                config = GPIO_Init->Speed + GPIO_MODE_OUTPUT_50MHz;\n            }\n            else if (mode < DAT_08001a4c) {\n                if (mode == GPIO_MODE_OUTPUT_PP) {\n                    config = GPIO_Init->Speed + GPIO_MODE_OUTPUT_PUSH_PULL;\n                }\n                else if (mode == GPIO_MODE_INPUT_PULLUP) {\n                    config = GPIO_Init->Speed;\n                }\n                else if (mode == GPIO_MODE_INPUT_PULLDOWN) {\n                    config = 0;\n                }\n            }\n            else {\n                if ((mode == DAT_08001a54) || ((mode == DAT_08001a50) && ((GPIO_Init->Alternate & 0x0F) == 0x0C))) {\n                    config = 0x8;\n                }\n                else if ((mode == GPIO_MODE_INPUT) || (mode == DAT_08001a58) || (mode == DAT_08001a5c) || (mode == DAT_08001a60)) {\n                    config = 0x4;\n                }\n            }\n            if (pin_state < 0x100) {\n                uint32_t offset = position << 2;\n                GPIO->CRL = GPIO->CRL & ~(0xf << (offset & 0xff)) | config << (offset & 0xff);\n            }\n            else {\n                uint32_t offset = (position - 8) * 4;\n                ((GPIO_TypeDef *)&GPIO->CRH)->CRH = ((GPIO_TypeDef *)&GPIO->CRH)->CRH & ~(0xf << (offset & 0xff)) | config << (offset & 0xff);\n            }\n        }\n        position++;\n    } while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "HAL_TIM_MspPostInit",
                "MX_GPIO_Init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pins_080017c4"
        },
        "FUN_080056da": {
            "renaming": {
                "FUN_080056da": "infiniteLoop_080056da"
            },
            "code": "void infiniteLoop_080056da(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056da",
            "calling": [],
            "imported": false,
            "current_name": "infiniteLoop_080056da"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "reverseBits_08001044",
                "param_1": "input",
                "uVar1": "shift",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint reverseBits_08001044(uint input){\n  uint mask = 0x80000000;\n  uint output = 0;\n  uint shift = 31;\n  while (shift >= 0) {\n    if ((input & mask) != 0) {\n      output |= (1 << shift);\n    }\n    mask >>= 1;\n    shift--;\n  }\n  return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "reverseBits_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "resize_and_copy_bits_08009444",
                "param_1": "block_size",
                "param_2": "block",
                "param_3": "num_bits",
                "iVar1": "temp_int_1",
                "iVar2": "current_block_index",
                "iVar3": "current_num_blocks",
                "uVar4": "current_block",
                "iVar5": "num_blocks",
                "iVar6": "temp_int_2",
                "puVar7": "new_block_data",
                "puVar8": "current_data",
                "puVar9": "next_data",
                "puVar10": "block_data",
                "puVar11": "end_data",
                "puVar12": "current_data",
                "puVar13": "current_data",
                "iVar14": "num_blocks_needed",
                "uVar15": "carry"
            },
            "code": "void resize_and_copy_bits_08009444(int block_size, undefined4 *block, uint num_bits)\n{\n  int num_blocks = block[4];\n  int num_blocks_needed = (int)num_bits >> 5 + num_blocks + 1;\n  int current_num_blocks = block[1];\n  int current_block_index = block[2];\n  if ((int)block[2] < num_blocks_needed) {\n    do {\n      current_block_index = current_block_index * 2;\n      current_num_blocks++;\n    } while (num_blocks_needed != current_block_index && num_blocks_needed + current_block_index < 0 == SBORROW4(num_blocks_needed, current_block_index));\n  }\n  int new_block = _Balloc(block_size, current_num_blocks);\n  uint *new_block_data = (uint *)(new_block + 0x14);\n  if (0 < (num_bits >> 5)) {\n    uint *end_data = new_block_data + (num_bits >> 5);\n    uint *current_data = new_block_data;\n    do {\n      current_data++;\n      *current_data = 0;\n    } while (current_data != end_data);\n  }\n  num_blocks = block[4];\n  uint *block_data = block + 5;\n  num_bits = num_bits & 0x1f;\n  if (num_bits == 0) {\n    new_block_data--;\n    uint *end_data = block_data + num_blocks;\n    uint *current_data = new_block_data;\n    do {\n      current_data++;\n      *current_data = *block_data;\n      block_data++;\n    } while (block_data < end_data);\n  }\n  else {\n    uint carry = 0;\n    uint *end_data = block_data + num_blocks;\n    uint *current_data = new_block_data;\n    do {\n      *current_data = *block_data << num_bits | carry;\n      uint *next_data = block_data + 1;\n      carry = *block_data >> (0x20 - num_bits & 0xff);\n      current_data++;\n      block_data = next_data;\n    } while (block_data < end_data);\n    current_data[1] = carry;\n    if (carry != 0) {\n      num_blocks_needed = num_blocks_needed + num_blocks + 2;\n    }\n  }\n  int block_table = *(int *)(block_size + 0x4c);\n  int current_block_index = block[1];\n  undefined4 current_block = *(undefined4 *)(block_table + current_block_index * 4);\n  *(int *)(new_block + 0x10) = num_blocks_needed - 1;\n  *block = current_block;\n  *(undefined4 **)(block_table + current_block_index * 4) = block;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "resize_and_copy_bits_08009444"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "transmitData_08004436",
                "*huart": "*uart",
                "*pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "startTick",
                "uVar2": "currentTick",
                "HVar3": "status",
                "iVar4": "errorCode",
                "local_58": "data16"
            },
            "code": "HAL_StatusTypeDef transmitData_08004436(UART_HandleTypeDef *uart, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    uint32_t startTick, currentTick;\n    HAL_StatusTypeDef status;\n    int errorCode;\n    uint16_t *data16 = (uint16_t *)data;\n    if (uart->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL || size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart->Lock == HAL_LOCKED) {\n        return HAL_BUSY;\n    }\n    uart->Lock = HAL_LOCKED;\n    uart->ErrorCode = 0;\n    uart->gState = HAL_UART_STATE_BUSY_TX;\n    startTick = HAL_GetTick();\n    uart->TxXferSize = size;\n    uart->TxXferCount = size;\n    while (uart->TxXferCount != 0) {\n        uart->TxXferCount--;\n        if (uart->Init.WordLength == UART_WORDLENGTH_9B) {\n            do {\n                if ((uart->Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE) {\n                    errorCode = 0;\n                    goto endTx;\n                }\n                currentTick = HAL_GetTick();\n            } while ((timeout == HAL_MAX_DELAY) || ((timeout != 0) && (currentTick - startTick <= timeout)));\n        }\n        else {\n            do {\n                if ((uart->Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE) {\n                    errorCode = 0;\n                    goto endTx;\n                }\n                currentTick = HAL_GetTick();\n            } while ((timeout == HAL_MAX_DELAY) || ((timeout != 0) && (currentTick - startTick <= timeout)));\n        }\n        uart->Instance->DR = *data16 & UART_DR_DATA_Msk;\n        if (uart->Init.Parity == UART_PARITY_NONE) {\n            data16++;\n        }\n        else {\n            data16 = (uint16_t *)((uint8_t *)data16 + 1);\n        }\n    }\n    do {\n        if ((uart->Instance->SR & UART_FLAG_TC) == UART_FLAG_TC) {\n            errorCode = 0;\n            goto endTx;\n        }\n        currentTick = HAL_GetTick();\n    } while ((timeout == HAL_MAX_DELAY) || ((timeout != 0) && (currentTick - startTick <= timeout)));\n    endTx:\n    if (errorCode == 0) {\n        uart->gState = HAL_UART_STATE_READY;\n        uart->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n    }\n    else {\n        uart->gState = HAL_UART_STATE_READY;\n        uart->RxState = HAL_UART_STATE_READY;\n        uart->Lock = HAL_UNLOCKED;\n        status = HAL_TIMEOUT;\n    }\n    return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "uart_print"
            ],
            "imported": false,
            "current_name": "transmitData_08004436"
        },
        "FUN_08009e50": {
            "renaming": {
                "FUN_08009e50": "copy_data_to_memory_08009e50",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "*param_2": "*source",
                "*param_1": "*destination"
            },
            "code": "undefined* copy_data_to_memory_08009e50(uint8_t* destination, const uint8_t* source, uint32_t size)\n{\n    if (source != NULL)\n    {\n        if (size < 0x100)\n        {\n            *destination = (char)size;\n            destination = destination + 1;\n        }\n        else\n        {\n            destination = NULL;\n        }\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e50",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_to_memory_08009e50"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "read_data_from_i2c_08004ee8",
                "addr": "device_address",
                "reg": "register_address",
                "*data": "data_buffer",
                "len": "data_length"
            },
            "code": "void read_data_from_i2c_08004ee8(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length){\n  HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_08004f28, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004f24);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "read_data_from_i2c_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "array1_ptr",
                "iVar3": "array2_length",
                "puVar4": "array2_ptr"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int length) {\n  int difference = *(array1 + 4) - *(array2 + 4);\n  if (difference == 0) {\n    uint *array1_ptr = (uint *)(array1 + 5 + *(array2 + 4) * 4);\n    uint *array2_ptr = (uint *)(array2 + 5) + *(array2 + 4);\n    do {\n      array2_ptr = array2_ptr - 1;\n      array1_ptr = array1_ptr - 1;\n      if (*array2_ptr != *array1_ptr) {\n        if (*array1_ptr <= *array2_ptr) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 5) < array2_ptr);\n  }\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "_dtoa_r",
                "quorem"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "check_if_char_not_null_08000998",
                "in_ZR": "input_char"
            },
            "code": "bool check_if_char_not_null_08000998(char input_char) {\n    __aeabi_cdcmpeq();\n    return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "check_if_char_not_null_08000998"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "compare_floats_08000fc8",
                "param_1": "first_float",
                "param_2": "second_float"
            },
            "code": "void compare_floats_08000fc8(float first_float, float second_float)\n{\n    __aeabi_cfcmpeq(second_float, first_float);\n    return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_floats_08000fc8"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "set_timer_output_compare_08003908",
                "*htim": "timer_handle",
                "*sConfig": "output_config",
                "HVar1": "status",
                "Channel": "channel"
            },
            "code": "HAL_StatusTypeDef set_timer_output_compare_08003908(TIM_HandleTypeDef *timer_handle, TIM_OC_InitTypeDef *output_config, uint32_t channel)\n{\n  HAL_StatusTypeDef status;\n\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_handle->Instance, output_config);\n      timer_handle->Instance->CCMR1 |= 0x8;\n      timer_handle->Instance->CCMR1 &= 0xfffffffb;\n      timer_handle->Instance->CCMR1 = output_config->OCFastMode | timer_handle->Instance->CCMR1;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer_handle->Instance, output_config);\n      timer_handle->Instance->CCMR1 |= 0x800;\n      timer_handle->Instance->CCMR1 &= 0xfffffbff;\n      timer_handle->Instance->CCMR1 = output_config->OCFastMode << 8 | timer_handle->Instance->CCMR1;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_handle->Instance, output_config);\n      timer_handle->Instance->CCMR2 |= 0x8;\n      timer_handle->Instance->CCMR2 &= 0xfffffffb;\n      timer_handle->Instance->CCMR2 = output_config->OCFastMode | timer_handle->Instance->CCMR2;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer_handle->Instance, output_config);\n      timer_handle->Instance->CCMR2 |= 0x800;\n      timer_handle->Instance->CCMR2 &= 0xfffffbff;\n      timer_handle->Instance->CCMR2 = output_config->OCFastMode << 8 | timer_handle->Instance->CCMR2;\n    }\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC1_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clear_string_buffer_08004f60",
                "PTR_strbuf_08004f74": "string_buffer",
                "0x40": "BUFFER_SIZE"
            },
            "code": "void clear_string_buffer_08004f60(void)\n{\n  memset(PTR_strbuf_08004f74, 0, BUFFER_SIZE);\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "clear_string_buffer_08004f60"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "do_nothing_080056f8"
            },
            "code": "\nvoid do_nothing_080056f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056f8"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_valid_input_08001170(uint input_1, int input_2, uint input_3, int input_4) {\n    int is_input_2_valid = ((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0);\n    int is_input_4_valid = ((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0));\n    if (is_input_2_valid && is_input_4_valid) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_080056ec": {
            "renaming": {
                "FUN_080056ec": "do_nothing_080056ec"
            },
            "code": "\nvoid do_nothing_080056ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ec",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056ec"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "checkI2CStatus_08002ad8",
                "*hi2c": "*handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "uVar1": "status",
                "cVar2": "isFlagSet",
                "uVar3": "status",
                "bVar4": "isFlagSet"
            },
            "code": "HAL_StatusTypeDef checkI2CStatus_08002ad8(I2C_HandleTypeDef *handle, uint32_t flag, uint32_t timeout, uint32_t tickstart)\n{\n  uint32_t status;\n  bool isFlagSet;\n  do {\n    if ((flag >> 16 & 0xff) == 1) {\n      status = flag & ~handle->Instance->SR1 & 0xffff;\n      isFlagSet = status != 0;\n      if (isFlagSet) {\n        status = 1;\n      }\n    }\n    else {\n      status = flag & ~handle->Instance->SR2 & 0xffff;\n      isFlagSet = status != 0;\n      if (isFlagSet) {\n        status = 1;\n      }\n    }\n    if (!isFlagSet) {\n      return HAL_OK;\n    }\n    if ((handle->Instance->SR1 & 0x400) == 0x400) {\n      handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n      handle->Instance->SR1 = 0xfffffbff;\n      handle->ErrorCode = 4;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - tickstart <= timeout))));\n  handle->PreviousState = 0;\n  handle->State = HAL_I2C_STATE_READY;\n  handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "compare_and_concatenate_08000fd0",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "code": "float32_t compare_and_concatenate_08000fd0(float32_t param_1, float32_t param_2) {\n    __cmpsf2();\n    return CONCAT44(param_2, param_1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "configure_timer_08003d60",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "oc_mode",
                "uVar2": "ccer_mask",
                "tmpccmrx": "timer_ccmr",
                "tmpcr2": "timer_cr2",
                "tmpccer": "timer_ccer",
                "DAT_08003e34": "PTR_08003e34"
            },
            "code": "void configure_timer_08003d60(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n    uint32_t oc_polarity_mask = 0xfffffffd;\n    uint32_t timer_ccer = timer->CCER & ~1;\n    uint32_t timer_cr2 = timer->CR2;\n    uint32_t timer_ccmr1 = timer->CCMR1 & 0xffffff8c;\n\n    if (timer == DAT_08003e34) {\n        oc_polarity_mask &= 0xfffffff7;\n        timer_cr2 &= 0xfffffcff;\n        timer_cr2 |= output_channel_config->OCNIdleState | output_channel_config->OCIdleState;\n        timer_ccer |= output_channel_config->OCNPolarity;\n    }\n\n    timer_ccer |= output_channel_config->OCPolarity & oc_polarity_mask;\n    timer_ccer |= output_channel_config->OCMode;\n    timer_ccer |= output_channel_config->OCNPolarity & ~oc_polarity_mask;\n    timer_ccer &= 0xfffffffb;\n\n    timer_ccmr1 |= output_channel_config->OCMode;\n    timer->CCR1 = output_channel_config->Pulse;\n\n    timer->CCER = timer_ccer;\n    timer->CR2 = timer_cr2;\n    timer->CCMR1 = timer_ccmr1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "get_context_pointer_08009e68",
                "ctx": "context_pointer"
            },
            "code": "int get_context_pointer_08009e68(EVP_PKEY_CTX *context_pointer) {\n  return (int)context_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux",
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "get_context_pointer_08009e68"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_irq_priority_08001618",
                "IRQn": "irq",
                "priority": "priority",
                "WWDG_IRQn": "WWDG_IRQn",
                "DAT_08001664": "IRQ_PRIORITY_BASE_OFFSET",
                "DAT_08001668": "IRQ_PRIORITY_OFFSET"
            },
            "code": "void set_irq_priority_08001618(IRQn_Type irq, uint32_t priority)\n{\n  if (irq < WWDG_IRQn) {\n    uint32_t offset = ((byte)irq & 0xf) + DAT_08001664;\n    uint8_t value = (uint8_t)((priority & 0xff) << 4);\n    *(volatile uint8_t *)(offset) = value;\n  }\n  else {\n    uint32_t offset = irq + DAT_08001668;\n    uint8_t value = (uint8_t)((priority & 0xff) << 4);\n    *(volatile uint8_t *)(offset) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "set_irq_priority_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "countLeadingZeros_080091a4",
                "param_1": "num",
                "iVar1": "count"
            },
            "code": "int countLeadingZeros_080091a4(uint32_t num) {\n  int count = 0;\n  if ((num & 0xffff0000) == 0) {\n    num <<= 16;\n    count = 16;\n  }\n  if ((num & 0xff000000) == 0) {\n    num <<= 8;\n    count += 8;\n  }\n  if ((num & 0xf0000000) == 0) {\n    num <<= 4;\n    count += 4;\n  }\n  if ((num & 0xc0000000) == 0) {\n    num <<= 2;\n    count += 2;\n  }\n  if (num < 0) {\n    return count + 1;\n  }\n  return 32 - count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "_dtoa_r",
                "__d2b"
            ],
            "imported": false,
            "current_name": "countLeadingZeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "control_motor_speed_08004f78",
                "*htim": "*timer",
                "len": "str_len",
                "uVar1": "error",
                "iVar2": "comparison_result",
                "uVar3": "unused_variable",
                "uVar4": "kd",
                "uVar5": "pitch_angle",
                "pid_pwm": "proportional_term",
                "out_pwm": "output_pwm",
                "mpu6050_update": "update_mpu6050",
                "mpu6050_calc_pitch": "calculate_pitch",
                "flush_strbuf": "flush_string_buffer",
                "sprintf": "format_string",
                "PTR_mpu6050_080051e0": "mpu6050",
                "PTR_pitch_080051e4": "pitch_angle_ptr",
                "PTR_strbuf_080051ec": "string_buffer",
                "PTR_s_Pitch___f_080051e8": "format_pitch_string",
                "PTR_setpoint_080051f0": "set_point",
                "PTR_error_080051f4": "error_ptr",
                "PTR_Kp_080051f8": "kp",
                "PTR_Ki_08005200": "ki",
                "PTR_I_08005204": "integral_term",
                "PTR_maxPwm_08005208": "max_pwm",
                "PTR_minPwm_0800520c": "min_pwm",
                "PTR_Kd_08005210": "kd",
                "PTR_lastError_08005214": "last_error",
                "PTR_D_08005218": "derivative_term",
                "HAL_GPIO_WritePin": "write_pin",
                "DAT_0800521c": "gpio_pin",
                "*PTR_htim1_08005220": "timer_address"
            },
            "code": "void control_motor_speed_08004f78(TIM_HandleTypeDef *timer)\n{\n    size_t str_len;\n    float pitch_angle, error, proportional_term, PTR_I_08005204, PTR_D_08005218, control_signal;\n    uint8_t output_pwm;\n    PTR_mpu6050_080051e0_update(&PTR_mpu6050_080051e0);\n    PTR_mpu6050_080051e0_calc_pitch(&PTR_mpu6050_080051e0, &pitch_angle);\n    flush_PTR_strbuf_080051ec();\n    str_len = strlen(PTR_strbuf_080051ec);\n    uart_print(PTR_strbuf_080051ec, str_len);\n    error = PTR_setpoint_080051f0 - pitch_angle;\n    proportional_term = PTR_Kp_080051f8 * error;\n    PTR_I_08005204 = PTR_Ki_08005200 * error + PTR_I_08005204;\n    if (PTR_I_08005204 > PTR_maxPwm_08005208)\n    {\n        PTR_I_08005204 = PTR_maxPwm_08005208;\n    }\n    else if (PTR_I_08005204 < PTR_minPwm_0800520c)\n    {\n        PTR_I_08005204 = PTR_minPwm_0800520c;\n    }\n    PTR_D_08005218 = PTR_Kd_08005210 * (error - PTR_lastError_08005214);\n    control_signal = proportional_term + PTR_I_08005204 + PTR_D_08005218;\n    if (control_signal > PTR_maxPwm_08005208)\n    {\n        output_pwm = PTR_maxPwm_08005208;\n    }\n    else if (control_signal < PTR_minPwm_0800520c)\n    {\n        output_pwm = PTR_minPwm_0800520c;\n    }\n    else\n    {\n        output_pwm = (uint8_t)control_signal;\n    }\n    PTR_lastError_08005214 = error;\n    HAL_GPIO_WritePin(DAT_0800521c, 2, error > 0);\n    HAL_GPIO_WritePin(DAT_0800521c, 4, error <= 0);\n    HAL_GPIO_WritePin(DAT_0800521c, 8, error > 0);\n    HAL_GPIO_WritePin(DAT_0800521c, 0x10, error <= 0);\n    *(uint *)(*(int *)timer + 0x34) = (uint)output_pwm;\n    *(uint *)(*(int *)timer + 0x40) = (uint)output_pwm;\n    return;\n}",
            "called": [
                "sprintf",
                "__aeabi_fcmplt",
                "uart_print",
                "strlen",
                "HAL_GPIO_WritePin",
                "mpu6050_update",
                "__fixunssfsi",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__aeabi_fmul",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "flush_strbuf",
                "mpu6050_calc_pitch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "HAL_TIM_IRQHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "control_motor_speed_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_uwTick_value_080015a0",
                "PTR_uwTick_080015b0": "PTR_uwTick_080015b0"
            },
            "code": "uint32_t get_uwTick_value_080015a0(void)\n{\n  uint32_t* uwTick_ptr = (uint32_t*) PTR_uwTick_080015b0;\n  uint32_t uwTick_value = *uwTick_ptr;\n  return uwTick_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "HAL_I2C_Mem_Read",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "_get_ms_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nHAL_StatusTypeDef FUNC_08002d98(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  HAL_StatusTypeDef HVar3;\n  bool bVar4;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  FlagStatus pwrclkchanged;\n  \n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08003000 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003004 = 0;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[9] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        uVar2 = HAL_GetTick();\n        if (100 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if ((RCC_OscInitStruct->PLL).PLLState == 0) {\nLAB_0800324a:\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if ((RCC_OscInitStruct->PLL).PLLState == 2) {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003254[1] = RCC_OscInitStruct->HSEPredivValue | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] =\n             (RCC_OscInitStruct->PLL).PLLMUL | (RCC_OscInitStruct->PLL).PLLSource |\n             DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (2 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "set_IRQ_priority_0800172a",
                "IRQn": "IRQ_number",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "priority_group",
                "prioritygroup": "priority_encoding"
            },
            "code": "void set_IRQ_priority_0800172a(IRQn_Type IRQn, uint32_t preempt_priority, uint32_t sub_priority)\n{\n  uint32_t priority_group;\n  uint32_t priority_encoding;\n  priority_group = NVIC_GetPriorityGrouping();\n  priority_encoding = NVIC_EncodePriority(priority_group, preempt_priority, sub_priority);\n  NVIC_SetPriority(IRQn, priority_encoding);\n  return;\n}",
            "called": [
                "NVIC_GetPriorityGrouping",
                "NVIC_SetPriority",
                "NVIC_EncodePriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_IRQ_priority_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "is_less_than_or_equal_to_zero_080009d4",
                "in_ZR": "is_zero",
                "in_CY": "is_less",
                "__aeabi_cdrcmple()": "compare_floats()"
            },
            "code": "bool is_less_than_or_equal_to_zero_080009d4(float num) {\n  bool is_less = __aeabi_cdrcmple(num, 0.0);\n  return !is_less || num == 0.0;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "is_less_than_or_equal_to_zero_080009d4"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_08009744(int *error_code, int size)\n{\n    undefined *errno_ptr;\n    caddr_t memory_ptr;\n    errno_ptr = PTR_errno_08009764;\n    *(undefined4 *)PTR_errno_08009764 = 0;\n    memory_ptr = _sbrk(size);\n    if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "initializeTimer_08003640",
                "*htim": "*timer",
                "HVar1": "status",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "htim->Instance": "timer->Instance",
                "htim->Init": "timer->Init",
                "htim->Lock": "timer->Lock",
                "HAL_TIM_PWM_MspInit": "HAL_TIM_PWM_MspInit"
            },
            "code": "HAL_StatusTypeDef initializeTimer_08003640(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  if (timer == NULL)\n  {\n    status = HAL_ERROR;\n  }\n  else\n  {\n    if (timer->State == HAL_TIM_STATE_RESET)\n    {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance, &(timer->Init));\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initializeTimer_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_08009980",
                "param_1": "param_size",
                "param_2": "num_elements",
                "param_3": "element_size",
                "__s": "allocated_memory",
                "__n": "header_size",
                "puVar1": "header_end"
            },
            "code": "allocate_memory_08009980(param_size, num_elements * element_size) {\n    void* allocated_memory;\n    size_t total_size = num_elements * element_size;\n    allocated_memory = malloc(total_size);\n    if (allocated_memory == NULL) {\n        return NULL;\n    }\n    size_t header_size = ((size_t*)allocated_memory)[-1] & 0xfffffffc;\n    if (header_size < 0x25) {\n        memset(allocated_memory, 0, header_size);\n    }\n    return allocated_memory;\n}\n",
            "called": [
                "_malloc_r",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "_Balloc"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  undefined *puVar2;\n  int **ppiVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  byte *pbVar9;\n  char cVar10;\n  byte bVar11;\n  int *piVar12;\n  int **ppiVar13;\n  undefined uVar14;\n  ushort uVar15;\n  int *__s;\n  int **ppiVar16;\n  byte **ppbVar17;\n  int *piVar18;\n  int *piVar19;\n  int **ppiVar20;\n  char *pcVar21;\n  uint uVar22;\n  byte *pbVar23;\n  int *piVar24;\n  uint uVar25;\n  uint uVar26;\n  int *piVar27;\n  int *piVar28;\n  byte *pbVar29;\n  bool bVar30;\n  longlong lVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_fffffe78;\n  int *in_stack_fffffe7c;\n  int *local_168;\n  byte *local_164;\n  int *local_15c;\n  int *local_158;\n  int **local_154;\n  int *local_150;\n  int *local_148;\n  int *local_144;\n  uint local_140;\n  int *local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  int *local_12c;\n  int *local_128;\n  undefined *local_11c;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0 [2];\n  undefined4 local_e8;\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int local_d4;\n  byte *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  ppiVar3 = (int **)_localeconv_r();\n  __s = *ppiVar3;\n  piVar4 = (int *)strlen((char *)__s);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar5 = _malloc_r(param_1,0x40);\n    *param_2 = iVar5;\n    param_2[4] = iVar5;\n    if (iVar5 == 0) {\n      *param_1 = 0xc;\n      return (byte *)0xffffffff;\n    }\n    param_2[5] = 0x40;\n  }\n  local_128 = (int *)0x0;\n  local_138 = (int *)0x0;\n  local_12c = (int *)0x0;\n  local_d4 = 0;\n  local_d0 = (byte *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  ppiVar3 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar3;\n  local_154 = param_4;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = local_d4 + 1;\n        local_d0 = (byte *)((int)local_d0 + (int)piVar27);\n        *ppiVar3 = param_3;\n        *(int **)((int)ppiVar3 + 4) = piVar27;\n        if (local_d4 < 8) {\n          ppiVar3 = (int **)((int)ppiVar3 + 8);\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800604a;\n          ppiVar3 = local_cc;\n        }\n        local_164 = (byte *)((int)local_164 + (int)piVar27);\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    uVar26 = 0;\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    local_158 = piVar27;\n    local_168 = piVar27;\n    switch(uVar25) {\n    case 0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (uVar25 == 0) goto LAB_08006216;\n      piVar18 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int *)0x1;\n      param_3 = (int *)&local_8c;\n      local_144 = piVar18;\n      local_8c = (char)uVar25;\n      goto LAB_08006298;\n    case 0x23:\n      uVar26 = uVar26 | 1;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x27:\n      iVar5 = _localeconv_r(param_1);\n      local_110 = *(int **)(iVar5 + 4);\n      local_104 = (int *)strlen((char *)local_110);\n      iVar5 = _localeconv_r(param_1);\n      local_108 = *(byte **)(iVar5 + 8);\n      if (local_104 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      uVar25 = (uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        uVar26 = uVar26 | 0x400;\n      }\n      goto LAB_08005f4a;\n    case 0x2a:\n      uVar25 = (uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case 0x2b:\n      local_f5 = 0x2b;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x2d:\n      uVar25 = (uint)*(byte *)piVar28;\nLAB_08006602:\n      uVar26 = uVar26 | 4;\n      goto LAB_08005f4a;\n    case 0x2e:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x2a) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (uVar25 - 0x30 < 10) {\n        piVar27 = (int *)((uVar25 - 0x30) + (int)piVar27 * 10);\n        uVar25 = (uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case 0x30:\n      uVar26 = uVar26 | 0x80;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_08005f58_caseD_31;\n    case 0x41:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x61:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n      local_154 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      local_128 = *local_154;\n      local_12c = local_154[1];\n      local_154 = local_154 + 2;\n      iVar5 = __unorddf2(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724);\n      if ((iVar5 == 0) &&\n         (iVar5 = __aeabi_dcmple(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724),\n         iVar5 == 0)) {\n        iVar5 = __aeabi_dcmplt(local_128,local_12c,0,0);\n        param_3 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar5 == 0) {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (uVar25 < 0x48) {\n          param_3 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        local_158 = (int *)0x3;\n        local_13c = (int *)0x0;\n        local_140 = uVar26 & 0xffffff7f;\n        local_144 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      local_148 = (int *)__unorddf2(local_128,local_12c,local_128,local_12c);\n      if (local_148 != (int *)0x0) {\n        param_3 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar18 = local_12c;\n      piVar24 = piVar27;\n      if (uVar25 == 0x61) {\n        uVar14 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar14,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = uVar26 | 0x102;\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          uVar26 = uVar26 | 2;\n        }\n        else {\n          param_3 = (int *)_malloc_r(param_1,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar15 = *(ushort *)(param_2 + 3) | 0x40;\n            *(ushort *)(param_2 + 3) = uVar15;\n            goto LAB_0800604e;\n          }\n          local_140 = uVar26 | 0x102;\n          uVar26 = uVar26 | 2;\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar24;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          piVar18 = local_12c + -0x20000000;\n          piVar24 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n        }\n        if (uVar25 == 0x61) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 != 0) {\n            local_f0[0] = (int *)0x1;\n          }\n          local_158 = (int *)PTR_s_0123456789abcdef_08007888;\n          local_138 = param_3;\n          piVar27 = piVar24;\n          goto LAB_080072ba;\n        }\n        if (uVar25 == 0x41) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 == 0) {\n            local_158 = (int *)PTR_s_0123456789ABCDEF_0800739c;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          else {\n            local_f0[0] = (int *)0x1;\n            local_158 = (int *)PTR_s_0123456789ABCDEF_08007894;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (uVar25 == 0x41) {\n          uVar14 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = uVar26 | 0x100;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar24 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if ((uVar25 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar24 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        local_144 = local_148;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)(uVar25 & 0xffffffdf);\n      in_stack_fffffe7c = piVar24;\n      local_150 = piVar24;\n      if (uVar25 == 0x66) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        piVar27 = (int *)((int)param_3 + (int)piVar24);\nLAB_0800764c:\n        if ((*(byte *)param_3 == 0x30) &&\n           (iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0), iVar5 == 0)) {\n          local_f0[0] = (int *)(1 - (int)local_150);\n        }\n        piVar27 = (int *)((int)piVar27 + (int)local_f0[0]);\n      }\n      else if (uVar25 == 0x46) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\nLAB_08007760:\n        piVar27 = (int *)((int)param_3 + (int)local_150);\n        if (uVar25 == 0x46) goto LAB_0800764c;\n      }\n      else {\n        if (local_168 == (int *)0x45) {\n          local_150 = (int *)((int)piVar24 + 1);\n        }\n        in_stack_fffffe78 = 2;\n        in_stack_fffffe7c = local_150;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        local_138 = local_e0;\n        if (uVar25 == 0x67) {\n          if ((uVar26 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (uVar25 == 0x47) {\n          if ((uVar26 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar27 = (int *)((int)local_150 + (int)param_3);\n      }\n      iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0);\n      local_138 = piVar27;\n      if (iVar5 == 0) {\n        for (; local_138 = local_e0, local_e0 < piVar27; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)local_138 - (int)param_3);\n      goto LAB_08006cb0;\n    case 0x43:\n    case 99:\n      piVar18 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_144 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int *)0x1;\n      local_8c = SUB41(piVar27,0);\n      param_3 = (int *)&local_8c;\n      goto LAB_08006298;\n    case 0x44:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bcc:\n        piVar18 = *local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(int)*(short *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bcc;\n        piVar18 = (int *)(int)*(char *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      goto LAB_08006102;\n    case 0x4c:\n      uVar26 = uVar26 | 8;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x4f:\n      uVar26 = uVar26 | 0x10;\n    case 0x6f:\n      if ((uVar26 & 0x20) == 0) {\n        ppiVar16 = local_154 + 1;\n        if ((uVar26 & 0x10) == 0) {\n          if ((uVar26 & 0x40) == 0) {\n            if ((uVar26 & 0x200) == 0) goto LAB_08006be2;\n            piVar18 = (int *)(uint)*(byte *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n          else {\n            piVar18 = (int *)(uint)*(ushort *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar18 = *local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\n        ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar18 = *ppiVar16;\n        piVar24 = ppiVar16[1];\n        local_154 = ppiVar16 + 2;\n      }\n      iVar5 = 0;\n      uVar26 = uVar26 & 0xfffffbff;\n      break;\n    case 0x53:\n    case 0x73:\n      local_f5 = 0;\n      local_144 = *local_154;\n      local_154 = local_154 + 1;\n      local_140 = uVar26;\n      if (local_144 == (int *)0x0) {\n        piVar18 = local_144;\n        param_3 = (int *)PTR_s__null__08007084;\n        local_148 = local_144;\n        local_13c = local_144;\n        local_134 = local_144;\n        local_130 = local_144;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int *)0x6;\n          local_168 = local_158;\n        }\n        goto LAB_08006538;\n      }\n      param_3 = local_144;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int *)strlen((char *)local_144);\n      }\n      else {\n        local_148 = (int *)memchr(local_144,0,(size_t)piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar18 = (int *)(uint)local_f5;\n          local_144 = local_148;\n          local_13c = local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int *)((int)local_148 - (int)local_144);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar18 = (int *)(uint)local_f5;\n      local_144 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      goto LAB_08006538;\n    case 0x55:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bf2:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(uint)*(ushort *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bf2;\n        piVar18 = (int *)(uint)*(byte *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      break;\n    case 0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if ((uVar26 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar16 = local_154 + 1;\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) == 0) {\n          if ((uVar26 & 0x200) == 0) goto LAB_08006bbc;\n          piVar18 = (int *)(uint)*(byte *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n        else {\n          piVar18 = (int *)(uint)*(ushort *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        local_154 = ppiVar16;\n      }\n      goto LAB_080061be;\n    case 100:\n    case 0x69:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_08006102:\n      if ((int)piVar24 < 0) {\n        bVar30 = piVar18 != (int *)0x0;\n        piVar18 = (int *)-(int)piVar18;\n        piVar24 = (int *)(-(int)piVar24 - (uint)bVar30);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar5 = 1;\n        iVar6 = 1;\n        local_140 = uVar26 & 0xffffff7f;\n        if (((uint)piVar18 | (uint)piVar24) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      local_140 = uVar26;\n      if (piVar24 != (int *)0x0 || (int *)0x9 < piVar18) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case 0x68:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x68) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        uVar26 = uVar26 | 0x200;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        uVar26 = uVar26 | 0x40;\n      }\n      goto LAB_08005f4a;\n    case 0x6a:\n    case 0x71:\n      uVar26 = uVar26 | 0x20;\n    case 0x74:\n    case 0x7a:\nswitchD_08005f58_caseD_74:\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case 0x6e:\n      ppiVar16 = local_154 + 1;\n      ppbVar17 = (byte **)*local_154;\n      local_154 = ppiVar16;\n      if ((uVar26 & 0x20) != 0) {\n        *ppbVar17 = local_164;\n        ppbVar17[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) != 0) {\n          *(short *)ppbVar17 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if ((uVar26 & 0x200) != 0) {\n          *(char *)ppbVar17 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar17 = local_164;\n      goto LAB_0800620e;\n    case 0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar18 = *local_154;\n      uVar26 = uVar26 | 2;\n      piVar24 = (int *)0x0;\n      iVar5 = 2;\n      uVar25 = 0x78;\n      local_154 = local_154 + 1;\n      break;\n    case 0x75:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      iVar5 = 1;\n      local_154 = ppiVar16 + 2;\n      break;\n    case 0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if ((uVar26 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_080061be:\n      if (((uVar26 & 1) != 0) && (((uint)piVar18 | (uint)piVar24) != 0)) {\n        uVar26 = uVar26 | 2;\n        local_f4 = CONCAT11((char)uVar25,0x30);\n      }\n      iVar5 = 2;\n      uVar26 = uVar26 & 0xfffffbff;\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      local_140 = uVar26;\n      if (iVar5 != 1) goto LAB_08006136;\nLAB_08006980:\n      local_140 = uVar26;\n      if (piVar24 == (int *)0x0 && piVar18 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar31 = CONCAT44(piVar24,piVar18);\n      local_138 = (int *)0x0;\n      param_3 = (int *)(&bStack_2a + 2);\n      do {\n        iVar5 = (int)((ulonglong)lVar31 >> 0x20);\n        uVar26 = (uint)lVar31;\n        cVar10 = '\\n';\n        __aeabi_uldivmod(uVar26,iVar5,10,0);\n        *(byte *)((int)param_3 + -1) = cVar10 + 0x30;\n        local_138 = (int *)((int)local_138 + 1);\n        param_3 = (int *)((int)param_3 + -1);\n        if (((((local_140 & 0x400) != 0) && (local_138 == (int *)(uint)*local_108)) &&\n            (local_138 != (int *)0xff)) && (iVar5 != 0 || 9 < uVar26)) {\n          param_3 = (int *)((int)param_3 - (int)local_104);\n          strncpy((char *)param_3,(char *)local_110,(size_t)local_104);\n          local_138 = (int *)(uint)local_108[1];\n          if (local_138 != (int *)0x0) {\n            local_108 = local_108 + 1;\n            local_138 = (int *)0x0;\n          }\n        }\n        lVar31 = __aeabi_uldivmod(uVar26,iVar5,10,0);\n      } while (lVar31 != 0);\n      local_158 = (int *)((int)(&bStack_2a + 2) - (int)param_3);\n    }\n    else {\n      local_140 = uVar26 & 0xffffff7f;\n      iVar6 = iVar5;\n      if (((uint)piVar18 | (uint)piVar24) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar5 == 0) {\n            local_158 = (int *)(uVar26 & 1);\n            if (local_158 == (int *)0x0) {\n              param_3 = (int *)(&bStack_2a + 2);\n            }\n            else {\n              param_3 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n            }\n          }\n          else {\n            param_3 = (int *)(&bStack_2a + 2);\n          }\n        }\n        else {\n          if (iVar5 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar18 + '0';\n          param_3 = (int *)(&bStack_2a + 1);\n          local_158 = (int *)0x1;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar5 = iVar6;\n        uVar26 = local_140;\n        if (iVar6 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar5 == 2) {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = (int *)((uint)piVar18 >> 4 | (int)piVar24 << 0x1c);\n            piVar24 = (int *)((uint)piVar24 >> 4);\n            param_3 = (int *)((int)param_3 + -1);\n            *(undefined *)param_3 = local_11c[(uint)piVar18 & 0xf];\n            piVar18 = piVar19;\n          } while (((uint)piVar19 | (uint)piVar24) != 0);\n        }\n        else {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = param_3;\n            piVar12 = (int *)((uint)piVar18 >> 3 | (int)piVar24 << 0x1d);\n            piVar24 = (int *)((uint)piVar24 >> 3);\n            iVar5 = ((uint)piVar18 & 7) + 0x30;\n            *(byte *)((int)piVar19 + -1) = (byte)iVar5;\n            param_3 = (int *)((int)piVar19 + -1);\n            piVar18 = piVar12;\n          } while (((uint)piVar12 | (uint)piVar24) != 0);\n          if (((local_140 & 1) != 0) && (iVar5 != 0x30)) {\n            param_3 = (int *)((int)piVar19 + -2);\n            local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n            *(byte *)((int)piVar19 + -2) = 0x30;\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar18 = (int *)(uint)local_f5;\n    local_144 = piVar27;\n    local_168 = local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  if (local_d0 == (byte *)0x0) {\nLAB_0800604a:\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\n  else {\n    __ssprint_r(param_1,param_2,&local_d8);\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\nLAB_0800604e:\n  if ((uVar15 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (uVar25 == 0x6c) {\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    uVar26 = uVar26 | 0x20;\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    uVar26 = uVar26 | 0x10;\n  }\n  goto LAB_08005f4a;\n  while (iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0), iVar6 == 0) {\nLAB_080072ba:\n    piVar18 = piVar27;\n    piVar19 = local_138;\n    piVar27 = (int *)((int)piVar18 + -1);\n    uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_080073a0);\n    iVar5 = __aeabi_d2iz();\n    uVar33 = __aeabi_i2d();\n    uVar32 = __subdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),(int)uVar33,\n                      (int)((ulonglong)uVar33 >> 0x20));\n    uVar8 = (undefined4)((ulonglong)uVar32 >> 0x20);\n    uVar7 = (undefined4)uVar32;\n    local_138 = (int *)((int)piVar19 + 1);\n    *(byte *)piVar19 = *(byte *)((int)local_158 + iVar5);\n    if (piVar27 == (int *)0xffffffff) break;\n  }\n  iVar6 = __aeabi_dcmpgt(uVar7,uVar8,0,DAT_080073a4);\n  if ((iVar6 == 0) &&\n     ((iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,DAT_080073a4), iVar6 == 0 || (-1 < iVar5 << 0x1f)))) {\n    if (-1 < (int)piVar27) {\n      piVar18 = (int *)((int)piVar18 + (int)local_138);\n      piVar27 = local_138;\n      do {\n        local_138 = (int *)((int)piVar27 + 1);\n        *(byte *)piVar27 = 0x30;\n        piVar27 = local_138;\n      } while (piVar18 != local_138);\n    }\n  }\n  else {\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar11 = *(byte *)piVar19;\n    piVar27 = local_138;\n    local_e0 = piVar19;\n    while (bVar1 == bVar11) {\n      *(byte *)((int)piVar27 + -1) = 0x30;\n      bVar11 = *(byte *)((int)local_e0 + -1);\n      piVar27 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar11 == 0x39) {\n      bVar11 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar11 = bVar11 + 1;\n    }\n    *(byte *)((int)piVar27 + -1) = bVar11;\n  }\n  local_138 = (int *)((int)local_138 - (int)param_3);\nLAB_08006cb0:\n  local_168 = (int *)(uVar25 & 0xffffffdf);\n  local_134 = local_f0[0];\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0[0] + 3) < 0 == SCARRY4((int)local_f0[0],3)) &&\n       ((int)local_f0[0] <= (int)piVar24)) {\n      if ((int)local_f0[0] < (int)local_138) {\n        local_158 = (int *)((int)local_138 + (int)piVar4);\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int *)((int)local_158 + (1 - (int)local_f0[0]));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        uVar25 = 0x67;\n      }\n      else {\n        if ((int)(uVar26 << 0x1f) < 0) {\n          local_158 = (int *)((int)local_f0[0] + (int)piVar4);\n        }\n        else {\n          local_158 = local_f0[0];\n        }\n        if (-1 < (int)(uVar26 << 0x15)) {\n          uVar25 = 0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074fc;\n        }\n        uVar25 = 0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    uVar25 = uVar25 - 2;\n    local_168 = (int *)(uVar25 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8._0_1_ = (char)uVar25;\n    if (local_168 == (int *)0x41) {\n      local_e8._0_1_ = (char)local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0[0] + -1);\n    if ((int)piVar27 < 0) {\n      local_e8._1_1_ = 0x2d;\n      local_f0[0] = (int *)(1 - (int)local_f0[0]);\n    }\n    else {\n      local_e8._1_1_ = 0x2b;\n      local_f0[0] = piVar27;\n    }\n    if ((int)local_f0[0] < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e8._2_1_ = 0x30;\n        pcVar21 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar21 = (char)local_f0[0] + '0';\n      pcVar21 = pcVar21 + 1;\n    }\n    else {\n      pbVar29 = abStack_dc + 3;\n      pbVar23 = pbVar29;\n      do {\n        pbVar9 = pbVar23;\n        piVar18 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0[0]) >> 0x23);\n        pbVar9[-1] = (char)local_f0[0] + (char)piVar18 * -10 + 0x30;\n        pbVar23 = pbVar9 + -1;\n        local_f0[0] = piVar18;\n      } while ((int *)0x9 < piVar18);\n      uVar22 = (uint)(piVar18 + 0xc) & 0xff;\n      pbVar9[-2] = (byte)uVar22;\n      if (pbVar9 + -2 < pbVar29) {\n        pbVar9 = pbVar23;\n        pcVar21 = (char *)((int)&local_e8 + 2);\n        while( true ) {\n          *pcVar21 = (char)uVar22;\n          if (pbVar29 == pbVar9) break;\n          uVar22 = (uint)*pbVar9;\n          pbVar9 = pbVar9 + 1;\n          pcVar21 = pcVar21 + 1;\n        }\n        pcVar21 = (char *)(((int)&stack0xfffffe78 * 2 - (int)pbVar23) + 0x152);\n      }\n      else {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar21 + -(int)&local_e8);\n    local_158 = (int *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)(uVar26 << 0x1f) < 0)) {\n      local_158 = (int *)((int)local_158 + (int)piVar4);\n    }\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    local_140 = uVar26 & 0xfffffbff | 0x100;\n    local_f0[0] = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0[0] < 1) {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int *)0x1;\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)piVar4 + 1) + (int)piVar24);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n    }\n    else {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_158 = local_f0[0];\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)local_f0[0] + (int)piVar4) + (int)piVar24);\n      }\nLAB_080074f8:\n      if (-1 < (int)(uVar26 << 0x15)) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n      uVar26 = (uint)*local_108;\n      while (uVar26 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar26) goto LAB_08007524;\n          uVar22 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar26);\n          if (uVar22 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar26 = uVar22;\n          if (uVar22 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int *)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int *)((int)local_104 * (int)((int)local_130 + (int)local_13c) + (int)local_158);\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar18 = (int *)(uint)local_f5;\nLAB_08006538:\n    uVar26 = local_140;\n    if (piVar18 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar18 = (int *)0x2d;\n    local_144 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n    uVar26 = local_140;\n  }\nLAB_08006298:\n  if ((uVar26 & 2) != 0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  if (((uVar26 & 0x84) == 0) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        piVar18 = piVar27;\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)piVar27);\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      piVar18 = (int *)(uint)local_f5;\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      piVar18 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar18 != (int *)0x0) {\n    local_d0 = local_d0 + 1;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f5;\n    ppiVar3[1] = (int *)0x1;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  if ((uVar26 & 2) != 0) {\n    local_d0 = local_d0 + 2;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f4;\n    ppiVar3[1] = (int *)0x2;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_08006a54;\n  if (((uVar26 & 0x84) == 0x80) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        while( true ) {\n          piVar18 = piVar27;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          piVar27 = piVar18 + -4;\n          if ((int)(piVar18 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)(piVar18 + -4));\nLAB_08006882:\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)puVar2;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_0800643c;\n  local_144 = (int *)((int)local_144 - (int)local_158);\n  if (0 < (int)local_144) {\n    piVar27 = (int *)PTR_zeroes_7316_08007088;\n    if (0x10 < (int)local_144) {\n      do {\n        while( true ) {\n          piVar27 = local_144;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          local_144 = piVar27 + -4;\n          if ((int)(piVar27 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        local_144 = piVar27 + -4;\n      } while (0x10 < (int)(piVar27 + -4));\nLAB_080063d2:\n      local_144 = piVar27 + -4;\n      piVar27 = (int *)puVar2;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_144;\n    *ppiVar3 = piVar27;\n    ppiVar3[1] = local_144;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  pbVar23 = local_d0;\n  if ((uVar26 & 0x100) == 0) {\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_158;\n    *ppiVar3 = param_3;\n    ppiVar3[1] = local_158;\n    if (local_d4 < 8) {\nLAB_0800640e:\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else if ((int)uVar25 < 0x66) {\n    local_158 = (int *)(local_d0 + 1);\n    iVar5 = local_d4 + 1;\n    ppiVar16 = ppiVar3 + 2;\n    local_d0 = (byte *)local_158;\n    if (((int)local_138 < 2) && ((uVar26 & 1) == 0)) {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      if (iVar5 < 8) {\n        local_150 = (int *)(local_d4 + 2);\n        ppiVar3 = ppiVar3 + 4;\n      }\n      else {\n        local_d4 = iVar5;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        local_150 = (int *)(local_d4 + 1);\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n        ppiVar3 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      local_d4 = iVar5;\n      if (7 < iVar5) {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n      }\n      local_d4 = local_d4 + 1;\n      local_d0 = (byte *)((int)local_158 + (int)piVar4);\n      *ppiVar16 = __s;\n      ppiVar16[1] = piVar4;\n      if (local_d4 < 8) {\n        ppiVar20 = ppiVar16 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar20 = local_cc;\n      }\n      local_158 = (int *)local_d0;\n      iVar5 = local_d4;\n      local_150 = (int *)(local_d4 + 1);\n      piVar27 = (int *)((int)local_138 + -1);\n      ppiVar13 = ppiVar20 + 2;\n      iVar6 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n      puVar2 = PTR_zeroes_7316_08006d94;\n      local_d4 = (int)local_150;\n      if (iVar6 == 0) {\n        local_158 = (int *)((int)local_158 + (int)piVar27);\n        *ppiVar20 = (int *)((int)param_3 + 1);\n        ppiVar20[1] = piVar27;\n        local_d0 = (byte *)local_158;\n        if ((int)local_150 < 8) {\n          local_150 = (int *)(iVar5 + 2);\n          ppiVar16 = ppiVar13;\n          ppiVar3 = ppiVar20 + 4;\n        }\n        else {\nLAB_08006d9c:\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          local_150 = (int *)(local_d4 + 1);\n          local_158 = (int *)local_d0;\n          ppiVar16 = local_cc;\n          ppiVar3 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar16 = ppiVar20;\n        ppiVar3 = ppiVar13;\n        if (0 < (int)piVar27) {\n          piVar18 = (int *)PTR_zeroes_7316_0800788c;\n          if (0x10 < (int)piVar27) {\n            while( true ) {\n              local_d0 = (byte *)((int)local_158 + 0x10);\n              *ppiVar20 = (int *)puVar2;\n              ppiVar20[1] = (int *)0x10;\n              if (local_d4 < 8) {\n                ppiVar20 = ppiVar20 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar20 = local_cc;\n              }\n              piVar27 = piVar27 + -4;\n              local_158 = (int *)local_d0;\n              if ((int)piVar27 < 0x11) break;\n              local_d4 = local_d4 + 1;\n            }\n            local_150 = (int *)(local_d4 + 1);\n            ppiVar13 = ppiVar20 + 2;\n            piVar18 = (int *)puVar2;\n          }\n          *ppiVar20 = piVar18;\n          ppiVar20[1] = piVar27;\n          local_158 = (int *)((int)local_158 + (int)piVar27);\n          local_d4 = (int)local_150;\n          local_d0 = (byte *)local_158;\n          if (7 < (int)local_150) goto LAB_08006d9c;\n          local_150 = (int *)((int)local_150 + 1);\n          ppiVar3 = ppiVar13 + 2;\n          ppiVar16 = ppiVar13;\n        }\n      }\n    }\n    ppiVar16[1] = local_10c;\n    local_d0 = (byte *)((int)local_158 + (int)local_10c);\n    local_d4 = (int)local_150;\n    *ppiVar16 = &local_e8;\n    pbVar23 = local_d0;\n    if (7 < (int)local_150) {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else {\n    iVar5 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n    if (iVar5 == 0) {\n      if ((int)local_f0[0] < 1) {\n        local_d4 = local_d4 + 1;\n        local_d0 = pbVar23 + 1;\n        *ppiVar3 = (int *)PTR_DAT_08006d98;\n        ppiVar3[1] = (int *)0x1;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        if (((local_f0[0] != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n          }\n          puVar2 = PTR_zeroes_7316_0800788c;\n          if ((int)local_f0[0] < 0) {\n            piVar27 = (int *)-(int)local_f0[0];\n            if ((int)(local_f0[0] + 4) < 0 != SCARRY4((int)local_f0[0],0x10)) {\n              do {\n                local_d4 = local_d4 + 1;\n                local_d0 = local_d0 + 0x10;\n                *ppiVar3 = (int *)puVar2;\n                ppiVar3[1] = (int *)0x10;\n                if (local_d4 < 8) {\n                  ppiVar3 = ppiVar3 + 2;\n                }\n                else {\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  ppiVar3 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = local_d4 + 1;\n            local_d0 = local_d0 + (int)piVar27;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = piVar27;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n          }\n          local_d0 = local_d0 + (int)local_138;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar27 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar27 = local_138;\n        }\n        if (0 < (int)piVar27) {\n          local_d0 = pbVar23 + (int)piVar27;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = piVar27;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08006d94;\n        piVar18 = local_134;\n        if (-1 < (int)piVar27) {\n          piVar18 = (int *)((int)local_134 - (int)piVar27);\n        }\n        piVar27 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar18) {\n          for (; 0x10 < (int)piVar18; piVar18 = piVar18 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar27 = (int *)puVar2;\n          }\n          local_d4 = local_d4 + 1;\n          pbVar23 = pbVar23 + (int)piVar18;\n          *ppiVar3 = piVar27;\n          ppiVar3[1] = piVar18;\n          local_d0 = pbVar23;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007398;\n        local_134 = (int *)((int)local_134 + (int)param_3);\n        if ((uVar26 & 0x400) != 0) {\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int *)0x0) goto LAB_0800717e;\n          local_108 = local_108 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + (int)local_104;\n            *ppiVar3 = local_110;\n            ppiVar3[1] = local_104;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)(uint)*local_108;\n            piVar27 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n            if ((int)piVar18 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n              piVar27 = piVar18;\n            }\n            if (0 < (int)piVar27) {\n              local_d0 = local_d0 + (int)piVar27;\n              local_d4 = local_d4 + 1;\n              *ppiVar3 = local_134;\n              ppiVar3[1] = piVar27;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar3 = local_cc;\n                piVar18 = (int *)(uint)*local_108;\n              }\n            }\n            piVar24 = piVar18;\n            if (-1 < (int)piVar27) {\n              piVar24 = (int *)((int)piVar18 - (int)piVar27);\n            }\n            if (0 < (int)piVar24) {\n              for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n                while( true ) {\n                  local_d4 = local_d4 + 1;\n                  local_d0 = local_d0 + 0x10;\n                  *ppiVar3 = (int *)puVar2;\n                  ppiVar3[1] = (int *)0x10;\n                  if (local_d4 < 8) break;\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  piVar24 = piVar24 + -4;\n                  ppiVar3 = local_cc;\n                  if ((int)piVar24 < 0x11) goto LAB_08007156;\n                }\n                ppiVar3 = ppiVar3 + 2;\n              }\nLAB_08007156:\n              local_d4 = local_d4 + 1;\n              local_d0 = local_d0 + (int)piVar24;\n              *ppiVar3 = (int *)puVar2;\n              ppiVar3[1] = piVar24;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = local_cc;\n              }\n            }\n            local_134 = (int *)((int)local_134 + (int)piVar18);\n            pbVar23 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int *)0x0) {\n              if ((int *)((int)param_3 + (int)local_138) <= local_134) {\n                local_134 = (int *)((int)param_3 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int *)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0[0] < (int)local_138) || ((uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = pbVar23 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n        piVar18 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n        if ((int)piVar27 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n          piVar18 = piVar27;\n        }\n        if (0 < (int)piVar18) {\n          local_d0 = pbVar23 + (int)piVar18;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = local_134;\n          ppiVar3[1] = piVar18;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007088;\n        if (-1 < (int)piVar18) {\n          piVar27 = (int *)((int)piVar27 - (int)piVar18);\n        }\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar18 = (int *)puVar2;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = local_d4 + 1;\n      local_d0 = pbVar23 + 1;\n      *ppiVar3 = (int *)PTR_DAT_08006a50;\n      ppiVar3[1] = (int *)0x1;\n      if (local_d4 < 8) {\n        ppiVar3 = ppiVar3 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar3 = local_cc;\n      }\n      if (((int)local_f0[0] < (int)local_138) || (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + (int)piVar4;\n        *ppiVar3 = __s;\n        ppiVar3[1] = piVar4;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        puVar2 = PTR_zeroes_7316_08006a54;\n        piVar27 = (int *)((int)local_138 + -1);\n        pbVar23 = local_d0;\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)puVar2;\n            pbVar23 = local_d0;\n          }\nLAB_08007014:\n          local_d0 = pbVar23 + (int)piVar27;\n          *ppiVar3 = piVar18;\n          ppiVar3[1] = piVar27;\njoined_r0x08006a1c:\n          local_d4 = local_d4 + 1;\n          if (7 < local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  if (((uVar26 & 4) != 0) && (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27))\n  {\n    for (; local_d0 = pbVar23, 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n      while( true ) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) break;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        piVar27 = piVar27 + -4;\n        ppiVar3 = local_cc;\n        if ((int)piVar27 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n    ppiVar3[1] = piVar27;\n    pbVar23 = local_d0;\n    if ((7 < local_d4) &&\n       (iVar5 = __ssprint_r(param_1,param_2,&local_d8), pbVar23 = local_d0, iVar5 != 0))\n    goto LAB_0800603e;\n  }\n  if ((int)local_15c < (int)local_168) {\n    local_15c = local_168;\n  }\n  local_164 = local_164 + (int)local_15c;\n  if ((pbVar23 == (byte *)0x0) || (iVar5 = __ssprint_r(param_1,param_2,&local_d8), iVar5 == 0)) {\n    local_d4 = 0;\n    if (local_148 != (int *)0x0) {\n      _free_r(param_1,local_148);\n    }\n    ppiVar3 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(param_1,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  uVar22 = uVar25 - 0x30;\n  piVar18 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar18 + 1);\n    uVar25 = (uint)*(byte *)piVar18;\n    local_15c = (int *)(uVar22 + (int)local_15c * 10);\n    uVar22 = uVar25 - 0x30;\n    piVar18 = piVar28;\n  } while (uVar22 < 10);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "_dtoa_r",
                "_malloc_r",
                "__muldf3",
                "strncpy",
                "__aeabi_dcmple",
                "strlen",
                "__aeabi_dcmplt",
                "__aeabi_uldivmod",
                "__ssprint_r",
                "__unorddf2",
                "__aeabi_i2d",
                "__subdf3",
                "_localeconv_r",
                "_free_r",
                "frexp",
                "memchr",
                "__aeabi_d2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "get_concatenated_values_if_initialized_08000134",
                "param_1": "init_ptr",
                "param_2": "object_ptr",
                "DAT_08000144": "DAT_initialized",
                "PTR__init_0800014c": "PTR_init",
                "PTR_object_8660_08000148": "PTR_object"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t get_concatenated_values_if_initialized_08000134(uint64_t *init_ptr, uint64_t *object_ptr)\n{\n    if (DAT_08000144 != 0) {\n        init_ptr = PTR__init_0800014c;\n        object_ptr = PTR_object_8660_08000148;\n    }\n    return ((uint64_t)object_ptr << 32) | (uint64_t)init_ptr;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_if_initialized_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "increment_tick_and_handle_systick_interrupt_08005704",
                "HAL_IncTick": "increment_tick",
                "HAL_SYSTICK_IRQHandler": "handle_systick_interrupt"
            },
            "code": "void increment_tick_and_handle_systick_interrupt_08005704(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "increment_tick_and_handle_systick_interrupt_08005704"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_i2c_status_08002ca8",
                "hi2c": "i2c_handler",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002ca8(I2C_HandleTypeDef *i2c_handler, uint32_t timeout, uint32_t start_tick)\n{\n  uint32_t current_tick;\n  while(true) {\n    if ((i2c_handler->Instance->SR1 & 0x40) == 0x40) {\n      return HAL_OK;\n    }\n    if ((i2c_handler->Instance->SR1 & 0x10) == 0x10) {\n      break;\n    }\n    if ((timeout == 0) || ((current_tick = HAL_GetTick()), timeout < current_tick - start_tick)) {\n      i2c_handler->ErrorCode |= 0x20;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_handler->Instance->SR1 = 0xffffffef;\n  i2c_handler->ErrorCode = 0;\n  i2c_handler->PreviousState = 0;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "configureTimer_08003a94",
                "*htim": "*timerHandle",
                "*sClockSourceConfig": "*clockConfig",
                "HVar1": "status",
                "uVar2": "clockSource",
                "tmpsmcr": "tmpsmcr"
            },
            "code": "HAL_StatusTypeDef configureTimer_08003a94(TIM_HandleTypeDef *timerHandle, TIM_ClockConfigTypeDef *clockConfig){\n    HAL_StatusTypeDef status;\n    uint clockSource = clockConfig->ClockSource;\n    uint32_t tmpsmcr;\n    if (timerHandle->Lock == HAL_LOCKED){\n        status = HAL_BUSY;\n    }\n    else{\n        timerHandle->Lock = HAL_LOCKED;\n        timerHandle->State = HAL_TIM_STATE_BUSY;\n        timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xffff0088;\n        switch(clockSource){\n            case 0:\n                TIM_ITRx_SetConfig(timerHandle->Instance,0);\n                break;\n            case 16:\n                TIM_ITRx_SetConfig(timerHandle->Instance,16);\n                break;\n            case 32:\n                TIM_ITRx_SetConfig(timerHandle->Instance,32);\n                break;\n            case 48:\n                TIM_TI1_ConfigInputStage(timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n                TIM_ITRx_SetConfig(timerHandle->Instance,48);\n                break;\n            case 64:\n                TIM_TI2_ConfigInputStage(timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n                TIM_ITRx_SetConfig(timerHandle->Instance,64);\n                break;\n            case 256:\n                TIM_ETR_SetConfig(timerHandle->Instance,clockConfig->ClockPrescaler,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n                timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xffffff88 | 0x77;\n                break;\n            case 4096:\n                timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xfffffff8;\n                break;\n            case 8192:\n                TIM_ETR_SetConfig(timerHandle->Instance,clockConfig->ClockPrescaler,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n                timerHandle->Instance->SMCR = timerHandle->Instance->SMCR | 0x4000;\n                break;\n            default:\n                status = HAL_ERROR;\n                break;\n        }\n        timerHandle->State = HAL_TIM_STATE_READY;\n        timerHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [
                "TIM_ETR_SetConfig",
                "TIM_ITRx_SetConfig",
                "TIM_TI1_ConfigInputStage",
                "TIM_TI2_ConfigInputStage"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureTimer_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_input_trigger_0800416a",
                "TIMx": "timer",
                "InputTriggerSource": "input_trigger_source",
                "tmpsmcr": "smcr"
            },
            "code": "void set_input_trigger_0800416a(TIM_TypeDef *timer, uint16_t input_trigger_source)\n{\n  uint32_t smcr = timer->SMCR;\n  smcr &= 0xffffff8f;\n  smcr |= (uint32_t)(input_trigger_source | 7);\n  timer->SMCR = smcr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_input_trigger_0800416a"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\ndouble FUNC_080059f0(double __x)\n\n{\n  int in_r0;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  uint in_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  double in_d0;\n  double dVar9;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar10 = CONCAT44(in_r1,in_r0);\n  uVar7 = in_r1 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (in_r0 == 0)))) {\n      return in_d0;\n    }\n    dVar9 = (double)__aeabi_dadd();\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar10 = __divdf3(0,DAT_08005d08,in_r0,extraout_r1);\n          iVar8 = 3;\n        }\n        else {\n          uVar10 = __subdf3();\n          uVar11 = __muldf3(in_r0,extraout_r1,0,DAT_08005d04);\n          uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n          uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar10 = __subdf3();\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_08005cf8);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar10 = __aeabi_dadd();\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar11 = __aeabi_dadd(in_r0,in_r1,DAT_08005cd0,DAT_08005cd4);\n        iVar8 = __aeabi_dcmpgt((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar5 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar5,uVar6,uVar5,uVar6);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar1,uVar3,uVar1,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar4,DAT_08005c78,DAT_08005c7c);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar1,uVar3);\n    uVar11 = __muldf3(uVar2,uVar4,DAT_08005ca8,DAT_08005cac);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar8 == -1) {\n      dVar9 = (double)__subdf3(uVar5,uVar6,(int)uVar10,uVar1);\n      return dVar9;\n    }\n    uVar10 = __subdf3((int)uVar10,uVar1,*(undefined4 *)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8),\n                      *(undefined4 *)((int)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8) + 4));\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    dVar9 = (double)__subdf3(*(undefined4 *)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8),\n                             *(undefined4 *)((int)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8) + 4),(int)uVar10\n                             ,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)in_r1 < 0) {\n      return dVar9;\n    }\n  }\n  return dVar9;\n}\n\n",
            "called": [
                "__subdf3",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__divdf3",
                "__aeabi_dadd",
                "fabs"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "write_i2c_memory_08001ccc",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "pData": "data",
                "Size": "data_size",
                "Timeout": "timeout",
                "Tickstart": "tick_start",
                "uVar1": "status",
                "HVar2": "result",
                "cVar4": "is_busy",
                "uVar5": "data_index",
                "iVar6": "end",
                "pbVar7": "data_pointer",
                "bVar8": "is_zero",
                "DAT_08001f64": "I2C_FIRST_AND_LAST_FRAME",
                "DAT_08001f68": "I2C_FIRST_AND_LAST_FRAME"
            },
            "code": "HAL_StatusTypeDef write_i2c_memory_08001ccc(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint8_t *data, uint16_t data_size, uint32_t timeout)\n{\n    uint32_t tick_start = HAL_GetTick();\n    uint32_t timeout_tick;\n    uint8_t status = 0;\n    uint16_t data_index;\n    uint8_t *data_pointer;\n    bool is_busy;\n    HAL_StatusTypeDef result;\n\n    if (i2c_handle->State != HAL_I2C_STATE_READY) {\n        return HAL_BUSY;\n    }\n\n    i2c_handle->Lock = HAL_LOCKED;\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_NONE;\n    i2c_handle->pBuffPtr = data;\n    i2c_handle->XferSize = data_size;\n    i2c_handle->XferCount = data_size;\n    i2c_handle->XferOptions = DAT_08001f64;\n    i2c_handle->Mode = HAL_I2C_MODE_MEM;\n    i2c_handle->State = HAL_I2C_STATE_BUSY_TX;\n\n    if ((i2c_handle->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {\n        i2c_handle->Instance->CR1 |= I2C_CR1_PE;\n    }\n    i2c_handle->Instance->CR1 &= ~(I2C_CR1_POS | I2C_CR1_ACK);\n\n    result = I2C_RequestMemoryWrite(i2c_handle, device_address, memory_address, memory_address_size, timeout, tick_start);\n    if (result != HAL_OK) {\n        i2c_handle->Lock = HAL_UNLOCKED;\n        if (i2c_handle->ErrorCode == HAL_I2C_ERROR_AF) {\n            result = HAL_ERROR;\n        }\n        else {\n            result = HAL_TIMEOUT;\n        }\n        goto end;\n    }\n\n    while (i2c_handle->XferSize > 0) {\n        timeout_tick = HAL_GetTick();\n        is_busy = true;\n        while (is_busy) {\n            if ((i2c_handle->Instance->SR1 & I2C_SR1_TXE) == I2C_SR1_TXE) {\n                is_busy = false;\n            }\n            else if ((i2c_handle->Instance->SR1 & I2C_SR1_AF) == I2C_SR1_AF) {\n                i2c_handle->Instance->CR1 |= I2C_CR1_STOP;\n                i2c_handle->ErrorCode |= HAL_I2C_ERROR_AF;\n                result = HAL_ERROR;\n                goto end;\n            }\n            else if ((HAL_GetTick() - timeout_tick) >= timeout) {\n                i2c_handle->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;\n                result = HAL_TIMEOUT;\n                goto end;\n            }\n        }\n        data_pointer = i2c_handle->pBuffPtr;\n        i2c_handle->Instance->DR = *data_pointer++;\n        i2c_handle->XferSize--;\n        i2c_handle->XferCount--;\n        if ((i2c_handle->Instance->SR1 & I2C_SR1_BTF) == I2C_SR1_BTF && i2c_handle->XferSize > 0) {\n            i2c_handle->Instance->DR = *data_pointer++;\n            i2c_handle->XferSize--;\n            i2c_handle->XferCount--;\n        }\n    }\n    result = I2C_WaitOnBTFFlagUntilTimeout(i2c_handle, timeout, tick_start);\n    if (result == HAL_OK) {\n        i2c_handle->Instance->CR1 |= I2C_CR1_STOP;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        i2c_handle->Lock = HAL_UNLOCKED;\n        result = HAL_OK;\n    }\n    else if (i2c_handle->ErrorCode == HAL_I2C_ERROR_AF) {\n        i2c_handle->Instance->CR1 |= I2C_CR1_STOP;\n        result = HAL_ERROR;\n    }\n    else {\n        result = HAL_TIMEOUT;\n    }\nend:\n    return result;\n}",
            "called": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "_i2c_write_reg"
            ],
            "imported": false,
            "current_name": "write_i2c_memory_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "updateTick_0800157c",
                "PTR_uwTick_0800159c": "tick",
                "PTR_uwTickFreq_08001598": "tickFreq"
            },
            "code": "void updateTick_0800157c(void)\n{\n    uint32_t* PTR_uwTick_0800159c = (uint32_t*)PTR_uwTick_0800159c;\n    int* PTR_uwTickFreq_08001598 = (int*)PTR_uwTickFreq_08001598;\n    uint32_t PTR_uwTick_0800159cValue = *PTR_uwTick_0800159c + (uint32_t)((uint8_t)*PTR_uwTickFreq_08001598);\n    *PTR_uwTick_0800159c = PTR_uwTick_0800159cValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "updateTick_0800157c"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "handle_timer_interrupt_080036f8",
                "*htim": "*timer_handle",
                "Instance": "instance",
                "SR": "status_register",
                "DIER": "DMA_interrupt_enable_register",
                "Channel": "channel",
                "HAL_TIM_ACTIVE_CHANNEL_1": "HAL_TIM_ACTIVE_CHANNEL_1",
                "CCMR1": "capture_compare_mode_register_1",
                "OC1M": "output_compare_1_mode",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_output_compare_delay_elapsed",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_PWM_pulse_finished",
                "HAL_TIM_IC_CaptureCallback": "handle_input_capture",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "HAL_TIM_ACTIVE_CHANNEL_CLEARED",
                "HAL_TIM_ACTIVE_CHANNEL_2": "HAL_TIM_ACTIVE_CHANNEL_2",
                "TIM_FLAG_CC2": "TIM_FLAG_CC2",
                "TIM_IT_CC2": "TIM_IT_CC2",
                "CCMR2": "capture_compare_mode_register_2",
                "TIM_CCMR1_OC2M": "TIM_CCMR1_OC2M",
                "TIM_CCMR2_OC3M": "TIM_CCMR2_OC3M",
                "TIM_CCMR2_OC4M": "TIM_CCMR2_OC4M",
                "HAL_TIM_ACTIVE_CHANNEL_3": "HAL_TIM_ACTIVE_CHANNEL_3",
                "TIM_FLAG_CC3": "TIM_FLAG_CC3",
                "TIM_IT_CC3": "TIM_IT_CC3",
                "HAL_TIM_ACTIVE_CHANNEL_4": "HAL_TIM_ACTIVE_CHANNEL_4",
                "TIM_FLAG_CC4": "TIM_FLAG_CC4",
                "TIM_IT_CC4": "TIM_IT_CC4",
                "TIM_FLAG_UIF": "TIM_FLAG_UIF",
                "TIM_FLAG_Break": "TIM_FLAG_Break",
                "TIM_IT_BREAK": "TIM_IT_BREAK",
                "TIM_FLAG_Trigger": "TIM_FLAG_Trigger",
                "TIM_IT_TRIGGER": "TIM_IT_TRIGGER",
                "TIM_FLAG_COM": "TIM_FLAG_COM",
                "TIM_IT_COM": "TIM_IT_COM",
                "HAL_TIM_PeriodElapsedCallback": "handle_period_elapsed",
                "HAL_TIMEx_BreakCallback": "handle_break",
                "HAL_TIM_TriggerCallback": "handle_trigger",
                "HAL_TIMEx_CommutationCallback": "handle_commutation"
            },
            "code": "void handle_timer_interrupt_080036f8(TIM_HandleTypeDef *timer_handle)\n{\n    if (((timer_handle->Instance->SR & TIM_FLAG_UPDATE) == TIM_FLAG_UPDATE) && ((timer_handle->Instance->DIER & TIM_IT_UPDATE) == TIM_IT_UPDATE)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_UPDATE);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_OC1M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_CC2) == TIM_FLAG_CC2) && ((timer_handle->Instance->DIER & TIM_IT_CC2) == TIM_IT_CC2)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_CC2);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_OC2M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_CC3) == TIM_FLAG_CC3) && ((timer_handle->Instance->DIER & TIM_IT_CC3) == TIM_IT_CC3)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_CC3);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n        if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_OC3M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_CC4) == TIM_FLAG_CC4) && ((timer_handle->Instance->DIER & TIM_IT_CC4) == TIM_IT_CC4)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_CC4);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n        if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_OC4M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_UIF) == TIM_FLAG_UIF) && ((timer_handle->Instance->DIER & TIM_IT_UPDATE) == TIM_IT_UPDATE)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_UIF);\n        HAL_TIM_PeriodElapsedCallback(timer_handle);\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_Break) == TIM_FLAG_Break) && ((timer_handle->Instance->DIER & TIM_IT_BREAK) == TIM_IT_BREAK)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_Break);\n        HAL_TIMEx_BreakCallback(timer_handle);\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_Trigger) == TIM_FLAG_Trigger) && ((timer_handle->Instance->DIER & TIM_IT_TRIGGER) == TIM_IT_TRIGGER)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_Trigger);\n        HAL_TIM_TriggerCallback(timer_handle);\n    }\n    if (((timer_handle->Instance->SR & TIM_FLAG_COM) == TIM_FLAG_COM) && ((timer_handle->Instance->DIER & TIM_IT_COM) == TIM_IT_COM)) {\n        timer_handle->Instance->SR = ~(TIM_FLAG_COM);\n        HAL_TIMEx_CommutationCallback(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_080036f8"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "isEndOfString_080009e8",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009e8(void)\n{\n  char currentChar;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009e8"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "allocate_memory_and_set_values_08009630",
                "param_1": "size",
                "param_2": "param_2",
                "param_3": "flag",
                "param_4": "value",
                "param_5": "result1",
                "param_6": "result2",
                "iVar1": "allocated_memory_address",
                "uVar2": "shift_amount",
                "iVar3": "value_type",
                "iVar4": "value_size",
                "uVar5": "upper_bits",
                "uVar6": "flag_value",
                "local_20": "lower_bits",
                "uVar7": "bits_value",
                "local_1c": "remaining_value"
            },
            "code": "int allocate_memory_and_set_values_08009630(undefined4 size, undefined4 param_2, uint flag, uint value, int *result1, int *result2) {\n  int allocated_memory_address;\n  uint shift_amount;\n  int value_type;\n  int value_size;\n  uint flag_value;\n  uint remaining_value;\n  undefined8 bits_value;\n  uint lower_bits;\n  uint upper_bits;\n  \n  allocated_memory_address = _Balloc(size, 1);\n  flag_value = (value << 1) >> 0x15;\n  remaining_value = value & 0xfffff;\n  if (flag_value != 0) {\n    remaining_value = remaining_value | 0x100000;\n  }\n  if (flag == 0) {\n    value_type = __lo0bits(&remaining_value);\n    value_size = 1;\n    shift_amount = value_type + 0x20;\n    *(undefined4 *)(allocated_memory_address + 0x10) = 1;\n    *(uint *)(allocated_memory_address + 0x14) = remaining_value;\n  }\n  else {\n    lower_bits = flag;\n    shift_amount = __lo0bits(&lower_bits);\n    if (shift_amount == 0) {\n      *(uint *)(allocated_memory_address + 0x14) = lower_bits;\n    }\n    else {\n      upper_bits = remaining_value << (0x20 - shift_amount & 0xff);\n      remaining_value = remaining_value >> (shift_amount & 0xff);\n      *(uint *)(allocated_memory_address + 0x14) = upper_bits | lower_bits;\n    }\n    if (remaining_value == 0) {\n      value_size = 1;\n    }\n    else {\n      value_size = 2;\n    }\n    *(uint *)(allocated_memory_address + 0x18) = remaining_value;\n    *(int *)(allocated_memory_address + 0x10) = value_size;\n  }\n  if (flag_value == 0) {\n    *result1 = shift_amount - 0x432;\n    bits_value = __hi0bits(*(undefined4 *)(allocated_memory_address + value_size * 4 + 0x10));\n    *result2 = (int)((ulonglong)bits_value >> 0x20) * 0x20 - (int)bits_value;\n    return allocated_memory_address;\n  }\n  *result1 = (flag_value - 0x433) + shift_amount;\n  *result2 = 0x35 - shift_amount;\n  return allocated_memory_address;\n}",
            "called": [
                "_Balloc",
                "__hi0bits",
                "__lo0bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_values_08009630"
        },
        "FUN_08005830": {
            "renaming": {
                "FUN_08005830": "infinite_loop_08005830"
            },
            "code": "void infinite_loop_08005830(void)\n{\n  while(1);\n}\n",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005830",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005830"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "handle_timer_interrupt_08005714",
                "PTR_htim2_08005724": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08005714(void)\n{\n  HAL_TIM_IRQHandler(&PTR_htim2_08005724);\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08005714"
        },
        "FUN_08005834": {
            "renaming": {
                "FUN_08005834": "calculate_result_08005834",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "param_5": "input_value",
                "DAT_080059e8": "MAXIMUM_VALUE",
                "unaff_r4": "unused_variable"
            },
            "code": "void calculate_result_08005834(uint32_t dividend, uint32_t divisor, uint32_t remainder, uint32_t quotient, double input_value) {\n    uint32_t abs_remainder = remainder & 0x7fffffff;\n    if ((DAT_080059e8 < (abs_remainder | (-divisor | divisor) >> 0x1f)) || (DAT_080059e8 < ((dividend & 0x7fffffff) | (-dividend | dividend) >> 0x1f))) {\n        __aeabi_dadd(remainder, quotient, dividend, divisor);\n    }\n    else {\n        if ((remainder + 0xc0100000 | quotient) == 0) {\n            atan(input_value);\n            return;\n        }\n        uint32_t shift_value = ((int32_t)remainder >> 0x1e & 2U) | divisor >> 0x1f;\n        if ((((dividend | remainder) != 0) && (abs_remainder != DAT_080059e8)) && ((dividend & 0x7fffffff) != DAT_080059e8)) {\n            int32_t quotient_difference = ((int32_t)(dividend & 0x7fffffff) - (int32_t)abs_remainder) >> 0x14;\n            if ((quotient_difference < 0x3d) && ((-1 < (int32_t)remainder) || (quotient_difference + 0x3c < 0 == SCARRY4(quotient_difference, 0x3c)))) {\n                __divdf3(dividend, divisor);\n                fabs((double)CONCAT44(unaff_r4, remainder));\n                atan((double)CONCAT44(unaff_r4, remainder));\n            }\n            if (shift_value != 1) {\n                if (shift_value == 2) {\n                    uint64_t result = __subdf3();\n                    __subdf3(DAT_080059e8, DAT_080059e8, (int32_t)result, (int32_t)(result >> 0x20));\n                }\n                else if (shift_value != 0) {\n                    uint64_t result = __subdf3();\n                    __subdf3((int32_t)result, (int32_t)(result >> 0x20), DAT_080059e8, DAT_080059e8);\n                }\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_result_08005834"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "perform_calculation_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "iVar1": "difference",
                "unaff_r4": "unaff_r4",
                "uVar2": "input_4_sign_bit",
                "uVar3": "absolute_input_3",
                "uVar4": "input_4_absolute",
                "uVar5": "absolute_input_4_double"
            },
            "code": "void perform_calculation_08005838(uint input_1, uint input_2, uint input_3, uint input_4, double input_5)\n{\n    int difference;\n    uint absolute_input_3;\n    uint absolute_input_4;\n    uint input_2_absolute;\n    uint input_4_absolute;\n    uint input_4_sign_bit;\n    double absolute_input_4_double;\n\n    absolute_input_3 = input_3 & 0x7fffffff;\n    absolute_input_4 = input_4 & 0x7fffffff;\n\n    if (DAT_080059e8 < (absolute_input_3 | (-input_4 | input_4) >> 0x1f) || DAT_080059e8 < (absolute_input_4 | (-input_2 | input_2) >> 0x1f))\n    {\n        __aeabi_dadd(input_4, input_3, input_1, input_2);\n    }\n    else\n    {\n        if ((input_4 + 0xc0100000 | input_3) == 0)\n        {\n            atan(input_5);\n            return;\n        }\n        input_4_sign_bit = input_4 >> 0x1f;\n        input_2_absolute = input_2 >> 0x1f;\n\n        if ((input_1 | absolute_input_3 | input_2 | input_4) && absolute_input_3 != DAT_080059e8 && absolute_input_4 != DAT_080059e8)\n        {\n            difference = (int)(absolute_input_4 - absolute_input_3) >> 0x14;\n\n            if (difference < 0x3d && (-1 < (int)input_4 || (difference + 0x3c < 0 == SCARRY4(difference, 0x3c))))\n            {\n                __divdf3(input_1, input_2);\n                absolute_input_4_double = (double)CONCAT44(unaff_r4, input_4);\n                fabs(absolute_input_4_double);\n                atan(absolute_input_4_double);\n            }\n\n            if (input_4_sign_bit != 1)\n            {\n                if (input_4_sign_bit == 2)\n                {\n                    __subdf3(DAT_080059b0, DAT_080059b4, (int)input_5, (int)((ulonglong)input_5 >> 0x20));\n                }\n                else if (input_4_sign_bit != 0)\n                {\n                    __subdf3((int)input_5, (int)((ulonglong)input_5 >> 0x20), DAT_080059b0, DAT_080059b4);\n                }\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "perform_calculation_08005838"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_exponent_080096e0",
                "__x": "base",
                "__exponent": "exponent",
                "iVar1": "max_exponent",
                "in_r1": "base_abs",
                "extraout_r1": "base_abs",
                "in_r2": "exponent",
                "iVar2": "exponent_offset",
                "uVar3": "base_abs",
                "in_d0": "base"
            },
            "code": "double calculate_exponent_080096e0(double base, int *exponent) {\n  int max_exponent = 2147483647;\n  int exponent_offset = 0;\n  uint base_abs = (uint)abs(base);\n  *exponent = 0;\n  if ((base_abs <= max_exponent) && ((base_abs | (uint)exponent) != 0)) {\n    if (base_abs < 1048576) {\n      double exponent_double = (double)((int)*exponent * base_abs);\n      exponent_offset = -54;\n      base_abs = (uint)abs(base);\n    }\n    *exponent = ((int)base_abs >> 20) - 1022 + exponent_offset;\n  }\n  return base;\n}\n",
            "called": [
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_exponent_080096e0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_HCLK_frequency_divided_by_APB_prescaler_08003540",
                "DAT_08003560": "data_pointer",
                "PTR_APBPrescTable_08003564": "APB_prescaler_table",
                "uVar1": "HCLK_freq",
                "APB_prescaler_index": "index",
                "APB_prescaler_value": "value"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003540(void)\n{\n  uint32_t HCLK_freq = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(uint *)(DAT_08003560 + 4) >> 0xb) & 7;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08003564[APB_prescaler_index];\n  return HCLK_freq >> APB_prescaler_value;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003540"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "configureI2C_08001ab0",
                "*hi2c": "*i2c",
                "uVar1": "pclk1Freq",
                "cVar2": "dutyCycle",
                "HVar3": "status",
                "uVar4": "ccrValue",
                "uVar5": "riseTime",
                "bVar6": "dutyCycle2",
                "pclk1": "pclk1",
                "freqrange": "freqrange"
            },
            "code": "HAL_StatusTypeDef configureI2C_08001ab0(I2C_HandleTypeDef *i2c)\n{\n    uint32_t pclk1Freq;\n    uint32_t ccrValue;\n    uint32_t riseTime;\n    uint32_t dutyCycle;\n    HAL_StatusTypeDef status;\n    \n    if (i2c == NULL) {\n        status = HAL_ERROR;\n    }\n    else {\n        if (i2c->State == HAL_I2C_STATE_RESET) {\n            i2c->Lock = HAL_UNLOCKED;\n            HAL_I2C_MspInit(i2c);\n        }\n        i2c->State = HAL_I2C_STATE_BUSY;\n        i2c->Instance->CR1 &= ~(1U);\n        pclk1Freq = HAL_RCC_GetPCLK1Freq();\n        if (i2c->Init.ClockSpeed <= 100000) {\n            dutyCycle = (pclk1Freq <= 1000000) ? 2U : 16U;\n            ccrValue = (pclk1Freq / (i2c->Init.ClockSpeed * dutyCycle));\n            riseTime = (pclk1Freq / 1000000U) + 1U;\n        }\n        else {\n            ccrValue = 1U;\n            riseTime = (pclk1Freq / 3000000U) + 1U;\n            dutyCycle = (i2c->Init.DutyCycle == I2C_DUTYCYCLE_2) ? 16U : 2U;\n        }\n        if (ccrValue < 4U) {\n            ccrValue = 4U;\n        }\n        i2c->Instance->CCR = ccrValue;\n        i2c->Instance->TRISE = riseTime;\n        i2c->Instance->CR1 = i2c->Init.NoStretchMode | i2c->Init.GeneralCallMode;\n        i2c->Instance->OAR1 = i2c->Init.OwnAddress1 | i2c->Init.AddressingMode;\n        i2c->Instance->OAR2 = i2c->Init.OwnAddress2 | i2c->Init.DualAddressMode;\n        i2c->Instance->CR1 |= 1U;\n        i2c->ErrorCode = 0U;\n        i2c->State = HAL_I2C_STATE_READY;\n        i2c->PreviousState = 0U;\n        i2c->Mode = HAL_I2C_MODE_NONE;\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "MX_I2C1_Init"
            ],
            "imported": false,
            "current_name": "configureI2C_08001ab0"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "FUNC_08000150"
            },
            "code": "\nulonglong FUNC_08000150(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000150",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000150"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "__dest": "destination",
                "__src": "source",
                "__n": "count",
                "cVar1": "current_char",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "current_word"
            },
            "code": "char* copy_string_08009768(char* destination, const char* source, size_t count) {\n    char current_char;\n    uint32_t* source_ptr;\n    uint32_t* destination_ptr;\n    uint32_t current_word;\n\n    destination_ptr = (uint32_t*)destination;\n    if (((((uint32_t)destination | (uint32_t)source) & 3) == 0) && (source_ptr = (uint32_t*)source, 3 < count))) {\n        do {\n            source = (char*)(source_ptr + 1);\n            current_word = *source_ptr;\n            if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto end_of_optimized_copy;\n            count = count - 4;\n            source_ptr = destination_ptr + 1;\n            *destination_ptr = current_word;\n            destination_ptr = source_ptr;\n            source_ptr = (uint32_t*)source;\n        } while (3 < count);\n    }\n    source_ptr = (uint32_t*)source;\n    if (count != 0) {\nend_of_optimized_copy:\n        current_char = *(char*)source_ptr;\n        *(char*)destination_ptr = current_char;\n        while (true) {\n            destination_ptr = (uint32_t*)((int)destination_ptr + 1);\n            count = count - 1;\n            if (current_char == '\\0') break;\n            if (count == 0) {\n                return destination;\n            }\n            source_ptr = (uint32_t*)((int)source_ptr + 1);\n            current_char = *(char*)source_ptr;\n            *(char*)destination_ptr = current_char;\n        }\n        if (count != 0) {\n            source_ptr = destination_ptr;\n            do {\n                destination_ptr = (uint32_t*)((int)destination_ptr + 1);\n                *(char*)source_ptr = '\\0';\n                source_ptr = destination_ptr;\n            } while (destination_ptr != (uint32_t*)(count + (int)source));\n        }\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08001008": {
            "renaming": {
                "FUN_08001008": "check_if_zero_or_nan_08001008",
                "in_ZR": "is_zero",
                "in_CY": "is_nan"
            },
            "code": "bool check_if_zero_or_nan_08001008(void)\n{\n  bool is_nan = __aeabi_cfcmpeq();\n  return !is_nan || is_nan;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001008",
            "calling": [],
            "imported": false,
            "current_name": "check_if_zero_or_nan_08001008"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "configure_timer_08003ff8",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "mode",
                "uVar2": "polarity",
                "tmpccer": "ccer",
                "tmpccmrx": "ccmrx",
                "tmpcr2": "cr2"
            },
            "code": "void configure_timer_08003ff8(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t mode;\n  uint32_t polarity;\n  uint32_t ccer;\n  uint32_t ccmrx;\n  uint32_t cr2;\n  \n  ccer = timer->CCER & 0xffffefff;\n  cr2 = timer->CR2;\n  mode = output_config->OCMode;\n  polarity = output_config->OCPolarity;\n  if (timer == PTR_DAT_0800409c) {\n    cr2 = output_config->OCIdleState << 6 | cr2 & 0xffffbfff;\n  }\n  timer->CR2 = cr2;\n  timer->CCMR2 = mode << 8 | timer->CCMR2 & 0xffff8cff;\n  timer->CCR4 = output_config->Pulse;\n  timer->CCER = polarity << 0xc | ccer & 0xffffdfff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "write_data_to_i2c_device_08004ea4",
                "addr": "device_address",
                "reg": "register_address",
                "*data": "data_buffer",
                "len": "data_length",
                "PTR_hi2c1_08004ee4": "i2c_handle_1",
                "PTR_I2C_TIMEOUT_08004ee0": "i2c_timeout_ptr"
            },
            "code": "void write_data_to_i2c_device_08004ea4(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length)\n    {\n        HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004ee4, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004ee0);\n        return;\n    }",
            "called": [
                "HAL_I2C_Mem_Write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_i2c_device_08004ea4"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "incr": "size",
                "puVar1": "error_code",
                "auStack_18": "memory_check",
                "local_14": "current_heap_end",
                "prev_heap_end": "previous_heap_end"
            },
            "code": "caddr_t allocate_memory_08005728(int size)\n{\n  undefined4 *error_code;\n  undefined memory_check[4];\n  int current_heap_end;\n  char *previous_heap_end;\n  \n  if (*(int *)PTR_heap_end_08005778 == 0) {\n    *(undefined **)PTR_heap_end_08005778 = PTR_end_0800577c;\n  }\n  previous_heap_end = *(char **)PTR_heap_end_08005778;\n  if (memory_check < (undefined *)(size + *(int *)PTR_heap_end_08005778)) {\n    current_heap_end = size;\n    error_code = (undefined4 *)__errno();\n    *error_code = 0xc;\n    previous_heap_end = (caddr_t)0xffffffff;\n  }\n  else {\n    *(int *)PTR_heap_end_08005778 = size + *(int *)PTR_heap_end_08005778;\n  }\n  return previous_heap_end;\n}",
            "called": [
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "configure_timer_08003e38",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "mode_bits",
                "uVar2": "polarity_bits",
                "tmpccmrx": "tmp_ccmrx",
                "tmpcr2": "tmp_cr2",
                "tmpccer": "tmp_ccer",
                "DAT_08003f14": "PTR_08003f14"
            },
            "code": "void configure_timer_08003e38(TIM_TypeDef* timer, TIM_OC_InitTypeDef* config)\n{\n  uint32_t mode_bits;\n  uint32_t polarity_bits;\n  uint32_t tmp_ccmrx;\n  uint32_t tmp_cr2;\n  uint32_t tmp_ccer;\n  \n  timer->CCER &= 0xffffffef;\n  tmp_cr2 = timer->CR2;\n  mode_bits = config->OCMode;\n  polarity_bits = (config->OCPolarity << 4) | (timer->CCER & 0xffffffdf);\n  if (timer == DAT_08003f14) {\n    polarity_bits &= 0xffffff7f;\n    polarity_bits |= (config->OCNPolarity << 4);\n    tmp_cr2 &= 0xfffff3ff;\n    tmp_cr2 |= (config->OCNIdleState << 2) | (config->OCIdleState << 2);\n  }\n  timer->CR2 = tmp_cr2;\n  timer->CCMR1 = (mode_bits << 8) | (timer->CCMR1 & 0xffff8cff);\n  timer->CCR2 = config->Pulse;\n  timer->CCER = polarity_bits;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003e38"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "unaff_r4",
                "uVar2": "mask",
                "uVar3": "temp3",
                "in_r12": "in_r12",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_080006a4(uint input1, uint input2, uint input3, uint input4) {\n    uint temp1, temp2, temp3, temp4;\n    uint mask = in_r12 & input4 >> 0x14;\n    if (unaff_r4 != in_r12 && mask != in_r12) {\n        bool is_zero = (input1 | input2 << 1) == 0;\n        if (!is_zero) {\n            is_zero = (input3 | input4 << 1) == 0;\n        }\n        if (is_zero) {\n            return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n        }\n        if (unaff_r4 == 0) {\n            temp3 = input2 & 0x80000000;\n            do {\n                temp1 = input1 & 0x80000000;\n                input1 = input1 << 1;\n                input2 = input2 * 2 + (uint)(temp1 != 0);\n            } while ((input2 & 0x100000) == 0);\n            input2 = input2 | temp3;\n            if (mask != 0) {\n                return CONCAT44(input2, input1);\n            }\n        }\n        do {\n            mask = input3 & 0x80000000;\n            input3 = input3 << 1;\n            input4 = input4 * 2 + (uint)(mask != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2, input1);\n    }\n    is_zero = (input1 | input2 << 1) == 0;\n    if (is_zero) {\n        input2 = input4;\n        input1 = input3;\n    }\n    if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n    }\n    temp3 = input2;\n    if (((!is_zero) && ((unaff_r4 != in_r12 || ((input1 | input2 << 0xc) == 0)))) && ((mask != in_r12 || (input1 = input3, temp3 = input4, (input3 | input4 << 0xc) == 0)))) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n    }\n    return CONCAT44(temp3, input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_080006a4"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_allocate_memory_08009530",
                "param_1": "mem_alloc_flags",
                "param_2": "src",
                "param_3": "dest",
                "param_4": "param_4",
                "iVar1": "mem_alloc_size",
                "puVar2": "src_data",
                "uVar3": "src_word",
                "uVar4": "dest_word",
                "iVar5": "src_offset",
                "puVar6": "dest_ptr_next",
                "puVar7": "dest_ptr",
                "puVar9": "dest_data",
                "puVar10": "src_data",
                "puVar11": "src_end",
                "iVar12": "carry",
                "puVar13": "src_ptr",
                "uVar14": "dest_size"
            },
            "code": "void compare_and_allocate_memory_08009530(undefined4 mem_alloc_flags, uint *src, uint *dest, undefined4 param_4)\n{\n    int src_offset = src[4] - (int)dest[4];\n    uint *src_data = src + 5;\n    uint *dest_data = dest + 5;\n    uint *src_end = src_data + dest[4];\n    uint *dest_end = dest_data + src[4];\n    int mem_alloc_size = (int)_Balloc(mem_alloc_flags, dest[1], src_data, dest_data, param_4);\n    int carry = 0;\n    uint src_word = dest[4];\n    uint dest_word = src[4];\n    *(int *)(mem_alloc_size + 0xc) = 1 + (int)(src_offset < 0);\n    uint *dest_ptr = (uint *)(mem_alloc_size + 0x14);\n    while (dest_data < src_end)\n    {\n        uint *src_ptr = dest_data + 1;\n        uint *dest_ptr_next = src_data + 1;\n        uint result = ((*dest_data & 0xffff) + carry) - (*src_data & 0xffff);\n        carry = ((*dest_data >> 0x10) - (*src_data >> 0x10)) + ((int)result >> 0x10);\n        result = result & 0xffff | carry * 0x10000;\n        *dest_ptr = result;\n        carry = carry >> 0x10;\n        dest_ptr = dest_ptr + 1;\n        dest_data = src_ptr;\n        src_data = dest_ptr_next;\n    }\n    if (src_data < dest_end)\n    {\n        do {\n            uint *src_ptr = src_data + 1;\n            uint result = (*src_data & 0xffff) + carry;\n            carry = ((int)result >> 0x10) + (*src_data >> 0x10);\n            result = result & 0xffff | carry * 0x10000;\n            *dest_ptr = result;\n            carry = carry >> 0x10;\n            dest_ptr = dest_ptr + 1;\n            src_data = src_ptr;\n        } while (src_data < dest_end);\n        dest_ptr = (uint *)((int)dest_ptr + ((int)dest_end + ~(uint)src_data & 0xfffffffc) + 4);\n    }\n    dest_ptr = dest_ptr - 1;\n    while (result == 0)\n    {\n        dest_ptr = dest_ptr - 1;\n        dest_word = dest_word - 1;\n        result = *dest_ptr;\n    }\n    *(uint *)(mem_alloc_size + 0x10) = dest_word;\n}\n",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "compare_and_allocate_memory_08009530"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "I2C_WaitForFlag_08002bb4",
                "hi2c": "handle",
                "Timeout": "timeout_ms",
                "Tickstart": "start_time_ms",
                "HVar1": "status",
                "uVar2": "current_time_ms",
                "SR1": "I2C_FLAG_BUSY",
                "I2C_IsAcknowledgeFailed": "I2C_IsAcknowledgeFailed",
                "HAL_OK": "HAL_OK",
                "0xffffffff": "I2C_TIMEOUT_INFINITE",
                "ErrorCode": "I2C_ERROR_TIMEOUT",
                "PreviousState": "I2C_STATE_RESET",
                "State": "I2C_STATE_READY",
                "Lock": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef I2C_WaitForFlag_08002bb4(I2C_HandleTypeDef *handle, uint32_t timeout_ms, uint32_t start_time_ms)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_time_ms;\n  while( true ) {\n    if ((handle->Instance->SR1 & I2C_FLAG_BUSY) == I2C_FLAG_BUSY) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(handle);\n    if (status != HAL_OK) break;\n    if ((timeout_ms != I2C_TIMEOUT_INFINITE) &&\n       ((timeout_ms == 0 || (current_time_ms = HAL_GetTick(), timeout_ms < current_time_ms - start_time_ms)))) {\n      handle->ErrorCode |= I2C_ERROR_TIMEOUT;\n      handle->PreviousState = I2C_STATE_RESET;\n      handle->State = I2C_STATE_READY;\n      handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "I2C_WaitForFlag_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_i2c_status_08002d3c",
                "*hi2c": "*i2c_handle",
                "bVar1": "is_busy",
                "SR1": "status_register_1",
                "ErrorCode": "error_code",
                "PreviousState": "previous_state",
                "State": "current_state",
                "Lock": "lock_status"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002d3c(I2C_HandleTypeDef *i2c_handle)\n{\n  bool is_busy = (i2c_handle->Instance->SR1 & 0x400) == 0x400;\n  if (is_busy) {\n    i2c_handle->Instance->SR1 = 0xfffffbff;\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_BUSY;\n    i2c_handle->PreviousState = HAL_I2C_STATE_RESET;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n  }\n  return is_busy;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002d3c"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "exponent",
                "param_2": "mantissa",
                "uVar1": "float_bits",
                "uVar2": "shifted_mantissa",
                "uVar3": "mantissa_bits",
                "in_r12": "biased_exponent",
                "bVar4": "is_zero",
                "bVar5": "is_small"
            },
            "code": "uint calculate_float_bits_080009fc(uint exponent, uint mantissa) {\n  uint sign_bit;\n  uint exponent_bits;\n  uint mantissa_bits;\n  uint shifted_mantissa;\n  uint biased_exponent;\n  uint float_bits;\n  \n  // Determine sign bit\n  sign_bit = mantissa & 0x80000000;\n  \n  // Determine exponent bits\n  exponent_bits = exponent << 23;\n  \n  // Determine mantissa bits\n  shifted_mantissa = mantissa << 1;\n  if (shifted_mantissa < 0x70000000) {\n    mantissa_bits = (shifted_mantissa + 0x90000000) & 0x7fffff;\n  } else {\n    biased_exponent = (exponent + 127) << 23;\n    if ((shifted_mantissa & 0x7fffffff) == 0) {\n      mantissa_bits = 0;\n    } else {\n      mantissa_bits = (shifted_mantissa + 0x8fe00000) & 0x7fffff;\n      if (mantissa_bits < 0x800000) {\n        biased_exponent -= 0x800000;\n      }\n    }\n  }\n  \n  // Combine sign, exponent, and mantissa bits to form float bits\n  float_bits = sign_bit | biased_exponent | mantissa_bits;\n  \n  return float_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "calculate_power_080093a4",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "size",
                "puVar3": "current",
                "puVar4": "next",
                "iVar1": "index",
                "iVar2": "length"
            },
            "code": "undefined4* calculate_power_080093a4(int base, undefined4* exponent, uint32_t size)\n{\n  int remainder = size % 4;\n  if (remainder != 0) {\n    exponent = (undefined4*) __multadd(base, exponent, *(undefined4 *)(PTR_p05_6092_08009440 + ((remainder - 1) * 4)), 0);\n  }\n  int length = (int) size >> 2;\n  if (length != 0) {\n    undefined4* power_array = *(undefined4**)(base + 0x48);\n    if (power_array == (undefined4*) 0x0) {\n      power_array = (undefined4*) _Balloc(base, 1);\n      power_array[4] = 1;\n      power_array[5] = 0x271;\n      *(undefined4**)(base + 0x48) = power_array;\n      *power_array = 0;\n    }\n    undefined4* current = exponent;\n    if (length << 0x1f >= 0) {\n      while (length != 0) {\n        undefined4* next = (undefined4*) *current;\n        if (next == (undefined4*) 0x0) {\n          next = (undefined4*) __multiply(base, current, current);\n          *current = next;\n          *next = 0;\n        }\n        current = exponent;\n        if (length << 0x1f < 0) {\n          goto LAB_080093d2;\n        }\n        exponent = (undefined4*) __multiply(base, current, power_array);\n        if (current == (undefined4*) 0x0) {\n          break;\n        }\n        int index = *(int*)(base + 0x4c);\n        length >>= 1;\n        *current = *(undefined4*)(index + current[1] * 4);\n        *(undefined4**)(index + current[1] * 4) = current;\n        current = next;\n        if (length == 0) {\n          return exponent;\n        }\n      }\n    }\n    else {\n      LAB_080093d2:\n      exponent = (undefined4*) __multiply(base, exponent, power_array);\n      if (current == (undefined4*) 0x0) {\n        return exponent;\n      }\n      goto LAB_080093c4;\n    }\n    while (length != 0) {\n      undefined4* next = (undefined4*) *current;\n      if (next == (undefined4*) 0x0) {\n        next = (undefined4*) __multiply(base, current, current);\n        *current = next;\n        *next = 0;\n      }\n      current = exponent;\n      if (length << 0x1f >= 0) {\n        exponent = (undefined4*) __multiply(base, current, power_array);\n        if (current == (undefined4*) 0x0) {\n          break;\n        }\n        int index = *(int*)(base + 0x4c);\n        length >>= 1;\n        *current = *(undefined4*)(index + current[1] * 4);\n        *(undefined4**)(index + current[1] * 4) = current;\n        current = next;\n        if (length == 0) {\n          return exponent;\n        }\n        goto LAB_080093c4;\n      }\n      exponent = (undefined4*) __multiply(base, current, next);\n      if (current == (undefined4*) 0x0) {\n        break;\n      }\n      LAB_080093c4:\n      length >>= 1;\n      *current = *(undefined4*)(*(int*)(base + 0x4c) + current[1] * 4);\n      *(undefined4**)(*(int*)(base + 0x4c) + current[1] * 4) = current;\n      current = next;\n      if (length == 0) {\n        return exponent;\n      }\n    }\n  }\n  return exponent;\n}\n",
            "called": [
                "_Balloc",
                "__multadd",
                "__multiply"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_power_080093a4"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "__aeabi_drsub",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "check_atexit_080078a0",
                "DAT_080078ac": "should_register_atexit",
                "atexit": "atexit",
                "DAT_080078b0": "atexit_handler"
            },
            "code": "void check_atexit_080078a0(void)\n{\n  if (DAT_080078ac != 0) {\n    atexit(DAT_080078b0);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_atexit_080078a0"
        },
        "FUN_080056c8": {
            "renaming": {
                "FUN_080056c8": "wait_forever_080056c8"
            },
            "code": "void wait_forever_080056c8(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c8",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056c8"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "PTR_completed_8655_08005828": "completed_array_ptr",
                "PTR_uwTickPrio_08005820": "tick_prio_ptr",
                "PTR_completed_8655_08005824": "completed_array_end_ptr",
                "PTR__ebss_0800582c": "ebss_ptr",
                "PTR___fini_array_end_0800581c": "fini_array_end_ptr"
            },
            "code": "void initialize_system_080057e8(void)\n{\n  int index;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8655_08005828;\n  code *jumptable_ptr;\n  for (index = 0; PTR_uwTickPrio_08005820 + index < PTR_completed_8655_08005824; index = index + 4) {\n    *(undefined4 *)(PTR_uwTickPrio_08005820 + index) = *(undefined4 *)(PTR___fini_array_end_0800581c + index);\n  }\n  for (; completed_ptr < PTR__ebss_0800582c; completed_ptr = completed_ptr + 1) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable_ptr = (code *)0x800581a;\n  main();\n  (*jumptable_ptr)();\n  return;\n}",
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_080057e8"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "check_if_parameters_match_080008f4",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "xor_result",
                "bVar2": "is_value_zero",
                "bVar3": "is_second_value_less_than_or_equal_to_fourth_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_if_parameters_match_080008f4(uint first_value, uint second_value, uint third_value, uint fourth_value)\n{\n  uint result;\n  bool is_first_value_zero;\n  bool is_second_value_zero;\n  bool is_third_value_zero;\n  bool is_fourth_value_zero;\n  bool are_second_and_fourth_values_equal;\n  bool are_first_and_third_values_equal;\n  bool is_second_xor_fourth_value_zero;\n  bool is_second_value_less_than_or_equal_to_fourth_value;\n  bool is_third_value_less_than_or_equal_to_first_value;\n\n  is_second_value_zero = (second_value << 1) == 0;\n  if (is_second_value_zero) {\n    is_second_value_zero = (first_value | second_value << 0xc) == 0;\n  }\n  is_fourth_value_zero = (fourth_value << 1) == 0;\n  if (is_fourth_value_zero) {\n    is_fourth_value_zero = (third_value | fourth_value << 0xc) == 0;\n  }\n  are_second_and_fourth_values_equal = second_value == fourth_value;\n  are_first_and_third_values_equal = first_value == third_value;\n  if (!is_second_value_zero && !is_fourth_value_zero) {\n    is_second_xor_fourth_value_zero = (second_value ^ fourth_value) == 0;\n    if (is_second_xor_fourth_value_zero) {\n      is_second_value_less_than_or_equal_to_fourth_value = fourth_value <= second_value;\n      if (is_second_value_less_than_or_equal_to_fourth_value) {\n        is_third_value_less_than_or_equal_to_first_value = third_value <= first_value;\n        if (is_third_value_less_than_or_equal_to_first_value) {\n          result = 1;\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = ~0;\n      }\n    }\n    else {\n      result = ~0;\n    }\n  }\n  else {\n    result = ((int)(second_value << 1) >> 0x15 == -1 || (int)(fourth_value << 1) >> 0x15 == -1) && ((((int)(second_value << 1) >> 0x15 == -1 && ((first_value | second_value << 0xc) != 0)) || (((int)(fourth_value << 1) >> 0x15 == -1 && ((third_value | fourth_value << 0xc) != 0)))));\n  }\n  return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_parameters_match_080008f4"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "enableTimerChannel_080036a8",
                "htim": "timerHandle",
                "Channel": "channel",
                "BDTR": "TIM_BDTR_MOE",
                "CR1": "TIM_CR1_CEN"
            },
            "code": "HAL_StatusTypeDef enableTimerChannel_080036a8(TIM_HandleTypeDef *timerHandle, uint32_t channel) {\n  TIM_CCxChannelCmd(timerHandle->Instance, channel, ENABLE);\n  if (timerHandle->Instance == DAT_080036f4) {\n    timerHandle->Instance->BDTR |= TIM_BDTR_MOE;\n  }\n  timerHandle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enableTimerChannel_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR___malloc_av__08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR___malloc_trim_threshold_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_08008ad0);\n    }\nLAB_080089f0:\n    __malloc_unlock(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR___malloc_av__08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    __malloc_unlock(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  __malloc_unlock(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "main_08005224",
                "HAL_Init": "initialize_HAL",
                "SystemClock_Config": "initialize_system_clock",
                "MX_GPIO_Init": "initialize_GPIO",
                "MX_I2C1_Init": "initialize_I2C",
                "MX_USART1_UART_Init": "initialize_UART",
                "MX_TIM2_Init": "initialize_TIM2",
                "MX_TIM1_Init": "initialize_TIM1",
                "PTR_I2C_Write_Reg_0800527c": "I2C_Write_Reg",
                "DAT_08005280": "I2C_Write_Reg_Value",
                "PTR_I2C_Read_Reg_08005284": "I2C_Read_Reg",
                "DAT_08005288": "I2C_Read_Reg_Value",
                "PTR_Get_ms_tick_0800528c": "Get_ms_tick",
                "DAT_08005290": "Get_ms_tick_Value",
                "HAL_TIM_PWM_Start": "start_TIM1_PWM",
                "PTR_htim1_08005294": "TIM1",
                "mpu6050_init": "initialize_MPU6050",
                "PTR_mpu6050_08005298": "MPU6050",
                "HAL_TIM_Base_Start_IT": "start_TIM2_Base_IT",
                "PTR_htim2_0800529c": "TIM2",
                "startForkserver": "start_Forkserver"
            },
            "code": "main_08005224(void main_08005224)\n{\n  initialize_HAL();\n  initialize_system_clock();\n  initialize_GPIO();\n  initialize_I2C();\n  initialize_UART();\n  initialize_PTR_htim2_0800529c();\n  initialize_PTR_htim1_08005294();\n  *(umain_0800522432_t *)PTR_I2C_Write_Reg_0800527c = DAT_08005280;\n  *(umain_0800522432_t *)PTR_I2C_Read_Reg_08005284 = DAT_08005288;\n  *(umain_0800522432_t *)PTR_Get_ms_tick_0800528c = DAT_08005290;\n  start_PTR_htim1_08005294_PWM(0);\n  start_PTR_htim1_08005294_PWM(0xc);\n  initialize_PTR_mpu6050_08005298();\n  start_PTR_htim2_0800529c_Base_IT();\n  start_Forkserver(0);\n  while(1);\n}\n",
            "called": [
                "HAL_TIM_PWM_Start",
                "HAL_TIM_Base_Start_IT",
                "MX_I2C1_Init",
                "startForkserver",
                "MX_TIM1_Init",
                "MX_GPIO_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config",
                "HAL_Init",
                "mpu6050_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_08005224"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_i2c1_08005348",
                "HVar1": "status",
                "PTR_hi2c1_080053a0": "i2c_config",
                "DAT_080053a4": "i2c_timing",
                "DAT_080053a8": "i2c_own_address"
            },
            "code": "void initialize_i2c1_08005348(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t PTR_hi2c1_080053a0[5] = {DAT_080053a4, DAT_080053a8, 0, 0, 0x4000};\n  status = HAL_I2C_Init((I2C_HandleTypeDef *)PTR_hi2c1_080053a0);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_080053ac,0x17a);\n  }\n  return;\n}",
            "called": [
                "_Error_Handler",
                "HAL_I2C_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_i2c1_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculateOffsets_080049cc",
                "mpu6050": "sensor",
                "acc_roll": "accelerometer_roll",
                "acc_pitch": "accelerometer_pitch",
                "now": "current_time",
                "num_samples": "numOfSamples",
                "i": "sampleIndex",
                "offset_accRoll": "accRollOffset",
                "offset_accPitch": "accPitchOffset",
                "offset_gyroY": "gyroYOffset",
                "offset_gyroX": "gyroXOffset"
            },
            "code": "void calculateOffsets_080049cc(Mpu6050 *mpu6050)\n{\n  uint32_t now;\n  int numOfSamples = 1;\n  float gyroXOffset = 0.0;\n  float gyroYOffset = 0.0;\n  float accPitchOffset = 0.0;\n  float accRollOffset = 0.0;\n  \n  now = (**(code **)PTR_Get_ms_tick_08004adc)();\n  for(int i = 0; i < numOfSamples; i++) {\n    float accPitch = 0.0;\n    float accRoll = 0.0;\n    mpu6050_update(mpu6050);\n    mpu6050_calc_acc_pitch_roll(mpu6050, &accPitch, &accRoll);\n    accPitchOffset += accPitch;\n    accRollOffset += accRoll;\n    gyroXOffset += mpu6050->gyroX;\n    gyroYOffset += mpu6050->gyroY;\n    now = (**(code **)PTR_Get_ms_tick_08004adc)();\n  }\n  mpu6050->offset_gyroX = gyroXOffset / numOfSamples;\n  mpu6050->offset_gyroY = gyroYOffset / numOfSamples;\n  mpu6050->offset_acc_pitch = accPitchOffset / numOfSamples;\n  mpu6050->offset_acc_roll = accRollOffset / numOfSamples;\n  return;\n}",
            "called": [
                "mpu6050_calc_acc_pitch_roll",
                "__addsf3",
                "__aeabi_fdiv",
                "mpu6050_update",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "mpu6050_init"
            ],
            "imported": false,
            "current_name": "calculateOffsets_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "configure_timer_08003c94",
                "TIMx": "timer",
                "Structure": "config",
                "tmpcr1": "cr1",
                "DAT_08003d54": "timer1",
                "(TIM_TypeDef *)0x40000000": "timer2",
                "DAT_08003d58": "timer3",
                "DAT_08003d5c": "timer4"
            },
            "code": "void configure_timer_08003c94(TIM_TypeDef *timer, TIM_Base_InitTypeDef *config) {\n  uint32_t cr1 = timer->CR1;\n  if (((timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000)) || (timer == timer2) || (timer == DAT_08003d58)) {\n    cr1 = config->CounterMode | cr1 & 0xffffff8f;\n  }\n  if (((timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000)) || ((timer == timer2) || (timer == DAT_08003d58))) {\n    cr1 = config->ClockDivision | cr1 & 0xfffffcff;\n  }\n  timer->CR1 = config->AutoReloadPreload | cr1 & 0xffffff7f;\n  timer->ARR = config->Period;\n  timer->PSC = config->Prescaler;\n  if (timer == DAT_08003d54) {\n    timer->RCR = config->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08003c94"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "heap_start",
                "param_2": "size_requested",
                "puVar1": "heap_lock_ptr",
                "puVar2": "mallinfo_ptr",
                "iVar3": "current_heap_end",
                "iVar4": "size_to_allocate",
                "uVar5": "heap_size"
            },
            "code": "int allocate_memory_0800884c(void *heap_start, int size_requested)\n{\n    void *heap_lock_ptr = PTR___malloc_av__080088e0;\n    __malloc_lock();\n    uint heap_size = *(uint *)(*(int *)(heap_lock_ptr + 8) + 4) & 0xfffffffc;\n    int size_to_allocate = ((0xfef - size_requested) + heap_size & 0xfffff000) - 0x1000;\n    if (0xfff < size_to_allocate) {\n        int current_heap_end = _sbrk_r(heap_start,0);\n        if (current_heap_end == *(int *)(heap_lock_ptr + 8) + heap_size) {\n            int new_heap_end = _sbrk_r(heap_start,-size_to_allocate);\n            void *mallinfo_ptr = PTR___malloc_current_mallinfo_080088e4;\n            if (new_heap_end != -1) {\n                int current_heap_size = *(int *)PTR___malloc_current_mallinfo_080088e4;\n                *(uint *)(*(int *)(heap_lock_ptr + 8) + 4) = heap_size - size_to_allocate | 1;\n                *(int *)mallinfo_ptr = current_heap_size - size_to_allocate;\n                __malloc_unlock(heap_start);\n                return 1;\n            }\n            int new_heap_end_2 = _sbrk_r(heap_start,0);\n            void *sbrk_base_ptr = PTR___malloc_sbrk_base_080088e8;\n            uint new_heap_size = new_heap_end_2 - *(int *)(heap_lock_ptr + 8);\n            if (0xf < (int)new_heap_size) {\n                int sbrk_base = *(int *)sbrk_base_ptr;\n                *(uint *)(*(int *)(heap_lock_ptr + 8) + 4) = new_heap_size | 1;\n                *(int *)mallinfo_ptr = new_heap_end_2 - sbrk_base;\n            }\n        }\n    }\n    __malloc_unlock(heap_start);\n    return 0;\n}",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_char_0800901c",
                "__s": "str",
                "__c": "ch",
                "__n": "count",
                "uVar1": "current",
                "uVar2": "comparison",
                "puVar3": "current_word",
                "puVar4": "current_byte",
                "uVar5": "target_char",
                "bVar6": "end_of_string"
            },
            "code": "void* find_char_0800901c(void* str, int ch, size_t count){\n    uint8_t target_char = ch & 0xff;\n    uint32_t* current_word = (uint32_t*)str;\n    if(((uint32_t)str & 3) == 0){\n        while(count >= 4){\n            uint32_t current = *current_word ^ ((target_char << 24) | (target_char << 16));\n            if((current + 0xfefefeff & ~current & 0x80808080) != 0){\n                uint8_t* current_byte = (uint8_t*)current_word;\n                for(size_t i = 0; i < 4; i++){\n                    if(current_byte[i] == target_char){\n                        return (void*)(current_byte + i);\n                    }\n                }\n            }\n            count -= 4;\n            current_word++;\n        }\n    }\n    uint8_t* current_byte = (uint8_t*)current_word;\n    for(size_t i = 0; i < count; i++){\n        if(current_byte[i] == target_char){\n            return (void*)(current_byte + i);\n        }\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "find_char_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_clk_source_0800177c",
                "CLKSource": "clk_source",
                "*DAT_080017b0": "clk_reg"
            },
            "code": "void set_clk_source_0800177c(uint32_t clk_source)\n{\n    if (clk_source == 4) {\n        *DAT_080017b0 |= 4;\n    }\n    else {\n        *DAT_080017b0 &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clk_source_0800177c"
        },
        "FUN_080099ec": {
            "renaming": {
                "FUN_080099ec": "get_first_byte_080099ec",
                "param_1": "default_value_if_zero",
                "param_2": "output_byte",
                "param_3": "input_data",
                "param_4": "input_length",
                "uVar1": "first_byte",
                "uStack_4": "first_byte"
            },
            "code": "uint get_first_byte_080099ec(uint default_value_if_zero, uint* output_byte, byte* input_data, int input_length) {\n  uint first_byte;\n  if (output_byte == NULL) {\n    output_byte = &first_byte;\n  }\n  if (input_data == NULL || input_length <= 0) {\n    return 0;\n  }\n  if (input_length == 0) {\n    *output_byte = default_value_if_zero;\n  }\n  else {\n    *output_byte = (uint)*input_data;\n    if (*output_byte != 0) {\n      *output_byte = 1;\n    }\n  }\n  return *output_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099ec",
            "calling": [],
            "imported": false,
            "current_name": "get_first_byte_080099ec"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_UART_08005598",
                "HVar1": "status",
                "DAT_080055ec": "baud_rate",
                "PTR_huart1_080055e8": "huart1",
                "UART_WORDLENGTH_8B": "word_length",
                "UART_STOPBITS_1": "stop_bits",
                "UART_PARITY_NONE": "parity",
                "UART_MODE_TX_RX": "mode",
                "UART_HWCONTROL_NONE": "flow_control"
            },
            "code": "void initialize_UART_08005598(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t DAT_080055ec = 115200;\n  uint32_t word_length = UART_WORDLENGTH_8B;\n  uint32_t stop_bits = UART_STOPBITS_1;\n  uint32_t parity = UART_PARITY_NONE;\n  uint32_t mode = UART_MODE_TX_RX;\n  uint32_t flow_control = UART_HWCONTROL_NONE;\n  *(uint32_t*)PTR_PTR_huart1_080055e8_080055e8 = DAT_080055ec;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 4) = word_length;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 8) = stop_bits;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 0xC) = parity;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 0x10) = mode;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 0x14) = flow_control;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 0x18) = 0;\n  *(uint32_t*)(PTR_PTR_huart1_080055e8_080055e8 + 0x1C) = 0;\n  status = HAL_UART_Init((UART_HandleTypeDef*)PTR_PTR_huart1_080055e8_080055e8);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_080055f0, 0x1ED);\n  }\n}\n",
            "called": [
                "_Error_Handler",
                "HAL_UART_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_UART_08005598"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  size_t sVar8;\n  int *piVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  int iVar13;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)_malloc_r(param_1,param_3);\n    return piVar4;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__08009e38;\n  uVar7 = param_2[-1];\n  uVar11 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar10 = 0x10;\n  }\n  else {\n    uVar10 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar10 < 0) goto LAB_08009b8e;\n  }\n  if (uVar10 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar13 = (int)piVar4 + uVar11;\n  uVar12 = uVar11;\n  if ((int)uVar11 < (int)uVar10) {\n    if (*(int *)(PTR___malloc_av__08009e38 + 8) == iVar13) {\n      iVar13 = (*(uint *)(*(int *)(PTR___malloc_av__08009e38 + 8) + 4) & 0xfffffffc) + uVar11;\n      if ((int)(uVar10 + 0x10) <= iVar13) {\n        *(uint *)(PTR___malloc_av__08009e38 + 8) = (int)piVar4 + uVar10;\n        *(uint *)((int)piVar4 + uVar10 + 4) = iVar13 - uVar10 | 1;\n        param_2[-1] = uVar10 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar10 + 0x10) <= (int)(iVar13 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          sVar8 = uVar11 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (sVar8 < 0x25) {\n            iVar3 = *param_2;\n            piVar9 = piVar4;\n            if (0x13 < sVar8) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (sVar8 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar9 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (sVar8 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar9 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar9 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar9 = iVar3;\n            piVar9[1] = param_2[1];\n            piVar9[2] = param_2[2];\n          }\n          else {\n            memmove(piVar4,param_2,sVar8);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar10;\n          *(uint *)((int)piVar2 + uVar10 + 4) = (iVar13 + uVar7) - uVar10 | 1;\n          piVar2[1] = uVar10 | piVar2[1] & 1U;\n          __malloc_unlock(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar12 = uVar11 + uVar7;\n        if ((int)uVar10 <= (int)uVar12) {\n          iVar6 = piVar2[3];\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar11 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          memmove(piVar9,param_2,uVar11 - 4);\n          param_2 = piVar9;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar13 + 4) & 0xfffffffe) + iVar13 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar13 + 4) & 0xfffffffc;\n        uVar12 = uVar11 + uVar5;\n        if ((int)uVar12 < (int)uVar10) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar12 = uVar5 + uVar7 + uVar11;\n          if ((int)uVar12 < (int)uVar10) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar13 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar13;\n          *(int *)(iVar13 + 8) = iVar3;\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar11 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar11 = uVar11 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar9;\n          if (0x13 < uVar11) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar11 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar11 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar9;\n        }\n        else {\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar6 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar4 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)_malloc_r(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar12 = uVar11 + (piVar2[-1] & 0xfffffffcU);\n        iVar13 = (int)piVar4 + uVar12;\n        goto LAB_08009c00;\n      }\n      sVar8 = uVar11 - 4;\n      if (sVar8 < 0x25) {\n        iVar13 = *param_2;\n        piVar4 = param_2;\n        piVar9 = piVar2;\n        if (0x13 < sVar8) {\n          *piVar2 = iVar13;\n          piVar2[1] = param_2[1];\n          if (sVar8 < 0x1c) {\n            iVar13 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar9 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (sVar8 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar13 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar9 = piVar2 + 6;\n            }\n            else {\n              iVar13 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar9 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar9 = iVar13;\n        piVar9[1] = piVar4[1];\n        piVar9[2] = piVar4[2];\n      }\n      else {\n        memmove(piVar2,param_2,sVar8);\n      }\n      _free_r(param_1,param_2);\n    }\n    __malloc_unlock(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar12 - uVar10 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar12;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar10;\n      *(uint *)((int)piVar4 + uVar10 + 4) = uVar12 - uVar10 | 1;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n      _free_r(param_1,(int)piVar4 + uVar10 + 8);\n    }\n    __malloc_unlock(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "memmove",
                "_malloc_r",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "i2c_read_08002640",
                "hi2c": "handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "HVar1": "status",
                "uVar2": "current_time",
                "tmpreg": "timeout_time"
            },
            "code": "HAL_StatusTypeDef i2c_read_08002640(I2C_HandleTypeDef* handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t tickstart)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_time;\n  uint32_t timeout_time = (timeout == 0xffffffff) ? 0xffffffff : tickstart + timeout;\n\n  handle->Instance->CR1 |= 0x100;\n  while ((handle->Instance->SR1 & 0x01) == 0) {\n    if (timeout_time != 0xffffffff && HAL_GetTick() >= timeout_time) {\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n\n  handle->Instance->DR = (device_address & 0xfe);\n  status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080027f0, timeout, tickstart);\n  if (status != HAL_OK) {\n    return (handle->ErrorCode == 4) ? HAL_ERROR : HAL_TIMEOUT;\n  }\n\n  status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout, tickstart);\n  if (status != HAL_OK) {\n    return (handle->ErrorCode == 4) ? HAL_ERROR : HAL_TIMEOUT;\n  }\n\n  if (memory_address_size == 1) {\n    handle->Instance->DR = (uint8_t)memory_address;\n  }\n  else {\n    handle->Instance->DR = (uint8_t)(memory_address >> 8);\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout, tickstart);\n    if (status != HAL_OK) {\n      return (handle->ErrorCode == 4) ? HAL_ERROR : HAL_TIMEOUT;\n    }\n    handle->Instance->DR = (uint8_t)memory_address;\n  }\n\n  return HAL_OK;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_read_08002640"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "print_formatted_string_08005dfc",
                "__s": "output_string",
                "__format": "format_string",
                "local_80": "args",
                "local_78": "max_output_length",
                "uStack_74": "max_arg_length",
                "local_70": "output_ptr",
                "local_6c": "max_output_length",
                "uStack_8": "arguments",
                "uStack_4": "unused_argument"
            },
            "code": "int print_formatted_string_08005dfc(char *output_string, char *format_string,...)\n{\n  int print_result;\n  char *args[2];\n  int max_output_length = 0x7fffffff;\n  int max_arg_length = 0x7fffffff;\n  char *output_ptr = output_string;\n  va_list arguments;\n  va_start(arguments, format_string);\n  print_result = vsnprintf(output_ptr, max_output_length, format_string, arguments);\n  va_end(arguments);\n  *output_ptr = '\\0';\n  return print_result;\n}",
            "called": [
                "_svfprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08005dfc"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "reverse_and_shift_bits_080003f4",
                "param_1": "input",
                "uVar1": "temp1",
                "uVar2": "unsigned_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "temp2",
                "uVar6": "input_sign_bit",
                "in_r12": "carry",
                "bVar7": "is_leading_zeroes_negative",
                "bVar8": "is_leading_zeroes_zero",
                "bVar9": "is_shift_amount_negative",
                "SBORROW4": "is_subtraction_overflow",
                "SCARRY4": "is_addition_overflow",
                "CONCAT44": "combine_64_bits",
                "0x80000000": "sign_bit"
            },
            "code": "ulonglong reverse_and_shift_bits_080003f4(uint input)\n{\n  uint unsigned_input = input;\n  uint leading_zeroes = count_leading_zeroes(unsigned_input);\n  uint shift_amount = leading_zeroes + 21;\n  bool is_shift_amount_negative = SBORROW4(shift_amount, 32);\n  bool is_shift_amount_zero = shift_amount == 0;\n  uint shift_result = 0;\n  uint carry = 0;\n  if (input == 0) {\n    return 0;\n  }\n  if ((int)(input & 0x80000000) < 0) {\n    unsigned_input = -input;\n  }\n  if ((int)shift_amount < 32) {\n    is_shift_amount_negative = SCARRY4(leading_zeroes, 12);\n    leading_zeroes++;\n    if (leading_zeroes < 0) {\n      is_shift_amount_negative = true;\n    }\n    if (leading_zeroes == 0) {\n      is_shift_amount_zero = true;\n    }\n    shift_amount = shift_amount & 0xff;\n    if (!is_shift_amount_zero && is_shift_amount_negative == SCARRY4(shift_amount, 12)) {\n      shift_result = unsigned_input << shift_amount;\n      carry = unsigned_input >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount, 32)) {\n    shift_amount = 32 - leading_zeroes;\n  }\n  shift_result = unsigned_input << (leading_zeroes & 0xff);\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount, 32)) {\n    shift_result = shift_result | 0U >> ((32 - leading_zeroes) & 0xff);\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount, 32)) {\n    carry = 0 << (leading_zeroes & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 1075) {\n    return CONCAT44(shift_result + (0x432 - shift_amount) * 0x100000 | (input & 0x80000000), carry);\n  }\n  uint inverse_shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)inverse_shift_amount) {\n    return CONCAT44(input, shift_result >> (inverse_shift_amount - 31 & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_difference = inverse_shift_amount - 19;\n  if (shift_amount_difference == 0 || shift_amount_difference < 0 != SCARRY4(inverse_shift_amount - 31, 12)) {\n    inverse_shift_amount++;\n    return CONCAT44((input & 0x80000000) | shift_result >> (inverse_shift_amount & 0xff), carry >> (inverse_shift_amount & 0xff) | shift_result << (0x20 - inverse_shift_amount & 0xff));\n  }\n  return CONCAT44(input, carry >> (0x20 - (0xcU - shift_amount_difference) & 0xff) | shift_result << (0xcU - shift_amount_difference & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "reverse_and_shift_bits_080003f4"
        },
        "FUN_0800045c": {
            "renaming": {
                "FUN_0800045c": "calculate_0800045c",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar2": "numerator_copy",
                "uVar3": "shift_count_copy",
                "uVar4": "denominator_copy",
                "uVar6": "shift_amount",
                "uVar8": "denominator_shifted",
                "iVar5": "leading_zeroes",
                "iVar7": "shift_count",
                "bit": "bit",
                "numerator_shifted": "numerator_shifted",
                "denominator_shifted": "denominator_shifted",
                "quotient": "quotient",
                "is_negative": "is_negative",
                "quotient_bit": "quotient_bit",
                "carry_bit": "carry_bit",
                "overflow": "overflow"
            },
            "code": "ulonglong calculate_0800045c(uint numerator, uint denominator)\n{\n  byte bit;\n  uint numerator_shifted;\n  uint denominator_shifted;\n  int shift_count;\n  uint quotient;\n  bool is_negative;\n  bool quotient_bit;\n  bool carry_bit;\n  bool overflow;\n\n  if ((numerator | denominator) == 0) {\n    return CONCAT44(denominator, numerator);\n  }\n\n  shift_count = 0x432;\n  denominator_shifted = denominator >> 0x16;\n\n  if (denominator_shifted != 0) {\n    shift_count = 3;\n    if (denominator >> 0x19 != 0) {\n      shift_count = 6;\n    }\n    if (denominator >> 0x1c != 0) {\n      shift_count += 3;\n    }\n    shift_count -= ((int)denominator >> 0x1f);\n    numerator_shifted = numerator << (0x20 - shift_count & 0xff);\n    numerator = numerator >> (shift_count & 0xff) | denominator << (0x20 - shift_count & 0xff);\n    denominator = denominator >> (shift_count & 0xff);\n    shift_count += 0x432;\n  }\n\n  if (0xfffff < denominator) {\n    if (0x1fffff < denominator) {\n      bit = (byte)numerator;\n      numerator = (uint)((denominator & 1) != 0) << 0x1f | numerator >> 1;\n      quotient_bit = (byte)(bit & 1);\n      denominator_shifted = denominator_shifted >> 1 | (uint)(quotient_bit != 0) << 0x1f;\n      shift_count++;\n      overflow = 0xffbfffff < (uint)(shift_count * 0x200000);\n      if (overflow) {\n        return 0x7ff0000000000000;\n      }\n    }\n\n    while ((denominator_shifted & 0x80000000) == 0) {\n      denominator_shifted <<= 1;\n      numerator_shifted = numerator_shifted * 2 + (uint)is_negative;\n      numerator = numerator * 2 + (uint)(carry_bit || quotient_bit);\n      shift_count--;\n    }\n\n    quotient = denominator_shifted + shift_count * 0x100000 + (uint)CARRY4(numerator, (uint)is_negative);\n    quotient_bit = (numerator & 0x7fffffff) < denominator_shifted;\n    numerator = numerator - denominator_shifted - (uint)quotient_bit;\n    numerator_shifted = numerator_shifted - (uint)(quotient_bit || is_negative);\n  }\n\n  if (denominator == 0) {\n    return 0x7ff0000000000000;\n  }\n\n  shift_count = count_leading_zeroes(denominator);\n  if (denominator == 0) {\n    shift_count += 0x20;\n  }\n\n  shift_count -= 0xb;\n  is_negative = SBORROW4(shift_count, 0x20);\n  carry_bit = (int)(shift_count - 0x2b) < 0;\n  quotient_bit = shift_count == 0;\n\n  if ((int)shift_count < 0x20) {\n    is_negative = SCARRY4(shift_count, 0xc);\n    shift_count -= 0x1f;\n    quotient_bit = shift_count == 0;\n    carry_bit = shift_count < 0;\n    if (!quotient_bit && carry_bit == is_negative) {\n      numerator_shifted = denominator_shifted << (shift_count & 0xff);\n      denominator_shifted = denominator_shifted >> (0xcU - shift_count & 0xff);\n      goto quotient_calculation;\n    }\n  }\n\n  if (quotient_bit || carry_bit != is_negative) {\n    bit = 0x20 - shift_count;\n  }\n\n  numerator_shifted = denominator_shifted << (shift_count & 0xff);\n\n  if (quotient_bit || carry_bit != is_negative) {\n    numerator_shifted |= numerator >> (bit & 0xff);\n  }\n\n  if (quotient_bit || carry_bit != is_negative) {\n    numerator = numerator << (shift_count & 0xff);\n  }\n\n  quotient_calculation:\n  if (shift_count <= 0x432) {\n    return CONCAT44(denominator_shifted + (0x432 - shift_count) * 0x100000, numerator);\n  }\n\n  shift_count = ~(shift_count - 0x432);\n\n  if (0x1e < (int)shift_count) {\n    return (ulonglong)(denominator_shifted >> (shift_count - 0x1f & 0xff));\n  }\n\n  if (shift_count == 0 || shift_count < 0 != SCARRY4(shift_count - 0x1f, 0xc)) {\n    shift_count++;\n    return CONCAT44(denominator_shifted >> (shift_count & 0xff), numerator >> (shift_count & 0xff) | denominator_shifted << (0x20 - shift_count & 0xff));\n  }\n\n  return (ulonglong)(numerator >> (0x20 - (0xcU - shift_count) & 0xff) | denominator_shifted << (0xcU - shift_count & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800045c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_0800045c"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "calculate_priority_0800166c",
                "PriorityGroup": "priority_group",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp",
                "uVar1": "priority_group_bits",
                "uVar2": "available_bits"
            },
            "code": "uint32_t calculate_priority_0800166c(uint32_t priority_group, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n  uint32_t priority_group_bits = priority_group & 0x07;\n  uint32_t available_bits = 7 - priority_group_bits;\n  if (available_bits > 3) {\n    available_bits = 4;\n  }\n  if ((priority_group_bits + 4) < 7) {\n    priority_group_bits = 0;\n  }\n  else {\n    priority_group_bits = priority_group_bits - 3;\n  }\n  sub_priority_bits = sub_priority & ~(-1 << (priority_group_bits & 0xff));\n  preempt_priority_bits = (~(-1 << (available_bits & 0xff)) & preempt_priority) << (priority_group_bits & 0xff);\n  return sub_priority_bits | preempt_priority_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "calculate_priority_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "enable_timer_interrupts_0800360c",
                "htim": "timer_handle",
                "->Instance->DIER": "->DIER",
                "->Instance->CR1": "->CR1",
                "| 1": " |= TIM_DIER_UIE / |= TIM_CR1_CEN",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef enable_timer_interrupts_0800360c(TIM_HandleTypeDef *timer_handle)\n{\n  timer_handle->Instance->DIER |= TIM_DIER_UIE;\n  timer_handle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_timer_interrupts_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "memset_custom_08005d68",
                "__s": "ptr",
                "__c": "value",
                "__n": "num",
                "puVar1": "current_ptr",
                "puVar2": "aligned_ptr",
                "puVar3": "end_ptr",
                "uVar4": "remaining_bytes",
                "uVar5": "aligned_value",
                "bVar6": "is_aligned"
            },
            "code": "void * memset_custom_08005d68(void *ptr, int value, size_t num)\n{\n  uint *current_ptr;\n  uint *aligned_ptr;\n  uint *end_ptr;\n  uint aligned_value;\n  uint remaining_bytes;\n  bool is_aligned;\n  current_ptr = (uint *)ptr;\n  is_aligned = ((uint)ptr & 3) == 0;\n  if (!is_aligned)\n  {\n    remaining_bytes = num - 1;\n    if (num == 0)\n    {\n      return ptr;\n    }\n    while (true)\n    {\n      current_ptr = (uint *)((int)current_ptr + 1);\n      *(char *)(current_ptr - 1) = (char)value;\n      num = remaining_bytes;\n      if (((uint)current_ptr & 3) == 0)\n      {\n        break;\n      }\n      remaining_bytes = remaining_bytes - 1;\n      if (remaining_bytes == 0)\n      {\n        return ptr;\n      }\n    }\n  }\n  if (num >= 4)\n  {\n    aligned_value = value & 0xffU | (value & 0xffU) << 8;\n    aligned_value = aligned_value | aligned_value << 0x10;\n    aligned_ptr = (uint *)((int)current_ptr & -4);\n    end_ptr = (uint *)((int)current_ptr + (num & -4));\n    while (current_ptr != aligned_ptr)\n    {\n      *current_ptr++ = value;\n    }\n    while (current_ptr != end_ptr)\n    {\n      *current_ptr++ = aligned_value;\n    }\n    num &= 3;\n  }\n  if (num != 0)\n  {\n    while (num--)\n    {\n      *(char *)current_ptr = (char)value;\n      current_ptr = (uint *)((int)current_ptr + 1);\n    }\n  }\n  return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "_calloc_r",
                "flush_strbuf"
            ],
            "imported": false,
            "current_name": "memset_custom_08005d68"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "initialize_timer_080035a4",
                "*htim": "*timer",
                "HVar1": "status",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR",
                "htim": "timer",
                "Instance": "Instance",
                "Init": "Init",
                "State": "State",
                "Lock": "Lock",
                "HAL_TIM_Base_MspInit": "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig"
            },
            "code": "HAL_StatusTypeDef initialize_timer_080035a4(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n\n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_Base_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_channel_state_080041ea",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "tmp": "channel_bit",
                "CCER": "channel_mask"
            },
            "code": "void set_channel_state_080041ea(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_state) {\n  uint32_t channel_bit = channel & 0xff;\n  uint32_t channel_mask = ~(1 << channel_bit);\n  timer->CCER &= channel_mask;\n  timer->CCER |= (channel_state << channel_bit);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "set_channel_state_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "read_mpu6050_data_08004ae0",
                "mpu6050": "mpu6050_data",
                "raw": "raw_data",
                "fVar1": "data_value",
                "gz": "gyro_z",
                "gy": "gyro_y",
                "gx": "gyro_x",
                "t": "temperature",
                "az": "acc_z",
                "ay": "acc_y",
                "ax": "acc_x"
            },
            "code": "void read_mpu6050_data_08004ae0(Mpu6050 *mpu6050) {\n    float acc_x;\n    float acc_y;\n    float acc_z;\n    float temperature;\n    float gyro_x;\n    float gyro_y;\n    float gyro_z;\n    uint8_t raw_data[14];\n    int16_t gz;\n    int16_t gy;\n    int16_t gx;\n    int16_t t;\n    int16_t az;\n    int16_t ay;\n    int16_t ax;\n    (**(code **)PTR_I2C_Read_Reg_08004bd4)(0xd0, 0x3b, raw_data, 0xe);\n    acc_x = (float)__floatsisf((int)CONCAT11(raw_data[0], raw_data[1]));\n    mpu6050->accX = acc_x;\n    acc_y = (float)__floatsisf((int)CONCAT11(raw_data[2], raw_data[3]));\n    mpu6050->accY = acc_y;\n    acc_z = (float)__floatsisf((int)CONCAT11(raw_data[4], raw_data[5]));\n    mpu6050->accZ = acc_z;\n    temperature = (float)__floatsisf((int)CONCAT11(raw_data[6], raw_data[7]));\n    mpu6050->temp = temperature;\n    gyro_x = (float)__floatsisf((int)CONCAT11(raw_data[8], raw_data[9]));\n    mpu6050->gyroX = gyro_x;\n    gyro_y = (float)__floatsisf((int)CONCAT11(raw_data[10], raw_data[11]));\n    mpu6050->gyroY = gyro_y;\n    gyro_z = (float)__floatsisf((int)CONCAT11(raw_data[12], raw_data[13]));\n    mpu6050->gyroZ = gyro_z;\n}",
            "called": [
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "read_mpu6050_data_08004ae0"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_bits_from_dataptr_080015fc",
                "DAT_08001614": "dataptr"
            },
            "code": "uint32_t get_bits_from_dataptr_080015fc(void)\n{\n  uint32_t *data_ptr = (uint32_t *)(DAT_08001614 + 0xc);\n  uint32_t bits = (*data_ptr >> 8) & 7;\n  return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "get_bits_from_dataptr_080015fc"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "is_initialized_08000110",
                "param_1": "init_data",
                "*PTR_completed_8655_08000128": "completed_flag",
                "DAT_0800012c": "init_value",
                "PTR__init_08000130": "init_ptr"
            },
            "code": "bool is_initialized_08000110(bool **PTR_completed_8655_08000128, int *DAT_0800012c, void *init_data) {\n  if (**PTR_completed_8655_08000128 == false) {\n    if (*DAT_0800012c != 0) {\n      init_data = PTR__init_08000130;\n    }\n    **PTR_completed_8655_08000128 = true;\n  }\n  return init_data;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "is_initialized_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_SystemCoreClock_08003504",
                "PTR_SystemCoreClock_08003514": "systemCoreClockPtr"
            },
            "code": "uint32_t get_SystemCoreClock_08003504(void)\n{\n  uint32_t* PTR_SystemCoreClock_08003514 = (uint32_t*) PTR_SystemCoreClock_08003514;\n  return *PTR_SystemCoreClock_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_SystemCoreClock_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08000c2c": {
            "renaming": {
                "FUN_08000c2c": "calculate_08000c2c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "dividend",
                "uVar2": "divisor",
                "iVar3": "shift",
                "uVar4": "shifted_divisor",
                "iVar5": "constant",
                "uVar6": "shifted_dividend"
            },
            "code": "uint calculate_08000c2c(uint num1, uint num2)\n{\n  if ((num1 | num2) == 0) {\n    return num1;\n  }\n  uint dividend = num1;\n  uint divisor = num2;\n  if (num2 == 0) {\n    dividend = 0;\n    divisor = num1;\n  }\n  int constant = 0x5b000000;\n  if (num2 == 0) {\n    constant = 0x4b000000;\n  }\n  int shift = count_leading_zeroes(divisor) - 8;\n  constant = constant + -0x800000 + shift * -0x800000;\n  if (shift < 0) {\n    uint shifted_divisor = divisor << (shift + 0x18U & 0xff);\n    divisor = constant + ((divisor >> (0x20 - (shift + 0x18U) & 0xff)) - ((int)shifted_divisor >> 0x1f));\n    if ((dividend | shifted_divisor << 1) == 0) {\n      divisor = divisor & ~(shifted_divisor >> 0x1f);\n    }\n    return divisor;\n  }\n  uint shifted_dividend = dividend << (shift & 0xff);\n  divisor = constant + (divisor << (shift & 0xff)) + (dividend >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < shifted_dividend);\n  if (shifted_dividend == 0x80000000) {\n    divisor = divisor & 0xfffffffe;\n  }\n  return divisor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c2c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000c2c"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback",
                "__aeabi_frsub"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "isEndOfString_080009ac",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009ac(void)\n{\n  char currentChar;\n  __aeabi_cdcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009ac"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "*huart": "*uart_handle",
                "HVar1": "status",
                "huart": "uart_handle"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800438a(UART_HandleTypeDef *uart_handle) {\n  HAL_StatusTypeDef status;\n  if (uart_handle == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (uart_handle->gState == HAL_UART_STATE_RESET) {\n      uart_handle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handle);\n    }\n    uart_handle->gState = HAL_UART_STATE_BUSY;\n    uart_handle->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart_handle);\n    uart_handle->Instance->CR2 &= ~(1 << 11);\n    uart_handle->Instance->CR3 &= ~(1 << 2);\n    uart_handle->Instance->CR1 |= (1 << 13);\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_READY;\n    uart_handle->RxState = HAL_UART_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "MX_USART1_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "initializeSystem_080014f0",
                "FUN_080014f0Tick": "initializeSystemTick",
                "PTR_DAT_08001518": "data_register",
                "HAL_StatusTypeDef": "status"
            },
            "code": "HAL_StatusTypeDef initializeSystem_080014f0(void)\n{\n  *PTR_DAT_08001518 = *PTR_DAT_08001518 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  initializeSystem_080014f0Tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_080014f0"
        },
        "FUN_0800046c": {
            "renaming": {
                "FUN_0800046c": "multiply_uints_0800046c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "bVar1": "sign_bit",
                "uVar2": "product_low",
                "uVar3": "multiplier_abs",
                "uVar4": "shift_count",
                "iVar5": "leading_zero_count",
                "product_high": "product_high",
                "bVar10": "carry_flag",
                "bVar11": "sign_flag",
                "bVar12": "overflow_flag",
                "uVar6": "multiplicand_abs",
                "iVar7": "shift_count"
            },
            "code": "ulonglong multiply_uints_0800046c(uint multiplicand, uint multiplier)\n{\n    byte sign_bit;\n    uint multiplicand_abs;\n    uint multiplier_abs;\n    int shift_count;\n    uint product_high;\n    uint product_low;\n    bool carry_flag;\n    bool sign_flag;\n    bool overflow_flag;\n    if ((multiplicand | multiplier) == 0) {\n        return CONCAT44(multiplier, multiplicand);\n    }\n    sign_bit = 0;\n    if (multiplier & 0x80000000) {\n        sign_bit = 1;\n        multiplicand_abs = -multiplicand;\n        multiplier_abs = -multiplier - (uint)(multiplicand != 0);\n    } else {\n        multiplicand_abs = multiplicand;\n        multiplier_abs = multiplier;\n    }\n    shift_count = 0x432;\n    if (multiplier_abs >> 0x16) {\n        shift_count = 3;\n        if (multiplier_abs >> 0x19) {\n            shift_count = 6;\n        }\n        if (multiplier_abs >> 0x1c) {\n            shift_count += 3;\n        }\n        shift_count -= (int)(multiplier_abs >> 0x1f);\n        product_high = multiplicand_abs << (0x20 - shift_count);\n        multiplicand_abs = (multiplicand_abs >> shift_count) | (multiplier_abs << (0x20 - shift_count));\n        multiplier_abs >>= shift_count;\n        shift_count += 0x432;\n    }\n    if (multiplier_abs > 0xfffff) {\n        if (multiplier_abs > 0x1fffff) {\n            sign_flag = (multiplicand_abs & 1) != 0;\n            multiplicand_abs >>= 1;\n            product_high = (uint)(multiplier_abs & 1) << 0x1f | product_high >> 1;\n            shift_count++;\n            if ((uint)(shift_count * 0x200000) > 0xffbfffff) {\n                return (ulonglong)(sign_bit | 0x7ff00000) << 0x20;\n            }\n        }\n        while (product_high > 0x7fffffff) {\n            product_high >>= 1;\n            sign_flag = (multiplicand_abs & 1) != 0;\n            multiplicand_abs >>= 1;\n            product_high |= (uint)sign_flag << 0x1f;\n            shift_count++;\n        }\n        overflow_flag = multiplicand_abs > 0x7fffffff;\n        if (multiplier_abs == 0x80000000) {\n            overflow_flag = (multiplicand_abs & 1) != 0;\n        }\n        return CONCAT44(multiplier_abs + (uint)overflow_flag + shift_count * 0x100000 | (ulonglong)sign_bit << 0x20, multiplicand_abs + overflow_flag);\n    }\n    carry_flag = multiplier_abs & 0x80000000;\n    multiplier_abs <<= 1;\n    product_low = multiplicand_abs * 2 + (uint)carry_flag;\n    product_high = multiplier_abs * 2 + (uint)(carry_flag || (product_low & 0x80000000));\n    shift_count--;\n    while ((product_high & 0x100000) == 0) {\n        carry_flag = product_low & 0x80000000;\n        product_low <<= 1;\n        product_high = (multiplier_abs << 1) + (uint)(carry_flag || (product_low & 0x80000000));\n        multiplier_abs <<= 1;\n        shift_count--;\n    }\n    if (shift_count <= 0) {\n        return CONCAT44(product_high | (ulonglong)sign_bit << 0x20, multiplier_abs);\n    }\n    overflow_flag = shift_count - 0x13 < 0;\n    if (shift_count - 0x1f > 0 || (shift_count - 0x1f == 0 && overflow_flag)) {\n        return (ulonglong)sign_bit << 0x20;\n    }\n    if (shift_count - 0xb <= 0x1e) {\n        product_high = (product_high + (shift_count - 0xb) * 0x100000) | (ulonglong)sign_bit << 0x20;\n        return CONCAT44(product_high, multiplier_abs);\n    }\n    shift_count = ~(shift_count - 0xb);\n    product_high = (product_high >> shift_count) | (ulonglong)sign_bit << 0x20;\n    multiplier_abs = (multiplier_abs >> shift_count) | (product_high << (0x20 - shift_count));\n    product_high >>= shift_count;\n    return CONCAT44(product_high, multiplier_abs);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800046c",
            "calling": [],
            "imported": false,
            "current_name": "multiply_uints_0800046c"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "is_not_equal_to_0_080009c0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_not_equal_to_0_080009c0(void)\n{\n  bool is_CY_zero = __aeabi_cdcmpeq();\n  bool is_ZR_zero = (bool)in_ZR;\n  return !is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_0_080009c0"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "configure_timer_08003f18",
                "*TIMx": "*timer",
                "*OC_Config": "*config",
                "uVar1": "mode",
                "uVar2": "tmp_ccer",
                "tmpccmrx": "tmp_ccmr2",
                "tmpcr2": "tmp_cr2",
                "tmpccer": "tmp_ccer",
                "0xfffffeff": "~(1 << 8)",
                "0xfffffdff": "0xfffffdff",
                "0xfffff7ff": "0xfffffbff",
                "0xfffffbff": "0xfffffbff",
                "TIMx->CCER": "timer->CCER",
                "TIMx->CR2": "timer->CR2",
                "OC_Config->OCMode": "config->OCMode",
                "OC_Config->OCPolarity": "config->OCPolarity",
                "OC_Config->OCNPolarity": "config->OCNPolarity",
                "OC_Config->OCIdleState": "config->OCIdleState",
                "OC_Config->OCNIdleState": "config->OCNIdleState",
                "TIMx->CCMR2": "timer->CCMR2",
                "OC_Config->Pulse": "config->Pulse",
                "TIMx->CCR3": "timer->CCR3"
            },
            "code": "void configure_timer_08003f18(TIM_TypeDef *timer, TIM_OC_InitTypeDef *config) {\n  uint32_t tmp_ccer;\n  uint32_t tmp_cr2;\n  uint32_t tmp_ccmr2;\n  uint8_t polarity_shift = 8;\n  uint32_t polarity_mask = 0xfffffdff;\n  uint32_t n_polarity_mask = 0xfffffbff;\n\n  // Disable output\n  timer->CCER &= ~(1 << 8);\n\n  tmp_cr2 = timer->CR2;\n  uint8_t mode = config->OCMode;\n\n  // Configure polarity\n  tmp_ccer = (config->OCPolarity << polarity_shift) | (timer->CCER & polarity_mask);\n  if (timer == DAT_08003ff4) {\n    tmp_ccer &= n_polarity_mask;\n    tmp_ccer |= (config->OCNPolarity << polarity_shift);\n    tmp_cr2 &= 0xffffcfff;\n    tmp_cr2 |= (config->OCNIdleState << 4) | (config->OCIdleState << 4);\n  }\n\n  // Configure output compare\n  tmp_ccmr2 = mode | (timer->CCMR2 & 0xffffff8c);\n  timer->CCR3 = config->Pulse;\n\n  // Enable output\n  timer->CCER = tmp_ccer;\n  timer->CR2 = tmp_cr2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "reverse_and_improve_code_080097cc",
                "param_1": "error_code",
                "param_2": "src_data",
                "param_3": "src_data_len",
                "pvVar1": "src_ptr",
                "pvVar2": "dst_start_ptr",
                "iVar3": "remaining_data_len",
                "pvVar4": "dst_end_ptr",
                "pvVar5": "dst_start_ptr",
                "ppvVar6": "src_data_ptr",
                "ppvVar7": "src_data_end_ptr",
                "__src": "src_data_ptr[0]",
                "__n": "data_len",
                "data_len": "data_len",
                "dst_data_ptr": "dst_data_ptr",
                "src_data_ptr": "src_data_ptr",
                "src_data_end_ptr": "src_data_end_ptr",
                "dst_start_ptr": "dst_start_ptr",
                "dst_end_ptr": "dst_end_ptr",
                "remaining_data_len": "remaining_data_len",
                "src_ptr": "src_ptr",
                "dst_ptr": "dst_ptr",
                "src_data_len": "src_data_len",
                "src_data": "src_data",
                "error_code": "error_code"
            },
            "code": "undefined4 reverse_and_improve_code_080097cc(undefined4 *error_code, void **src_data, int *src_data_len)\n{\n  void *src_ptr;\n  void *dst_ptr;\n  int remaining_data_len;\n  void *dst_end_ptr;\n  void *dst_start_ptr;\n  void **src_data_ptr;\n  void **src_data_end_ptr;\n  void *dst_data_ptr;\n  size_t data_len;\n  if (src_data_len[2] != 0) {\n    src_ptr = *src_data;\n    dst_end_ptr = src_data[2];\n    src_data_ptr = (void **)*src_data_len;\n    src_data_end_ptr = src_data_ptr + (src_data_len[2] / 0x8);\n    remaining_data_len = src_data_len[2];\n    while (remaining_data_len != 0) {\n      src_data_ptr += 2;\n      if (src_data_ptr[1] != NULL) {\n        dst_start_ptr = src_data_ptr[1];\n        if (dst_end_ptr <= dst_start_ptr) {\n          dst_start_ptr = dst_end_ptr;\n          if ((*(ushort *)(src_data + 3) & 0x480) != 0) {\n            data_len = (int)src_ptr - (int)src_data[4];\n            dst_end_ptr = (void *)((int)src_data[5] * 3 / 2);\n            dst_ptr = (void *)((int)dst_start_ptr + data_len + 1);\n            if (dst_end_ptr < dst_ptr) {\n              dst_end_ptr = dst_ptr;\n            }\n            if ((int)((uint)*(ushort *)(src_data + 3) << 0x15) < 0) {\n              dst_data_ptr = (void *)_malloc_r(error_code, dst_end_ptr);\n              if (dst_data_ptr == NULL) {\n                *error_code = 0xc;\n                *(ushort *)(src_data + 3) = *(ushort *)(src_data + 3) | 0x40;\n                src_data_len[1] = 0;\n                src_data_len[2] = 0;\n                return 0xffffffff;\n              }\n              memcpy(dst_data_ptr, src_data[4], data_len);\n              *(ushort *)(src_data + 3) = *(ushort *)(src_data + 3) & 0xfb7f | 0x80;\n            }\n            else {\n              dst_data_ptr = (void *)_realloc_r(error_code, src_data[4], dst_end_ptr);\n              if (dst_data_ptr == NULL) {\n                _free_r(error_code, src_data[4]);\n                *error_code = 0xc;\n                *(ushort *)(src_data + 3) = *(ushort *)(src_data + 3) | 0x40;\n                src_data_len[1] = 0;\n                src_data_len[2] = 0;\n                return 0xffffffff;\n              }\n            }\n            dst_ptr = (void *)((int)dst_data_ptr + data_len);\n            src_data[5] = dst_end_ptr;\n            src_data[4] = dst_data_ptr;\n            *src_data = dst_ptr;\n            src_data[2] = (void *)((int)dst_end_ptr - data_len);\n            dst_start_ptr = src_data_ptr[1];\n          }\n        }\n        memmove(dst_start_ptr, src_data_ptr[0], (size_t)dst_start_ptr);\n        remaining_data_len -= (int)dst_start_ptr;\n        dst_end_ptr = (void *)((int)src_data[2] - (int)dst_start_ptr);\n        src_ptr = (void *)((int)*src_data + (int)dst_start_ptr);\n        src_data[2] = dst_end_ptr;\n        *src_data = src_ptr;\n        src_data_len[2] = remaining_data_len;\n      }\n    }\n  }\n  src_data_len[1] = 0;\n  return 0;\n}",
            "called": [
                "_malloc_r",
                "memmove",
                "_free_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_code_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08001f6c(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint uVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t Tickstart;\n  uint32_t uVar3;\n  char cVar4;\n  uint uVar5;\n  int iVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  \n  Tickstart = HAL_GetTick();\n  uVar1 = DAT_080021e0;\n  if (hi2c->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\n        uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      else {\n        uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      if (cVar4 != '\\x01') {\n        iVar6 = 0;\n        goto LAB_08002040;\n      }\n      uVar3 = HAL_GetTick();\n    } while (uVar3 - Tickstart < 0x1a);\n    hi2c->PreviousState = 0;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->Mode = HAL_I2C_MODE_NONE;\n    hi2c->Lock = HAL_UNLOCKED;\n    iVar6 = 3;\nLAB_08002040:\n    if (iVar6 == 0) {\n      if (hi2c->Lock == HAL_LOCKED) {\n        HVar2 = HAL_BUSY;\n      }\n      else {\n        hi2c->Lock = HAL_LOCKED;\n        if ((hi2c->Instance->CR1 & 1) != 1) {\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 1;\n        }\n        hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffff7ff;\n        hi2c->State = HAL_I2C_STATE_BUSY_RX;\n        hi2c->Mode = HAL_I2C_MODE_MEM;\n        hi2c->ErrorCode = 0;\n        hi2c->pBuffPtr = pData;\n        hi2c->XferCount = Size;\n        hi2c->XferOptions = DAT_080021e4;\n        hi2c->XferSize = hi2c->XferCount;\n        HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout,Tickstart);\n        if (HVar2 == HAL_OK) {\n          if (hi2c->XferSize == 0) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n          }\n          else if (hi2c->XferSize == 1) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (hi2c->XferSize == 2) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x800;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x400;\n          }\n          while (uVar1 = DAT_080024bc, hi2c->XferSize != 0) {\n            if (hi2c->XferSize < 4) {\n              if (hi2c->XferSize == 1) {\n                HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n                if (HVar2 != HAL_OK) {\n                  if (hi2c->ErrorCode == 0x20) {\n                    return HAL_TIMEOUT;\n                  }\n                  return HAL_ERROR;\n                }\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else if (hi2c->XferSize == 2) {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_080022fa:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                disableIRQinterrupts();\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_08002418:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                uVar1 = DAT_080024bc;\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_0800250a:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n            else {\n              HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n              if (HVar2 != HAL_OK) {\n                if (hi2c->ErrorCode == 0x20) {\n                  return HAL_TIMEOUT;\n                }\n                return HAL_ERROR;\n              }\n              uVar3 = hi2c->Instance->DR;\n              puVar7 = hi2c->pBuffPtr;\n              hi2c->pBuffPtr = puVar7 + 1;\n              *puVar7 = (uint8_t)uVar3;\n              hi2c->XferSize = hi2c->XferSize - 1;\n              hi2c->XferCount = hi2c->XferCount - 1;\n              if ((hi2c->Instance->SR1 & 4) == 4) {\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n          }\n          hi2c->State = HAL_I2C_STATE_READY;\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_OK;\n        }\n        else if (hi2c->ErrorCode == 4) {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_ERROR;\n        }\n        else {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      HVar2 = HAL_BUSY;\n    }\n  }\n  else {\n    HVar2 = HAL_BUSY;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "_i2c_read_reg"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "do_nothing_080014ec"
            },
            "code": "\nvoid do_nothing_080014ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080014ec"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_quotient_08000c3c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "dividend_copy",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "iVar6": "intermediate_value",
                "uVar5": "sign_bit",
                "bVar8": "dividend_is_nonzero"
            },
            "code": "uint calculate_quotient_08000c3c(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint sign_bit = divisor & 0x80000000;\n  if (sign_bit < 0) {\n    bool dividend_is_nonzero = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)dividend_is_nonzero;\n  }\n  uint dividend_copy = dividend;\n  uint divisor_copy = divisor;\n  if (divisor == 0) {\n    dividend_copy = 0;\n    divisor_copy = dividend;\n  }\n  sign_bit = sign_bit | 0x5b000000;\n  if (divisor == 0) {\n    sign_bit = sign_bit + 0xf0000000;\n  }\n  int leading_zeroes_count = count_leading_zeroes(divisor_copy);\n  uint shift_amount = leading_zeroes_count - 8;\n  int intermediate_value = (sign_bit - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes_count < 8) {\n    uint shifted_dividend = divisor_copy << (leading_zeroes_count + 0x18U & 0xff);\n    uint quotient_candidate = intermediate_value + ((divisor_copy >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_dividend >> 0x1f));\n    if ((dividend_copy | shifted_dividend << 1) == 0) {\n      quotient_candidate = quotient_candidate & ~(shifted_dividend >> 0x1f);\n    }\n    quotient = quotient_candidate;\n  }\n  else {\n    uint shifted_dividend = dividend_copy << (shift_amount & 0xff);\n    quotient = intermediate_value + (divisor_copy << (shift_amount & 0xff)) + (dividend_copy >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_dividend);\n    if (shifted_dividend == 0x80000000) {\n      quotient = quotient & 0xfffffffe;\n    }\n  }\n  return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_08000c3c"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_HCLK_frequency_divided_by_APB_prescaler_08003518",
                "uVar1": "HCLK_frequency",
                "DAT_08003538": "data_pointer",
                "PTR_APBPrescTable_0800353c": "APB_prescaler_table",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler_value": "APB_prescaler_value",
                "HCLK_frequency_divided_by_APB_prescaler": "HCLK_frequency_divided_by_APB_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003518(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(uint *)(DAT_08003538 + 4) >> 8) & 7;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_0800353c[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_value;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003518"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_other_bits_08005780",
                "*DAT_080057dc": "data_pointer",
                "DAT_080057e0": "second_word_mask",
                "DAT_080057dc[1]": "second_word",
                "*DAT_080057dc & 0xfef6ffff": "first_word_cleared_bit_16_and_17",
                "*DAT_080057dc & 0xfffbffff": "first_word_cleared_bit_18",
                "DAT_080057dc[1] & 0xff80ffff": "second_word_cleared_bits_16_to_23",
                "DAT_080057dc[2]": "third_word",
                "0x9f0000": "third_word_value",
                "*(undefined4 *)(DAT_080057e4 + 8)": "value_at_e4_plus_8"
            },
            "code": "void set_bit_and_clear_other_bits_08005780(void)\n{\n  unsigned int* *DAT_080057dc = DAT_080057dc;\n  unsigned int first_word = **DAT_080057dc;\n  unsigned int DAT_080057dc[1] = *DAT_080057dc[1];\n  unsigned int DAT_080057dc[2] = *DAT_080057dc[2];\n\n  first_word |= 1;\n  DAT_080057dc[1] &= DAT_080057e0;\n  first_word &= 0xfef6ffff;\n  first_word &= 0xfffbffff;\n  DAT_080057dc[1] &= 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int*)(DAT_080057e4 + 8) = 0x8000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_08005780"
        },
        "FUN_08000fe0": {
            "renaming": {
                "FUN_08000fe0": "is_not_null_08000fe0",
                "in_ZR": "input"
            },
            "code": "bool is_not_null_08000fe0(char input) {\n    __aeabi_cfcmpeq();\n    return input != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fe0",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_08000fe0"
        },
        "FUN_08008818": {
            "renaming": {
                "FUN_08008818": "call_global_destructors_08008818",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_ptr",
                "PTR___fini_array_end_08008844": "fini_array_end",
                "PTR___do_global_dtors_aux_fini_array_entry_08008848": "global_dtors_end"
            },
            "code": "void call_global_destructors_08008818(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_08008844 - (int)PTR___do_global_dtors_aux_fini_array_entry_08008848 >> 2;\n  if (num_destructors != 0) {\n    code **destructor_ptr = (code **)(PTR___do_global_dtors_aux_fini_array_entry_08008848 + (num_destructors + 0x3fffffff) * 4);\n    do {\n      num_destructors--;\n      (**destructor_ptr)();\n      destructor_ptr--;\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "__do_global_dtors_aux",
                "_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008818",
            "calling": [],
            "imported": false,
            "current_name": "call_global_destructors_08008818"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "calculate_shifted_value_08000418",
                "param_1": "value",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "shift_amount",
                "uVar1": "sign_bit",
                "uVar2": "temp_value2",
                "uVar3": "shifted_value",
                "uVar4": "shifted_value_difference",
                "uVar5": "temp_value",
                "uVar7": "shifted_amount",
                "iVar6": "leading_zeros",
                "bVar8": "is_shifted_amount_zero",
                "bVar9": "is_temp_value_zero",
                "bVar10": "is_shifted_amount_negative_xor_overflow"
            },
            "code": "uint64_t calculate_shifted_value_08000418(uint32_t value, uint32_t unused_param1, uint32_t unused_param2, uint32_t shift_amount)\n{\n    uint32_t temp_value = value << 1;\n    bool is_temp_value_zero = temp_value == 0;\n    uint32_t sign_bit = ((value & 0x80000000) != 0) << 0x1f;\n    uint32_t shifted_value = (uint32_t)(((int)temp_value >> 3) >> 1) | sign_bit;\n    value = value << 0x1d;\n    if (!is_temp_value_zero)\n    {\n        uint32_t temp_value_masked = temp_value & 0xff000000;\n        if (temp_value_masked != 0 && temp_value_masked != 0xff000000)\n        {\n            return ((uint64_t)shifted_value << 32) | value ^ 0x3800000000000000;\n        }\n    }\n    if ((temp_value & 0xffffff) == 0)\n    {\n        return ((uint64_t)shifted_value << 32) | value;\n    }\n    if ((temp_value & 0xff000000) == 0xff000000)\n    {\n        return ((uint64_t)shifted_value << 32) | value | 0x8000000000000;\n    }\n    uint32_t temp_shifted_value = shifted_value;\n    uint32_t temp_value2 = value;\n    if (shifted_value == 0)\n    {\n        temp_shifted_value = 0;\n        temp_value2 = value;\n    }\n    int leading_zeros = count_leading_zeroes(shifted_value);\n    if (shifted_value == 0)\n    {\n        leading_zeros += 0x20;\n    }\n    uint32_t shifted_amount = leading_zeros - 0xb;\n    bool is_shifted_amount_negative = shifted_amount < 0;\n    bool is_shifted_amount_zero = shifted_amount == 0;\n    bool is_shifted_amount_negative_xor_overflow = (int)(shifted_amount - 0x20) < 0;\n    if (shifted_amount < 0x20)\n    {\n        if (is_shifted_amount_negative_xor_overflow)\n        {\n            temp_value = temp_value2 << (shifted_amount & 0xff);\n            temp_shifted_value = shifted_value >> (0xcU - leading_zeros & 0xff);\n        }\n        else if (!is_shifted_amount_zero && is_shifted_amount_negative == is_shifted_amount_negative_xor_overflow)\n        {\n            temp_value = shifted_value << (shifted_amount & 0xff);\n            temp_shifted_value = shifted_value >> (0xcU - leading_zeros & 0xff);\n        }\n    }\n    else\n    {\n        uint32_t shifted_value_difference = ~(0x380 - shifted_amount);\n        if (shifted_value_difference > 0x1e)\n        {\n            return ((uint64_t)(temp_shifted_value + (0x380 - shifted_amount) * 0x100000 | sign_bit) << 32) | temp_value2;\n        }\n        int shifted_value_difference2 = shifted_value_difference - 0x13;\n        bool shifted_value_difference2_is_zero = shifted_value_difference2 == 0;\n        bool shifted_value_difference2_is_negative = shifted_value_difference2 < 0;\n        bool shifted_value_difference2_is_negative_xor_overflow = (shifted_value_difference2 - 0x1f < 0xc) != shifted_value_difference2_is_negative;\n        if (shifted_value_difference2_is_zero || (shifted_value_difference2 < 0x20 && shifted_value_difference2_is_negative == shifted_value_difference2_is_negative_xor_overflow))\n        {\n            shifted_value_difference++;\n            return ((uint64_t)(sign_bit | shifted_value >> (shifted_value_difference & 0xff)) << 32) | (temp_value2 >> (shifted_value_difference & 0xff) | shifted_value << (0x20 - shifted_value_difference & 0xff));\n        }\n        return ((uint64_t)shifted_value << 32) | (temp_value2 >> (0x20 - (0xcU - shifted_value_difference2) & 0xff) | shifted_value << (0xcU - shifted_value_difference2 & 0xff))) & 0x80000000ffffffff;\n    }\n    return ((uint64_t)temp_shifted_value << 32) | temp_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000418"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "initialize_GPIO_pins_080055f4",
                "tmpreg_2": "control_reg_2",
                "tmpreg_1": "control_reg_1",
                "tmpreg": "control_reg",
                "GPIO_InitStruct": "GPIO_Init_Struct"
            },
            "code": "void initialize_GPIO_pins_080055f4(void)\n{\n  uint32_t control_reg_2;\n  uint32_t control_reg_1;\n  uint32_t control_reg;\n  GPIO_InitTypeDef GPIO_Init_Struct;\n  \n  control_reg_2 = *(uint *)(DAT_0800566c + 0x18) | 0x20;\n  control_reg_1 = control_reg_2 | 4;\n  control_reg = control_reg_1 | 8;\n  \n  HAL_GPIO_WritePin(DAT_08005670,0x1e,GPIO_PIN_RESET);\n  \n  GPIO_Init_Struct.Pin = 0x1e;\n  GPIO_Init_Struct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_HIGH;\n  \n  HAL_GPIO_Init(DAT_08005670,&GPIO_Init_Struct);\n  \n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_GPIO_pins_080055f4"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_TIM1_PWM_080053b0",
                "HVar1": "status",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "sConfigOC": "output_compare_config",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config"
            },
            "code": "void initialize_TIM1_PWM_080053b0(void)\n{\n    HAL_StatusTypeDef status;\n    TIM_BreakDeadTimeConfigTypeDef break_dead_time_config;\n    TIM_OC_InitTypeDef output_compare_config;\n    TIM_MasterConfigTypeDef master_config;\n    TIM_ClockConfigTypeDef clock_config;\n    \n    htim1.Instance = TIM1;\n    htim1.Init.Prescaler = 0;\n    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;\n    htim1.Init.Period = 100;\n    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n    htim1.Init.RepetitionCounter = 0;\n    status = HAL_TIM_Base_Init(&htim1);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n    status = HAL_TIM_ConfigClockSource(&htim1, &clock_config);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    status = HAL_TIM_PWM_Init(&htim1);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n    master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n    status = HAL_TIMEx_MasterConfigSynchronization(&htim1, &master_config);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    output_compare_config.OCMode = TIM_OCMODE_PWM1;\n    output_compare_config.Pulse = 0;\n    output_compare_config.OCPolarity = TIM_OCPOLARITY_HIGH;\n    output_compare_config.OCFastMode = TIM_OCFAST_DISABLE;\n    status = HAL_TIM_PWM_ConfigChannel(&htim1, &output_compare_config, TIM_CHANNEL_1);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    status = HAL_TIM_PWM_ConfigChannel(&htim1, &output_compare_config, TIM_CHANNEL_2);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    break_dead_time_config.OffStateRunMode = TIM_OSSR_DISABLE;\n    break_dead_time_config.OffStateIDLEMode = TIM_OSSI_DISABLE;\n    break_dead_time_config.LockLevel = TIM_LOCKLEVEL_OFF;\n    break_dead_time_config.DeadTime = 0;\n    break_dead_time_config.BreakState = TIM_BREAK_DISABLE;\n    break_dead_time_config.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n    break_dead_time_config.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n    status = HAL_TIMEx_ConfigBreakDeadTime(&htim1, &break_dead_time_config);\n    if (status != HAL_OK) {\n        _Error_Handler(__FILE__, __LINE__);\n    }\n    \n    HAL_TIM_MspPostInit(&htim1);\n}\n",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_MspPostInit",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_TIM1_PWM_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "calculate_ticks_080016d0",
                "ticks": "input_ticks",
                "bVar1": "is_valid_tick",
                "DAT_08001710": "PTR_SYSTICK_LOAD",
                "SysTick_IRQn": "SysTickInterrupt",
                "*DAT_08001710": "*PTR_SYSTICK_CTRL"
            },
            "code": "uint32_t calculate_ticks_080016d0(uint32_t ticks)\n{\n    bool is_valid_tick = (ticks - 1) < 0x1000000;\n    if (is_valid_tick) {\n        DAT_08001710[1] = ticks - 1;\n        NVIC_SetPriority(SysTick_IRQn, 0xf);\n        DAT_08001710[2] = 0;\n        *DAT_08001710 = 7;\n    }\n    return (uint)!is_valid_tick;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_080016d0"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "calculate_result_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp5",
                "unaff_r4": "temp4",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "in_r12": "temp1",
                "bVar4": "is_input1_input2_zero"
            },
            "code": "ulonglong calculate_result_0800088a(uint input1, uint input2, uint input3, uint input4)\n{\n    uint temp1, temp2, temp3, temp4;\n    temp2 = input2;\n    temp4 = input4 >> 0x14;\n    temp1 = input1;\n    if (input3 != input4 >> 0x14 || input4 >> 0x14 != input4)\n    {\n        if (input3 == input4 >> 0x14)\n        {\n            if ((input1 | input2 << 0xc) == 0)\n            {\n                temp1 = input3;\n                temp2 = input4;\n                goto LABEL_080006fc;\n            }\n        }\n        else if (input4 >> 0x14 == input4)\n        {\n            temp1 = input3;\n            temp2 = input4;\n            if ((input3 | input4 << 0xc) == 0)\n            {\n                goto LABEL_080006c0;\n            }\n        }\n        else\n        {\n            bool is_input1_input2_zero = (input1 | input2 << 1) == 0;\n            bool is_input3_input4_zero = (input3 | input4 << 1) == 0;\n            if (!is_input1_input2_zero && !is_input3_input4_zero)\n            {\n                if (input3 == 0)\n                {\n                    uint temp5 = input2 & 0x80000000;\n                    do\n                    {\n                        uint temp6 = input1 & 0x80000000;\n                        input1 = input1 << 1;\n                        input2 = input2 * 2 + (temp6 != 0);\n                    } while ((input2 & 0x100000) == 0);\n                    temp2 = input2 | temp5;\n                    if (input4 >> 0x14 != 0)\n                    {\n                        return CONCAT44(temp2, input1);\n                    }\n                }\n                do\n                {\n                    temp3 = input3 & 0x80000000;\n                    input3 = input3 << 1;\n                    input4 = input4 * 2 + (temp3 != 0);\n                } while ((input4 & 0x100000) == 0);\n                return CONCAT44(temp2, input1);\n            }\n            if ((input1 | input2 << 1) != 0)\n            {\n                goto LABEL_080006fc;\n            }\n            if ((input3 | input4 << 1) != 0)\n            {\n                goto LABEL_080006c0;\n            }\n        }\n    }\n    return CONCAT44(temp2, temp1) | 0x7ff8000000000000;\n\nLABEL_080006c0:\n    return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n\nLABEL_080006fc:\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_0800088a"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_impure_pointer_value_08005d14",
                "PTR__impure_ptr_08005d1c": "PTR__impure_ptr_08005d1c"
            },
            "code": "int get_impure_pointer_value_08005d14(void)\n{\n    int* impure_ptr = (int*)PTR__impure_ptr_08005d1c;\n    return *impure_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "_sbrk"
            ],
            "imported": false,
            "current_name": "get_impure_pointer_value_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_priority_group_080015b4",
                "PriorityGroup": "priority_group",
                "reg_value": "reg_value",
                "PriorityGroupTmp": "priority_group_tmp",
                "DAT_080015f8": "DAT_080015f8",
                "uint": "uint32_t",
                "ptr_value": "ptr",
                "mask": "mask",
                "shifted_priority": "shifted_priority",
                "constant": "constant"
            },
            "code": "void set_priority_group_080015b4(uint32_t priority_group) {\n    uint32_t reg_value;\n    uint32_t priority_group_tmp;\n    uint32_t* ptr = (uint32_t*)(DAT_080015f8 + 0xc);\n    uint32_t mask = 0xf8ff;\n    uint32_t shifted_priority = (priority_group & 7) << 8;\n    uint32_t constant = 0x5fa0000;\n    *ptr = (*ptr & mask) | shifted_priority | constant;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "imported": false,
            "current_name": "set_priority_group_080015b4"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_external_trigger_080041a8",
                "TIMx": "timer",
                "TIM_ExtTRGPrescaler": "prescaler",
                "TIM_ExtTRGPolarity": "polarity",
                "ExtTRGFilter": "filter",
                "tmpsmcr": "smcr_value"
            },
            "code": "void set_external_trigger_080041a8(TIM_TypeDef *timer, uint32_t prescaler, uint32_t polarity, uint32_t filter) {\n  uint32_t smcr_value = timer->SMCR;\n  uint32_t ext_trg_prescaler = prescaler;\n  uint32_t ext_trg_polarity = polarity;\n  uint32_t ext_trg_filter = filter << 8;\n  smcr_value &= 0xffff00ff;\n  smcr_value |= ext_trg_prescaler | ext_trg_polarity | ext_trg_filter;\n  timer->SMCR = smcr_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_external_trigger_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "frexp",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08000a9c": {
            "renaming": {
                "FUN_08000a9c": "FUNC_08000a9c"
            },
            "code": "\nuint FUNC_08000a9c(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000bde:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000a9c",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000a9c"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_current_locale_08008ad4",
                "puVar1": "current_locale"
            },
            "code": "undefined* get_current_locale_08008ad4(void)\n{\n    undefined* current_locale = *(undefined **)(*(int *)PTR__impure_ptr_08008ae8 + 0x34);\n    if (current_locale == (undefined *)0x0) {\n        current_locale = PTR___global_locale_08008aec;\n    }\n    return current_locale + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "get_current_locale_08008ad4"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674",
                "file": "filename",
                "line": "line_number"
            },
            "code": "void infinite_loop_08005674(char *filename, int line_number)\n{\n    while(true) {\n        // Do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "MX_I2C1_Init",
                "MX_TIM1_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "configureInputCapture_08004104",
                "TIMx": "timer",
                "TIM_ICPolarity": "polarity",
                "TIM_ICFilter": "filter",
                "tmpccer": "ccer",
                "tmpccmr1": "ccmr1"
            },
            "code": "void configureInputCapture_08004104(TIM_TypeDef *timer, uint32_t polarity, uint32_t filter)\n{\n    uint32_t ccer = timer->CCER & 0xffffffef;\n    uint32_t ccmr1 = (filter << 0xc) | (timer->CCMR1 & 0xffff0fff);\n    ccer |= (polarity << 4);\n    timer->CCER = ccer;\n    timer->CCMR1 = ccmr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "configureInputCapture_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "isEndOfString_08000ff4",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_08000ff4(void)\\n{\\n  char currentChar;\\n  __aeabi_cfcmpeq();\\n  return currentChar == \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "isEndOfString_08000ff4"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "calculate_08005d0c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_08005d0c(double input){\n  double result;\n  //perform calculations here\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "__ieee754_atan2",
                "atan"
            ],
            "imported": false,
            "current_name": "calculate_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "count_leading_zero_bits_08005e40",
                "__s": "input_string",
                "iVar1": "byte_offset",
                "puVar2": "word_ptr",
                "uVar4": "word",
                "iVar3": "leading_zero_bits"
            },
            "code": "size_t count_leading_zero_bits_08005e40(char* input_string) {\n    int byte_offset = -((uint)input_string & 3);\n    uint* word_ptr = (uint*)((uint)input_string & 0xfffffffc);\n    uint word = *word_ptr;\n    if ((uint)input_string & 3) {\n        word = word | 0xffffffffU >> ((byte_offset + 4U & 0x1f) << 3);\n    }\n    while (true) {\n        word_ptr++;\n        word = word + 0xfefefeff & ~word & 0x80808080;\n        if (word != 0) {\n            break;\n        }\n        word = *word_ptr;\n        byte_offset += 4;\n    }\n    int leading_zero_bits = count_leading_zero_bits_08005e40(word & -word);\n    return byte_offset + (0x1fU - leading_zero_bits >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "count_leading_zero_bits_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "initialize_EVP_PKEY_CTX_08005d20",
                "param_1": "ctx",
                "puVar1": "global_dtor_aux_fini_array_entry",
                "iVar2": "i",
                "ppcVar3": "preinit_func_array",
                "iVar4": "num_of_preinit_functions",
                "PTR___preinit_array_end_08005d58": "PTR_preinit_array_end_08005d58",
                "PTR___preinit_array_end_08005d5c": "PTR_preinit_array_end_08005d5c",
                "PTR___preinit_array_end_08005d64": "PTR_preinit_array_end_08005d64",
                "PTR___do_global_dtors_aux_fini_array_entry_08005d60": "PTR_do_global_dtors_aux_fini_array_entry_08005d60"
            },
            "code": "void initialize_EVP_PKEY_CTX_08005d20(EVP_PKEY_CTX *ctx) {\n  int num_of_preinit_functions = (int)PTR___preinit_array_end_08005d58 - (int)PTR___preinit_array_end_08005d5c >> 2;\n  if (num_of_preinit_functions != 0) {\n    int i = 0;\n    code **preinit_func_array = (code **)PTR___preinit_array_end_08005d5c;\n    do {\n      i++;\n      ctx = (EVP_PKEY_CTX *)(**preinit_func_array)();\n      preinit_func_array++;\n    } while (num_of_preinit_functions != i);\n  }\n  code **dtor_func_array = (code **)PTR___preinit_array_end_08005d64;\n  undefined *global_dtor_aux_fini_array_entry = PTR___do_global_dtors_aux_fini_array_entry_08005d60;\n  _init(ctx);\n  int num_of_dtor_functions = (int)global_dtor_aux_fini_array_entry - (int)dtor_func_array >> 2;\n  if (num_of_dtor_functions != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**dtor_func_array)();\n      dtor_func_array++;\n    } while (num_of_dtor_functions != i);\n  }\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_GPIO_Pin_state_08001a80",
                "GPIO_Pin": "PinNumber",
                "PinState": "PinState",
                "GPIOx": "GPIOx"
            },
            "code": "void set_GPIO_Pin_state_08001a80(GPIO_TypeDef *GPIOx, uint16_t PinNumber, GPIO_PinState PinState)\n{\n  if (PinState == GPIO_PIN_RESET) {\n    GPIOx->BSRR = (uint32_t)PinNumber << 0x10;\n  }\n  else {\n    GPIOx->BSRR = (uint32_t)PinNumber;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "set_GPIO_Pin_state_08001a80"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "lock_malloc_recursive_mutex_080090a8",
                "PTR___lock___malloc_recursive_mutex_080090b0": "malloc_recursive_mutex"
            },
            "code": "void lock_malloc_recursive_mutex_080090a8() \n{\n  __retarget_lock_acquire_recursive(PTR___lock___malloc_recursive_mutex_080090b0);\n  return;\n}",
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "lock_malloc_recursive_mutex_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "get_ticks_08004e74",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08004ea0": "PTR_noHyperCall_08004ea0",
                "aflCall": "aflCall"
            },
            "code": "uint32_t get_ticks_08004e74(uint32_t ticks)\n{\n  uint32_t result = 0;\n  if (*(int *)PTR_noHyperCall_08004ea0 == 0) {\n    result = aflCall(1, ticks, 0);\n  }\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "get_ticks_08004e74"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "get_value_from_array_0800910c",
                "param_1": "array_address",
                "param_2": "value_pointer",
                "iVar1": "array_start_address"
            },
            "code": "void get_value_from_array_0800910c(int array_address, int *value_pointer)\n{\n  if (value_pointer != NULL) {\n    int array_start_address = *(int *)(array_address + 0x4c);\n    *value_pointer = *(int *)(array_start_address + value_pointer[1] * 4);\n    *(int **)(array_start_address + value_pointer[1] * 4) = value_pointer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "get_value_from_array_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "initialize_clocks_080052a0",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct": "osc_init",
                "OscillatorType": "RCC_OSCILLATORTYPE_HSE",
                "HSEState": "RCC_HSE_ON",
                "HSEPredivValue": "RCC_HSE_PREDIV_DIV1",
                "HSIState": "RCC_HSI_ON",
                "PLLState": "RCC_PLL_ON",
                "PLLSource": "RCC_PLLSOURCE_HSE",
                "PLLMUL": "RCC_PLL_MUL16",
                "ClockType": "RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2",
                "SYSCLKSource": "RCC_SYSCLKSOURCE_PLLCLK",
                "AHBCLKDivider": "RCC_SYSCLK_DIV1",
                "APB1CLKDivider": "RCC_HCLK_DIV2",
                "APB2CLKDivider": "RCC_HCLK_DIV1"
            },
            "code": "void initialize_clocks_080052a0(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  osc_init.HSEState = RCC_HSE_ON;\n  osc_init.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x151);\n  }\n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x15e);\n  }\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(SYSTICK_CLOCK_SOURCE / hclk_freq));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_clocks_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "multiplyWithCarry_08009120",
                "param_1": "numWords",
                "param_2": "words",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "resultPtr",
                "uVar2": "carryHigh",
                "iVar3": "wordCount",
                "puVar4": "currentWordPtr",
                "iVar5": "numWordsProcessed"
            },
            "code": "undefined4* multiplyWithCarry_08009120(int numWords, undefined4* words, int multiplier, uint carry) {\n  undefined4* resultPtr;\n  uint carryHigh;\n  int wordIndex;\n  uint* currentWordPtr;\n  int numWordsProcessed;\n  numWordsProcessed = 0;\n  currentWordPtr = words + 5;\n  carryHigh = 0;\n  do {\n    numWordsProcessed++;\n    carry = multiplier * (*currentWordPtr & 0xFFFF) + carry;\n    carryHigh = multiplier * (*currentWordPtr >> 0x10) + (carry >> 0x10);\n    *currentWordPtr = (carry & 0xFFFF) + carryHigh * 0x10000;\n    carry = carryHigh >> 0x10;\n    currentWordPtr++;\n  } while (numWordsProcessed < words[4]);\n  resultPtr = words;\n  if (carry != 0) {\n    if ((int)words[2] <= words[4]) {\n      resultPtr = (undefined4*)_Balloc(numWords, words[1] + 1);\n      memcpy(resultPtr + 3, words + 3, (words[4] + 2) * 4);\n      int heapStart = *(int*)(numWords + 0x4C);\n      *words = *(undefined4*)(heapStart + words[1] * 4);\n      *(undefined4**)(heapStart + words[1] * 4) = words;\n    }\n    resultPtr[words[4] + 5] = carry;\n    resultPtr[4] = words[4] + 1;\n  }\n  return resultPtr;\n}",
            "called": [
                "_Balloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "multiplyWithCarry_08009120"
        },
        "FUN_08000f58": {
            "renaming": {
                "FUN_08000f58": "calculate_08000f58",
                "param_1": "dividend",
                "param_2": "divisor",
                "bVar1": "is_dividend_less_than_divisor",
                "uVar2": "dividend_times_two",
                "uVar3": "divisor_times_two",
                "uVar4": "abs_divisor_or_dividend",
                "bVar5": "is_divisor_zero"
            },
            "code": "uint calculate_08000f58(uint dividend, uint divisor)\n{\n  bool is_dividend_negative = ((int)(dividend * 2) >> 0x18 == -1);\n  bool is_divisor_negative = ((int)(divisor * 2) >> 0x18 == -1);\n  if (is_dividend_negative || is_divisor_negative)\n  {\n    if ((is_dividend_negative && ((dividend & 0x7fffff) != 0)) || (is_divisor_negative && ((divisor & 0x7fffff) != 0)))\n    {\n      return 0xffffffff;\n    }\n  }\n  uint abs_divisor = divisor & 0x7fffffff;\n  bool is_divisor_zero = (abs_divisor == 0);\n  if (!is_divisor_zero)\n  {\n    uint xor_result = dividend ^ divisor;\n    is_divisor_zero = (xor_result == 0);\n  }\n  bool is_dividend_less_than_divisor = ((int)dividend < (int)(abs_divisor * -1));\n  if (is_dividend_less_than_divisor && !is_divisor_zero)\n  {\n    dividend = (int)divisor >> 0x1f;\n  }\n  if (!is_dividend_less_than_divisor || !is_divisor_zero)\n  {\n    dividend = ~((int)divisor >> 0x1f);\n  }\n  if (!is_divisor_zero)\n  {\n    dividend = dividend | 1;\n  }\n  return dividend;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f58",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000f58"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr_4",
                "puVar3": "dest_ptr_4_2",
                "puVar4": "dest_ptr_4_2_1",
                "puVar5": "src_ptr_4",
                "puVar6": "src_ptr_1",
                "uVar7": "size_2",
                "uVar8": "size_3",
                "bVar9": "flag"
            },
            "code": "void * copy_memory_08001084(void *destination, const void *source, size_t size)\\n\\\n{\\n\\\n    unsigned char *dest = (unsigned char*)destination;\\n\\\n    const unsigned char *src = (const unsigned char*)source;\\n\\\n    if ((((unsigned int)src | (unsigned int)dest) & 3) != 0) {\\n\\\n        if (size < 8) {\\n\\\n            unsigned int i = size - 4;\\n\\\n            if (i > 0) {\\n\\\n                do {\\n\\\n                    *dest++ = *src++;\\n\\\n                } while (--i > 0);\\n\\\n            }\\n\\\n            if ((size & 2) != 0) {\\n\\\n                *(unsigned short*)dest = *(unsigned short*)src;\\n\\\n                dest += 2;\\n\\\n                src += 2;\\n\\\n            }\\n\\\n            if ((size & 1) != 0) {\\n\\\n                *dest = *src;\\n\\\n            }\\n\\\n            return destination;\\n\\\n        }\\n\\\n        if (((unsigned int)src & 3) != 0) {\\n\\\n            unsigned int i = 4 - ((unsigned int)src & 3);\\n\\\n            if (i > size) {\\n\\\n                i = size;\\n\\\n            }\\n\\\n            size -= i;\\n\\\n            if (i > 0) {\\n\\\n                do {\\n\\\n                    *dest++ = *src++;\\n\\\n                } while (--i > 0);\\n\\\n            }\\n\\\n        }\\n\\\n        if (((unsigned int)dest & 3) != 0) {\\n\\\n            unsigned int i = (unsigned int)dest & 3;\\n\\\n            if (i > size) {\\n\\\n                i = size;\\n\\\n            }\\n\\\n            size -= i;\\n\\\n            if (i > 0) {\\n\\\n                do {\\n\\\n                    *dest++ = 0;\\n\\\n                } while (--i > 0);\\n\\\n            }\\n\\\n        }\\n\\\n        unsigned int i = size >> 3;\\n\\\n        if (i > 0) {\\n\\\n            do {\\n\\\n                *(unsigned int*)dest = *(unsigned int*)src;\\n\\\n                *(unsigned int*)(dest + 4) = *(unsigned int*)(src + 4);\\n\\\n                *(unsigned int*)(dest + 8) = *(unsigned int*)(src + 8);\\n\\\n                *(unsigned int*)(dest + 12) = *(unsigned int*)(src + 12);\\n\\\n                dest += 16;\\n\\\n                src += 16;\\n\\\n            } while (--i > 0);\\n\\\n        }\\n\\\n        size &= 7;\\n\\\n    }\\n\\\n    if (size > 0) {\\n\\\n        do {\\n\\\n            *dest++ = *src++;\\n\\\n        } while (--size > 0);\\n\\\n    }\\n\\\n    return destination;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "_dtoa_r",
                "__multadd",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "configure_gpio_for_timer_08005680",
                "htim": "timer_handle",
                "Instance": "TIM3",
                "GPIO_InitStruct": "gpio_init",
                "Pin": "GPIO_PIN_9",
                "Mode": "GPIO_MODE_AF_PP",
                "Speed": "GPIO_SPEED_FREQ_HIGH",
                "HAL_GPIO_Init": "HAL_GPIO_Init",
                "DAT_080056b4": "TIM3",
                "DAT_080056b8": "GPIOB"
            },
            "code": "void configure_gpio_for_timer_08005680(TIM_HandleTypeDef *timer_handle)\n{\n  GPIO_InitTypeDef gpio_init;\n  if (timer_handle->Instance == DAT_080056b4) {\n    gpio_init.Pin = GPIO_PIN_9;\n    gpio_init.Mode = GPIO_MODE_AF_PP;\n    gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_080056b8, &gpio_init);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "configure_gpio_for_timer_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "configureClocks_08003260",
                "*RCC_ClkInitStruct": "*clkInit",
                "FLatency": "latency",
                "uVar1": "pllFreq",
                "uVar2": "tickCount",
                "HVar3": "status",
                "tickstart": "tickstart",
                "*DAT_08003430": "*FLASH_ACR",
                "*DAT_08003434": "*RCC_CFGR",
                "PTR_SystemCoreClock_0800343c": "systemCoreClock",
                "PTR_AHBPrescTable_08003438": "AHBPrescTable",
                "RCC_CLOCKTYPE_HCLK": "RCC_CLOCKTYPE_HCLK",
                "RCC_CLOCKTYPE_PCLK1": "RCC_CLOCKTYPE_PCLK1",
                "RCC_CLOCKTYPE_PCLK2": "RCC_CLOCKTYPE_PCLK2",
                "RCC_CLOCKTYPE_SYSCLK": "RCC_CLOCKTYPE_SYSCLK",
                "RCC_SYSCLKSOURCE_PLLCLK": "RCC_SYSCLKSOURCE_PLLCLK",
                "RCC_SYSCLKSOURCE_HSE": "RCC_SYSCLKSOURCE_HSE",
                "RCC_SYSCLKSOURCE_HSI": "RCC_SYSCLKSOURCE_HSI",
                "RCC_PLLSOURCE_HSI": "RCC_PLLSOURCE_HSI",
                "RCC_PLLM_DIV8": "RCC_PLLM_DIV8",
                "RCC_PLLN_SHIFT": "RCC_PLLN_SHIFT",
                "RCC_PLLP_SHIFT": "RCC_PLLP_SHIFT",
                "RCC_PLLQ_SHIFT": "RCC_PLLQ_SHIFT",
                "RCC_CR_PLLON": "RCC_CR_PLLON",
                "RCC_CR_PLLRDY": "RCC_CR_PLLRDY",
                "RCC_CR_HSEON": "RCC_CR_HSEON",
                "RCC_CR_HSERDY": "RCC_CR_HSERDY",
                "RCC_CFGR_SWS": "RCC_CFGR_SWS",
                "RCC_CFGR_SW": "RCC_CFGR_SW",
                "RCC_CFGR_SW_HSE": "RCC_CFGR_SW_HSE",
                "RCC_CFGR_SW_HSI": "RCC_CFGR_SW_HSI",
                "RCC_CFGR_HPRE": "RCC_CFGR_HPRE",
                "RCC_CFGR_PPRE1": "RCC_CFGR_PPRE1",
                "RCC_CFGR_PPRE2": "RCC_CFGR_PPRE2"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003260(RCC_ClkInitTypeDef *clkInit, uint32_t latency) {\\n\\\n                            uint32_t flashLatency = *(FLASH_ACR) & 7;\\n\\\n                            HAL_StatusTypeDef status = HAL_OK;\\n\\\n                            uint32_t tickstart;\\n\\\n                            if (flashLatency < latency) {\\n\\\n                                *(FLASH_ACR) = (latency | *(FLASH_ACR) & 0xfffffff8);\\n\\\n                                if (flashLatency != (*(FLASH_ACR) & 7)) {\\n\\\n                                    status = HAL_ERROR;\\n\\\n                                }\\n\\\n                            }\\n\\\n                            if ((clkInit->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\\n\\\n                                *(RCC_CFGR) &= ~(RCC_CFGR_HPRE);\\n\\\n                                *(RCC_CFGR) |= clkInit->AHBCLKDivider;\\n\\\n                            }\\n\\\n                            if ((clkInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\\n\\\n                                *(RCC_CFGR) &= ~(RCC_CFGR_PPRE1);\\n\\\n                                *(RCC_CFGR) |= (clkInit->APB1CLKDivider << 10);\\n\\\n                            }\\n\\\n                            if ((clkInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\\n\\\n                                *(RCC_CFGR) &= ~(RCC_CFGR_PPRE2);\\n\\\n                                *(RCC_CFGR) |= (clkInit->APB2CLKDivider << 13);\\n\\\n                            }\\n\\\n                            *(RCC_CR) &= ~(RCC_CR_PLLON);\\n\\\n                            if ((clkInit->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\\n\\\n                                uint32_t pllsource = RCC_PLLSOURCE_HSI;\\n\\\n                                uint32_t pllm = (clkInit->SYSCLKDivider & RCC_PLLM_DIV8);\\n\\\n                                uint32_t plln = (clkInit->PLLN << RCC_PLLN_SHIFT);\\n\\\n                                uint32_t pllp = (((clkInit->PLLP >> 1) -1) << RCC_PLLP_SHIFT);\\n\\\n                                uint32_t pllq = (clkInit->PLLQ << RCC_PLLQ_SHIFT);\\n\\\n                                if (clkInit->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\\n\\\n                                    *(RCC_PLLCFGR) = (pllm | plln | pllp | pllsource | pllq);\\n\\\n                                    *(RCC_CR) |= RCC_CR_PLLON;\\n\\\n                                    while((*(RCC_CR) & RCC_CR_PLLRDY) == 0);\\n\\\n                                }\\n\\\n                                else if (clkInit->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {\\n\\\n                                    if ((*(RCC_CFGR) & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSE) {\\n\\\n                                        *(RCC_CR) |= RCC_CR_HSEON;\\n\\\n                                        while((*(RCC_CR) & RCC_CR_HSERDY) == 0);\\n\\\n                                    }\\n\\\n                                    else {\\n\\\n                                        *(RCC_CFGR) &= ~(RCC_CFGR_SW);\\n\\\n                                        *(RCC_CFGR) |= RCC_CFGR_SW_HSE;\\n\\\n                                        while((*(RCC_CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);\\n\\\n                                    }\\n\\\n                                }\\n\\\n                                else {\\n\\\n                                    if ((*(RCC_CFGR) & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSI) {\\n\\\n                                        *(RCC_CR) &= ~(RCC_CR_HSEON);\\n\\\n                                        while((*(RCC_CR) & RCC_CR_HSERDY) != 0);\\n\\\n                                    }\\n\\\n                                    *(RCC_CFGR) &= ~(RCC_CFGR_SW);\\n\\\n                                    *(RCC_CFGR) |= RCC_CFGR_SW_HSI;\\n\\\n                                    while((*(RCC_CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);\\n\\\n                                }\\n\\\n                            }\\n\\\n                            return status;\\n\\\n                        }",
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003260"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "allocate_and_initialize_block_08009244",
                "param_1": "size",
                "param_2": "value",
                "iVar1": "block_ptr"
            },
            "code": "void allocate_and_initialize_block_08009244(int size, int value)\n{\n  int block_ptr;\n  block_ptr = _Balloc(size, 1);\n  *(int *)(block_ptr + 0x10) = 1;\n  *(int *)(block_ptr + 0x14) = value;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_block_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "read_memory_and_return_08004e6c",
                "a0": "address",
                "a1": "data",
                "a2": "size"
            },
            "code": "uint32_t read_memory_and_return_08004e6c(uint32_t address, uint32_t data, int32_t size) {\n  software_interrupt(0x3f);\n  return address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "read_memory_and_return_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "configureSysTick_08001762",
                "TicksNumb": "numberOfTicks",
                "uVar1": "configResult"
            },
            "code": "uint32_t configureSysTick_08001762(uint32_t numberOfTicks)\n{\n  uint32_t configResult;\n  configResult = SysTick_Config(numberOfTicks);\n  return configResult;\n}",
            "called": [
                "SysTick_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001762"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "configureInputCaptureTimer_080040a0",
                "TIMx": "timer",
                "TIM_ICPolarity": "inputCapturePolarity",
                "TIM_ICFilter": "inputCaptureFilter",
                "uVar1": "timerCCER",
                "tmpccer": "N/A",
                "tmpccmr1": "N/A"
            },
            "code": "void configureInputCaptureTimer_080040a0(TIM_TypeDef *timer, uint32_t inputCapturePolarity, uint32_t inputCaptureFilter)\n{\n  uint32_t timerCCER = timer->CCER;\n  timer->CCER = timerCCER & 0xfffffffe;\n  timer->CCMR1 = (inputCaptureFilter << 4) | (timer->CCMR1 & 0xffffff0f);\n  timer->CCER = inputCapturePolarity | (timerCCER & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "configureInputCaptureTimer_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_memcpy_08009a18",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "iVar3": "index1",
                "pvVar4": "pointer3",
                "puVar5": "pointer4",
                "iVar6": "index2",
                "uVar7": "size1",
                "iVar8": "index3",
                "uVar9": "size2",
                "puVar10": "pointer5"
            },
            "code": "void * reverse_memcpy_08009a18(void *destination, const void *source, size_t size) {\n  uint remaining_size;\n  void *destination_end;\n  const void *source_end;\n\n  if ((source < destination) && ((source + size) > destination)) {\n    destination_end = (void *)((int)destination + size);\n    if (size != 0) {\n      do {\n        source_end = (const void *)((int)source + size - 1);\n        destination_end = (void *)((int)destination_end - 1);\n        *(char *)destination_end = *(char *)source_end;\n        size--;\n      } while (source != source_end);\n    }\n  }\n  else {\n    remaining_size = size;\n    destination_end = destination;\n    if (size > 15) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      source_end = (const void *)((int)source + 16);\n      destination_end = (void *)((int)destination + 16);\n      do {\n        *(int *)((int)destination_end - 16) = *(int *)((int)source_end - 16);\n        *(int *)((int)destination_end - 12) = *(int *)((int)source_end - 12);\n        *(int *)((int)destination_end - 8) = *(int *)((int)source_end - 8);\n        *(int *)((int)destination_end - 4) = *(int *)((int)source_end - 4);\n        source_end = (const void *)((int)source_end + 16);\n        destination_end = (void *)((int)destination_end + 16);\n      } while (source_end != (const void *)((int)source + ((size - 16) & 0xfffffff0) + 32));\n      remaining_size = size & 0xf;\n      size = ((size - 16) >> 4) + 1;\n      source = (const void *)((int)source + size * 16);\n      destination_end = (void *)((int)destination_end + size * 16);\n      if (remaining_size > 3) {\n        destination_end = (void *)((int)destination_end - 4);\n        source_end = (const void *)((int)source + size * 16);\n        do {\n          *(int *)((int)destination_end + 4) = *(int *)source_end;\n          source_end = (const void *)((int)source_end + 4);\n          destination_end = (void *)((int)destination_end + 4);\n        } while (destination_end != (void *)((int)destination + ((size << 4) - 4 + remaining_size)));\n        remaining_size &= 3;\n        destination = destination_end;\n      }\n    }\n    source_end = (const void *)((int)source + remaining_size);\n    if (remaining_size != 0) {\nLAB_08009abc:\n      destination_end = (void *)((int)destination_end - 1);\n      do {\n        *(char *)destination_end = *(char *)source;\n        source_end = (const void *)((int)source + 1);\n        destination_end = (void *)((int)destination_end + 1);\n        source = source_end;\n      } while (source_end != (const void *)((int)source + remaining_size));\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "_realloc_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "reverse_memcpy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_to_integer_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_input2_divided_by_0x20000",
                "iVar2": "shifted_input2",
                "uVar3": "shifted_input2_divided_by_0x20000_minus_0x3e1",
                "output": "integer_output"
            },
            "code": "uint convert_to_integer_0800119c(uint input1, uint input2) {\n  uint output = 0;\n  int shifted_input2 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (shifted_input2 >= 0) {\n      return output;\n    }\n    uint uVar1 = shifted_input2 >> 0x15;\n    uint uVar3 = -uVar1 - 0x3e1;\n    if (uVar1 < 0xfffffc20 && uVar3 != 0) {\n      output = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (uVar3 & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        output = -output;\n      }\n      return output;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return output;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "convert_to_integer_0800119c"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "release_malloc_recursive_mutex_080090b4",
                "PTR___lock___malloc_recursive_mutex_080090bc": "lock_malloc_recursive_mutex"
            },
            "code": "void release_malloc_recursive_mutex_080090b4(void)\n{\n  __retarget_lock_release_recursive(PTR___lock___malloc_recursive_mutex_080090bc);\n  return;\n}",
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "release_malloc_recursive_mutex_080090b4"
        },
        "FUN_08000f60": {
            "renaming": {
                "FUN_08000f60": "calculate_result_08000f60",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_or_result_negative",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "or_result",
                "bVar5": "is_or_result_zero"
            },
            "code": "uint calculate_result_08000f60(uint input_1, uint input_2)\n{\n    bool is_negative_1 = ((int)input_1 >> 0x18 == -1);\n    bool is_negative_2 = ((int)input_2 >> 0x18 == -1);\n    uint doubled_input_1 = input_1 * 2;\n    uint doubled_input_2 = input_2 * 2;\n    \n    if ((is_negative_1 || is_negative_2) && ((is_negative_1 && ((input_1 & 0x7fffff) != 0)) || (is_negative_2 && ((input_2 & 0x7fffff) != 0))))\n    {\n        return 1;\n    }\n    \n    uint or_result = doubled_input_1 | input_2 & 0x7fffffff;\n    bool is_or_result_zero = (or_result == 0);\n    if (!is_or_result_zero)\n    {\n        or_result = input_1 ^ input_2;\n        is_or_result_zero = (or_result == 0);\n    }\n    \n    bool is_or_result_negative = -1 < (int)or_result;\n    if (is_or_result_negative)\n    {\n        input_1 = doubled_input_1 + input_2 * -2;\n        is_or_result_zero = (input_1 == 0);\n    }\n    \n    if (is_or_result_negative && doubled_input_2 <= doubled_input_1 && !is_or_result_zero)\n    {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    \n    if (!is_or_result_negative || doubled_input_2 > doubled_input_1)\n    {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    \n    if (!is_or_result_zero)\n    {\n        input_1 = input_1 | 1;\n    }\n    \n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f60"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "setBreakDeadTimeConfig_0800422e",
                "htim": "timerHandle",
                "sBreakDeadTimeConfig": "breakDeadTimeConfig",
                "HVar1": "status",
                "tmpbdtr": "bdtr"
            },
            "code": "HAL_StatusTypeDef setBreakDeadTimeConfig_0800422e(TIM_HandleTypeDef *timerHandle, TIM_BreakDeadTimeConfigTypeDef *breakDeadTimeConfig)\n{\n    HAL_StatusTypeDef status;\n    uint32_t bdtr;\n    if (timerHandle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n    }\n    else {\n        timerHandle->Lock = HAL_LOCKED;\n        bdtr = (breakDeadTimeConfig->AutomaticOutput                \n               | breakDeadTimeConfig->BreakPolarity                \n               | breakDeadTimeConfig->BreakState                   \n               | breakDeadTimeConfig->OffStateRunMode              \n               | breakDeadTimeConfig->OffStateIDLEMode             \n               | breakDeadTimeConfig->LockLevel                     \n               | (breakDeadTimeConfig->DeadTime & 0xfffffcff) & 0xfffffbff & 0xfffff7ff & 0xffffefff & 0xffffdfff & 0xffffbfff & 0xffff7fff);\n        timerHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "setBreakDeadTimeConfig_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "__malloc_unlock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "__malloc_lock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "configureSysTick_0800151c",
                "TickPriority": "tickPriority",
                "HVar2": "status",
                "uVar1": "systicConfig",
                "clockSpeed": "clockSpeed",
                "tickFreq": "tickFreq"
            },
            "code": "HAL_StatusTypeDef configureSysTick_0800151c(uint32_t tickPriority) {\n  uint32_t clockSpeed = *(uint *)PTR_SystemCoreClock_08001570;\n  uint32_t tickFreq = (1000 / (ulonglong)(byte)*PTR_uwTickFreq_08001574);\n  uint32_t systicConfig = HAL_SYSTICK_Config((uint32_t)((ulonglong)clockSpeed / tickFreq));\n  HAL_StatusTypeDef status;\n  if (systicConfig == 0) {\n    if (tickPriority < 0x10) {\n      HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n      *(uint32_t *)PTR_uwTickPrio_08001578 = tickPriority;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  else {\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_0800151c"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "abs_input_1_times_2",
                "uVar3": "abs_input_2_times_2",
                "uVar4": "abs_input_1_or_input_2",
                "bVar1": "is_negative_difference",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f68(uint input_1, uint input_2)\n{\n  bool is_negative_1 = false;\n  bool is_negative_2 = false;\n  uint abs_input_1 = input_1;\n  uint abs_input_2 = input_2;\n  uint result = 0;\n  \n  if (input_1 >> 31 == 1)\n  {\n    is_negative_1 = true;\n    abs_input_1 = ~input_1 + 1;\n  }\n  if (input_2 >> 31 == 1)\n  {\n    is_negative_2 = true;\n    abs_input_2 = ~input_2 + 1;\n  }\n  \n  uint abs_input_1_times_2 = abs_input_1 << 1;\n  uint abs_input_2_times_2 = abs_input_2 << 1;\n  \n  if ((abs_input_1_times_2 >> 31 == 1 || abs_input_2_times_2 >> 31 == 1) &&\n     (((abs_input_1_times_2 >> 31 == 1 && ((abs_input_1 & 0x7fffff) != 0)) ||\n      ((abs_input_2_times_2 >> 31 == 1 && ((abs_input_2 & 0x7fffff) != 0))))))\n  {\n    result = 1;\n  }\n  else\n  {\n    uint abs_input_1_or_input_2 = abs_input_1 | (input_2 & 0x7fffffff);\n    bool is_zero = abs_input_1_or_input_2 == 0;\n    if (!is_zero)\n    {\n      uint input_1_xor_input_2 = input_1 ^ input_2;\n      is_zero = input_1_xor_input_2 == 0;\n    }\n    bool is_negative_difference = input_1 < input_2;\n    if (is_negative_difference)\n    {\n      uint input_1_minus_input_2_times_2 = abs_input_1_times_2 + (abs_input_2_times_2 ^ 0xffffffff) + 1;\n      is_zero = input_1_minus_input_2_times_2 == 0;\n    }\n    if (!is_negative_difference || abs_input_2 > abs_input_1)\n    {\n      result = ~((int)input_2 >> 0x1f);\n    }\n    if (!is_zero)\n    {\n      result |= 1;\n    }\n  }\n  \n  if (is_negative_1 && !is_negative_2)\n  {\n    result = ~result + 1;\n  }\n  if (is_negative_1 && is_negative_2)\n  {\n    result = ~result + 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "hash",
                "param_2": "hash_size",
                "param_3": "data",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "len_1",
                "uVar4": "len_2",
                "puVar5": "hash_ptr",
                "uVar6": "temp_1",
                "uVar11": "temp_4",
                "puVar7": "ptr_1",
                "puVar16": "ptr_2",
                "uVar8": "temp_3",
                "iVar9": "max_len",
                "iVar10": "min_len",
                "iVar12": "hash_words",
                "puVar14": "alloc_ptr",
                "puVar15": "end_ptr",
                "puVar18": "i",
                "puVar17": "j"
            },
            "code": "void calculate_hash_08009258(uint8_t* hash, int hash_size, uint8_t* data, int data_size)\n{\n  uint32_t* data_ptr_1 = (uint32_t*)(data + 0x10);\n  uint32_t* data_ptr_2 = (uint32_t*)(data + 0x14);\n  uint32_t* hash_ptr = (uint32_t*)(hash + 0x14);\n  int len_1 = *(int*)(data + 4);\n  int len_2 = *(int*)(hash + 8);\n  int max_len, min_len;\n  uint32_t temp_1, temp_2, temp_3, temp_4;\n  uint32_t* ptr_1;\n  uint32_t* ptr_2;\n  uint32_t* end_ptr;\n  \n  if (len_1 < len_2) {\n    max_len = len_2;\n    min_len = len_1;\n    ptr_1 = data_ptr_2;\n    ptr_2 = hash_ptr;\n  } else {\n    max_len = len_1;\n    min_len = len_2;\n    ptr_1 = hash_ptr;\n    ptr_2 = data_ptr_2;\n  }\n  if (len_1 + len_2 > hash_size * 8) {\n    max_len ++;\n  }\n  max_len += min_len;\n  int hash_words = max_len / 4;\n  if (max_len % 4 != 0) {\n    hash_words ++;\n  }\n  hash_words += 5;\n  uint32_t* alloc_ptr = _Balloc(hash, hash_words);\n  end_ptr = alloc_ptr + hash_words;\n  for (uint32_t* i = alloc_ptr; i < end_ptr; i++) {\n    *i = 0;\n  }\n  end_ptr = data_ptr_2 + min_len;\n  for (uint32_t* i = ptr_1; i < end_ptr; i++) {\n    uint32_t word = *i;\n    if (word == 0) {\n      continue;\n    }\n    temp_1 = word & 0xffff;\n    temp_2 = word >> 0x10;\n    end_ptr = ptr_2 + max_len / 4;\n    uint32_t* j = hash_ptr;\n    for (; j < end_ptr; j++) {\n      temp_3 = *j;\n      temp_4 = temp_2 * (*j >> 0x10) + (temp_3 & 0xffff) + (temp_1 >> 0x10);\n      temp_1 = temp_2 * (*j & 0xffff) + temp_1 * (*i >> 0x10) + (temp_4 >> 0x10);\n      temp_2 = temp_4 & 0xffff;\n      *j = (temp_3 & 0xffff0000) | temp_2;\n    }\n    if (temp_1 != 0) {\n      *j = temp_1;\n    }\n  }\n  end_ptr = hash_ptr + hash_words - 1;\n  while (*end_ptr == 0 && end_ptr != hash_ptr) {\n    end_ptr --;\n  }\n  *(int*)(hash + 0x10) = (end_ptr - hash_ptr + 1) * 4;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_08000c08",
                "param_1": "num",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "mask",
                "shifted_num": "shifted_num",
                "mask": "mask",
                "sign_extension": "sign_extension",
                "result": "result"
            },
            "code": "uint calculate_08000c08(uint num)\n{\n  int leading_zeroes = count_leading_zeroes(num);\n  uint shift = leading_zeroes - 8;\n  int multiplier = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint mask = 0 << (shift & 0xff);\n    uint shifted_num = num << (shift & 0xff);\n    uint shifted_mask = 0U >> (0x20 - shift & 0xff);\n    uint result = multiplier + shifted_num + shifted_mask + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint mask = num << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_num = param_1 >> (0x20 - (leading_zeroes + 0x18U) & 0xff);\n  int sign_extension = (int)mask >> 0x1f;\n  uint result = multiplier + (shifted_num - sign_extension);\n  if ((mask & 0x7fffffff) == 0) {\n    result = result & ~(mask >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_08000c08"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_master_config_080042de",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "HVar1": "status",
                "Lock": "lock",
                "State": "state",
                "Instance": "instance",
                "CR2": "cr2",
                "SMCR": "smcr",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef set_master_config_080042de(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  HAL_StatusTypeDef status;\n  if (timer_handle->lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->lock = HAL_LOCKED;\n    timer_handle->state = HAL_TIM_STATE_BUSY;\n    timer_handle->Instance->CR2 = timer_handle->Instance->CR2 & 0xffffff8f;\n    timer_handle->Instance->CR2 = master_config->MasterOutputTrigger | timer_handle->Instance->CR2;\n    timer_handle->Instance->SMCR = timer_handle->Instance->SMCR & 0xffffff7f;\n    timer_handle->Instance->SMCR = master_config->MasterSlaveMode | timer_handle->Instance->SMCR;\n    timer_handle->state = HAL_TIM_STATE_READY;\n    timer_handle->lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "set_master_config_080042de"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    __malloc_lock();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR___malloc_av__08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR___malloc_av__08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR___malloc_av__08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc))\n    {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR___malloc_av__08008e60;\n  puVar12 = PTR___malloc_av__08008e4c;\n  puVar13 = *(undefined **)(PTR___malloc_av__08008e4c + 0x10);\n  if (puVar13 == PTR_PTR___malloc_av__08008e60) {\n    uVar4 = *(uint *)(PTR___malloc_av__08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__08008e4c + 0x10) = PTR_PTR___malloc_av__08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR___malloc_sbrk_base_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR___malloc_sbrk_base_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)_sbrk_r(param_1,uVar4);\n  puVar6 = (uint *)PTR___malloc_current_mallinfo_08009018;\n  puVar3 = PTR___malloc_current_mallinfo_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08008e54 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08009018 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = _sbrk_r(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          _free_r(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR___malloc_max_total_mem_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR___malloc_max_total_mem_08008e5c;\n    if (*(uint *)PTR___malloc_max_sbrked_mem_08008e58 < uVar9) {\n      *(uint *)PTR___malloc_max_sbrked_mem_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    __malloc_unlock(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  __malloc_unlock(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "_realloc_r",
                "_calloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_pitch_08004bd8",
                "mpu6050": "mpu",
                "pitch": "p",
                "acc_pitch": "ap",
                "gyro_x": "gx",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3"
            },
            "code": "void calculate_pitch_08004bd8(Mpu6050 *mpu6050, float *pitch) {\n\tfloat gyro_x = mpu6050->gyroX - mpu6050->offset_gyroX;\n\tfloat acc_pitch = atan2(mpu6050->accY, mpu6050->accZ) * RAD_TO_DEG;\n\tfloat acc_pitch_offset = acc_pitch - mpu6050->offset_acc_pitch;\n\tfloat total_pitch = 0.98f * (*pitch + gyro_x * DT) + 0.02f * acc_pitch_offset;\n\t*pitch = total_pitch;\n}",
            "called": [
                "__subdf3",
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__divdf3",
                "atan2",
                "__aeabi_dadd",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_pitch_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_memory_080090c0",
                "param_1": "mem_size",
                "param_2": "index",
                "puVar1": "memory_block",
                "iVar2": "allocated_block",
                "block_size": "block_size"
            },
            "code": "undefined4 * allocate_memory_080090c0(int mem_size, uint index)\n{\n  undefined4 *memory_block;\n  int allocated_block;\n  allocated_block = *(int *)(mem_size + 0x4c);\n  if (allocated_block == 0) {\n    allocated_block = _calloc_r(mem_size, 4, 0x21);\n    *(int *)(mem_size + 0x4c) = allocated_block;\n    if (allocated_block == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  memory_block = *(undefined4 **)(allocated_block + index * 4);\n  if (memory_block == (undefined4 *)0x0) {\n    int block_size = 1 << (index & 0xff);\n    memory_block = (undefined4 *)_calloc_r(mem_size, 1, (block_size + 5) * 4);\n    if (memory_block == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    memory_block[1] = index;\n    memory_block[2] = block_size;\n  }\n  else {\n    *(undefined4 *)(allocated_block + index * 4) = *memory_block;\n  }\n  memory_block[3] = 0;\n  memory_block[4] = 0;\n  return memory_block;\n}",
            "called": [
                "_calloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "_dtoa_r",
                "__d2b",
                "__lshift",
                "__mdiff",
                "__multadd",
                "__pow5mult",
                "__i2b",
                "__multiply"
            ],
            "imported": false,
            "current_name": "allocate_memory_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "find_last_set_bit_080091e4",
                "param_1": "num",
                "uVar1": "bit_position",
                "uVar2": "value"
            },
            "code": "uint find_last_set_bit_080091e4(uint *num)\n{\n  uint value = *num;\n  uint bit_position = value & 7;\n  if (bit_position == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      bit_position = 0x10;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      bit_position += 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      bit_position += 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      bit_position += 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      bit_position++;\n    }\n    *num = value;\n    return bit_position;\n  }\n  if (-1 < (int)(value << 0x1f)) {\n    if ((int)(value << 0x1e) < 0) {\n      *num = value >> 1;\n      return 1;\n    }\n    *num = value >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "__d2b"
            ],
            "imported": false,
            "current_name": "find_last_set_bit_080091e4"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "add_to_global_array_080098c0",
                "param_1": "type",
                "param_2": "value2",
                "param_3": "value1",
                "param_4": "ptr",
                "puVar1": "mutex_ptr",
                "uVar2": "ret_val",
                "uVar3": "count",
                "uVar4": "index",
                "iVar5": "global_ptr",
                "iVar6": "array_ptr",
                "iVar7": "flag"
            },
            "code": "undefined4 add_to_global_array_080098c0(int type, undefined4 value1, undefined4 value2, undefined4 ptr)\n{\n  undefined *mutex_ptr;\n  undefined4 ret_val;\n  uint count;\n  uint index;\n  int global_ptr;\n  int array_ptr;\n  int flag;\n  mutex_ptr = PTR___atexit_recursive_mutex_08009974;\n  __retarget_lock_acquire_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_08009974);\n  global_ptr = *(int *)PTR__global_impure_ptr_08009978;\n  array_ptr = *(int *)(global_ptr + 0x148);\n  if (array_ptr == 0)\n  {\n    array_ptr = global_ptr + 0x14c;\n    *(int *)(global_ptr + 0x148) = array_ptr;\n  }\n  count = *(uint *)(array_ptr + 4);\n  if ((int)count < 0x20)\n  {\n    index = count + 1;\n  }\n  else\n  {\n    if (DAT_0800997c == 0)\n    {\n      __retarget_lock_release_recursive(*(undefined4 *)mutex_ptr);\n      return 0xffffffff;\n    }\n    global_ptr = 400;\n    count = 0;\n    _DAT_00000190 = *(undefined4 *)(global_ptr + 0x148);\n    index = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(global_ptr + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (type != 0)\n  {\n    array_ptr = array_ptr + count * 4;\n    *(undefined4 *)(array_ptr + 0x88) = value1;\n    flag = 1 << (count & 0xff);\n    *(uint *)(array_ptr + 0x188) = *(uint *)(array_ptr + 0x188) | flag;\n    *(undefined4 *)(array_ptr + 0x108) = ptr;\n    if (type == 2)\n    {\n      *(uint *)(array_ptr + 0x18c) = flag | *(uint *)(array_ptr + 0x18c);\n    }\n  }\n  *(int *)(array_ptr + 4) = index;\n  ret_val = *(undefined4 *)mutex_ptr;\n  *(undefined4 *)(array_ptr + (count + 2) * 4) = value2;\n  __retarget_lock_release_recursive(ret_val);\n  return 0;\n}\n",
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_global_array_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "readFromI2C_080027f4",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "MemAddress": "memoryAddress",
                "MemAddSize": "memoryAddressSize",
                "Timeout": "timeout",
                "Tickstart": "startTime",
                "HVar1": "status",
                "uVar2": "currentTime",
                "tmpreg": "timeoutExpired"
            },
            "code": "HAL_StatusTypeDef readFromI2C_080027f4(I2C_HandleTypeDef *i2cHandle, uint16_t deviceAddress, uint16_t memoryAddress, uint16_t memoryAddressSize, uint32_t timeout, uint32_t startTime)\n{\n  HAL_StatusTypeDef status;\n  uint32_t currentTime;\n  int timeoutExpired = 0;\n\n  i2cHandle->Instance->CR1 |= 0x400;\n  i2cHandle->Instance->CR1 |= 0x100;\n\n  do {\n    if ((~i2cHandle->Instance->SR1 & 1) == 0) {\n      timeoutExpired = 1;\n      break;\n    }\n    currentTime = HAL_GetTick();\n  } while ((timeout != 0xffffffff) && ((timeout != 0) && (currentTime - startTime <= timeout)));\n\n  if (timeoutExpired) {\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle->Lock = HAL_UNLOCKED;\n    status = HAL_TIMEOUT;\n  }\n  else {\n    i2cHandle->Instance->DR = (uint8_t)(deviceAddress & 0xfe);\n    status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2cHandle, DAT_08002ad4, timeout, startTime);\n    if (status == HAL_OK) {\n      status = I2C_WaitOnTXEFlagUntilTimeout(i2cHandle, timeout, startTime);\n      if (status == HAL_OK) {\n        if (memoryAddressSize == 1) {\n          i2cHandle->Instance->DR = (uint8_t)memoryAddress;\n        }\n        else {\n          i2cHandle->Instance->DR = (uint8_t)(memoryAddress >> 8);\n          status = I2C_WaitOnTXEFlagUntilTimeout(i2cHandle, timeout, startTime);\n          if (status != HAL_OK) {\n            if (i2cHandle->ErrorCode == 4) {\n              i2cHandle->Instance->CR1 |= 0x200;\n              return HAL_ERROR;\n            }\n            return HAL_TIMEOUT;\n          }\n          i2cHandle->Instance->DR = (uint8_t)memoryAddress;\n        }\n        status = I2C_WaitOnTXEFlagUntilTimeout(i2cHandle, timeout, startTime);\n        if (status == HAL_OK) {\n          i2cHandle->Instance->CR1 |= 0x100;\n          do {\n            if ((~i2cHandle->Instance->SR1 & 1) == 0) {\n              timeoutExpired = 1;\n              break;\n            }\n            currentTime = HAL_GetTick();\n          } while ((timeout != 0xffffffff) && ((timeout != 0) && (currentTime - startTime <= timeout)));\n\n          if (timeoutExpired) {\n            i2cHandle->PreviousState = 0;\n            i2cHandle->State = HAL_I2C_STATE_READY;\n            i2cHandle->Mode = HAL_I2C_MODE_NONE;\n            i2cHandle->Lock = HAL_UNLOCKED;\n            status = HAL_TIMEOUT;\n          }\n          else {\n            i2cHandle->Instance->DR = (uint8_t)((uint8_t)deviceAddress | 1);\n            status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2cHandle, DAT_08002ad4, timeout, startTime);\n            if (status == HAL_OK) {\n              status = HAL_OK;\n            }\n            else if (i2cHandle->ErrorCode == 4) {\n              status = HAL_ERROR;\n            }\n            else {\n              status = HAL_TIMEOUT;\n            }\n          }\n        }\n        else if (i2cHandle->ErrorCode == 4) {\n          i2cHandle->Instance->CR1 |= 0x200;\n          status = HAL_ERROR;\n        }\n        else {\n          status = HAL_TIMEOUT;\n        }\n      }\n      else if (i2cHandle->ErrorCode == 4) {\n        i2cHandle->Instance->CR1 |= 0x200;\n        status = HAL_ERROR;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n    else if (i2cHandle->ErrorCode == 4) {\n      status = HAL_ERROR;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n\n  return status;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "readFromI2C_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "convert_uint_to_ulonglong_080003d4",
                "param_1": "input",
                "uVar1": "upper_32_bits",
                "uVar2": "shift_amount",
                "iVar3": "leading_zero_count",
                "uVar4": "temp_shift_amount",
                "in_r12": "unused_register",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "code": "ulonglong convert_uint_to_ulonglong_080003d4(uint input) {\n  uint leading_zero_count = count_leading_zeroes(input);\n  uint shift_amount = leading_zero_count + 0x15;\n  if (input == 0) {\n    return 0;\n  }\n  if (shift_amount >= 0x20) {\n    shift_amount = 0x20 - (leading_zero_count - 0xb);\n    if (shift_amount > 0x20) {\n      return (ulonglong)(input >> (shift_amount - 0x1f));\n    }\n    if (shift_amount == 0x20) {\n      return (ulonglong)0;\n    }\n    return CONCAT44(input << (0x20 - shift_amount), 0);\n  }\n  return CONCAT44(input << shift_amount, 0);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "convert_uint_to_ulonglong_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_pitch_and_roll_08004d78",
                "mpu6050": "sensor",
                "pitch": "pitch_angle",
                "roll": "roll_angle",
                "acc_roll": "roll_acceleration",
                "acc_pitch": "pitch_acceleration",
                "acc_z": "z_acceleration",
                "acc_y": "y_acceleration",
                "acc_x": "x_acceleration",
                "uVar1": "acc_x_div",
                "uVar2": "acc_y_div",
                "uVar3": "acc_z_div",
                "uVar6": "atan2_1",
                "uVar7": "atan2_2",
                "fVar4": "acc_pitch",
                "fVar5": "acc_roll"
            },
            "code": "void calculate_pitch_and_roll_08004d78(Mpu6050 *mpu6050, float *pitch, float *roll)\n{\n    float acc_roll, acc_pitch, acc_z, acc_y, acc_x;\n    float acc_x_div = mpu6050->accX / 0x45800000;\n    float acc_y_div = mpu6050->accY / 0x45800000;\n    float acc_z_div = mpu6050->accZ / 0x45800000;\n    float atan2_1 = atan2f(acc_y_div, acc_z_div);\n    float atan2_2 = atan2f(acc_x_div, acc_z_div);\n    acc_pitch = atan2_1 * 57.29578;\n    acc_roll = atan2_2 * 57.29578;\n    *pitch = acc_pitch;\n    *roll = acc_roll;\n}",
            "called": [
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__divdf3",
                "atan2",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "calculate_pitch_and_roll_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar4": "constant",
                "uVar3": "sign_bit",
                "uVar5": "high_bits",
                "shifted_input": "shifted_input",
                "shifted_constant": "shifted_constant",
                "sum": "sum"
            },
            "code": "uint calculate_hash_08000c10(uint input)\n{\n    uint sign_bit = input & 0x80000000;\n    if ((int)sign_bit < 0) {\n        input = -input;\n    }\n    if (input == 0) {\n        return 0;\n    }\n    int leading_zeroes = count_leading_zeroes(input);\n    uint shift_amount = leading_zeroes - 8;\n    int constant = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n    if (leading_zeroes > 7) {\n        uint high_bits = 0 << (shift_amount & 0xff);\n        uint shifted_input = input << (shift_amount & 0xff);\n        uint shifted_constant = 0U >> (0x20 - shift_amount & 0xff);\n        uint sum = shifted_input + shifted_constant + (uint)(0x7fffffff < high_bits) + constant;\n        if (high_bits == 0x80000000) {\n            sum = sum & 0xfffffffe;\n        }\n        return sum;\n    }\n    uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n    uint shifted_constant = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f);\n    uint sum = shifted_constant + constant;\n    if ((shifted_input & 0x7fffffff) == 0) {\n        sum = sum & ~(shifted_input >> 0x1f);\n    }\n    return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "mpu6050_calibrate",
                "mpu6050_update",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "mpu6050": "sensor",
                "local_13": "power_management_register",
                "local_12": "sample_rate_divider",
                "local_11": "accelerometer_config",
                "PTR_I2C_Write_Reg_080049c8": "i2c_write_register"
            },
            "code": "void initialize_mpu6050_0800491c(Mpu6050 *mpu6050)\n{\n    // Set power management register\n    uint8_t power_management_register = 0;\n    PTR_I2C_Write_Reg_080049c8(0xd0, 0x6b, &power_management_register, 1);\n    \n    // Set sample rate divider\n    uint8_t sample_rate_divider = 0x10;\n    PTR_I2C_Write_Reg_080049c8(0xd0, 0x1c, &sample_rate_divider, 1);\n    \n    // Set accelerometer configuration\n    uint8_t accelerometer_config[1] = {8};\n    PTR_I2C_Write_Reg_080049c8(0xd0, 0x1b, accelerometer_config, 1);\n    \n    // Initialize all sensor readings to 0\n    mpu6050->accX = 0.0;\n    mpu6050->accY = 0.0;\n    mpu6050->accZ = 0.0;\n    mpu6050->temp = 0.0;\n    mpu6050->gyroX = 0.0;\n    mpu6050->gyroY = 0.0;\n    mpu6050->gyroZ = 0.0;\n    mpu6050->offset_gyroX = 0.0;\n    mpu6050->offset_gyroY = 0.0;\n    mpu6050->offset_acc_pitch = 0.0;\n    mpu6050->offset_acc_roll = 0.0;\n    \n    // Calibrate sensor\n    mpu6050_calibrate(mpu6050);\n    return;\n}",
            "called": [
                "mpu6050_calibrate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_mpu6050_0800491c"
        }
    },
    "used_tokens": 163506,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08003568",
            "FUN_08002c2e",
            "FUN_080008ec",
            "FUN_08000978",
            "FUN_0800101c",
            "FUN_080056d4",
            "FUN_080078b4",
            "FUN_080017b4",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_080056ce",
            "FUN_08004f3c",
            "FUN_080008fc",
            "FUN_08001714",
            "FUN_08000988",
            "FUN_080078c0",
            "FUN_080017c4",
            "FUN_080056da",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_08004436",
            "FUN_08009e50",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_08000fc8",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_08001170",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08009e68",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_080036f8",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08005830",
            "FUN_08005714",
            "FUN_08005834",
            "FUN_08005838",
            "FUN_080096e0",
            "FUN_08003540",
            "FUN_08001ab0",
            "FUN_08009768",
            "FUN_08001008",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_08005728",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080078a0",
            "FUN_080056c8",
            "FUN_080057e8",
            "FUN_080008f4",
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08005348",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080099ec",
            "FUN_08005598",
            "FUN_08002640",
            "FUN_08005dfc",
            "FUN_080003f4",
            "FUN_0800045c",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08000c2c",
            "FUN_080009ac",
            "FUN_0800438a",
            "FUN_0800046c",
            "FUN_080009c0",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08000c3c",
            "FUN_08003518",
            "FUN_08005780",
            "FUN_08000fe0",
            "FUN_08008818",
            "FUN_08000418",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_080016d0",
            "FUN_0800088a",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005d0c",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08000f58",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_08000f60",
            "FUN_0800422e",
            "FUN_0800151c",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c"
        ],
        [
            "FUN_080014f0"
        ]
    ],
    "locked_functions": []
}