{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputParam)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_integers_08000134(undefined4 first_integer,undefined4 second_integer)\n\n{\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_product_08000158",
            "code": "\nulonglong calculate_product_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shifted_input2;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shifted_input4;\n  uint result4;\n  uint result3;\n  uint result2;\n  uint result1;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  result4 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result4 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shifted_input4 = (int)result4 >> 0x15;\n  if (!flag2) {\n    flag2 = shifted_input4 == -1;\n  }\n  shifted_input2 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shifted_input2 == -1;\n  }\n  if (flag2) {\n    if (shifted_input4 == -1 || shifted_input2 == -1) {\n      result4 = temp4;\n      result2 = input3;\n      if (shifted_input4 == -1) {\n        result4 = input2;\n        result2 = input1;\n      }\n      if (shifted_input4 != -1 || shifted_input2 != -1) {\n        input3 = result2;\n        temp4 = result4;\n      }\n      flag2 = (result2 | result4 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result4 == temp4;\n      }\n      if (!flag2) {\n        result4 = result4 | 0x80000;\n      }\n      return CONCAT44(result4,result2);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result4 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result4 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result4 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result4 = result4 >> 0x15;\n  input4 = input4 >> 0x15;\n  result2 = input4 - result4;\n  flag2 = result2 != 0;\n  if (input4 < result4) {\n    result2 = -result2;\n  }\n  result3 = input1;\n  temp5 = input2;\n  if (flag2 && result4 <= input4) {\n    result4 = result4 + result2;\n    result3 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result2) {\n    return CONCAT44(temp5,result3);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = result3 != 0;\n    result3 = -result3;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (result4 == result2) {\n    temp5 = temp5 ^ 0x100000;\n    if (result4 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result4 = 1;\n    }\n    else {\n      result2 = result2 - 1;\n    }\n  }\n  temp4 = -result2 + 0x20;\n  if ((int)result2 < 0x21) {\n    result1 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result2 & 0xff);\n    temp1 = result3 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result3,input3) + ((int)temp5 >> (result2 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result1 = temp5 << (-result2 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result1 = result1 | 2;\n    }\n    temp5 = (int)temp5 >> (result2 - 0x20 & 0xff);\n    temp4 = result3 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result3,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result2 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = result1 == 0;\n    result1 = -result1;\n    result2 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    result2 = -(uint)(flag2 <= result2) - temp2;\n  }\n  if (0xfffff < result2) {\n    result3 = result4 - 1;\n    if (0x1fffff < result2) {\n      result3 = result2 & 1;\n      result2 = result2 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result3 != 0) << 0x1f | temp4 >> 1;\n      result1 = (uint)(carry & 1) << 0x1f | result1 >> 1;\n      result3 = result4;\n      if (0xffbfffff < result4 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < result1;\n    if (result1 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result2 + result3 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (result1 & 0x80000000) != 0;\n  result1 = result1 << 1;\n  result3 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  result2 = result2 * 2 + (uint)(flag2 || CARRY4(result3,(uint)flag1));\n  result3 = result4 - 2;\n  if ((result2 & 0x100000) != 0) goto LAB_08000268;\n  temp5 = temp4;\n  result4 = result2;\n  if (result2 == 0) {\n    temp5 = 0;\n    result4 = temp4;\n  }\n  shifted_input4 = LZCOUNT(result4);\n  if (result2 == 0) {\n    shifted_input4 = shifted_input4 + 0x20;\n  }\n  result2 = shifted_input4 - 0xb;\n  flag3 = SBORROW4(result2,0x20);\n  temp4 = shifted_input4 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)result2 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    shifted_input4 = shifted_input4 + -0x1f;\n    flag2 = shifted_input4 < 0;\n    flag1 = shifted_input4 == 0;\n    temp4 = result2;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = result4 << (result2 & 0xff);\n      result4 = result4 >> (0xcU - shifted_input4 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result1 = 0x20 - temp4;\n  }\n  result4 = result4 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result4 = result4 | temp5 >> (result1 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result2 <= (int)result3) {\n    return CONCAT44(result4 + (result3 - result2) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result3 - result2);\n  if ((int)temp4 < 0x1f) {\n    shifted_input4 = temp4 - 0x13;\n    if (shifted_input4 != 0 && shifted_input4 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shifted_input4) & 0xff) | result4 << (0xcU - shifted_input4 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result4 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result4 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result4 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_product_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input2",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shifted_input4",
                "uVar9": "result4",
                "uVar10": "result3",
                "uVar11": "result2",
                "uVar12": "result1",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_0800015c",
            "code": "\nulonglong calculate_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint result1;\n  uint result2;\n  uint result3;\n  int shift1;\n  uint shifted_input2;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  uint result8;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  shifted_input2 = input2 << 1;\n  result5 = input4 << 1;\n  condition1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (shifted_input2 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (result5 | input3) == 0;\n  }\n  shift1 = (int)shifted_input2 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  iVar1 = (int)result5 >> 0x15;\n  if (!condition2) {\n    condition2 = iVar1 == -1;\n  }\n  if (condition2) {\n    if (shift1 == -1 || iVar1 == -1) {\n      result5 = input4;\n      shifted_input2 = input3;\n      if (shift1 == -1) {\n        result5 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift1 != -1 || iVar1 != -1) {\n        input3 = shifted_input2;\n        input4 = result5;\n      }\n      condition2 = (shifted_input2 | result5 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = result5 == input4;\n      }\n      if (!condition2) {\n        result5 = result5 | 0x80000;\n      }\n      return CONCAT44(result5,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      result5 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        result5 = result5 | 0x80000000;\n      }\n      return CONCAT44(result5,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  result5 = result5 >> 0x15;\n  result6 = result5 - shifted_input2;\n  condition2 = result6 != 0;\n  if (result5 < shifted_input2) {\n    result6 = -result6;\n  }\n  result4 = input1;\n  result3 = input2;\n  if (condition2 && shifted_input2 <= result5) {\n    shifted_input2 = shifted_input2 + result6;\n    result4 = input3;\n    result3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < result6) {\n    return CONCAT44(result3,result4);\n  }\n  result5 = result3 & 0xfffff | 0x100000;\n  if ((result3 & 0x80000000) != 0) {\n    condition2 = result4 != 0;\n    result4 = -result4;\n    result5 = -result5 - (uint)condition2;\n  }\n  result3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    result3 = -result3 - (uint)condition2;\n  }\n  if (shifted_input2 == result6) {\n    result3 = result3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      result5 = result5 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      result6 = result6 - 1;\n    }\n  }\n  result8 = -result6 + 0x20;\n  if ((int)result6 < 0x21) {\n    result7 = input3 << (result8 & 0xff);\n    input3 = input3 >> (result6 & 0xff);\n    result1 = result4 + input3;\n    result2 = result3 << (result8 & 0xff);\n    result8 = result1 + result2;\n    result5 = result5 + CARRY4(result4,input3) + ((int)result3 >> (result6 & 0xff)) +\n            (uint)CARRY4(result1,result2);\n  }\n  else {\n    result7 = result3 << (-result6 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result7 = result7 | 2;\n    }\n    result3 = (int)result3 >> (result6 - 0x20 & 0xff);\n    result8 = result4 + result3;\n    result5 = result5 + ((int)result3 >> 0x1f) + (uint)CARRY4(result4,result3);\n  }\n  input2 = result5 & 0x80000000;\n  result6 = result5;\n  if ((int)result5 < 0) {\n    condition2 = result7 == 0;\n    result7 = -result7;\n    result6 = -result8;\n    result8 = -(uint)!condition2 - result8;\n    result6 = -(uint)(condition2 <= result6) - result5;\n  }\n  if (0xfffff < result6) {\n    result4 = shifted_input2 - 1;\n    if (0x1fffff < result6) {\n      result5 = result6 & 1;\n      result6 = result6 >> 1;\n      bVar2 = (byte)result8;\n      result8 = (uint)(result5 != 0) << 0x1f | result8 >> 1;\n      result7 = (uint)(bVar2 & 1) << 0x1f | result7 >> 1;\n      result4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < result7;\n    if (result7 == 0x80000000) {\n      condition2 = (result8 & 1) != 0;\n    }\n    return CONCAT44(result6 + result4 * 0x100000 + (uint)CARRY4(result8,(uint)condition2) | input2,\n                    result8 + condition2);\n  }\n  condition1 = (result7 & 0x80000000) != 0;\n  result7 = result7 << 1;\n  result4 = result8 * 2;\n  condition2 = CARRY4(result8,result8);\n  result8 = result8 * 2 + (uint)condition1;\n  result6 = result6 * 2 + (uint)(condition2 || CARRY4(result4,(uint)condition1));\n  result4 = shifted_input2 - 2;\n  if ((result6 & 0x100000) != 0) goto LAB_08000268;\n  result3 = result8;\n  shifted_input2 = result6;\n  if (result6 == 0) {\n    result3 = 0;\n    shifted_input2 = result8;\n  }\n  shift1 = LZCOUNT(shifted_input2);\n  if (result6 == 0) {\n    shift1 = shift1 + 0x20;\n  }\n  result8 = shift1 - 0xb;\n  condition3 = SBORROW4(result8,0x20);\n  result6 = shift1 - 0x2b;\n  condition2 = (int)result6 < 0;\n  condition1 = result6 == 0;\n  if ((int)result8 < 0x20) {\n    condition3 = SCARRY4(result6,0xc);\n    shift1 = shift1 + -0x1f;\n    condition2 = shift1 < 0;\n    condition1 = shift1 == 0;\n    result6 = result8;\n    if (!condition1 && condition2 == condition3) {\n      result3 = shifted_input2 << (result8 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift1 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    result7 = 0x20 - result6;\n  }\n  shifted_input2 = shifted_input2 << (result6 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shifted_input2 = shifted_input2 | result3 >> (result7 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    result3 = result3 << (result6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result8 <= (int)result4) {\n    return CONCAT44(shifted_input2 + (result4 - result8) * 0x100000 | input2,result3);\n  }\n  result6 = ~(result4 - result8);\n  if ((int)result6 < 0x1f) {\n    shift1 = result6 - 0x13;\n    if (shift1 != 0 && shift1 < 0 == SCARRY4(result6 - 0x1f,0xc)) {\n      return CONCAT44(result5,result3 >> (0x20 - (0xcU - shift1) & 0xff) | shifted_input2 << (0xcU - shift1 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result6 = result6 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (result6 & 0xff),\n                    result3 >> (result6 & 0xff) | shifted_input2 << (0x20 - result6 & 0xff));\n  }\n  return CONCAT44(result5,shifted_input2 >> (result6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_0800015c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "result3",
                "iVar6": "shift1",
                "uVar7": "shifted_input2",
                "uVar8": "result4",
                "uVar9": "result5",
                "uVar10": "result6",
                "uVar11": "result7",
                "uVar12": "result8",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "reverse_bits_080003d4",
            "code": "\nulonglong reverseBits_080003d4(uint input)\n\n{\n  uint output_high;\n  uint shift_amount;\n  int count;\n  uint adjusted_count;\n  uint temp;\n  bool is_negative;\n  bool is_zero;\n  bool has_borrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  output_high = 0;\n  count = LZCOUNT(input);\n  adjusted_count = count + 0x15;\n  has_borrow = SBORROW4(adjusted_count,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (adjusted_count < 0x20) {\n    has_borrow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = adjusted_count;\n    if (!is_zero && has_borrow == false) {\n      output_high = input << adjusted_count;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != has_borrow) {\n    temp = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != has_borrow) {\n    input = input | 0U >> (temp & 0xff);\n  }\n  if (is_zero || is_negative != has_borrow) {\n    output_high = 0 << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if (adjusted_count < 0x433) {\n    return CONCAT44(input + (0x432 - adjusted_count) * 0x100000,output_high);\n  }\n  shift_amount = ~(0x432 - adjusted_count);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    output_high >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(output_high >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "reverse_bits_080003d4",
                "param_1": "input",
                "uVar1": "output_high",
                "uVar2": "shift_amount",
                "iVar3": "count",
                "uVar4": "adjusted_count",
                "in_r12": "temp",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "has_borrow"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "reverse_and_shift_bits_080003f4",
            "code": "\nulonglong reverseAndShiftBits_080003f4(uint input)\n\n{\n  uint result1;\n  uint result2;\n  uint count2;\n  int shiftCount;\n  uint adjustedCount;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool hasCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  result2 = input;\n  if ((int)signBit < 0) {\n    result2 = -input;\n  }\n  result1 = 0;\n  shiftCount = LZCOUNT(result2);\n  adjustedCount = shiftCount + 0x15;\n  hasCarry = SBORROW4(adjustedCount,0x20);\n  count2 = shiftCount - 0xb;\n  isNegative = (int)count2 < 0;\n  isZero = count2 == 0;\n  if (adjustedCount < 0x20) {\n    hasCarry = SCARRY4(count2,0xc);\n    isNegative = false;\n    isZero = shiftCount + 1 == 0;\n    count2 = adjustedCount;\n    if (!isZero && hasCarry == false) {\n      result1 = result2 << adjustedCount;\n      result2 = result2 >> (0xcU - (shiftCount + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != hasCarry) {\n    remainingBits = 0x20 - count2;\n  }\n  result2 = result2 << (count2 & 0xff);\n  if (isZero || isNegative != hasCarry) {\n    result2 = result2 | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != hasCarry) {\n    result1 = 0 << (count2 & 0xff);\n  }\nLAB_080002e0:\n  if (adjustedCount < 0x433) {\n    return CONCAT44(result2 + (0x432 - adjustedCount) * 0x100000 | signBit,result1);\n  }\n  count2 = ~(0x432 - adjustedCount);\n  if (0x1e < (int)count2) {\n    return CONCAT44(input,result2 >> (count2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shiftCount = count2 - 0x13;\n  if (shiftCount == 0 || shiftCount < 0 != SCARRY4(count2 - 0x1f,0xc)) {\n    count2 = count2 + 1;\n    return CONCAT44(signBit | result2 >> (count2 & 0xff),\n                    result1 >> (count2 & 0xff) | result2 << (0x20 - count2 & 0xff));\n  }\n  return CONCAT44(input,result1 >> (0x20 - (0xcU - shiftCount) & 0xff) | result2 << (0xcU - shiftCount & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "reverse_and_shift_bits_080003f4",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "count2",
                "iVar4": "shiftCount",
                "uVar5": "adjustedCount",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "hasCarry"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "decode_number_08000418",
            "code": "\nulonglong decode_number_08000418(uint input_number,undefined4 param_2,undefined4 param_3,uint param_4)\n\n{\n  uint sign_bit;\n  uint shifted_input;\n  uint encoded_number;\n  uint shift_amount;\n  uint twice_input;\n  int leading_zeros;\n  uint var7;\n  uint constant;\n  bool temp1;\n  bool temp2;\n  bool temp3;\n  \n  twice_input = input_number << 1;\n  temp2 = twice_input == 0;\n  sign_bit = (uint)((input_number & 0x80000000) != 0) << 0x1f;\n  shift_amount = (uint)((int)twice_input >> 3) >> 1;\n  encoded_number = sign_bit | shift_amount;\n  input_number = input_number << 0x1d;\n  if (!temp2) {\n    param_4 = twice_input & 0xff000000;\n    temp2 = param_4 == 0;\n  }\n  if (!temp2) {\n    temp2 = param_4 == 0xff000000;\n  }\n  if (!temp2) {\n    return CONCAT44(encoded_number,input_number) ^ 0x3800000000000000;\n  }\n  if ((twice_input & 0xffffff) == 0) {\n    return CONCAT44(encoded_number,input_number);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(encoded_number,input_number) | 0x8000000000000;\n  }\n  shifted_input = input_number;\n  twice_input = shift_amount;\n  if (shift_amount == 0) {\n    shifted_input = 0;\n    twice_input = input_number;\n  }\n  leading_zeros = LZCOUNT(twice_input);\n  if (shift_amount == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  var7 = leading_zeros - 0xb;\n  temp3 = SBORROW4(var7,0x20);\n  shift_amount = leading_zeros - 0x2b;\n  temp2 = (int)shift_amount < 0;\n  temp1 = shift_amount == 0;\n  if ((int)var7 < 0x20) {\n    temp3 = SCARRY4(shift_amount,0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    temp2 = leading_zeros < 0;\n    temp1 = leading_zeros == 0;\n    shift_amount = var7;\n    if (!temp1 && temp2 == temp3) {\n      shifted_input = twice_input << (var7 & 0xff);\n      twice_input = twice_input >> (0xcU - leading_zeros & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (temp1 || temp2 != temp3) {\n    constant = 0x20 - shift_amount;\n  }\n  twice_input = twice_input << (shift_amount & 0xff);\n  if (temp1 || temp2 != temp3) {\n    twice_input = twice_input | shifted_input >> (constant & 0xff);\n  }\n  if (temp1 || temp2 != temp3) {\n    shifted_input = shifted_input << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if ((int)var7 < 0x381) {\n    return CONCAT44(twice_input + (0x380 - var7) * 0x100000 | sign_bit,shifted_input);\n  }\n  shift_amount = ~(0x380 - var7);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(encoded_number,twice_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | twice_input >> (shift_amount & 0xff),\n                    shifted_input >> (shift_amount & 0xff) | twice_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(encoded_number,shifted_input >> (0x20 - (0xcU - leading_zeros) & 0xff) | twice_input << (0xcU - leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "decode_number_08000418",
                "param_1": "input_number",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input",
                "uVar3": "encoded_number",
                "uVar4": "shift_amount",
                "uVar5": "twice_input",
                "iVar6": "leading_zeros",
                "uVar7": "var7",
                "in_r12": "constant",
                "bVar8": "temp1",
                "bVar9": "temp2",
                "bVar10": "temp3"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_result_080004c8",
            "code": "\nulonglong calculate_result_080004c8(undefined4 arg1,uint arg2,uint arg3,uint arg4)\n\n{\n  ulonglong result;\n  longlong temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  bool isZero;\n  bool carry1;\n  bool carry2;\n  ulonglong combinedParams;\n  \n  combinedParams = CONCAT44(arg2,arg1);\n  temp7 = 0x7ff;\n  temp3 = arg2 >> 0x14 & 0x7ff;\n  isZero = temp3 == 0;\n  if (!isZero) {\n    temp6 = arg4 >> 0x14 & 0x7ff;\n    isZero = temp6 == 0;\n  }\n  if (!isZero) {\n    isZero = temp3 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = temp6 == 0x7ff;\n  }\n  if (isZero) {\n    combinedParams = calculate_bitwise_xor_080006a4();\n  }\n  temp2 = (uint)(combinedParams >> 0x20);\n  temp4 = temp3 + temp6;\n  temp3 = temp2 ^ arg4;\n  temp2 = temp2 & ~(temp7 << 0x15);\n  arg4 = arg4 & ~(temp7 << 0x15);\n  isZero = ((uint)combinedParams | temp2 << 0xc) == 0;\n  if (!isZero) {\n    isZero = (arg3 | arg4 << 0xc) == 0;\n  }\n  temp2 = temp2 | 0x100000;\n  arg4 = arg4 | 0x100000;\n  if (isZero) {\n    arg3 = (uint)combinedParams | arg3;\n    arg4 = (temp3 & 0x80000000 | temp2) ^ arg4;\n    temp3 = temp7 >> 1;\n    carry2 = SBORROW4(temp4,temp3);\n    temp5 = temp4 - temp3;\n    isZero = temp5 == 0;\n    temp2 = temp5;\n    if (!isZero && (int)temp3 <= temp4) {\n      carry2 = SBORROW4(temp7,temp5);\n      temp2 = temp7 - temp5;\n      isZero = temp7 == temp5;\n    }\n    if (!isZero && (int)temp2 < 0 == carry2) {\n      arg4 = arg4 | temp5 * 0x100000;\n    }\n    if (!isZero && (int)temp2 < 0 == carry2) {\n      return CONCAT44(arg4,arg3);\n    }\n    arg4 = arg4 | 0x100000;\n    temp7 = 0;\n    carry2 = SBORROW4(temp5,1);\n    temp5 = temp5 - 1;\n    isZero = temp5 == 0;\n    temp3 = temp5;\n  }\n  else {\n    result = (combinedParams & 0xffffffff) * (ulonglong)arg3;\n    combinedParams = (combinedParams & 0xffffffff) * (ulonglong)arg4 +\n             (ulonglong)temp2 * (ulonglong)arg3 + (result >> 0x20);\n    temp8 = (uint)combinedParams;\n    temp1 = (ulonglong)temp2 * (ulonglong)arg4 + (combinedParams >> 0x20);\n    temp7 = (uint)temp1;\n    temp2 = (uint)((ulonglong)temp1 >> 0x20);\n    if ((int)result != 0) {\n      temp8 = temp8 | 1;\n    }\n    temp5 = (temp4 + -0x3ff) - (uint)(temp2 < 0x200);\n    if (temp2 < 0x200) {\n      isZero = (temp8 & 0x80000000) != 0;\n      temp8 = temp8 << 1;\n      temp1 = CONCAT44(temp2 * 2 + (uint)(CARRY4(temp7,temp7) || CARRY4(temp7 * 2,(uint)isZero)),\n                       temp7 * 2 + (uint)isZero);\n    }\n    arg4 = temp3 & 0x80000000 | (int)((ulonglong)temp1 >> 0x20) << 0xb | (uint)temp1 >> 0x15;\n    arg3 = (uint)temp1 << 0xb | temp8 >> 0x15;\n    temp7 = temp8 * 0x800;\n    carry1 = 0xfc < temp5;\n    carry2 = SBORROW4(temp5,0xfd);\n    temp2 = temp5 - 0xfd;\n    isZero = temp2 == 0;\n    temp3 = temp2;\n    if (carry1 && !isZero) {\n      carry1 = 0x6ff < temp2;\n      carry2 = SBORROW4(temp2,0x700);\n      temp3 = temp5 - 0x7fd;\n      isZero = temp2 == 0x700;\n    }\n    if (!carry1 || isZero) {\n      isZero = 0x7fffffff < temp7;\n      if (temp7 == 0x80000000) {\n        isZero = (temp8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(arg4 + temp5 * 0x100000 + (uint)CARRY4(arg3,(uint)isZero),arg3 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)temp3 < 0 == carry2) {\n    return (ulonglong)(arg4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carry1 = SCARRY4(temp5,0x36);\n  isZero = (int)(temp5 + 0x36) < 0;\n  carry2 = temp5 == 0xffffffca;\n  if (carry2 || isZero != carry1) {\n    arg3 = 0;\n  }\n  if (carry2 || isZero != carry1) {\n    arg4 = arg4 & 0x80000000;\n  }\n  if (carry2 || isZero != carry1) {\n    return CONCAT44(arg4,arg3);\n  }\n  temp3 = -temp5;\n  temp2 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp5 = arg3 >> (temp2 & 0xff) | arg4 << (0x20 - temp2 & 0xff);\n    temp3 = (arg4 >> (temp2 & 0xff) & ~((arg4 & 0x80000000) >> (temp2 & 0xff))) -\n            ((int)temp5 >> 0x1f);\n    if ((temp7 | arg3 << (0x20 - temp2 & 0xff) | temp5 << 1) == 0) {\n      temp3 = temp3 & ~(temp5 >> 0x1f);\n    }\n    return CONCAT44(arg4,temp3) & 0x80000000ffffffff;\n  }\n  temp4 = temp3 - 0x14;\n  if (temp4 == 0 || temp4 < 0 != SCARRY4(temp2,0xc)) {\n    temp8 = arg3 << (temp5 + 0x20 & 0xff);\n    temp2 = arg3 >> (temp3 & 0xff) | arg4 << (temp5 + 0x20 & 0xff);\n    temp5 = temp2 + -((int)temp8 >> 0x1f);\n    if ((temp7 | temp8 << 1) == 0) {\n      temp5 = temp5 & ~(temp8 >> 0x1f);\n    }\n    return CONCAT44((arg4 & 0x80000000) +\n                    ((arg4 & 0x7fffffff) >> (temp3 & 0xff)) +\n                    (uint)CARRY4(temp2,-((int)temp8 >> 0x1f)),temp5);\n  }\n  temp3 = 0xc - temp4;\n  temp5 = arg3 << (temp3 & 0xff);\n  temp3 = arg3 >> (0x20 - temp3 & 0xff) | arg4 << (temp3 & 0xff);\n  temp2 = temp3 + -((int)temp5 >> 0x1f);\n  if ((temp7 | temp5 << 1) == 0) {\n    temp2 = temp2 & ~(temp5 >> 0x1f);\n  }\n  return CONCAT44((arg4 & 0x80000000) + (uint)CARRY4(temp3,-((int)temp5 >> 0x1f)),temp2);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result",
                "lVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "unaff_r5": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "bVar9": "isZero",
                "bVar10": "carry1",
                "bVar11": "carry2",
                "uVar12": "combinedParams"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_bitwise_xor_080006a4",
            "code": "\nulonglong calculate_bitwise_xor_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_6;\n  uint temp_5;\n  bool is_zero;\n  \n  temp_3 = temp_5 & input_4 >> 0x14;\n  if (temp_2 != temp_5 && temp_3 != temp_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_2 == 0) {\n      temp_6 = input_2 & 0x80000000;\n      do {\n        temp_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_6;\n      if (temp_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_6 = input_2;\n  if (((!is_zero) && ((temp_2 != temp_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_3 != temp_5 || (input_1 = input_3, temp_6 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_6,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_bitwise_xor_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_6",
                "in_r12": "temp_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_updated_value_0800071c",
            "code": "\nulonglong calculate_updated_value_0800071c(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input_param2,input_param1);\n  temp14 = 0x7ff;\n  temp7 = input_param2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input_param4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_special_value_0800088a();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input_param3 | input_param4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_param4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_param4 << 0xc) >> 4 | 0x10000000 | input_param3 >> 0x18;\n    temp14 = input_param3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input_param4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input_param3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_updated_value_0800071c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_special_value_0800088a",
            "code": "\nulonglong calculate_special_value_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool isZero;\n  \n  temp2 = temp4 & input4 >> 0x14;\n  temp3 = input2;\n  if (temp1 != temp4 || temp2 != temp4) {\n    if (temp1 == temp4) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp3 = input4, temp2 != temp4)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp2 == temp4) {\n      input1 = input3;\n      temp3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp1 == 0) {\n          temp3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp3;\n          if (temp2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_special_value_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "in_r12": "temp4",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_parameters_080008fc",
            "code": "\nuint check_parameters_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "validate_and_return_parameters_08000978",
            "code": "\nvoid validate_and_return_parameters_08000978(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  validate_parameters_08000988(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "validate_and_return_parameters_08000978",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "validate_parameters_08000988",
            "code": "\nundefined4 validate_parameters_08000988(undefined4 input_param)\n\n{\n  check_input_parameters();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000988": "validate_parameters_08000988",
                "param_1": "input_param",
                "check_parameters_080008fc": "check_input_parameters"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_parameter_validity_08000998",
            "code": "\nbool check_parameter_validity_08000998(void)\n\n{\n  char input_character;\n  \n  validate_parameters_08000988();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_parameter_validity_08000998",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "is_null_termination_080009ac",
            "code": "\nbool is_null_termination_080009ac(void)\n\n{\n  char input_character;\n  \n  validate_parameters_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "is_null_termination_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_parameters_080009c0",
            "code": "\nbool check_parameters_080009c0(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  validate_parameters_08000988();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_parameters_080009c0",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "validate_and_return_parameters_080009d4",
            "code": "\nbool validateAndReturnParameters_080009d4(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  validate_and_return_parameters_08000978();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "validate_and_return_parameters_080009d4",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "is_string_empty_080009e8",
            "code": "\nbool is_string_empty_080009e8(void)\n\n{\n  char input_char;\n  \n  validate_and_return_parameters_08000978();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "is_string_empty_080009e8",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_floating_point_bits_080009fc",
            "code": "\nuint calculateFloatingPointBits_080009fc(uint inputValue,uint inputValueBits)\n\n{\n  uint result;\n  uint shiftedBits;\n  uint modifiedBits;\n  uint alignedBits;\n  bool isZero;\n  bool isLessThan;\n  \n  shiftedBits = inputValueBits * 2;\n  isLessThan = shiftedBits < 0x70000000;\n  modifiedBits = shiftedBits + 0x90000000;\n  result = modifiedBits;\n  if (!isLessThan) {\n    alignedBits = shiftedBits + 0x8fe00000;\n    result = alignedBits;\n  }\n  isZero = result == 0;\n  if (!isLessThan && modifiedBits >= 0x200000) {\n    isZero = alignedBits == 0x1fc00000;\n  }\n  if (((isLessThan || modifiedBits < 0x200000) || 0x1fc00000 < alignedBits) || isZero) {\n    if ((inputValueBits & 0x40000000) != 0) {\n      if (((int)shiftedBits >> 0x15 == -1) && ((inputValue | inputValueBits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputValueBits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shiftedBits + 0x92e00000) < 0 != SCARRY4(modifiedBits,0x2e00000)) {\n      return inputValueBits & 0x80000000;\n    }\n    shiftedBits = 0x18 - (shiftedBits + 0x92e00000 >> 0x15);\n    result = inputValue >> (shiftedBits & 0xff);\n    if (inputValue << (0x20 - shiftedBits & 0xff) != 0) {\n      result = result | 1;\n    }\n    modifiedBits = inputValueBits & 0x1fffff | 0x100000;\n    inputValue = result | modifiedBits << (0x20 - shiftedBits & 0xff);\n    modifiedBits = (modifiedBits >> (shiftedBits & 0xff)) << 1;\n  }\n  result = (inputValueBits & 0x80000000 | inputValue >> 0x1d) + modifiedBits * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_bits_080009fc",
                "param_1": "inputValue",
                "param_2": "inputValueBits",
                "uVar1": "result",
                "uVar2": "shiftedBits",
                "uVar3": "modifiedBits",
                "in_r12": "alignedBits",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_floating_point_08000aa4",
            "code": "\nuint calculateFloatingPoint_08000aa4(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftAmount;\n  int shiftAmount2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint adjustedShift;\n  uint difference;\n  bool isTrue;\n  \n  result1 = input2 ^ 0x80000000;\n  temp1 = input1 << 1;\n  isTrue = temp1 == 0;\n  if (!isTrue) {\n    input4 = input2 << 1;\n    isTrue = input4 == 0;\n  }\n  if (!isTrue) {\n    isTrue = temp1 == input4;\n  }\n  shiftAmount = (int)temp1 >> 0x18;\n  if (!isTrue) {\n    isTrue = shiftAmount == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)input4 >> 0x18 == -1;\n  }\n  if (isTrue) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount == -1 || shiftAmount2 == -1) {\n      temp1 = result1;\n      if (shiftAmount == -1) {\n        temp1 = input1;\n      }\n      if (shiftAmount != -1 || shiftAmount2 != -1) {\n        result1 = temp1;\n      }\n      isTrue = (temp1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (result1 & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = temp1 == result1;\n      }\n      if (!isTrue) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  isTrue = difference != 0;\n  adjustedShift = temp1;\n  if (isTrue && temp1 <= input4) {\n    adjustedShift = temp1 + difference;\n  }\n  if (isTrue && temp1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (isTrue && temp1 <= input4) {\n    input1 = input1 ^ result1;\n  }\n  if (isTrue && temp1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (adjustedShift == difference) {\n    result2 = result2 ^ 0x800000;\n    if (adjustedShift == 0) {\n      temp1 = temp1 ^ 0x800000;\n      adjustedShift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isTrue = result2 != 0;\n    result2 = -result2;\n    temp1 = -temp1 - (uint)isTrue;\n  }\n  if (temp1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    temp1 = temp1 * 2 + (uint)(result1 != 0);\n    result1 = adjustedShift - 2;\n    if ((temp1 & 0x800000) == 0) {\n      difference = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        temp1 = temp1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (result1 - difference) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    result1 = adjustedShift - 1;\n    if (0xffffff < temp1) {\n      result1 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = adjustedShift;\n      if (0xfd < adjustedShift) goto LAB_08000bde;\n    }\n  }\n  temp1 = temp1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount",
                "iVar2": "shiftAmount2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "adjustedShift",
                "uVar7": "difference",
                "bVar8": "isTrue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_08000aa8",
            "code": "\nuint calculateFloatingPoint_08000aa8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint variable1;\n  uint variable2;\n  uint variable3;\n  uint variable4;\n  bool condition;\n  \n  variable2 = input1 << 1;\n  condition = variable2 == 0;\n  if (!condition) {\n    param4 = input2 << 1;\n    condition = param4 == 0;\n  }\n  if (!condition) {\n    condition = variable2 == param4;\n  }\n  shiftedInput1 = (int)variable2 >> 0x18;\n  if (!condition) {\n    condition = shiftedInput1 == -1;\n  }\n  if (!condition) {\n    condition = (int)param4 >> 0x18 == -1;\n  }\n  if (condition) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      variable2 = input2;\n      if (shiftedInput1 == -1) {\n        variable2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = variable2;\n      }\n      condition = (variable2 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (input2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = variable2 == input2;\n      }\n      if (!condition) {\n        variable2 = variable2 | 0x400000;\n      }\n      return variable2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (variable2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((variable2 & 0xff000000) == 0) {\n      variable2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        variable2 = variable2 | 0x80000000;\n      }\n      return variable2;\n    }\n    if (variable2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  variable2 = variable2 >> 0x18;\n  param4 = param4 >> 0x18;\n  variable4 = param4 - variable2;\n  condition = variable4 != 0;\n  variable3 = variable2;\n  if (condition && variable2 <= param4) {\n    variable3 = variable2 + variable4;\n  }\n  if (condition && variable2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (condition && variable2 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (condition && variable2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < variable2) {\n    variable4 = -variable4;\n  }\n  if (0x19 < variable4) {\n    return input1;\n  }\n  variable2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    variable2 = -variable2;\n  }\n  variable1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    variable1 = -variable1;\n  }\n  if (variable3 == variable4) {\n    variable1 = variable1 ^ 0x800000;\n    if (variable3 == 0) {\n      variable2 = variable2 ^ 0x800000;\n      variable3 = 1;\n    }\n    else {\n      variable4 = variable4 - 1;\n    }\n  }\n  variable2 = variable2 + ((int)variable1 >> (variable4 & 0xff));\n  variable1 = variable1 << (0x20 - variable4 & 0xff);\n  input1 = variable2 & 0x80000000;\n  if ((int)variable2 < 0) {\n    condition = variable1 != 0;\n    variable1 = -variable1;\n    variable2 = -variable2 - (uint)condition;\n  }\n  if (variable2 < 0x800000) {\n    variable4 = variable1 & 0x80000000;\n    variable1 = variable1 << 1;\n    variable2 = variable2 * 2 + (uint)(variable4 != 0);\n    variable4 = variable3 - 2;\n    if ((variable2 & 0x800000) == 0) {\n      variable3 = LZCOUNT(variable2) - 8;\n      variable2 = variable2 << (variable3 & 0xff);\n      if ((int)variable4 < (int)variable3) {\n        variable2 = variable2 >> (-(variable4 - variable3) & 0xff);\n      }\n      else {\n        variable2 = variable2 + (variable4 - variable3) * 0x800000;\n      }\n      return variable2 | input1;\n    }\n  }\n  else {\n    variable4 = variable3 - 1;\n    if (0xffffff < variable2) {\n      variable4 = variable2 & 1;\n      variable2 = variable2 >> 1;\n      variable1 = (uint)(variable4 != 0) << 0x1f | variable1 >> 1;\n      variable4 = variable3;\n      if (0xfd < variable3) goto LAB_08000bde;\n    }\n  }\n  variable2 = variable2 + variable4 * 0x800000 + (uint)(0x7fffffff < variable1);\n  if (variable1 == 0x80000000) {\n    variable2 = variable2 & 0xfffffffe;\n  }\n  return variable2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "variable1",
                "uVar4": "variable2",
                "uVar5": "variable3",
                "uVar6": "variable4",
                "bVar7": "condition"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_modified_value_08000c08",
            "code": "\nuint calculateModifiedValue_08000c08(uint originalValue)\n\n{\n  uint shiftedValue;\n  uint modifiedValue;\n  int offset;\n  uint bitMask;\n  \n  if (originalValue == 0) {\n    return 0;\n  }\n  shiftedValue = LZCOUNT(originalValue);\n  modifiedValue = shiftedValue - 8;\n  offset = modifiedValue * -0x800000 + 0x4a800000;\n  if (7 < shiftedValue) {\n    bitMask = 0 << (modifiedValue & 0xff);\n    shiftedValue = offset + (originalValue << (modifiedValue & 0xff)) +\n            (0U >> (0x20 - modifiedValue & 0xff)) + (uint)(0x7fffffff < bitMask);\n    if (bitMask == 0x80000000) {\n      shiftedValue = shiftedValue & 0xfffffffe;\n    }\n    return shiftedValue;\n  }\n  modifiedValue = originalValue << shiftedValue + 0x18;\n  shiftedValue = offset + ((originalValue >> (0x20 - (shiftedValue + 0x18) & 0xff)) - ((int)modifiedValue >> 0x1f));\n  if ((modifiedValue & 0x7fffffff) == 0) {\n    shiftedValue = shiftedValue & ~(modifiedValue >> 0x1f);\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_modified_value_08000c08",
                "param_1": "originalValue",
                "uVar1": "shiftedValue",
                "uVar2": "modifiedValue",
                "iVar3": "offset",
                "uVar4": "bitMask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "count_and_transform_number_08000c10",
            "code": "\nuint countAndTransformNumber_08000c10(uint inputNumber)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint isNegative;\n  int result;\n  \n  isNegative = inputNumber & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(inputNumber);\n  shiftAmount = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    isNegative = result + (inputNumber << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = inputNumber << leadingZeros + 0x18;\n  isNegative = result + ((inputNumber >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "count_and_transform_number_08000c10",
                "param_1": "inputNumber",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_number_08000cb8",
            "code": "\nuint calculateFloatingPointNumber_08000cb8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint input1MSB;\n  int sum;\n  int exponentDiff;\n  uint lowerProduct;\n  int exponent;\n  uint adjustedResult;\n  bool isZero1;\n  bool isNegative;\n  \n  input1MSB = input1 >> 0x17 & 0xff;\n  isZero1 = input1MSB == 0;\n  if (!isZero1) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero1 = input4 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = input1MSB == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = input4 == 0xff;\n  }\n  if (isZero1) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (input1MSB == 0xff || input4 == 0xff) {\n      isZero1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero1 = input2 == 0;\n        result = input1;\n      }\n      if (!isZero1) {\n        isZero1 = input2 == 0x80000000;\n      }\n      adjustedResult = result;\n      if (((isZero1) || ((input1MSB == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (adjustedResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return adjustedResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    isZero1 = (input1 & 0x7fffffff) == 0;\n    if (!isZero1) {\n      isZero1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero1 = input1MSB == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input1 = input1 << 1;\n        isZero1 = (input1 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      input1MSB = input1MSB - 1;\n    }\n    input1 = input1 | result;\n    isZero1 = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input2 = input2 << 1;\n        isZero1 = (input2 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1MSB + input4;\n  adjustedResult = input1 ^ input2;\n  input1MSB = input1 << 9;\n  isZero1 = input1MSB == 0;\n  if (!isZero1) {\n    input2 = input2 << 9;\n    isZero1 = input2 == 0;\n  }\n  if (isZero1) {\n    if (input1MSB == 0) {\n      input2 = input2 << 9;\n    }\n    result = adjustedResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = signedSubtractOverflow(sum,0x7f);\n    exponentDiff = sum + -0x7f;\n    isZero1 = exponentDiff == 0;\n    exponent = exponentDiff;\n    if (!isZero1 && 0x7e < sum) {\n      isNegative = signedSubtractOverflow(0xff,exponentDiff);\n      exponent = 0xff - exponentDiff;\n      isZero1 = exponentDiff == 0xff;\n    }\n    if (!isZero1 && exponent < 0 == isNegative) {\n      result = result | exponentDiff * 0x800000;\n    }\n    if (!isZero1 && exponent < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    lowerProduct = 0;\n    isNegative = signedSubtractOverflow(exponentDiff,1);\n    adjustedResult = sum - 0x80;\n    isZero1 = adjustedResult == 0;\n    input1MSB = adjustedResult;\n  }\n  else {\n    product = (ulonglong)(input1MSB >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    lowerProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero1 = result < 0x800000;\n    if (isZero1) {\n      result = result << 1;\n    }\n    if (isZero1) {\n      result = result | lowerProduct >> 0x1f;\n      lowerProduct = lowerProduct << 1;\n    }\n    result = adjustedResult & 0x80000000 | result;\n    adjustedResult = (sum + -0x7f) - (uint)isZero1;\n    isNegative = signedSubtractOverflow(adjustedResult,0xfd);\n    isZero1 = adjustedResult == 0xfd;\n    input1MSB = adjustedResult - 0xfd;\n    if (adjustedResult < 0xfe) {\n      result = result + adjustedResult * 0x800000 + (uint)(0x7fffffff < lowerProduct);\n      if (lowerProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero1 || (int)input1MSB < 0 != isNegative) {\n    isZero1 = (int)(adjustedResult + 0x19) < 0;\n    if (adjustedResult == 0xffffffe7 || isZero1 != signedAddOverflow(adjustedResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (adjustedResult != 0xffffffe7 && isZero1 == signedAddOverflow(adjustedResult,0x19)) {\n      input1MSB = (result << 1) >> (-adjustedResult & 0xff);\n      adjustedResult = result << (adjustedResult + 0x20 & 0xff);\n      input1MSB = ((uint)((result & 0x80000000) != 0) << 0x1f | input1MSB >> 1) + (uint)((byte)input1MSB & 1);\n      if ((lowerProduct | adjustedResult << 1) == 0) {\n        input1MSB = input1MSB & ~(adjustedResult >> 0x1f);\n      }\n      return input1MSB;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_number_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "input1MSB",
                "iVar4": "sum",
                "iVar5": "exponentDiff",
                "uVar6": "lowerProduct",
                "iVar7": "exponent",
                "uVar8": "adjustedResult",
                "bVar9": "isZero1",
                "bVar10": "isNegative",
                "SBORROW4": "signedSubtractOverflow",
                "SCARRY4": "signedAddOverflow"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_floating_point_08000e20",
            "code": "\nuint calculateFloatingPoint_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint result1;\n  uint shift1;\n  int difference;\n  uint shift2;\n  int sum;\n  uint result2;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  shift1 = input1 >> 0x17 & 0xff;\n  condition1 = shift1 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = shift1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result2 = input1;\n    if (shift1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result2 = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result2 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result2 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = shift1 == 0;\n        result2 = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          shift1 = shift1 - 1;\n        }\n        input1 = input1 | result2;\n        condition1 = param4 == 0;\n        result2 = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result2;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = shift1 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      shift1 = 0;\n      condition2 = SBORROW4(sum,1);\n      shift2 = difference + 0x7e;\n      condition1 = shift2 == 0;\n      result2 = shift2;\n    }\n    else {\n      result1 = (input2 << 9) >> 4 | 0x10000000;\n      shift1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = result1 <= shift1;\n      if (!condition1) {\n        shift1 = shift1 << 1;\n      }\n      shift2 = difference + 0x7d + (uint)condition1;\n      result2 = 0x800000;\n      do {\n        if (result1 <= shift1) {\n          shift1 = shift1 - result1;\n          input1 = input1 | result2;\n        }\n        condition1 = result1 >> 1 <= shift1;\n        if (condition1) {\n          shift1 = shift1 - (result1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result2 >> 1;\n        }\n        condition1 = result1 >> 2 <= shift1;\n        if (condition1) {\n          shift1 = shift1 - (result1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result2 >> 2;\n        }\n        condition1 = result1 >> 3 <= shift1;\n        if (condition1) {\n          shift1 = shift1 - (result1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result2 >> 3;\n        }\n        shift1 = shift1 * 0x10;\n        condition1 = shift1 == 0;\n        if (!condition1) {\n          result2 = result2 >> 4;\n          condition1 = result2 == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(shift2,0xfd);\n      condition1 = shift2 == 0xfd;\n      result2 = shift2 - 0xfd;\n      if (shift2 < 0xfe) {\n        input1 = input1 + shift2 * 0x800000 + (uint)(result1 <= shift1);\n        if (shift1 - result1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result2 < 0 != condition2) {\n      condition1 = (int)(shift2 + 0x19) < 0;\n      if (shift2 == 0xffffffe7 || condition1 != SCARRY4(shift2,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (shift2 == 0xffffffe7 || condition1 != SCARRY4(shift2,0x19)) {\n        return input1;\n      }\n      result2 = (input1 << 1) >> (-shift2 & 0xff);\n      shift2 = input1 << (shift2 + 0x20 & 0xff);\n      result2 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result2 >> 1) + (uint)((byte)result2 & 1);\n      if ((shift1 | shift2 << 1) == 0) {\n        result2 = result2 & ~(shift2 >> 0x1f);\n      }\n      return result2;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_08000e20",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "shift1",
                "iVar3": "difference",
                "uVar4": "shift2",
                "iVar5": "sum",
                "uVar6": "result2",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_comparison_08000f68",
            "code": "\nuint calculate_comparison_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_comparison_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "merge_values_08000fc8",
            "code": "\nvoid merge_values_08000fc8(undefined4 destination,undefined4 source)\n\n{\n  merge_values_08000fc8_08000fd0(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "merge_values_08000fc8",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "merge_values_08000fd0",
            "code": "\nundefined8 mergeValues_08000fd0(undefined4 firstValue,undefined4 secondValue)\n\n{\n  calculate_comparison_08000f68();\n  return CONCAT44(secondValue,firstValue);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "merge_values_08000fd0",
                "param_1": "firstValue",
                "param_2": "secondValue"
            },
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_null_terminated_08000ff4",
            "code": "\nbool check_null_terminated_08000ff4(void)\n\n{\n  char input_character;\n  \n  merge_values_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_null_terminated_08000ff4",
                "in_CY": "input_character",
                "merge_values_08000fd0": "merge_values"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_null_termination_08001030",
            "code": "\nbool check_if_null_termination_08001030(void)\n\n{\n  char input_character;\n  \n  merge_values_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_null_termination_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "calculate_shifted_value_08001044",
            "code": "\nuint calculate_shifted_value_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrIter;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint iter;\n  bool isRemainingSizeNonZero;\n  \n  destPtrIter = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      iter = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcPtr = destPtrIter;\n          isRemainingSizeNonZero = iter != 0;\n          iter = iter - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrIter = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemainingSizeNonZero);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      iter = 4 - ((uint)destination & 3);\n      size = size - iter;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtrIter = destPtr;\n      source = srcPtr;\n      if ((iter & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtrIter = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtrIter = *source;\n    destPtrIter[1] = source[1];\n    destPtrIter[2] = source[2];\n    destPtrIter[3] = source[3];\n    destPtrIter[4] = source[4];\n    destPtrIter[5] = source[5];\n    destPtrIter[6] = source[6];\n    destPtrIter[7] = source[7];\n    destPtrIter[8] = source[8];\n    destPtrIter[9] = source[9];\n    destPtrIter[10] = source[10];\n    destPtrIter[0xb] = source[0xb];\n    destPtrIter[0xc] = source[0xc];\n    destPtrIter[0xd] = source[0xd];\n    destPtrIter[0xe] = source[0xe];\n    destPtrIter[0xf] = source[0xf];\n    destPtrIter = destPtrIter + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtrIter = *source;\n      destPtrIter[1] = source[1];\n      destPtrIter[2] = source[2];\n      destPtrIter[3] = source[3];\n      destPtrIter = destPtrIter + 4;\n      source = source + 4;\n      isRemainingSizeNonZero = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemainingSizeNonZero);\n  }\n  iter = remainingSize + 0xc;\n  srcPtr = destPtrIter;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      isRemainingSizeNonZero = 3 < iter;\n      iter = iter - 4;\n      destPtrIter = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (isRemainingSizeNonZero);\n  }\nLAB_08001108:\n  if (iter + 4 != 0) {\n    destPtr = destPtrIter;\n    srcPtr = source;\n    if ((iter & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtrIter + 1);\n      *(undefined *)destPtrIter = *(undefined *)source;\n    }\n    if ((iter + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrIter",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "iter",
                "bVar6": "isRemainingSizeNonZero"
            },
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_conditions_08001170",
            "code": "\nundefined4 check_conditions_08001170(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_conditions_08001170",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "convert_unsigned_to_signed_0800119c",
            "code": "\nuint convertUnsignedToSigned_0800119c(uint inputValue,uint shiftValue)\n\n{\n  uint divisor;\n  int offset;\n  uint bitsToShift;\n  \n  offset = shiftValue * 2 + 0x200000;\n  if (shiftValue * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    divisor = offset >> 0x15;\n    bitsToShift = -divisor - 0x3e1;\n    if (divisor < 0xfffffc20 && bitsToShift != 0) {\n      divisor = (shiftValue << 0xb | 0x80000000 | inputValue >> 0x15) >> (bitsToShift & 0xff);\n      if ((shiftValue & 0x80000000) != 0) {\n        divisor = -divisor;\n      }\n      return divisor;\n    }\n  }\n  else if ((inputValue | shiftValue << 0xc) != 0) {\n    return 0;\n  }\n  shiftValue = shiftValue & 0x80000000;\n  if (shiftValue == 0) {\n    shiftValue = 0x7fffffff;\n  }\n  return shiftValue;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "convert_unsigned_to_signed_0800119c",
                "param_1": "inputValue",
                "param_2": "shiftValue",
                "uVar1": "divisor",
                "iVar2": "offset",
                "uVar3": "bitsToShift"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "calculate_result_080011ec",
            "code": "\nundefined8 calculate_result_080011ec(int input_1,int input_2,int input_3,int input_4)\n\n{\n  undefined8 result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  result = calculate_division_remainder_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_remainder_0800121c(uint dividend,uint divisor,uint quotient,uint temp1,uint *remainder)\n\n{\n  code *jumptable;\n  ulonglong temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  uint *pointer;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool isCarry;\n  undefined8 result;\n  \n  if (temp1 == 0) {\n    if (divisor < quotient) {\n      temp6 = LZCOUNT(quotient);\n      temp8 = quotient;\n      if (temp6 != 0) {\n        temp8 = quotient << temp6;\n        divisor = dividend >> (0x20U - temp6 & 0xff) | divisor << temp6;\n        dividend = dividend << temp6;\n      }\n      temp11 = temp8 >> 0x10;\n      temp9 = divisor / temp11;\n      temp10 = temp9 * (temp8 & 0xffff);\n      temp7 = dividend >> 0x10 | (divisor - temp11 * temp9) * 0x10000;\n      temp4 = temp9;\n      if (temp7 <= temp10 && temp10 - temp7 != 0) {\n        isCarry = CARRY4(temp8,temp7);\n        temp7 = temp8 + temp7;\n        temp4 = temp9 - 1;\n        if ((isCarry == false) && (temp7 <= temp10 && temp10 - temp7 != 0)) {\n          temp4 = temp9 - 2;\n          temp7 = temp7 + temp8;\n        }\n      }\n      temp3 = (temp7 - temp10) / temp11;\n      temp5 = temp3 * (temp8 & 0xffff);\n      temp9 = dividend & 0xffff | ((temp7 - temp10) - temp11 * temp3) * 0x10000;\n      temp7 = temp3;\n      if (temp9 <= temp5 && temp5 - temp9 != 0) {\n        isCarry = CARRY4(temp8,temp9);\n        temp9 = temp8 + temp9;\n        temp7 = temp3 - 1;\n        if ((isCarry == false) && (temp9 <= temp5 && temp5 - temp9 != 0)) {\n          temp7 = temp3 - 2;\n          temp9 = temp9 + temp8;\n        }\n      }\n      temp7 = temp7 | temp4 << 0x10;\n      pointer = (uint *)0x0;\n      temp9 = temp9 - temp5;\n    }\n    else {\n      if (quotient == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumptable = (code *)software_udf(0xff,0x8001302);\n        result = (*jumptable)();\n        return result;\n      }\n      temp6 = LZCOUNT(quotient);\n      if (temp6 == 0) {\n        pointer = (uint *)0x1;\n        divisor = divisor - quotient;\n        temp11 = quotient >> 0x10;\n        temp3 = quotient & 0xffff;\n        temp8 = quotient;\n      }\n      else {\n        temp8 = quotient << temp6;\n        temp7 = divisor >> (0x20U - temp6 & 0xff);\n        temp11 = temp8 >> 0x10;\n        temp10 = temp7 / temp11;\n        temp3 = temp8 & 0xffff;\n        temp5 = temp10 * temp3;\n        temp9 = dividend >> (0x20U - temp6 & 0xff) | divisor << temp6;\n        temp4 = temp9 >> 0x10 | (temp7 - temp11 * temp10) * 0x10000;\n        dividend = dividend << temp6;\n        temp7 = temp10;\n        if (temp4 <= temp5 && temp5 - temp4 != 0) {\n          isCarry = CARRY4(temp8,temp4);\n          temp4 = temp8 + temp4;\n          temp7 = temp10 - 1;\n          if ((isCarry == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n            temp7 = temp10 - 2;\n            temp4 = temp4 + temp8;\n          }\n        }\n        temp10 = (temp4 - temp5) / temp11;\n        temp12 = temp10 * temp3;\n        divisor = temp9 & 0xffff | ((temp4 - temp5) - temp11 * temp10) * 0x10000;\n        temp4 = temp10;\n        if (divisor <= temp12 && temp12 - divisor != 0) {\n          isCarry = CARRY4(temp8,divisor);\n          divisor = temp8 + divisor;\n          temp4 = temp10 - 1;\n          if ((isCarry == false) && (divisor <= temp12 && temp12 - divisor != 0)) {\n            temp4 = temp10 - 2;\n            divisor = divisor + temp8;\n          }\n        }\n        divisor = divisor - temp12;\n        pointer = (uint *)(temp4 | temp7 << 0x10);\n      }\n      temp10 = divisor / temp11;\n      temp7 = temp3 * temp10;\n      temp9 = dividend >> 0x10 | (divisor - temp11 * temp10) * 0x10000;\n      temp4 = temp10;\n      if (temp9 <= temp7 && temp7 - temp9 != 0) {\n        isCarry = CARRY4(temp8,temp9);\n        temp9 = temp8 + temp9;\n        temp4 = temp10 - 1;\n        if ((isCarry == false) && (temp9 <= temp7 && temp7 - temp9 != 0)) {\n          temp4 = temp10 - 2;\n          temp9 = temp9 + temp8;\n        }\n      }\n      temp10 = (temp9 - temp7) / temp11;\n      temp3 = temp3 * temp10;\n      temp9 = dividend & 0xffff | ((temp9 - temp7) - temp11 * temp10) * 0x10000;\n      temp7 = temp10;\n      if (temp9 <= temp3 && temp3 - temp9 != 0) {\n        isCarry = CARRY4(temp8,temp9);\n        temp9 = temp8 + temp9;\n        temp7 = temp10 - 1;\n        if ((isCarry == false) && (temp9 <= temp3 && temp3 - temp9 != 0)) {\n          temp7 = temp10 - 2;\n          temp9 = temp9 + temp8;\n        }\n      }\n      temp9 = temp9 - temp3;\n      temp7 = temp7 | temp4 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp9 >> LZCOUNT(quotient);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    pointer = remainder;\n    if (divisor < temp1) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      temp7 = 0;\n    }\n    else {\n      temp6 = LZCOUNT(temp1);\n      if (temp6 == 0) {\n        if ((temp1 < divisor) || (quotient <= dividend)) {\n          isCarry = dividend < quotient;\n          dividend = dividend - quotient;\n          divisor = (divisor - temp1) - (uint)isCarry;\n          temp7 = 1;\n        }\n        else {\n          temp7 = 0;\n        }\n        pointer = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        temp9 = 0x20 - temp6;\n        temp3 = quotient >> (temp9 & 0xff) | temp1 << temp6;\n        temp8 = divisor >> (temp9 & 0xff);\n        temp5 = temp3 >> 0x10;\n        temp10 = temp8 / temp5;\n        temp11 = temp10 * (temp3 & 0xffff);\n        temp7 = divisor << temp6 | dividend >> (temp9 & 0xff);\n        temp4 = temp7 >> 0x10 | (temp8 - temp5 * temp10) * 0x10000;\n        dividend = dividend << temp6;\n        temp8 = temp10;\n        if (temp4 <= temp11 && temp11 - temp4 != 0) {\n          isCarry = CARRY4(temp3,temp4);\n          temp4 = temp3 + temp4;\n          temp8 = temp10 - 1;\n          if ((isCarry == false) && (temp4 <= temp11 && temp11 - temp4 != 0)) {\n            temp8 = temp10 - 2;\n            temp4 = temp4 + temp3;\n          }\n        }\n        temp10 = (temp4 - temp11) / temp5;\n        temp12 = temp10 * (temp3 & 0xffff);\n        temp4 = temp7 & 0xffff | ((temp4 - temp11) - temp5 * temp10) * 0x10000;\n        temp7 = temp10;\n        if (temp4 <= temp12 && temp12 - temp4 != 0) {\n          isCarry = CARRY4(temp3,temp4);\n          temp4 = temp3 + temp4;\n          temp7 = temp10 - 1;\n          if ((isCarry == false) && (temp4 <= temp12 && temp12 - temp4 != 0)) {\n            temp7 = temp10 - 2;\n            temp4 = temp4 + temp3;\n          }\n        }\n        temp7 = temp7 | temp8 << 0x10;\n        temp2 = (ulonglong)temp7 * (ulonglong)(quotient << temp6);\n        if (CONCAT44(temp4 - temp12,dividend) < temp2) {\n          temp7 = temp7 - 1;\n          temp2 = temp2 - CONCAT44(temp3,quotient << temp6);\n        }\n        if (remainder != (uint *)0x0) {\n          temp8 = ((temp4 - temp12) - (int)(temp2 >> 0x20)) - (uint)(dividend < (uint)temp2);\n          *remainder = temp8 << (temp9 & 0xff) | dividend - (uint)temp2 >> temp6;\n          remainder[1] = temp8 >> temp6;\n          pointer = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(pointer,temp7);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "temp1",
                "param_5": "remainder",
                "uVar1": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "uVar4": "temp5",
                "iVar5": "temp6",
                "uVar6": "temp7",
                "uVar7": "temp8",
                "uVar8": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "isCarry",
                "uVar14": "result",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "puVar9": "pointer"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_and_configure_system_080014f0",
            "code": "\n\n\nundefined4 initialize_and_configure_system_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_register_bits_08001714(3);\n  initialize_and_write_memory(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_and_configure_system_080014f0",
                "set_register_bits_08001714": "configure_register",
                "initialize_and_write_memory_0800151c": "initialize_and_write_memory"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "initialize_and_write_memory_0800151c",
            "code": "\nundefined4 initializeAndWriteMemory_0800151c(uint inputNumber)\n\n{\n  int memoryInitializationResult;\n  undefined4 outputValue;\n  \n  memoryInitializationResult = initialize_memory_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (memoryInitializationResult == 0) {\n    if (inputNumber < 0x10) {\n      write_shifted_bit_to_memory_0800172a(0xffffffff,inputNumber,0);\n      outputValue = 0;\n      DAT_20000000 = inputNumber;\n    }\n    else {\n      outputValue = 1;\n    }\n  }\n  else {\n    outputValue = 1;\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "initialize_and_write_memory_0800151c",
                "param_1": "inputNumber",
                "iVar1": "memoryInitializationResult",
                "uVar2": "outputValue"
            },
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "update_value_0800157c",
            "code": "\nvoid updateValue_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "update_value_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_value_080015a0",
            "code": "\nundefined4 get_data_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_value_080015a0"
            },
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_register_bits_080015b4",
            "code": "\n\n\nvoid setRegisterBits_080015b4(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_register_bits_080015b4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_shifted_bit_080015fc",
            "code": "\n\n\nuint get_shifted_bit_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_shifted_bit_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "write_to_memory_08001618",
            "code": "\nvoid writeToMemory_08001618(byte byteValue,uint data)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "write_to_memory_08001618",
                "param_1": "byteValue",
                "param_2": "data"
            },
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_operation_0800166c",
            "code": "\nuint bitwiseOperation_0800166c(uint input1,uint input2,uint input3)\n\n{\n  uint remainingBits;\n  \n  input1 = input1 & 7;\n  remainingBits = 7 - input1;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (input1 + 4 < 7) {\n    input1 = 0;\n  }\n  else {\n    input1 = input1 - 3;\n  }\n  return input3 & ~(-1 << (input1 & 0xff)) |\n         (~(-1 << (remainingBits & 0xff)) & input2) << (input1 & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_initialize_memory_080016d0",
            "code": "\n\n\nbool checkAndInitializeMemory_080016d0(int inputValue)\n\n{\n  bool isInRange;\n  \n  isInRange = inputValue - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = inputValue + -1;\n    writeToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_initialize_memory_080016d0",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "write_to_memory_08001618": "writeToMemory"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "set_register_bits_08001714",
            "code": "\nvoid set_register_bits_08001714(undefined4 register_bits)\n\n{\n  set_register_bits_08001714_helper(register_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "set_register_bits_08001714",
                "param_1": "register_bits",
                "set_register_bits_080015b4": "set_register_bits_helper"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "write_shifted_bit_to_memory_0800172a",
            "code": "\nvoid writeShiftedBitToMemory_0800172a(char memoryAddress,undefined4 dataValue1,undefined4 dataValue2)\n\n{\n  undefined4 shiftedBitValue;\n  \n  shiftedBitValue = get_shifted_bit_080015fc();\n  shiftedBitValue = bitwise_operation_0800166c(shiftedBitValue,dataValue1,dataValue2);\n  write_to_memory_08001618((int)memoryAddress,shiftedBitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "write_shifted_bit_to_memory_0800172a",
                "param_1": "memoryAddress",
                "param_2": "dataValue1",
                "param_3": "dataValue2",
                "uVar1": "shiftedBitValue"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "initialize_memory_08001762",
            "code": "\nundefined4 initializeMemory_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_memory_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "initialize_memory_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flags_based_on_param_0800177c",
            "code": "\n\n\nvoid setFlagsBasedOnParam_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flags_based_on_param_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "perform_transformation_080017b4",
            "code": "\nvoid performTransformation_080017b4(void)\n\n{\n  extractTransformAndCalculate(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "perform_transformation_080017b4",
                "extract_transform_and_calculate_08004f78": "extractTransformAndCalculate"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_settings_080017c4",
            "code": "\n\n\nvoid updateSettings_080017c4(uint *settingBits1,uint *settingBits2)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  uint typeValue;\n  uint *settingPointer;\n  int settingIndex;\n  uint newValue;\n  uint bitIndex;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    bitCheck = *settingBits2 & bitMask;\n    if (bitCheck == bitMask) {\n      typeValue = settingBits2[1];\n      if (typeValue == 0x12) {\n        newValue = settingBits2[3] + 0xc;\n      }\n      else if (typeValue < 0x13) {\n        if (typeValue == 2) {\n          newValue = settingBits2[3] + 8;\n        }\n        else if (typeValue < 3) {\n          if (typeValue == 0) goto LAB_08001882;\n          if (typeValue == 1) {\n            newValue = settingBits2[3];\n          }\n        }\n        else if (typeValue == 3) {\n          newValue = 0;\n        }\n        else if (typeValue == 0x11) {\n          newValue = settingBits2[3] + 4;\n        }\n      }\n      else if (typeValue == 0x10210000) {\nLAB_08001882:\n        if (settingBits2[2] == 0) {\n          newValue = 4;\n        }\n        else if (settingBits2[2] == 1) {\n          newValue = 8;\n          settingBits1[4] = bitMask;\n        }\n        else {\n          newValue = 8;\n          settingBits1[5] = bitMask;\n        }\n      }\n      else if (typeValue < 0x10210001) {\n        if ((typeValue == 0x10110000) || (typeValue == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((typeValue == 0x10310000) || (typeValue == 0x10320000)) || (typeValue == 0x10220000))\n      goto LAB_08001882;\n      if (bitCheck < 0x100) {\n        bitMask = bitIndex << 2;\n        settingPointer = settingBits1;\n      }\n      else {\n        settingPointer = settingBits1 + 1;\n        bitMask = (bitIndex - 8) * 4;\n      }\n      *settingPointer = *settingPointer & ~(0xf << (bitMask & 0xff)) | newValue << (bitMask & 0xff);\n      if ((settingBits2[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (settingBits1 == (uint *)0x40010800) {\n          settingIndex = 0;\n        }\n        else if (settingBits1 == (uint *)0x40010c00) {\n          settingIndex = 1;\n        }\n        else if (settingBits1 == (uint *)0x40011000) {\n          settingIndex = 2;\n        }\n        else if (settingBits1 == (uint *)0x40011400) {\n          settingIndex = 3;\n        }\n        else {\n          settingIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             settingIndex << ((bitIndex & 3) << 2) |\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000);\n        if ((settingBits2[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitCheck | _DAT_40010400;\n        }\n        if ((settingBits2[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitCheck | _DAT_40010404;\n        }\n        if ((settingBits2[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitCheck | _DAT_40010408;\n        }\n        if ((settingBits2[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_settings_080017c4",
                "param_1": "settingBits1",
                "param_2": "settingBits2",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "uVar3": "typeValue",
                "puVar4": "settingPointer",
                "iVar5": "settingIndex",
                "local_10": "newValue",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "update_flags_based_on_condition_08001a80",
            "code": "\nvoid updateFlagsBasedOnCondition_08001a80(int ptr_to_data,ushort value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(uint *)(ptr_to_data + 0x10) = (uint)value << 0x10;\n  }\n  else {\n    *(uint *)(ptr_to_data + 0x10) = (uint)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "update_flags_based_on_condition_08001a80",
                "param_1": "ptr_to_data",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_data_08001ab0",
            "code": "\nundefined4 initializeData_08001ab0(uint **data)\n\n{\n  uint shiftedData;\n  char isEnabled;\n  undefined4 result;\n  uint tempVar;\n  bool isZero;\n  \n  if (data == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08001cb8(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 0x24;\n    **data = **data & 0xfffffffe;\n    shiftedData = shift_data_by_offset_08003518();\n    if (data[1] < (uint *)0x186a1) {\n      tempVar = shiftedData;\n      if (shiftedData < 2000000) {\n        tempVar = 1;\n      }\n      isEnabled = (char)tempVar;\n      if (1999999 < shiftedData) {\n        isEnabled = '\\0';\n      }\n    }\n    else {\n      tempVar = shiftedData;\n      if (shiftedData < 4000000) {\n        tempVar = 1;\n      }\n      isEnabled = (char)tempVar;\n      if (3999999 < shiftedData) {\n        isEnabled = '\\0';\n      }\n    }\n    if (isEnabled == '\\0') {\n      tempVar = shiftedData / 1000000;\n      (*data)[1] = tempVar;\n      if ((uint *)0x186a0 < data[1]) {\n        tempVar = (tempVar * 300) / 1000;\n      }\n      (*data)[8] = tempVar + 1;\n      if (data[1] < (uint *)0x186a1) {\n        shiftedData = (shiftedData - 1) / (uint)((int)data[1] << 1) + 1 & 0xfff;\n        if (shiftedData < 4) {\n          shiftedData = 4;\n        }\n      }\n      else {\n        if (data[2] == (uint *)0x0) {\n          tempVar = (shiftedData - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff;\n          isZero = tempVar == 0;\n          if (isZero) {\n            tempVar = 1;\n          }\n          isEnabled = (char)tempVar;\n          if (!isZero) {\n            isEnabled = '\\0';\n          }\n        }\n        else {\n          tempVar = (shiftedData - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff;\n          isZero = tempVar == 0;\n          if (isZero) {\n            tempVar = 1;\n          }\n          isEnabled = (char)tempVar;\n          if (!isZero) {\n            isEnabled = '\\0';\n          }\n        }\n        if (isEnabled == '\\0') {\n          if (data[2] == (uint *)0x0) {\n            shiftedData = (shiftedData - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shiftedData = (shiftedData - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shiftedData = 1;\n        }\n      }\n      (*data)[7] = shiftedData;\n      **data = (uint)data[8] | (uint)data[7];\n      (*data)[2] = (uint)data[3] | (uint)data[4];\n      (*data)[3] = (uint)data[6] | (uint)data[5];\n      **data = **data | 1;\n      data[0x10] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_data_08001ab0",
                "param_1": "data",
                "uVar1": "shiftedData",
                "cVar2": "isEnabled",
                "uVar3": "result",
                "uVar4": "tempVar",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "decode_and_update_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\ndecode_and_update_data_08001ccc(uint **data,undefined2 value1,undefined2 value2,undefined2 value3,uint *buffer,\n            undefined2 value4,undefined4 result)\n\n{\n  int current_value;\n  int updated_value;\n  undefined4 return_value;\n  uint *byte_pointer;\n  \n  current_value = get_data_value_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        updated_value = 0;\n        goto LAB_08001d9c;\n      }\n      updated_value = get_data_value_080015a0();\n    } while ((uint)(updated_value - current_value) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    updated_value = 3;\nLAB_08001d9c:\n    if (updated_value == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = buffer;\n        *(undefined2 *)((int)data + 0x2a) = value4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        updated_value = update_data_08002640(data,value1,value2,value3,result,current_value);\n        if (updated_value == 0) {\n          while (*(short *)(data + 10) != 0) {\n            updated_value = check_and_update_data_08002bb4(data,result,current_value);\n            if (updated_value != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_pointer = data[9];\n            data[9] = (uint *)((int)byte_pointer + 1);\n            (*data)[4] = (uint)*(byte *)byte_pointer;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              byte_pointer = data[9];\n              data[9] = (uint *)((int)byte_pointer + 1);\n              (*data)[4] = (uint)*(byte *)byte_pointer;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          current_value = check_and_process_data_08002c2e(data,result,current_value);\n          if (current_value == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            return_value = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            return_value = 1;\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "decode_and_update_data_08001ccc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "buffer",
                "param_6": "value4",
                "param_7": "result",
                "iVar1": "current_value",
                "iVar2": "updated_value",
                "uVar3": "return_value",
                "puVar4": "byte_pointer"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "validate_and_update_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nvalidate_and_update_data_08001f6c(uint **data_ptr,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int data_value;\n  uint tmp;\n  int result;\n  undefined4 return_value;\n  uint *ptr_tmp;\n  \n  data_value = get_data_value_080015a0();\n  if (*(char *)((int)data_ptr + 0x3d) == ' ') {\n    do {\n      if ((~(*data_ptr)[6] & 2) != 0) {\n        result = 0;\n        goto LAB_08002040;\n      }\n      result = get_data_value_080015a0();\n    } while ((uint)(result - data_value) < 0x1a);\n    data_ptr[0xc] = (uint *)0x0;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)data_ptr + 0x3e) = 0;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    result = 3;\nLAB_08002040:\n    if (result == 0) {\n      if (*(char *)(data_ptr + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data_ptr + 0xf) = 1;\n        if ((**data_ptr & 1) != 1) {\n          **data_ptr = **data_ptr | 1;\n        }\n        **data_ptr = **data_ptr & 0xfffff7ff;\n        *(undefined *)((int)data_ptr + 0x3d) = 0x22;\n        *(undefined *)((int)data_ptr + 0x3e) = 0x40;\n        data_ptr[0x10] = (uint *)0x0;\n        data_ptr[9] = param5;\n        *(undefined2 *)((int)data_ptr + 0x2a) = param6;\n        data_ptr[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n        result = update_data_080027f4(data_ptr,param2,param3,param4,param7,data_value);\n        if (result == 0) {\n          if (*(short *)(data_ptr + 10) == 0) {\n            **data_ptr = **data_ptr | 0x200;\n          }\n          else if (*(short *)(data_ptr + 10) == 1) {\n            **data_ptr = **data_ptr & 0xfffffbff;\n            disableIRQinterrupts();\n            **data_ptr = **data_ptr | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(data_ptr + 10) == 2) {\n            **data_ptr = **data_ptr | 0x800;\n            disableIRQinterrupts();\n            **data_ptr = **data_ptr & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **data_ptr = **data_ptr | 0x400;\n          }\n          while (*(short *)(data_ptr + 10) != 0) {\n            if (*(ushort *)(data_ptr + 10) < 4) {\n              if (*(short *)(data_ptr + 10) == 1) {\n                result = validate_data_08002ca8(data_ptr,param7,data_value);\n                if (result != 0) {\n                  if (data_ptr[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n              else if (*(short *)(data_ptr + 10) == 2) {\n                do {\n                  if ((~(*data_ptr)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data_value_080015a0(), (uint)(result - data_value) <= param7)\n                         )));\n                data_ptr[0xc] = (uint *)0x0;\n                *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n                *(undefined *)((int)data_ptr + 0x3e) = 0;\n                *(undefined *)(data_ptr + 0xf) = 0;\n                result = 3;\nLAB_080022fa:\n                if (result != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **data_ptr = **data_ptr | 0x200;\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n                enableIRQinterrupts();\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data_ptr)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data_value_080015a0(), (uint)(result - data_value) <= param7)\n                         )));\n                data_ptr[0xc] = (uint *)0x0;\n                *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n                *(undefined *)((int)data_ptr + 0x3e) = 0;\n                *(undefined *)(data_ptr + 0xf) = 0;\n                result = 3;\nLAB_08002418:\n                if (result != 0) {\n                  return 3;\n                }\n                **data_ptr = **data_ptr & 0xfffffbff;\n                disableIRQinterrupts();\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n                do {\n                  if ((~(*data_ptr)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data_value_080015a0(), (uint)(result - data_value) <= param7)\n                         )));\n                data_ptr[0xc] = (uint *)0x0;\n                *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n                *(undefined *)((int)data_ptr + 0x3e) = 0;\n                *(undefined *)(data_ptr + 0xf) = 0;\n                result = 3;\nLAB_0800250a:\n                if (result != 0) {\n                  return 3;\n                }\n                **data_ptr = **data_ptr | 0x200;\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n                enableIRQinterrupts();\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n            }\n            else {\n              result = validate_data_08002ca8(data_ptr,param7,data_value);\n              if (result != 0) {\n                if (data_ptr[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              tmp = (*data_ptr)[4];\n              ptr_tmp = data_ptr[9];\n              data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n              *(char *)ptr_tmp = (char)tmp;\n              *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n              *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              if (((*data_ptr)[5] & 4) == 4) {\n                tmp = (*data_ptr)[4];\n                ptr_tmp = data_ptr[9];\n                data_ptr[9] = (uint *)((int)ptr_tmp + 1);\n                *(char *)ptr_tmp = (char)tmp;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n          *(undefined *)((int)data_ptr + 0x3e) = 0;\n          *(undefined *)(data_ptr + 0xf) = 0;\n          return_value = 0;\n        }\n        else if (data_ptr[0x10] == (uint *)0x4) {\n          *(undefined *)(data_ptr + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data_ptr + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "validate_and_update_data_08001f6c",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "data_value",
                "uVar2": "tmp",
                "iVar3": "result",
                "uVar4": "return_value",
                "puVar5": "ptr_tmp"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_data_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateData_08002640(uint **data,byte byteFlag,undefined2 flagValue,short conditionFlag,uint dataLimit,int dataValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((dataLimit == 0xffffffff) ||\n          ((dataLimit != 0 && (result = get_data_value_080015a0(), (uint)(result - dataValue) <= dataLimit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = byteFlag & 0xfe;\n    result = check_and_modify_data_08002ad8(data,0x10002,dataLimit,dataValue);\n    if (result == 0) {\n      result = check_and_update_data_08002bb4(data,dataLimit,dataValue,(*data)[6]);\n      if (result == 0) {\n        if (conditionFlag == 1) {\n          (*data)[4] = (uint)(byte)flagValue;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)flagValue >> 8);\n          result = check_and_update_data_08002bb4(data,dataLimit,dataValue);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)flagValue;\n        }\n        returnValue = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_data_08002640",
                "param_1": "data",
                "param_2": "byteFlag",
                "param_3": "flagValue",
                "param_4": "conditionFlag",
                "param_5": "dataLimit",
                "param_6": "dataValue",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "update_data_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdateData_080027f4(uint **data,byte flag,undefined2 value1,short value2,uint limit,int param)\n\n{\n  int result;\n  undefined4 status;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_data_value_080015a0(), (uint)(result - param) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_modify_data_08002ad8(data,0x10002,limit,param);\n    if (result == 0) {\n      result = check_and_update_data_08002bb4(data,limit,param,(*data)[6]);\n      if (result == 0) {\n        if (value2 == 1) {\n          (*data)[4] = (uint)(byte)value1;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value1 >> 8);\n          result = check_and_update_data_08002bb4(data,limit,param);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value1;\n        }\n        result = check_and_update_data_08002bb4(data,limit,param);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = get_data_value_080015a0(), (uint)(result - param) <= limit))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = check_and_modify_data_08002ad8(data,0x10002,limit,param);\n            if (result == 0) {\n              status = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              status = 1;\n            }\n            else {\n              status = 3;\n            }\n          }\n          else {\n            status = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          status = 1;\n        }\n        else {\n          status = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        status = 1;\n      }\n      else {\n        status = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      status = 1;\n    }\n    else {\n      status = 3;\n    }\n  }\n  else {\n    status = 3;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "update_data_080027f4",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "limit",
                "param_6": "param",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_modify_data_08002ad8",
            "code": "\nundefined4 checkAndModifyData_08002ad8(uint **data,uint flag,uint limit,int value)\n\n{\n  int dataValue;\n  char result;\n  uint modifiedFlag;\n  bool isModified;\n  \n  do {\n    if ((flag >> 0x10 & 0xff) == 1) {\n      modifiedFlag = flag & ~(*data)[5] & 0xffff;\n      isModified = modifiedFlag != 0;\n      if (isModified) {\n        modifiedFlag = 1;\n      }\n      result = (char)modifiedFlag;\n      if (!isModified) {\n        result = '\\0';\n      }\n    }\n    else {\n      modifiedFlag = flag & ~(*data)[6] & 0xffff;\n      isModified = modifiedFlag != 0;\n      if (isModified) {\n        modifiedFlag = 1;\n      }\n      result = (char)modifiedFlag;\n      if (!isModified) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*data)[5] & 0x400) == 0x400) {\n      **data = **data | 0x200;\n      (*data)[5] = 0xfffffbff;\n      data[0x10] = (uint *)0x4;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (dataValue = get_data_value_080015a0(), (uint)(dataValue - value) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_modify_data_08002ad8",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "limit",
                "param_4": "value",
                "iVar1": "dataValue",
                "cVar2": "result",
                "uVar3": "modifiedFlag",
                "bVar4": "isModified"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_and_update_data_08002bb4",
            "code": "\nundefined4 check_and_update_data_08002bb4(int *data_ptr,uint data_size,int required_data_size)\n\n{\n  int flag_check_result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flag_check_result = check_flag_08002d3c(data_ptr);\n    if (flag_check_result != 0) break;\n    if ((data_size != 0xffffffff) &&\n       ((data_size == 0 || (flag_check_result = get_data_value_080015a0(), data_size < (uint)(flag_check_result - required_data_size))))) {\n      data_ptr[0x10] = data_ptr[0x10] | 0x20;\n      data_ptr[0xc] = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_and_update_data_08002bb4",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "required_data_size",
                "iVar1": "flag_check_result"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_process_data_08002c2e",
            "code": "\nundefined4 check_and_process_data_08002c2e(int *data_array,uint max_value,int min_value)\n\n{\n  int flag_check_result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flag_check_result = check_flag_08002d3c(data_array);\n    if (flag_check_result != 0) break;\n    if ((max_value != 0xffffffff) &&\n       ((max_value == 0 || (flag_check_result = get_data_value_080015a0(), max_value < (uint)(flag_check_result - min_value))))) {\n      data_array[0x10] = data_array[0x10] | 0x20;\n      data_array[0xc] = 0;\n      *(undefined *)((int)data_array + 0x3d) = 0x20;\n      *(undefined *)(data_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_process_data_08002c2e",
                "param_1": "data_array",
                "param_2": "max_value",
                "param_3": "min_value",
                "iVar1": "flag_check_result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "validate_data_08002ca8",
            "code": "\nundefined4 validate_data_08002ca8(int *input_array,uint array_length,int value)\n\n{\n  int data_value;\n  \n  while( true ) {\n    if ((*(uint *)(*input_array + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*input_array + 0x14) & 0x10) == 0x10) break;\n    if ((array_length == 0) || (data_value = get_data_value_080015a0(), array_length < (uint)(data_value - value))) {\n      result = result | 0x20;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)(input_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*input_array + 0x14) = 0xffffffef;\n  result = 0;\n  input_array[0xc] = 0;\n  *(undefined *)((int)input_array + 0x3d) = 0x20;\n  *(undefined *)(input_array + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "validate_data_08002ca8",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "iVar1": "data_value",
                "param_1[0x10]": "result"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_08002d3c",
            "code": "\nbool checkFlag_08002d3c(int *inputArray)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*inputArray + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*inputArray + 0x14) = 0xfffffbff;\n    inputArray[0x10] = 4;\n    inputArray[0xc] = 0;\n    *(undefined *)((int)inputArray + 0x3d) = 0x20;\n    *(undefined *)(inputArray + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "inputArray",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_config_08002d98",
            "code": "\n\n\nundefined4 checkConfig_08002d98(uint *configParams)\n\n{\n  int initValue;\n  int currValue;\n  undefined4 result;\n  bool flag;\n  \n  if ((*configParams & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (configParams[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (configParams[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (configParams[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (configParams[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (configParams[1] == 0) {\n        initValue = getDataValue();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currValue = getDataValue();\n          if (100 < (uint)(currValue - initValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initValue = getDataValue();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currValue = getDataValue();\n          if (100 < (uint)(currValue - initValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (configParams[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = configParams[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (configParams[4] == 0) {\n      _DAT_42420000 = 0;\n      initValue = getDataValue();\n      while ((_DAT_40021000 & 2) != 0) {\n        currValue = getDataValue();\n        if (2 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initValue = getDataValue();\n      while ((_DAT_40021000 & 2) == 0) {\n        currValue = getDataValue();\n        if (2 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = configParams[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*configParams & 8) != 0) {\n    if (configParams[6] == 0) {\n      _DAT_42420480 = 0;\n      initValue = getDataValue();\n      while ((_DAT_40021024 & 2) != 0) {\n        currValue = getDataValue();\n        if (2 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initValue = getDataValue();\n      while ((_DAT_40021024 & 2) == 0) {\n        currValue = getDataValue();\n        if (2 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n      delayFunction(1);\n    }\n  }\n  if ((*configParams & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initValue = getDataValue();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currValue = getDataValue();\n        if (100 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n    }\n    if (configParams[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (configParams[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (configParams[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (configParams[3] == 0) {\n      initValue = getDataValue();\n      while ((_DAT_40021020 & 2) != 0) {\n        currValue = getDataValue();\n        if (5000 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initValue = getDataValue();\n      while ((_DAT_40021020 & 2) == 0) {\n        currValue = getDataValue();\n        if (5000 < (uint)(currValue - initValue)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (configParams[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (configParams[7] == 2) {\n    _DAT_42420060 = 0;\n    initValue = getDataValue();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (configParams[8] == 0x10000) {\n          _DAT_40021004 = configParams[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = configParams[9] | configParams[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initValue = getDataValue();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currValue = getDataValue();\n          if (2 < (uint)(currValue - initValue)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currValue = getDataValue();\n    } while ((uint)(currValue - initValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initValue = getDataValue();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currValue = getDataValue();\n    } while ((uint)(currValue - initValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_config_08002d98",
                "param_1": "configParams",
                "iVar1": "initValue",
                "iVar2": "currValue",
                "uVar3": "result",
                "bVar4": "flag",
                "get_data_value_080015a0": "getDataValue",
                "delay_function_08003568": "delayFunction"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "process_data_08003260",
            "code": "\n\n\nundefined4 processData_08003260(uint *data,uint count)\n\n{\n  int value1;\n  int value2;\n  uint processingTime;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < count) &&\n     (_DAT_40022000 = count | _DAT_40022000 & 0xfffffff8, count != (count & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*data & 2) != 0) {\n      _DAT_40021004 = data[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*data & 1) == 0) {\nLAB_08003394:\n      if ((count < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = count | _DAT_40022000 & 0xfffffff8, count != (count & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*data & 4) != 0) {\n          _DAT_40021004 = data[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*data & 8) != 0) {\n          _DAT_40021004 = data[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        processingTime = calculate_processing_time_08003440();\n        DAT_20000018 = processingTime >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        initialize_and_write_memory_0800151c(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (data[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((data[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = data[1] | _DAT_40021004 & 0xfffffffc;\n      value1 = get_data_value_080015a0();\n      if (data[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          value2 = get_data_value_080015a0();\n        } while ((uint)(value2 - value1) < 0x1389);\n        result = 3;\n      }\n      else if (data[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          value2 = get_data_value_080015a0();\n        } while ((uint)(value2 - value1) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          value2 = get_data_value_080015a0();\n        } while ((uint)(value2 - value1) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003260": "process_data_08003260",
                "param_1": "data",
                "param_2": "count",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "processingTime",
                "uVar4": "result"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_processing_time_08003440",
            "code": "\n\n\nuint calculateProcessingTime_08003440(void)\n\n{\n  undefined2 multiplier;\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  uint result;\n  undefined4 temp_1;\n  uint temp_2;\n  uint processingTime;\n  uint temp_3;\n  \n  constant_1 = 0x5040302;\n  constant_2 = 0x9080706;\n  constant_3 = 0xd0c0b0a;\n  constant_4 = 0x10100f0e;\n  multiplier = 0x201;\n  temp_1 = 0;\n  temp_3 = 0;\n  result = 0;\n  processingTime = 0;\n  temp_2 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    processingTime = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant_1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp_3 = result * 4000000;\n    }\n    else {\n      temp_3 = (result * 8000000) / (uint)*(byte *)((int)&multiplier + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    processingTime = temp_3;\n  }\n  else {\n    processingTime = 8000000;\n  }\n  return processingTime;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_processing_time_08003440",
                "local_30": "multiplier",
                "local_2c": "constant_1",
                "uStack_28": "constant_2",
                "uStack_24": "constant_3",
                "uStack_20": "constant_4",
                "local_1c": "result",
                "local_18": "temp_1",
                "local_14": "temp_2",
                "local_10": "processingTime",
                "local_c": "temp_3"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_08003504",
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shift_data_by_offset_08003518",
            "code": "\n\n\nuint shiftDataByOffset_08003518(void)\n\n{\n  uint data;\n  \n  data = get_data_08003504();\n  return data >> *(offset *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shift_data_by_offset_08003518",
                "uVar1": "data",
                "sbyte": "offset"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "extracted_data_shifted_08003540",
            "code": "\n\n\nuint extracted_data_shifted_08003540(void)\n\n{\n  uint data;\n  \n  data = get_data_08003504();\n  return data >> *(shift_value *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "extracted_data_shifted_08003540",
                "uVar1": "data",
                "sbyte": "shift_value"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int input)\n\n{\n  bool flag;\n  int counter;\n  \n  counter = input * (DAT_20000018 / 8000);\n  do {\n    flag = counter != 0;\n    counter = counter + -1;\n  } while (flag);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "input",
                "local_c": "counter",
                "bVar1": "flag"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "FUNC_080035a4",
            "code": "\nundefined4 FUNC_080035a4(undefined4 *param_1)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined4 *)0x0) {\n    uVar1 = 1;\n  }\n  else {\n    if (*(char *)((int)param_1 + 0x3d) == '\\0') {\n      *(undefined *)(param_1 + 0xf) = 0;\n      FUNC_080035fa(param_1);\n    }\n    *(undefined *)((int)param_1 + 0x3d) = 2;\n    update_registers_08003c94(*param_1,param_1 + 1);\n    *(undefined *)((int)param_1 + 0x3d) = 1;\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "FUNC_080035a4"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "enable_bit_in_array_0800360c",
            "code": "\nundefined4 enableBitInArray_0800360c(uint **array)\n\n{\n  (*array)[3] = (*array)[3] | 1;\n  **array = **array | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "enable_bit_in_array_0800360c",
                "param_1": "array"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "update_function_status_08003640",
            "code": "\nundefined4 update_function_status_08003640(undefined4 *function_data)\n\n{\n  undefined4 status;\n  \n  if (function_data == (undefined4 *)0x0) {\n    status = 1;\n  }\n  else {\n    if (*(char *)((int)function_data + 0x3d) == '\\0') {\n      *(undefined *)(function_data + 0xf) = 0;\n      FUNC_08003696(function_data);\n    }\n    *(undefined *)((int)function_data + 0x3d) = 2;\n    update_registers(*function_data,function_data + 1);\n    *(undefined *)((int)function_data + 0x3d) = 1;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003640": "update_function_status_08003640",
                "param_1": "function_data",
                "uVar1": "status",
                "update_registers_08003c94": "update_registers"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_and_set_flags_080036a8",
            "code": "\nundefined4 update_and_set_flags_080036a8(uint **pointer_to_uint,undefined4 value)\n\n{\n  update_bit_080041ea(*pointer_to_uint,value,1);\n  if (*pointer_to_uint == (uint *)0x40012c00) {\n    (*pointer_to_uint)[0x11] = (*pointer_to_uint)[0x11] | 0x8000;\n  }\n  **pointer_to_uint = **pointer_to_uint | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_and_set_flags_080036a8",
                "param_1": "pointer_to_uint",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_data_080036f8",
            "code": "\nvoid processData_080036f8(int *data)\n\n{\n  if (((*(uint *)(*data + 0x10) & 2) == 2) && ((*(uint *)(*data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 4) == 4) && ((*(uint *)(*data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 8) == 8) && ((*(uint *)(*data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 0x10) == 0x10) && ((*(uint *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 1) == 1) && ((*(uint *)(*data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffe;\n    performCalculation(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x80) == 0x80) && ((*(uint *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x40) == 0x40) && ((*(uint *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x20) == 0x20) && ((*(uint *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data",
                "extract_transform_and_calculate_08004f78": "performCalculation"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_flags_and_values_08003908",
            "code": "\nundefined4 updateFlagsAndValues_08003908(int *dataPointer,int value,undefined4 type)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(dataPointer + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(dataPointer + 0xf) = 1;\n    *(undefined *)((int)dataPointer + 0x3d) = 2;\n    switch(type) {\n    case 0:\n      update_flags_and_values_08003d60(*dataPointer,value);\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) | 8;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffffffb;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(value + 0x10) | *(uint *)(*dataPointer + 0x18);\n      break;\n    case 4:\n      update_data_08003e38(*dataPointer,value);\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) | 0x800;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffffbff;\n      *(uint *)(*dataPointer + 0x18) = *(int *)(value + 0x10) << 8 | *(uint *)(*dataPointer + 0x18);\n      break;\n    case 8:\n      update_parameters_08003f18(*dataPointer,value);\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) | 8;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffffffb;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(value + 0x10) | *(uint *)(*dataPointer + 0x1c);\n      break;\n    case 0xc:\n      update_data_08003ff8(*dataPointer,value);\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) | 0x800;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffffbff;\n      *(uint *)(*dataPointer + 0x1c) = *(int *)(value + 0x10) << 8 | *(uint *)(*dataPointer + 0x1c);\n    }\n    *(undefined *)((int)dataPointer + 0x3d) = 1;\n    *(undefined *)(dataPointer + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_flags_and_values_08003908",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "type",
                "uVar1": "result",
                "switch(param_3)": "switch(type)"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "update_info_and_memory_08003a94",
            "code": "\nundefined4 update_info_and_memory_08003a94(int *info_ptr,uint *data_ptr)\n\n{\n  undefined4 result;\n  uint data_value;\n  \n  if (*(char *)(info_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(info_ptr + 0xf) = 1;\n    *(undefined *)((int)info_ptr + 0x3d) = 2;\n    *(uint *)(*info_ptr + 8) = *(uint *)(*info_ptr + 8) & 0xffff0088;\n    data_value = *data_ptr;\n    if (data_value == 0x40) {\n      update_param_info_080040a0(*info_ptr,data_ptr[1],data_ptr[3]);\n      update_memory_0800416a(*info_ptr,0x40);\n    }\n    else if (data_value < 0x41) {\n      if (data_value == 0x10) {\n        update_memory_0800416a(*info_ptr,0x10);\n      }\n      else if (data_value < 0x11) {\n        if (data_value == 0) {\n          update_memory_0800416a(*info_ptr,0);\n        }\n      }\n      else if (data_value == 0x20) {\n        update_memory_0800416a(*info_ptr,0x20);\n      }\n      else if (data_value == 0x30) {\n        update_memory_0800416a(*info_ptr,0x30);\n      }\n    }\n    else if (data_value == 0x70) {\n      update_value_with_mask_080041a8(*info_ptr,data_ptr[2],data_ptr[1],data_ptr[3]);\n      *(uint *)(*info_ptr + 8) = *(uint *)(*info_ptr + 8) & 0xffffff88 | 0x77;\n    }\n    else if (data_value < 0x71) {\n      if (data_value == 0x50) {\n        update_param_info_080040a0(*info_ptr,data_ptr[1],data_ptr[3]);\n        update_memory_0800416a(*info_ptr,0x50);\n      }\n      else if (data_value == 0x60) {\n        modify_and_set_bits_08004104(*info_ptr,data_ptr[1],data_ptr[3]);\n        update_memory_0800416a(*info_ptr,0x60);\n      }\n    }\n    else if (data_value == 0x1000) {\n      *(uint *)(*info_ptr + 8) = *(uint *)(*info_ptr + 8) & 0xfffffff8;\n    }\n    else if (data_value == 0x2000) {\n      update_value_with_mask_080041a8(*info_ptr,data_ptr[2],data_ptr[1],data_ptr[3]);\n      *(uint *)(*info_ptr + 8) = *(uint *)(*info_ptr + 8) | 0x4000;\n    }\n    *(undefined *)((int)info_ptr + 0x3d) = 1;\n    *(undefined *)(info_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "update_info_and_memory_08003a94",
                "param_1": "info_ptr",
                "param_2": "data_ptr",
                "uVar1": "result",
                "uVar2": "data_value"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_registers_08003c94",
            "code": "\nvoid updateRegisters_08003c94(uint *register1,uint *register2)\n\n{\n  uint tempValue;\n  \n  tempValue = *register1;\n  if ((((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n      (register1 == (uint *)0x40000400)) || (register1 == (uint *)0x40000800)) {\n    tempValue = register2[1] | tempValue & 0xffffff8f;\n  }\n  if (((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n     ((register1 == (uint *)0x40000400 || (register1 == (uint *)0x40000800)))) {\n    tempValue = register2[3] | tempValue & 0xfffffcff;\n  }\n  *register1 = register2[5] | tempValue & 0xffffff7f;\n  register1[0xb] = register2[2];\n  register1[10] = *register2;\n  if (register1 == (uint *)0x40012c00) {\n    register1ValueCopy = register2[4];\n  }\n  register1[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_registers_08003c94",
                "param_1": "register1",
                "param_2": "register2",
                "local_c": "tempValue",
                "uRam40012c30": "register1ValueCopy"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_flags_and_values_08003d60",
            "code": "\nvoid updateFlagsAndValues_08003d60(int baseAddress,uint *paramsArray)\n\n{\n  uint value1;\n  uint value2;\n  uint tempValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffffe;\n  tempValue = *(uint *)(baseAddress + 4);\n  value1 = *paramsArray;\n  value2 = param2_2 | *(uint *)(baseAddress + 0x20) & 0xfffffffd;\n  if (baseAddress == 0x40012c00) {\n    value2 = (param2_3 | value2 & 0xfffffff7) & 0xfffffffb;\n    tempValue = param2_6 | param2_5 | tempValue & 0xfffffcff;\n  }\n  *(uint *)(baseAddress + 4) = tempValue;\n  *(uint *)(baseAddress + 0x18) = value1 | *(uint *)(baseAddress + 0x18) & 0xffffff8c;\n  *(uint *)(baseAddress + 0x34) = paramsArray[1];\n  *(uint *)(baseAddress + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_flags_and_values_08003d60",
                "param_1": "baseAddress",
                "param_2": "paramsArray",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "tempValue",
                "param_2[2]": "param2_2",
                "param_2[3]": "param2_3",
                "param_2[6]": "param2_6",
                "param_2[5]": "param2_5"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_data_08003e38",
            "code": "\nvoid updateData_08003e38(int dataAddress,int *inputData)\n\n{\n  int tempVar1;\n  uint updatedValue;\n  uint localValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  localValue = *(uint *)(dataAddress + 4);\n  tempVar1 = *inputData;\n  updatedValue = inputData[2] << 4 | *(uint *)(dataAddress + 0x20) & 0xffffffdf;\n  if (dataAddress == 0x40012c00) {\n    updatedValue = (inputData[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    localValue = inputData[6] << 2 | inputData[5] << 2 | localValue & 0xfffff3ff;\n  }\n  *(uint *)(dataAddress + 4) = localValue;\n  *(uint *)(dataAddress + 0x18) = tempVar1 << 8 | *(uint *)(dataAddress + 0x18) & 0xffff8cff;\n  *(int *)(dataAddress + 0x38) = inputData[1];\n  *(uint *)(dataAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "dataAddress",
                "param_2": "inputData",
                "iVar1": "tempVar1",
                "uVar2": "updatedValue",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_parameters_08003f18",
            "code": "\nvoid updateParameters_08003f18(int baseAddress,uint *parameters)\n\n{\n  uint firstValue;\n  uint secondValue;\n  uint localValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  localValue = *(uint *)(baseAddress + 4);\n  firstValue = *parameters;\n  secondValue = parameters[2] << 8 | *(uint *)(baseAddress + 0x20) & 0xfffffdff;\n  if (baseAddress == 0x40012c00) {\n    secondValue = (parameters[3] << 8 | secondValue & 0xfffff7ff) & 0xfffffbff;\n    localValue = parameters[6] << 4 | parameters[5] << 4 | localValue & 0xffffcfff;\n  }\n  *(uint *)(baseAddress + 4) = localValue;\n  *(uint *)(baseAddress + 0x1c) = firstValue | *(uint *)(baseAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(baseAddress + 0x3c) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = secondValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_parameters_08003f18",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "firstValue",
                "uVar2": "secondValue",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_data_08003ff8",
            "code": "\nvoid updateData_08003ff8(int dataAddress,int *paramArray)\n\n{\n  int value1;\n  int value2;\n  uint localValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  localValue = *(uint *)(dataAddress + 4);\n  value1 = *paramArray;\n  value2 = paramArray[2];\n  if (dataAddress == 0x40012c00) {\n    localValue = paramArray[5] << 6 | localValue & 0xffffbfff;\n  }\n  *(uint *)(dataAddress + 4) = localValue;\n  *(uint *)(dataAddress + 0x1c) = value1 << 8 | *(uint *)(dataAddress + 0x1c) & 0xffff8cff;\n  *(int *)(dataAddress + 0x40) = paramArray[1];\n  *(uint *)(dataAddress + 0x20) = value2 << 0xc | *(uint *)(dataAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "dataAddress",
                "param_2": "paramArray",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_param_info_080040a0",
            "code": "\nvoid updateParamInfo_080040a0(int ptr,uint value,int input)\n\n{\n  uint temp1;\n  \n  temp1 = *(uint *)(ptr + 0x20);\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xfffffffe;\n  *(uint *)(ptr + 0x18) = input << 4 | *(uint *)(ptr + 0x18) & 0xffffff0f;\n  *(uint *)(ptr + 0x20) = value | temp1 & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_param_info_080040a0",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "input",
                "uVar1": "temp1"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "modify_and_set_bits_08004104",
            "code": "\nvoid modifyAndSetBits_08004104(int ptr,int data,int value)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xffffffef;\n  *(uint *)(ptr + 0x18) = value << 0xc | *(uint *)(ptr + 0x18) & 0xffff0fff;\n  *(uint *)(ptr + 0x20) = data << 4 | *(uint *)(ptr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "modify_and_set_bits_08004104",
                "param_1": "ptr",
                "param_2": "data",
                "param_3": "value"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_memory_0800416a",
            "code": "\nvoid updateMemory_0800416a(int baseAddress,ushort newValue)\n\n{\n  *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff8f | (uint)(newValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_memory_0800416a",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_value_with_mask_080041a8",
            "code": "\nvoid updateValueWithMask_080041a8(int ptr,uint value,uint mask,int shift)\n\n{\n  *(uint *)(ptr + 8) = value | shift << 8 | mask | *(uint *)(ptr + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_value_with_mask_080041a8",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "mask",
                "param_4": "shift"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bit_080041ea",
            "code": "\nvoid updateBit_080041ea(int data,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bit_080041ea",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_data_0800422e",
            "code": "\nundefined4 updateData_0800422e(int *dataPtr,uint *updateValues)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(dataPtr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(dataPtr + 0xf) = 1;\n    *(uint *)(*dataPtr + 0x44) =\n         value_6 |\n         (value_6 |\n         (value_5 |\n         (value_4 |\n         (*updateValues | (value_1 | (value_2 | value_3 & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(dataPtr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_data_0800422e",
                "param_1": "dataPtr",
                "param_2": "updateValues",
                "uVar1": "result",
                "param_2[6]": "value_6",
                "param_2[5]": "value_5",
                "param_2[4]": "value_4",
                "param_2[1]": "value_1",
                "param_2[2]": "value_2",
                "param_2[3]": "value_3"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_and_values_080042de",
            "code": "\nundefined4 updateFlagsAndValues_080042de(int *flagArray,uint *valueArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(flagArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(flagArray + 0xf) = 1;\n    *(undefined *)((int)flagArray + 0x3d) = 2;\n    *(uint *)(*flagArray + 4) = *(uint *)(*flagArray + 4) & 0xffffff8f;\n    *(uint *)(*flagArray + 4) = *valueArray | *(uint *)(*flagArray + 4);\n    *(uint *)(*flagArray + 8) = *(uint *)(*flagArray + 8) & 0xffffff7f;\n    *(uint *)(*flagArray + 8) = valueArray[1] | *(uint *)(*flagArray + 8);\n    *(undefined *)((int)flagArray + 0x3d) = 1;\n    *(undefined *)(flagArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_and_values_080042de",
                "param_1": "flagArray",
                "param_2": "valueArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_0800438a",
            "code": "\nundefined4 initializeData_0800438a(int *dataPointer)\n\n{\n  undefined4 returnValue;\n  \n  if (dataPointer == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      FUNC_08004424(dataPointer);\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 0x24;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    calculateChecksum(dataPointer);\n    *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x2000;\n    dataPointer[0xf] = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x20;\n    *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_0800438a",
                "param_1": "dataPointer",
                "uVar1": "returnValue",
                "calculate_checksum_080046ec": "calculateChecksum"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **data,ushort *input,short inputLength,uint maxValue)\n\n{\n  int value1;\n  int value2;\n  undefined4 result;\n  ushort *currentInput;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (inputLength == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      value1 = get_data_value_080015a0();\n      *(short *)(data + 9) = inputLength;\n      *(short *)((int)data + 0x26) = inputLength;\n      currentInput = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              value2 = 0;\n              goto LAB_0800454c;\n            }\n          } while ((maxValue == 0xffffffff) ||\n                  ((maxValue != 0 && (value2 = get_data_value_080015a0(), (uint)(value2 - value1) <= maxValue))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          value2 = 3;\nLAB_0800454c:\n          if (value2 != 0) {\n            return 3;\n          }\n          (*data)[1] = *currentInput & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            currentInput = currentInput + 1;\n          }\n          else {\n            currentInput = (ushort *)((int)currentInput + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              value2 = 0;\n              goto LAB_08004614;\n            }\n          } while ((maxValue == 0xffffffff) ||\n                  ((maxValue != 0 && (value2 = get_data_value_080015a0(), (uint)(value2 - value1) <= maxValue))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          value2 = 3;\nLAB_08004614:\n          if (value2 != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)currentInput;\n          currentInput = (ushort *)((int)currentInput + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          value1 = 0;\n          goto LAB_080046c6;\n        }\n      } while ((maxValue == 0xffffffff) ||\n              ((maxValue != 0 && (value2 = get_data_value_080015a0(), (uint)(value2 - value1) <= maxValue))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      value1 = 3;\nLAB_080046c6:\n      if (value1 == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "input",
                "param_3": "inputLength",
                "param_4": "maxValue",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "result",
                "local_58": "currentInput"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *checksumData)\n\n{\n  ulonglong temp1;\n  int temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  undefined8 shiftedData;\n  \n  *(uint *)(*checksumData + 0x10) = checksumData[3] | *(uint *)(*checksumData + 0x10) & 0xffffcfff;\n  *(uint *)(*checksumData + 0xc) =\n       *(uint *)(*checksumData + 0xc) & 0xffffe9f3 | checksumData[5] | checksumData[2] | checksumData[4];\n  *(uint *)(*checksumData + 0x14) = checksumData[6] | *(uint *)(*checksumData + 0x14) & 0xfffffcff;\n  if (*checksumData == 0x40013800) {\n    shiftedData = extracted_data_shifted_08003540();\n    temp1 = (ulonglong)(uint)((int)shiftedData * 0x19) / (ulonglong)(uint)(checksumData[1] << 2);\n    temp2 = extracted_data_shifted_08003540((int)shiftedData,(int)((ulonglong)shiftedData >> 0x20),(int)(temp1 * 0x51eb851f));\n    temp3 = checksumData[1];\n    shiftedData = extracted_data_shifted_08003540();\n    temp4 = ((uint)(temp2 * 0x19) / (uint)(temp3 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedData * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    temp2 = extracted_data_shifted_08003540((int)shiftedData,(int)((ulonglong)shiftedData >> 0x20),temp4 * 0x51eb851f);\n    temp5 = checksumData[1];\n    temp3 = extracted_data_shifted_08003540();\n    *(uint *)(*checksumData + 8) =\n         ((((uint)(temp2 * 0x19) / (uint)(temp5 << 2) +\n           (int)(((ulonglong)(uint)(temp3 * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(temp1 / 100) * 0x10 + (temp4 / 100 & 0xf0);\n  }\n  else {\n    shiftedData = shift_data_by_offset_08003518();\n    temp1 = (ulonglong)(uint)((int)shiftedData * 0x19) / (ulonglong)(uint)(checksumData[1] << 2);\n    temp2 = shift_data_by_offset_08003518((int)shiftedData,(int)((ulonglong)shiftedData >> 0x20),(int)(temp1 * 0x51eb851f));\n    temp3 = checksumData[1];\n    shiftedData = shift_data_by_offset_08003518();\n    temp4 = ((uint)(temp2 * 0x19) / (uint)(temp3 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedData * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    temp2 = shift_data_by_offset_08003518((int)shiftedData,(int)((ulonglong)shiftedData >> 0x20),temp4 * 0x51eb851f);\n    temp5 = checksumData[1];\n    temp3 = shift_data_by_offset_08003518();\n    *(uint *)(*checksumData + 8) =\n         ((((uint)(temp2 * 0x19) / (uint)(temp5 << 2) +\n           (int)(((ulonglong)(uint)(temp3 * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(temp1 / 100) * 0x10 + (temp4 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "checksumData",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "shiftedData",
                "extracted_data_shifted_08003540": "extractedDataShifted",
                "shift_data_by_offset_08003518": "shiftDataByOffset"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_memory_0800491c",
            "code": "\nvoid initializeMemory_0800491c(undefined4 *ptrData)\n\n{\n  undefined zeroByte;\n  undefined sizeByte;\n  undefined arrayByte [5];\n  \n  zeroByte = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&zeroByte,1);\n  sizeByte = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&sizeByte,1);\n  arrayByte[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,arrayByte,1);\n  *ptrData = 0;\n  ptrData[1] = 0;\n  ptrData[2] = 0;\n  ptrData[3] = 0;\n  ptrData[4] = 0;\n  ptrData[5] = 0;\n  ptrData[6] = 0;\n  ptrData[7] = 0;\n  ptrData[8] = 0;\n  ptrData[9] = 0;\n  ptrData[10] = 0;\n  calculate_and_update_values_080049cc(ptrData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_memory_0800491c",
                "param_1": "ptrData",
                "local_13": "zeroByte",
                "local_12": "sizeByte",
                "local_11": "arrayByte"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_and_update_values_080049cc",
            "code": "\nvoid calculateAndUpdateValues_080049cc(int input)\n\n{\n  undefined4 uVar1;\n  undefined4 extractedValue1;\n  undefined4 extractedValue2;\n  undefined4 currentValue;\n  int iterationCount;\n  int counter;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  \n  iterationCount = 1;\n  result4 = 0;\n  result3 = 0;\n  result2 = 0;\n  result1 = 0;\n  currentValue = (*DAT_20000a50)();\n  counter = 0;\n  while( true ) {\n    if (iterationCount <= counter) break;\n    extractedValue2 = 0;\n    extractedValue1 = 0;\n    extract_and_transform_numbers_08004ae0(input);\n    calculate_and_update_values_08004d78(input,&extractedValue2,&extractedValue1);\n    result2 = calculate_floating_point_08000aa8(result2,extractedValue2);\n    result1 = calculate_floating_point_08000aa8(result1,extractedValue1);\n    result4 = calculate_floating_point_08000aa8(result4,*(undefined4 *)(input + 0x10));\n    result3 = calculate_floating_point_08000aa8(result3,*(undefined4 *)(input + 0x14));\n    currentValue = (*DAT_20000a50)();\n    counter = counter + 1;\n  }\n  uVar1 = count_and_transform_number_08000c10(iterationCount);\n  uVar1 = calculate_floating_point_08000e20(result4,uVar1);\n  *(undefined4 *)(input + 0x1c) = uVar1;\n  uVar1 = count_and_transform_number_08000c10(iterationCount);\n  uVar1 = calculate_floating_point_08000e20(result3,uVar1);\n  *(undefined4 *)(input + 0x20) = uVar1;\n  uVar1 = count_and_transform_number_08000c10(iterationCount);\n  uVar1 = calculate_floating_point_08000e20(result2,uVar1);\n  *(undefined4 *)(input + 0x24) = uVar1;\n  uVar1 = count_and_transform_number_08000c10(iterationCount);\n  uVar1 = calculate_floating_point_08000e20(result1,uVar1);\n  *(undefined4 *)(input + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_and_update_values_080049cc",
                "param_1": "input",
                "local_2c": "extractedValue1",
                "local_28": "extractedValue2",
                "local_24": "currentValue",
                "local_20": "iterationCount",
                "local_1c": "counter",
                "local_18": "result1",
                "local_14": "result2",
                "local_10": "result3",
                "local_c": "result4"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_and_transform_numbers_08004ae0",
            "code": "\nvoid extract_and_transform_numbers_08004ae0(undefined4 *result_array)\n\n{\n  undefined4 uVar1;\n  undefined param_2c;\n  undefined param_2b;\n  undefined param_2a;\n  undefined param_29;\n  undefined param_28;\n  undefined param_27;\n  undefined param_26;\n  undefined param_25;\n  undefined param_24;\n  undefined param_23;\n  undefined param_22;\n  undefined param_21;\n  undefined param_20;\n  undefined param_1f;\n  short number_1e;\n  short number_1c;\n  short number_1a;\n  short number_18;\n  short number_16;\n  short number_14;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&param_2c,0xe);\n  number_14 = CONCAT11(param_2a,param_29);\n  number_16 = CONCAT11(param_28,param_27);\n  number_18 = CONCAT11(param_26,param_25);\n  number_1a = CONCAT11(param_24,param_23);\n  number_1c = CONCAT11(param_22,param_21);\n  number_1e = CONCAT11(param_20,param_1f);\n  uVar1 = count_and_transform_number_08000c10((int)CONCAT11(param_2c,param_2b));\n  *result_array = uVar1;\n  uVar1 = count_and_transform_number_08000c10((int)number_14);\n  result_array[1] = uVar1;\n  uVar1 = count_and_transform_number_08000c10((int)number_16);\n  result_array[2] = uVar1;\n  uVar1 = count_and_transform_number_08000c10((int)number_18);\n  result_array[3] = uVar1;\n  uVar1 = count_and_transform_number_08000c10((int)number_1a);\n  result_array[4] = uVar1;\n  uVar1 = count_and_transform_number_08000c10((int)number_1c);\n  result_array[5] = uVar1;\n  uVar1 = count_and_transform_number_08000c10((int)number_1e);\n  result_array[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_and_transform_numbers_08004ae0",
                "param_1": "result_array",
                "local_2c": "param_2c",
                "local_2b": "param_2b",
                "local_2a": "param_2a",
                "local_29": "param_29",
                "local_28": "param_28",
                "local_27": "param_27",
                "local_26": "param_26",
                "local_25": "param_25",
                "local_24": "param_24",
                "local_23": "param_23",
                "local_22": "param_22",
                "local_21": "param_21",
                "local_20": "param_20",
                "local_1f": "param_1f",
                "local_1e": "number_1e",
                "local_1c": "number_1c",
                "local_1a": "number_1a",
                "local_18": "number_18",
                "local_16": "number_16",
                "local_14": "number_14"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_and_update_result_08004bd8",
            "code": "\nvoid calculateAndUpdateResult_08004bd8(int inputData,undefined4 *result)\n\n{\n  undefined4 floatingPointCalculationResult;\n  undefined8 decodedNumber1;\n  undefined8 decodedNumber2;\n  \n  floatingPointCalculationResult = calculate_floating_point_08000aa4(*(undefined4 *)(inputData + 0x10),*(undefined4 *)(inputData + 0x1c));\n  decodedNumber1 = decode_number_08000418(DAT_200009e4);\n  decodedNumber2 = decode_number_08000418(floatingPointCalculationResult);\n  decodedNumber2 = calculate_result_080004c8((int)decodedNumber2,(int)((ulonglong)decodedNumber2 >> 0x20),0x83f5c366,0x3f340215);\n  decodedNumber1 = calculate_0800015c((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),(int)decodedNumber2,\n                       (int)((ulonglong)decodedNumber2 >> 0x20));\n  DAT_200009e4 = calculate_floating_point_bits_080009fc((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20));\n  decodedNumber1 = decode_number_08000418(*(undefined4 *)(inputData + 4));\n  decodedNumber1 = calculate_updated_value_0800071c((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),0,0x40b00000);\n  decodedNumber2 = decode_number_08000418(*(undefined4 *)(inputData + 8));\n  decodedNumber2 = calculate_updated_value_0800071c((int)decodedNumber2,(int)((ulonglong)decodedNumber2 >> 0x20),0,0x40b00000);\n  decodedNumber1 = calculate_result_thunk_08005838((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),(int)decodedNumber2,\n                             (int)((ulonglong)decodedNumber2 >> 0x20));\n  decodedNumber1 = calculate_result_080004c8((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),0,0x40668000);\n  decodedNumber1 = calculate_updated_value_0800071c((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),0x54442d18,0x400921fb);\n  decodedNumber2 = decode_number_08000418(*(undefined4 *)(inputData + 0x24));\n  decodedNumber1 = calculate_product_08000158((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),(int)decodedNumber2,\n                       (int)((ulonglong)decodedNumber2 >> 0x20));\n  decodedNumber1 = calculate_0800015c((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),0,0x40568000);\n  floatingPointCalculationResult = calculate_floating_point_bits_080009fc((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    decodedNumber1 = decode_number_08000418(DAT_200009e4);\n    decodedNumber1 = calculate_result_080004c8((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),0x9999999a,0x3fe99999);\n    decodedNumber2 = decode_number_08000418(floatingPointCalculationResult);\n    decodedNumber2 = calculate_result_080004c8((int)decodedNumber2,(int)((ulonglong)decodedNumber2 >> 0x20),0x9999999a,0x3fc99999);\n    decodedNumber1 = calculate_0800015c((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20),(int)decodedNumber2,\n                         (int)((ulonglong)decodedNumber2 >> 0x20));\n    DAT_200009e4 = calculate_floating_point_bits_080009fc((int)decodedNumber1,(int)((ulonglong)decodedNumber1 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = floatingPointCalculationResult;\n  }\n  *result = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_and_update_result_08004bd8",
                "param_1": "inputData",
                "param_2": "result",
                "uVar1": "floatingPointCalculationResult",
                "uVar2": "decodedNumber1",
                "uVar3": "decodedNumber2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_and_update_values_08004d78",
            "code": "\nvoid calculate_and_update_values_08004d78(undefined4 *input_values,undefined4 *output_value_1,undefined4 *output_value_2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 result4;\n  undefined8 result5;\n  \n  result1 = calculate_floating_point_08000e20(*input_values,0x45800000);\n  result2 = calculate_floating_point_08000e20(input_values[1],0x45800000);\n  result3 = calculate_floating_point_08000e20(input_values[2],0x45800000);\n  result4 = decode_number_08000418(result2);\n  result5 = decode_number_08000418(result3);\n  result4 = calculate_result_thunk_08005838((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                             (int)((ulonglong)result5 >> 0x20));\n  result4 = calculate_result_080004c8((int)result4,(int)((ulonglong)result4 >> 0x20),0,0x40668000);\n  result4 = calculate_updated_value_0800071c((int)result4,(int)((ulonglong)result4 >> 0x20),0x54442d18,0x400921fb);\n  result2 = calculate_floating_point_bits_080009fc((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result4 = decode_number_08000418(result1);\n  result5 = decode_number_08000418(result3);\n  result4 = calculate_result_thunk_08005838((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                             (int)((ulonglong)result5 >> 0x20));\n  result4 = calculate_result_080004c8((int)result4,(int)((ulonglong)result4 >> 0x20),0,0x40668000);\n  result4 = calculate_updated_value_0800071c((int)result4,(int)((ulonglong)result4 >> 0x20),0x54442d18,0x400921fb);\n  result1 = calculate_floating_point_bits_080009fc((int)result4,(int)((ulonglong)result4 >> 0x20));\n  *output_value_1 = result2;\n  *output_value_2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_and_update_values_08004d78",
                "param_1": "input_values",
                "param_2": "output_value_1",
                "param_3": "output_value_2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "send_software_interrupt_08004e6c",
            "code": "\nvoid sendSoftwareInterrupt_08004e6c(void)\n\n{\n  invokeInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "send_software_interrupt_08004e6c",
                "software_interrupt": "invokeInterrupt"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_interrupt_08004e74",
            "code": "\nundefined4 initializeInterrupt_08004e74(undefined4 interruptCode)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = send_software_interrupt_08004e6c(1,interruptCode,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_interrupt_08004e74",
                "param_1": "interruptCode",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "decode_and_update_data_08004ea4",
            "code": "\nvoid decodeAndUpdateData_08004ea4(undefined input1,undefined input2,undefined4 value1,undefined2 value2)\n\n{\n  decode_and_update_data_08001ccc(&DAT_20000a88,input1,input2,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "decode_and_update_data_08004ea4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "validate_and_update_data_08004ee8",
            "code": "\nvoid validateAndUpdateData_08004ee8(undefined dataParam1,undefined dataParam2,undefined4 dataParam3,undefined2 dataParam4)\n\n{\n  validateAndUpdateData_08004ee8Helper(&DAT_20000a88,dataParam1,dataParam2,1,dataParam3,dataParam4,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "validate_and_update_data_08004ee8",
                "param_1": "dataParam1",
                "param_2": "dataParam2",
                "param_3": "dataParam3",
                "param_4": "dataParam4",
                "validate_and_update_data_08001f6c": "validateAndUpdateDataHelper"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_data_value_08004f2c",
            "code": "\nundefined4 get_data_value_08004f2c(void)\n\n{\n  undefined4 data_value;\n  \n  data_value = get_data_value_08004f2c_080015a0();\n  return data_value;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_data_value_08004f2c",
                "uVar1": "data_value"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_08004f3c",
            "code": "\nvoid process_data_08004f3c(undefined4 data_ptr,undefined2 data_length)\n\n{\n  process_data_08004f3c_08004436(&DAT_20000adc,data_ptr,data_length,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data_ptr",
                "param_2": "data_length"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_data_08004f60",
            "code": "\nvoid initializeData_08004f60(void)\n\n{\n  memset_with_value_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "extract_transform_and_calculate_08004f78",
            "code": "\nvoid extractTransformAndCalculate_08004f78(void)\n\n{\n  undefined4 result;\n  int checkResult;\n  undefined4 lzCount;\n  uint bitwiseXor;\n  undefined8 decodedNumber;\n  byte modifiedNumber;\n  \n  extract_and_transform_numbers_08004ae0(&DAT_20000a5c);\n  calculateAndUpdateResult(&DAT_20000a5c,&DAT_20000ba0);\n  initialize_data_08004f60();\n  decodedNumber = decode_number_08000418(DAT_20000ba0);\n  initialize_data_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)decodedNumber,(int)((ulonglong)decodedNumber >> 0x20));\n  result = calculate_lzcount_08005e40(&DAT_20000ba8);\n  processData(&DAT_20000ba8,result);\n  DAT_200009f8 = calculate_floating_point_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculate_floating_point_number_08000cb8(DAT_20000a00,DAT_200009f8);\n  result = calculate_floating_point_number_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculate_floating_point_08000aa8(result,DAT_20000b5c);\n  result = count_and_transform_number_08000c10(DAT_20000010);\n  checkResult = checkNullTerminated1(result,DAT_20000b5c);\n  if (checkResult == 0) {\n    result = count_and_transform_number_08000c10(DAT_200009f4);\n    checkResult = checkNullTermination(result,DAT_20000b5c);\n    if (checkResult != 0) {\n      DAT_20000b5c = calculate_modified_value_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculate_modified_value_08000c08(DAT_20000010);\n  }\n  bitwiseXor = DAT_20000a08 ^ 0x80000000;\n  result = calculate_floating_point_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculate_floating_point_number_08000cb8(bitwiseXor,result);\n  result = calculate_floating_point_08000aa8(DAT_20000be8,DAT_20000b5c);\n  result = calculate_floating_point_08000aa8(result,DAT_20000a58);\n  lzCount = count_and_transform_number_08000c10(DAT_20000010);\n  checkResult = checkNullTermination(result,lzCount);\n  if (checkResult == 0) {\n    lzCount = count_and_transform_number_08000c10(DAT_200009f4);\n    checkResult = checkNullTerminated1(result,lzCount);\n    if (checkResult == 0) {\n      modifiedNumber = calculate_shifted_value_08001044(result);\n    }\n    else {\n      modifiedNumber = DAT_200009f4;\n    }\n  }\n  else {\n    modifiedNumber = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  checkResult = checkNullTermination(DAT_200009f8,0);\n  update_flags_based_on_condition_08001a80(0x40010800,2,checkResult != 0);\n  checkResult = checkNullTermination(DAT_200009f8,0);\n  update_flags_based_on_condition_08001a80(0x40010800,4,checkResult == 0);\n  checkResult = checkNullTermination(DAT_200009f8,0);\n  update_flags_based_on_condition_08001a80(0x40010800,8,checkResult != 0);\n  checkResult = checkNullTermination(DAT_200009f8,0);\n  update_flags_based_on_condition_08001a80(0x40010800,0x10,checkResult == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)modifiedNumber;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)modifiedNumber;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "extract_transform_and_calculate_08004f78",
                "uVar1": "result",
                "iVar2": "checkResult",
                "uVar3": "lzCount",
                "uVar4": "bitwiseXor",
                "uVar5": "decodedNumber",
                "local_11": "modifiedNumber",
                "extract_and_transform_numbers_08004ae0": "extractAndTransformNumbers",
                "calculate_and_update_result_08004bd8": "calculateAndUpdateResult",
                "initialize_data_08004f60": "initializeData",
                "decode_number_08000418": "decodeNumber",
                "initialize_data_08005dfc": "initializeDataFormat",
                "calculate_lzcount_08005e40": "calculateLZCount",
                "process_data_08004f3c": "processData",
                "calculate_floating_point_08000aa4": "calculateFloatingPoint1",
                "calculate_floating_point_number_08000cb8": "calculateFloatingPoint2",
                "count_and_transform_number_08000c10": "countAndTransformNumber",
                "check_null_terminated_08000ff4": "checkNullTerminated1",
                "check_if_null_termination_08001030": "checkNullTermination",
                "calculate_modified_value_08000c08": "calculateModifiedValue",
                "calculate_floating_point_08000aa8": "calculateFloatingPoint3",
                "calculate_shifted_value_08001044": "calculateShiftedValue",
                "update_flags_based_on_condition_08001a80": "updateFlagsBasedOnCondition"
            },
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_program_08005224",
            "code": "\nvoid initialize_program_08005224(void)\n\n{\n  initialize_and_configure_system_080014f0();\n  initialize_program_08005224_080052a0();\n  initialize_settings_080055f4();\n  initialize_data_08005348();\n  initialize_data_and_loop_forever_08005598();\n  initialize_system_08005500();\n  initialize_program_08005224_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_and_set_flags_080036a8(&DAT_20000b1c,0);\n  update_and_set_flags_080036a8(&DAT_20000b1c,0xc);\n  initialize_memory_0800491c(&DAT_20000a5c);\n  enable_bit_in_array_0800360c(&DAT_20000b60);\n  initialize_interrupt_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_program_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_program_080052a0",
            "code": "\nvoid initialize_program_080052a0(void)\n\n{\n  int check_result;\n  undefined8 data_size;\n  undefined4 config_value;\n  undefined4 config_option;\n  undefined4 config_size;\n  undefined4 data_value;\n  undefined4 data_option;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  undefined4 flag_3;\n  undefined4 flag_4;\n  undefined4 flag_5;\n  undefined4 flag_6;\n  undefined4 flag_7;\n  \n  flag_1 = 1;\n  flag_2 = 0x10000;\n  flag_3 = 0;\n  flag_4 = 1;\n  flag_5 = 2;\n  flag_6 = 0x10000;\n  flag_7 = 0x1c0000;\n  check_result = check_config_08002d98(&flag_1);\n  if (check_result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x151);\n  }\n  config_value = 0xf;\n  config_option = 2;\n  config_size = 0x80;\n  data_value = 0;\n  data_option = 0;\n  check_result = process_data_08003260(&config_value,2);\n  if (check_result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x15e);\n  }\n  data_size = get_data_08003504();\n  initialize_memory_08001762((uint)data_size / 1000,(int)((ulonglong)data_size >> 0x20),(uint)data_size * 0x10624dd3);\n  set_flags_based_on_param_0800177c(4);\n  write_shifted_bit_to_memory_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_program_080052a0",
                "local_44": "config_value",
                "local_40": "config_option",
                "local_3c": "config_size",
                "local_38": "data_value",
                "local_34": "data_option",
                "local_30": "flag_1",
                "local_2c": "flag_2",
                "local_28": "flag_3",
                "local_20": "flag_4",
                "local_14": "flag_5",
                "local_10": "flag_6",
                "local_c": "flag_7",
                "iVar1": "check_result",
                "uVar2": "data_size"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initialize_data_08005348(void)\n\n{\n  int iVar1;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  iVar1 = init_data_func(&DAT_20000a88);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "initialize_data_08001ab0": "init_data_func",
                "loop_forever_08005674": "loop_forever"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initialize_program_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 memory_size;\n  undefined4 update_info_result;\n  undefined4 update_status_result;\n  undefined4 update_flags_result;\n  undefined4 update_memory_result;\n  undefined4 data_update_size;\n  undefined4 update_data_result;\n  undefined4 update_flags_size;\n  undefined4 update_flags_offset;\n  undefined4 update_flags_flag;\n  undefined4 update_flags_value;\n  undefined4 update_flags_size;\n  undefined4 function_update_size;\n  undefined4 update_flags_value;\n  undefined4 flags_update_result;\n  undefined4 flags_update_value;\n  undefined4 update_info_value [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUNC_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",399);\n  }\n  update_info_value[0] = 0x1000;\n  iVar1 = update_info_and_memory_08003a94(&DAT_20000b1c,update_info_value);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = update_function_status_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x198);\n  }\n  flags_update_result = 0;\n  flags_update_value = 0;\n  iVar1 = update_flags_and_values_080042de(&DAT_20000b1c,&flags_update_result);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x19f);\n  }\n  update_flags_size = 0x60;\n  update_flags_offset = 0;\n  update_flags_flag = 0;\n  update_flags_value = 0;\n  update_flags_size = 0;\n  function_update_size = 0;\n  update_flags_value = 0;\n  iVar1 = update_flags_and_values_08003908(&DAT_20000b1c,&update_flags_size,0);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = update_flags_and_values_08003908(&DAT_20000b1c,&update_flags_size,0xc);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1b0);\n  }\n  memory_size = 0;\n  update_info_result = 0;\n  update_status_result = 0;\n  update_flags_result = 0;\n  update_memory_result = 0;\n  data_update_size = 0x2000;\n  update_data_result = 0;\n  iVar1 = update_data_0800422e(&DAT_20000b1c,&memory_size);\n  if (iVar1 != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1bc);\n  }\n  update_settings_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_58": "memory_size",
                "local_54": "update_info_result",
                "local_50": "update_status_result",
                "local_4c": "update_flags_result",
                "local_48": "update_memory_result",
                "local_44": "data_update_size",
                "local_40": "update_data_result",
                "local_3c": "update_flags_size",
                "local_38": "update_flags_offset",
                "local_34": "update_flags_flag",
                "local_30": "update_flags_value",
                "local_2c": "update_flags_size",
                "local_28": "function_update_size",
                "local_24": "update_flags_value",
                "local_20": "flags_update_result",
                "local_1c": "flags_update_value",
                "local_18": "update_info_value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_system_08005500",
            "code": "\nvoid initializeSystem_08005500(void)\n\n{\n  int result;\n  undefined4 memorySize;\n  undefined4 memoryFlags;\n  undefined4 updateParams [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = FUNC_080035a4(&DAT_20000b60);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1d0);\n  }\n  updateParams[0] = 0x1000;\n  result = update_info_and_memory_08003a94(&DAT_20000b60,updateParams);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1d5);\n  }\n  memorySize = 0x20;\n  memoryFlags = 0;\n  result = update_flags_and_values_080042de(&DAT_20000b60,&memorySize);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_system_08005500",
                "local_20": "memorySize",
                "local_1c": "memoryFlags",
                "local_18": "updateParams",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_and_loop_forever_08005598",
            "code": "\nvoid initialize_data_and_loop_forever_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = initialize_data_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    loop_forever_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_and_loop_forever_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_settings_080055f4",
            "code": "\n\n\nvoid initializeSettings_080055f4(void)\n\n{\n  undefined4 flagValue;\n  undefined4 counter;\n  undefined4 settingValue;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  update_flags_based_on_condition_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  flagValue = 0x1e;\n  counter = 1;\n  settingValue = 2;\n  update_settings_080017c4(0x40010800,&flagValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_settings_080055f4",
                "local_18": "flagValue",
                "local_14": "counter",
                "local_c": "settingValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "loop_forever_08005674",
            "code": "\nvoid loopForever_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "loop_forever_08005674"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "update_settings_08005680",
            "code": "\nvoid updateSettings_08005680(int *inputArray)\n\n{\n  undefined4 value;\n  undefined4 count;\n  undefined4 index;\n  \n  if (*inputArray == 0x40012c00) {\n    value = 0x900;\n    count = 2;\n    index = 2;\n    update_settings_080017c4(0x40010800,&value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "update_settings_08005680",
                "param_1": "inputArray",
                "local_18": "value",
                "local_14": "count",
                "local_c": "index"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_and_transform_data_08005704",
            "code": "\nvoid initialize_and_transform_data_08005704(void)\n\n{\n  update_value_0800157c();\n  apply_data_transformation();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_and_transform_data_08005704",
                "update_value_0800157c": "update_initial_value",
                "perform_transformation_080017b4": "apply_data_transformation"
            },
            "calling": [],
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_processor_08005714",
            "code": "\nvoid initializeDataProcessor_08005714(void)\n\n{\n  processData(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_processor_08005714",
                "process_data_080036f8": "processData"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *constant_ptr;\n  undefined *result;\n  undefined temporary_buffer [4];\n  int remaining_size;\n  undefined *current_ptr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_ptr = DAT_20000a10;\n  if (temporary_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    constant_ptr = (undefined4 *)get_constant_value_08005d14();\n    *constant_ptr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "constant_ptr",
                "puVar2": "result",
                "auStack_18": "temporary_buffer",
                "local_14": "remaining_size",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_system_settings_08005780",
            "code": "\n\n\nvoid initializeSystemSettings_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_system_settings_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_settings_08005780();\n  execute_functions_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_program_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 upperResult;\n  uint condition;\n  uint modifiedInput4;\n  uint modifiedInput2;\n  undefined8 result;\n  \n  modifiedInput4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (modifiedInput4 | (-input3 | input3) >> 0x1f)) ||\n     (modifiedInput2 = input2 & 0x7fffffff, 0x7ff00000 < (modifiedInput2 | (-input1 | input1) >> 0x1f))) {\n    modifiedInput4 = calculate_0800015c(input3,input4,input1,input2);\n    return modifiedInput4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    modifiedInput4 = calculate_result_thunk_08005838_080059f0();\n    return modifiedInput4;\n  }\n  condition = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((modifiedInput2 | input1) == 0) {\n    if (condition == 2) {\n      return 0x54442d18;\n    }\n    if (condition != 3) {\n      return input1;\n    }\n  }\n  else if ((modifiedInput4 | input3) != 0) {\n    if (modifiedInput4 == 0x7ff00000) {\n      if (modifiedInput2 == 0x7ff00000) {\n        if (condition == 2) {\n          return 0x7f3321d2;\n        }\n        if (condition == 3) {\n          return 0x7f3321d2;\n        }\n        if (condition == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (condition == 2) {\n        return 0x54442d18;\n      }\n      if (condition != 3) {\n        if (condition != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modifiedInput2 != 0x7ff00000) {\n      difference = (int)(modifiedInput2 - modifiedInput4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_updated_value_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = calculate_result_thunk_08005838_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      upperResult = (undefined4)((ulonglong)result >> 0x20);\n      modifiedInput4 = (uint)result;\n      if (condition == 1) {\n        return modifiedInput4;\n      }\n      if (condition == 2) {\n        result = calculate_product_08000158(modifiedInput4,upperResult,0x33145c07,0x3ca1a626);\n        modifiedInput4 = calculate_product_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return modifiedInput4;\n      }\n      if (condition != 0) {\n        result = calculate_product_08000158(modifiedInput4,upperResult,0x33145c07,0x3ca1a626);\n        modifiedInput4 = calculate_product_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return modifiedInput4;\n      }\n      return modifiedInput4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "upperResult",
                "uVar3": "condition",
                "uVar4": "modifiedInput4",
                "uVar5": "modifiedInput2",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculate_result_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var_1;\n  undefined4 temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 temp_var_6;\n  \n  temp_var_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp_var_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (temp_var_5 = input_2 & 0x7fffffff, 0x7ff00000 < (temp_var_5 | (-input_1 | input_1) >> 0x1f))) {\n    temp_var_4 = calculate_0800015c(input_3,input_4,input_1,input_2);\n    return temp_var_4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    temp_var_4 = calculate_result_08005838_080059f0();\n    return temp_var_4;\n  }\n  temp_var_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((temp_var_5 | input_1) == 0) {\n    if (temp_var_3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp_var_3 != 3) {\n      return input_1;\n    }\n  }\n  else if ((temp_var_4 | input_3) != 0) {\n    if (temp_var_4 == 0x7ff00000) {\n      if (temp_var_5 == 0x7ff00000) {\n        if (temp_var_3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp_var_3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp_var_3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp_var_3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp_var_3 != 3) {\n        if (temp_var_3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp_var_5 != 0x7ff00000) {\n      temp_var_1 = (int)(temp_var_5 - temp_var_4) >> 0x14;\n      if (temp_var_1 < 0x3d) {\n        if (((int)input_4 < 0) && (temp_var_1 + 0x3c < 0 != SCARRY4(temp_var_1,0x3c))) {\n          temp_var_6 = 0;\n        }\n        else {\n          calculate_updated_value_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          temp_var_6 = calculate_result_08005838_080059f0();\n        }\n      }\n      else {\n        temp_var_6 = 0x3ff921fb54442d18;\n      }\n      temp_var_2 = (undefined4)((ulonglong)temp_var_6 >> 0x20);\n      temp_var_4 = (uint)temp_var_6;\n      if (temp_var_3 == 1) {\n        return temp_var_4;\n      }\n      if (temp_var_3 == 2) {\n        temp_var_6 = calculate_product_08000158(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n        temp_var_4 = calculate_product_08000158(0x54442d18,0x400921fb,(int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20));\n        return temp_var_4;\n      }\n      if (temp_var_3 != 0) {\n        temp_var_6 = calculate_product_08000158(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n        temp_var_4 = calculate_product_08000158((int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20),0x54442d18,0x400921fb);\n        return temp_var_4;\n      }\n      return temp_var_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint positiveInput2;\n  int calculationIndex;\n  undefined8 calculationResult;\n  undefined8 intermediateResult;\n  \n  intermediateResult = CONCAT44(input2,input1);\n  positiveInput2 = input2 & 0x7fffffff;\n  if (positiveInput2 < 0x44100000) {\n    if (positiveInput2 < 0x3fdc0000) {\n      if (positiveInput2 < 0x3e200000) {\n        calculationResult = calculate_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        calculationIndex = is_string_empty_080009e8((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0,0x3ff00000);\n        if (calculationIndex != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      calculationIndex = -1;\n    }\n    else {\n      intermediateResult = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)intermediateResult >> 0x20);\n      result1 = (undefined4)intermediateResult;\n      if (positiveInput2 < 0x3ff30000) {\n        if (positiveInput2 < 0x3fe60000) {\n          intermediateResult = calculate_0800015c(result1,result4,result1,result4);\n          intermediateResult = calculate_product_08000158((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),0,0x3ff00000);\n          calculationResult = calculate_0800015c(result1,result4,0,0x40000000);\n          intermediateResult = calculate_updated_value_0800071c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),(int)calculationResult,\n                                (int)((ulonglong)calculationResult >> 0x20));\n          calculationIndex = 0;\n        }\n        else {\n          intermediateResult = calculate_product_08000158(result1,result4,0,0x3ff00000);\n          calculationResult = calculate_0800015c(result1,result4,0,0x3ff00000);\n          intermediateResult = calculate_updated_value_0800071c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),(int)calculationResult,\n                                (int)((ulonglong)calculationResult >> 0x20));\n          calculationIndex = 1;\n        }\n      }\n      else if (positiveInput2 < 0x40038000) {\n        intermediateResult = calculate_product_08000158(result1,result4,0,0x3ff80000);\n        calculationResult = calculate_result_080059f0_080004c8(result1,result4,0,0x3ff80000);\n        calculationResult = calculate_0800015c((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0,0x3ff00000);\n        intermediateResult = calculate_updated_value_0800071c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),(int)calculationResult,\n                              (int)((ulonglong)calculationResult >> 0x20));\n        calculationIndex = 2;\n      }\n      else {\n        intermediateResult = calculate_updated_value_0800071c(0,0xbff00000,result1,result4);\n        calculationIndex = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)intermediateResult >> 0x20);\n    result5 = (undefined4)intermediateResult;\n    intermediateResult = calculate_result_080059f0_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)intermediateResult >> 0x20);\n    result1 = (undefined4)intermediateResult;\n    intermediateResult = calculate_result_080059f0_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)intermediateResult >> 0x20);\n    result4 = (undefined4)intermediateResult;\n    intermediateResult = calculate_result_080059f0_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    intermediateResult = calculate_0800015c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),0x24760deb,0x3fa97b4b);\n    intermediateResult = calculate_result_080059f0_080004c8((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result4,result3);\n    intermediateResult = calculate_0800015c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    intermediateResult = calculate_result_080059f0_080004c8((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result4,result3);\n    intermediateResult = calculate_0800015c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),0xc54c206e,0x3fb745cd);\n    intermediateResult = calculate_result_080059f0_080004c8((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result4,result3);\n    intermediateResult = calculate_0800015c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),0x920083ff,0x3fc24924);\n    intermediateResult = calculate_result_080059f0_080004c8((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result4,result3);\n    intermediateResult = calculate_0800015c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),0x5555550d,0x3fd55555);\n    intermediateResult = calculate_result_080059f0_080004c8((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result1,result2);\n    calculationResult = calculate_result_080059f0_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    calculationResult = calculate_product_08000158((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x52defd9a,0x3fadde2d);\n    calculationResult = calculate_result_080059f0_080004c8((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_product_08000158((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    calculationResult = calculate_result_080059f0_080004c8((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_product_08000158((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0xfe231671,0x3fbc71c6);\n    calculationResult = calculate_result_080059f0_080004c8((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_product_08000158((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x9998ebc4,0x3fc99999);\n    calculationResult = calculate_result_080059f0_080004c8((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    intermediateResult = calculate_0800015c((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),(int)calculationResult,\n                          (int)((ulonglong)calculationResult >> 0x20));\n    intermediateResult = calculate_result_080059f0_080004c8((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)intermediateResult >> 0x20);\n    if (calculationIndex == -1) {\n      intermediateResult = calculate_product_08000158(result5,result6,(int)intermediateResult,result1);\n      return intermediateResult;\n    }\n    calculationIndex = calculationIndex * 8;\n    intermediateResult = calculate_product_08000158((int)intermediateResult,result1,*(undefined4 *)(&UNK_08009ee8 + calculationIndex),\n                          *(undefined4 *)(&UNK_08009eec + calculationIndex));\n    intermediateResult = calculate_product_08000158((int)intermediateResult,(int)((ulonglong)intermediateResult >> 0x20),result5,result6);\n    intermediateResult = calculate_product_08000158(*(undefined4 *)(&UNK_08009ec8 + calculationIndex),\n                          *(undefined4 *)(&UNK_08009ecc + calculationIndex),(int)intermediateResult,\n                          (int)((ulonglong)intermediateResult >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)intermediateResult >> 0x20) + -0x80000000,(int)intermediateResult);\n    }\n  }\n  else {\n    if ((positiveInput2 < 0x7ff00001) && ((positiveInput2 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    intermediateResult = calculate_0800015c(input1,input2,input1,input2,input4);\n  }\n  return intermediateResult;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "positiveInput2",
                "iVar8": "calculationIndex",
                "uVar9": "calculationResult",
                "uVar10": "intermediateResult"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_constant_value_08005d14",
            "code": "\nundefined4 get_constant_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_constant_value_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionPointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "memset_with_value_08005d68",
            "code": "\nvoid memset_with_value_08005d68(undefined4 *dest,undefined value,uint count)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_count;\n  undefined4 value_repeated;\n  bool is_count_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_count = count - 1;\n    dest_ptr = dest;\n    if (count == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      count = remaining_count;\n      if (((uint)dest & 3) == 0) break;\n      is_count_zero = remaining_count == 0;\n      remaining_count = remaining_count - 1;\n      dest_ptr = dest;\n      if (is_count_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    value_repeated = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_count = count;\n    dest_ptr = dest;\n    if (0xf < count) {\n      remaining_count = count - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value_repeated;\n        dest_ptr[-3] = value_repeated;\n        dest_ptr[-2] = value_repeated;\n        dest_ptr[-1] = value_repeated;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_count & 0xfffffff0) + 0x20));\n      count = count & 0xf;\n      dest = dest + ((remaining_count >> 4) + 1) * 4;\n      remaining_count = count;\n      dest_ptr = dest;\n      if (count < 4) goto LAB_08005de4;\n    }\n    do {\n      count = count - 4;\n      *dest = value_repeated;\n      dest = dest + 1;\n    } while (3 < count);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_count - 4 & 0xfffffffc) + 4);\n    count = remaining_count & 3;\n  }\nLAB_08005de4:\n  if (count != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(count + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "memset_with_value_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_count",
                "uVar4": "value_repeated",
                "bVar5": "is_count_zero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_data_08005dfc",
            "code": "\nvoid initializeData_08005dfc(undefined *dataPointer,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined *pointers [2];\n  undefined4 maxLength;\n  undefined4 constant;\n  undefined *currentPointer;\n  undefined4 maxSize;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  maxSize = 0x7fffffff;\n  maxLength = 0x7fffffff;\n  constant = 0xffff0208;\n  pointers[0] = dataPointer;\n  currentPointer = dataPointer;\n  param3Copy = param3;\n  param4Copy = param4;\n  FUNC_08005e9c(DAT_2000001c,pointers,size,&param3Copy);\n  *pointers[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_data_08005dfc",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "pointers",
                "local_78": "maxLength",
                "uStack_74": "constant",
                "local_70": "currentPointer",
                "local_6c": "maxSize",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_lzcount_08005e40",
            "code": "\nint calculateLZCOUNT_08005e40(uint inputNumber)\n\n{\n  int modulo;\n  uint *ptr;\n  uint currentValue;\n  \n  ptr = (uint *)(inputNumber & 0xfffffffc);\n  modulo = -(inputNumber & 3);\n  currentValue = *ptr;\n  if ((inputNumber & 3) != 0) {\n    currentValue = currentValue | 0xffffffffU >> ((modulo + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    currentValue = currentValue + 0xfefefeff & ~currentValue & 0x80808080;\n    if (currentValue != 0) break;\n    currentValue = *ptr;\n    modulo = modulo + 4;\n  }\n  return modulo + (0x1fU - LZCOUNT(currentValue & -currentValue) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_lzcount_08005e40",
                "param_1": "inputNumber",
                "iVar1": "modulo",
                "puVar2": "ptr",
                "uVar3": "currentValue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)calculate_adjusted_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)calculate_lzcount_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = calculate_adjusted_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)calculate_lzcount_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = calculate_adjusted_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_conditions_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_parameters_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = is_null_termination_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_conditions_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_parameter_validity_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_parameter_validity_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_float_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_parameter_validity_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_float_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)convert_float_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_parameter_validity_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)calculate_lzcount_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_matching_byte_sequence_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_and_filter_string_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_parameter_validity_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = convert_unsigned_to_signed_0800119c();\n    uVar34 = reverse_and_shift_bits_080003f4();\n    uVar33 = calculate_product_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = is_string_empty_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = check_parameter_validity_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_reverse_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_reverse_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_parameter_validity_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_parameter_validity_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = copy_and_reverse_data_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = copy_and_reverse_data_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = copy_and_reverse_data_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_and_allocate_memory_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_and_allocate_memory_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_080078c0",
            "code": "\nuint calculate_division_080078c0(int array1,int array2)\n\n{\n  uint quotient;\n  uint *ptrArray1;\n  int carry;\n  int length;\n  int index;\n  uint result;\n  uint *ptrArray2;\n  uint *ptrArray1;\n  uint *lastElementPtr;\n  uint carryFwd;\n  uint *ptrArray2;\n  uint *nextElementPtr;\n  \n  length = *(int *)(array2 + 0x10);\n  if (*(int *)(array1 + 0x10) < length) {\n    return 0;\n  }\n  index = length + -1;\n  ptrArray2 = (uint *)(array2 + 0x14);\n  ptrArray1 = (uint *)(array1 + 0x14);\n  result = ptrArray1[index] / (ptrArray2[index] + 1);\n  lastElementPtr = ptrArray2 + index;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    ptrArray1 = ptrArray1;\n    ptrArray2 = ptrArray2;\n    do {\n      nextElementPtr = ptrArray2 + 1;\n      quotient = result * (*ptrArray2 & 0xffff) + quotient;\n      carryFwd = result * (*ptrArray2 >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptrArray1 & 0xffff);\n      carry = ((*ptrArray1 >> 0x10) - (carryFwd & 0xffff)) + ((int)quotient >> 0x10);\n      *ptrArray1 = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = carryFwd >> 0x10;\n      ptrArray1 = ptrArray1 + 1;\n      ptrArray2 = nextElementPtr;\n    } while (nextElementPtr <= lastElementPtr);\n    if (ptrArray1[index] == 0) {\n      if ((ptrArray1 < ptrArray1 + length + -2) && (ptrArray1[length + -2] == 0)) {\n        ptrArray1 = ptrArray1 + length + -3;\n        do {\n          index = index + -1;\n          if (ptrArray1 <= ptrArray1) break;\n          quotient = *ptrArray1;\n          ptrArray1 = ptrArray1 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(array1 + 0x10) = index;\n    }\n  }\n  length = compare_arrays_080094f8();\n  if (-1 < length) {\n    length = 0;\n    result = result + 1;\n    ptrArray1 = ptrArray1;\n    do {\n      ptrArray2 = ptrArray2 + 1;\n      quotient = (length - (*ptrArray2 & 0xffff)) + (*ptrArray1 & 0xffff);\n      length = ((*ptrArray1 >> 0x10) - (*ptrArray2 >> 0x10)) + ((int)quotient >> 0x10);\n      *ptrArray1 = quotient & 0xffff | length * 0x10000;\n      length = length >> 0x10;\n      ptrArray1 = ptrArray1 + 1;\n      ptrArray2 = ptrArray2;\n    } while (ptrArray2 <= lastElementPtr);\n    if (ptrArray1[index] == 0) {\n      if ((ptrArray1 < ptrArray1 + index + -1) && (ptrArray1[index + -1] == 0)) {\n        ptrArray2 = ptrArray1 + index + -2;\n        do {\n          index = index + -1;\n          if (ptrArray2 <= ptrArray1) break;\n          quotient = *ptrArray2;\n          ptrArray2 = ptrArray2 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(array1 + 0x10) = index;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "quotient",
                "puVar2": "ptrArray1",
                "iVar3": "carry",
                "iVar4": "length",
                "iVar5": "index",
                "uVar6": "result",
                "puVar7": "ptrArray2",
                "puVar8": "ptrArray1",
                "puVar9": "lastElementPtr",
                "uVar10": "carryFwd",
                "puVar11": "ptrArray2",
                "puVar12": "nextElementPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_float_to_string_080079e8",
            "code": "\nchar * convertFloatToString_080079e8(int inputValue,undefined4 param2,uint signBit,uint exponent,uint mantissaMSB,\n                   uint mantissaLSB,int *errorCode,uint *isNullTerminated,char **outputString)\n\n{\n  bool isSmallExponent;\n  bool isDividedByTenNeeded;\n  bool isProductTerm;\n  char digitChar;\n  byte bVar5;\n  undefined4 multiplier;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  char *outputStringPtr;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  int iVar15;\n  undefined4 uVar16;\n  uint uVar17;\n  uint uVar18;\n  int iVar19;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 uVar23;\n  int someOtheriVar;\n  bool isDividedByTenNeeded5;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  uint localOutput2;\n  uint localInput4;\n  uint localInput1;\n  int localLoopVar;\n  uint localExponent;\n  int localNeededLoop;\n  int localSubtraction;\n  uint localMultiplication;\n  uint localTempValue;\n  uint uStackValue;\n  uint exponentLimit;\n  uint productsLoop;\n  int local32;\n  int localArray2 [2];\n  \n  iVar14 = *(int *)(inputValue + 0x40);\n  if (iVar14 != 0) {\n    uVar18 = *(uint *)(inputValue + 0x44);\n    *(uint *)(iVar14 + 4) = uVar18;\n    *(int *)(iVar14 + 8) = 1 << (uVar18 & 0xff);\n    update_pointer_0800910c(inputValue,iVar14);\n    *(undefined4 *)(inputValue + 0x40) = 0;\n  }\n  isDividedByTenNeeded5 = (int)exponent < 0;\n  uVar18 = exponent;\n  if (isDividedByTenNeeded5) {\n    uVar18 = exponent & 0x7fffffff;\n  }\n  *isNullTerminated = (uint)isDividedByTenNeeded5;\n  localInput4 = exponent;\n  if (isDividedByTenNeeded5) {\n    localInput4 = uVar18;\n  }\n  uVar17 = localInput4;\n  if ((~uVar18 & 0x7ff00000) == 0) {\n    *errorCode = 9999;\n    if ((signBit == 0) && ((uVar18 & 0xfffff) == 0)) {\n      outputStringPtr = \"Infinity\";\n      if (outputString == (char **)0x0) {\n        return outputStringPtr;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      outputStringPtr = \"NaN\";\n      if (outputString == (char **)0x0) {\n        return outputStringPtr;\n      }\n      pcVar21 = \"\";\n    }\n    *outputString = pcVar21;\n    return outputStringPtr;\n  }\n  uVar26 = check_parameter_validity_08000998(signBit,localInput4,0,0);\n  if ((int)uVar26 != 0) {\n    *errorCode = 1;\n    if (outputString != (char **)0x0) {\n      *outputString = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  multiplier = process_data_08009630(inputValue,(int)((ulonglong)uVar26 >> 0x20),signBit,localInput4,localArray2,&local32)\n  ;\n  iVar14 = local32;\n  if (uVar18 >> 0x14 == 0) {\n    iVar19 = localArray2[0] + local32;\n    iVar15 = iVar19 + 0x432;\n    if (iVar15 < 0x21) {\n      uVar18 = signBit << (0x20U - iVar15 & 0xff);\n    }\n    else {\n      uVar18 = signBit >> (iVar19 + 0x412U & 0xff) | uVar18 << (0x40U - iVar15 & 0xff);\n    }\n    uVar26 = reverse_bits_080003d4(uVar18);\n    iVar19 = iVar19 + -1;\n    isDividedByTenNeeded5 = true;\n    uVar11 = (int)((ulonglong)uVar26 >> 0x20) + 0xfe100000;\n    uVar18 = (uint)uVar26;\n  }\n  else {\n    iVar19 = (uVar18 >> 0x14) - 0x3ff;\n    uVar11 = localInput4 & 0xfffff | 0x3ff00000;\n    isDividedByTenNeeded5 = false;\n    uVar18 = signBit;\n  }\n  uVar26 = calculate_product_08000158(uVar18,uVar11,0,0x3ff80000);\n  uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x636f4361,0x3fd287a7);\n  uVar26 = calculate_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  uVar27 = reverse_and_shift_bits_080003f4(iVar19);\n  uVar27 = calculate_result_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0x509f79fb,0x3fd34413);\n  uVar26 = calculate_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,\n                        (int)((ulonglong)uVar27 >> 0x20));\n  uVar13 = (undefined4)((ulonglong)uVar26 >> 0x20);\n  localInput1 = convert_unsigned_to_signed_0800119c();\n  iVar15 = is_null_termination_080009ac((int)uVar26,uVar13,0,0);\n  if (iVar15 != 0) {\n    uVar27 = reverse_and_shift_bits_080003f4(localInput1);\n    iVar15 = check_parameter_validity_08000998((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar13);\n    if (iVar15 == 0) {\n      localInput1 = localInput1 - 1;\n    }\n  }\n  if (localInput1 < 0x17) {\n    iVar15 = is_string_empty_080009e8(*(undefined4 *)(&DAT_08009fa8 + localInput1 * 8),\n                          *(undefined4 *)(&DAT_08009fac + localInput1 * 8),signBit,localInput4);\n    if (iVar15 == 0) {\n      isDividedByTenNeeded = false;\n    }\n    else {\n      localInput1 = localInput1 - 1;\n      isDividedByTenNeeded = false;\n    }\n  }\n  else {\n    isDividedByTenNeeded = true;\n  }\n  iVar15 = (iVar14 - iVar19) + -1;\n  if (iVar15 < 0) {\n    localLoopVar = 1 - (iVar14 - iVar19);\n    iVar15 = 0;\n  }\n  else {\n    localLoopVar = 0;\n  }\n  if ((int)localInput1 < 0) {\n    localMultiplication = 0;\n    localLoopVar = localLoopVar - localInput1;\n    localSubtraction = -localInput1;\n  }\n  else {\n    iVar15 = iVar15 + localInput1;\n    localMultiplication = localInput1;\n    localSubtraction = 0;\n  }\n  if (9 < mantissaMSB) {\n    exponentLimit = 0xffffffff;\n    isSmallExponent = true;\n    localExponent = 0xffffffff;\n    isProductTerm = true;\n    mantissaMSB = 0;\n    mantissaLSB = 0;\n    goto LAB_08007c24;\n  }\n  isSmallExponent = (int)mantissaMSB < 6;\n  if (!isSmallExponent) {\n    mantissaMSB = mantissaMSB - 4;\n  }\n  switch(mantissaMSB) {\n  case 2:\n    isProductTerm = false;\n    break;\n  case 3:\n    isProductTerm = false;\n    goto LAB_08008300;\n  case 4:\n    isProductTerm = true;\n    break;\n  case 5:\n    isProductTerm = true;\nLAB_08008300:\n    exponentLimit = localInput1 + mantissaLSB;\n    localExponent = exponentLimit + 1;\n    uVar18 = localExponent;\n    if ((int)localExponent < 1) {\n      uVar18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(inputValue + 0x44) = 0;\n    outputStringPtr = (char *)initialize_or_retrieve_data_080090c0(inputValue,0);\n    exponentLimit = 0xffffffff;\n    localExponent = 0xffffffff;\n    mantissaLSB = 0;\n    *(char **)(inputValue + 0x40) = outputStringPtr;\n    isProductTerm = true;\n    goto LAB_08007e36;\n  }\n  if ((int)mantissaLSB < 1) {\n    exponentLimit = 1;\n    mantissaLSB = 1;\n    localExponent = 1;\nLAB_08007c24:\n    *(undefined4 *)(inputValue + 0x44) = 0;\n    uVar11 = exponentLimit;\n  }\n  else {\n    exponentLimit = mantissaLSB;\n    localExponent = mantissaLSB;\n    uVar18 = mantissaLSB;\nLAB_08008314:\n    *(undefined4 *)(inputValue + 0x44) = 0;\n    uVar11 = localExponent;\n    if (0x17 < (int)uVar18) {\n      iVar19 = 4;\n      iVar14 = 1;\n      do {\n        iVar7 = iVar14;\n        iVar19 = iVar19 * 2;\n        iVar14 = iVar7 + 1;\n      } while (iVar19 + 0x14U <= uVar18);\n      *(int *)(inputValue + 0x44) = iVar7;\n    }\n  }\n  outputStringPtr = (char *)initialize_or_retrieve_data_080090c0(inputValue);\n  *(char **)(inputValue + 0x40) = outputStringPtr;\n  if ((uVar11 < 0xf) && (isSmallExponent)) {\n    if ((int)localInput1 < 1) {\n      if (localInput1 == 0) {\n        iVar14 = 2;\n        localOutput2 = signBit;\n      }\n      else {\n        iVar14 = (-localInput1 & 0xf) * 8;\n        uVar26 = calculate_result_080004c8(signBit,localInput4,*(undefined4 *)(&DAT_08009fa8 + iVar14),\n                              *(undefined4 *)(&DAT_08009fac + iVar14));\n        localInput4 = (uint)((ulonglong)uVar26 >> 0x20);\n        localOutput2 = (uint)uVar26;\n        iVar19 = (int)-localInput1 >> 4;\n        if (iVar19 == 0) {\n          iVar14 = 2;\n        }\n        else {\n          isSmallExponent = false;\n          iVar14 = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (iVar19 << 0x1f < 0) {\n              uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              isSmallExponent = true;\n              iVar14 = iVar14 + 1;\n            }\n            iVar19 = iVar19 >> 1;\n            puVar22 = puVar22 + 2;\n          } while (iVar19 != 0);\n          if (isSmallExponent) {\n            localOutput2 = (uint)uVar26;\n            localInput4 = (uint)((ulonglong)uVar26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar18 = (int)localInput1 >> 4;\n      uVar27 = *(undefined8 *)(&DAT_08009fa8 + (localInput1 & 0xf) * 8);\n      uVar26 = *(undefined8 *)(&DAT_08009fa8 + (localInput1 & 0xf) * 8);\n      if ((int)(uVar18 << 0x1b) < 0) {\n        uVar28 = calculate_updated_value_0800071c(signBit,localInput4,0x7f73bf3c,0x75154fdd);\n        uStackValue = (uint)((ulonglong)uVar28 >> 0x20);\n        localTempValue = (uint)uVar28;\n        iVar14 = 3;\n        uVar18 = uVar18 & 0xf;\n      }\n      else {\n        iVar14 = 2;\n        uStackValue = localInput4;\n        localTempValue = signBit;\n      }\n      if (uVar18 != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(uVar18 << 0x1f) < 0) {\n            uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]);\n            iVar14 = iVar14 + 1;\n          }\n          uVar18 = (int)uVar18 >> 1;\n          puVar22 = puVar22 + 2;\n          uVar27 = uVar26;\n        } while (uVar18 != 0);\n      }\n      localInput4 = (uint)((ulonglong)uVar27 >> 0x20);\n      localOutput2 = (uint)uVar27;\n      uVar26 = calculate_updated_value_0800071c(localTempValue,uStackValue,localOutput2,localInput4);\n      localOutput2 = (uint)uVar26;\n      localInput4 = (uint)((ulonglong)uVar26 >> 0x20);\n    }\n    uVar26 = CONCAT44(localInput4,localOutput2);\n    if ((isDividedByTenNeeded) && (iVar19 = is_null_termination_080009ac(localOutput2,localInput4,0,0x3ff00000), iVar19 != 0)) {\n      if (localExponent == 0) {\n        uVar26 = reverse_and_shift_bits_080003f4(iVar14);\n        uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),localOutput2,localInput4);\n        uVar26 = calculate_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar26;\n        iVar14 = (int)((ulonglong)uVar26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)exponentLimit) {\n        uVar26 = calculate_result_080004c8(localOutput2,localInput4,0,0x40240000);\n        uVar27 = reverse_and_shift_bits_080003f4(iVar14 + 1);\n        uVar27 = calculate_result_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                              (int)((ulonglong)uVar26 >> 0x20));\n        uVar27 = calculate_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar27;\n        localTempValue = exponentLimit;\n        productsLoop = localInput1 - 1;\n        iVar14 = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar27 = reverse_and_shift_bits_080003f4(iVar14);\n    uVar27 = calculate_result_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),localOutput2,localInput4);\n    uVar27 = calculate_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n    uVar13 = (undefined4)uVar27;\n    iVar14 = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n    if (localExponent != 0) {\n      productsLoop = localInput1;\n      localTempValue = localExponent;\nLAB_08007cfa:\n      localInput4 = (uint)((ulonglong)uVar26 >> 0x20);\n      localOutput2 = (uint)uVar26;\n      digitChar = convert_unsigned_to_signed_0800119c(localOutput2,localInput4);\n      digitChar = digitChar + '0';\n      uVar16 = (&DAT_08009fa0)[localTempValue * 2];\n      uVar12 = (&DAT_08009fa4)[localTempValue * 2];\n      uVar26 = reverse_and_shift_bits_080003f4();\n      uVar26 = calculate_product_08000158(localOutput2,localInput4,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n      uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      pcVar21 = outputStringPtr + 1;\n      if (isProductTerm) {\n        uVar27 = calculate_updated_value_0800071c(0,0x3fe00000,uVar16,uVar12);\n        uVar27 = calculate_product_08000158((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,iVar14);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *outputStringPtr = digitChar;\n        iVar14 = is_string_empty_080009e8((int)uVar27,uVar13,(int)uVar26,uVar23);\n        if (iVar14 != 0) {\nLAB_08008784:\n          localInput1 = productsLoop;\n          goto LAB_08008294;\n        }\n        uVar28 = calculate_product_08000158(0,0x3ff00000,(int)uVar26,uVar23);\n        iVar14 = is_string_empty_080009e8((int)uVar27,uVar13,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n        if (iVar14 == 0) {\n          if (localTempValue != 1) {\n            pcVar20 = pcVar21;\n            do {\n              uVar27 = calculate_result_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x40240000);\n              uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n              uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n              digitChar = convert_unsigned_to_signed_0800119c();\n              uVar28 = reverse_and_shift_bits_080003f4();\n              uVar26 = calculate_product_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                    (int)((ulonglong)uVar28 >> 0x20));\n              uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              digitChar = digitChar + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digitChar;\n              iVar14 = is_null_termination_080009ac((int)uVar26,uVar16,(int)uVar27,uVar13);\n              if (iVar14 != 0) {\n                localInput1 = productsLoop;\n                goto LAB_08008294;\n              }\n              uVar28 = calculate_product_08000158(0,0x3ff00000,(int)uVar26,uVar16);\n              iVar14 = is_null_termination_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar27,uVar13)\n              ;\n              if (iVar14 != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != outputStringPtr + localTempValue);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        localInput1 = productsLoop;\n      }\n      else {\n        uVar27 = calculate_result_080004c8(uVar13,iVar14,uVar16,uVar12);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *outputStringPtr = digitChar;\n        if (localTempValue != 1) {\n          pcVar20 = pcVar21;\n          do {\n            uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            digitChar = convert_unsigned_to_signed_0800119c();\n            uVar28 = reverse_and_shift_bits_080003f4();\n            uVar26 = calculate_product_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                  (int)((ulonglong)uVar28 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digitChar + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != outputStringPtr + localTempValue);\n        }\n        uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        uVar28 = calculate_0800015c((int)uVar27,uVar13,0,0x3fe00000);\n        iVar14 = is_null_termination_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar26,uVar16);\n        if (iVar14 == 0) {\n          uVar27 = calculate_product_08000158(0,0x3fe00000,(int)uVar27,uVar13);\n          iVar14 = is_string_empty_080009e8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar16);\n          pcVar20 = pcVar21;\n          if (iVar14 == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        localInput1 = productsLoop;\n        digitChar = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar26 = calculate_product_08000158(localOutput2,localInput4,0,0x40140000);\n    uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar19 = is_string_empty_080009e8((int)uVar26,uVar16,uVar13,iVar14);\n    if (iVar19 == 0) {\n      iVar14 = is_null_termination_080009ac((int)uVar26,uVar16,uVar13,iVar14 + -0x80000000);\n      if (iVar14 == 0) goto LAB_08007e36;\n      iVar19 = 0;\n      iVar14 = 0;\n      pcVar21 = outputStringPtr;\n      goto LAB_080084f0;\n    }\n    iVar15 = 0;\n    iVar7 = 0;\nLAB_08008406:\n    *outputStringPtr = '1';\n    localInput1 = localInput1 + 1;\n    pcVar21 = outputStringPtr + 1;\n    iVar19 = iVar7;\n    iVar14 = iVar15;\nLAB_08008416:\n    update_pointer_0800910c(inputValue,iVar14);\n    if (iVar19 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = outputStringPtr;\n    if ((-1 < localArray2[0]) && ((int)localInput1 < 0xf)) {\n      uVar13 = *(undefined4 *)(&DAT_08009fa8 + localInput1 * 8);\n      uVar16 = *(undefined4 *)(&DAT_08009fac + localInput1 * 8);\n      if ((-1 < (int)mantissaLSB) || (0 < (int)localExponent)) {\n        calculate_updated_value_0800071c(signBit,uVar17,uVar13,uVar16);\n        bVar5 = convert_unsigned_to_signed_0800119c();\n        uVar26 = reverse_and_shift_bits_080003f4();\n        uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar13,uVar16);\n        uVar26 = calculate_product_08000158(signBit,uVar17,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        *outputStringPtr = bVar5 + 0x30;\n        pcVar21 = outputStringPtr + 1;\n        if (localExponent != 1) {\n          uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n          iVar14 = check_parameter_validity_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          while (iVar14 == 0) {\n            uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            calculate_updated_value_0800071c((int)uVar26,uVar23,uVar13,uVar16);\n            bVar5 = convert_unsigned_to_signed_0800119c();\n            uVar27 = reverse_and_shift_bits_080003f4();\n            uVar27 = calculate_result_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,uVar16);\n            uVar26 = calculate_product_08000158((int)uVar26,uVar23,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = bVar5 + 0x30;\n            pcVar21 = pcVar20;\n            if (localExponent == (int)pcVar20 - (int)outputStringPtr) goto LAB_08007f3a;\n            uVar26 = calculate_result_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            iVar14 = check_parameter_validity_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar26 = calculate_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        iVar14 = is_string_empty_080009e8((int)uVar26,uVar23,uVar13,uVar16);\n        if ((iVar14 == 0) &&\n           ((iVar14 = check_parameter_validity_08000998((int)uVar26,uVar23,uVar13,uVar16), iVar14 == 0 ||\n            ((bVar5 & 1) == 0)))) goto LAB_08008294;\n        digitChar = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digitChar == '9') {\n          if (outputStringPtr == pcVar20) {\n            *outputStringPtr = '0';\n            digitChar = pcVar21[-1];\n            localInput1 = localInput1 + 1;\n            pcVar20 = outputStringPtr;\n            break;\n          }\n          digitChar = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digitChar + '\\x01';\n        goto LAB_08008294;\n      }\n      if (localExponent == 0) {\n        uVar26 = calculate_result_080004c8(uVar13,uVar16,0,0x40140000);\n        iVar9 = validate_and_return_parameters_080009d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),signBit,uVar17);\n        iVar19 = 0;\n        iVar15 = 0;\n        iVar7 = 0;\n        iVar14 = 0;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        iVar19 = 0;\n        iVar14 = 0;\n      }\nLAB_080084f0:\n      localInput1 = ~mantissaLSB;\n      outputStringPtr = pcVar21;\n      goto LAB_08008416;\n    }\n    iVar14 = localSubtraction;\n    if (isProductTerm) {\n      if ((int)mantissaMSB < 2) {\n        if (isDividedByTenNeeded5) {\n          localNeededLoop = localLoopVar;\n          localLoopVar = localLoopVar + localArray2[0] + 0x433;\n          iVar15 = iVar15 + localArray2[0] + 0x433;\n        }\n        else {\n          localNeededLoop = localLoopVar;\n          localLoopVar = localLoopVar + (0x36 - local32);\n          iVar15 = iVar15 + (0x36 - local32);\n        }\n      }\n      else {\n        iVar19 = localExponent - 1;\n        if (localSubtraction < iVar19) {\n          localMultiplication = localMultiplication + (iVar19 - localSubtraction);\n          iVar14 = 0;\n          localSubtraction = iVar19;\n        }\n        else {\n          iVar14 = localSubtraction - iVar19;\n        }\n        if ((int)localExponent < 0) {\n          localNeededLoop = localLoopVar - localExponent;\n        }\n        else {\n          iVar15 = iVar15 + localExponent;\n          localNeededLoop = localLoopVar;\n          localLoopVar = localLoopVar + localExponent;\n        }\n      }\n      iVar19 = initialize_data_08009244(inputValue,1);\n    }\n    else {\n      localNeededLoop = localLoopVar;\n      iVar19 = 0;\n    }\n    if ((0 < localNeededLoop) && (0 < iVar15)) {\n      iVar7 = localNeededLoop;\n      if (iVar15 <= localNeededLoop) {\n        iVar7 = iVar15;\n      }\n      iVar15 = iVar15 - iVar7;\n      localLoopVar = localLoopVar - iVar7;\n      localNeededLoop = localNeededLoop - iVar7;\n    }\n    if (localSubtraction != 0) {\n      if (isProductTerm) {\n        uVar13 = multiplier;\n        if (iVar14 != 0) {\n          iVar19 = update_array_with_multiplier_080093a4(inputValue,iVar19,iVar14);\n          uVar13 = calculate_sum_08009258(inputValue,iVar19,multiplier);\n          update_pointer_0800910c(inputValue,multiplier);\n          multiplier = uVar13;\n          if (localSubtraction - iVar14 == 0) goto LAB_08008062;\n        }\n        multiplier = update_array_with_multiplier_080093a4(inputValue,uVar13,localSubtraction - iVar14);\n      }\n      else {\n        multiplier = update_array_with_multiplier_080093a4(inputValue,multiplier,localSubtraction);\n      }\n    }\nLAB_08008062:\n    iVar14 = initialize_data_08009244(inputValue,1);\n    if (localMultiplication == 0) {\n      if (((int)mantissaMSB < 2) && (signBit == 0)) {\nLAB_0800835a:\n        if ((uVar17 & 0xfffff) == 0) {\n          uVar17 = uVar17 & 0x7ff00000;\n          if (uVar17 != 0) {\n            iVar15 = iVar15 + 1;\n            localLoopVar = localLoopVar + 1;\n            uVar17 = 1;\n          }\n        }\n        else {\n          uVar17 = 0;\n        }\n        isDividedByTenNeeded5 = localMultiplication != 0;\n        uVar18 = signBit;\n        localMultiplication = uVar17;\n        if (isDividedByTenNeeded5) goto LAB_080082d4;\n      }\n      iVar7 = 1;\n    }\n    else {\n      uVar26 = update_array_with_multiplier_080093a4(inputValue,iVar14);\n      iVar14 = (int)uVar26;\n      if (((int)mantissaMSB < 2) && (signBit == 0)) goto LAB_0800835a;\n      localMultiplication = 0;\n      uVar18 = (uint)((ulonglong)uVar26 >> 0x20);\nLAB_080082d4:\n      iVar7 = count_leading_zeros_080091a4(*(undefined4 *)(iVar14 + *(int *)(iVar14 + 0x10) * 4 + 0x10),uVar18);\n      iVar7 = 0x20 - iVar7;\n    }\n    uVar18 = iVar7 + iVar15 & 0x1f;\n    if (uVar18 == 0) {\n      iVar7 = 0x1c;\nLAB_08008096:\n      iVar15 = iVar15 + iVar7;\n      localLoopVar = localLoopVar + iVar7;\n      localNeededLoop = localNeededLoop + iVar7;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar18)) {\n        iVar7 = 0x1c - uVar18;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar18 != 4) {\n        iVar7 = 0x3c - uVar18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < localLoopVar) {\n      multiplier = initialize_data_08009444(inputValue,multiplier,localLoopVar);\n    }\n    if (0 < iVar15) {\n      iVar14 = initialize_data_08009444(inputValue,iVar14,iVar15);\n    }\n    pcVar20 = outputStringPtr;\n    if ((isDividedByTenNeeded) && (iVar15 = compare_arrays_080094f8(multiplier,iVar14), iVar15 < 0)) {\n      localInput1 = localInput1 - 1;\n      multiplier = update_array_with_multiplier_08009120(inputValue,multiplier,10,0);\n      if (isProductTerm) {\n        iVar19 = update_array_with_multiplier_08009120(inputValue,iVar19,10,0);\n        if ((0 < (int)exponentLimit) || ((int)mantissaMSB < 3)) {\n          localExponent = exponentLimit;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)exponentLimit) || ((int)mantissaMSB < 3)) {\n        localExponent = exponentLimit;\n        goto LAB_0800820a;\n      }\n      localExponent = exponentLimit;\nLAB_080084e8:\n      if (localExponent == 0) {\n        iVar15 = update_array_with_multiplier_08009120(inputValue,iVar14,5);\n        iVar9 = compare_arrays_080094f8(multiplier,iVar15);\n        iVar7 = iVar19;\n        iVar14 = iVar15;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)localExponent < 1) && (2 < (int)mantissaMSB)) goto LAB_080084e8;\n    if (isProductTerm) {\nLAB_080080de:\n      localOutput2 = iVar19;\n      if (0 < localNeededLoop) {\n        localOutput2 = initialize_data_08009444(inputValue,iVar19,localNeededLoop);\n      }\n      iVar19 = localOutput2;\n      if (localMultiplication != 0) {\n        iVar19 = initialize_or_retrieve_data_080090c0(inputValue,*(undefined4 *)(localOutput2 + 4));\n        copy_memory_08001084(iVar19 + 0xc,localOutput2 + 0xc,(*(int *)(localOutput2 + 0x10) + 2) * 4);\n        iVar19 = initialize_data_08009444(inputValue,iVar19,1);\n      }\nLAB_08008108:\n      iVar15 = calculate_division_080078c0(multiplier,iVar14);\n      iVar7 = compare_arrays_080094f8(multiplier,localOutput2);\n      iVar9 = validate_and_initialize_data_08009530(inputValue,iVar14,iVar19);\n      someOtheriVar = iVar15 + 0x30;\n      if (*(int *)(iVar9 + 0xc) == 0) {\n        iVar8 = compare_arrays_080094f8(multiplier);\n        update_pointer_0800910c(inputValue,iVar9);\n        if ((iVar8 != 0) || (mantissaMSB != 0)) goto LAB_0800815a;\n        if ((signBit & 1) != 0) {\n          iVar8 = 0;\n          goto LAB_0800815a;\n        }\n        if (someOtheriVar != 0x39) {\n          if (0 < iVar7) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digitChar = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      update_pointer_0800910c(inputValue,iVar9);\n      iVar8 = 1;\nLAB_0800815a:\n      if ((iVar7 < 0) || (((iVar7 == 0 && (mantissaMSB == 0)) && ((signBit & 1) == 0)))) {\n        if (0 < iVar8) {\n          multiplier = initialize_data_08009444(inputValue,multiplier,1);\n          iVar7 = compare_arrays_080094f8(multiplier,iVar14);\n          if ((0 < iVar7) || ((iVar7 == 0 && (iVar15 << 0x1f < 0)))) {\n            if (someOtheriVar == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            someOtheriVar = iVar15 + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)someOtheriVar;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < iVar8) {\n        if (someOtheriVar == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)iVar15 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)someOtheriVar;\n      if (outputStringPtr + (localExponent - 1) != pcVar20) {\n        multiplier = update_array_with_multiplier_08009120(inputValue,multiplier,10,0);\n        pcVar20 = pcVar21;\n        if (localOutput2 == iVar19) {\n          localOutput2 = update_array_with_multiplier_08009120(inputValue,localOutput2,10,0);\n          iVar19 = localOutput2;\n        }\n        else {\n          localOutput2 = update_array_with_multiplier_08009120(inputValue,localOutput2,10,0);\n          iVar19 = update_array_with_multiplier_08009120(inputValue,iVar19,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        someOtheriVar = calculate_division_080078c0(multiplier,iVar14);\n        someOtheriVar = someOtheriVar + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)someOtheriVar;\n        if ((int)localExponent <= (int)pcVar21 - (int)outputStringPtr) break;\n        multiplier = update_array_with_multiplier_08009120(inputValue,multiplier,10,0);\n        pcVar20 = pcVar21;\n      }\n      localOutput2 = 0;\n    }\n    multiplier = initialize_data_08009444(inputValue,multiplier,1);\n    iVar15 = compare_arrays_080094f8(multiplier,iVar14);\n    digitChar = pcVar21[-1];\n    if ((0 < iVar15) || ((iVar15 == 0 && (someOtheriVar << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digitChar != '9') goto code_r0x08008270;\n        if (outputStringPtr == pcVar20) {\n          *outputStringPtr = '1';\n          localInput1 = localInput1 + 1;\n          goto LAB_08008274;\n        }\n        digitChar = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digitChar == '0') {\n      digitChar = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    update_pointer_0800910c(inputValue,iVar14);\n    if (iVar19 == 0) goto LAB_08008294;\n    if ((localOutput2 != 0) && (localOutput2 != iVar19)) {\n      update_pointer_0800910c(inputValue);\n    }\n  }\n  update_pointer_0800910c(inputValue,iVar19);\nLAB_08008294:\n  update_pointer_0800910c(inputValue,multiplier);\n  *pcVar21 = '\\0';\n  *errorCode = localInput1 + 1;\n  if (outputString == (char **)0x0) {\n    return outputStringPtr;\n  }\n  *outputString = pcVar21;\n  return outputStringPtr;\ncode_r0x08008270:\n  *pcVar20 = digitChar + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "signBit",
                "param_4": "exponent",
                "param_5": "mantissaMSB",
                "param_6": "mantissaLSB",
                "param_7": "errorCode",
                "param_8": "isNullTerminated",
                "param_9": "outputString",
                "bVar1": "isSmallExponent",
                "bVar2": "isDividedByTenNeeded",
                "bVar3": "isProductTerm",
                "cVar4": "digitChar",
                "uVar6": "multiplier",
                "iVar24": "someOtheriVar",
                "pcVar10": "outputStringPtr",
                "local_80": "localOutput2",
                "local_7c": "localInput4",
                "local_74": "localInput1",
                "local_70": "localLoopVar",
                "local_68": "localExponent",
                "local_60": "localNeededLoop",
                "local_5c": "localSubtraction",
                "local_58": "localMultiplication",
                "local_48": "localTempValue",
                "uStack_44": "uStackValue",
                "local_38": "exponentLimit",
                "local_34": "productsLoop",
                "local_30": "local32",
                "local_2c": "localArray2"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_memory_0800884c",
            "code": "\nundefined4 allocate_memory_0800884c(undefined4 input_data,int offset)\n\n{\n  int allocation_result;\n  int calculated_address;\n  uint masked_value;\n  \n  initialize_data_080090a8();\n  masked_value = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  calculated_address = ((0xfef - offset) + masked_value & 0xfffff000) - 0x1000;\n  if (0xfff < calculated_address) {\n    allocation_result = initialize_memory_allocation(input_data,0);\n    if (allocation_result == DAT_20000454 + masked_value) {\n      allocation_result = initialize_memory_allocation(input_data,-calculated_address);\n      if (allocation_result != -1) {\n        DAT_20000a14 = DAT_20000a14 - calculated_address;\n        *(uint *)(DAT_20000454 + 4) = masked_value - calculated_address | 1;\n        initialize_data_080090b4(input_data);\n        return 1;\n      }\n      calculated_address = initialize_memory_allocation(input_data,0);\n      if (0xf < calculated_address - DAT_20000454) {\n        DAT_20000a14 = calculated_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = calculated_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data_080090b4(input_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "input_data",
                "param_2": "offset",
                "iVar1": "allocation_result",
                "iVar2": "calculated_address",
                "uVar3": "masked_value",
                "initialize_data_080090a8": "initialize_data_1",
                "initialize_memory_allocation_08009744": "initialize_memory_allocation",
                "initialize_data_080090b4": "initialize_data_2"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "initialize_and_allocate_memory_080088ec",
            "code": "\nvoid initializeAndAllocateMemory_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *currentPtr;\n  uint *nextPtr;\n  undefined *tempPtr1;\n  uint size;\n  uint nextSize;\n  undefined *tempPtr2;\n  undefined *tempPtr3;\n  undefined4 *targetPtr;\n  int loopIndex;\n  uint flags;\n  uint offset;\n  \n  if (param2 == 0) {\n    return;\n  }\n  initialize_data_080090a8();\n  flags = *(uint *)(param2 + -4);\n  currentPtr = (uint *)(param2 + -8);\n  size = flags & 0xfffffffe;\n  nextPtr = (uint *)((int)currentPtr + size);\n  nextSize = nextPtr[1] & 0xfffffffc;\n  if (DAT_20000454 == nextPtr) {\n    size = size + nextSize;\n    if ((flags & 1) == 0) {\n      currentPtr = (uint *)((int)currentPtr - *(int *)(param2 + -8));\n      nextSize = currentPtr[2];\n      flags = currentPtr[3];\n      size = size + *(int *)(param2 + -8);\n      *(uint *)(nextSize + 0xc) = flags;\n      *(uint *)(flags + 8) = nextSize;\n    }\n    nextSize = DAT_20000858;\n    currentPtr[1] = size | 1;\n    DAT_20000454 = currentPtr;\n    if (nextSize <= size) {\n      allocate_memory_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_080090b4(param1);\n    return;\n  }\n  nextPtr[1] = nextSize;\n  if ((flags & 1) == 0) {\n    currentPtr = (uint *)((int)currentPtr - *(int *)(param2 + -8));\n    targetPtr = (undefined4 *)currentPtr[2];\n    size = size + *(int *)(param2 + -8);\n    flags = *(uint *)((int)nextPtr + nextSize + 4) & 1;\n    if ((uint **)targetPtr == &DAT_20000454) {\n      if (flags == 0) {\n        flags = nextPtr[2];\n        offset = nextPtr[3];\n        size = size + nextSize;\n        *(uint *)(flags + 0xc) = offset;\n        *(uint *)(offset + 8) = flags;\n        currentPtr[1] = size | 1;\n        *(uint *)((int)currentPtr + size) = size;\n      }\n      else {\n        currentPtr[1] = size | 1;\n        *nextPtr = size;\n      }\n      goto LAB_080089f0;\n    }\n    offset = currentPtr[3];\n    targetPtr[3] = offset;\n    *(undefined4 **)(offset + 8) = targetPtr;\n  }\n  else {\n    flags = *(uint *)((int)nextPtr + nextSize + 4) & 1;\n  }\n  if (flags == 0) {\n    targetPtr = (undefined4 *)nextPtr[2];\n    size = size + nextSize;\n    if ((uint **)targetPtr == &DAT_20000454) {\n      DAT_2000045c = currentPtr;\n      DAT_20000460 = currentPtr;\n      currentPtr[2] = (uint)&DAT_20000454;\n      currentPtr[3] = (uint)&DAT_20000454;\n      currentPtr[1] = size | 1;\n      *(uint *)((int)currentPtr + size) = size;\n      goto LAB_080089f0;\n    }\n    nextSize = nextPtr[3];\n    targetPtr[3] = nextSize;\n    *(undefined4 **)(nextSize + 8) = targetPtr;\n    currentPtr[1] = size | 1;\n    *(uint *)((int)currentPtr + size) = size;\n  }\n  else {\n    currentPtr[1] = size | 1;\n    *(uint *)((int)currentPtr + size) = size;\n  }\n  if (size < 0x200) {\n    loopIndex = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    nextSize = *(uint *)(&DAT_2000044c + loopIndex * 8);\n    currentPtr[2] = nextSize;\n    currentPtr[3] = (uint)(&DAT_20000444 + loopIndex * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + loopIndex * 8) = currentPtr;\n    *(uint **)(nextSize + 0xc) = currentPtr;\n    initialize_data_080090b4(param1,currentPtr,size,param4);\n    return;\n  }\n  nextSize = size >> 9;\n  if (nextSize < 5) {\n    loopIndex = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (nextSize < 0x15) {\n    loopIndex = (nextSize + 0x5c) * 8;\n    index = nextSize + 0x5b;\n  }\n  else if (nextSize < 0x55) {\n    loopIndex = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (nextSize < 0x155) {\n    loopIndex = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (nextSize < 0x555) {\n    loopIndex = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    loopIndex = 0x3f8;\n    index = 0x7e;\n  }\n  tempPtr1 = *(undefined **)(&DAT_2000044c + loopIndex);\n  tempPtr2 = &DAT_20000444 + loopIndex;\n  if (tempPtr2 == tempPtr1) {\n    tempPtr1 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    tempPtr3 = tempPtr2;\n    DAT_20000450 = tempPtr1;\n  }\n  else {\n    do {\n      tempPtr3 = tempPtr1;\n      if ((*(uint *)(tempPtr1 + 4) & 0xfffffffc) <= size) break;\n      tempPtr1 = *(undefined **)(tempPtr1 + 8);\n      tempPtr3 = tempPtr2;\n    } while (tempPtr2 != tempPtr1);\n    tempPtr2 = *(undefined **)(tempPtr3 + 0xc);\n  }\n  currentPtr[2] = (uint)tempPtr3;\n  currentPtr[3] = (uint)tempPtr2;\n  *(uint **)(tempPtr2 + 8) = currentPtr;\n  *(uint **)(tempPtr3 + 0xc) = currentPtr;\n  initialize_data_080090b4(param1,currentPtr,tempPtr1,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "initialize_and_allocate_memory_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "puVar2": "currentPtr",
                "puVar3": "nextPtr",
                "puVar4": "tempPtr1",
                "uVar5": "size",
                "uVar6": "nextSize",
                "puVar7": "tempPtr2",
                "puVar8": "tempPtr3",
                "puVar9": "targetPtr",
                "iVar10": "loopIndex",
                "uVar11": "flags",
                "uVar12": "offset"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "calculate_adjusted_value_08008ad4",
            "code": "\nint calculateAdjustedValue_08008ad4(void)\n\n{\n  int baseValue;\n  \n  baseValue = *(int *)(DAT_2000001c + 0x34);\n  if (baseValue == 0) {\n    baseValue = 0x2000085c;\n  }\n  return baseValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "calculate_adjusted_value_08008ad4",
                "iVar1": "baseValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *ptr_result,uint size)\n\n{\n  undefined *ptr_temp1;\n  uint num1;\n  uint num2;\n  int temp1;\n  undefined *ptr_temp2;\n  uint num3;\n  uint num4;\n  undefined4 *ptr_temp3;\n  undefined *ptr_temp4;\n  undefined *ptr_temp5;\n  int *ptr_allocated_memory;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  undefined4 *ptr_temp6;\n  undefined4 *ptr_temp7;\n  \n  temp2 = size + 0xb;\n  if (temp2 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_080090a8();\n    temp3 = 0x10;\n    temp1 = 0x18;\n    temp2 = 2;\nLAB_08008b18:\n    ptr_temp5 = *(undefined **)((int)&DAT_20000450 + temp1);\n    if ((ptr_temp5 != &DAT_20000444 + temp1) ||\n       (ptr_temp5 = *(undefined **)((int)&DAT_20000458 + temp1), &DAT_2000044c + temp1 != ptr_temp5)) {\n      temp1 = *(int *)(ptr_temp5 + 0xc);\n      ptr_temp2 = ptr_temp5 + (*(uint *)(ptr_temp5 + 4) & 0xfffffffc);\n      temp2 = *(uint *)(ptr_temp2 + 4);\nLAB_08008b34:\n      temp4 = *(int *)(ptr_temp5 + 8);\n      *(int *)(temp4 + 0xc) = temp1;\n      *(int *)(temp1 + 8) = temp4;\n      *(uint *)(ptr_temp2 + 4) = temp2 | 1;\n      initialize_data_080090b4(ptr_result);\n      return (int *)(ptr_temp5 + 8);\n    }\n    temp2 = temp2 + 2;\n  }\n  else {\n    temp3 = temp2 & 0xfffffff8;\n    if (((int)temp3 < 0) || (temp3 < size)) {\nLAB_08008c7a:\n      *ptr_result = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_080090a8();\n    if (temp3 < 0x1f8) {\n      temp2 = temp2 >> 3;\n      temp1 = temp3 + 8;\n      goto LAB_08008b18;\n    }\n    num1 = temp2 >> 9;\n    if (num1 == 0) {\n      temp1 = 0x200;\n      num3 = 0x40;\n      num1 = 0x3f;\n    }\n    else if (num1 < 5) {\n      num3 = (temp2 >> 6) + 0x39;\n      num1 = (temp2 >> 6) + 0x38;\n      temp1 = num3 * 8;\n    }\n    else if (num1 < 0x15) {\n      num3 = num1 + 0x5c;\n      num1 = num1 + 0x5b;\n      temp1 = num3 * 8;\n    }\n    else if (num1 < 0x55) {\n      num3 = (temp2 >> 0xc) + 0x6f;\n      num1 = (temp2 >> 0xc) + 0x6e;\n      temp1 = num3 * 8;\n    }\n    else if (num1 < 0x155) {\n      num3 = (temp2 >> 0xf) + 0x78;\n      num1 = (temp2 >> 0xf) + 0x77;\n      temp1 = num3 * 8;\n    }\n    else if (num1 < 0x555) {\n      num3 = (temp2 >> 0x12) + 0x7d;\n      num1 = (temp2 >> 0x12) + 0x7c;\n      temp1 = num3 * 8;\n    }\n    else {\n      temp1 = 0x3f8;\n      num3 = 0x7f;\n      num1 = 0x7e;\n    }\n    for (ptr_temp5 = *(undefined **)((int)&DAT_20000450 + temp1); temp2 = num3,\n        &DAT_20000444 + temp1 != ptr_temp5; ptr_temp5 = *(undefined **)(ptr_temp5 + 0xc)) {\n      temp4 = (*(uint *)(ptr_temp5 + 4) & 0xfffffffc) - temp3;\n      temp2 = num1;\n      if (0xf < temp4) break;\n      if (-1 < temp4) {\n        ptr_temp2 = ptr_temp5 + (*(uint *)(ptr_temp5 + 4) & 0xfffffffc);\n        temp2 = *(uint *)(ptr_temp2 + 4);\n        temp1 = *(int *)(ptr_temp5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr_temp6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    num3 = 1 << ((int)temp2 >> 2 & 0xffU);\n    num1 = DAT_20000450;\n    if (num3 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    num3 = DAT_2000045c[1];\n    num4 = num3 & 0xfffffffc;\n    num1 = num4 - temp3;\n    if (0xf < (int)num1) {\n      ptr_temp7 = (undefined4 *)(temp3 + (int)DAT_2000045c);\n      DAT_2000045c[1] = temp3 | 1;\n      DAT_2000045c = ptr_temp7;\n      DAT_20000460 = ptr_temp7;\n      ptr_temp7[2] = &DAT_20000454;\n      ptr_temp7[3] = &DAT_20000454;\n      ptr_temp7[1] = num1 | 1;\n      *(uint *)((int)ptr_temp6 + num4) = num1;\n      initialize_data_080090b4(ptr_result);\n      return ptr_temp6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)num1) {\n      *(uint *)((int)ptr_temp6 + num4 + 4) = *(uint *)((int)ptr_temp6 + num4 + 4) | 1;\n      initialize_data_080090b4(ptr_result);\n      return ptr_temp6 + 2;\n    }\n    if (num4 < 0x200) {\n      temp1 = (num3 >> 3) + 1;\n      temp4 = *(int *)(&DAT_2000044c + temp1 * 8);\n      num1 = 1 << ((int)(num3 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr_temp6[2] = temp4;\n      ptr_temp6[3] = &DAT_20000444 + temp1 * 8;\n      DAT_20000450 = num1;\n      *(undefined4 **)(&DAT_2000044c + temp1 * 8) = ptr_temp6;\n      *(undefined4 **)(temp4 + 0xc) = ptr_temp6;\n    }\n    else {\n      num1 = num3 >> 9;\n      if (num1 < 5) {\n        temp1 = ((num3 >> 6) + 0x39) * 8;\n        temp4 = (num3 >> 6) + 0x38;\n      }\n      else if (num1 < 0x15) {\n        temp1 = (num1 + 0x5c) * 8;\n        temp4 = num1 + 0x5b;\n      }\n      else if (num1 < 0x55) {\n        temp1 = ((num3 >> 0xc) + 0x6f) * 8;\n        temp4 = (num3 >> 0xc) + 0x6e;\n      }\n      else if (num1 < 0x155) {\n        temp1 = ((num3 >> 0xf) + 0x78) * 8;\n        temp4 = (num3 >> 0xf) + 0x77;\n      }\n      else if (num1 < 0x555) {\n        temp1 = ((num3 >> 0x12) + 0x7d) * 8;\n        temp4 = (num3 >> 0x12) + 0x7c;\n      }\n      else {\n        temp1 = 0x3f8;\n        temp4 = 0x7e;\n      }\n      ptr_temp5 = *(undefined **)(&DAT_2000044c + temp1);\n      ptr_temp2 = &DAT_20000444 + temp1;\n      if (ptr_temp2 == ptr_temp5) {\n        DAT_20000450 = 1 << (temp4 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr_temp5 + 4) & 0xfffffffc) <= num4) break;\n          ptr_temp5 = *(undefined **)(ptr_temp5 + 8);\n        } while (ptr_temp2 != ptr_temp5);\n        ptr_temp2 = *(undefined **)(ptr_temp5 + 0xc);\n      }\n      num1 = DAT_20000450;\n      ptr_temp6[2] = ptr_temp5;\n      ptr_temp6[3] = ptr_temp2;\n      *(undefined4 **)(ptr_temp2 + 8) = ptr_temp6;\n      *(undefined4 **)(ptr_temp5 + 0xc) = ptr_temp6;\n    }\n    num3 = 1 << ((int)temp2 >> 2 & 0xffU);\n    if (num3 <= num1) {\nLAB_08008c06:\n      if ((num3 & num1) == 0) {\n        temp2 = temp2 & 0xfffffffc;\n        do {\n          num3 = num3 << 1;\n          temp2 = temp2 + 4;\n        } while ((num3 & num1) == 0);\n      }\n      do {\n        ptr_temp7 = (undefined4 *)(&DAT_2000044c + temp2 * 8);\n        num1 = temp2;\n        ptr_temp6 = ptr_temp7;\n        do {\n          for (ptr_temp3 = (undefined4 *)ptr_temp6[3]; ptr_temp6 != ptr_temp3;\n              ptr_temp3 = (undefined4 *)ptr_temp3[3]) {\n            num4 = ptr_temp3[1] & 0xfffffffc;\n            num2 = num4 - temp3;\n            if (0xf < (int)num2) {\n              temp4 = ptr_temp3[2];\n              temp1 = ptr_temp3[3];\n              ptr_temp6 = (undefined4 *)(temp3 + (int)ptr_temp3);\n              ptr_temp3[1] = temp3 | 1;\n              *(int *)(temp4 + 0xc) = temp1;\n              *(int *)(temp1 + 8) = temp4;\n              DAT_2000045c = ptr_temp6;\n              DAT_20000460 = ptr_temp6;\n              ptr_temp6[2] = &DAT_20000454;\n              ptr_temp6[3] = &DAT_20000454;\n              ptr_temp6[1] = num2 | 1;\n              *(uint *)((int)ptr_temp3 + num4) = num2;\n              initialize_data_080090b4(ptr_result);\n              return ptr_temp3 + 2;\n            }\n            if (-1 < (int)num2) {\n              temp1 = ptr_temp3[3];\n              temp4 = ptr_temp3[2];\n              *(uint *)((int)ptr_temp3 + num4 + 4) = *(uint *)((int)ptr_temp3 + num4 + 4) | 1;\n              *(int *)(temp4 + 0xc) = temp1;\n              *(int *)(temp1 + 8) = temp4;\n              initialize_data_080090b4(ptr_result);\n              return ptr_temp3 + 2;\n            }\n          }\n          num1 = num1 + 1;\n          ptr_temp6 = ptr_temp6 + 2;\n        } while ((num1 & 3) != 0);\n        do {\n          num4 = temp2 & 3;\n          ptr_temp6 = ptr_temp7 + -2;\n          temp2 = temp2 - 1;\n          if (num4 == 0) {\n            DAT_20000450 = DAT_20000450 & ~num3;\n            break;\n          }\n          ptr_temp7 = (undefined4 *)*ptr_temp7;\n        } while (ptr_temp7 == ptr_temp6);\n        num3 = num3 * 2;\n        if ((DAT_20000450 <= num3 && num3 - DAT_20000450 != 0) || (temp2 = num1, num3 == 0))\n        break;\n        for (; (num3 & DAT_20000450) == 0; num3 = num3 << 1) {\n          temp2 = temp2 + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr_temp5 = DAT_20000454;\n  temp2 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((temp3 <= temp2) && (num1 = temp2 - temp3, 0xf < (int)num1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    num1 = temp3 + DAT_20000a44 + 0x10;\n  }\n  else {\n    num1 = temp3 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr_temp2 = (undefined *)initialize_memory_allocation_08009744(ptr_result,num1);\n  if (ptr_temp2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    temp2 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr_temp1 = ptr_temp5 + temp2;\n    if (ptr_temp1 < ptr_temp2 || ptr_temp1 == ptr_temp2) {\n      ptr_temp4 = DAT_20000a14 + num1;\n      if ((ptr_temp1 != ptr_temp2) || (((uint)ptr_temp1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr_temp4;\n      *(uint *)(DAT_20000454 + 4) = temp2 + num1 | 1;\n    }\n    else {\n      if (ptr_temp5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + num1;\n      ptr_temp4 = ptr_temp2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr_temp2 - (int)ptr_temp1);\n        ptr_temp4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr_temp4;\n      num3 = (uint)ptr_temp2 & 7;\n      if (num3 == 0) {\n        temp1 = 0x1000;\n      }\n      else {\n        ptr_temp2 = ptr_temp2 + (8 - num3);\n        temp1 = 0x1008 - num3;\n      }\n      temp1 = temp1 - ((uint)(ptr_temp2 + num1) & 0xfff);\n      temp4 = initialize_memory_allocation_08009744(ptr_result,temp1);\n      if (temp4 == -1) {\n        num1 = 1;\n        temp1 = 0;\n      }\n      else {\n        num1 = (temp4 - (int)ptr_temp2) + temp1 | 1;\n      }\n      ptr_temp4 = DAT_20000a14 + temp1;\n      DAT_20000454 = ptr_temp2;\n      DAT_20000a14 = ptr_temp4;\n      *(uint *)(ptr_temp2 + 4) = num1;\n      if (ptr_temp5 != &DAT_2000044c) {\n        if (temp2 < 0x10) {\n          *(undefined4 *)(ptr_temp2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        temp2 = temp2 - 0xc & 0xfffffff8;\n        *(uint *)(ptr_temp5 + 4) = *(uint *)(ptr_temp5 + 4) & 1 | temp2;\n        *(undefined4 *)(ptr_temp5 + temp2 + 4) = 5;\n        *(undefined4 *)(ptr_temp5 + temp2 + 8) = 5;\n        if (0xf < temp2) {\n          initialize_and_allocate_memory_08008af8_080088ec(ptr_result,ptr_temp5 + 8);\n          ptr_temp4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr_temp4) {\n      DAT_20000a3c = ptr_temp4;\n    }\n    temp2 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr_temp4) {\n      DAT_20000a40 = ptr_temp4;\n    }\n  }\n  num1 = (temp2 & 0xfffffffc) - temp3;\n  if ((temp3 <= (temp2 & 0xfffffffc)) && (0xf < (int)num1)) {\nLAB_08008dac:\n    ptr_temp5 = DAT_20000454 + temp3;\n    *(uint *)(DAT_20000454 + 4) = temp3 | 1;\n    ptr_allocated_memory = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr_temp5;\n    *(uint *)(ptr_temp5 + 4) = num1 | 1;\n    initialize_data_080090b4(ptr_result);\n    return ptr_allocated_memory;\n  }\nLAB_08008eee:\n  initialize_data_080090b4(ptr_result);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "ptr_result",
                "param_2": "size",
                "puVar1": "ptr_temp1",
                "uVar2": "num1",
                "uVar3": "num2",
                "iVar4": "temp1",
                "puVar5": "ptr_temp2",
                "uVar6": "num3",
                "uVar7": "num4",
                "puVar8": "ptr_temp3",
                "puVar9": "ptr_temp4",
                "puVar10": "ptr_temp5",
                "piVar11": "ptr_allocated_memory",
                "uVar12": "temp2",
                "uVar13": "temp3",
                "iVar14": "temp4",
                "puVar15": "ptr_temp6",
                "puVar16": "ptr_temp7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_matching_byte_sequence_0800901c",
            "code": "\nuint * find_matching_byte_sequence_0800901c(uint *byte_array,uint search_byte,uint array_length)\n\n{\n  uint temp;\n  uint combined_byte;\n  uint *ptr;\n  uint matched_byte;\n  bool is_last_byte;\n  \n  matched_byte = search_byte & 0xff;\n  if (((uint)byte_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      combined_byte = (search_byte & 0xff) << 8 | matched_byte;\n      ptr = byte_array;\n      do {\n        temp = *ptr ^ (combined_byte | combined_byte << 0x10);\n        byte_array = ptr + 1;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        ptr = byte_array;\n      } while (3 < array_length);\n    }\n    ptr = byte_array;\n    if (array_length == 0) {\n      byte_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      byte_array = ptr;\n      if (*(byte *)byte_array != matched_byte) {\n        ptr = (uint *)(array_length + (int)byte_array);\n        do {\n          byte_array = (uint *)((int)byte_array + 1);\n          if (ptr == byte_array) goto LAB_0800906c;\n        } while (*(byte *)byte_array != matched_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      byte_array = (uint *)0x0;\n    }\n    else if (*(byte *)byte_array != matched_byte) {\n      ptr = (uint *)((int)byte_array + 1);\n      do {\n        byte_array = ptr;\n        array_length = combined_byte;\n        if (((uint)byte_array & 3) == 0) goto LAB_0800904a;\n        is_last_byte = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_last_byte) goto LAB_0800906c;\n        ptr = (uint *)((int)byte_array + 1);\n      } while (*(byte *)byte_array != matched_byte);\n    }\n  }\n  return byte_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_matching_byte_sequence_0800901c",
                "param_1": "byte_array",
                "param_2": "search_byte",
                "param_3": "array_length",
                "uVar1": "temp",
                "uVar2": "combined_byte",
                "puVar3": "ptr",
                "uVar4": "matched_byte",
                "bVar5": "is_last_byte"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "initialize_or_retrieve_data_080090c0",
            "code": "\nundefined4 * initializeOrRetrieveData_080090c0(int dataPtr,uint index)\n\n{\n  undefined4 *dataEntryPtr;\n  int memoryPtr;\n  \n  memoryPtr = *(int *)(dataPtr + 0x4c);\n  if (memoryPtr == 0) {\n    memoryPtr = initialize_memory_08009980(dataPtr,4,0x21);\n    *(int *)(dataPtr + 0x4c) = memoryPtr;\n    if (memoryPtr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  dataEntryPtr = *(undefined4 **)(memoryPtr + index * 4);\n  if (dataEntryPtr == (undefined4 *)0x0) {\n    memoryPtr = 1 << (index & 0xff);\n    dataEntryPtr = (undefined4 *)initialize_memory_08009980(dataPtr,1,(memoryPtr + 5) * 4);\n    if (dataEntryPtr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    dataEntryPtr[1] = index;\n    dataEntryPtr[2] = memoryPtr;\n  }\n  else {\n    *(undefined4 *)(memoryPtr + index * 4) = *dataEntryPtr;\n  }\n  dataEntryPtr[3] = 0;\n  dataEntryPtr[4] = 0;\n  return dataEntryPtr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "initialize_or_retrieve_data_080090c0",
                "param_1": "dataPtr",
                "param_2": "index",
                "puVar1": "dataEntryPtr",
                "iVar2": "memoryPtr"
            },
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_0800910c",
            "code": "\nvoid updatePointer_0800910c(int ptrOffset,undefined4 *updatedPointer)\n\n{\n  int dataOffset;\n  \n  if (updatedPointer != (undefined4 *)0x0) {\n    dataOffset = *(int *)(ptrOffset + 0x4c);\n    *updatedPointer = *(undefined4 *)(dataOffset + updatedPointer[1] * 4);\n    *(undefined4 **)(dataOffset + updatedPointer[1] * 4) = updatedPointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_0800910c",
                "param_1": "ptrOffset",
                "param_2": "updatedPointer",
                "iVar1": "dataOffset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "update_array_with_multiplier_08009120",
            "code": "\nundefined4 * updateArrayWithMultiplier_08009120(int input_param,undefined4 *array_ptr,int multiplier,uint carry)\n\n{\n  undefined4 *result_ptr;\n  uint temp;\n  int array_length;\n  uint *data_ptr;\n  int counter;\n  \n  counter = 0;\n  array_length = array_ptr[4];\n  data_ptr = array_ptr + 5;\n  do {\n    counter = counter + 1;\n    carry = multiplier * (*data_ptr & 0xffff) + carry;\n    temp = multiplier * (*data_ptr >> 0x10) + (carry >> 0x10);\n    *data_ptr = (carry & 0xffff) + temp * 0x10000;\n    carry = temp >> 0x10;\n    data_ptr = data_ptr + 1;\n  } while (counter < array_length);\n  result_ptr = array_ptr;\n  if (carry != 0) {\n    if ((int)array_ptr[2] <= array_length) {\n      result_ptr = (undefined4 *)initialize_or_retrieve_data_080090c0(input_param,array_ptr[1] + 1);\n      copy_memory_08001084(result_ptr + 3,array_ptr + 3,(array_ptr[4] + 2) * 4);\n      counter = *(int *)(input_param + 0x4c);\n      *array_ptr = *(undefined4 *)(counter + array_ptr[1] * 4);\n      *(undefined4 **)(counter + array_ptr[1] * 4) = array_ptr;\n    }\n    result_ptr[array_length + 5] = carry;\n    result_ptr[4] = array_length + 1;\n  }\n  return result_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009120": "update_array_with_multiplier_08009120",
                "param_1": "input_param",
                "param_2": "array_ptr",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "result_ptr",
                "uVar2": "temp",
                "iVar3": "array_length",
                "puVar4": "data_ptr",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZeros = 0x10;\n  }\n  else {\n    leadingZeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZeros = leadingZeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZeros = leadingZeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZeros = leadingZeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZeros + 1;\n    }\n    leadingZeros = 0x20;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZeros"
            },
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_trailing_zeros_080091e4",
            "code": "\nint countTrailingZeros_080091e4(uint *num)\n\n{\n  int bitCount;\n  uint temp;\n  \n  temp = *num;\n  if ((temp & 7) == 0) {\n    if ((temp & 0xffff) == 0) {\n      temp = temp >> 0x10;\n      bitCount = 0x10;\n    }\n    else {\n      bitCount = 0;\n    }\n    if ((temp & 0xff) == 0) {\n      temp = temp >> 8;\n      bitCount = bitCount + 8;\n    }\n    if ((temp & 0xf) == 0) {\n      temp = temp >> 4;\n      bitCount = bitCount + 4;\n    }\n    if ((temp & 3) == 0) {\n      temp = temp >> 2;\n      bitCount = bitCount + 2;\n    }\n    if (-1 < (int)(temp << 0x1f)) {\n      temp = temp >> 1;\n      if (temp == 0) {\n        return 0x20;\n      }\n      bitCount = bitCount + 1;\n    }\n    *num = temp;\n    return bitCount;\n  }\n  if ((int)(temp << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(temp << 0x1e)) {\n    *num = temp >> 2;\n    return 2;\n  }\n  *num = temp >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "param_1": "num",
                "iVar1": "bitCount",
                "uVar2": "temp"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initializeData_08009244(undefined4 parameter1,undefined4 parameter2)\n\n{\n  int dataPointer;\n  \n  dataPointer = initialize_or_retrieve_data_080090c0(parameter1,1);\n  *(undefined4 *)(dataPointer + 0x10) = 1;\n  *(undefined4 *)(dataPointer + 0x14) = parameter2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "iVar1": "dataPointer"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "calculate_sum_08009258",
            "code": "\nvoid calculateSum_08009258(undefined4 input1,int input2,int input3)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int sum;\n  uint temp1;\n  uint *ptr3;\n  uint start;\n  uint *ptr4;\n  uint temp2;\n  int minValue;\n  int maxValue;\n  uint end;\n  int var1;\n  int var2;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  var1 = *(int *)(input2 + 0x10);\n  minValue = *(int *)(input3 + 0x10);\n  maxValue = minValue;\n  var2 = input2;\n  if (var1 < minValue) {\n    maxValue = var1;\n    var1 = minValue;\n    var2 = input3;\n    input3 = input2;\n  }\n  minValue = var1 + maxValue;\n  sum = *(int *)(var2 + 4);\n  if (*(int *)(var2 + 8) < minValue) {\n    sum = sum + 1;\n  }\n  sum = initialize_or_retrieve_data_080090c0(input1,sum);\n  ptr9 = (uint *)(sum + 0x14);\n  ptr8 = ptr9 + minValue;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start = input3 + 0x14;\n  end = start + maxValue * 4;\n  ptr3 = (uint *)(var2 + 0x14);\n  if (start < end) {\n    ptr4 = (uint *)(start + ((end - input3) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(input3 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        start = *ptr7 & 0xffff;\n        if (start != 0) break;\n        start = *ptr7 >> 0x10;\n        if (start == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr9;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        end = temp2;\n        do {\n          ptr6 = ptr5;\n          temp1 = temp1 + start * *(ushort *)ptr1 + (end >> 0x10);\n          *ptr6 = temp2 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          end = ptr6[1];\n          temp2 = start * (*ptr1 >> 0x10) + (end & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + var1);\n        ptr6[1] = temp2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      end = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp2 = start * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + end;\n        temp1 = start * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        end = temp1 >> 0x10;\n        *ptr2 = temp2 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + var1);\n      ptr2[1] = end;\n      start = *ptr7 >> 0x10;\n      if (start != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < minValue) {\n    start = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start == 0 && (minValue = minValue + -1, minValue != 0))) {\n      ptr8 = ptr8 + -1;\n      start = *ptr8;\n    }\n  }\n  *(int *)(sum + 0x10) = minValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "calculate_sum_08009258",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "sum",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "start",
                "puVar7": "ptr4",
                "uVar8": "temp2",
                "iVar9": "minValue",
                "iVar10": "maxValue",
                "uVar11": "end",
                "iVar12": "var1",
                "iVar13": "var2",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "update_array_with_multiplier_080093a4",
            "code": "\nundefined4 * updateArrayWithMultiplier_080093a4(int arraySize,undefined4 *inputArray,uint multiplier)\n\n{\n  int temp1;\n  int temp2;\n  undefined4 *tempArray;\n  undefined4 *tempArray2;\n  \n  if ((multiplier & 3) != 0) {\n    inputArray = (undefined4 *)\n              update_array_with_multiplier_08009120(arraySize,inputArray,*(undefined4 *)(&DAT_0800a070 + ((multiplier & 3) - 1) * 4),\n                           0);\n  }\n  temp2 = (int)multiplier >> 2;\n  if (temp2 != 0) {\n    tempArray2 = *(undefined4 **)(arraySize + 0x48);\n    if (tempArray2 == (undefined4 *)0x0) {\n      tempArray2 = (undefined4 *)initialize_or_retrieve_data_080090c0(arraySize,1);\n      tempArray2[4] = 1;\n      tempArray2[5] = 0x271;\n      *(undefined4 **)(arraySize + 0x48) = tempArray2;\n      *tempArray2 = 0;\n    }\n    tempArray = inputArray;\n    if (temp2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    temp2 = temp2 >> 1;\n    tempArray = tempArray2;\n    if (temp2 != 0) {\n      while( true ) {\n        tempArray2 = (undefined4 *)*tempArray;\n        if (tempArray2 == (undefined4 *)0x0) {\n          tempArray2 = (undefined4 *)calculate_sum_08009258(arraySize,tempArray,tempArray);\n          *tempArray = tempArray2;\n          *tempArray2 = 0;\n        }\n        tempArray = inputArray;\n        if (-1 < temp2 << 0x1f) break;\nLAB_080093d2:\n        inputArray = (undefined4 *)calculate_sum_08009258(arraySize,tempArray,tempArray2);\n        if (tempArray == (undefined4 *)0x0) break;\n        temp1 = *(int *)(arraySize + 0x4c);\n        temp2 = temp2 >> 1;\n        *tempArray = *(undefined4 *)(temp1 + tempArray[1] * 4);\n        *(undefined4 **)(temp1 + tempArray[1] * 4) = tempArray;\n        tempArray = tempArray2;\n        if (temp2 == 0) {\n          return inputArray;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return inputArray;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "update_array_with_multiplier_080093a4",
                "param_1": "arraySize",
                "param_2": "inputArray",
                "param_3": "multiplier",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "puVar3": "tempArray",
                "puVar4": "tempArray2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "initialize_data_08009444",
            "code": "\nvoid initializeData_08009444(int binaryAddress,undefined4 *paramArray,uint bitCount)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  undefined4 tempVar4;\n  int arraySize;\n  int tempVar6;\n  uint *dataPtr1;\n  uint *dataPtr2;\n  uint *dataPtr4;\n  uint *dataPtr5;\n  int tempVar12;\n  int tempVar13;\n  uint tempVar14;\n  uint *dataPtr3;\n  \n  arraySize = paramArray[4];\n  tempVar12 = (int)bitCount >> 5;\n  tempVar13 = tempVar12 + arraySize + 1;\n  tempVar3 = paramArray[1];\n  tempVar2 = paramArray[2];\n  if ((int)paramArray[2] < tempVar13) {\n    do {\n      tempVar6 = tempVar2 * 2;\n      tempVar1 = tempVar2 * -2;\n      tempVar3 = tempVar3 + 1;\n      tempVar2 = tempVar6;\n    } while (tempVar13 != tempVar6 && tempVar13 + tempVar1 < 0 == SBORROW4(tempVar13,tempVar6));\n  }\n  tempVar2 = initialize_or_retrieve_data_080090c0(binaryAddress,tempVar3);\n  dataPtr1 = (uint *)(tempVar2 + 0x14);\n  if (0 < tempVar12) {\n    dataPtr5 = dataPtr1 + tempVar12;\n    dataPtr2 = dataPtr1;\n    do {\n      dataPtr3 = dataPtr2 + 1;\n      *dataPtr2 = 0;\n      dataPtr1 = dataPtr5;\n      dataPtr2 = dataPtr3;\n    } while (dataPtr3 != dataPtr5);\n  }\n  tempVar3 = paramArray[4];\n  dataPtr2 = paramArray + 5;\n  bitCount = bitCount & 0x1f;\n  if (bitCount == 0) {\n    dataPtr1 = dataPtr1 + -1;\n    dataPtr5 = dataPtr2;\n    do {\n      dataPtr3 = dataPtr5 + 1;\n      dataPtr1 = dataPtr1 + 1;\n      *dataPtr1 = *dataPtr5;\n      dataPtr5 = dataPtr3;\n    } while (dataPtr3 < dataPtr2 + tempVar3);\n  }\n  else {\n    tempVar14 = 0;\n    dataPtr5 = dataPtr2;\n    do {\n      dataPtr3 = dataPtr1;\n      *dataPtr3 = *dataPtr5 << bitCount | tempVar14;\n      dataPtr4 = dataPtr5 + 1;\n      tempVar14 = *dataPtr5 >> (0x20 - bitCount & 0xff);\n      dataPtr1 = dataPtr3 + 1;\n      dataPtr5 = dataPtr4;\n    } while (dataPtr4 < dataPtr2 + tempVar3);\n    dataPtr3[1] = tempVar14;\n    if (tempVar14 != 0) {\n      tempVar13 = tempVar12 + arraySize + 2;\n    }\n  }\n  arraySize = *(int *)(binaryAddress + 0x4c);\n  tempVar3 = paramArray[1];\n  tempVar4 = *(undefined4 *)(arraySize + tempVar3 * 4);\n  *(int *)(tempVar2 + 0x10) = tempVar13 + -1;\n  *paramArray = tempVar4;\n  *(undefined4 **)(arraySize + tempVar3 * 4) = paramArray;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "initialize_data_08009444",
                "param_1": "binaryAddress",
                "param_2": "paramArray",
                "param_3": "bitCount",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "arraySize",
                "iVar6": "tempVar6",
                "puVar7": "dataPtr1",
                "puVar8": "dataPtr2",
                "puVar9": "dataPtr3",
                "puVar10": "dataPtr4",
                "puVar11": "dataPtr5",
                "iVar12": "tempVar12",
                "iVar13": "tempVar13",
                "uVar14": "tempVar14"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compare_arrays_080094f8(int array1_address,int array2_address)\n\n{\n  int array_size_difference;\n  uint *array2_ptr;\n  int offset;\n  uint *array1_ptr;\n  \n  offset = *(int *)(array2_address + 0x10);\n  array_size_difference = *(int *)(array1_address + 0x10) - offset;\n  if (array_size_difference == 0) {\n    array2_ptr = (uint *)(array2_address + 0x14 + offset * 4);\n    array1_ptr = (uint *)(array1_address + 0x14) + offset;\n    do {\n      array1_ptr = array1_ptr + -1;\n      array2_ptr = array2_ptr + -1;\n      if (*array1_ptr != *array2_ptr) {\n        if (*array2_ptr <= *array1_ptr) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1_address + 0x14) < array1_ptr);\n  }\n  return array_size_difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1_address",
                "param_2": "array2_address",
                "iVar1": "array_size_difference",
                "iVar3": "offset",
                "puVar2": "array2_ptr",
                "puVar4": "array1_ptr"
            },
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "validate_and_initialize_data_08009530",
            "code": "\nvoid validateAndInitializeData_08009530(undefined4 inputData,uint *dataSet1,uint *dataSet2,undefined4 configData)\n\n{\n  int initializedData;\n  uint *dataSet1Ptr;\n  uint dataSet2Size;\n  uint tempValue;\n  undefined4 validationFlag;\n  uint *initializedDataPtr;\n  uint *dataSet1Temp;\n  uint *dataSet1Start;\n  uint *dataSet2Start;\n  uint *dataSet1End;\n  int carryFlag;\n  uint *dataSet2End;\n  uint uVar14;\n  uint *dataSet2Temp;\n  \n  dataSet1Ptr = (uint *)dataSet2[4];\n  dataSet1End = dataSet1 + 5;\n  dataSet2End = dataSet2 + 5;\n  dataSet1Temp = dataSet1End;\n  dataSet1Start = dataSet1;\n  if ((uint *)dataSet1[4] == dataSet1Ptr) {\n    initializedDataPtr = dataSet1End + (int)dataSet1Ptr;\n    dataSet1Ptr = dataSet2End + (int)dataSet1Ptr;\n    while( true ) {\n      initializedDataPtr = initializedDataPtr + -1;\n      dataSet1Ptr = dataSet1Ptr + -1;\n      if (*initializedDataPtr != *dataSet1Ptr) break;\n      if (initializedDataPtr <= dataSet1End) {\n        carryFlag = initialize_or_retrieve_data_080090c0(inputData,0,initializedDataPtr,dataSet1Ptr,configData);\n        *(undefined4 *)(carryFlag + 0x10) = 1;\n        *(undefined4 *)(carryFlag + 0x14) = 0;\n        return;\n      }\n    }\n    validationFlag = 0;\n    if (*dataSet1Ptr <= *initializedDataPtr) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)dataSet1[4] - (int)dataSet1Ptr) {\n    validationFlag = 0;\n    initializedDataPtr = dataSet2;\n    goto LAB_08009578;\n  }\n  validationFlag = 1;\n  initializedDataPtr = dataSet1End;\n  dataSet1Ptr = dataSet1;\n  dataSet1Temp = dataSet2End;\n  dataSet1Start = dataSet2;\n  dataSet2 = dataSet1;\n  dataSet2End = dataSet1End;\nLAB_08009578:\n  initializedData = initialize_or_retrieve_data_080090c0(inputData,dataSet1Start[1],initializedDataPtr,dataSet1Ptr,configData);\n  carryFlag = 0;\n  uVar14 = dataSet1Start[4];\n  dataSet2Size = dataSet2[4];\n  *(undefined4 *)(initializedData + 0xc) = validationFlag;\n  dataSet1End = dataSet1Temp + uVar14;\n  dataSet1Ptr = (uint *)(initializedData + 0x14);\n  dataSet1Start = dataSet2End;\n  do {\n    dataSet2Temp = dataSet1Temp + 1;\n    dataSet2Start = dataSet1Start + 1;\n    tempValue = ((*dataSet1Temp & 0xffff) + carryFlag) - (*dataSet1Start & 0xffff);\n    carryFlag = ((*dataSet1Temp >> 0x10) - (*dataSet1Start >> 0x10)) + ((int)tempValue >> 0x10);\n    tempValue = tempValue & 0xffff | carryFlag * 0x10000;\n    initializedDataPtr = dataSet1Ptr + 1;\n    *dataSet1Ptr = tempValue;\n    carryFlag = carryFlag >> 0x10;\n    dataSet1Ptr = initializedDataPtr;\n    dataSet1Temp = dataSet2Temp;\n    dataSet1Start = dataSet2Start;\n  } while (dataSet2Start < dataSet2End + dataSet2Size);\n  dataSet1Ptr = dataSet2Temp;\n  dataSet1Temp = initializedDataPtr;\n  if (dataSet2Temp < dataSet1End) {\n    do {\n      dataSet1Start = dataSet1Ptr + 1;\n      dataSet2Size = (*dataSet1Ptr & 0xffff) + carryFlag;\n      carryFlag = ((int)dataSet2Size >> 0x10) + (*dataSet1Ptr >> 0x10);\n      tempValue = dataSet2Size & 0xffff | carryFlag * 0x10000;\n      *dataSet1Temp = tempValue;\n      carryFlag = carryFlag >> 0x10;\n      dataSet1Ptr = dataSet1Start;\n      dataSet1Temp = dataSet1Temp + 1;\n    } while (dataSet1Start < dataSet1End);\n    initializedDataPtr = (uint *)((int)initializedDataPtr + ((int)dataSet1End + ~(uint)dataSet2Temp & 0xfffffffc) + 4);\n  }\n  initializedDataPtr = initializedDataPtr + -1;\n  while (tempValue == 0) {\n    initializedDataPtr = initializedDataPtr + -1;\n    uVar14 = uVar14 - 1;\n    tempValue = *initializedDataPtr;\n  }\n  *(uint *)(initializedData + 0x10) = uVar14;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "validate_and_initialize_data_08009530",
                "param_1": "inputData",
                "param_2": "dataSet1",
                "param_3": "dataSet2",
                "param_4": "configData",
                "iVar1": "initializedData",
                "puVar2": "dataSet1Ptr",
                "uVar3": "dataSet2Size",
                "uVar4": "tempValue",
                "uVar5": "validationFlag",
                "puVar6": "initializedDataPtr",
                "puVar7": "dataSet1Temp",
                "puVar8": "dataSet2Temp",
                "puVar9": "dataSet1Start",
                "puVar10": "dataSet2Start",
                "puVar11": "dataSet1End",
                "puVar13": "dataSet2End",
                "iVar12": "carryFlag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "process_data_08009630",
            "code": "\nint processData_08009630(undefined4 input_1,undefined4 input_2,uint length_1,uint length_2,int *output_1,\n                int *output_2)\n\n{\n  int data;\n  uint trailingZeros;\n  int result_1;\n  int result_2;\n  uint shiftedLocal_1c;\n  uint shiftedLength_2;\n  undefined8 leadingZeros;\n  uint local_1;\n  uint local_1c;\n  \n  data = initializeData(input_1,1);\n  shiftedLength_2 = (length_2 << 1) >> 0x15;\n  local_1c = length_2 & 0xfffff;\n  if (shiftedLength_2 != 0) {\n    local_1c = local_1c | 0x100000;\n  }\n  if (length_1 == 0) {\n    result_1 = count_trailing_zeros_080091e4(&local_1c);\n    result_2 = 1;\n    trailingZeros = result_1 + 0x20;\n    *(undefined4 *)(data + 0x10) = 1;\n    *(uint *)(data + 0x14) = local_1c;\n  }\n  else {\n    local_1 = length_1;\n    trailingZeros = count_trailing_zeros_080091e4(&local_1);\n    if (trailingZeros == 0) {\n      *(uint *)(data + 0x14) = local_1;\n    }\n    else {\n      shiftedLocal_1c = local_1c << (0x20 - trailingZeros & 0xff);\n      local_1c = local_1c >> (trailingZeros & 0xff);\n      *(uint *)(data + 0x14) = shiftedLocal_1c | local_1;\n    }\n    if (local_1c == 0) {\n      result_2 = 1;\n    }\n    else {\n      result_2 = 2;\n    }\n    *(uint *)(data + 0x18) = local_1c;\n    *(int *)(data + 0x10) = result_2;\n  }\n  if (shiftedLength_2 == 0) {\n    *output_1 = trailingZeros - 0x432;\n    leadingZeros = count_leading_zeros_080091a4(*(undefined4 *)(data + result_2 * 4 + 0x10));\n    *output_2 = (int)((ulonglong)leadingZeros >> 0x20) * 0x20 - (int)leadingZeros;\n    return data;\n  }\n  *output_1 = (shiftedLength_2 - 0x433) + trailingZeros;\n  *output_2 = 0x35 - trailingZeros;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08009630": "process_data_08009630",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "length_1",
                "param_4": "length_2",
                "param_5": "output_1",
                "param_6": "output_2",
                "iVar1": "data",
                "uVar2": "trailingZeros",
                "iVar3": "result_1",
                "iVar4": "result_2",
                "uVar5": "shiftedLocal_1c",
                "uVar6": "shiftedLength_2",
                "uVar7": "leadingZeros",
                "local_20": "local_1",
                "initialize_or_retrieve_data_080090c0": "initializeData",
                "count_trailing_zeros_080091e4": "countTrailingZeros",
                "count_leading_zeros_080091a4": "countLeadingZeros"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_float_080096e0",
            "code": "\nundefined8 calculate_float_080096e0(uint num1,uint num2,int *result,undefined4 constant)\n\n{\n  int iteration;\n  uint num2_masked;\n  undefined8 combined_nums;\n  \n  combined_nums = CONCAT44(num2,num1);\n  iteration = 0;\n  num2_masked = num2 & 0x7fffffff;\n  *result = 0;\n  if ((num2_masked < 0x7ff00000) && ((num2_masked | num1) != 0)) {\n    if (num2_masked < 0x100000) {\n      combined_nums = calculate_result_080004c8(num1,num2,0,0x43500000,constant);\n      iteration = -0x36;\n      num2_masked = (uint)((ulonglong)combined_nums >> 0x20) & 0x7fffffff;\n    }\n    num1 = (uint)combined_nums;\n    num2 = (uint)((ulonglong)combined_nums >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)num2_masked >> 0x14) + -0x3fe + iteration;\n  }\n  return CONCAT44(num2,num1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_float_080096e0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "result",
                "param_4": "constant",
                "iVar1": "iteration",
                "uVar2": "num2_masked",
                "uVar3": "combined_nums"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "initialize_memory_allocation_08009744",
            "code": "\nvoid initializeMemoryAllocation_08009744(int *outputPointer,undefined4 size)\n\n{\n  int memoryAllocationResult;\n  \n  DAT_20000c10 = 0;\n  memoryAllocationResult = allocate_memory_08005728(size);\n  if ((memoryAllocationResult == -1) && (DAT_20000c10 != 0)) {\n    *outputPointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "initialize_memory_allocation_08009744",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "memoryAllocationResult"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_and_filter_string_08009768",
            "code": "\nvoid copyAndFilterString_08009768(uint *source,uint *destination,uint length)\n\n{\n  char nextChar;\n  uint *destPtr;\n  uint *srcPtr;\n  uint currentChar;\n  \n  if (((((uint)source | (uint)destination) & 3) == 0) &&\n     (srcPtr = source, destPtr = destination, 3 < length)) {\n    do {\n      destination = destPtr + 1;\n      currentChar = *destPtr;\n      source = srcPtr;\n      if ((currentChar + 0xfefefeff & ~currentChar & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      source = srcPtr + 1;\n      *srcPtr = currentChar;\n      srcPtr = source;\n      destPtr = destination;\n    } while (3 < length);\n  }\n  destPtr = destination;\n  if (length != 0) {\nLAB_0800979c:\n    nextChar = *(char *)destPtr;\n    *(char *)source = nextChar;\n    while( true ) {\n      source = (uint *)((int)source + 1);\n      length = length - 1;\n      if (nextChar == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      destPtr = (uint *)((int)destPtr + 1);\n      nextChar = *(char *)destPtr;\n      *(char *)source = nextChar;\n    }\n    if (length != 0) {\n      destPtr = source;\n      do {\n        srcPtr = (uint *)((int)destPtr + 1);\n        *(char *)destPtr = '\\0';\n        destPtr = srcPtr;\n      } while (srcPtr != (uint *)(length + (int)source));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_and_filter_string_08009768",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "uVar4": "currentChar",
                "cVar1": "nextChar"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "copy_and_reverse_data_080097cc",
            "code": "\nundefined4 copyAndReverseData_080097cc(undefined4 *destination,int *source,int *count)\n\n{\n  int destinationIndex;\n  uint sourceIndex;\n  int allocation;\n  int offset;\n  uint newCount;\n  uint sourceCount;\n  undefined4 *pointer;\n  undefined4 *currentPointer;\n  undefined4 currentValue;\n  \n  if (count[2] != 0) {\n    destinationIndex = *source;\n    newCount = source[2];\n    currentPointer = (undefined4 *)*count;\n    do {\n      do {\n        pointer = currentPointer + 2;\n        currentValue = *currentPointer;\n        sourceCount = currentPointer[1];\n        currentPointer = pointer;\n      } while (sourceCount == 0);\n      sourceIndex = sourceCount;\n      if ((newCount <= sourceCount) && (sourceIndex = newCount, (*(ushort *)(source + 3) & 0x480) != 0)) {\n        offset = destinationIndex - source[4];\n        newCount = (source[5] * 3) / 2;\n        sourceIndex = sourceCount + 1 + offset;\n        if (newCount < sourceIndex) {\n          newCount = sourceIndex;\n        }\n        if ((int)((uint)*(ushort *)(source + 3) << 0x15) < 0) {\n          allocation = allocate_memory_08008af8(destination,newCount);\n          if (allocation == 0) {\nLAB_08009896:\n            *destination = 0xc;\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\n            count[1] = 0;\n            count[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory_08001084(allocation,source[4],offset);\n          *(ushort *)(source + 3) = *(ushort *)(source + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          allocation = allocate_or_initialize_memory_08009adc(destination);\n          if (allocation == 0) {\n            initialize_and_allocate_memory_080088ec(destination,source[4]);\n            goto LAB_08009896;\n          }\n        }\n        destinationIndex = allocation + offset;\n        source[5] = newCount;\n        source[4] = allocation;\n        *source = destinationIndex;\n        source[2] = newCount - offset;\n        sourceIndex = sourceCount;\n      }\n      reverse_copy_data_08009a18(destinationIndex,currentValue,sourceIndex);\n      offset = count[2];\n      newCount = source[2] - sourceIndex;\n      destinationIndex = *source + sourceIndex;\n      source[2] = newCount;\n      *source = destinationIndex;\n      count[2] = offset - sourceCount;\n    } while (offset - sourceCount != 0);\n  }\n  count[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "copy_and_reverse_data_080097cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "count",
                "iVar1": "destinationIndex",
                "uVar2": "sourceIndex",
                "iVar3": "allocation",
                "iVar4": "offset",
                "uVar5": "newCount",
                "uVar6": "sourceCount",
                "puVar7": "pointer",
                "puVar8": "currentPointer",
                "uVar9": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 result;\n  uint flag;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      flag = 1 << (count & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | flag;\n      *(undefined4 *)(dataPtr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(dataPtr + 0x18c) = flag | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = count + 1;\n    result = DAT_20000448;\n    *(undefined4 *)(dataPtr + (count + 2) * 4) = data;\n    FUNC_08008af4(result);\n    result = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "flag",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 memoryPointer,int rowSize,int colSize)\n\n{\n  undefined4 *pointer;\n  uint size;\n  undefined4 *nextPointer;\n  \n  pointer = (undefined4 *)allocate_memory_08008af8(memoryPointer,colSize * rowSize);\n  if (pointer == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  size = (pointer[-1] & 0xfffffffc) - 4;\n  if (size < 0x25) {\n    nextPointer = pointer;\n    if (0x13 < size) {\n      *pointer = 0;\n      pointer[1] = 0;\n      if (0x1b < size) {\n        pointer[2] = 0;\n        pointer[3] = 0;\n        if (size == 0x24) {\n          pointer[4] = 0;\n          pointer[5] = 0;\n          nextPointer = pointer + 6;\n        }\n        else {\n          nextPointer = pointer + 4;\n        }\n        *nextPointer = 0;\n        nextPointer[1] = 0;\n        nextPointer[2] = 0;\n        return pointer;\n      }\n      nextPointer = pointer + 2;\n    }\n    *nextPointer = 0;\n    nextPointer[1] = 0;\n    nextPointer[2] = 0;\n    return pointer;\n  }\n  memset_with_value_08005d68(pointer,0);\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "memoryPointer",
                "param_2": "rowSize",
                "param_3": "colSize",
                "puVar1": "pointer",
                "uVar2": "size",
                "puVar3": "nextPointer"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "reverse_copy_data_08009a18",
            "code": "\nvoid reverseCopyData_08009a18(undefined4 *source,undefined4 *destination,uint length)\n\n{\n  undefined4 *sourcePtr;\n  undefined4 *destPtr;\n  int iteration;\n  undefined *readPtr;\n  undefined4 *writePtr;\n  uint remainingLength;\n  uint tempLength;\n  \n  if ((destination < source) && (destPtr = (undefined4 *)((int)destination + length), source < destPtr)) {\n    readPtr = (undefined *)((int)source + length);\n    if (length != 0) {\n      do {\n        destPtr = (undefined4 *)((int)destPtr + -1);\n        readPtr = readPtr + -1;\n        *readPtr = *(undefined *)destPtr;\n      } while (destination != destPtr);\n    }\n  }\n  else {\n    tempLength = length;\n    if (0xf < length) {\n      if ((((uint)source | (uint)destination) & 3) != 0) goto LAB_08009abc;\n      destPtr = destination + 4;\n      sourcePtr = source + 4;\n      do {\n        writePtr = destPtr + 4;\n        sourcePtr[-4] = destPtr[-4];\n        sourcePtr[-3] = destPtr[-3];\n        sourcePtr[-2] = destPtr[-2];\n        sourcePtr[-1] = destPtr[-1];\n        destPtr = writePtr;\n        sourcePtr = sourcePtr + 4;\n      } while (writePtr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (length - 0x10 >> 4) + 1;\n      tempLength = length & 0xf;\n      destination = destination + iteration * 4;\n      source = source + iteration * 4;\n      if (3 < tempLength) {\n        destPtr = source + -1;\n        remainingLength = tempLength;\n        sourcePtr = destination;\n        do {\n          remainingLength = remainingLength - 4;\n          destPtr = destPtr + 1;\n          *destPtr = *sourcePtr;\n          sourcePtr = sourcePtr + 1;\n        } while (3 < remainingLength);\n        iteration = (tempLength - 4 & 0xfffffffc) + 4;\n        source = (undefined4 *)((int)source + iteration);\n        destination = (undefined4 *)((int)destination + iteration);\n        tempLength = length & 3;\n      }\n    }\n    length = tempLength;\n    if (tempLength != 0) {\nLAB_08009abc:\n      readPtr = (undefined *)((int)source + -1);\n      destPtr = destination;\n      do {\n        sourcePtr = (undefined4 *)((int)destPtr + 1);\n        readPtr = readPtr + 1;\n        *readPtr = *(undefined *)destPtr;\n        destPtr = sourcePtr;\n      } while (sourcePtr != (undefined4 *)(length + (int)destination));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "reverse_copy_data_08009a18",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "sourcePtr",
                "puVar2": "destPtr",
                "iVar3": "iteration",
                "puVar4": "readPtr",
                "puVar5": "writePtr",
                "uVar6": "remainingLength",
                "uVar7": "tempLength"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_or_initialize_memory_08009adc",
            "code": "\nint * allocate_or_initialize_memory_08009adc(undefined4 *memory_address,int *existing_data,uint data_size)\n\n{\n  int *new_memory_address;\n  int temp_var1;\n  int *temp_var2;\n  uint temp_var3;\n  int temp_var4;\n  uint temp_var5;\n  int *temp_var6;\n  uint rounded_data_size;\n  uint temp_var7;\n  uint temp_var8;\n  int temp_var9;\n  \n  if (existing_data == (int *)0x0) {\n    temp_var2 = (int *)allocate_memory_08008af8(memory_address,data_size);\n    return temp_var2;\n  }\n  initialize_data_080090a8();\n  temp_var5 = existing_data[-1];\n  temp_var7 = temp_var5 & 0xfffffffc;\n  temp_var2 = existing_data + -2;\n  if (data_size + 0xb < 0x17) {\n    rounded_data_size = 0x10;\n  }\n  else {\n    rounded_data_size = data_size + 0xb & 0xfffffff8;\n    if ((int)rounded_data_size < 0) goto LAB_08009b8e;\n  }\n  if (rounded_data_size < data_size) {\nLAB_08009b8e:\n    *memory_address = 0xc;\n    return (int *)0x0;\n  }\n  temp_var9 = (int)temp_var2 + temp_var7;\n  temp_var8 = temp_var7;\n  if ((int)temp_var7 < (int)rounded_data_size) {\n    if (DAT_20000454 == temp_var9) {\n      temp_var9 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + temp_var7;\n      if ((int)(rounded_data_size + 0x10) <= temp_var9) {\n        DAT_20000454 = (int)temp_var2 + rounded_data_size;\n        *(uint *)(DAT_20000454 + 4) = temp_var9 - rounded_data_size | 1;\n        existing_data[-1] = rounded_data_size | existing_data[-1] & 1U;\n        initialize_data_080090b4(memory_address);\n        return existing_data;\n      }\n      if (-1 < (int)(temp_var5 << 0x1f)) {\n        new_memory_address = (int *)((int)temp_var2 - existing_data[-2]);\n        temp_var5 = new_memory_address[1] & 0xfffffffc;\n        if ((int)(rounded_data_size + 0x10) <= (int)(temp_var9 + temp_var5)) {\n          temp_var4 = new_memory_address[3];\n          temp_var2 = new_memory_address + 2;\n          temp_var1 = *temp_var2;\n          temp_var7 = temp_var7 - 4;\n          *(int *)(temp_var1 + 0xc) = temp_var4;\n          *(int *)(temp_var4 + 8) = temp_var1;\n          if (temp_var7 < 0x25) {\n            temp_var1 = *existing_data;\n            temp_var6 = temp_var2;\n            if (0x13 < temp_var7) {\n              new_memory_address[2] = temp_var1;\n              new_memory_address[3] = existing_data[1];\n              temp_var1 = existing_data[2];\n              if (temp_var7 < 0x1c) {\n                existing_data = existing_data + 2;\n                temp_var6 = new_memory_address + 4;\n              }\n              else {\n                new_memory_address[4] = temp_var1;\n                new_memory_address[5] = existing_data[3];\n                temp_var1 = existing_data[4];\n                if (temp_var7 == 0x24) {\n                  new_memory_address[6] = temp_var1;\n                  new_memory_address[7] = existing_data[5];\n                  temp_var1 = existing_data[6];\n                  existing_data = existing_data + 6;\n                  temp_var6 = new_memory_address + 8;\n                }\n                else {\n                  existing_data = existing_data + 4;\n                  temp_var6 = new_memory_address + 6;\n                }\n              }\n            }\n            *temp_var6 = temp_var1;\n            temp_var6[1] = existing_data[1];\n            temp_var6[2] = existing_data[2];\n          }\n          else {\n            reverse_copy_data_08009a18(temp_var2,existing_data);\n          }\n          DAT_20000454 = (int)new_memory_address + rounded_data_size;\n          *(uint *)(DAT_20000454 + 4) = (temp_var9 + temp_var5) - rounded_data_size | 1;\n          new_memory_address[1] = rounded_data_size | new_memory_address[1] & 1U;\n          initialize_data_080090b4(memory_address);\n          return temp_var2;\n        }\nLAB_08009bb0:\n        temp_var8 = temp_var7 + temp_var5;\n        if ((int)rounded_data_size <= (int)temp_var8) {\n          temp_var4 = new_memory_address[3];\n          temp_var6 = new_memory_address + 2;\n          temp_var1 = *temp_var6;\n          *(int *)(temp_var1 + 0xc) = temp_var4;\n          temp_var9 = (int)new_memory_address + temp_var8;\n          *(int *)(temp_var4 + 8) = temp_var1;\n          temp_var2 = new_memory_address;\n          if (temp_var7 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          reverse_copy_data_08009a18(temp_var6,existing_data);\n          existing_data = temp_var6;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_var9 + 4) & 0xfffffffe) + temp_var9 + 4) << 0x1f) {\n        temp_var3 = *(uint *)(temp_var9 + 4) & 0xfffffffc;\n        temp_var8 = temp_var7 + temp_var3;\n        if ((int)temp_var8 < (int)rounded_data_size) {\n          if ((int)(temp_var5 << 0x1f) < 0) goto LAB_08009b36;\n          new_memory_address = (int *)((int)temp_var2 - existing_data[-2]);\n          temp_var5 = new_memory_address[1] & 0xfffffffc;\n          temp_var8 = temp_var3 + temp_var5 + temp_var7;\n          if ((int)temp_var8 < (int)rounded_data_size) goto LAB_08009bb0;\n          temp_var1 = *(int *)(temp_var9 + 8);\n          temp_var9 = *(int *)(temp_var9 + 0xc);\n          *(int *)(temp_var1 + 0xc) = temp_var9;\n          *(int *)(temp_var9 + 8) = temp_var1;\n          temp_var6 = new_memory_address + 2;\n          temp_var1 = *temp_var6;\n          temp_var4 = new_memory_address[3];\n          *(int *)(temp_var1 + 0xc) = temp_var4;\n          temp_var9 = (int)new_memory_address + temp_var8;\n          *(int *)(temp_var4 + 8) = temp_var1;\n          temp_var2 = new_memory_address;\n          if (0x24 < temp_var7 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          temp_var7 = temp_var7 - 4;\n          temp_var1 = *existing_data;\n          new_memory_address = temp_var6;\n          if (0x13 < temp_var7) {\n            temp_var2[2] = temp_var1;\n            temp_var2[3] = existing_data[1];\n            temp_var1 = existing_data[2];\n            if (temp_var7 < 0x1c) {\n              existing_data = existing_data + 2;\n              new_memory_address = temp_var2 + 4;\n            }\n            else {\n              temp_var2[4] = temp_var1;\n              temp_var2[5] = existing_data[3];\n              temp_var1 = existing_data[4];\n              if (temp_var7 == 0x24) {\n                temp_var2[6] = temp_var1;\n                temp_var2[7] = existing_data[5];\n                temp_var1 = existing_data[6];\n                existing_data = existing_data + 6;\n                new_memory_address = temp_var2 + 8;\n              }\n              else {\n                existing_data = existing_data + 4;\n                new_memory_address = temp_var2 + 6;\n              }\n            }\n          }\n          *new_memory_address = temp_var1;\n          new_memory_address[1] = existing_data[1];\n          new_memory_address[2] = existing_data[2];\n          existing_data = temp_var6;\n        }\n        else {\n          temp_var1 = *(int *)(temp_var9 + 8);\n          temp_var4 = *(int *)(temp_var9 + 0xc);\n          *(int *)(temp_var1 + 0xc) = temp_var4;\n          temp_var9 = (int)temp_var2 + temp_var8;\n          *(int *)(temp_var4 + 8) = temp_var1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var5 << 0x1f)) {\n        new_memory_address = (int *)((int)temp_var2 - existing_data[-2]);\n        temp_var5 = new_memory_address[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory_address = (int *)allocate_memory_08008af8(memory_address,data_size);\n    if (new_memory_address != (int *)0x0) {\n      if ((int *)((existing_data[-1] & 0xfffffffeU) + (int)temp_var2) == new_memory_address + -2) {\n        temp_var8 = temp_var7 + (new_memory_address[-1] & 0xfffffffcU);\n        temp_var9 = (int)temp_var2 + temp_var8;\n        goto LAB_08009c00;\n      }\n      temp_var7 = temp_var7 - 4;\n      if (temp_var7 < 0x25) {\n        temp_var9 = *existing_data;\n        temp_var2 = existing_data;\n        temp_var6 = new_memory_address;\n        if (0x13 < temp_var7) {\n          *new_memory_address = temp_var9;\n          new_memory_address[1] = existing_data[1];\n          if (temp_var7 < 0x1c) {\n            temp_var9 = existing_data[2];\n            temp_var2 = existing_data + 2;\n            temp_var6 = new_memory_address + 2;\n          }\n          else {\n            new_memory_address[2] = existing_data[2];\n            new_memory_address[3] = existing_data[3];\n            if (temp_var7 == 0x24) {\n              new_memory_address[4] = existing_data[4];\n              new_memory_address[5] = existing_data[5];\n              temp_var9 = existing_data[6];\n              temp_var2 = existing_data + 6;\n              temp_var6 = new_memory_address + 6;\n            }\n            else {\n              temp_var9 = existing_data[4];\n              temp_var2 = existing_data + 4;\n              temp_var6 = new_memory_address + 4;\n            }\n          }\n        }\n        *temp_var6 = temp_var9;\n        temp_var6[1] = temp_var2[1];\n        temp_var6[2] = temp_var2[2];\n      }\n      else {\n        reverse_copy_data_08009a18(new_memory_address,existing_data);\n      }\n      initialize_and_allocate_memory_080088ec(memory_address,existing_data);\n    }\n    initialize_data_080090b4(memory_address);\n    existing_data = new_memory_address;\n  }\n  else {\nLAB_08009c00:\n    if (temp_var8 - rounded_data_size < 0x10) {\n      temp_var2[1] = temp_var2[1] & 1U | temp_var8;\n      *(uint *)(temp_var9 + 4) = *(uint *)(temp_var9 + 4) | 1;\n    }\n    else {\n      temp_var2[1] = temp_var2[1] & 1U | rounded_data_size;\n      *(uint *)((int)temp_var2 + rounded_data_size + 4) = temp_var8 - rounded_data_size | 1;\n      *(uint *)(temp_var9 + 4) = *(uint *)(temp_var9 + 4) | 1;\n      initialize_and_allocate_memory_080088ec(memory_address,(int)temp_var2 + rounded_data_size + 8);\n    }\n    initialize_data_080090b4(memory_address);\n  }\n  return existing_data;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_or_initialize_memory_08009adc",
                "param_1": "memory_address",
                "param_2": "existing_data",
                "param_3": "data_size",
                "piVar1": "new_memory_address",
                "iVar2": "temp_var1",
                "piVar3": "temp_var2",
                "uVar4": "temp_var3",
                "iVar5": "temp_var4",
                "uVar6": "temp_var5",
                "piVar7": "temp_var6",
                "uVar8": "rounded_data_size",
                "uVar9": "temp_var7",
                "uVar10": "temp_var8",
                "iVar11": "temp_var9"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 151820,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": []
}