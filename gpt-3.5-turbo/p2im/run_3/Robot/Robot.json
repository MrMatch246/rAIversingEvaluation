{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_bit_and_check_for_match_080036a8",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "update_bit_080041ea": "update_bit",
                "DAT_080036f4": "MATCH_ARRAY"
            },
            "code": "uint32_t set_bit_and_check_for_match_080036a8(uint32_t **bit_array, uint32_t bit_index) {\n    update_bit(*bit_array, bit_index, 1);\n    if (*bit_array == DAT_080036f4) {\n        (*bit_array)[17] |= 0x8000;\n    }\n    **bit_array |= 1;\n    return 0;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_for_match_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  do_nothing_with_ptr_data_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      calculate_result_and_set_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    do_nothing_with_ptr_data_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    do_nothing_with_ptr_data_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  do_nothing_with_ptr_data_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_0800884c",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_and_process_data_08005224",
                "PTR_check_result_and_get_value_08004ea4_1_08005280": "result_check_func_ptr",
                "PTR_process_data_08004ee8_1_08005288": "data_process_func_ptr",
                "PTR_get_value_from_pointer_08004f2c_1_08005290": "value_get_func_ptr",
                "PTR_DAT_08005294": "bit_check_ptr",
                "PTR_DAT_08005298": "params_ptr",
                "PTR_DAT_0800529c": "interrupt_check_ptr",
                "set_flag_and_call_function_080014f0": "set_flag_and_call_function",
                "calculate_result_and_update_data_080052a0": "calculate_result_and_update_data",
                "set_flags_and_process_data_080055f4": "set_flags_and_process_data",
                "initialize_data_08005348": "initialize_data",
                "initialize_values_08005598": "initialize_values",
                "initialize_memory_region_08005500": "initialize_memory_region",
                "initialize_device_080053b0": "initialize_device",
                "set_bit_and_check_for_match_080036a8": "set_bit_and_check_for_match",
                "initialize_params_and_calculate_hashes_0800491c": "initialize_params_and_calculate_hashes",
                "set_bit_0800360c": "set_bit",
                "check_interrupt_and_print_message_08004e74": "check_interrupt_and_print_message"
            },
            "code": "void initialize_and_process_data_08005224(void)\n{\n  set_flag_and_call_function();\n  calculate_result_and_update_data();\n  set_flags_and_process_data();\n  initialize_data();\n  initialize_values();\n  initialize_memory_region();\n  initialize_device();\n  *(undefined **)result_check_ptr = PTR_check_result_and_get_value_08004ea4_1_08005280;\n  *(undefined **)data_process_ptr = PTR_process_data_08004ee8_1_08005288;\n  *(undefined **)value_get_ptr = PTR_get_value_from_pointer_08004f2c_1_08005290;\n  set_bit_and_check_for_match(PTR_DAT_08005294,0);\n  set_bit_and_check_for_match(PTR_DAT_08005294,0xc);\n  initialize_params_and_calculate_hashes(PTR_DAT_08005298);\n  set_bit(PTR_DAT_0800529c);\n  check_interrupt_and_print_message(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_0800360c",
                "FUN_08005348",
                "FUN_080014f0",
                "FUN_080055f4",
                "FUN_080036a8",
                "FUN_08004e74",
                "FUN_0800491c",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_result_08003440",
                "local_30": "short_value",
                "local_2c": "ptr_value",
                "uStack_28": "stack_value_1",
                "uStack_24": "stack_value_2",
                "uStack_20": "stack_value_3",
                "local_1c": "value_1",
                "local_18": "value_2",
                "local_14": "flags",
                "local_10": "result",
                "local_c": "value_3"
            },
            "code": "uint calculate_result_08003440(void)\n{\n    uint result = 0;\n    uint flags = *(uint *)(DAT_080034f8 + 4);\n    if ((flags & 0xc) == 4) {\n        result = DAT_080034fc;\n    }\n    else if ((flags & 0xc) == 8) {\n        uint index = flags >> 0x12 & 0xf;\n        uint value = (uint)*(byte *)((int)&local_2c + index);\n        if ((flags & 0x10000) == 0) {\n            result = DAT_08003500 * value;\n        }\n        else {\n            uint divisor = (uint)*(byte *)((int)&local_30 + (*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1));\n            result = (DAT_080034fc * value) / divisor;\n        }\n    }\n    else {\n        result = DAT_080034fc;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_result_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_value_from_pointer_08004f2c",
                "uVar1": "value",
                "get_value_from_pointer_080015a0": "*PTR_080015a0"
            },
            "code": "int get_value_from_pointer_08004f2c() {\n  int value = *PTR_080015a0;\n  return value;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_pointer_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result",
                "PTR_DAT_080053a0": "data_pointer",
                "DAT_080053a4": "data_value_1",
                "DAT_080053a8": "data_value_2",
                "calculate_and_set_values_08001ab0": "calculate_and_set_values",
                "infinite_loop_08005674": "infinite_loop"
            },
            "code": "void initialize_data_08005348(void)\n{\n  int result;\n  int *PTR_DAT_080053a0 = (int *)PTR_DAT_080053a0;\n  *PTR_DAT_080053a0 = DAT_080053a4;\n  *(PTR_DAT_080053a0 + 1) = DAT_080053a8;\n  *(PTR_DAT_080053a0 + 2) = 0;\n  *(PTR_DAT_080053a0 + 3) = 0;\n  *(PTR_DAT_080053a0 + 4) = 0x4000;\n  *(PTR_DAT_080053a0 + 5) = 0;\n  *(PTR_DAT_080053a0 + 6) = 0;\n  *(PTR_DAT_080053a0 + 7) = 0;\n  *(PTR_DAT_080053a0 + 8) = 0;\n  result = calculate_and_set_values_08001ab0(PTR_DAT_080053a0);\n  if (result != 0) {\n    infinite_loop_08005674(PTR_s____src_main_c_080053ac, 0x17a);\n  }\n  return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "ptr_param",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "index1",
                "iVar4": "index2",
                "iVar5": "index3",
                "uVar6": "shift_value"
            },
            "code": "void calculate_values_080046ec(int *ptr_param)\n{\n  longlong value1;\n  longlong value2;\n  int index1;\n  int index2;\n  int index3;\n  undefined8 shift_value;\n  \n  *(uint *)(*ptr_param + 0x10) = ptr_param[3] | (*(uint *)(*ptr_param + 0x10) & 0xffffcfff);\n  *(uint *)(*ptr_param + 0xc) = (*(uint *)(*ptr_param + 0xc) & 0xffffe9f3) | ptr_param[5] | ptr_param[2] | ptr_param[4];\n  *(uint *)(*ptr_param + 0x14) = ptr_param[6] | (*(uint *)(*ptr_param + 0x14) & 0xfffffcff);\n  if (*ptr_param == PTR_DAT_08004914) {\n    shift_value = get_value_shifted_by_pointer_index_08003540();\n    value1 = (ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)shift_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2));\n    index1 = get_value_shifted_by_pointer_index_08003540((int)shift_value,(int)((ulonglong)shift_value >> 0x20),(int)value1);\n    index2 = ptr_param[1];\n    shift_value = get_value_shifted_by_pointer_index_08003540();\n    value2 = (ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(index1 * 0x19) / (uint)(index2 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)shift_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    index1 = get_value_shifted_by_pointer_index_08003540((int)shift_value,(int)((ulonglong)shift_value >> 0x20),(int)value2);\n    index3 = ptr_param[1];\n    index2 = get_value_shifted_by_pointer_index_08003540();\n    *(uint *)(*ptr_param + 8) = ((uint)((ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(index1 * 0x19) / (uint)(index3 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)(index2 * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + ((uint)((ulonglong)value1 >> 0x25) * 0x10) + ((uint)((ulonglong)value2 >> 0x25) & 0xf0);\n  }\n  else {\n    shift_value = get_shifted_value_from_pointer_08003518();\n    value1 = (ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)shift_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2));\n    index1 = get_shifted_value_from_pointer_08003518((int)shift_value,(int)((ulonglong)shift_value >> 0x20),(int)value1);\n    index2 = ptr_param[1];\n    shift_value = get_shifted_value_from_pointer_08003518();\n    value2 = (ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(index1 * 0x19) / (uint)(index2 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)shift_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    index1 = get_shifted_value_from_pointer_08003518((int)shift_value,(int)((ulonglong)shift_value >> 0x20),(int)value2);\n    index3 = ptr_param[1];\n    index2 = get_shifted_value_from_pointer_08003518();\n    *(uint *)(*ptr_param + 8) = ((uint)((ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(index1 * 0x19) / (uint)(index3 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)(index2 * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + ((uint)((ulonglong)value1 >> 0x25) * 0x10) + ((uint)((ulonglong)value2 >> 0x25) & 0xf0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_memory_region_08005500",
                "PTR_DAT_08005590": "MEMORY_REGION_PTR",
                "PTR_DAT_08005590 + 4": "MEMORY_REGION_PTR + 4",
                "PTR_DAT_08005590 + 8": "MEMORY_REGION_PTR + 8",
                "PTR_DAT_08005590 + 0xc": "MEMORY_REGION_PTR + 0xc",
                "PTR_DAT_08005590 + 0x10": "MEMORY_REGION_PTR + 0x10",
                "PTR_DAT_08005590 + 0x18": "MEMORY_REGION_PTR + 0x18",
                "check_values_080035a4": "check_values",
                "infinite_loop_08005674": "infinite_loop",
                "local_18": "memory_region",
                "local_20": "value_to_set",
                "local_1c": "second_value_to_set"
            },
            "code": "void initialize_memory_region_08005500(void)\n{\n    int check_value_result;\n    int permissions_result;\n    int value_set_result;\n    int memory_region[4];\n    memory_region[0] = 0x1000;\n    *(int *)PTR_DAT_08005590 = 0x40000000;\n    *(int *)(PTR_DAT_08005590 + 4) = 36000;\n    *(int *)(PTR_DAT_08005590 + 8) = 0;\n    *(int *)(PTR_DAT_08005590 + 0xc) = 0x14;\n    *(int *)(PTR_DAT_08005590 + 0x10) = 0;\n    *(int *)(PTR_DAT_08005590 + 0x18) = 0;\n    check_value_result = check_values(PTR_DAT_08005590);\n    if (check_value_result != 0) {\n        infinite_loop(\"s____src_main_c_08005594\", 0x1d0);\n    }\n    permissions_result = set_permissions_and_bits(PTR_DAT_08005590, memory_region);\n    if (permissions_result != 0) {\n        infinite_loop(\"s____src_main_c_08005594\", 0x1d5);\n    }\n    value_set_result = set_value_if_not_set(PTR_DAT_08005590, 0x20, 0);\n    if (value_set_result != 0) {\n        infinite_loop(\"s____src_main_c_08005594\", 0x1dc);\n    }\n    return;\n}\n",
            "called": [
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080042de",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_memory_region_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_flag_08002c2e",
                "param_1": "flag_ptr",
                "param_2": "max_value",
                "param_3": "offset",
                "iVar1": "is_flag_set"
            },
            "code": "int check_flag_08002c2e(int *flag_ptr, uint32_t max_value, int offset) {\n  int is_flag_set;\n  while (true) {\n    if ((*(uint32_t *)(*flag_ptr + 0x14) & 4) == 4) {\n      return 0;\n    }\n    is_flag_set = is_flag_set_08002d3c(flag_ptr);\n    if (is_flag_set != 0) {\n      break;\n    }\n    if ((max_value != 0xffffffff) && ((max_value == 0 || (is_flag_set = get_value_from_pointer_080015a0(), max_value < (uint32_t)(is_flag_set - offset))))) {\n      flag_ptr[0x10] = flag_ptr[0x10] | 0x20;\n      flag_ptr[0xc] = 0;\n      *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n      *(undefined *)(flag_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_flag_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "calculate_delay_08003568",
                "param_1": "input_value",
                "local_c": "delay",
                "bVar1": "is_delay_active",
                "multiplier": "delay_multiplier"
            },
            "code": "void calculate_delay_08003568(int input_value) {\n  uint64_t multiplier = (uint64_t)DAT_080035a0 * (uint64_t)*(uint *)PTR_DAT_0800359c >> 0x29;\n  int delay = input_value * multiplier;\n  while (delay > 0) {\n    delay--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "calculate_delay_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_and_store_hashes_080049cc",
                "param_1": "input",
                "local_20": "num_iterations",
                "local_c": "hash_sum_input_1",
                "local_10": "hash_sum_input_2",
                "local_14": "hash_3",
                "local_18": "hash_4",
                "local_24": "hash_result",
                "local_1c": "i",
                "local_28": "local_hash_sum",
                "local_2c": "local_hash_product"
            },
            "code": "void calculate_and_store_hashes_080049cc(int input)\n{\n    int num_iterations = 1;\n    int hash_sum = 0;\n    int hash_product = 0;\n    int hash_sum_input_1 = 0;\n    int hash_sum_input_2 = 0;\n    int hash_1 = 0;\n    int hash_2 = 0;\n    int hash_3 = 0;\n    int hash_4 = 0;\n    int hash_result = 0;\n    hash_result = (**(code **)PTR_DAT_08004adc)();\n    int i = 0;\n    while(num_iterations <= i)\n    {\n        int local_hash_sum = 0;\n        int local_hash_product = 0;\n        calculate_hashes_and_store_08004ae0(input);\n        calculate_output_and_float_08004d78(input, &local_hash_sum, &local_hash_product);\n        hash_3 = FUNC_08000aa8(hash_3, local_hash_sum);\n        hash_4 = FUNC_08000aa8(hash_4, local_hash_product);\n        hash_sum_input_1 = FUNC_08000aa8(hash_sum_input_1, *(undefined4 *)(input + 0x10));\n        hash_sum_input_2 = FUNC_08000aa8(hash_sum_input_2, *(undefined4 *)(input + 0x14));\n        hash_result = (**(code **)PTR_DAT_08004adc)();\n        i++;\n    }\n    hash_1 = calculate_hash_08000c10(num_iterations);\n    hash_2 = calculate_hash_08000c10(num_iterations);\n    hash_3 = FUNC_08000e20(hash_sum_input_1, hash_3);\n    hash_4 = FUNC_08000e20(hash_sum_input_2, hash_4);\n    hash_1 = FUNC_08000e20(hash_3, hash_1);\n    hash_2 = FUNC_08000e20(hash_4, hash_2);\n    *(undefined4 *)(input + 0x1c) = hash_1;\n    *(undefined4 *)(input + 0x20) = hash_2;\n    *(undefined4 *)(input + 0x24) = hash_3;\n    *(undefined4 *)(input + 0x28) = hash_4;\n    return;\n}",
            "called": [
                "FUN_08000e20",
                "FUN_08004d78",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "calculate_and_store_hashes_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "set_values_08003c94",
                "param_1": "memory_location",
                "param_2": "values",
                "local_c": "current_value",
                "DAT_08003d54": "ptr_constant_1",
                "DAT_08003d58": "ptr_constant_3",
                "DAT_08003d5c": "ptr_constant_4"
            },
            "code": "void set_values_08003c94(uint *memory_location, uint *values)\n{\n  uint current_value;\n  current_value = *memory_location;\n  if ((((memory_location == DAT_08003d54) || (memory_location == ptr_constant_2)) || (memory_location == DAT_08003d58)) || (memory_location == DAT_08003d5c)) {\n    current_value = values[1] | current_value & 0xffffff8f;\n  }\n  if (((memory_location == DAT_08003d54) || (memory_location == ptr_constant_2)) || ((memory_location == DAT_08003d58 || (memory_location == DAT_08003d5c)))) {\n    current_value = values[3] | current_value & 0xfffffcff;\n  }\n  *memory_location = values[5] | current_value & 0xffffff7f;\n  memory_location[0xb] = values[2];\n  memory_location[10] = *values;\n  if (memory_location == DAT_08003d54) {\n    memory_location[0xc] = values[4];\n  }\n  memory_location[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_080035a4",
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "set_values_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "check_for_overlap_08000978",
                "param_1": "start1",
                "param_2": "end1",
                "param_3": "start2",
                "param_4": "end2"
            },
            "code": "void check_for_overlap_08000978(unsigned int start1, unsigned int end1, unsigned int start2, unsigned int end2) {\n    check_for_overlap_08000978_08000988(start1, end1, start2, end2);\n    return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "check_for_overlap_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "calculate_result_and_set_0800884c",
                "param_1": "result",
                "param_2": "param",
                "puVar1": "global_ptr_data",
                "puVar2": "global_ptr_data_2",
                "iVar3": "var1",
                "iVar4": "aligned_addr",
                "uVar5": "page_aligned_addr"
            },
            "code": "int calculate_result_and_set_0800884c(int result, int param) {\n  int aligned_addr = (*(uint *)(*(int *)(global_ptr_data + 8) + 4) & 0xfffffffc);\n  int page_aligned_addr = ((0xfef - param) + aligned_addr & 0xfffff000) - 0x1000;\n  if (0xfff < page_aligned_addr) {\n    int var1 = calculate_result_and_set_0800884c_08009744(result,0);\n    if (var1 == *(int *)(global_ptr_data + 8) + aligned_addr) {\n      var1 = calculate_result_and_set_0800884c_08009744(result,-page_aligned_addr);\n      undefined *new_ptr = global_ptr_data_2;\n      if (var1 != -1) {\n        int var2 = *(int *)global_ptr_data_2;\n        *(uint *)(*(int *)(global_ptr_data + 8) + 4) = aligned_addr - page_aligned_addr | 1;\n        *(int *)new_ptr = var2 - page_aligned_addr;\n        do_nothing_with_ptr_data_080090b4(result);\n        return 1;\n      }\n      page_aligned_addr = calculate_result_and_set_0800884c_08009744(result,0);\n      new_ptr = global_ptr_data_2;\n      aligned_addr = page_aligned_addr - *(int *)(global_ptr_data + 8);\n      if (0xf < (int)aligned_addr) {\n        int var3 = *(int *)global_ptr_data_3;\n        *(uint *)(*(int *)(global_ptr_data + 8) + 4) = aligned_addr | 1;\n        *(int *)new_ptr = page_aligned_addr - var3;\n      }\n    }\n  }\n  do_nothing_with_ptr_data_080090b4(result);\n  return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "calculate_result_and_set_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_first_occurrence_of_byte_0800901c",
                "param_1": "buffer",
                "param_2": "buffer_length",
                "param_3": "search_bytes",
                "puVar1": "current_buffer",
                "uVar2": "search_value",
                "uVar3": "buffer_value",
                "puVar4": "search_end",
                "uVar5": "search_byte",
                "bVar6": "is_end_of_search"
            },
            "code": "uint* find_first_occurrence_of_byte_0800901c(uint* buffer, uint buffer_length, uint* search_bytes) {\n  uint* current_buffer = buffer;\n  uint search_byte = buffer_length & 0xff;\n  if (((uint)buffer & 3) != 0) {\n    uint* search_end = search_bytes - 1;\n    if (search_bytes == (uint*)0) {\n      return (uint*)0;\n    }\n    while (*(byte*)current_buffer != search_byte) {\n      current_buffer++;\n      if (((uint)current_buffer & 3) == 0) {\n        goto buffer_aligned;\n      }\n      if (search_end == (uint*)0) {\n        return (uint*)0;\n      }\n      search_end--;\n    }\n    return current_buffer;\n  }\n  else {\n    buffer_aligned:\n    if ((uint*)0x3 < search_bytes) {\n      uint search_value = (buffer_length & 0xff) << 8 | search_byte;\n      uint* search_end = search_bytes - 4;\n      while (search_bytes > search_end) {\n        uint buffer_value = *current_buffer ^ (search_value | search_value << 0x10);\n        current_buffer++;\n        if ((buffer_value + 0xfefefeff & ~buffer_value & 0x80808080) != 0) {\n          search_bytes--;\n          if (search_bytes == (uint*)0) {\n            return (uint*)0;\n          }\n          current_buffer = current_buffer - (buffer_length >> 2) + 1;\n          goto buffer_aligned;\n        }\n        search_bytes--;\n      }\n    }\n    if (*current_buffer != search_byte) {\n      return (uint*)0;\n    }\n    return current_buffer;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_byte_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_flag_if_param_1_equals_4_0800177c",
                "param_1": "value_to_compare",
                "*DAT_080017b0": "*flag"
            },
            "code": "void set_flag_if_param_1_equals_4_0800177c(int param_1) {\n  if (param_1 == 4) {\n    *DAT_080017b0 = *DAT_080017b0 | 4;\n  }\n  else {\n    *DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_1_equals_4_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "process_input_and_return_080017b4",
                "process_input_data_08004f78": "process_input_data"
            },
            "code": "void process_input_and_return_080017b4(void)\n{\n    process_input_data(0);\n    return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "process_input_and_return_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_values_08005598",
                "PTR_DAT_080055e8": "data_pointer",
                "DAT_080055ec": "data_value_1",
                "PTR_s____src_main_c_080055f0": "infinite_loop_pointer",
                "check_input_values_0800438a": "check_input_values"
            },
            "code": "void initialize_values_08005598(void)\n{\n  int input_check_result;\n  int* PTR_DAT_080055e8 = PTR_DAT_080055e8;\n  *(PTR_DAT_080055e8) = DAT_080055ec;\n  *(PTR_DAT_080055e8 + 1) = 0x1c200;\n  *(PTR_DAT_080055e8 + 2) = 0;\n  *(PTR_DAT_080055e8 + 3) = 0;\n  *(PTR_DAT_080055e8 + 4) = 0;\n  *(PTR_DAT_080055e8 + 5) = 0xc;\n  *(PTR_DAT_080055e8 + 6) = 0;\n  *(PTR_DAT_080055e8 + 7) = 0;\n  input_check_result = check_input_values_0800438a(PTR_DAT_080055e8);\n  if (input_check_result != 0) {\n    infinite_loop_08005674(PTR_s____src_main_c_080055f0,0x1ed);\n  }\n  return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_values_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "check_input_string_08001030_08001030",
                "in_CY": "input_char"
            },
            "code": "bool check_input_string_08001030_08001030(void)\n{\n  char input_char;\n  combine_params_and_reverse_order_08000fc8();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "check_input_string_08001030_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "code": "typedef unsigned long long u64;\n\nu64 calculate_result_080011ec(u64 input1, u64 input2, u64 input3, u64 input4)\n{\n    if ((input4 == 0) && (input3 == 0)) {\n        if (input2 != 0 || input1 != 0) {\n            input2 = -1;\n            input1 = -1;\n        }\n        return (((u64)input2) << 32) | input1;\n    }\n    u64 result = calculate_helper();\n    return result;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_result_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "validate_input_and_return_08004f3c",
                "param_1": "input_ptr",
                "param_2": "input_flag"
            },
            "code": "void validate_input_and_return_08004f3c(void* input_ptr, int input_value, short input_flag){\n    validate_input(PTR_DAT_08004f5c, input_ptr, input_value, input_flag);\n    return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  do_nothing_with_ptr_data_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        do_nothing_with_ptr_data_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            reverse_copy_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          do_nothing_with_ptr_data_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          reverse_copy_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        reverse_copy_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    do_nothing_with_ptr_data_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    do_nothing_with_ptr_data_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_08009a18",
                "FUN_080090a8",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "check_and_get_result_08002640",
                "param_1": "pointer_to_pointer",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "max_distance",
                "param_6": "param_6",
                "iVar1": "distance",
                "uVar2": "result"
            },
            "code": "undefined4 check_and_get_result_08002640(uint **pointer_to_pointer, byte param_2, undefined2 param_3, short param_4, uint max_distance, int param_6) {\n  int distance = 3;\n  undefined4 result;\n  **pointer_to_pointer = **pointer_to_pointer | 0x100;\n  do {\n    if ((~(*pointer_to_pointer)[5] & 1) == 0) {\n      distance = 0;\n      goto LAB_0800270a;\n    }\n  } while ((max_distance == 0xffffffff) ||\n          ((max_distance != 0 && (distance = get_value_from_pointer_080015a0(), (uint)(distance - param_6) <= max_distance))));\n  pointer_to_pointer[0xc] = (uint *)0x0;\n  *(undefined *)((int)pointer_to_pointer + 0x3d) = 0x20;\n  *(undefined *)((int)pointer_to_pointer + 0x3e) = 0;\n  *(undefined *)(pointer_to_pointer + 0xf) = 0;\nLAB_0800270a:\n  if (distance == 0) {\n    (*pointer_to_pointer)[4] = param_2 & 0xfe;\n    int condition_check = check_condition(pointer_to_pointer, DAT_080027f0, max_distance, param_6);\n    if (condition_check == 0) {\n      int flag_check = check_flag_and_get_result(pointer_to_pointer, max_distance, param_6, (*pointer_to_pointer)[6]);\n      if (flag_check == 0) {\n        if (param_4 == 1) {\n          (*pointer_to_pointer)[4] = (uint)(byte)param_3;\n        }\n        else {\n          (*pointer_to_pointer)[4] = (uint)(byte)((ushort)param_3 >> 8);\n          int flag_check_2 = check_flag_and_get_result(pointer_to_pointer, max_distance, param_6);\n          if (flag_check_2 != 0) {\n            if (pointer_to_pointer[0x10] == (uint *)0x4) {\n              **pointer_to_pointer = **pointer_to_pointer | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*pointer_to_pointer)[4] = (uint)(byte)param_3;\n        }\n        result = 0;\n      }\n      else if (pointer_to_pointer[0x10] == (uint *)0x4) {\n        **pointer_to_pointer = **pointer_to_pointer | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (pointer_to_pointer[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_get_result_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_overlap_080008fc",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "uVar1": "diff_x",
                "bVar2": "any_zero",
                "bVar3": "x_overlap",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_overlap_080008fc(uint x1, uint y1, uint x2, uint y2)\n{\n  bool any_zero = (x1 | (y1 << 1)) == 0;\n  if (any_zero) {\n    any_zero = (x2 | (y2 << 1)) == 0;\n  }\n  if (!any_zero) {\n    any_zero = x1 == x2 && y1 == y2;\n  }\n  if (any_zero) {\n    return 0;\n  }\n  uint diff_x = x1 ^ x2;\n  bool same_x = diff_x == 0;\n  if (-1 < (int)diff_x) {\n    same_x = x1 == x2;\n  }\n  bool x_overlap = -1 < (int)diff_x && x2 <= x1;\n  if (same_x) {\n    x_overlap = x2 <= x1;\n  }\n  int sign_y2 = (int)y2 >> 0x1f;\n  if (!x_overlap) {\n    sign_y2 = ~sign_y2;\n  }\n  return sign_y2 | 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_overlap_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "check_for_overlap_08000988",
                "param_1": "input_param"
            },
            "code": "undefined4 check_for_overlap_08000988(undefined4 input_param)\n{\n  check_overlap_080008fc();\n  return input_param;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000978",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac"
            ],
            "imported": false,
            "current_name": "check_for_overlap_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_parameter_for_function_08001714",
                "param_1": "parameter",
                "setParam_080015b4": "set_parameter_value"
            },
            "code": "void set_parameter_for_function_08001714(void* parameter)\n{\n  set_parameter_value(parameter);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "set_parameter_for_function_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "clear_string_at_pointer_08005dfc",
                "param_1": "string_ptr",
                "param_2": "string_length",
                "param_3": "arg_2",
                "param_4": "arg_3",
                "local_80": "local_string_ptr",
                "local_6c": "local_max_length",
                "local_78": "local_78",
                "uStack_74": "arg_4",
                "local_70": "arg_5",
                "uStack_8": "arg_2",
                "uStack_4": "arg_3"
            },
            "code": "void clear_string_at_pointer_08005dfc(char *string_ptr, int string_length, int arg_2, int arg_3)\n{\n  char *local_string_ptr [2];\n  int local_max_length;\n  int local_78;\n  int arg_4;\n  int arg_5;\n  \n  local_max_length = 0x7fffffff;\n  local_78 = 0x7fffffff;\n  arg_4 = DAT_08005e3c;\n  local_string_ptr[0] = string_ptr;\n  arg_5 = string_ptr;\n  FUNC_08005e9c(*(int *)PTR_PTR_DAT_08005e38, local_string_ptr, string_length, &arg_2);\n  *local_string_ptr[0] = 0;\n  return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clear_string_at_pointer_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "numerator_array",
                "param_2": "denominator_array",
                "uVar1": "quotient",
                "puVar2": "numerator_ptr",
                "iVar3": "carry",
                "iVar4": "i",
                "iVar5": "denominator_length",
                "uVar6": "quotient",
                "puVar7": "denominator_ptr",
                "puVar8": "numerator_array",
                "puVar9": "denominator_ptr2",
                "puVar11": "numerator_ptr2",
                "puVar12": "numerator_ptr3"
            },
            "code": "uint calculate_division_080078c0(uint numerator_array[], uint denominator_array[], int numerator_length, int denominator_length) {\n  uint quotient = 0;\n  uint *denominator_ptr = denominator_array + denominator_length - 1;\n  uint *numerator_ptr = numerator_array + denominator_length - 1;\n  if (*numerator_ptr >= *denominator_ptr) {\n    quotient = *numerator_ptr / (*denominator_ptr + 1);\n    uint carry = 0;\n    int i = 0;\n    do {\n      uint temp = quotient * numerator_array[i] + carry;\n      uint carry2 = quotient * (numerator_array[i] >> 16) + (temp >> 16);\n      temp = (denominator_array[i] & 0xffff) * carry2 + (temp & 0xffff) + (denominator_array[i] >> 16) * quotient + (carry2 >> 16);\n      carry = (numerator_array[i] & 0xffff) - (temp & 0xffff);\n      carry2 = (numerator_array[i] >> 16) - (carry2 & 0xffff) + (temp >> 16);\n      numerator_array[i] = (temp & 0xffff) | (carry2 << 16);\n      carry = carry2 >> 16;\n      i++;\n    } while (i <= denominator_length - 1);\n    if (numerator_array[denominator_length - 1] == 0) {\n      if ((numerator_array < numerator_array + numerator_length - 2) && (numerator_array[numerator_length - 2] == 0)) {\n        uint *numerator_ptr2 = numerator_array + numerator_length - 3;\n        do {\n          denominator_length--;\n          if (numerator_ptr2 <= numerator_array) break;\n          uint temp = *numerator_ptr2;\n          numerator_ptr2--;\n        } while (temp == 0);\n      }\n      *(int *)(numerator_array + numerator_length - 4) = denominator_length - 1;\n    }\n  }\n  int comparison_result = compare_arrays_080094f8();\n  if (comparison_result >= 0) {\n    quotient++;\n    uint carry = 0;\n    uint *numerator_ptr2 = numerator_array;\n    uint *denominator_ptr2 = denominator_array + 1;\n    do {\n      uint temp = (denominator_array[i] & 0xffff) * quotient + (numerator_array[i] & 0xffff) + carry;\n      uint carry2 = (numerator_array[i] >> 16) - (denominator_array[i] >> 16) + (temp >> 16);\n      numerator_array[i] = (temp & 0xffff) | (carry2 << 16);\n      carry = carry2 >> 16;\n      numerator_ptr2++;\n      denominator_ptr2++;\n    } while (denominator_ptr2 <= denominator_array + denominator_length - 1);\n    if (numerator_array[denominator_length - 1] == 0) {\n      if ((numerator_array < numerator_array + denominator_length - 1) && (numerator_array[denominator_length - 2] == 0)) {\n        uint *numerator_ptr3 = numerator_array + denominator_length - 2;\n        do {\n          denominator_length--;\n          if (numerator_ptr3 <= numerator_array) break;\n          uint temp = *numerator_ptr3;\n          numerator_ptr3--;\n        } while (temp == 0);\n      }\n      *(int *)(numerator_array + numerator_length - 4) = denominator_length - 1;\n    }\n  }\n  return quotient;\n}",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_division_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_output_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "abs_difference",
                "uVar3": "output",
                "uVar4": "abs_input_4",
                "uVar5": "abs_input_2",
                "uVar6": "concatenated_data",
                "DAT_080059bc": "upper_32_bits_of_concatenated_data",
                "DAT_080059b8": "lower_32_bits_of_concatenated_data",
                "DAT_080059e8": "sign_bit_mask",
                "DAT_080059f0": "function_with_no_input",
                "DAT_080059b0": "constant_output_1",
                "DAT_080059a0": "constant_output_2",
                "DAT_080059d8": "constant_output_3",
                "DAT_080059d0": "constant_output_4",
                "DAT_080059c8": "constant_output_5",
                "FUNC_0800015c": "function_with_four_inputs",
                "FUNC_0800071c": "function_with_five_inputs",
                "FUNC_08000158": "function_with_four_inputs_and_two_outputs",
                "do_nothing_08005d0c": "do_nothing"
            },
            "code": "uint calculate_output_thunk_08005838(uint input_1, uint input_2, uint input_3, uint input_4) {\n  int difference;\n  uint output;\n  uint abs_input_3;\n  uint abs_input_1;\n  uint abs_input_4;\n  uint abs_input_2;\n  uint DAT_080059e8;\n  uint input_4_positive;\n  uint input_2_positive;\n  uint input_1_positive;\n  uint input_3_positive;\n  uint concatenated_data;\n  uint abs_difference;\n\n  concatenated_data = (DAT_080059bc << 32) | DAT_080059b8;\n  abs_input_3 = input_3 & 0x7fffffff;\n  abs_input_1 = input_1 & 0x7fffffff;\n  input_4_positive = input_4 & 0x7fffffff;\n  input_2_positive = input_2 & 0x7fffffff;\n  abs_input_4 = input_4_positive;\n  abs_input_2 = input_2_positive;\n  abs_input_4 |= (-input_3 | input_3) >> 0x1f;\n  abs_input_2 |= (-input_1 | input_1) >> 0x1f;\n  DAT_080059e8 = DAT_080059e8;\n  if (DAT_080059e8 < abs_input_4 || DAT_080059e8 < abs_input_2) {\n    output = FUNC_0800015c(input_3, input_4, input_1, input_2);\n    return output;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    output = FUNC_080059f0();\n    return output;\n  }\n  difference = input_4 - input_3;\n  abs_difference = (uint)abs(difference);\n  if (abs_difference < 61) {\n    if (input_1 == 0 && input_2 == 0) {\n      if (((int)input_4 >> 31 & 2U) == 2) {\n        output = DAT_080059b0;\n        return output;\n      }\n      if (((int)input_4 >> 31 & 3U) != 3) {\n        output = input_1;\n        return output;\n      }\n      output = 0;\n      return output;\n    }\n    if (input_4 == DAT_080059e8) {\n      if (input_2 == input_4) {\n        if (((int)input_4 >> 31 & 2U) == 2) {\n          output = DAT_080059e0;\n          return output;\n        }\n        if (((int)input_4 >> 31 & 3U) == 3) {\n          output = DAT_080059d8;\n          return output;\n        }\n        if (((int)input_4 >> 31 & 3U) == 1) {\n          output = DAT_080059d0;\n          return output;\n        }\n        output = DAT_080059c8;\n        return output;\n      }\n      if (((int)input_4 >> 31 & 2U) == 2) {\n        output = DAT_080059b0;\n        return output;\n      }\n      if (((int)input_4 >> 31 & 3U) == 3) {\n        output = DAT_080059a0;\n        return output;\n      }\n      if (((int)input_4 >> 31 & 3U) == 1) {\n        output = 0;\n        return output;\n      }\n      output = 0;\n      return output;\n    }\n    if (input_2 != DAT_080059e8) {\n      FUNC_0800071c(input_1, input_2, input_3, input_4, input_4);\n      do_nothing_08005d0c();\n      concatenated_data = FUNC_080059f0();\n      abs_difference = (uint)(concatenated_data >> 32);\n      output = (uint)concatenated_data;\n      if (((int)input_4 >> 31 & 3U) == 1) {\n        return output;\n      }\n      if (((int)input_4 >> 31 & 3U) == 2) {\n        concatenated_data = FUNC_08000158(output, abs_difference, DAT_080059a8, DAT_080059ac);\n        output = FUNC_08000158(DAT_080059b0, DAT_080059b4, (uint)concatenated_data, (uint)(concatenated_data >> 32));\n        return output;\n      }\n      if (((int)input_4 >> 31 & 3U) == 0) {\n        return output;\n      }\n      concatenated_data = FUNC_08000158(output, abs_difference, DAT_080059a8, DAT_080059ac);\n      output = FUNC_08000158((uint)concatenated_data, (uint)(concatenated_data >> 32), DAT_080059b0, DAT_080059b4);\n      return output;\n    }\n  }\n  input_3_positive = input_3 & 0x7fffffff;\n  if ((int)input_2 >= 0) {\n    output = DAT_080059b8;\n  } else {\n    output = DAT_080059c0;\n  }\n  return output;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_output_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "input_value",
                "uVar1": "sign_bit",
                "uVar2": "abs_value",
                "uVar3": "leading_zeros_count",
                "iVar4": "shift_amount",
                "uVar5": "shifted_value",
                "uVar6": "high_bits",
                "in_r12": "low_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero"
            },
            "code": "ulonglong calculate_shifted_value_080003f4(uint input_value)\n{\n  uint sign_bit;\n  uint abs_value;\n  uint leading_zeros_count;\n  int shift_amount;\n  uint shifted_value;\n  uint high_bits;\n  uint low_bits;\n  bool is_negative;\n  bool is_zero = (input_value == 0);\n  if (is_zero) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_value = input_value;\n  is_negative = ((int)sign_bit < 0);\n  if (is_negative) {\n    abs_value = -input_value;\n  }\n  shifted_value = 0;\n  leading_zeros_count = count_leading_zeroes(abs_value);\n  shift_amount = leading_zeros_count + 21;\n  if (shift_amount < 32) {\n    bool is_carry = SCARRY4(leading_zeros_count, 12);\n    shift_amount++;\n    is_negative = (shift_amount < 0);\n    is_zero = (shift_amount == 0);\n    if (!is_zero && is_negative == is_carry) {\n      shifted_value = abs_value << (shift_amount & 0xff);\n      abs_value = abs_value >> ((0xcU - shift_amount) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != SCARRY4(shift_amount, 0xc)) {\n    high_bits = 0x20 - shift_amount;\n  }\n  shifted_value = abs_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != SCARRY4(shift_amount, 0xc)) {\n    low_bits = 0U >> ((0x20 - shift_amount) & 0xff);\n    shifted_value = shifted_value | low_bits;\n  }\n  if (is_zero || is_negative != SCARRY4(shift_amount, 0xc)) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if (shift_amount < 0x433) {\n    return CONCAT44(shifted_value + ((0x432 - shift_amount) * 0x100000) | sign_bit, 0);\n  }\n  uint inverted_shift_amount = ~(0x432 - shift_amount);\n  if (inverted_shift_amount > 0x1e) {\n    return (CONCAT44(input_value, shifted_value >> ((inverted_shift_amount - 0x1f) & 0xff))) & 0x80000000ffffffff;\n  }\n  shift_amount = inverted_shift_amount - 0x13;\n  if (shift_amount == 0 || (shift_amount < 0) != SCARRY4(inverted_shift_amount - 0x1f, 0xc)) {\n    inverted_shift_amount++;\n    return CONCAT44(sign_bit | (shifted_value >> (inverted_shift_amount & 0xff)), abs_value >> (inverted_shift_amount & 0xff) | (shifted_value << ((0x20 - inverted_shift_amount) & 0xff)));\n  }\n  return (CONCAT44(input_value, abs_value >> ((0x20 - (0xcU - shift_amount)) & 0xff) | (shifted_value << ((0xcU - shift_amount) & 0xff)))) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    extract_data_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = check_for_non_overlapping_memory_regions_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = calculate_shifts_and_bits_08009630_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = calculate_shifted_value_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = calculate_shifted_value_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = calculateValue_0800119c();\n  iVar10 = check_if_string_terminated_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = calculate_shifted_value_080003f4(local_74);\n    iVar10 = check_for_non_overlapping_memory_regions_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = check_if_string_terminated_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)allocate_or_get_existing_data_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)allocate_or_get_existing_data_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = check_if_string_terminated_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = calculate_shifted_value_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = calculate_shifted_value_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = calculate_shifted_value_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = calculateValue_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = calculate_shifted_value_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = calculateValue_0800119c();\n            uVar23 = calculate_shifted_value_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = check_if_string_terminated_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = check_if_string_terminated_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = check_if_string_terminated_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = check_if_string_terminated_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = calculateValue_0800119c();\n              uVar23 = calculate_shifted_value_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = check_if_string_terminated_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = check_if_string_terminated_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = check_if_string_terminated_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = check_if_string_terminated_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    extract_data_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = calculateValue_0800119c();\n        uVar21 = calculate_shifted_value_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = check_for_non_overlapping_memory_regions_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = calculateValue_0800119c();\n            uVar22 = calculate_shifted_value_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = check_for_non_overlapping_memory_regions_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = check_if_string_terminated_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = check_for_non_overlapping_memory_regions_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = check_for_overlap_and_return_true_if_not_overlapping_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = initialize_data_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = hash_calculator_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = hash_calculator_080093a4(param_1,uVar12,iVar9);\n          uVar8 = calculate_hash_08009258(param_1,uVar12,uVar3);\n          extract_data_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = hash_calculator_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = initialize_data_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = hash_calculator_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = count_left_shifts_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = unpack_bits_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = unpack_bits_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = compare_arrays_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = calculate_polynomial_08009120(param_1,uVar5,5);\n        iVar9 = compare_arrays_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = calculate_division_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = unpack_bits_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = allocate_or_get_existing_data_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        copy_memory_block_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = unpack_bits_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = calculate_division_080078c0(uVar3,uVar5);\n      iVar13 = compare_arrays_080094f8(uVar3,local_80);\n      iVar10 = compare_and_allocate_data_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = compare_arrays_080094f8(uVar3);\n        extract_data_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      extract_data_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = unpack_bits_08009444(param_1,uVar3,1);\n          iVar13 = compare_arrays_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = unpack_bits_08009444(param_1,uVar3,1);\n    iVar9 = compare_arrays_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    extract_data_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      extract_data_0800910c(param_1);\n    }\n  }\n  extract_data_0800910c(param_1,uVar12);\nLAB_08008294:\n  extract_data_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08001084",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800910c",
                "FUN_080093a4",
                "FUN_08000998",
                "FUN_08009444",
                "FUN_08009120",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_08009530",
                "FUN_080078c0",
                "FUN_08009258",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_08000158",
                "FUN_080009d4",
                "FUN_0800071c",
                "FUN_080094f8",
                "FUN_080090c0",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "set_bits_0800166c",
                "param_1": "num_bits",
                "param_2": "value",
                "param_3": "mask",
                "uVar1": "remaining_bits",
                "mask1": "mask_first",
                "mask2": "mask_second"
            },
            "code": "uint set_bits_0800166c(uint num_bits, uint value, uint mask) {\n    uint remaining_bits = 7 - (num_bits & 0x07);\n    if (remaining_bits > 4) {\n        remaining_bits = 4;\n    }\n    if ((num_bits + 4) < 7) {\n        num_bits = 0;\n    }\n    else {\n        num_bits -= 3;\n    }\n    uint mask1 = ~(-1 << (num_bits & 0xff));\n    uint mask2 = ~(-1 << (remaining_bits & 0xff));\n    return (mask & ~mask1) | ((value & mask2) << (num_bits & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "set_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_bit_0800360c",
                "param_1": "pointer_to_pointer",
                "*param_1": "pointer",
                "(*param_1)[3]": "pointer[3]",
                "**param_1": "*pointer"
            },
            "code": "uint set_bit_0800360c(uint **pointer_to_pointer) {\n    uint *pointer = *pointer_to_pointer;\n    pointer[3] |= 1;\n    *pointer |= 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "write_bytes_to_buffer_08005d68",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "count",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "remaining_bytes",
                "uVar4": "repeated_byte",
                "bVar5": "is_done"
            },
            "code": "void write_bytes_to_buffer_08005d68(uint32_t* buffer, uint8_t byte, uint32_t count)\n{\n    uint32_t* current_word;\n    uint32_t remaining_bytes;\n    uint32_t repeated_byte;\n    bool is_aligned = ((uint32_t)buffer & 3) == 0;\n\n    if (!is_aligned)\n    {\n        remaining_bytes = count - 1;\n        current_word = buffer;\n        if (count == 0) return;\n        while (true)\n        {\n            buffer = (uint32_t*)((int)current_word + 1);\n            *(uint8_t*)current_word = byte;\n            count = remaining_bytes;\n            if (((uint32_t)buffer & 3) == 0) break;\n            bool is_done = remaining_bytes == 0;\n            remaining_bytes--;\n            current_word = buffer;\n            if (is_done) return;\n        }\n    }\n\n    if (count > 3)\n    {\n        repeated_byte = (byte << 24) | (byte << 16) | (byte << 8) | byte;\n        current_word = buffer;\n        if (count > 0x10)\n        {\n            remaining_bytes = count - 0x10;\n            current_word += 4;\n            do {\n                current_word[-4] = repeated_byte;\n                current_word[-3] = repeated_byte;\n                current_word[-2] = repeated_byte;\n                current_word[-1] = repeated_byte;\n                current_word += 4;\n            } while (current_word != (uint32_t*)((int)buffer + (remaining_bytes & 0xFFFFFFF0) + 0x20));\n            count &= 0xF;\n            buffer += ((remaining_bytes >> 4) + 1) * 4;\n            current_word = buffer;\n            if (count < 4) goto write_remaining_bytes;\n        }\n\n        do {\n            count -= 4;\n            *buffer = repeated_byte;\n            buffer++;\n        } while (count > 3);\n\n        current_word = (uint32_t*)((int)buffer + ((count - 4) & 0xFFFFFFFC) + 4);\n        count &= 3;\n    }\n\nwrite_remaining_bytes:\n    if (count != 0)\n    {\n        current_word = buffer;\n        do {\n            uint32_t* next_word = (uint32_t*)((int)current_word + 1);\n            *(uint8_t*)current_word = byte;\n            current_word = next_word;\n        } while ((uint32_t*)(count + (int)buffer) != current_word);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "imported": false,
            "current_name": "write_bytes_to_buffer_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "process_data_080017c4",
                "param_1": "bitfield_array",
                "param_2": "data_array",
                "local_10": "bit_offset",
                "local_c": "bitfield_index",
                "uVar1": "bit_index",
                "uVar2": "bit_offset",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "data_value",
                "puVar6": "bitfield_ptr",
                "iVar7": "data_index"
            },
            "code": "void process_data_080017c4(uint *bitfield_array, uint *data_array)\n{\n    uint bit_mask;\n    uint data_value;\n    uint bit_value;\n    uint bit_index;\n    uint bit_offset;\n    uint *bitfield_ptr;\n    uint data_index = 0;\n    uint bitfield_index = 0;\n    do {\n        if (bitfield_index > 0xf) {\n            return;\n        }\n        bit_mask = 1 << (bitfield_index & 0xff);\n        bit_value = *data_array & bit_mask;\n        if (bit_value == bit_mask) {\n            data_value = data_array[1];\n            if (data_value == 0x12) {\n                bit_offset = data_array[3] + 0xc;\n            }\n            else if (data_value < 0x13) {\n                if (data_value == 2) {\n                    bit_offset = data_array[3] + 8;\n                }\n                else if (data_value < 3) {\n                    if (data_value == 0) goto LAB_08001882;\n                    if (data_value == 1) {\n                        bit_offset = data_array[3];\n                    }\n                }\n                else if (data_value == 3) {\n                    bit_offset = 0;\n                }\n                else if (data_value == 0x11) {\n                    bit_offset = data_array[3] + 4;\n                }\n            }\n            else if (((data_value == PTR_DAT_08001a4c) || (((bit_index = PTR_DAT_08001a50, bit_offset = PTR_DAT_08001a54, PTR_DAT_08001a4c < data_value && (bit_index = PTR_DAT_08001a5c, bit_offset = PTR_DAT_08001a60, data_value == PTR_DAT_08001a58)) || (data_value == bit_index)))) || (data_value == bit_offset)) {\nLAB_08001882:\n                if (data_array[2] == 0) {\n                    bit_offset = 4;\n                }\n                else if (data_array[2] == 1) {\n                    bit_offset = 8;\n                    bitfield_array[4] = bit_mask;\n                }\n                else {\n                    bit_offset = 8;\n                    bitfield_array[5] = bit_mask;\n                }\n            }\n            if (bit_value < 0x100) {\n                bit_index = bitfield_index << 2;\n                bitfield_ptr = bitfield_array;\n            }\n            else {\n                bitfield_ptr = bitfield_array + 1;\n                bit_index = (bitfield_index - 8) * 4;\n            }\n            *bitfield_ptr = *bitfield_ptr & ~(0xf << (bit_index & 0xff)) | bit_offset << (bit_index & 0xff);\n            if ((data_array[1] & 0x10000000) != 0) {\n                *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n                if (bitfield_array == PTR_DAT_08001a6c) {\n                    data_index = 0;\n                }\n                else if (bitfield_array == PTR_DAT_08001a70) {\n                    data_index = 1;\n                }\n                else if (bitfield_array == PTR_DAT_08001a74) {\n                    data_index = 2;\n                }\n                else if (bitfield_array == PTR_DAT_08001a78) {\n                    data_index = 3;\n                }\n                else {\n                    data_index = 4;\n                }\n                *(uint *)(PTR_DAT_08001a68 + ((bitfield_index >> 2) + 2) * 4) = data_index << ((bitfield_index & 3) << 2) | ~(0xf << ((bitfield_index & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((bitfield_index >> 2) + 2) * 4);\n                if ((data_array[1] & 0x10000) == 0) {\n                    *PTR_DAT_08001a7c = ~bit_value & *PTR_DAT_08001a7c;\n                }\n                else {\n                    *PTR_DAT_08001a7c = bit_value | *PTR_DAT_08001a7c;\n                }\n                if ((data_array[1] & 0x20000) == 0) {\n                    PTR_DAT_08001a7c[1] = ~bit_value & PTR_DAT_08001a7c[1];\n                }\n                else {\n                    PTR_DAT_08001a7c[1] = bit_value | PTR_DAT_08001a7c[1];\n                }\n                if ((data_array[1] & 0x100000) == 0) {\n                    PTR_DAT_08001a7c[2] = ~bit_value & PTR_DAT_08001a7c[2];\n                }\n                else {\n                    PTR_DAT_08001a7c[2] = bit_value | PTR_DAT_08001a7c[2];\n                }\n                if ((data_array[1] & 0x200000) == 0) {\n                    PTR_DAT_08001a7c[3] = ~bit_value & PTR_DAT_08001a7c[3];\n                }\n                else {\n                    PTR_DAT_08001a7c[3] = bit_value | PTR_DAT_08001a7c[3];\n                }\n            }\n        }\n        bitfield_index++;\n    } while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "imported": false,
            "current_name": "process_data_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "check_values_080035a4",
                "param_1": "ptr_values",
                "uVar1": "result",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(ptr_values + 61)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)(ptr_values + 61)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(ptr_values + 15)",
                "do_nothing_080035fa": "perform_nothing",
                "*param_1": "*ptr_values"
            },
            "code": "int check_values_080035a4(int *ptr_values)\n{\n  int result;\n  if (ptr_values == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(char *)(ptr_values + 61) == '\\0') {\n      *(char *)(ptr_values + 15) = '\\0';\n      perform_nothing(ptr_values);\n    }\n    *(char *)(ptr_values + 61) = 2;\n    set_values(*ptr_values, ptr_values + 1);\n    *(char *)(ptr_values + 61) = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_values_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "update_bit_080041ea",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*bit_array",
                "1 << (param_2 & 0xff)": "1u << (bit_index & 0xff)",
                "~(1 << (param_2 & 0xff))": "~(1u << (bit_index & 0xff))"
            },
            "code": "void update_bit_080041ea(uint32_t *bit_array, uint32_t bit_index, uint32_t bit_value) {\n\tuint32_t mask = ~(1u << (bit_index & 0xff));\n\t*bit_array = (*bit_array & mask) | (bit_value << (bit_index & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "update_bit_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "calculate_hashes_and_store_08004ae0",
                "param_1": "hashes",
                "local_2c": "buffer_0",
                "local_2b": "buffer_13",
                "local_2a": "buffer_12",
                "local_29": "buffer_11",
                "local_28": "buffer_10",
                "local_27": "buffer_9",
                "local_26": "buffer_8",
                "local_25": "buffer_7",
                "local_24": "buffer_6",
                "local_23": "buffer_5",
                "local_22": "buffer_4",
                "local_21": "buffer_3",
                "local_20": "buffer_2",
                "local_1f": "buffer_1",
                "local_1e": "buffer_6_short",
                "local_1c": "buffer_4_short",
                "local_1a": "buffer_2_short",
                "local_18": "buffer_0_short",
                "local_16": "buffer_8_short",
                "local_14": "buffer_10_short"
            },
            "code": "void calculate_hashes_and_store_08004ae0(undefined4 *hashes)\n{\n  undefined4 hash_1;\n  undefined4 hash_2;\n  undefined4 hash_3;\n  undefined4 hash_4;\n  undefined4 hash_5;\n  undefined4 hash_6;\n  undefined4 hash_7;\n  undefined buffer[14];\n  short buffer_1;\n  short buffer_2;\n  short buffer_3;\n  short buffer_4;\n  short buffer_5;\n  short buffer_6;\n  (**(code **)PTR_DAT_08004bd4)(0xd0,0x3b,buffer,0xe);\n  buffer_6 = CONCAT11(buffer[10], buffer[9]);\n  buffer_5 = CONCAT11(buffer[8], buffer[7]);\n  buffer_4 = CONCAT11(buffer[6], buffer[5]);\n  buffer_3 = CONCAT11(buffer[4], buffer[3]);\n  buffer_2 = CONCAT11(buffer[2], buffer[1]);\n  buffer_1 = CONCAT11(buffer[0], buffer[13]);\n  hash_1 = calculate_hash_08000c10((int)CONCAT11(buffer[10], buffer[11]));\n  hashes[0] = hash_1;\n  hash_2 = calculate_hash_08000c10((int)buffer_6);\n  hashes[1] = hash_2;\n  hash_3 = calculate_hash_08000c10((int)buffer_5);\n  hashes[2] = hash_3;\n  hash_4 = calculate_hash_08000c10((int)buffer_4);\n  hashes[3] = hash_4;\n  hash_5 = calculate_hash_08000c10((int)buffer_3);\n  hashes[4] = hash_5;\n  hash_6 = calculate_hash_08000c10((int)buffer_2);\n  hashes[5] = hash_6;\n  hash_7 = calculate_hash_08000c10((int)buffer_1);\n  hashes[6] = hash_7;\n  return;\n}",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_hashes_and_store_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "decode_uint_08001044",
                "param_1": "encoded_value",
                "uVar1": "shift_amount"
            },
            "code": "uint decode_uint_08001044(uint encoded_value)\n{\n  uint shifted_value;\n  uint shift_amount;\n  if (((encoded_value & 0x80000000) != 0) || (encoded_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((encoded_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    shifted_value = (encoded_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    return shifted_value;\n  }\n  if ((shift_amount == 0xffffff9f) && ((encoded_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_uint_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "unpack_bits_08009444",
                "param_1": "data",
                "param_2": "output",
                "param_3": "num_bits",
                "iVar1": "temp1",
                "iVar2": "current_bit",
                "iVar3": "current_word",
                "uVar4": "old_data",
                "iVar5": "data_ptr_2",
                "iVar6": "temp2",
                "puVar7": "output_ptr",
                "puVar8": "data_ptr",
                "puVar9": "current_ptr",
                "puVar10": "next_ptr",
                "puVar11": "end_ptr",
                "puVar12": "start_ptr",
                "iVar13": "total_words",
                "iVar12": "num_full_words",
                "uVar14": "carry",
                "allocate_or_get_existing_data_080090c0": "allocate_or_get_existing_data"
            },
            "code": "void unpack_bits_08009444(int data, uint32_t *output, uint32_t num_bits) {\n  int num_words = output[4];\n  int num_full_words = (int)num_bits >> 5;\n  int total_words = num_full_words + num_words + 1;\n  int current_word = output[1];\n  int current_bit = output[2];\n  \n  if (current_bit < total_words) {\n    do {\n      current_bit *= 2;\n      current_word = current_word + 1;\n    } while (total_words != current_bit && total_words + current_bit < 0 == SBORROW4(total_words,current_bit));\n  }\n  \n  int output_data = allocate_or_get_existing_data_080090c0(data, current_word);\n  uint32_t *output_ptr = (uint32_t *)(output_data + 0x14);\n  \n  if (num_full_words > 0) {\n    uint32_t *end_ptr = output_ptr + num_full_words;\n    uint32_t *current_ptr = output_ptr;\n    do {\n      current_ptr = current_ptr + 1;\n      *current_ptr = 0;\n    } while (current_ptr != end_ptr);\n  }\n  \n  num_words = output[4];\n  uint32_t *data_ptr = output + 5;\n  num_bits = num_bits & 0x1f;\n  \n  if (num_bits == 0) {\n    output_ptr = output_ptr - 1;\n    uint32_t *end_ptr = data_ptr + num_words;\n    do {\n      output_ptr = output_ptr + 1;\n      *output_ptr = *data_ptr;\n      data_ptr = data_ptr + 1;\n    } while (data_ptr < end_ptr);\n  }\n  else {\n    uint32_t carry = 0;\n    uint32_t *end_ptr = data_ptr + num_words;\n    uint32_t *current_ptr = output_ptr;\n    do {\n      *current_ptr = *data_ptr << num_bits | carry;\n      uint32_t *next_ptr = data_ptr + 1;\n      carry = *data_ptr >> (0x20 - num_bits & 0xff);\n      current_ptr = current_ptr + 1;\n      data_ptr = next_ptr;\n    } while (data_ptr < end_ptr);\n    current_ptr[1] = carry;\n    if (carry != 0) {\n      total_words = num_full_words + num_words + 2;\n    }\n  }\n  \n  int data_ptr_2 = *(int *)(data + 0x4c);\n  current_word = output[1];\n  uint32_t old_data = *(uint32_t *)(data_ptr_2 + current_word * 4);\n  *(int *)(output_data + 0x10) = total_words - 1;\n  *output = old_data;\n  *(uint32_t **)(data_ptr_2 + current_word * 4) = output;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "unpack_bits_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_bits_from_address_080015fc",
                "DAT_08001614": "PTR_data_address",
                "uint": "unsigned int",
                "address": "data_address",
                "bits": "bits_to_return"
            },
            "code": "uint get_bits_from_address_080015fc(void)\n{\n    uint* address = (uint*)(DAT_08001614 + 0xc);\n    uint bits = (*address >> 8) & 7;\n    return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_bits_from_address_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "validate_input_08004436",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "data_len",
                "param_4": "max_data_len",
                "iVar1": "start_time",
                "iVar2": "time_diff",
                "uVar3": "ret_val",
                "local_58": "data_ptr",
                "PTR_DAT_080015a0": "get_value_from_pointer_080015a0"
            },
            "code": "int validate_input_08004436(uint **input_ptr, ushort *input_data, short data_len, uint max_data_len)\\n\\\n{\\n\\\n    int ret_val = 0;\\n\\\n    uint *ptr = *input_ptr;\\n\\\n    ushort *data_ptr = input_data;\\n\\\n\\\n    if (*(((char *)input_ptr) + 0x39) == \" \")\\n\\\n    {\\n\\\n        if ((input_data == NULL) || (data_len == 0))\\n\\\n        {\\n\\\n            ret_val = 1;\\n\\\n        }\\n\\\n        else if (*(char *)(input_ptr + 0xe) == \"\\x01\")\\n\\\n        {\\n\\\n            ret_val = 2;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            *(undefined *)(input_ptr + 0xe) = 1;\\n\\\n            input_ptr[0xf] = NULL;\\n\\\n            *(undefined *)(((int)input_ptr) + 0x39) = 0x21;\\n\\\n            int start_time = PTR_DAT_080015a0();\\n\\\n            *(short *)(input_ptr + 9) = data_len;\\n\\\n            *(short *)(((int)input_ptr) + 0x26) = data_len;\\n\\\n            data_ptr = input_data;\\n\\\n            while (*(short *)(((int)input_ptr) + 0x26) != 0)\\n\\\n            {\\n\\\n                *(short *)(((int)input_ptr) + 0x26) = *(short *)(((int)input_ptr) + 0x26) - 1;\\n\\\n                if (input_ptr[2] == (uint *)0x1000)\\n\\\n                {\\n\\\n                    do\\n\\\n                    {\\n\\\n                        if ((**input_ptr & 0x80) == 0x80)\\n\\\n                        {\\n\\\n                            ret_val = 3;\\n\\\n                            goto end_of_function;\\n\\\n                        }\\n\\\n                    } while ((max_data_len == 0xffffffff) || ((max_data_len != 0 && (PTR_DAT_080015a0() - start_time) <= max_data_len)));\\n\\\n                    (*input_ptr)[3] = (*input_ptr)[3] & 0xfffffe5f;\\n\\\n                    (*input_ptr)[5] = (*input_ptr)[5] & 0xfffffffe;\\n\\\n                    *(undefined *)(((int)input_ptr) + 0x39) = 0x20;\\n\\\n                    *(undefined *)(((int)input_ptr) + 0x3a) = 0x20;\\n\\\n                    *(undefined *)(input_ptr + 0xe) = 0;\\n\\\n                    ret_val = 3;\\n\\\n                    goto end_of_function;\\n\\\n                }\\n\\\n                else\\n\\\n                {\\n\\\n                    do\\n\\\n                    {\\n\\\n                        if ((**input_ptr & 0x80) == 0x80)\\n\\\n                        {\\n\\\n                            ret_val = 3;\\n\\\n                            goto end_of_function;\\n\\\n                        }\\n\\\n                    } while ((max_data_len == 0xffffffff) || ((max_data_len != 0 && (PTR_DAT_080015a0() - start_time) <= max_data_len)));\\n\\\n                    (*input_ptr)[3] = (*input_ptr)[3] & 0xfffffe5f;\\n\\\n                    (*input_ptr)[5] = (*input_ptr)[5] & 0xfffffffe;\\n\\\n                    *(undefined *)(((int)input_ptr) + 0x39) = 0x20;\\n\\\n                    *(undefined *)(((int)input_ptr) + 0x3a) = 0x20;\\n\\\n                    *(undefined *)(input_ptr + 0xe) = 0;\\n\\\n                    ret_val = 3;\\n\\\n                    goto end_of_function;\\n\\\n                }\\n\\\n                (*input_ptr)[1] = (uint)*data_ptr & 0x1ff;\\n\\\n                if (input_ptr[4] == NULL)\\n\\\n                {\\n\\\n                    data_ptr++;\\n\\\n                }\\n\\\n                else\\n\\\n                {\\n\\\n                    data_ptr = (ushort *)((int)data_ptr + 1);\\n\\\n                }\\n\\\n            }\\n\\\n            do\\n\\\n            {\\n\\\n                if ((**input_ptr & 0x40) == 0x40)\\n\\\n                {\\n\\\n                    *(undefined *)(((int)input_ptr) + 0x39) = 0x20;\\n\\\n                    *(undefined *)(input_ptr + 0xe) = 0;\\n\\\n                    goto end_of_function;\\n\\\n                }\\n\\\n            } while ((max_data_len == 0xffffffff) || ((max_data_len != 0 && (PTR_DAT_080015a0() - start_time) <= max_data_len)));\\n\\\n            (*input_ptr)[3] = (*input_ptr)[3] & 0xfffffe5f;\\n\\\n            (*input_ptr)[5] = (*input_ptr)[5] & 0xfffffffe;\\n\\\n            *(undefined *)(((int)input_ptr) + 0x39) = 0x20;\\n\\\n            *(undefined *)(((int)input_ptr) + 0x3a) = 0x20;\\n\\\n            *(undefined *)(input_ptr + 0xe) = 0;\\n\\\n            ret_val = 0;\\n\\\n        }\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        ret_val = 2;\\n\\\n    }\\n\\\nend_of_function:\\n\\\n    return ret_val;\\n\\\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "validate_input_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "initialize_if_needed_08000110",
                "param_1": "param",
                "*PTR_DAT_08000128": "has_initialized",
                "DAT_0800012c": "initialized_value",
                "PTR_FUN_08000130": "initialization_function_pointer"
            },
            "code": "bool *PTR_DAT_08000128 = false;\n\nundefined* initialize_if_needed_08000110(undefined* param)\n{\n    if (!*PTR_DAT_08000128) {\n        if (DAT_0800012c != 0) {\n            param = PTR_FUN_08000130;\n        }\n        *PTR_DAT_08000128 = true;\n    }\n    return param;\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_needed_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "PTR_DAT_08003514": "value_pointer"
            },
            "code": "uint32_t get_value_from_pointer_08003504() {\n    uint32_t* PTR_DAT_08003514 = (uint32_t*) PTR_DAT_08003514;\n    return *PTR_DAT_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "size",
                "param_4": "data3",
                "FUNC_08001f6c": "call_function_with_params",
                "PTR_DAT_08004f28": "PTR_DATA_ARRAY",
                "PTR_DAT_08004f24": "PTR_CONSTANT"
            },
            "code": "void process_data_08004ee8(undefined data1, undefined data2, undefined4 size, undefined2 data3){\n    call_function_with_params(PTR_DAT_08004f28, data1, data2, 1, size, data3, *(undefined4 *)PTR_DAT_08004f24);\n    return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "ptr1",
                "iVar3": "index",
                "puVar4": "ptr2"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int size) {\n  int index = *(int *)(array2 + 0x10);\n  int difference = *(int *)(array1 + 0x10) - index;\n  if (difference == 0) {\n    uint *ptr1 = (uint *)(array2 + 0x14 + index * 4);\n    uint *ptr2 = (uint *)(array1 + 0x14) + index;\n    do {\n      ptr2 = ptr2 - 1;\n      ptr1 = ptr1 - 1;\n      if (*ptr2 != *ptr1) {\n        if (*ptr1 <= *ptr2) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr2);\n  }\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "check_for_non_overlapping_memory_regions_08000998",
                "in_ZR": "input_char",
                "check_for_overlap_08000988": "check_for_overlap"
            },
            "code": "bool check_for_non_overlapping_memory_regions_08000998(void)\\n{\\n  char input_char;\\n  check_for_overlap();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_for_non_overlapping_memory_regions_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "check_if_string_terminated_080009ac",
                "in_CY": "input_char",
                "check_for_overlap_08000988": "check_for_overlap"
            },
            "code": "bool check_if_string_terminated_080009ac(void)\n{\n  char input_char;\n  check_for_overlap();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_if_string_terminated_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "combine_params_and_reverse_order_08000fc8",
                "param_1": "first_param",
                "param_2": "second_param",
                "combine_params_08000fd0": "N/A (function call not needed in improved code)",
                "PTR_": "PTR_ (no changes made to variable names)",
                "DAT_": "DAT_ (no changes made to variable names)"
            },
            "code": "void combine_params_and_reverse_order_08000fc8(int* second_param, int* first_param)\n{\n    // Reverses the order of the parameters and combines them\n    int temp = *first_param;\n    *first_param = *second_param;\n    *second_param = temp;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "combine_params_and_reverse_order_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_input_values_0800438a",
                "param_1": "input_values",
                "uVar1": "return_value",
                "*(char *)((int)param_1 + 0x39)": "input_values[9]",
                "*(undefined *)(param_1 + 0xe)": "input_values[14]",
                "do_nothing_08004424": "do_nothing",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*input_values + 0xc)",
                "calculate_values_080046ec": "calculate_values",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(*input_values + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(*input_values + 0x14)",
                "param_1[0xf]": "input_values[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_values[9]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_values[10]"
            },
            "code": "int check_input_values_0800438a(int *input_values) {\n  int return_value;\n  if (input_values == NULL) {\n    return_value = 1;\n  }\n  else {\n    if (input_values[9] == 0) {\n      input_values[14] = 0;\n      do_nothing(input_values);\n    }\n    input_values[9] = 0x24;\n    *(unsigned int *)(*input_values + 0xc) &= 0xffffdfff;\n    calculate_values(input_values);\n    *(unsigned int *)(*input_values + 0x10) &= 0xffffb7ff;\n    *(unsigned int *)(*input_values + 0x14) &= 0xffffffd5;\n    *(unsigned int *)(*input_values + 0xc) |= 0x2000;\n    input_values[15] = 0;\n    input_values[9] = 0x20;\n    input_values[10] = 0x20;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_input_values_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_flag_and_call_function_080014f0",
                "set_parameter_for_function_08001714": "set_parameter",
                "check_param_range_0800151c": "check_parameter_range",
                "do_nothing_08002d8a": "do_nothing",
                "*DAT_08001518": "flag"
            },
            "code": "int set_*set_flag_and_call_function_080014f0() {\n    *DAT_08001518 |= 0x10;\n    set_parameter(3);\n    check_parameter_range(0xf);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_08001714",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "configure_device_08003908",
                "param_1": "device_config",
                "param_2": "device_param",
                "param_3": "config_type",
                "uVar1": "result"
            },
            "code": "int configure_device_08003908(int *device_config, int device_param, int config_type)\\n{\\n  int result = 0;\\n  if (*(char *)(device_config + 0xf) == \"\\x01\") {\\n    result = 2;\\n  }\\n  else {\\n    *(char *)(device_config + 0xf) = \"\\x01\";\\n    *(char *)((int)device_config + 0x3d) = \"\\x02\";\\n    switch(config_type) {\\n    case 0:\\n      configure_device_08003908_08003d60(*device_config, device_param);\\n      *(uint *)(*device_config + 0x18) = *(uint *)(*device_config + 0x18) | 8;\\n      *(uint *)(*device_config + 0x18) = *(uint *)(*device_config + 0x18) & 0xfffffff7;\\n      *(uint *)(*device_config + 0x18) = *(uint *)(device_param + 0x10) | *(uint *)(*device_config + 0x18);\\n      break;\\n    case 4:\\n      update_params_08003e38(*device_config, device_param);\\n      *(uint *)(*device_config + 0x18) = *(uint *)(*device_config + 0x18) | 0x800;\\n      *(uint *)(*device_config + 0x18) = *(uint *)(*device_config + 0x18) & 0xfffff7ff;\\n      *(uint *)(*device_config + 0x18) = *(int *)(device_param + 0x10) << 8 | *(uint *)(*device_config + 0x18);\\n      break;\\n    case 8:\\n      update_params_08003f18(*device_config, device_param);\\n      *(uint *)(*device_config + 0x1c) = *(uint *)(*device_config + 0x1c) | 8;\\n      *(uint *)(*device_config + 0x1c) = *(uint *)(*device_config + 0x1c) & 0xfffffffb;\\n      *(uint *)(*device_config + 0x1c) = *(uint *)(device_param + 0x10) | *(uint *)(*device_config + 0x1c);\\n      break;\\n    case 0xc:\\n      update_data_structure_08003ff8(*device_config, device_param);\\n      *(uint *)(*device_config + 0x1c) = *(uint *)(*device_config + 0x1c) | 0x800;\\n      *(uint *)(*device_config + 0x1c) = *(uint *)(*device_config + 0x1c) & 0xfffff7ff;\\n      *(uint *)(*device_config + 0x1c) = *(int *)(device_param + 0x10) << 8 | *(uint *)(*device_config + 0x1c);\\n    }\\n    *(char *)((int)device_config + 0x3d) = \"\\x01\";\\n    *(char *)(device_config + 0xf) = \"\\0\";\\n    result = 0;\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "configure_device_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clear_buffer_08004f60",
                "PTR_DAT_08004f74": "buffer_pointer",
                "write_bytes_to_buffer_08005d68": "write_bytes_to_buffer",
                "0x40": "BUFFER_SIZE"
            },
            "code": "void clear_buffer_08004f60(void)\n{\n  write_bytes_to_buffer(PTR_DAT_08004f74, 0, BUFFER_SIZE);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clear_buffer_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "check_for_overlap_and_return_result_080009c0",
                "in_CY": "overlap_detected",
                "in_ZR": "zero_detected",
                "check_for_overlap_08000988": "check_for_overlap"
            },
            "code": "bool check_for_overlap_and_return_result_080009c0(void)\n{\n  undefined overlap_detected;\n  undefined zero_detected;\n  check_for_overlap();\n  return !(bool)overlap_detected || (bool)zero_detected;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "check_for_overlap_and_return_result_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint input1, int input2, uint input3, int input4) {\n\tint left_shifted_input2 = input2 << 1;\n\tint left_shifted_input4 = input4 << 1;\n\tint shifted_input2 = left_shifted_input2 >> 0x15;\n\tint shifted_input4 = left_shifted_input4 >> 0x15;\n\n\tif ((shifted_input2 != -1 || (input1 | (left_shifted_input2 << 0xc)) == 0) && (shifted_input4 != -1 || (input3 | (left_shifted_input4 << 0xc)) == 0)) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_params_08003f18",
                "param_1": "param_index",
                "param_2": "params",
                "uVar1": "first_param",
                "uVar2": "second_param",
                "local_10": "third_param"
            },
            "code": "void update_params_08003f18(int param_index, uint *params)\n{\n  uint first_param = *params;\n  uint second_param = params[2] << 8 | *(uint *)(param_index + 0x20) & 0xfffffdff;\n  uint third_param = *(uint *)(param_index + 4);\n  *(uint *)(param_index + 0x20) = *(uint *)(param_index + 0x20) & 0xfffffeff;\n  if (param_index == DAT_08003ff4) {\n    second_param = (params[3] << 8 | second_param & 0xfffff7ff) & 0xfffffbff;\n    third_param = params[6] << 4 | params[5] << 4 | third_param & 0xffffcfff;\n  }\n  *(uint *)(param_index + 4) = third_param;\n  *(uint *)(param_index + 0x1c) = first_param | *(uint *)(param_index + 0x1c) & 0xffffff8c;\n  *(uint *)(param_index + 0x3c) = params[1];\n  *(uint *)(param_index + 0x20) = second_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_params_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "reverse_copy_and_update_080097cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "source_end",
                "iVar1": "source_index",
                "uVar2": "destination_index",
                "iVar3": "source_size",
                "iVar4": "destination_size",
                "uVar5": "source_pointer",
                "uVar6": "reversed_copy_size",
                "puVar7": "copy_size",
                "puVar8": "copy_offset",
                "uVar9": "new_destination_size",
                "FUNC_08008af8": "allocate_memory_block",
                "copy_memory_block_08001084": "copy_memory_block",
                "FUNC_08009adc": "deallocate_memory_block",
                "FUNC_080088ec": "copy_memory_block"
            },
            "code": "int reverse_copy_and_update_080097cc(int *destination, int *source, int *source_end)\n{\n  int source_index = *source;\n  int destination_index = *destination;\n  int source_size = source[2];\n  int destination_size = source_size;\n\n  if (source_size != 0) {\n    do {\n      int reversed_copy_size = 0;\n      int *source_pointer = (int *)*source_end;\n\n      while (source_pointer[1] == 0) {\n        reversed_copy_size += source_pointer[1];\n        source_pointer += 2;\n      }\n\n      int copy_size = source_pointer[1];\n      if (source_size <= copy_size && ((*(unsigned short *)(source + 3) & 0x480) != 0 || source_size != copy_size)) {\n        int copy_offset = source_index - source[4];\n        int new_destination_size = (source[5] * 3) / 2 + copy_offset + 1;\n        if (destination_size < new_destination_size) {\n          destination_size = new_destination_size;\n        }\n        if ((int)((unsigned int)*(unsigned short *)(source + 3) << 0x15) < 0) {\n          int destination_pointer = allocate_memory_block(destination_size);\n          if (destination_pointer == 0) {\n            *destination = 0xc;\n            *(unsigned short *)(source + 3) = *(unsigned short *)(source + 3) | 0x40;\n            source_end[1] = 0;\n            source_end[2] = 0;\n            return -1;\n          }\n          copy_memory_block(destination_pointer, source[4], copy_offset);\n          *(unsigned short *)(source + 3) = *(unsigned short *)(source + 3) & 0xfb7f | 0x80;\n          destination_index = destination_pointer + copy_offset;\n        }\n        else {\n          int destination_pointer = allocate_memory_block(destination_size);\n          if (destination_pointer == 0) {\n            copy_memory_block(destination_index, source[4], copy_offset);\n            *destination = 0xc;\n            *(unsigned short *)(source + 3) = *(unsigned short *)(source + 3) | 0x40;\n            source_end[1] = 0;\n            source_end[2] = 0;\n            return -1;\n          }\n          copy_memory_block(destination_pointer, source[4], copy_offset);\n          deallocate_memory_block(destination_index);\n          destination_index = destination_pointer + copy_offset;\n        }\n        source_size = copy_size;\n      }\n      reversed_copy_08009a18(destination_index, *source_pointer, source_size);\n      source_size = source_end[2] - source_pointer[1];\n      destination_size -= source_size;\n      source_index += source_size;\n      *destination = source_index;\n      source_end[2] = source_size;\n    } while (source_size != 0);\n  }\n  source_end[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08001084",
                "FUN_08009a18",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "reverse_copy_and_update_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = get_value_from_pointer_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = perform_operation_on_pointer_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = check_condition_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = check_condition_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_condition_08002ad8",
                "param_1": "ptr_param_array",
                "param_2": "param_value_2",
                "param_3": "param_value_3",
                "param_4": "param_value_4",
                "uVar3": "value",
                "bVar4": "flag",
                "cVar2": "result",
                "iVar1": "index"
            },
            "code": "int check_condition_08002ad8(uint **ptr_param_array, uint param_value_2, uint param_value_3, int param_value_4)\n{\n  int index;\n  char result;\n  uint value;\n  bool flag;\n  do {\n    if ((param_value_2 >> 0x10 & 0xff) == 1) {\n      value = param_value_2 & ~(*ptr_param_array)[5] & 0xffff;\n      flag = value != 0;\n      if (flag) {\n        value = 1;\n      }\n      result = (char)value;\n      if (!flag) {\n        result = '\\0';\n      }\n    }\n    else {\n      value = param_value_2 & ~(*ptr_param_array)[6] & 0xffff;\n      flag = value != 0;\n      if (flag) {\n        value = 1;\n      }\n      result = (char)value;\n      if (!flag) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*ptr_param_array)[5] & 0x400) == 0x400) {\n      **ptr_param_array = **ptr_param_array | 0x200;\n      (*ptr_param_array)[5] = 0xfffffbff;\n      ptr_param_array[0x10] = (uint *)0x4;\n      ptr_param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)ptr_param_array + 0x3d) = 0x20;\n      *(undefined *)(ptr_param_array + 0xf) = 0;\n      return 1;\n    }\n  } while ((param_value_3 == 0xffffffff) || ((param_value_3 != 0 && (index = get_value_from_pointer_080015a0(), (uint)(index - param_value_4) <= param_value_3))));\n  ptr_param_array[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptr_param_array + 0x3d) = 0x20;\n  *(undefined *)(ptr_param_array + 0xf) = 0;\n  return 3;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_condition_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "combine_params_08000fd0",
                "param_1": "param1",
                "param_2": "param2",
                "CONCAT44": "combine_64bit_params",
                "calculate_result_08000f68": "calculate_result"
            },
            "code": "uint64_t combine_params_08000fd0(uint32_t param1, uint32_t param2) {\n\tcalculate_result();\n\treturn ((uint64_t)param2 << 32) | param1;\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "combine_params_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "configure_device_08003d60",
                "param_1": "device_address",
                "param_2": "config_data",
                "uVar1": "data1",
                "uVar2": "data2",
                "local_10": "device_config",
                "DAT_08003e34": "device2_address"
            },
            "code": "void configure_device_08003d60(int device_address, uint *config_data) {\n  uint bitmask1 = 0xfffffffe;\n  uint bitmask2 = 0xfffffffd;\n  uint device_config = *(uint *)(device_address + 0x20);\n  uint data1 = *config_data;\n  uint data2 = config_data[2] | device_config & bitmask2;\n  if (device_address == DAT_08003e34) {\n    data2 = (config_data[3] | data2 & 0xfffffff7) & 0xfffffffb;\n    device_config = config_data[6] | config_data[5] | device_config & 0xfffffcff;\n  }\n  *(uint *)(device_address + 4) = device_config;\n  *(uint *)(device_address + 0x18) = data1 | *(uint *)(device_address + 0x18) & 0xffffff8c;\n  *(uint *)(device_address + 0x34) = config_data[1];\n  *(uint *)(device_address + 0x20) = data2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "configure_device_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_shifted_value_from_pointer_08003518",
                "uVar1": "value",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "DAT_08003538": "data",
                "PTR_DAT_0800353c": "pointer_data"
            },
            "code": "uint get_shifted_value_from_pointer_08003518(void)\n{\n  uint value = get_value_from_pointer();\n  uint index = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  uint shifted_value = value >> PTR_DAT_0800353c[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_080046ec",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "update_data_08001618",
                "param_1": "data",
                "param_2": "value",
                "DAT_08001664": "data_ptr_1",
                "DAT_08001668": "data_ptr_2"
            },
            "code": "void update_data_08001618(byte data, uint value) {\n  if (data < 0) {\n    *(char *)((data & 0xf) + DAT_08001664 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data + DAT_08001668 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "update_data_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_left_shifts_080091a4",
                "param_1": "number",
                "iVar1": "shift_count"
            },
            "code": "int count_left_shifts_080091a4(uint number) {\n  int shift_count = 0;\n  if ((number & 0xffff0000) == 0) {\n    number <<= 0x10;\n    shift_count = 0x10;\n  }\n  if ((number & 0xff000000) == 0) {\n    number <<= 8;\n    shift_count += 8;\n  }\n  if ((number & 0xf0000000) == 0) {\n    number <<= 4;\n    shift_count += 4;\n  }\n  if ((number & 0xc0000000) == 0) {\n    number <<= 2;\n    shift_count += 2;\n  }\n  if (-1 < (int)number) {\n    if ((int)(number << 1) < 0) {\n      return shift_count + 1;\n    }\n    shift_count = 0x20;\n  }\n  return shift_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_left_shifts_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "process_input_data_08004f78",
                "uVar1": "hash1",
                "iVar2": "is_end_of_string",
                "uVar3": "input_value",
                "uVar4": "unused",
                "uVar5": "num_bits_to_clear",
                "local_11": "input_value",
                "calculate_hashes_and_store_08004ae0": "calculate_hashes_and_store",
                "calculate_output_08004bd8": "calculate_output",
                "clear_buffer_08004f60": "clear_buffer",
                "convert_uint_to_uint64_08000418": "convert_uint_to_uint64",
                "clear_string_at_pointer_08005dfc": "clear_string_at_pointer",
                "find_first_set_bit_08005e40": "find_first_set_bit",
                "validate_input_and_return_08004f3c": "validate_input_and_return",
                "FUNC_08000aa4": "hash_function_1",
                "FUNC_08000cb8": "hash_function_2",
                "calculate_hash_08000c10": "calculate_hash",
                "is_end_of_string_08000ff4": "is_end_of_string",
                "check_input_string_08001030_08001030": "check_input_string",
                "leading_zero_bits_08000c08": "leading_zero_bits",
                "set_param_value_08001a80": "set_param_value"
            },
            "code": "void process_input_data_08004f78(void)\n{\n  uint32_t hash1;\n  uint32_t hash2;\n  uint32_t input_value;\n  bool is_valid_input = false;\n  bool is_end_of_string = false;\n  calculate_hashes_and_store(PTR_DAT_080051e0);\n  calculate_output(PTR_DAT_080051e0,PTR_DAT_080051e4);\n  clear_buffer();\n  uint64_t num_bits_to_clear = convert_uint_to_uint64(*(uint32_t *)PTR_DAT_080051e4);\n  clear_string_at_pointer(PTR_DAT_080051ec,PTR_s_Pitch___f_080051e8,(int)num_bits_to_clear,(int)(num_bits_to_clear >> 0x20));\n  uint32_t first_set_bit = find_first_set_bit(PTR_DAT_080051ec);\n  validate_input_and_return(PTR_DAT_080051ec,first_set_bit);\n  hash1 = FUNC_08000aa4(*(uint32_t *)PTR_DAT_080051f0,*(uint32_t *)PTR_DAT_080051e4);\n  *(uint32_t *)PTR_DAT_080051f4 = FUNC_08000cb8(*(uint32_t *)PTR_DAT_080051f8,hash1);\n  hash2 = FUNC_08000cb8(*(uint32_t *)PTR_DAT_08005200,*(uint32_t *)PTR_DAT_080051f4);\n  hash2 = FUNC_08000aa8(hash2,*(uint32_t *)PTR_DAT_08005204);\n  if (!is_end_of_string_08000ff4(calculate_hash(*PTR_DAT_08005208),hash2))\n  {\n    hash1 = calculate_hash(*PTR_DAT_0800520c);\n    if (check_input_string_08001030_08001030(hash2,hash1))\n    {\n      is_valid_input = true;\n    }\n    else\n    {\n      input_value = leading_zero_bits(*PTR_DAT_08005208);\n    }\n  }\n  else\n  {\n    input_value = leading_zero_bits(*PTR_DAT_08005208);\n  }\n  *(uint32_t *)PTR_DAT_08005214 = *(uint32_t *)PTR_DAT_080051f4;\n  set_param_value(DAT_0800521c,2,check_input_string_08001030_08001030(*(uint32_t *)PTR_DAT_080051f4,0));\n  set_param_value(DAT_0800521c,4,!check_input_string_08001030_08001030(*(uint32_t *)PTR_DAT_080051f4,0));\n  set_param_value(DAT_0800521c,8,check_input_string_08001030_08001030(*(uint32_t *)PTR_DAT_080051f4,0));\n  set_param_value(DAT_0800521c,0x10,!check_input_string_08001030_08001030(*(uint32_t *)PTR_DAT_080051f4,0));\n  *(uint *)(*(int *)PTR_DAT_08005220 + 0x34) = is_valid_input ? hash2 : input_value;\n  *(uint *)(*(int *)PTR_DAT_08005220 + 0x40) = is_valid_input ? hash2 : input_value;\n}\n",
            "called": [
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08004f3c",
                "FUN_08001044",
                "FUN_08000c10",
                "FUN_08000aa4",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08005e40",
                "FUN_08000aa8",
                "FUN_08001030",
                "FUN_08000418",
                "FUN_08000c08",
                "FUN_08004bd8",
                "FUN_08004ae0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "process_input_data_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_value_from_pointer_080015a0",
                "undefined4": "int",
                "PTR_DAT_080015b0": "value_pointer",
                "*(undefined4 *)PTR_DAT_080015b0": "value"
            },
            "code": "get_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0tget_value_from_pointer_080015a0 get_value_from_pointer_080015a0gget_value_from_pointer_080015a0eget_value_from_pointer_080015a0tget_value_from_pointer_080015a0_get_value_from_pointer_080015a0*get_value_from_pointer_080015a0(get_value_from_pointer_080015a0uget_value_from_pointer_080015a0nget_value_from_pointer_080015a0dget_value_from_pointer_080015a0eget_value_from_pointer_080015a0fget_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0eget_value_from_pointer_080015a0dget_value_from_pointer_080015a04get_value_from_pointer_080015a0 get_value_from_pointer_080015a0*get_value_from_pointer_080015a0)get_value_from_pointer_080015a0Pget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0Rget_value_from_pointer_080015a0_get_value_from_pointer_080015a0Dget_value_from_pointer_080015a0Aget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0_get_value_from_pointer_080015a00get_value_from_pointer_080015a08get_value_from_pointer_080015a00get_value_from_pointer_080015a00get_value_from_pointer_080015a01get_value_from_pointer_080015a05get_value_from_pointer_080015a0bget_value_from_pointer_080015a00get_value_from_pointer_080015a0_get_value_from_pointer_080015a0fget_value_from_pointer_080015a0rget_value_from_pointer_080015a0oget_value_from_pointer_080015a0mget_value_from_pointer_080015a0_get_value_from_pointer_080015a0pget_value_from_pointer_080015a0oget_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0tget_value_from_pointer_080015a0eget_value_from_pointer_080015a0rget_value_from_pointer_080015a0(get_value_from_pointer_080015a0)get_value_from_pointer_080015a0 get_value_from_pointer_080015a0{get_value_from_pointer_080015a0\nget_value_from_pointer_080015a0 get_value_from_pointer_080015a0 get_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0tget_value_from_pointer_080015a0*get_value_from_pointer_080015a0 get_value_from_pointer_080015a0Pget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0Rget_value_from_pointer_080015a0_get_value_from_pointer_080015a0Dget_value_from_pointer_080015a0Aget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0_get_value_from_pointer_080015a00get_value_from_pointer_080015a08get_value_from_pointer_080015a00get_value_from_pointer_080015a00get_value_from_pointer_080015a01get_value_from_pointer_080015a05get_value_from_pointer_080015a0bget_value_from_pointer_080015a00get_value_from_pointer_080015a0 get_value_from_pointer_080015a0=get_value_from_pointer_080015a0 get_value_from_pointer_080015a0Pget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0Rget_value_from_pointer_080015a0_get_value_from_pointer_080015a0Dget_value_from_pointer_080015a0Aget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0_get_value_from_pointer_080015a00get_value_from_pointer_080015a08get_value_from_pointer_080015a00get_value_from_pointer_080015a00get_value_from_pointer_080015a01get_value_from_pointer_080015a05get_value_from_pointer_080015a0bget_value_from_pointer_080015a00get_value_from_pointer_080015a0;get_value_from_pointer_080015a0\nget_value_from_pointer_080015a0 get_value_from_pointer_080015a0 get_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0tget_value_from_pointer_080015a0 get_value_from_pointer_080015a0*get_value_from_pointer_080015a0(get_value_from_pointer_080015a0uget_value_from_pointer_080015a0nget_value_from_pointer_080015a0dget_value_from_pointer_080015a0eget_value_from_pointer_080015a0fget_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0eget_value_from_pointer_080015a0dget_value_from_pointer_080015a04get_value_from_pointer_080015a0 get_value_from_pointer_080015a0*get_value_from_pointer_080015a0)get_value_from_pointer_080015a0Pget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0Rget_value_from_pointer_080015a0_get_value_from_pointer_080015a0Dget_value_from_pointer_080015a0Aget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0_get_value_from_pointer_080015a00get_value_from_pointer_080015a08get_value_from_pointer_080015a00get_value_from_pointer_080015a00get_value_from_pointer_080015a01get_value_from_pointer_080015a05get_value_from_pointer_080015a0bget_value_from_pointer_080015a00get_value_from_pointer_080015a0 get_value_from_pointer_080015a0=get_value_from_pointer_080015a0 get_value_from_pointer_080015a0*get_value_from_pointer_080015a0Pget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0Rget_value_from_pointer_080015a0_get_value_from_pointer_080015a0Dget_value_from_pointer_080015a0Aget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0_get_value_from_pointer_080015a00get_value_from_pointer_080015a08get_value_from_pointer_080015a00get_value_from_pointer_080015a00get_value_from_pointer_080015a01get_value_from_pointer_080015a05get_value_from_pointer_080015a0bget_value_from_pointer_080015a00get_value_from_pointer_080015a0;get_value_from_pointer_080015a0\nget_value_from_pointer_080015a0 get_value_from_pointer_080015a0 get_value_from_pointer_080015a0rget_value_from_pointer_080015a0eget_value_from_pointer_080015a0tget_value_from_pointer_080015a0uget_value_from_pointer_080015a0rget_value_from_pointer_080015a0nget_value_from_pointer_080015a0 get_value_from_pointer_080015a0*get_value_from_pointer_080015a0(get_value_from_pointer_080015a0uget_value_from_pointer_080015a0nget_value_from_pointer_080015a0dget_value_from_pointer_080015a0eget_value_from_pointer_080015a0fget_value_from_pointer_080015a0iget_value_from_pointer_080015a0nget_value_from_pointer_080015a0eget_value_from_pointer_080015a0dget_value_from_pointer_080015a04get_value_from_pointer_080015a0 get_value_from_pointer_080015a0*get_value_from_pointer_080015a0)get_value_from_pointer_080015a0Pget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0Rget_value_from_pointer_080015a0_get_value_from_pointer_080015a0Dget_value_from_pointer_080015a0Aget_value_from_pointer_080015a0Tget_value_from_pointer_080015a0_get_value_from_pointer_080015a00get_value_from_pointer_080015a08get_value_from_pointer_080015a00get_value_from_pointer_080015a00get_value_from_pointer_080015a01get_value_from_pointer_080015a05get_value_from_pointer_080015a0bget_value_from_pointer_080015a00get_value_from_pointer_080015a0;get_value_from_pointer_080015a0\nget_value_from_pointer_080015a0}get_value_from_pointer_080015a0",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08002c2e",
                "FUN_08002ca8",
                "FUN_08001f6c",
                "FUN_08003260",
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08004f2c",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      calculate_delay_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = get_value_from_pointer_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = get_value_from_pointer_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "update_data_with_bits_0800172a",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "uVar1": "bits",
                "get_bits_from_address_080015fc": "get_bits_from_address",
                "set_bits_0800166c": "set_bits",
                "update_data_08001618": "update_data"
            },
            "code": "void update_data_with_bits_0800172a(char data, int bit_position, int bit_value) {\n  int bits = get_bits_from_address();\n  bits = set_bits(bits, bit_position, bit_value);\n  update_data(data, bits);\n  return;\n}",
            "called": [
                "FUN_080015fc",
                "FUN_0800166c",
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "update_data_with_bits_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "check_for_overlap_and_return_true_if_not_overlapping_080009d4",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "check_for_overlap_08000978": "check_for_overlap"
            },
            "code": "bool check_for_overlap_and_return_true_if_not_overlapping_080009d4(void)\n{\n  bool is_CY_zero = false;\n  bool is_ZR_nonzero = false;\n  check_for_overlap();\n  return is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_for_overlap_and_return_true_if_not_overlapping_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_other_bits_08005780",
                "DAT_080057dc": "data_pointer_1",
                "DAT_080057e0": "data_pointer_2"
            },
            "code": "void set_bit_and_clear_other_bits_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 1;\n  DAT_080057dc[1] = DAT_080057e0 & DAT_080057dc[1];\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  DAT_080057dc[1] = DAT_080057dc[1] & 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e0 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "calculate_result_and_set_08009744",
                "param_1": "result",
                "param_2": "input_value",
                "puVar1": "ptr_to_data",
                "iVar2": "calculated_value"
            },
            "code": "void calculate_result_and_set_08009744(int *result, undefined4 input_value)\n{\n  undefined *ptr_to_data = PTR_DAT_08009764;\n  *(undefined4 *)ptr_to_data = 0;\n  int calculated_value = calculate_result(input_value);\n  if ((calculated_value == -1) && (*(int *)ptr_to_data != 0)) {\n    *result = *(int *)ptr_to_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "calculate_result_and_set_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "validate_input_and_set_values_08003640",
                "param_1": "input_array",
                "uVar1": "result",
                "NULL": "NULL",
                "(undefined4 *)0x0": "NULL",
                "*(char *)((int)param_1 + 0x3d)": "input_array[15]",
                "*(undefined *)(param_1 + 0xf)": "input_array[6]",
                "do_nothing_08003696": "do_nothing",
                "(undefined *)((int)param_1 + 0x3d)": "input_array[15]",
                "set_values_08003c94": "set_values"
            },
            "code": "int validate_input_and_set_values_08003640(int *input_array)\n{\n  int result;\n  if (input_array == NULL) {\n    result = 1;\n  }\n  else {\n    if (input_array[15] == 0) {\n      input_array[6] = 0;\n      do_nothing(input_array);\n    }\n    input_array[15] = 2;\n    set_values(input_array[0], &input_array[1]);\n    input_array[15] = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_values_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_and_initialize_to_zero_08009980",
                "param_1": "initial_value",
                "param_2": "num_rows",
                "param_3": "num_cols",
                "puVar1": "allocated_memory",
                "uVar2": "memory_size",
                "puVar3": "memory_ptr"
            },
            "code": "undefined4* allocate_memory_and_initialize_to_zero_08009980(undefined4 initial_value, int num_rows, int num_cols) {\n  undefined4* allocated_memory = (undefined4*)FUNC_08008af8(initial_value, num_rows * num_cols);\n  if (allocated_memory == (undefined4*)0x0) { return (undefined4*)0x0; }\n  uint32_t memory_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (memory_size < 0x25) {\n    undefined4* memory_ptr = allocated_memory;\n    if (memory_size > 0x13) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (memory_size > 0x1b) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (memory_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          memory_ptr = allocated_memory + 6;\n        }\n        else {\n          memory_ptr = allocated_memory + 4;\n        }\n        *memory_ptr = 0;\n        memory_ptr[1] = 0;\n        memory_ptr[2] = 0;\n        return allocated_memory;\n      }\n      memory_ptr = allocated_memory + 2;\n    }\n    *memory_ptr = 0;\n    memory_ptr[1] = 0;\n    memory_ptr[2] = 0;\n    return allocated_memory;\n  }\n  write_bytes_to_buffer_08005d68(allocated_memory, 0);\n  return allocated_memory;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_to_zero_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_function_address_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)find_first_set_bit_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_function_address_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)find_first_set_bit_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_function_address_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = is_valid_input_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = check_for_overlap_and_return_result_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = check_if_string_terminated_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)is_valid_input_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = convert_to_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_for_non_overlapping_memory_regions_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = convert_to_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_for_non_overlapping_memory_regions_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_for_non_overlapping_memory_regions_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_for_non_overlapping_memory_regions_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)find_first_set_bit_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)find_first_occurrence_of_byte_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_for_non_overlapping_memory_regions_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = calculateValue_0800119c();\n    uVar34 = calculate_shifted_value_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = check_if_string_terminated_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = check_for_non_overlapping_memory_regions_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_for_non_overlapping_memory_regions_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_for_non_overlapping_memory_regions_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = reverse_copy_and_update_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_0800119c",
                "FUN_08001170",
                "FUN_08008ad4",
                "FUN_08000158",
                "FUN_080096e0",
                "FUN_080097cc",
                "FUN_08005e40",
                "FUN_080079e8",
                "FUN_08009768",
                "FUN_08008af8",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2",
                "DAT_08000144": "global_variable",
                "PTR_FUN_0800014c": "function_pointer",
                "PTR_DAT_08000148": "global_data_pointer"
            },
            "code": "uint64_t concatenate_values_08000134(uint64_t *value1, uint64_t *value2) {\n  if (DAT_08000144 != 0) {\n    value1 = PTR_FUN_0800014c;\n    value2 = PTR_DAT_08000148;\n  }\n  return ((uint64_t)*value2 << 32) | *value1;\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_values_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "process_input_and_return_08005704",
                "add_byte_to_int_and_store_as_uint_0800157c": "add_byte_to_int_and_store_as_uint",
                "process_input_and_return_080017b4": "process_input_and_return"
            },
            "code": "void process_input_and_return_08005704(void)\n{\n  add_byte_to_int_and_store_as_uint();\n  process_input_and_return_08005704();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_return_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "convert_uint_to_uint64_08000418",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_2",
                "uVar2": "temp_6",
                "uVar3": "temp_4",
                "uVar4": "temp_3",
                "uVar5": "temp_1",
                "uVar7": "temp_8",
                "iVar6": "leading_zeroes",
                "bVar8": "is_temp_8_zero",
                "bVar9": "is_temp_1_zero",
                "bVar10": "is_temp_8_negative",
                "in_r12": "temp_9"
            },
            "code": "uint64_t convert_uint_to_uint64_08000418(uint32_t input_1, uint32_t input_2, uint32_t input_3, uint32_t input_4)\n{\n  uint32_t temp_1 = input_1 << 1;\n  bool is_temp_1_zero = temp_1 == 0;\n  uint32_t temp_2 = (uint32_t)((input_1 & 0x80000000) != 0) << 0x1f;\n  uint32_t temp_3 = (uint32_t)((int)temp_1 >> 3) >> 1;\n  uint32_t temp_4 = temp_2 | temp_3;\n  input_1 = input_1 << 0x1d;\n  if (!is_temp_1_zero) {\n    uint32_t temp_5 = temp_1 & 0xff000000;\n    is_temp_1_zero = temp_5 == 0;\n  }\n  if (!is_temp_1_zero) {\n    is_temp_1_zero = temp_1 & 0xff000000 == 0xff000000;\n  }\n  if (!is_temp_1_zero) {\n    return ((uint64_t)temp_4 << 32) | input_1 ^ 0x3800000000000000;\n  }\n  if ((temp_1 & 0xffffff) == 0) {\n    return ((uint64_t)temp_4 << 32) | input_1;\n  }\n  if (temp_1 & 0xff000000 == 0xff000000) {\n    return ((uint64_t)temp_4 << 32) | input_1 | 0x8000000000000;\n  }\n  uint32_t temp_6 = input_1;\n  uint32_t temp_7 = temp_3;\n  if (temp_3 == 0) {\n    temp_6 = 0;\n    temp_7 = input_1;\n  }\n  int leading_zeroes = count_leading_zeroes(temp_7);\n  if (temp_3 == 0) {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  uint32_t temp_8 = leading_zeroes - 0xb;\n  bool is_temp_8_negative = temp_8 < 0;\n  bool is_temp_8_zero = temp_8 == 0;\n  uint32_t temp_9;\n  uint32_t temp_10;\n  uint32_t temp_11;\n  if (leading_zeroes < 0x20) {\n    bool is_temp_9_negative = temp_8 < 0xc;\n    is_temp_8_negative = is_temp_9_negative;\n    is_temp_8_zero = leading_zeroes + -0x1f == 0;\n    temp_8 = leading_zeroes + -0x1f;\n    if (!is_temp_8_zero && is_temp_8_negative == leading_zeroes + -0x1f < 0) {\n      temp_6 = temp_7 << (temp_8 & 0xff);\n      temp_7 = temp_7 >> ((0xcU - leading_zeroes) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  bool temp_12;\n  bool temp_13;\n  bool temp_14;\n  if (is_temp_8_zero || is_temp_8_negative == leading_zeroes + -0x1f < 0) {\n    temp_9 = 0x20 - temp_8;\n  }\n  temp_7 = temp_7 << (temp_8 & 0xff);\n  if (is_temp_8_zero || is_temp_8_negative == leading_zeroes + -0x1f < 0) {\n    temp_7 = temp_7 | temp_6 >> ((0x20 - temp_8) & 0xff);\n  }\n  if (is_temp_8_zero || is_temp_8_negative == leading_zeroes + -0x1f < 0) {\n    temp_6 = temp_6 << (temp_8 & 0xff);\n  }\nLAB_080002e0:\n  if (leading_zeroes < 0x381) {\n    return ((uint64_t)temp_7 + (0x380 - leading_zeroes) * 0x100000 | (uint64_t)temp_2 << 32);\n  }\n  uint32_t temp_15 = ~(0x380 - leading_zeroes);\n  if (0x1e < temp_15) {\n    return (((uint64_t)temp_4 << 32) | temp_7 >> ((temp_15 - 0x1f) & 0xff)) & 0x80000000ffffffff;\n  }\n  int temp_16 = temp_15 - 0x13;\n  if (temp_16 == 0 || temp_16 < 0 != (temp_15 - 0x1f < 0xc)) {\n    temp_15 = temp_15 + 1;\n    return (((uint64_t)temp_2 | temp_7 >> (temp_15 & 0xff)) << 32) | (temp_6 >> (temp_15 & 0xff) | temp_7 << ((0x20 - temp_15) & 0xff));\n  }\n  return (((uint64_t)temp_4 << 32) | temp_6 >> ((0x20 - (0xcU - temp_16)) & 0xff) | temp_7 << ((0xcU - temp_16) & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_uint64_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_condition_08002ca8",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "iVar1": "value_from_pointer"
            },
            "code": "int check_condition_08002ca8(int *ptr_param_1, uint param_2, int param_3)\n{\n    int value_from_pointer;\n    while (true)\n    {\n        if ((*(uint *)(*ptr_param_1 + 0x14) & 0x40) == 0x40)\n        {\n            return 0;\n        }\n        if ((*(uint *)(*ptr_param_1 + 0x14) & 0x10) == 0x10)\n        {\n            break;\n        }\n        if ((param_2 == 0) || (value_from_pointer = get_value_from_pointer_080015a0(), param_2 < (uint)(value_from_pointer - param_3)))\n        {\n            ptr_param_1[16] |= 0x20;\n            *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n            *(undefined *)(ptr_param_1 + 0xf) = 0;\n            return 3;\n        }\n    }\n    *(undefined4 *)(*ptr_param_1 + 0x14) = 0xffffffef;\n    ptr_param_1[16] = 0;\n    ptr_param_1[12] = 0;\n    *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n    *(undefined *)(ptr_param_1 + 0xf) = 0;\n    return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_condition_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "set_permissions_and_bits_08003a94",
                "param_1": "permissions",
                "param_2": "bits",
                "uVar1": "result",
                "uVar2": "permission_type",
                "update_data_080040a0": "update_data",
                "set_permissions_0800416a": "set_permissions",
                "set_bits_in_uint_at_offset_080041a8": "set_bits_in_uint_at_offset",
                "set_flags_and_values_08004104": "set_flags_and_values"
            },
            "code": "uint32_t set_permissions_and_bits_08003a94(uint32_t *permissions, uint32_t *bits)\n{\n    uint32_t result;\n    uint32_t permission_flag;\n\n    if (*(char *)(permissions + 0xf) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(undefined *)(permissions + 0xf) = 1;\n        *(undefined *)((int)permissions + 0x3d) = 2;\n        permission_flag = *(uint32_t *)(*permissions + 8);\n        *(uint32_t *)(*permissions + 8) = permission_flag & 0xffff0088;\n        uint32_t permission_type = *bits;\n        if (permission_type == 0x40) {\n            update_data(*permissions, bits[1], bits[3]);\n            set_permissions(*permissions, 0x40);\n        }\n        else if (permission_type < 0x41) {\n            if (permission_type == 0x10) {\n                set_permissions(*permissions, 0x10);\n            }\n            else if (permission_type < 0x11) {\n                if (permission_type == 0) {\n                    set_permissions(*permissions, 0);\n                }\n            }\n            else if (permission_type == 0x20) {\n                set_permissions(*permissions, 0x20);\n            }\n            else if (permission_type == 0x30) {\n                set_permissions(*permissions, 0x30);\n            }\n        }\n        else if (permission_type == 0x70) {\n            set_bits_in_uint_at_offset(*permissions, bits[2], bits[1], bits[3]);\n            *(uint32_t *)(*permissions + 8) = permission_flag & 0xffffff88 | 0x77;\n        }\n        else if (permission_type < 0x71) {\n            if (permission_type == 0x50) {\n                update_data(*permissions, bits[1], bits[3]);\n                set_permissions(*permissions, 0x50);\n            }\n            else if (permission_type == 0x60) {\n                set_flags_and_values(*permissions, bits[1], bits[3]);\n                set_permissions(*permissions, 0x60);\n            }\n        }\n        else if (permission_type == 0x1000) {\n            *(uint32_t *)(*permissions + 8) = permission_flag & 0xfffffff8;\n        }\n        else if (permission_type == 0x2000) {\n            set_bits_in_uint_at_offset(*permissions, bits[2], bits[1], bits[3]);\n            *(uint32_t *)(*permissions + 8) = permission_flag | 0x4000;\n        }\n        *(undefined *)((int)permissions + 0x3d) = 1;\n        *(undefined *)(permissions + 0xf) = 0;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_0800416a",
                "FUN_080041a8",
                "FUN_080040a0",
                "FUN_08004104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_permissions_and_bits_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_permissions_0800416a",
                "param_1": "file_descriptor",
                "param_2": "permissions",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "uint": "unsigned int",
                "ushort": "unsigned short",
                "current_permissions": "current_permissions",
                "new_permissions": "new_permissions",
                "permissions_ptr": "permissions_ptr"
            },
            "code": "void set_permissions_0800416a(int file_descriptor, ushort permissions) {\n    uint* permissions_ptr = (uint*)(file_descriptor + 8);\n    uint current_permissions = *permissions_ptr;\n    uint new_permissions = (current_permissions & 0xffffff8f) | (uint)(permissions | 7);\n    *permissions_ptr = new_permissions;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_permissions_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_flags_and_process_data_080055f4",
                "local_18": "data_param",
                "local_14": "param_1",
                "local_c": "param_2",
                "DAT_0800566c": "flags",
                "DAT_08005670": "data"
            },
            "code": "void set_flags_and_process_data_080055f4(void)\n{\n  uint32_t DAT_0800566c = 0;\n  DAT_0800566c |= 0x20;\n  DAT_0800566c |= 4;\n  DAT_0800566c |= 8;\n  set_param_value(DAT_08005670, 0x1e, 0, DAT_0800566c & 8);\n  uint32_t DAT_08005670_param = 0x1e;\n  uint32_t param_1 = 1;\n  uint32_t param_2 = 2;\n  process_DAT_08005670(DAT_08005670, &DAT_08005670_param);\n  return;\n}",
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_and_process_data_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = check_if_string_terminated_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800071c",
                "FUN_08005d0c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_device_080053b0",
                "iVar1": "result",
                "local_58": "value_1",
                "local_54": "value_2",
                "local_50": "value_3",
                "local_4c": "value_4",
                "local_48": "value_5",
                "local_44": "checksum_value",
                "local_40": "value_6",
                "local_3c": "device_config_value_1",
                "local_38": "device_config_value_2",
                "local_34": "device_config_value_3",
                "local_30": "device_config_value_4",
                "local_2c": "device_config_value_5",
                "local_28": "device_config_value_6",
                "local_24": "device_config_value_7",
                "local_20": "value",
                "local_1c": "value_7",
                "local_18": "memory_values",
                "PTR_DAT_080054f4": "device_pointer",
                "DAT_080054f8": "device_value",
                "PTR_s____src_main_c_080054fc": "source_pointer"
            },
            "code": "void initialize_device_080053b0(void)\n{\n  int check_values_result;\n  int set_permissions_result;\n  int validate_input_result;\n  int set_value_result;\n  int configure_device_result_1;\n  int configure_device_result_2;\n  int calculate_checksum_result;\n\n  uint32_t memory_values[] = {0x708, 0, 100, 0, 0, 0, 0};\n  *(uint32_t *)PTR_DAT_080054f4 = DAT_080054f8;\n  memcpy(PTR_DAT_080054f4 + 4, memory_values, sizeof(memory_values));\n\n  check_values_result = check_values(PTR_DAT_080054f4);\n  if (check_values_result != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 399);\n  }\n\n  uint32_t permissions[] = {0x1000};\n  set_permissions_result = set_permissions_and_bits(PTR_DAT_080054f4, permissions);\n  if (set_permissions_result != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 0x194);\n  }\n\n  validate_input_result = validate_input_and_set_values(PTR_DAT_080054f4);\n  if (validate_input_result != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 0x198);\n  }\n\n  uint32_t value = 0;\n  set_value_result = set_value_if_not_set(PTR_DAT_080054f4, &value);\n  if (set_value_result != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 0x19f);\n  }\n\n  uint32_t device_config[] = {0x60, 0, 0, 0, 0, 0, 0};\n  configure_device_result_1 = configure_device(PTR_DAT_080054f4, device_config, 0);\n  if (configure_device_result_1 != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 0x1ab);\n  }\n\n  configure_device_result_2 = configure_device(PTR_DAT_080054f4, device_config, 0xc);\n  if (configure_device_result_2 != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 0x1b0);\n  }\n\n  uint32_t checksum_values[] = {0, 0, 0, 0, 0, 0x2000, 0};\n  calculate_checksum_result = calculate_checksum(PTR_DAT_080054f4, checksum_values);\n  if (calculate_checksum_result != 0) {\n    infinite_loop(PTR_s____src_main_c_080054fc, 0x1bc);\n  }\n\n  process_if_param_equals_constant(PTR_DAT_080054f4);\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_08003a94",
                "FUN_08005680",
                "FUN_080042de",
                "FUN_080035a4",
                "FUN_08003908",
                "FUN_08003640",
                "FUN_0800422e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_device_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "calculate_result_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit",
                "unaff_r4": "temp4",
                "uVar2": "mask_shifted",
                "uVar3": "temp2",
                "in_r12": "mask",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_0800088a(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask = 0x80000000;\n  bool is_zero;\n  \n  temp1 = input1;\n  temp2 = input2;\n  temp3 = input3;\n  temp4 = input4;\n  \n  if (temp4 >> 0x14 != 0 && temp4 >> 0x14 != temp4) {\n    if (temp4 == temp3 && (temp1 | temp2 << 0xc) == 0) {\n      if (temp4 >> 0x14 != temp4) {\n        return (ulonglong)((temp2 ^ temp4) & mask | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp4 >> 0x14 == temp4 && (temp3 | temp4 << 0xc) == 0) {\n      return (ulonglong)((temp2 ^ temp4) & mask) << 0x20;\n    }\n    else {\n      is_zero = (temp1 | temp2 << 1) == 0 || (temp3 | temp4 << 1) == 0;\n      if (!is_zero) {\n        if (temp4 == 0) {\n          uint carry = 0;\n          while ((temp2 & 0x100000) == 0) {\n            uint bit = temp1 & mask;\n            temp1 = temp1 << 1;\n            temp2 = temp2 * 2 + carry + (bit != 0);\n            carry = bit >> 31;\n          }\n          temp2 = temp2 | (temp4 & mask);\n          if (temp4 >> 0x14 != 0) {\n            return ((ulonglong)temp2 << 0x20) | temp1;\n          }\n        }\n        uint carry = 0;\n        while ((temp4 & 0x100000) == 0) {\n          uint bit = temp3 & mask;\n          temp3 = temp3 << 1;\n          temp4 = temp4 * 2 + carry + (bit != 0);\n          carry = bit >> 31;\n        }\n        return ((ulonglong)temp2 << 0x20) | temp1;\n      }\n      if ((temp1 | temp2 << 1) == 0) {\n        return (ulonglong)((temp2 ^ temp4) & mask | 0x7ff00000) << 0x20;\n      }\n      else {\n        return (ulonglong)((temp2 ^ temp4) & mask) << 0x20;\n      }\n    }\n  }\n  return ((ulonglong)temp2 << 0x20) | temp1 | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "calculate_result_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "is_param_in_range_080016d0",
                "param_1": "param",
                "bVar1": "is_in_range",
                "DAT_08001710": "ptr_dat",
                "MAX_RANGE": "0x1000000"
            },
            "code": "bool is_param_in_range_080016d0(int param){\n\n    bool is_in_range;\n    const unsigned int MAX_RANGE = 0x1000000;\n    int* DAT_08001710 = DAT_08001710;\n    \n    is_in_range = (param - 1U) < MAX_RANGE;\n    \n    if (is_in_range) {\n        DAT_08001710[1] = param - 1;\n        update_data_08001618(0xffffffff, 0xf);\n        DAT_08001710[2] = 0;\n        *DAT_08001710 = 7;\n    }\n    \n    return !is_in_range;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "is_param_in_range_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "check_and_get_result_08001ccc",
                "param_1": "pointer",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "value1",
                "uVar4": "value3",
                "uVar6": "result",
                "iVar2": "value1",
                "iVar5": "value4",
                "cVar3": "isOne",
                "puVar7": "pointer9",
                "bVar8": "isZero"
            },
            "code": "uint check_and_get_result_08001ccc(uint **pointer, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint *param_5, uint16_t param_6, uint32_t param_7)\n{\n  uint value1 = get_value_from_pointer();\n  uint value2 = DAT_08001f64;\n  if (*(char *)((int)pointer + 0x3d) != ' ')\n    return 2;\n  while (1)\n  {\n    if ((value2 >> 0x10 & 0xff) == 1)\n    {\n      uint value3 = value2 & ~(*pointer)[5] & 0xffff;\n      bool isZero = value3 == 0;\n      char cVar3 = isZero ? 1 : 0;\n      if (!isZero)\n        cVar3 = 0;\n    }\n    else\n    {\n      uint value3 = value2 & ~(*pointer)[6] & 0xffff;\n      bool isZero = value3 == 0;\n      char cVar3 = isZero ? 1 : 0;\n      if (!isZero)\n        cVar3 = 0;\n    }\n    if (cVar3 != '\\x01')\n      break;\n    uint value4 = get_value_from_pointer();\n    if ((uint)(value4 - value1) >= 0x1a)\n      goto LAB_08001d9c;\n  }\n  (*pointer)[12] = (uint *)0x0;\n  *(undefined *)((int)pointer + 0x3d) = 0x20;\n  *(undefined *)((int)pointer + 0x3e) = 0;\n  *(undefined *)(pointer + 0xf) = 0;\n  return 0;\nLAB_08001d9c:\n  if (value4 == 0)\n  {\n    if (*(char *)(pointer + 0xf) == '\\x01')\n      return 2;\n    *(undefined *)(pointer + 0xf) = 1;\n    if ((**pointer & 1) != 1)\n      **pointer |= 1;\n    **pointer &= 0xfffff7ff;\n    *(undefined *)((int)pointer + 0x3d) = 0x21;\n    *(undefined *)((int)pointer + 0x3e) = 0x40;\n    (*pointer)[16] = (uint *)0x0;\n    pointer[9] = param_5;\n    *(uint16_t *)((int)pointer + 0x2a) = param_6;\n    pointer[11] = DAT_08001f68;\n    *(uint16_t *)(pointer + 10) = *(uint16_t *)((int)pointer + 0x2a);\n    uint result = check_and_get_result_08001ccc_08002640(pointer, param_2, param_3, param_4, param_7, value1);\n    if (result != 0)\n    {\n      if (pointer[16] == (uint *)0x4)\n        **pointer |= 0x200;\n      return result != 1 ? 3 : 1;\n    }\n    while (*(uint16_t *)(pointer + 10) != 0)\n    {\n      uint result2 = check_flag_and_get_result_08002bb4(pointer, param_7, value1);\n      if (result2 != 0)\n      {\n        if (pointer[16] == (uint *)0x4)\n        {\n          **pointer |= 0x200;\n          return 1;\n        }\n        return 3;\n      }\n      uint *pointer9 = pointer[9];\n      pointer[9] = (uint *)((int)pointer9 + 1);\n      (*pointer)[4] = (uint)*(byte *)pointer9;\n      *(uint16_t *)(pointer + 10) += -1;\n      *(uint16_t *)((int)pointer + 0x2a) += -1;\n      if (((*pointer)[5] & 4) == 4 && *(uint16_t *)(pointer + 10) != 0)\n      {\n        uint *pointer9 = pointer[9];\n        pointer[9] = (uint *)((int)pointer9 + 1);\n        (*pointer)[4] = (uint)*(byte *)pointer9;\n        *(uint16_t *)(pointer + 10) += -1;\n        *(uint16_t *)((int)pointer + 0x2a) += -1;\n      }\n    }\n    uint result3 = check_flag_08002c2e(pointer, param_7, value1);\n    if (result3 == 0)\n    {\n      **pointer |= 0x200;\n      *(undefined *)((int)pointer + 0x3d) = 0x20;\n      *(undefined *)((int)pointer + 0x3e) = 0;\n      *(undefined *)(pointer + 0xf) = 0;\n      return 0;\n    }\n    if (pointer[16] == (uint *)0x4)\n    {\n      **pointer |= 0x200;\n      return 1;\n    }\n    return 3;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "check_and_get_result_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "add_byte_to_int_and_store_as_uint_0800157c",
                "PTR_DAT_0800159c": "uint_ptr",
                "PTR_DAT_08001598": "byte_ptr",
                "uint": "uint",
                "byte": "byte",
                "int": "int",
                "*uint_ptr": "uint_val",
                "*int_ptr": "int_val",
                "*byte_ptr": "byte_val",
                "result": "result"
            },
            "code": "void add_byte_to_int_and_store_as_uint_0800157c(void)\n{\n  uint *PTR_DAT_0800159c = (uint*)PTR_DAT_0800159c;\n  int *int_ptr = (int*)PTR_DAT_0800159c;\n  byte *PTR_DAT_08001598 = (byte*)PTR_DAT_08001598;\n  uint uint_val = *PTR_DAT_0800159c;\n  int int_val = *int_ptr;\n  byte byte_val = *PTR_DAT_08001598;\n  uint result = (uint)(byte_val) + (uint)(int_val);\n  *PTR_DAT_0800159c = result;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "add_byte_to_int_and_store_as_uint_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_value_from_pointer_08005d14",
                "PTR_PTR_DAT_08005d1c": "pointer_to_pointer"
            },
            "code": "int get_value_from_pointer_08005d14() {\n    int *PTR_PTR_DAT_08005d1c = (int *)PTR_PTR_DAT_08005d1c;\n    int value = *PTR_PTR_DAT_08005d1c;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "setParam_080015b4",
                "param_1": "param",
                "PTR_080015f8": "ptr",
                "DAT_080015f8": "data",
                "mask": "mask",
                "value": "value"
            },
            "code": "void setParam_080015b4(uint param) {\n    uint* PTR_080015f8 = (uint*)(DAT_080015f8 + 0xc);\n    uint mask = 0xf8ff;\n    uint value = (param & 7) << 8 | 0x5fa0000;\n    *PTR_080015f8 = (*PTR_080015f8 & mask) | value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "setParam_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "flag_ptr",
                "PTR_": "",
                "DAT_": "",
                "flag_c": "flag_current",
                "flag_10": "flag_10th"
            },
            "code": "void process_flags_080036f8(int *flag_ptr)\n{\n    int flag_c = *(uint*)(*flag_ptr + 0xc);\n    int flag_10 = *(uint*)(*flag_ptr + 0x10);\n    \n    if ((flag_10 & 2) && (flag_c & 2))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xfffffffd;\n        *(undefined *)(flag_ptr + 7) = 1;\n        if ((*(uint *)(*flag_ptr + 0x18) & 3) == 0)\n        {\n            do_nothing_08003c4a(flag_ptr);\n            do_nothing_08003c6e(flag_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flag_ptr);\n        }\n        *(undefined *)(flag_ptr + 7) = 0;\n    }\n    if ((flag_10 & 4) && (flag_c & 4))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xfffffffb;\n        *(undefined *)(flag_ptr + 7) = 2;\n        if ((*(uint *)(*flag_ptr + 0x18) & 0x300) == 0)\n        {\n            do_nothing_08003c4a(flag_ptr);\n            do_nothing_08003c6e(flag_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flag_ptr);\n        }\n        *(undefined *)(flag_ptr + 7) = 0;\n    }\n    if ((flag_10 & 8) && (flag_c & 8))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xfffffff7;\n        *(undefined *)(flag_ptr + 7) = 4;\n        if ((*(uint *)(*flag_ptr + 0x1c) & 3) == 0)\n        {\n            do_nothing_08003c4a(flag_ptr);\n            do_nothing_08003c6e(flag_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flag_ptr);\n        }\n        *(undefined *)(flag_ptr + 7) = 0;\n    }\n    if ((flag_10 & 0x10) && (flag_c & 0x10))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xffffffef;\n        *(undefined *)(flag_ptr + 7) = 8;\n        if ((*(uint *)(*flag_ptr + 0x1c) & 0x300) == 0)\n        {\n            do_nothing_08003c4a(flag_ptr);\n            do_nothing_08003c6e(flag_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flag_ptr);\n        }\n        *(undefined *)(flag_ptr + 7) = 0;\n    }\n    if ((flag_10 & 1) && (flag_c & 1))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xfffffffe;\n        process_input_data_08004f78(flag_ptr);\n    }\n    if ((flag_10 & 0x80) && (flag_c & 0x80))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xffffff7f;\n        do_nothing_08004378(flag_ptr);\n    }\n    if ((flag_10 & 0x40) && (flag_c & 0x40))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xffffffbf;\n        do_nothing_08003c80(flag_ptr);\n    }\n    if ((flag_10 & 0x20) && (flag_c & 0x20))\n    {\n        *(undefined4 *)(*flag_ptr + 0x10) = 0xffffffdf;\n        do_nothing_08004366(flag_ptr);\n    }\n}",
            "called": [
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08004366",
                "FUN_08003c6e",
                "FUN_08004f78",
                "FUN_08003c4a",
                "FUN_08004378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_flags_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_bits_in_uint_at_offset_080041a8",
                "param_1": "data",
                "param_2": "bits_to_set",
                "param_3": "num_bits_to_set",
                "param_4": "offset",
                "*(uint *)(param_1 + 8)": "*(uint *)(data + 8)",
                "& 0xffff00ff": "& ~(mask << offset)",
                "|": "|",
                "<<": "<<",
                "uint": "uint",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_bits_in_uint_at_offset_080041a8(uint8_t* data, uint offset, uint bits_to_set, uint num_bits_to_set) {\n    uint mask = (1 << num_bits_to_set) - 1;\n    uint shifted_bits = bits_to_set << offset;\n    uint masked_data = *(uint *)(data + 8) & ~(mask << offset);\n    *(uint *)(data + 8) = masked_data | shifted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_at_offset_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = binary_conversion_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08005e9c",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_function_address_08008ad4",
                "puVar1": "function_address",
                "PTR_PTR_DAT_08008ae8": "pointer_to_pointer_DAT_08008ae8",
                "PTR_DAT_08008aec": "pointer_DAT_08008aec"
            },
            "code": "undefined* get_function_address_08008ad4()\n{\n    undefined* function_address = *(undefined**)(*(int*)PTR_PTR_DAT_08008ae8 + 0x34);\n    if (function_address == (undefined*)0x0)\n    {\n        function_address = PTR_DAT_08008aec;\n    }\n    return function_address + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_function_address_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "check_if_string_terminated_080009e8",
                "in_CY": "input_char",
                "check_for_overlap_08000978": "check_for_overlap"
            },
            "code": "bool check_if_string_terminated_080009e8(void)\n{\n  char input_char;\n  check_for_overlap();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "check_if_string_terminated_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "code": "void infinite_loop_08005674() {\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "calculate_shifts_and_bits_08009630_08009630",
                "param_1": "data_id",
                "param_2": "unused",
                "param_3": "bit_count",
                "param_4": "bit_mask",
                "param_5": "shifts",
                "param_6": "bits_set",
                "iVar1": "data_ptr",
                "uVar2": "bits_shifted",
                "iVar3": "num_bits_set",
                "iVar4": "data_size",
                "uVar5": "bits_shifted_masked",
                "uVar6": "data_type",
                "uVar7": "bit_shifts",
                "local_20": "bits_set_count",
                "local_1c": "masked_bits"
            },
            "code": "int calculate_shifts_and_bits_08009630_08009630(undefined4 data_id, undefined4 unused, uint bit_count, uint bit_mask, int *shifts, int *bits_set)\n{\n  int data_ptr;\n  int num_bits_set;\n  int data_size;\n  int data_type;\n  uint masked_bits;\n  uint bits_shifted;\n  undefined8 bit_shifts;\n  uint bits_set_count;\n\n  data_ptr = allocate_or_get_existing_data_080090c0(data_id, 1);\n  data_type = (bit_mask << 1) >> 0x15;\n  masked_bits = bit_mask & 0xfffff;\n\n  if (data_type != 0)\n  {\n    masked_bits |= 0x100000;\n  }\n\n  if (bit_count == 0)\n  {\n    num_bits_set = count_set_bits_080091e4(&masked_bits);\n    data_size = 1;\n    bits_shifted = num_bits_set + 0x20;\n    *(undefined4 *)(data_ptr + 0x10) = 1;\n    *(uint *)(data_ptr + 0x14) = masked_bits;\n  }\n  else\n  {\n    bits_set_count = count_set_bits_080091e4(&bit_count);\n\n    if (bits_set_count == 0)\n    {\n      *(uint *)(data_ptr + 0x14) = bit_count;\n    }\n    else\n    {\n      bits_shifted = masked_bits << (0x20 - bits_set_count & 0xff);\n      masked_bits = masked_bits >> (bits_set_count & 0xff);\n      *(uint *)(data_ptr + 0x14) = bits_shifted | bit_count;\n    }\n\n    if (masked_bits == 0)\n    {\n      data_size = 1;\n    }\n    else\n    {\n      data_size = 2;\n    }\n\n    *(uint *)(data_ptr + 0x18) = masked_bits;\n    *(int *)(data_ptr + 0x10) = data_size;\n  }\n\n  if (data_type == 0)\n  {\n    *shifts = bits_shifted - 0x432;\n    bit_shifts = count_left_shifts_080091a4(*(undefined4 *)(data_ptr + data_size * 4 + 0x10));\n    *bits_set = (int)((ulonglong)bit_shifts >> 0x20) * 0x20 - (int)bit_shifts;\n    return data_ptr;\n  }\n\n  *shifts = (data_type - 0x433) + bits_shifted;\n  *bits_set = 0x35 - bits_shifted;\n  return data_ptr;\n}",
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifts_and_bits_08009630_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_flags_and_values_08004104",
                "param_1": "data_address",
                "param_2": "flag_value",
                "param_3": "data_value",
                "*(uint *)(param_1 + 0x20)": "*data_flags",
                "*(uint *)(param_1 + 0x18)": "*data_values",
                "0xffffffef": "0b11101111",
                "0xffff0fff": "0b11111111111100001111111111111111",
                "0xffffff5f": "0b11111111111111111111111101011111"
            },
            "code": "void set_flags_and_values_08004104(int data_address, int flag_value, int data_value) {\n    uint* data_flags = (uint*)(data_address + 0x20);\n    uint* data_values = (uint*)(data_address + 0x18);\n    *data_flags &= 0xffffffef;\n    *data_values = (data_value << 0xc) | (*data_values & 0xffff0fff);\n    *data_flags = (flag_value << 4) | (*data_flags & 0xffffff5f);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "is_end_of_string_08000ff4",
                "in_CY": "current_char",
                "combine_params_08000fd0": "combine_params"
            },
            "code": "bool is_end_of_string_08000ff4(void)\n{\n  char current_char;\n  combine_params();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "process_flags_08005714",
                "PTR_DAT_08005724": "PTR_FLAGS",
                "process_flags_080036f8": "process_flags_helper"
            },
            "code": "void process_flags_08005714(void)\n{\n  process_flags_08005714_helper(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "process_flags_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "param_1": "input",
                "iVar1": "bit_index",
                "puVar2": "word_ptr",
                "iVar3": "leading_zeroes",
                "uVar4": "word"
            },
            "code": "int find_first_set_bit_08005e40(uint32_t input)\n{\n  int bit_index = -(input & 3);\n  uint32_t word = *(uint32_t *)(input & 0xfffffffc);\n  if ((input & 3) != 0) {\n    word |= 0xffffffffU >> ((bit_index + 4U & 0x1f) << 3);\n  }\n  while (word == 0) {\n    word = *(uint32_t *)((input += 4) & 0xfffffffc);\n    bit_index += 32;\n  }\n  return bit_index + __builtin_ctz(~word);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "init_func_args",
                "iVar2": "i",
                "ppcVar3": "func_ptr",
                "iVar4": "num_functions"
            },
            "code": "void execute_functions_08005d20(void)\n{\n  int num_functions = (int)PTR_FUNC_END - (int)PTR_FUNC_START >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **func_ptr = (code **)PTR_FUNC_START;\n    do {\n      i++;\n      (**func_ptr)();\n      func_ptr++;\n    } while (num_functions != i);\n  }\n  code **init_func_ptr = (code **)PTR_INIT_FUNC_PTR;\n  undefined *init_func_args = PTR_INIT_FUNC_ARGS;\n  do_nothing_08009e68();\n  int num_init_funcs = (int)init_func_args - (int)init_func_ptr >> 2;\n  if (num_init_funcs != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**init_func_ptr)();\n      init_func_ptr++;\n    } while (num_init_funcs != i);\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_080078a0",
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "uint32_t",
                "*(uint *)": "*(uint32_t *)",
                "ushort": "uint16_t"
            },
            "code": "void set_param_value_08001a80(uint32_t base_address, uint16_t value, char is_shifted) {\n  if (is_shifted == 0) {\n    *(uint32_t *)(base_address + 0x10) = (uint32_t)value << 0x10;\n  }\n  else {\n    *(uint32_t *)(base_address + 0x10) = (uint32_t)value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_param_value_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "code": "uint calculate_08005838(uint input1, uint input2, uint input3, uint input4)\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  temp6 = CONCAT44(DAT_080059bc,DAT_080059b8);\n  temp4 = input4 & 0x7fffffff;\n  if ((DAT_080059e8 < (temp4 | (-input3 | input3) >> 0x1f)) || (temp5 = input2 & 0x7fffffff, DAT_080059e8 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = calculate_08005838_helper(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = FUNC_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return DAT_080059b0;\n    }\n    temp4 = DAT_080059a0;\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else {\n    if ((temp4 | input3) != 0) {\n      if (temp4 == DAT_080059e8) {\n        if (temp5 == temp4) {\n          if (temp3 == 2) {\n            return DAT_080059e0;\n          }\n          if (temp3 == 3) {\n            return DAT_080059d8;\n          }\n          if (temp3 == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (temp3 == 2) {\n          return DAT_080059b0;\n        }\n        if (temp3 == 3) {\n          return DAT_080059a0;\n        }\n        if (temp3 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (temp5 != DAT_080059e8) {\n        temp1 = (int)(temp5 - temp4) >> 0x14;\n        if (temp1 < 0x3d) {\n          if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n            temp6 = 0;\n          }\n          else {\n            calculate_08005838_helper(input1,input2,input3,input4,input4);\n            do_nothing_08005d0c();\n            temp6 = FUNC_080059f0();\n          }\n        }\n        temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n        temp4 = (uint)temp6;\n        if (temp3 == 1) {\n          return temp4;\n        }\n        if (temp3 == 2) {\n          temp6 = calculate_08005838_helper(temp4,temp2,DAT_080059a8,DAT_080059ac);\n          temp4 = calculate_08005838_helper(DAT_080059b0,DAT_080059b4,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n          return temp4;\n        }\n        if (temp3 == 0) {\n          return temp4;\n        }\n        temp6 = calculate_08005838_helper(temp4,temp2,DAT_080059a8,DAT_080059ac);\n        temp4 = calculate_08005838_helper((int)temp6,(int)((ulonglong)temp6 >> 0x20),DAT_080059b0,DAT_080059b4);\n        return temp4;\n      }\n    }\n    temp4 = DAT_080059c0;\n    if (-1 < (int)input2) {\n      temp4 = DAT_080059b8;\n    }\n  }\n  return temp4;\n}",
            "called": [
                "FUN_08000158",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_080059f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_ptr_data_080090a8",
                "PTR_DAT_080090b0": "PTR_DATA"
            },
            "code": "void do_nothing_with_ptr_data_080090a8(void)\n{\n  do_nothing_with_ptr(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_ptr_data_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "check_interrupt_and_print_message_08004e74",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_08004ea0": "interrupt_flag",
                "print_interrupt_message_08004e6c": "print_interrupt_message"
            },
            "code": "int check_interrupt_and_print_message_08004e74(int param) {\n  int PTR_DAT_08004ea0 = *(int *)PTR_DAT_08004ea0;\n  int result;\n  if (PTR_DAT_08004ea0 == 0) {\n    result = print_interrupt_message_08004e6c(1, param, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "check_interrupt_and_print_message_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "convert_to_float_080096e0",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "param_3": "exponent",
                "param_4": "sign_bit",
                "iVar1": "max_exponent",
                "uVar3": "absolute_fractional_part",
                "uVar4": "combined",
                "iVar2": "rounding_error",
                "FUNC_080004c8": "convert_to_float_bits"
            },
            "code": "uint32_t convert_to_float_080096e0(uint32_t integer_part, uint32_t fractional_part, int* exponent, uint32_t sign_bit)\n{\n    int max_exponent = MAX_EXPONENT;\n    uint64_t combined = ((uint64_t)fractional_part << 32) | integer_part;\n    uint32_t absolute_fractional_part = fractional_part & 0x7fffffff;\n    *exponent = 0;\n    if (((int)absolute_fractional_part <= max_exponent) && ((absolute_fractional_part | integer_part) != 0)) {\n        if (absolute_fractional_part < 0x100000) {\n            uint64_t float_bits = convert_to_float_080096e0_bits(integer_part, fractional_part, 0, ROUNDING_MODE, sign_bit);\n            *exponent = -54;\n            absolute_fractional_part = (uint32_t)((float_bits >> 32) & 0x7fffffff);\n        }\n        integer_part = (uint32_t)combined;\n        fractional_part = (uint32_t)((combined >> 32) & 0x800fffff) | 0x3fe00000;\n        *exponent = ((int)absolute_fractional_part >> 20) + -1022 + *exponent;\n    }\n    return ((uint64_t)fractional_part << 32) | integer_part;\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "convert_to_float_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "extract_data_0800910c",
                "param_1": "data_address",
                "param_2": "output_data",
                "iVar1": "data_pointer"
            },
            "code": "void extract_data_0800910c(int data_address, undefined4 *output_data)\n{\n  int data_pointer;\n  \n  if (output_data != (undefined4 *)0x0) {\n    data_pointer = *(int *)(data_address + 0x4c);\n    *output_data = *(undefined4 *)(data_pointer + output_data[1] * 4);\n    *(undefined4 **)(data_pointer + output_data[1] * 4) = output_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "extract_data_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "calculate_result_and_update_data_080052a0",
                "local_44": "param8",
                "local_40": "param9",
                "local_3c": "param10",
                "local_38": "param11",
                "local_34": "param12",
                "local_30": "param1",
                "local_2c": "param2",
                "local_28": "param3",
                "local_20": "param4",
                "local_14": "param5",
                "local_10": "param6",
                "local_c": "param7",
                "PTR_s____src_main_c_08005340": "s____src_main_c_08005340",
                "DAT_08005344": "DAT_08005344"
            },
            "code": "void calculate_result_and_update_data_080052a0(void)\n{\n  longlong result;\n  int error_code;\n  ulonglong value_from_pointer;\n  \n  int param1 = 1;\n  int param2 = 65536;\n  int param3 = 0;\n  int param4 = 1;\n  int param5 = 2;\n  int param6 = 65536;\n  int param7 = 1835008;\n  error_code = check_params(&param1);\n  if (error_code != 0) {\n    handle_error(\"PTR_s____src_main_c_08005340\",0x151);\n  }\n  \n  int param8 = 15;\n  int param9 = 2;\n  int param10 = 128;\n  int param11 = 0;\n  int param12 = 0;\n  error_code = check_and_calculate_result(&param8, 2);\n  if (error_code != 0) {\n    handle_error(\"PTR_s____src_main_c_08005340\",0x15e);\n  }\n  \n  value_from_pointer = get_value_from_pointer();\n  result = (ulonglong)DAT_08005344 * (value_from_pointer & 0xffffffff);\n  check_param_range((uint)((ulonglong)result >> 0x26),(int)(value_from_pointer >> 0x20),(int)result);\n  set_flag_if_param1_equals_param4(4);\n  update_data_with_bits(0xffffffff,0,0);\n  return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_08003504",
                "FUN_08001762",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08002d98",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "calculate_result_and_update_data_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_polynomial_08009120",
                "param_1": "degree",
                "param_2": "coefficients",
                "param_3": "base",
                "param_4": "result",
                "puVar1": "new_coefficients",
                "uVar2": "product",
                "iVar3": "base_degree",
                "puVar4": "current_coefficient",
                "iVar5": "data_address",
                "iVar6": "i",
                "iVar7": "n",
                "carry": "carry"
            },
            "code": "undefined4* calculate_polynomial_08009120(int degree, undefined4* coefficients, int base, uint result) {\n    undefined4* new_coefficients;\n    uint carry = 0;\n    int i = 0;\n    int n = coefficients[4];\n    uint* current_coefficient = coefficients + 5;\n    while (i < n) {\n        i++;\n        result = base * (*current_coefficient & 0xffff) + result;\n        uint product = base * (*current_coefficient >> 0x10) + (result >> 0x10);\n        *current_coefficient = (result & 0xffff) + product * 0x10000;\n        result = product >> 0x10;\n        current_coefficient++;\n    }\n    new_coefficients = coefficients;\n    if (result != 0) {\n        if ((int)coefficients[2] <= n) {\n            new_coefficients = (undefined4*)allocate_or_get_existing_data_080090c0(degree, coefficients[1] + 1);\n            copy_memory_block_08001084(new_coefficients + 3, coefficients + 3, (coefficients[4] + 2) * 4);\n            int data_address = *(int*)(degree + 0x4c);\n            *coefficients = *(undefined4*)(data_address + coefficients[1] * 4);\n            *(undefined4**)(data_address + coefficients[1] * 4) = coefficients;\n        }\n        new_coefficients[n + 5] = result;\n        new_coefficients[4] = n + 1;\n    }\n    return new_coefficients;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_polynomial_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_block_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "i",
                "uVar5": "remaining_size",
                "bVar6": "is_aligned"
            },
            "code": "undefined4 *copy_memory_block_08001084(undefined4 *destination, undefined4 *source, uint size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint i;\n  bool is_aligned = (((uint)source | (uint)destination) & 3) == 0;\n  if (!is_aligned) {\n    if (size < 8) {\n      remaining_size = size - 4;\n      if (remaining_size > 3) {\n        do {\n          *destination = *source;\n          destination = (undefined4 *)((int)destination + 1);\n          source = (undefined4 *)((int)source + 1);\n          remaining_size--;\n        } while (remaining_size > 0);\n        *(undefined *)(undefined4 *)((int)destination + 1) = *(undefined *)(undefined4 *)((int)source + 1);\n        *(undefined *)((int)destination + 2) = *(undefined *)((int)source + 2);\n        *(undefined *)((int)destination + 3) = *(undefined *)((int)source + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remaining_size = 4 - ((uint)destination & 3);\n      size -= remaining_size;\n      src_ptr = source;\n      dest_ptr = destination;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      if ((remaining_size & 2) != 0) {\n        dest_ptr = (undefined4 *)((int)dest_ptr + 2);\n        src_ptr = (undefined4 *)((int)src_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  for (i = 0; i < size / 16; i++) {\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = src_ptr[1];\n    dest_ptr[2] = src_ptr[2];\n    dest_ptr[3] = src_ptr[3];\n    dest_ptr[4] = src_ptr[4];\n    dest_ptr[5] = src_ptr[5];\n    dest_ptr[6] = src_ptr[6];\n    dest_ptr[7] = src_ptr[7];\n    dest_ptr[8] = src_ptr[8];\n    dest_ptr[9] = src_ptr[9];\n    dest_ptr[10] = src_ptr[10];\n    dest_ptr[11] = src_ptr[11];\n    dest_ptr[12] = src_ptr[12];\n    dest_ptr[13] = src_ptr[13];\n    dest_ptr[14] = src_ptr[14];\n    dest_ptr[15] = src_ptr[15];\n    dest_ptr += 16;\n    src_ptr += 16;\n  }\n  remaining_size = size % 16;\n  if (remaining_size > 12) {\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = src_ptr[1];\n    dest_ptr[2] = src_ptr[2];\n    dest_ptr[3] = src_ptr[3];\n    dest_ptr += 4;\n    src_ptr += 4;\n    remaining_size -= 16;\n  }\n  if (remaining_size > 7) {\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = src_ptr[1];\n    dest_ptr[2] = src_ptr[2];\n    dest_ptr[3] = src_ptr[3];\n    dest_ptr[4] = src_ptr[4];\n    dest_ptr[5] = src_ptr[5];\n    dest_ptr[6] = src_ptr[6];\n    dest_ptr[7] = src_ptr[7];\n    dest_ptr += 8;\n    src_ptr += 8;\n    remaining_size -= 8;\n  }\n  if (remaining_size > 3) {\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = src_ptr[1];\n    dest_ptr[2] = src_ptr[2];\n    dest_ptr[3] = src_ptr[3];\n    dest_ptr += 4;\n    src_ptr += 4;\n    remaining_size -= 4;\n  }\n  if (remaining_size > 0) {\n    *(undefined *)dest_ptr = *(undefined *)src_ptr;\n    if ((remaining_size & 2) != 0) {\n      *(undefined2 *)((int)dest_ptr + (remaining_size & 0xfffffffe)) = *(undefined2 *)((int)src_ptr + (remaining_size & 0xfffffffe));\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_080097cc",
                "FUN_08009120",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "copy_memory_block_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "process_if_param_equals_constant_08005680",
                "param_1": "param_ptr",
                "local_18": "local_var_1",
                "local_14": "local_var_2",
                "local_c": "local_var_3"
            },
            "code": "void process_if_param_equals_constant_08005680(int *param_ptr)\n{\n    int constant = DAT_080056b4;\n    int local_var_1 = 0x900;\n    int local_var_2 = 2;\n    int local_var_3 = 2;\n\n    if (*param_ptr == constant) {\n        process_data_080017c4(DAT_080056b8, &local_var_1);\n    }\n    return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "process_if_param_equals_constant_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "check_and_calculate_result_08003260",
                "param_1": "params",
                "param_2": "param_count",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "mask",
                "uVar4": "result",
                "*DAT_08003430": "bitmask",
                "*param_1": "*params",
                "DAT_08003434": "flags",
                "PTR_DAT_0800343c": "result_ptr",
                "PTR_DAT_08003438": "flags_shift",
                "calculate_result_08003440": "calculate_mask",
                "check_param_range_0800151c": "check_param_range",
                "get_value_from_pointer_080015a0": "get_value_from_pointer"
            },
            "code": "int check_and_calculate_result_08003260(uint *params, uint param_count)\n{\n  int iVar1;\n  int iVar2;\n  uint mask;\n  int result;\n  \n  if (((**DAT_08003430 & 7) < param_count) &&\n     (**DAT_08003430 = param_count | **DAT_08003430 & 0xfffffff8, param_count != (**DAT_08003430 & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*params & 2) != 0) {\n      DAT_08003434[1] = params[2] | DAT_08003434[1] & 0xffffff0f;\n    }\n    if ((*params & 1) == 0) {\n      while (1) {\n        if ((param_count < (**DAT_08003430 & 7)) &&\n           (**DAT_08003430 = param_count | **DAT_08003430 & 0xfffffff8, param_count != (**DAT_08003430 & 7))) {\n          result = 1;\n          break;\n        }\n        else {\n          if ((*params & 4) != 0) {\n            DAT_08003434[1] = params[3] | DAT_08003434[1] & 0xfffff8ff;\n          }\n          if ((*params & 8) != 0) {\n            DAT_08003434[1] = params[4] << 3 | DAT_08003434[1] & 0xffffc7ff;\n          }\n          mask = calculate_mask();\n          *(uint *)PTR_DAT_0800343c = mask >> DAT_08003434[(DAT_08003434[1] >> 4) & 0xf];\n          check_param_range(0xf);\n          result = 0;\n          break;\n        }\n      }\n    }\n    else {\n      if (params[1] == 1) {\n        if ((*DAT_08003434 & 0x20000) == 0) {\n          result = 1;\n          return result;\n        }\n      }\n      else if ((params[1] != 2) && ((*DAT_08003434 & 2) == 0)) {\n        result = 1;\n        return result;\n      }\n      DAT_08003434[1] = params[1] | DAT_08003434[1] & 0xfffffffc;\n      iVar1 = get_value_from_pointer();\n      if (params[1] == 1) {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 4) break;\n          iVar2 = get_value_from_pointer();\n          if ((uint)(iVar2 - iVar1) >= 0x1389) {\n            result = 3;\n            break;\n          }\n        }\n      }\n      else if (params[1] == 2) {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 8) break;\n          iVar2 = get_value_from_pointer();\n          if ((uint)(iVar2 - iVar1) >= 0x1389) {\n            result = 3;\n            break;\n          }\n        }\n      }\n      else {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 0) break;\n          iVar2 = get_value_from_pointer();\n          if ((uint)(iVar2 - iVar1) >= 0x1389) {\n            result = 3;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08003440",
                "FUN_0800151c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "check_and_calculate_result_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_and_set_values_08001ab0",
                "param_1": "data",
                "uVar1": "value1",
                "cVar2": "flag1",
                "uVar4": "value2",
                "bVar5": "flag2"
            },
            "code": "int calculate_and_set_values_08001ab0(uint** data)\n{\n  int result;\n  uint value1;\n  char flag1;\n  uint value2;\n  bool flag2;\n\n  if (data == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == 0) {\n      *(undefined *)(data + 0xf) = 0;\n      do_nothing_08001cb8(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 0x24;\n    **data &= 0xfffffffe;\n    value1 = get_shifted_value_from_pointer_08003518();\n    if (PTR_DAT_08001ca4 < data[1]) {\n      value2 = value1;\n      if (value1 <= PTR_DAT_08001cac) {\n        value2 = 1;\n      }\n      flag1 = (char)value2;\n      if (PTR_DAT_08001cac < value1) {\n        flag1 = 0;\n      }\n    }\n    else {\n      value2 = value1;\n      if (value1 <= PTR_DAT_08001ca8) {\n        value2 = 1;\n      }\n      flag1 = (char)value2;\n      if (PTR_DAT_08001ca8 < value1) {\n        flag1 = 0;\n      }\n    }\n    if (flag1 == 0) {\n      value2 = (uint)((ulonglong)PTR_DAT_08001cb0 * (ulonglong)value1 >> 0x32);\n      (*data)[1] = value2;\n      if (PTR_DAT_08001ca4 < data[1]) {\n        value2 = (uint)((ulonglong)PTR_DAT_08001cb4 * (ulonglong)(value2 * 300) >> 0x26);\n      }\n      (*data)[8] = value2 + 1;\n      if (PTR_DAT_08001ca4 < data[1]) {\n        if (data[2] == NULL) {\n          value2 = (value1 - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff;\n          flag2 = value2 == 0;\n          if (flag2) {\n            value2 = 1;\n          }\n          flag1 = (char)value2;\n          if (!flag2) {\n            flag1 = 0;\n          }\n        }\n        else {\n          value2 = (value1 - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff;\n          flag2 = value2 == 0;\n          if (flag2) {\n            value2 = 1;\n          }\n          flag1 = (char)value2;\n          if (!flag2) {\n            flag1 = 0;\n          }\n        }\n        if (flag1 == 0) {\n          if (data[2] == NULL) {\n            value1 = (value1 - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            value1 = (value1 - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          value1 = 1;\n        }\n      }\n      else {\n        value1 = (value1 - 1) / (uint)((int)data[1] << 1) + 1 & 0xfff;\n        if (value1 < 4) {\n          value1 = 4;\n        }\n      }\n      **data = (uint)data[8] | (uint)data[7];\n      (*data)[2] = (uint)data[3] | (uint)data[4];\n      (*data)[3] = (uint)data[6] | (uint)data[5];\n      **data |= 1;\n      data[0x10] = NULL;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0xc] = NULL;\n      *(undefined *)((int)data + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_and_set_values_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_value_shifted_by_pointer_index_08003540",
                "uVar1": "value",
                "PTR_DAT_08003564": "pointer_shifts",
                "DAT_08003560": "pointer_data"
            },
            "code": "unsigned int get_value_shifted_by_pointer_index_08003540(void)\n{\n  unsigned int value = get_value_from_pointer();\n  unsigned int pointer_index = *(unsigned int *)(DAT_08003560 + 4);\n  unsigned int shift_amount = PTR_DAT_08003564[pointer_index >> 0xb & 7];\n  return value >> shift_amount;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "get_value_shifted_by_pointer_index_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "data_ptr"
            },
            "code": "void initialize_data_08009244(int data, int value) {\n  int data_ptr = allocate_or_get_existing_data_080090c0(data, 1);\n  *(int *)(data_ptr + 0x10) = 1;\n  *(int *)(data_ptr + 0x14) = value;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "initialize_data_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "print_interrupt_message_08004e6c"
            },
            "code": "void print_interrupt_message_08004e6c(void)\n{\n    software_interrupt(0x3f);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "print_interrupt_message_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "check_param_range_08001762",
                "param_1": "input_param",
                "uVar1": "is_in_range"
            },
            "code": "int check_param_range_08001762(int input_param)\n{\n  int is_in_range = is_param_in_range(input_param);\n  return is_in_range;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "check_param_range_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_08005e9c",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "uVar4": "current_word",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009768(uint *destination, uint *source, uint length){\n  char current_char;\n  uint *destination_ptr;\n  uint *source_ptr;\n  uint current_word;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) && (source_ptr = source, destination_ptr = destination, 3 < length)) {\n    do {\n      source = source_ptr + 1;\n      current_word = *source_ptr;\n      destination = destination_ptr;\n      if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto end_of_word_copy;\n      length = length - 4;\n      destination = destination_ptr + 1;\n      *destination_ptr = current_word;\n      destination_ptr = destination;\n      source_ptr = source;\n    } while (3 < length);\n  }\n  source_ptr = source;\n  if (length != 0) {\n  end_of_word_copy:\n    current_char = *(char *)source_ptr;\n    *(char *)destination = current_char;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (current_char == \"\\0\") break;\n      if (length == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)destination = current_char;\n    }\n    if (length != 0) {\n      source_ptr = destination;\n      do {\n        destination_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = \"\\0\";\n        source_ptr = destination_ptr;\n      } while (destination_ptr != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "update_data_structure_08003ff8",
                "param_1": "data_structure_address",
                "param_2": "data_array",
                "iVar1": "local_variable1",
                "iVar2": "local_variable2",
                "local_c": "local_variable3"
            },
            "code": "void update_data_structure_08003ff8(int data_structure_address, int *data_array)\n{\n  int local_variable1;\n  int local_variable2;\n  uint16_t local_variable3;\n\n  *(uint16_t *)(data_structure_address + 0x20) = *(uint16_t *)(data_structure_address + 0x20) & 0xffffefff;\n  local_variable3 = *(uint16_t *)(data_structure_address + 4);\n  local_variable1 = *data_array;\n  local_variable2 = data_array[2];\n  if (data_structure_address == PTR_0800409c) {\n    local_variable3 = data_array[5] << 6 | local_variable3 & 0xffffbfff;\n  }\n  *(uint16_t *)(data_structure_address + 4) = local_variable3;\n  *(uint16_t *)(data_structure_address + 0x1c) = local_variable1 << 8 | *(uint16_t *)(data_structure_address + 0x1c) & 0xffff8cff;\n  *(int *)(data_structure_address + 0x40) = data_array[1];\n  *(uint16_t *)(data_structure_address + 0x20) = local_variable2 << 0xc | *(uint16_t *)(data_structure_address + 0x20) & 0xffffdfff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_structure_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "check_result_and_get_value_08004ea4",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "arg3",
                "param_4": "arg5",
                "PTR_DAT_08004ee4": "data_pointer",
                "*(undefined4 *)PTR_DAT_08004ee0": "arg6"
            },
            "code": "void check_result_and_get_value_08004ea4(void* PTR_DAT_08004ee4, undefined data1, undefined data2, int arg3, uint32_t arg4, uint16_t arg5, uint32_t *(undefined4 *)PTR_DAT_08004ee0) {\n  check_and_get_result(PTR_DAT_08004ee4, data1, data2, arg3, arg4, arg5, *(uint32_t*)PTR_DAT_08004ee4);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "check_result_and_get_value_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "update_data_080040a0",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "shift_amount",
                "uVar1": "old_data"
            },
            "code": "void update_data_080040a0(int data_ptr, uint32_t new_data, int shift_amount){\n    uint32_t old_data = *(uint32_t *)(data_ptr + 0x20);\n    *(uint32_t *)(data_ptr + 0x20) = old_data & 0xfffffffe;\n    *(uint32_t *)(data_ptr + 0x18) = (shift_amount << 4) | (old_data & 0xffffff0f);\n    *(uint32_t *)(data_ptr + 0x20) = new_data | (old_data & 0xfffffff5);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_data_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "len",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "iVar3": "i",
                "puVar4": "dest_byte",
                "puVar5": "src_byte",
                "uVar6": "temp",
                "uVar7": "temp2"
            },
            "code": "void reverse_copy_08009a18(unsigned int *dest, unsigned int *src, unsigned int len)\n{\n    unsigned int *dest_end, *src_end;\n    unsigned char *dest_byte, *src_byte;\n    unsigned int i;\n\n    if (src < dest && src + len > dest)\n    {\n        dest_byte = (unsigned char *)(dest + len);\n        src_end = src + len;\n        if (len != 0)\n        {\n            do\n            {\n                src_end--;\n                dest_byte--;\n                *dest_byte = (unsigned char)(*src_end);\n            } while (src != src_end);\n        }\n    }\n    else\n    {\n        if (len > 15)\n        {\n            if (((unsigned int)dest | (unsigned int)src) & 3)\n            {\n                goto LAB_08009abc;\n            }\n            src_end = src + (len & 0xFFFFFFF0) + 0x20;\n            dest_end = dest + (len & 0xFFFFFFF0) + 0x20;\n            do\n            {\n                dest_end -= 4;\n                src_end -= 4;\n                dest_end[3] = src_end[3];\n                dest_end[2] = src_end[2];\n                dest_end[1] = src_end[1];\n                dest_end[0] = src_end[0];\n            } while (dest_end != (dest + ((len - 16) & 0xFFFFFFF0) + 0x20));\n            i = (len - 16) >> 4;\n            len &= 0xF;\n            src = src + (i << 2);\n            dest = dest + (i << 2);\n            if (len > 3)\n            {\n                src_end = src + len - 4;\n                dest_end = dest + len - 4;\n                do\n                {\n                    dest_end++;\n                    src_end++;\n                    *dest_end = *src_end;\n                } while (len - 4 < (unsigned int)(dest_end - dest));\n                len &= 3;\n            }\n        }\n        if (len != 0)\n        {\nLAB_08009abc:\n            dest_byte = (unsigned char *)dest;\n            src_byte = (unsigned char *)src;\n            do\n            {\n                *dest_byte++ = *src_byte++;\n            } while (dest_byte != ((unsigned char *)dest) + len);\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "calculateValue_0800119c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "result1",
                "iVar2": "tempVar1",
                "uVar3": "result2"
            },
            "code": "uint calculateValue_0800119c(uint inputValue1, uint inputValue2) {\n  uint result1;\n  int tempVar1;\n  uint result2;\n  \n  tempVar1 = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < tempVar1) {\n      return 0;\n    }\n    result1 = tempVar1 >> 0x15;\n    result2 = -result1 - 0x3e1;\n    if (result1 < 0xfffffc20 && result2 != 0) {\n      result1 = (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (result2 & 0xff);\n      if ((inputValue2 & 0x80000000) != 0) {\n        result1 = -result1;\n      }\n      return result1;\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  inputValue2 = inputValue2 & 0x80000000;\n  if (inputValue2 == 0) {\n    inputValue2 = 0x7fffffff;\n  }\n  return inputValue2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculateValue_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "calculateReturnValue_08005728",
                "param_1": "inputValue",
                "puVar1": "pointerToValue",
                "auStack_18": "stackValue",
                "local_14": "sumOfPointerAndInputValue",
                "local_c": "returnValue"
            },
            "code": "int calculateReturnValue_08005728(int inputValue) {\n  undefined4 *pointerToValue;\n  undefined stackValue[4];\n  int sumOfPointerAndInputValue;\n  undefined4 returnValue;\n\n  if (*(int *)PTR_DAT_08005778 == 0) {\n    *(undefined **)PTR_DAT_08005778 = PTR_DAT_0800577c;\n  }\n\n  returnValue = *(undefined4 *)PTR_DAT_08005778;\n\n  sumOfPointerAndInputValue = inputValue + *(int *)PTR_DAT_08005778;\n\n  if (stackValue < (undefined *)(sumOfPointerAndInputValue)) {\n    pointerToValue = (undefined4 *)get_value_from_pointer_08005d14();\n    *pointerToValue = 0xc;\n    returnValue = 0xffffffff;\n  }\n  else {\n    *(int *)PTR_DAT_08005778 = sumOfPointerAndInputValue;\n  }\n\n  return returnValue;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "calculateReturnValue_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_ptr_data_080090b4",
                "PTR_DAT_080090bc": "PTR_DATA"
            },
            "code": "void do_nothing_with_ptr_data_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_ptr_data_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "calculate_checksum_0800422e",
                "param_1": "data",
                "param_2": "parameters",
                "uVar1": "checksum",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t calculate_checksum_0800422e(int *data, uint32_t *parameters)\n{\n    uint32_t checksum;\n    if (*(char *)(data + 0xf) == '\\x01') {\n        checksum = 2;\n    }\n    else {\n        *(uint32_t *)(*data + 0x44) =\n            parameters[6] |\n            (parameters[6] |\n            (parameters[5] |\n            (parameters[4] |\n            (*parameters | (parameters[1] | (parameters[2] | parameters[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n            ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n        *(char *)(data + 0xf) = 0;\n        checksum = 0;\n    }\n    return checksum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "update_params_08003e38",
                "param_1": "param_offset",
                "param_2": "params",
                "iVar1": "updated_value",
                "uVar2": "updated_flag",
                "local_10": "local_flag"
            },
            "code": "void update_params_08003e38(int param_offset, int* params) {\n    int updated_value;\n    uint updated_flag;\n    uint local_flag;\n    \n    // Update flag\n    updated_flag = *(uint *)(param_offset + 0x20) & 0xffffffef;\n    \n    // Update local flag and value based on condition\n    local_flag = *(uint *)(param_offset + 4);\n    updated_value = *params;\n    if (param_offset == DAT_08003f14) {\n        updated_flag = (params[3] << 4 | updated_flag & 0xffffff7f) & 0xffffffbf;\n        local_flag = (params[6] << 2 | params[5] << 2 | local_flag) & 0xfffff3ff;\n    }\n    \n    // Update values\n    *(uint *)(param_offset + 4) = local_flag;\n    *(uint *)(param_offset + 0x18) = updated_value << 8 | *(uint *)(param_offset + 0x18) & 0xffff8cff;\n    *(int *)(param_offset + 0x38) = params[1];\n    *(uint *)(param_offset + 0x20) = updated_flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_params_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "check_param_range_0800151c",
                "param_1": "param",
                "iVar1": "is_in_range",
                "uVar2": "return_value",
                "PTR_DAT_08001570": "range_ptr",
                "PTR_DAT_08001574": "byte_ptr",
                "check_param_range_08001762": "check_param_range_08001762",
                "PTR_DAT_08001578": "data_ptr",
                "update_data_with_bits_0800172a": "update_data_with_bits"
            },
            "code": "int check_param_range_0800151c(int param)\n{\n    int range = *(uint *)PTR_DAT_08001570 / (1000 / (ulonglong)(byte)*PTR_DAT_08001574);\n    int is_in_range = check_param_range_0800151c_08001762(range);\n    if (is_in_range == 0) {\n        if (param < 16) {\n            update_data_with_bits(0xffffffff, param, 0);\n            *(uint *)PTR_DAT_08001578 = param;\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    else {\n        return 1;\n    }\n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "check_param_range_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "binary_conversion_080006a4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "mask",
                "uVar3": "temp3",
                "in_r12": "is_zero",
                "bVar4": "result"
            },
            "code": "ulonglong binary_conversion_080006a4(uint num1, uint num2, uint num3, uint num4) {\n    uint temp1;\n    uint temp2;\n    uint temp3;\n    uint temp4;\n    uint mask = 0x100000;\n    bool is_zero;\n    uint result;\n    \n    temp2 = num2 & 0x80000000;\n    if (num4 != num3 && (num4 >> 0x14 & num3) != num3) {\n        is_zero = (num1 | num2 << 1) == 0;\n        if (!is_zero) {\n            is_zero = (num3 | num4 << 1) == 0;\n        }\n        if (is_zero) {\n            return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n        }\n        if (num4 == 0) {\n            do {\n                temp1 = num1 & 0x80000000;\n                num1 <<= 1;\n                num2 = num2 * 2 + (uint)(temp1 != 0);\n            } while ((num2 & mask) == 0);\n            num2 |= temp2;\n            if ((num4 >> 0x14 & num3) != 0) {\n                return CONCAT44(num2, num1);\n            }\n        }\n        do {\n            temp3 = num3 & 0x80000000;\n            num3 <<= 1;\n            num4 = num4 * 2 + (uint)(temp3 != 0);\n        } while ((num4 & mask) == 0);\n        return CONCAT44(num2, num1);\n    }\n    is_zero = (num1 | num2 << 1) == 0;\n    if (is_zero) {\n        num2 = num4;\n        num1 = num3;\n    }\n    if (!is_zero) {\n        is_zero = (num3 | num4 << 1) == 0;\n    }\n    temp3 = num2;\n    if (((!is_zero) && ((num4 >> 0xc & num2 | num1) == 0)) && ((num3 & num4 << 0xc) == 0)) {\n        result = (num2 ^ num4) & 0x80000000 | 0x7ff00000;\n        return (ulonglong)result << 0x20;\n    }\n    result = CONCAT44(temp3, num1) | 0x7ff8000000000000;\n    return (ulonglong)result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "binary_conversion_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "bVar1": "is_negative_1",
                "uVar4": "or_input_2",
                "bVar5": "is_or_input_2_zero",
                "xor_inputs": "xor_inputs",
                "result": "result"
            },
            "code": "uint calculate_result_08000f68(uint input_1, uint input_2)\n{\n  bool is_negative_1 = false;\n  bool is_negative_2 = false;\n  uint double_input_1 = input_1 * 2;\n  uint double_input_2 = input_2 * 2;\n  \n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  \n  uint or_input_2 = double_input_1 | input_2 & 0x7fffffff;\n  bool is_or_input_2_zero = or_input_2 == 0;\n  \n  if (!is_or_input_2_zero) {\n    uint xor_inputs = input_1 ^ input_2;\n    is_or_input_2_zero = xor_inputs == 0;\n  }\n  \n  is_negative_1 = -1 < (int)(input_1 ^ input_2);\n  uint result = input_1;\n  \n  if (is_negative_1) {\n    result = double_input_1 + input_2 * -2;\n    is_or_input_2_zero = result == 0;\n  }\n  \n  if (is_negative_1 && double_input_2 <= double_input_1 && !is_or_input_2_zero) {\n    result = (int)input_2 >> 0x1f;\n  }\n  \n  if (!is_negative_1 || double_input_2 > double_input_1) {\n    result = ~((int)input_2 >> 0x1f);\n  }\n  \n  if (!is_or_input_2_zero) {\n    result = result | 1;\n  }\n  \n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "data",
                "param_2": "data_len",
                "param_3": "hash_out",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "len1",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "temp2",
                "puVar7": "ptr4",
                "uVar8": "temp3",
                "iVar9": "len2",
                "iVar10": "len3",
                "puVar14": "hash",
                "puVar15": "data_ptr",
                "iVar12": "i",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "uVar13": "temp6",
                "uVar14": "temp7",
                "puVar16": "hash_ptr",
                "uVar15": "temp8",
                "uVar16": "temp9",
                "uVar17": "temp10",
                "uVar18": "temp11",
                "puVar17": "hash_end_ptr"
            },
            "code": "void calculate_hash_08009258(uint8_t* data, int data_len, uint32_t* hash_out) {\n  uint32_t* ptr1;\n  uint32_t* ptr2;\n  int len1;\n  uint32_t temp1;\n  uint32_t* ptr3;\n  uint32_t temp2;\n  uint32_t* ptr4;\n  uint32_t temp3;\n  int len2;\n  int len3;\n  uint32_t* hash;\n  uint32_t* data_ptr;\n  uint32_t* end_ptr;\n  int i;\n  uint32_t temp4;\n  uint32_t temp5;\n  uint32_t temp6;\n  uint32_t temp7;\n  uint32_t* hash_ptr;\n  uint32_t temp8;\n  uint32_t temp9;\n  uint32_t temp10;\n  uint32_t temp11;\n  uint32_t* hash_end_ptr;\n  \n  len1 = *(int*)(hash_out + 4);\n  len2 = *(int*)(data_len + 16);\n  len3 = len2;\n  ptr2 = (uint32_t*)(data_len + 20);\n  ptr1 = hash_out;\n  if (len1 < len2) {\n    len3 = len1;\n    len1 = len2;\n    ptr2 = (uint32_t*)(hash_out + 4);\n    ptr1 = (uint32_t*)(data_len + 20);\n  }\n  len2 = len1 + len3;\n  if (*(int*)(data_len + 8) < len2) {\n    len2 = len2 + 1;\n  }\n  hash = allocate_or_get_existing_data_080090c0(data, len2);\n  end_ptr = hash + len2 + 4;\n  for (data_ptr = end_ptr - len2; data_ptr < end_ptr; data_ptr++) {\n    *data_ptr = 0;\n  }\n  ptr3 = (uint32_t*)(data_len + 20);\n  temp1 = data_len + 20 + len3 * 4;\n  ptr4 = hash + 5;\n  if (temp1 >= (uint32_t)ptr3) {\n    do {\n      temp2 = *ptr3 & 0xffff;\n      if (temp2 != 0) {\n        temp3 = 0;\n        ptr1 = hash + 5;\n        ptr2 = ptr4;\n        do {\n          temp4 = temp2 * (*ptr1 >> 0x10);\n          temp5 = *ptr2;\n          temp6 = temp2 * (*(uint16_t*)ptr1) + (temp5 & 0xffff) + (temp3 >> 0x10);\n          temp7 = temp4 + (temp5 >> 0x10) + (temp6 >> 0x10);\n          temp3 = temp7 >> 0x10;\n          *ptr2 = (temp6 << 16) | (temp7 & 0xffff);\n          ptr1++;\n          ptr2++;\n        } while (ptr1 < hash + 5 + len1);\n        temp8 = *(ptr4 + len1);\n        temp9 = temp8 + temp3;\n        *(ptr4 + len1) = temp9;\n        if (temp9 >> 0x10 != 0) {\n          ptr1 = ptr4 + len1 + 1;\n          do {\n            temp10 = *ptr1 + 1;\n            *ptr1 = temp10;\n            if (temp10 >> 0x10 == 0) break;\n            ptr1++;\n          } while (ptr1 < end_ptr);\n        }\n      }\n      ptr4++;\n      ptr3++;\n    } while (ptr3 < (uint32_t*)(temp1 + 4));\n  }\n  hash_end_ptr = end_ptr - 1;\n  while (*hash_end_ptr == 0 && len2 > 1) {\n    hash_end_ptr--;\n    len2--;\n  }\n  *(int*)(hash + 4) = len2;\n  return;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "leading_zero_bits_08000c08",
                "param_1": "num",
                "iVar1": "num_leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "shifted_num"
            },
            "code": "uint leading_zero_bits_08000c08(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  int num_leading_zeroes = count_leading_zeroes(num);\n  uint shift_amount = num_leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (num_leading_zeroes > 7) {\n    uint shifted_num = 0 << (shift_amount & 0xff);\n    uint result = multiplier + (num << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_num);\n    if (shifted_num == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_num = num << (num_leading_zeroes + 0x18U & 0xff);\n  uint result = multiplier + ((num >> (0x20 - (num_leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_num >> 0x1f));\n  if ((shifted_num & 0x7fffffff) == 0) {\n    result = result & ~(shifted_num >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_value_if_not_set_080042de",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2",
                "uVar1": "result",
                "*(char *)(param_1 + 0xf)": "*ptr_flag",
                "*(undefined *)(param_1 + 0xf)": "*ptr_flag",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)ptr_param1 + 0x3d)",
                "*(uint *)(*param_1 + 4)": "*ptr_reg1",
                "*param_2": "*ptr_param2",
                "param_2[1]": "*(ptr_param2 + 1)",
                "*(uint *)(*param_1 + 8)": "*ptr_reg2"
            },
            "code": "int set_value_if_not_set_080042de(int *ptr_param1, uint *ptr_param2) {\n    int result = 0;\n    char *ptr_flag = (char *)(ptr_param1 + 0xf);\n    uint *ptr_reg1 = (uint *)(*ptr_param1 + 4);\n    uint *ptr_reg2 = (uint *)(*ptr_param1 + 8);\n    if (*ptr_flag == '\\x01') {\n        result = 2;\n    }\n    else {\n        *ptr_flag = 1;\n        *(undefined *)((int)ptr_param1 + 0x3d) = 2;\n        *ptr_reg1 &= 0xffffff8f;\n        *ptr_reg1 |= *ptr_param2;\n        *ptr_reg2 &= 0xffffff7f;\n        *ptr_reg2 |= *(ptr_param2 + 1);\n        *(undefined *)((int)ptr_param1 + 0x3d) = 1;\n        *ptr_flag = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_value_if_not_set_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_allocate_data_08009530",
                "param_1": "param1",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "param4",
                "iVar1": "allocated_data",
                "iVar5": "size_diff",
                "iVar12": "carry_flag",
                "puVar2": "ptr1",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar8": "ptr4",
                "puVar9": "ptr5",
                "puVar10": "ptr6",
                "puVar11": "ptr7",
                "puVar13": "ptr8",
                "uVar3": "size1",
                "uVar4": "temp",
                "uVar14": "data1_size",
                "i": "i"
            },
            "code": "void compare_and_allocate_data_08009530(uint32_t param1, uint32_t *data1, uint32_t *data2, uint32_t param4)\n{\n    int diff;\n    uint32_t *ptr1, *ptr2;\n    uint32_t carry, temp, size1, size2, size_diff, i;\n\n    ptr1 = (uint32_t *)data2[4];\n    size_diff = data1[4] - (int)ptr1;\n    ptr2 = data1 + 5;\n    uint32_t *ptr3 = data2 + 5;\n    uint32_t *ptr4 = ptr2;\n    uint32_t *ptr5 = data1;\n\n    if (size_diff == 0) {\n        ptr4 += (int)ptr1;\n        ptr1 += (int)ptr1;\n        while (*--ptr4 == *--ptr1 && ptr4 > ptr2);\n        if (ptr4 <= ptr2) {\n            int allocated_data = allocate_or_get_existing_data(param1, 0, ptr4, ptr1, param4);\n            *(uint32_t *)(allocated_data + 0x10) = 1;\n            *(uint32_t *)(allocated_data + 0x14) = 0;\n            return;\n        }\n        if (*ptr1 > *ptr4) {\n            goto LAB_08009578;\n        }\n    }\n    else if (size_diff > -1) {\n        size_diff = 0;\n        ptr4 = data2;\n        goto LAB_08009578;\n    }\n    else {\n        size_diff = 1;\n        ptr4 = ptr2;\n        ptr1 = data1;\n        ptr4 = ptr3;\n        ptr5 = data2;\n        data2 = data1;\n        ptr3 = ptr2;\n    }\n\nLAB_08009578:\n    int allocated_data = allocate_or_get_existing_data(param1, ptr5[1], ptr4, ptr1, param4);\n    int carry_flag = 0;\n    uint32_t data1_size = ptr5[4];\n    size1 = data2[4];\n    *(int *)(allocated_data + 0xc) = size_diff;\n    uint32_t *ptr6 = ptr3 + data1_size;\n    uint32_t *ptr7 = (uint32_t *)(allocated_data + 0x14);\n    ptr5 = ptr2;\n    do {\n        uint32_t *ptr8 = ptr3 + 1;\n        uint32_t *ptr9 = ptr5 + 1;\n        temp = ((*ptr3 & 0xffff) + carry) - (*ptr5 & 0xffff);\n        carry = ((*ptr3 >> 0x10) - (*ptr5 >> 0x10)) + ((int)temp >> 0x10);\n        temp = temp & 0xffff | carry * 0x10000;\n        ptr2 = ptr7 + 1;\n        *ptr7 = temp;\n        carry = carry >> 0x10;\n        ptr7 = ptr2;\n        ptr3 = ptr8;\n        ptr5 = ptr9;\n    } while (ptr9 < ptr2 + size1);\n    ptr2 = ptr8;\n    ptr7 = ptr2;\n    if (ptr8 < ptr6) {\n        do {\n            uint32_t *ptr10 = ptr2 + 1;\n            temp = (*ptr2 & 0xffff) + carry;\n            carry = ((int)temp >> 0x10) + (*ptr2 >> 0x10);\n            uint32_t result = temp & 0xffff | carry * 0x10000;\n            *ptr7 = result;\n            carry = carry >> 0x10;\n            ptr2 = ptr10;\n            ptr7 = ptr7 + 1;\n        } while (ptr10 < ptr6);\n        ptr3 = (uint32_t *)((int)ptr3 + ((int)ptr6 + ~(uint32_t)ptr8 & 0xfffffffc) + 4);\n    }\n    ptr3 = ptr3 - 1;\n    while (temp == 0) {\n        ptr3 = ptr3 - 1;\n        data1_size = data1_size - 1;\n        temp = *ptr3;\n    }\n    *(uint32_t *)(allocated_data + 0x10) = data1_size;\n    return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_and_allocate_data_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    do_nothing_with_ptr_data_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      do_nothing_with_ptr_data_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    do_nothing_with_ptr_data_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      do_nothing_with_ptr_data_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      do_nothing_with_ptr_data_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              do_nothing_with_ptr_data_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              do_nothing_with_ptr_data_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)calculate_result_and_set_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = calculate_result_and_set_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    do_nothing_with_ptr_data_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  do_nothing_with_ptr_data_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_flag_and_get_result_08002bb4",
                "param_1": "flag_ptr",
                "param_2": "max_value",
                "param_3": "base_value",
                "iVar1": "is_flag_set"
            },
            "code": "int check_flag_and_get_result_08002bb4(int *flag_ptr, uint32_t max_value, int base_value) {\n  while (true) {\n    if ((*(uint32_t *)(*flag_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    int is_flag_set = is_flag_set_08002d3c(flag_ptr);\n    if (is_flag_set != 0) {\n      break;\n    }\n    if ((max_value != 0xffffffff) && ((max_value == 0 || (is_flag_set = get_value_from_pointer_080015a0(), max_value < (uint32_t)(is_flag_set - base_value))))) {\n      flag_ptr[0x10] = flag_ptr[0x10] | 0x20;\n      flag_ptr[0xc] = 0;\n      *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n      *(undefined *)(flag_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_flag_and_get_result_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "is_flag_set_08002d3c",
                "param_1": "data",
                "bVar1": "flag",
                "*(*(uint *)(*param_1 + 0x14) & 0x400) == 0x400": "(*(uint*)(*data + 0x14) & 0x400) == 0x400",
                "undefined4": "uint32_t",
                "param_1[0x10]": "data[16]",
                "param_1[0xc]": "data[12]",
                "undefined": "uint8_t",
                "(int)param_1 + 0x3d": "(int)data + 0x3d",
                "param_1 + 0xf": "data + 15"
            },
            "code": "bool is_flag_set_08002d3c(int* data)\n{\n  bool flag = (*(uint*)(*data + 0x14) & 0x400) == 0x400;\n  if (flag) {\n    *(undefined4*)(*data + 0x14) = 0xfffffbff;\n    data[0x10] = 4;\n    data[0xc] = 0;\n    *(undefined*)((int)data + 0x3d) = 0x20;\n    *(undefined*)(data + 0xf) = 0;\n  }\n  return flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "is_flag_set_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_output_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "intermediate_result_1",
                "uVar2": "intermediate_result_2",
                "uVar3": "intermediate_result_3",
                "PTR_DAT_08004d60": "int_ptr_dat_08004d60",
                "convert_uint_to_uint64_08000418": "convert_to_64_bit",
                "DAT_08004d40": "dat_08004d40",
                "DAT_08004d44": "dat_08004d44",
                "FUNC_080004c8": "func_080004c8",
                "FUNC_0800015c": "func_0800015c",
                "calculate_float_080009fc": "calculate_float",
                "DAT_08004d64": "dat_08004d64",
                "DAT_08004d48": "dat_08004d48",
                "DAT_08004d4c": "dat_08004d4c",
                "DAT_08004d68": "dat_08004d68",
                "calculate_output_thunk_08005838": "calculate_output_thunk",
                "DAT_08004d58": "dat_08004d58",
                "DAT_08004d5c": "dat_08004d5c",
                "DAT_08004d6c": "dat_08004d6c",
                "intermediate_result_4": "intermediate_result_4",
                "intermediate_result_5": "intermediate_result_5",
                "intermediate_result_6": "intermediate_result_6",
                "intermediate_result_7": "intermediate_result_7",
                "intermediate_result_8": "intermediate_result_8",
                "intermediate_result_9": "intermediate_result_9",
                "intermediate_result_10": "intermediate_result_10"
            },
            "code": "void calculate_output_08004bd8(int input, int* output) {\n  int intermediate_result_1 = FUNC_08000aa4(*(int *)(input + 0x10), *(int *)(input + 0x1c));\n  int intermediate_result_2 = *(int *)PTR_DAT_08004d60;\n  int intermediate_result_3 = convert_uint_to_uint64_08000418(intermediate_result_2);\n  int intermediate_result_4 = convert_uint_to_uint64_08000418(intermediate_result_1);\n  intermediate_result_4 = FUNC_080004c8(intermediate_result_4, (int)((long long)intermediate_result_4 >> 0x20), DAT_08004d40, DAT_08004d44);\n  intermediate_result_3 = FUNC_0800015c(intermediate_result_3, (int)((long long)intermediate_result_3 >> 0x20), intermediate_result_4, (int)((long long)intermediate_result_4 >> 0x20));\n  int intermediate_result_5 = calculate_float_080009fc(intermediate_result_3, (int)((long long)intermediate_result_3 >> 0x20));\n  *(int *)PTR_DAT_08004d60 = intermediate_result_5;\n  int intermediate_result_6 = convert_uint_to_uint64_08000418(*(int *)(input + 4));\n  intermediate_result_6 = FUNC_0800071c(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20), 0, DAT_08004d64);\n  int intermediate_result_7 = convert_uint_to_uint64_08000418(*(int *)(input + 8));\n  intermediate_result_7 = FUNC_0800071c(intermediate_result_7, (int)((long long)intermediate_result_7 >> 0x20), 0, DAT_08004d64);\n  intermediate_result_6 = calculate_output_08004bd8_thunk_08005838(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20), intermediate_result_7, (int)((long long)intermediate_result_7 >> 0x20));\n  intermediate_result_6 = FUNC_080004c8(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20), 0, DAT_08004d68);\n  intermediate_result_6 = FUNC_0800071c(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20), DAT_08004d48, DAT_08004d4c);\n  int intermediate_result_8 = convert_uint_to_uint64_08000418(*(int *)(input + 0x24));\n  intermediate_result_6 = FUNC_08000158(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20), intermediate_result_8, (int)((long long)intermediate_result_8 >> 0x20));\n  intermediate_result_6 = FUNC_0800015c(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20), 0, DAT_08004d6c);\n  int intermediate_result_9 = calculate_float_080009fc(intermediate_result_6, (int)((long long)intermediate_result_6 >> 0x20));\n  if (*PTR_DAT_08004d70 == 0) {\n    intermediate_result_3 = convert_uint_to_uint64_08000418(*(int *)PTR_DAT_08004d60);\n    intermediate_result_3 = FUNC_080004c8(intermediate_result_3, (int)((long long)intermediate_result_3 >> 0x20), DAT_08004d50, DAT_08004d54);\n    int intermediate_result_10 = convert_uint_to_uint64_08000418(intermediate_result_9);\n    intermediate_result_10 = FUNC_080004c8(intermediate_result_10, (int)((long long)intermediate_result_10 >> 0x20), DAT_08004d58, DAT_08004d5c);\n    intermediate_result_3 = FUNC_0800015c(intermediate_result_3, (int)((long long)intermediate_result_3 >> 0x20), intermediate_result_10, (int)((long long)intermediate_result_10 >> 0x20));\n    intermediate_result_9 = calculate_float_080009fc(intermediate_result_3, (int)((long long)intermediate_result_3 >> 0x20));\n    *(int *)PTR_DAT_08004d60 = intermediate_result_9;\n  }\n  else {\n    *(int *)PTR_DAT_08004d60 = intermediate_result_9;\n    *PTR_DAT_08004d70 = 0;\n  }\n  *output = *(int *)PTR_DAT_08004d60;\n  return;\n}",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009fc",
                "FUN_0800071c",
                "FUN_08000418",
                "FUN_08000aa4",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_output_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_or_get_existing_data_080090c0",
                "param_1": "data_ptr",
                "param_2": "index",
                "puVar1": "data_entry",
                "iVar2": "data_array_ptr",
                "allocate_memory_and_initialize_to_zero_08009980": "allocate_memory_and_initialize_to_zero"
            },
            "code": "undefined4 * allocate_or_get_existing_data_080090c0(int data_ptr, uint32_t index) {\n  undefined4 *data_entry;\n  int data_array_ptr = *(int *)(data_ptr + 0x4c);\n  if (data_array_ptr == 0) {\n    data_array_ptr = allocate_memory_and_initialize_to_zero_08009980(data_ptr, 4, 0x21);\n    *(int *)(data_ptr + 0x4c) = data_array_ptr;\n    if (data_array_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  data_entry = *(undefined4 **)(data_array_ptr + index * 4);\n  if (data_entry == (undefined4 *)0x0) {\n    int array_size = 1 << (index & 0xff);\n    data_entry = (undefined4 *)allocate_memory_and_initialize_to_zero_08009980(data_ptr, 1, (array_size + 5) * 4);\n    if (data_entry == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    data_entry[1] = index;\n    data_entry[2] = array_size;\n  }\n  else {\n    *(undefined4 *)(data_array_ptr + index * 4) = *data_entry;\n  }\n  data_entry[3] = 0;\n  data_entry[4] = 0;\n  return data_entry;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009244",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009444",
                "FUN_080079e8",
                "FUN_08009530",
                "FUN_08009258"
            ],
            "imported": false,
            "current_name": "allocate_or_get_existing_data_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_set_bits_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "number"
            },
            "code": "uint count_set_bits_080091e4(uint *num) {\n  uint number = *num;\n  uint count = number & 7;\n  if (count == 0) {\n    if ((number & 0xffff) == 0) {\n      number >>= 0x10;\n      count = 0x10;\n    }\n    if ((number & 0xff) == 0) {\n      number >>= 8;\n      count += 8;\n    }\n    if ((number & 0xf) == 0) {\n      number >>= 4;\n      count += 4;\n    }\n    if ((number & 3) == 0) {\n      number >>= 2;\n      count += 2;\n    }\n    if (-1 < (int)(number << 0x1f)) {\n      number >>= 1;\n      if (number == 0) {\n        return 0x20;\n      }\n      count += 1;\n    }\n    *num = number;\n    return count;\n  }\n  if (-1 < (int)(number << 0x1f)) {\n    if ((int)(number << 0x1e) < 0) {\n      *num = number >> 1;\n      return 1;\n    }\n    *num = number >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_set_bits_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_080009fc",
                "param_1": "exponent",
                "param_2": "mantissa",
                "uVar1": "shifted_float",
                "uVar2": "shifted_mantissa",
                "uVar3": "shifted_exponent",
                "in_r12": "temp",
                "bVar4": "is_normalized",
                "bVar5": "is_small_float",
                "SCARRY4": "overflow_check",
                "is_mantissa_negative": "mantissa_sign_bit",
                "is_exponent_negative": "exponent_sign_bit",
                "sign_bit": "float_sign_bit",
                "exponent_bias": "float_exponent_bias",
                "mantissa_bits": "float_mantissa_bits",
                "exponent_mask": "float_exponent_mask",
                "mantissa_mask": "float_mantissa_mask",
                "sign_mask": "float_sign_mask",
                "shift_amount": "mantissa_shift_amount",
                "normalized_mantissa": "float_normalized_mantissa"
            },
            "code": "uint calculate_float_080009fc(uint exponent, uint mantissa)\n{\n  uint shifted_mantissa;\n  uint shifted_exponent;\n  uint is_mantissa_negative;\n  uint is_exponent_negative;\n  uint sign_bit;\n  uint exponent_bias = 127;\n  uint mantissa_bits = 23;\n  uint exponent_mask = 0xff;\n  uint mantissa_mask = 0x7fffff;\n  uint sign_mask = 0x80000000;\n\n  shifted_mantissa = mantissa << 1;\n  is_mantissa_negative = shifted_mantissa & sign_mask;\n  shifted_exponent = exponent + exponent_bias;\n  is_exponent_negative = shifted_exponent & sign_mask;\n  sign_bit = is_mantissa_negative ^ is_exponent_negative;\n\n  if(shifted_exponent >= 0x200000 || shifted_exponent < 0x000001 || (shifted_exponent == 0x200000 && (shifted_mantissa & mantissa_mask) != 0))\n  {\n    if((mantissa & sign_mask) != 0)\n    {\n      if(((int)shifted_mantissa >> mantissa_bits) == -1 && ((exponent | (mantissa << 9)) != 0))\n      {\n        return 0x7fc00000;\n      }\n      return mantissa & sign_mask | 0x7f800000;\n    }\n    if((int)(shifted_mantissa + 0x30800000) < 0)\n    {\n      return mantissa & sign_mask;\n    }\n    uint shift_amount = 0x96 - ((shifted_mantissa & mantissa_mask) >> mantissa_bits);\n    uint normalized_mantissa = mantissa << shift_amount;\n    if((mantissa & (1 << (mantissa_bits - shift_amount))) != 0)\n    {\n      normalized_mantissa |= 1;\n    }\n    shifted_exponent = shifted_exponent - (shift_amount << 23);\n    shifted_mantissa = normalized_mantissa & mantissa_mask;\n  }\n  shifted_mantissa = shifted_mantissa | ((shifted_exponent & exponent_mask) << mantissa_bits);\n  shifted_exponent = shifted_exponent & sign_mask;\n  shifted_exponent = shifted_exponent | ((mantissa & sign_mask) >> 8);\n  shifted_mantissa = shifted_mantissa | (mantissa & 0x800000);\n  shifted_exponent = shifted_exponent >> 1;\n  return shifted_exponent | shifted_mantissa;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "hash_calculator_080093a4",
                "param_1": "hash_table",
                "param_2": "input",
                "param_3": "input_length",
                "iVar1": "index",
                "iVar2": "num_chunks",
                "puVar3": "current_chunk",
                "puVar4": "hash_table_ptr",
                "calculate_polynomial_08009120": "calculate_polynomial",
                "allocate_or_get_existing_data_080090c0": "allocate_or_get_existing_data",
                "PTR_DAT_08009440": "PTR_DAT",
                "calculate_hash_08009258": "calculate_hash"
            },
            "code": "undefined4* hash_calculator_080093a4(int hash_table, undefined4* input, uint input_length)\n{\n    int i = 0;\n    int num_chunks = (int)input_length >> 2;\n    undefined4* current_chunk = input;\n    undefined4* hash_table_ptr = *(undefined4 **)(hash_table + 0x48);\n    if ((input_length & 3) != 0) {\n        current_chunk = (undefined4 *)calculate_polynomial_08009120(hash_table, input, *(undefined4 *)(PTR_DAT_08009440_08009440 + ((input_length & 3) - 1) * 4), 0);\n    }\n    if (num_chunks != 0) {\n        if (hash_table_ptr == (undefined4 *)0x0) {\n            hash_table_ptr = (undefined4 *)allocate_or_get_existing_data_080090c0(hash_table, 1);\n            hash_table_ptr[4] = 1;\n            hash_table_ptr[5] = 0x271;\n            *(undefined4 **)(hash_table + 0x48) = hash_table_ptr;\n            *hash_table_ptr = 0;\n        }\n        if (num_chunks << 0x1f < 0) {\n            goto LAB_080093d2;\n        }\nLAB_080093c4:\n        num_chunks = num_chunks >> 1;\n        current_chunk = hash_table_ptr;\n        if (num_chunks != 0) {\n            while (true) {\n                undefined4* next_chunk = (undefined4 *)*current_chunk;\n                if (next_chunk == (undefined4 *)0x0) {\n                    next_chunk = (undefined4 *)calculate_hash_08009258(hash_table, current_chunk, current_chunk);\n                    *current_chunk = next_chunk;\n                    *next_chunk = 0;\n                }\n                current_chunk = input;\n                if (-1 < num_chunks << 0x1f) {\n                    break;\n                }\nLAB_080093d2:\n                input = (undefined4 *)calculate_hash_08009258(hash_table, current_chunk, next_chunk);\n                if (current_chunk == (undefined4 *)0x0) {\n                    break;\n                }\n                i = *(int *)(hash_table + 0x4c);\n                num_chunks = num_chunks >> 1;\n                *current_chunk = *(undefined4 *)(i + current_chunk[1] * 4);\n                *(undefined4 **)(i + current_chunk[1] * 4) = current_chunk;\n                current_chunk = next_chunk;\n                if (num_chunks == 0) {\n                    return input;\n                }\n            }\n            goto LAB_080093c4;\n        }\n    }\n    return current_chunk;\n}",
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "hash_calculator_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "allocate_memory_080098c0",
                "param_1": "size",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "index",
                "uVar4": "count",
                "iVar5": "var1",
                "iVar6": "var2",
                "iVar7": "var3"
            },
            "code": "undefined4 allocate_memory_080098c0(int size, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    undefined *ptr;\n    undefined4 result;\n    uint index;\n    uint count;\n    int var1;\n    int var2;\n    int var3;\n    ptr = PTR_PTR_DAT_08009974;\n    do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n    var2 = *(int *)PTR_PTR_DAT_08009978;\n    var1 = *(int *)(var2 + 0x148);\n    if (var1 == 0) {\n        var1 = var2 + 0x14c;\n        *(int *)(var2 + 0x148) = var1;\n    }\n    count = *(uint *)(var1 + 4);\n    if ((int)count < 0x20) {\n        var3 = count + 1;\n    }\n    else {\n        if (DAT_0800997c == 0) {\n            do_nothing_08008af4(*(undefined4 *)ptr);\n            return 0xffffffff;\n        }\n        count = 400;\n        index = 0;\n        _DAT_00000190 = *(undefined4 *)(var2 + 0x148);\n        var3 = 1;\n        _DAT_00000194 = 0;\n        *(undefined4 *)(var2 + 0x148) = 400;\n        _DAT_00000318 = 0;\n        _DAT_0000031c = 0;\n    }\n    if (size != 0) {\n        var2 = var1 + count * 4;\n        *(undefined4 *)(var2 + 0x88) = arg3;\n        index = 1 << (count & 0xff);\n        *(uint *)(var1 + 0x188) = *(uint *)(var1 + 0x188) | index;\n        *(undefined4 *)(var2 + 0x108) = arg4;\n        if (size == 2) {\n            *(uint *)(var1 + 0x18c) = index | *(uint *)(var1 + 0x18c);\n        }\n    }\n    *(int *)(var1 + 4) = var3;\n    result = *(undefined4 *)ptr;\n    *(undefined4 *)(var1 + (count + 2) * 4) = arg2;\n    do_nothing_08008af4(result);\n    return 0;\n}",
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "allocate_memory_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "perform_operation_on_pointer_080027f4",
                "param_1": "pointer",
                "param_2": "flag",
                "param_3": "value_1",
                "param_4": "value_2",
                "param_5": "max_difference",
                "param_6": "base_address",
                "iVar1": "result",
                "uVar2": "flag_result",
                "ptr_c": "null_pointer"
            },
            "code": "uint32_t perform_operation_on_pointer_080027f4(uint32_t **pointer, byte flag, uint16_t value_1, uint16_t value_2, uint32_t max_difference, int base_address)\n{\n  uint32_t result = 3;\n  uint32_t *ptr_c = NULL;\n\n  **pointer |= 0x400;\n  **pointer |= 0x100;\n\n  while ((~(*pointer)[5] & 1) != 0)\n  {\n    if ((max_difference == 0xffffffff) || ((max_difference != 0) && (abs(get_value_from_pointer_080015a0() - base_address) <= max_difference)))\n    {\n      ptr_c = NULL;\n      (*pointer)[0xc] = ptr_c;\n      *((byte *)pointer + 0x3d) = 0x20;\n      *((byte *)pointer + 0x3e) = 0;\n      *((byte *)pointer + 0xf) = 0;\n      uint32_t condition_result = check_condition(pointer, condition_data, max_difference, base_address);\n      if (condition_result == 0)\n      {\n        (*pointer)[4] = flag & 0xfe;\n        uint32_t flag_result = check_flag_and_get_result(pointer, max_difference, base_address, (*pointer)[6]);\n        if (flag_result == 0)\n        {\n          if (value_2 == 1)\n          {\n            (*pointer)[4] = (uint32_t)(byte)value_1;\n          }\n          else\n          {\n            (*pointer)[4] = (uint32_t)(byte)((uint16_t)value_1 >> 8);\n            flag_result = check_flag_and_get_result(pointer, max_difference, base_address);\n            if (flag_result != 0)\n            {\n              if (pointer[0x10] == (uint32_t *)0x4)\n              {\n                **pointer |= 0x200;\n                result = 1;\n                break;\n              }\n              result = 3;\n              break;\n            }\n            (*pointer)[4] = (uint32_t)(byte)value_1;\n          }\n          flag_result = check_flag_and_get_result(pointer, max_difference, base_address);\n          if (flag_result == 0)\n          {\n            **pointer |= 0x100;\n            while ((~(*pointer)[5] & 1) != 0)\n            {\n              if ((max_difference == 0xffffffff) || ((max_difference != 0) && (abs(get_value_from_pointer_080015a0() - base_address) <= max_difference)))\n              {\n                ptr_c = NULL;\n                (*pointer)[0xc] = ptr_c;\n                *((byte *)pointer + 0x3d) = 0x20;\n                *((byte *)pointer + 0x3e) = 0;\n                *((byte *)pointer + 0xf) = 0;\n                uint32_t condition_result_2 = check_condition(pointer, condition_data, max_difference, base_address);\n                if (condition_result_2 == 0)\n                {\n                  (*pointer)[4] = (uint32_t)(flag | 1);\n                  uint32_t flag_result_2 = check_flag_and_get_result(pointer, max_difference, base_address);\n                  if (flag_result_2 == 0)\n                  {\n                    result = 0;\n                  }\n                  else if (pointer[0x10] == (uint32_t *)0x4)\n                  {\n                    **pointer |= 0x200;\n                    result = 1;\n                  }\n                  else\n                  {\n                    result = 3;\n                  }\n                }\n                else if (pointer[0x10] == (uint32_t *)0x4)\n                {\n                  result = 1;\n                }\n                else\n                {\n                  result = 3;\n                }\n              }\n              else\n              {\n                result = 3;\n              }\n              break;\n            }\n          }\n          else if (pointer[0x10] == (uint32_t *)0x4)\n          {\n            **pointer |= 0x200;\n            result = 1;\n            break;\n          }\n          else\n          {\n            result = 3;\n            break;\n          }\n        }\n        else if (pointer[0x10] == (uint32_t *)0x4)\n        {\n          **pointer |= 0x200;\n          result = 1;\n          break;\n        }\n        else\n        {\n          result = 3;\n          break;\n        }\n      }\n      else if (pointer[0x10] == (uint32_t *)0x4)\n      {\n        result = 1;\n        break;\n      }\n      else\n      {\n        result = 3;\n        break;\n      }\n    }\n    else\n    {\n      result = 3;\n      break;\n    }\n    break;\n  }\n  return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "perform_operation_on_pointer_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_shifted_value_080003d4",
                "param_1": "value",
                "uVar1": "shifted_value_high",
                "uVar2": "shift_amount",
                "iVar3": "leading_zero_bits",
                "uVar4": "shift_amount_plus_21",
                "bVar5": "is_shift_amount_negative",
                "bVar6": "is_shift_amount_zero",
                "bVar7": "is_shift_amount_overflow",
                "in_r12": "trailing_zero_bits"
            },
            "code": "unsigned long long calculate_shifted_value_080003d4(uint32_t value)\n{\n    if (value == 0) {\n        return 0;\n    }\n    uint32_t leading_zero_bits = count_leading_zeroes(value);\n    uint32_t shift_amount = leading_zero_bits + 21;\n    bool is_shift_amount_negative = shift_amount < 0;\n    bool is_shift_amount_zero = shift_amount == 0;\n    bool is_shift_amount_overflow = shift_amount >= 32;\n    if (is_shift_amount_overflow) {\n        return 0;\n    }\n    uint32_t trailing_zero_bits = 32 - leading_zero_bits;\n    uint32_t shifted_value = value << leading_zero_bits;\n    if (!is_shift_amount_zero && is_shift_amount_negative == is_shift_amount_overflow) {\n        shifted_value |= value >> (trailing_zero_bits & 0x1f);\n    }\n    uint64_t result = shifted_value;\n    if (shift_amount < 1075) {\n        result += (uint64_t)(0x432 - shift_amount) * 0x100000;\n    } else {\n        uint32_t negative_shift_amount = ~(0x432 - shift_amount);\n        if (negative_shift_amount > 30) {\n            result = shifted_value >> (negative_shift_amount - 31);\n        } else {\n            int32_t shift_amount_difference = negative_shift_amount - 19;\n            if (shift_amount_difference == 0 || shift_amount_difference < 0 != ((negative_shift_amount - 31) < 12)) {\n                uint32_t shift_amount_plus_one = negative_shift_amount + 1;\n                result = (shifted_value >> shift_amount_plus_one) | ((uint64_t)value << (32 - shift_amount_plus_one));\n            } else {\n                result = (uint64_t)value >> (32 - (12 - shift_amount_difference)) | (uint64_t)shifted_value << (12 - shift_amount_difference);\n            }\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_output_and_float_08004d78",
                "param_1": "inputs",
                "param_2": "output1",
                "param_3": "output2",
                "uVar1": "input1",
                "uVar2": "input2",
                "uVar3": "input3",
                "uVar4": "output_int",
                "uVar5": "output_int2",
                "convert_uint_to_uint64_08000418": "convert_uint_to_uint64",
                "calculate_output_thunk_08005838": "calculate_output",
                "calculate_float_080009fc": "calculate_float"
            },
            "code": "void calculate_output_and_float_08004d78(undefined4 *inputs, undefined4 *output1, undefined4 *output2) {\n  \n  undefined4 input1 = inputs[0];\n  undefined4 input2 = inputs[1];\n  undefined4 input3 = inputs[2];\n  \n  uint64_t input2_64 = convert_uint_to_uint64(input2);\n  uint64_t input3_64 = convert_uint_to_uint64(input3);\n  \n  uint64_t output_int = calculate_output(input2_64, input3_64);\n  output_int = FUNC_080004c8((int)output_int,(int)((ulonglong)output_int >> 0x20),0,DAT_08004e68);\n  output_int = FUNC_0800071c((int)output_int,(int)((ulonglong)output_int >> 0x20),DAT_08004e60,DAT_08004e64);\n  \n  float output1_float = calculate_float(output_int);\n  \n  uint64_t input1_64 = convert_uint_to_uint64(input1);\n  input3_64 = convert_uint_to_uint64(input3);\n  \n  output_int = calculate_output(input1_64, input3_64);\n  output_int = FUNC_080004c8((int)output_int,(int)((ulonglong)output_int >> 0x20),0,DAT_08004e68);\n  output_int = FUNC_0800071c((int)output_int,(int)((ulonglong)output_int >> 0x20),DAT_08004e60,DAT_08004e64);\n  \n  float output2_float = calculate_float(output_int);\n  \n  *output1 = *(undefined4 *)&output1_float;\n  *output2 = *(undefined4 *)&output2_float;\n}\n",
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "FUN_0800071c",
                "FUN_08000418",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_output_and_float_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "sign_bit",
                "iVar4": "hash_value",
                "uVar3": "shifted_input_value",
                "uVar5": "shifted_zero"
            },
            "code": "uint calculate_hash_08000c10(uint input_value) {\n  int leading_zeroes_count;\n  uint sign_bit;\n  uint shifted_input_value;\n  uint hash_value;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shifted_input_value = input_value << (leading_zeroes_count - 8);\n  hash_value = ((sign_bit | 0x4b000000) - 0x800000) + shifted_input_value * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint shifted_zero = 0 << (shifted_input_value & 0xff);\n    hash_value += (input_value << (shifted_input_value & 0xff)) + (0U >> (0x20 - shifted_input_value & 0xff)) + (uint)(0x7fffffff < shifted_zero);\n    if (shifted_zero == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  shifted_input_value = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  hash_value += ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input_value >> 0x1f));\n  if ((shifted_input_value & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(shifted_input_value >> 0x1f);\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78",
                "FUN_08004ae0"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_params_and_calculate_hashes_0800491c",
                "param_1": "params",
                "local_13": "zero_byte",
                "local_12": "sixteen_byte",
                "local_11": "eight_byte"
            },
            "code": "void initialize_params_and_calculate_hashes_0800491c(uint32_t *params)\n{\n    uint8_t zero_byte = 0;\n    uint8_t sixteen_byte = 0x10;\n    uint8_t eight_byte = 8;\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&zero_byte,1);\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&sixteen_byte,1);\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,&eight_byte,1);\n    for (int i = 0; i < 11; i++) {\n        params[i] = 0;\n    }\n    calculate_and_store_hashes_080049cc(params);\n}",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_params_and_calculate_hashes_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "allocate_memory_if_not_null_080078a0",
                "DAT_080078ac": "is_memory_allocated",
                "PTR_LAB_08008818_1_080078b0": "label_ptr_1",
                "allocate_memory_080098c0": "allocate_memory"
            },
            "code": "void allocate_memory_if_not_null_080078a0() {\n  if (DAT_080078ac != 0) {\n    allocate_memory(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "allocate_memory_if_not_null_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_data_and_clear_memory_080057e8",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08005828": "PTR_DATA_CLEAR_START",
                "PTR_DAT_08005820": "PTR_DATA_START",
                "PTR_DAT_08005824": "PTR_DATA_END",
                "PTR_DAT_0800582c": "PTR_DATA_CLEAR_END",
                "DAT_0800581c": "DAT_DATA_START",
                "set_bit_and_clear_other_bits_08005780": "set_bit_and_clear_other_bits",
                "execute_functions_08005d20": "execute_functions",
                "initialize_and_process_data_08005224": "initialize_and_process_data"
            },
            "code": "void copy_data_and_clear_memory_080057e8(void)\n{\n  int i;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (i = 0; i < (PTR_DAT_08005824 - PTR_DAT_08005820); i += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + i) = *(undefined4 *)(DAT_0800581c + i);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08005828; data_ptr < PTR_DAT_0800582c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_and_clear_other_bits();\n  execute_functions();\n  jump_table = (code *)0x800581a;\n  initialize_and_process_data();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08005d20",
                "FUN_08005224",
                "FUN_08005780"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_memory_080057e8"
        }
    },
    "used_tokens": 146850,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08003568",
            "FUN_08003c94",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080011ec",
            "FUN_080008fc",
            "FUN_08005dfc",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080041ea",
            "FUN_08001044",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_08003d60",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_080015a0",
            "FUN_08005780",
            "FUN_08000134",
            "FUN_08000418",
            "FUN_0800416a",
            "FUN_0800088a",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_08001084",
            "FUN_08004e6c",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08002d3c",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080098c0",
            "FUN_080003d4",
            "FUN_08000c10"
        ],
        [
            "FUN_080036a8",
            "FUN_08004f2c",
            "FUN_08002c2e",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_080078c0",
            "FUN_080035a4",
            "FUN_08004ae0",
            "FUN_08004436",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003518",
            "FUN_0800172a",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_080055f4",
            "FUN_080016d0",
            "FUN_08004e74",
            "FUN_08005680",
            "FUN_08003540",
            "FUN_08005728",
            "FUN_08002bb4",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_080078a0"
        ],
        [
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_080049cc",
            "FUN_08000978",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_080009c0",
            "FUN_08009744",
            "FUN_080053b0",
            "FUN_08000ff4",
            "FUN_08001ab0",
            "FUN_08001762",
            "FUN_080090c0",
            "FUN_080027f4"
        ],
        [
            "FUN_08005348",
            "FUN_0800884c",
            "FUN_08001030",
            "FUN_08009444",
            "FUN_0800438a",
            "FUN_080009d4",
            "FUN_08001ccc",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_0800151c",
            "FUN_08009258",
            "FUN_08009530",
            "FUN_0800491c"
        ],
        [
            "FUN_08005598",
            "FUN_080014f0",
            "FUN_08004f78",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_080093a4"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_080052a0"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714"
        ],
        [
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}