{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_08000134(undefined4 input1,undefined4 input2)\n\n{\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_08000158",
            "code": "\nulonglong calculate_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int bitShift1;\n  byte carry;\n  uint sum1;\n  uint temp1;\n  uint sum2;\n  uint temp2;\n  uint temp3;\n  int bitShift2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool isEqual1;\n  bool isEqual2;\n  bool isCarry1;\n  \n  temp2 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  isEqual1 = ((input2 ^ temp2) & 0x7fffffff) == 0;\n  isEqual2 = isEqual1 && input1 == input3;\n  if (!isEqual1 || input1 != input3) {\n    isEqual2 = (result1 | input1) == 0;\n  }\n  if (!isEqual2) {\n    isEqual2 = (input4 | input3) == 0;\n  }\n  bitShift2 = (int)result1 >> 0x15;\n  if (!isEqual2) {\n    isEqual2 = bitShift2 == -1;\n  }\n  bitShift1 = (int)input4 >> 0x15;\n  if (!isEqual2) {\n    isEqual2 = bitShift1 == -1;\n  }\n  if (isEqual2) {\n    if (bitShift2 == -1 || bitShift1 == -1) {\n      result1 = temp2;\n      result3 = input3;\n      if (bitShift2 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (bitShift2 != -1 || bitShift1 != -1) {\n        input3 = result3;\n        temp2 = result1;\n      }\n      isEqual2 = (result3 | result1 << 0xc) == 0;\n      if (isEqual2) {\n        isEqual2 = (input3 | temp2 << 0xc) == 0;\n      }\n      if (isEqual2) {\n        isEqual2 = result1 == temp2;\n      }\n      if (!isEqual2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp2) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp2;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp2) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      isEqual2 = (input1 & 0x80000000) != 0;\n      temp2 = input2 * 2 + (uint)isEqual2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isEqual2)) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return CONCAT44(temp2,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  isEqual2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp3 = input2;\n  if (isEqual2 && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    temp3 = temp2;\n    input3 = input1;\n    temp2 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp3,result2);\n  }\n  temp1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    isEqual2 = result2 != 0;\n    result2 = -result2;\n    temp1 = -temp1 - (uint)isEqual2;\n  }\n  temp3 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    isEqual2 = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)isEqual2;\n  }\n  if (result1 == result3) {\n    temp3 = temp3 ^ 0x100000;\n    if (result1 == 0) {\n      temp1 = temp1 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp2 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp2 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    sum1 = result2 + input3;\n    sum2 = temp3 << (temp2 & 0xff);\n    temp2 = sum1 + sum2;\n    temp1 = temp1 + CARRY4(result2,input3) + ((int)temp3 >> (result3 & 0xff)) +\n            (uint)CARRY4(sum1,sum2);\n  }\n  else {\n    result4 = temp3 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp3 = (int)temp3 >> (result3 - 0x20 & 0xff);\n    temp2 = result2 + temp3;\n    temp1 = temp1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(result2,temp3);\n  }\n  input2 = temp1 & 0x80000000;\n  result3 = temp1;\n  if ((int)temp1 < 0) {\n    isEqual2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp2;\n    temp2 = -(uint)!isEqual2 - temp2;\n    result3 = -(uint)(isEqual2 <= result3) - temp1;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp2;\n      temp2 = (uint)(result2 != 0) << 0x1f | temp2 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isEqual2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      isEqual2 = (temp2 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp2,(uint)isEqual2) | input2,\n                    temp2 + isEqual2);\n  }\n  isEqual1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp2 * 2;\n  isEqual2 = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)isEqual1;\n  result3 = result3 * 2 + (uint)(isEqual2 || CARRY4(result2,(uint)isEqual1));\n  result2 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp2;\n  result1 = result3;\n  if (result3 == 0) {\n    temp3 = 0;\n    result1 = temp2;\n  }\n  bitShift2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    bitShift2 = bitShift2 + 0x20;\n  }\n  result3 = bitShift2 - 0xb;\n  isCarry1 = SBORROW4(result3,0x20);\n  temp2 = bitShift2 - 0x2b;\n  isEqual2 = (int)temp2 < 0;\n  isEqual1 = temp2 == 0;\n  if ((int)result3 < 0x20) {\n    isCarry1 = SCARRY4(temp2,0xc);\n    bitShift2 = bitShift2 + -0x1f;\n    isEqual2 = bitShift2 < 0;\n    isEqual1 = bitShift2 == 0;\n    temp2 = result3;\n    if (!isEqual1 && isEqual2 == isCarry1) {\n      temp3 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - bitShift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isEqual1 || isEqual2 != isCarry1) {\n    result4 = 0x20 - temp2;\n  }\n  result1 = result1 << (temp2 & 0xff);\n  if (isEqual1 || isEqual2 != isCarry1) {\n    result1 = result1 | temp3 >> (result4 & 0xff);\n  }\n  if (isEqual1 || isEqual2 != isCarry1) {\n    temp3 = temp3 << (temp2 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,temp3);\n  }\n  temp2 = ~(result2 - result3);\n  if ((int)temp2 < 0x1f) {\n    bitShift2 = temp2 - 0x13;\n    if (bitShift2 != 0 && bitShift2 < 0 == SCARRY4(temp2 - 0x1f,0xc)) {\n      return CONCAT44(temp1,temp3 >> (0x20 - (0xcU - bitShift2) & 0xff) | result1 << (0xcU - bitShift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp2 = temp2 + 1;\n    return CONCAT44(input2 | result1 >> (temp2 & 0xff),\n                    temp3 >> (temp2 & 0xff) | result1 << (0x20 - temp2 & 0xff));\n  }\n  return CONCAT44(temp1,result1 >> (temp2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "bitShift1",
                "bVar2": "carry",
                "uVar3": "sum1",
                "uVar4": "temp1",
                "uVar5": "sum2",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "iVar8": "bitShift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "isEqual1",
                "bVar14": "isEqual2",
                "bVar15": "isCarry1"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_sum_0800015c",
            "code": "\nulonglong calculateSum_0800015c(uint x1,uint x2,uint x3,uint x4)\n\n{\n  int shiftedBits1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shiftedBits2;\n  uint u2;\n  uint u4;\n  uint shiftedX2;\n  uint shiftedX4;\n  uint temp4;\n  uint temp5;\n  bool isCond1Satisfied;\n  bool isCond2Satisfied;\n  bool isCond3Satisfied;\n  \n  u2 = x2 << 1;\n  shiftedX2 = x4 << 1;\n  isCond1Satisfied = ((x2 ^ x4) & 0x7fffffff) == 0;\n  isCond2Satisfied = isCond1Satisfied && x1 == x3;\n  if (!isCond1Satisfied || x1 != x3) {\n    isCond2Satisfied = (u2 | x1) == 0;\n  }\n  if (!isCond2Satisfied) {\n    isCond2Satisfied = (shiftedX2 | x3) == 0;\n  }\n  shiftedBits2 = (int)u2 >> 0x15;\n  if (!isCond2Satisfied) {\n    isCond2Satisfied = shiftedBits2 == -1;\n  }\n  shiftedBits1 = (int)shiftedX2 >> 0x15;\n  if (!isCond2Satisfied) {\n    isCond2Satisfied = shiftedBits1 == -1;\n  }\n  if (isCond2Satisfied) {\n    if (shiftedBits2 == -1 || shiftedBits1 == -1) {\n      shiftedX2 = x4;\n      u2 = x3;\n      if (shiftedBits2 == -1) {\n        shiftedX2 = x2;\n        u2 = x1;\n      }\n      if (shiftedBits2 != -1 || shiftedBits1 != -1) {\n        x3 = u2;\n        x4 = shiftedX2;\n      }\n      isCond2Satisfied = (u2 | shiftedX2 << 0xc) == 0;\n      if (isCond2Satisfied) {\n        isCond2Satisfied = (x3 | x4 << 0xc) == 0;\n      }\n      if (isCond2Satisfied) {\n        isCond2Satisfied = shiftedX2 == x4;\n      }\n      if (!isCond2Satisfied) {\n        shiftedX2 = shiftedX2 | 0x80000;\n      }\n      return CONCAT44(shiftedX2,u2);\n    }\n    if (((x2 ^ x4) & 0x7fffffff) != 0 || x1 != x3) {\n      if ((u2 | x1) == 0) {\n        x1 = x3;\n        x2 = x4;\n      }\n      return CONCAT44(x2,x1);\n    }\n    if (x2 != x4) {\n      return 0;\n    }\n    if (u2 >> 0x15 == 0) {\n      isCond2Satisfied = (x1 & 0x80000000) != 0;\n      shiftedX2 = x2 * 2 + (uint)isCond2Satisfied;\n      if (CARRY4(x2,x2) || CARRY4(x2 * 2,(uint)isCond2Satisfied)) {\n        shiftedX2 = shiftedX2 | 0x80000000;\n      }\n      return CONCAT44(shiftedX2,x1 << 1);\n    }\n    if (u2 < 0xffc00000) {\n      return CONCAT44(x2 + 0x100000,x1);\n    }\n    x2 = x2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(x2 | 0x7ff00000) << 0x20;\n  }\n  u2 = u2 >> 0x15;\n  shiftedX2 = shiftedX2 >> 0x15;\n  shiftedX4 = shiftedX2 - u2;\n  isCond2Satisfied = shiftedX4 != 0;\n  if (shiftedX2 < u2) {\n    shiftedX4 = -shiftedX4;\n  }\n  u4 = x1;\n  temp3 = x2;\n  if (isCond2Satisfied && u2 <= shiftedX2) {\n    u2 = u2 + shiftedX4;\n    u4 = x3;\n    temp3 = x4;\n    x3 = x1;\n    x4 = x2;\n  }\n  if (0x36 < shiftedX4) {\n    return CONCAT44(temp3,u4);\n  }\n  shiftedX2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    isCond2Satisfied = u4 != 0;\n    u4 = -u4;\n    shiftedX2 = -shiftedX2 - (uint)isCond2Satisfied;\n  }\n  temp3 = x4 & 0xfffff | 0x100000;\n  if ((x4 & 0x80000000) != 0) {\n    isCond2Satisfied = x3 != 0;\n    x3 = -x3;\n    temp3 = -temp3 - (uint)isCond2Satisfied;\n  }\n  if (u2 == shiftedX4) {\n    temp3 = temp3 ^ 0x100000;\n    if (u2 == 0) {\n      shiftedX2 = shiftedX2 ^ 0x100000;\n      u2 = 1;\n    }\n    else {\n      shiftedX4 = shiftedX4 - 1;\n    }\n  }\n  temp5 = -shiftedX4 + 0x20;\n  if ((int)shiftedX4 < 0x21) {\n    temp4 = x3 << (temp5 & 0xff);\n    x3 = x3 >> (shiftedX4 & 0xff);\n    temp1 = u4 + x3;\n    temp2 = temp3 << (temp5 & 0xff);\n    temp5 = temp1 + temp2;\n    shiftedX2 = shiftedX2 + CARRY4(u4,x3) + ((int)temp3 >> (shiftedX4 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp4 = temp3 << (-shiftedX4 + 0x40 & 0xff);\n    if (x3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    temp3 = (int)temp3 >> (shiftedX4 - 0x20 & 0xff);\n    temp5 = u4 + temp3;\n    shiftedX2 = shiftedX2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(u4,temp3);\n  }\n  x2 = shiftedX2 & 0x80000000;\n  shiftedX4 = shiftedX2;\n  if ((int)shiftedX2 < 0) {\n    isCond2Satisfied = temp4 == 0;\n    temp4 = -temp4;\n    shiftedX4 = -temp5;\n    temp5 = -(uint)!isCond2Satisfied - temp5;\n    shiftedX4 = -(uint)(isCond2Satisfied <= shiftedX4) - shiftedX2;\n  }\n  if (0xfffff < shiftedX4) {\n    u4 = u2 - 1;\n    if (0x1fffff < shiftedX4) {\n      shiftedX2 = shiftedX4 & 1;\n      shiftedX4 = shiftedX4 >> 1;\n      carry = (byte)temp5;\n      temp5 = (uint)(shiftedX2 != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(carry & 1) << 0x1f | temp4 >> 1;\n      u4 = u2;\n      if (0xffbfffff < u2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isCond2Satisfied = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      isCond2Satisfied = (temp5 & 1) != 0;\n    }\n    return CONCAT44(shiftedX4 + u4 * 0x100000 + (uint)CARRY4(temp5,(uint)isCond2Satisfied) | x2,\n                    temp5 + isCond2Satisfied);\n  }\n  isCond1Satisfied = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  u4 = temp5 * 2;\n  isCond2Satisfied = CARRY4(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)isCond1Satisfied;\n  shiftedX4 = shiftedX4 * 2 + (uint)(isCond2Satisfied || CARRY4(u4,(uint)isCond1Satisfied));\n  u4 = u2 - 2;\n  if ((shiftedX4 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp5;\n  u2 = shiftedX4;\n  if (shiftedX4 == 0) {\n    temp3 = 0;\n    u2 = temp5;\n  }\n  shiftedBits2 = LZCOUNT(u2);\n  if (shiftedX4 == 0) {\n    shiftedBits2 = shiftedBits2 + 0x20;\n  }\n  temp5 = shiftedBits2 - 0xb;\n  isCond3Satisfied = SBORROW4(temp5,0x20);\n  shiftedX4 = shiftedBits2 - 0x2b;\n  isCond2Satisfied = (int)shiftedX4 < 0;\n  isCond1Satisfied = shiftedX4 == 0;\n  if ((int)temp5 < 0x20) {\n    isCond3Satisfied = SCARRY4(shiftedX4,0xc);\n    shiftedBits2 = shiftedBits2 + -0x1f;\n    isCond2Satisfied = shiftedBits2 < 0;\n    isCond1Satisfied = shiftedBits2 == 0;\n    shiftedX4 = temp5;\n    if (!isCond1Satisfied && isCond2Satisfied == isCond3Satisfied) {\n      temp3 = u2 << (temp5 & 0xff);\n      u2 = u2 >> (0xcU - shiftedBits2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isCond1Satisfied || isCond2Satisfied != isCond3Satisfied) {\n    temp4 = 0x20 - shiftedX4;\n  }\n  u2 = u2 << (shiftedX4 & 0xff);\n  if (isCond1Satisfied || isCond2Satisfied != isCond3Satisfied) {\n    u2 = u2 | temp3 >> (temp4 & 0xff);\n  }\n  if (isCond1Satisfied || isCond2Satisfied != isCond3Satisfied) {\n    temp3 = temp3 << (shiftedX4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp5 <= (int)u4) {\n    return CONCAT44(u2 + (u4 - temp5) * 0x100000 | x2,temp3);\n  }\n  shiftedX4 = ~(u4 - temp5);\n  if ((int)shiftedX4 < 0x1f) {\n    shiftedBits2 = shiftedX4 - 0x13;\n    if (shiftedBits2 != 0 && shiftedBits2 < 0 == SCARRY4(shiftedX4 - 0x1f,0xc)) {\n      return CONCAT44(shiftedX2,temp3 >> (0x20 - (0xcU - shiftedBits2) & 0xff) | u2 << (0xcU - shiftedBits2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedX4 = shiftedX4 + 1;\n    return CONCAT44(x2 | u2 >> (shiftedX4 & 0xff),\n                    temp3 >> (shiftedX4 & 0xff) | u2 << (0x20 - shiftedX4 & 0xff));\n  }\n  return CONCAT44(shiftedX2,u2 >> (shiftedX4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_sum_0800015c",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "x3",
                "param_4": "x4",
                "iVar1": "shiftedBits1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shiftedBits2",
                "uVar7": "u2",
                "uVar8": "u4",
                "uVar9": "shiftedX2",
                "uVar10": "shiftedX4",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "isCond1Satisfied",
                "bVar14": "isCond2Satisfied",
                "bVar15": "isCond3Satisfied"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "shift_and_concat_080003d4",
            "code": "\nulonglong shiftAndConcat_080003d4(uint input)\n\n{\n  uint shiftedConcatUpper;\n  uint shiftedBitsAmount;\n  int leadingZeros;\n  uint shiftedSum;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  shiftedConcatUpper = 0;\n  leadingZeros = LZCOUNT(input);\n  shiftedSum = leadingZeros + 0x15;\n  isCarry = subtractionBorrow(shiftedSum,0x20);\n  shiftedBitsAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftedBitsAmount < 0;\n  isZero = shiftedBitsAmount == 0;\n  if (shiftedSum < 0x20) {\n    isCarry = subtractionCarry(shiftedBitsAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftedBitsAmount = shiftedSum;\n    if (!isZero && isCarry == false) {\n      shiftedConcatUpper = input << shiftedSum;\n      input = input >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto shiftBits;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingBits = 0x20 - shiftedBitsAmount;\n  }\n  input = input << (shiftedBitsAmount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    shiftedConcatUpper = 0 << (shiftedBitsAmount & 0xff);\n  }\nshiftBits:\n  if (shiftedSum < 0x433) {\n    return concat(input + (0x432 - shiftedSum) * 0x100000,shiftedConcatUpper);\n  }\n  shiftedBitsAmount = ~(0x432 - shiftedSum);\n  if (0x1e < (int)shiftedBitsAmount) {\n    return (ulonglong)(input >> (shiftedBitsAmount - 0x1f & 0xff));\n  }\n  leadingZeros = shiftedBitsAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != subtractionCarry(shiftedBitsAmount - 0x1f,0xc)) {\n    shiftedBitsAmount = shiftedBitsAmount + 1;\n    return concat(input >> (shiftedBitsAmount & 0xff),\n                    shiftedConcatUpper >> (shiftedBitsAmount & 0xff) | input << (0x20 - shiftedBitsAmount & 0xff));\n  }\n  return (ulonglong)(shiftedConcatUpper >> (0x20 - (0xcU - leadingZeros) & 0xff) | input << (0xcU - leadingZeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "shift_and_concat_080003d4",
                "param_1": "input",
                "uVar1": "shiftedConcatUpper",
                "uVar2": "shiftedBitsAmount",
                "iVar3": "leadingZeros",
                "uVar4": "shiftedSum",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isCarry",
                "LAB_080002e0": "shiftBits",
                "SCARRY4": "subtractionCarry",
                "SBORROW4": "subtractionBorrow",
                "CONCAT44": "concat"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "bit_shifting_function_080003f4",
            "code": "\nulonglong bitShiftingFunction_080003f4(uint input)\n\n{\n  uint shiftedBits;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint bitsToShift;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  shiftedBits = 0;\n  leadingZeros = LZCOUNT(absInput);\n  bitsToShift = leadingZeros + 0x15;\n  isOverflow = SBORROW4(bitsToShift,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (bitsToShift < 0x20) {\n    isOverflow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = bitsToShift;\n    if (!isZero && isOverflow == false) {\n      shiftedBits = absInput << bitsToShift;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != isOverflow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != isOverflow) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isOverflow) {\n    shiftedBits = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (bitsToShift < 0x433) {\n    return CONCAT44(absInput + (0x432 - bitsToShift) * 0x100000 | signBit,shiftedBits);\n  }\n  shiftAmount = ~(0x432 - bitsToShift);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    shiftedBits >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,shiftedBits >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "bit_shifting_function_080003f4",
                "param_1": "input",
                "uVar1": "shiftedBits",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "bitsToShift",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isOverflow"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "extract_shifted_bits_08000418",
            "code": "\nulonglong extract_shifted_bits_08000418(uint input,undefined4 unknown_param_1,undefined4 unknown_param_2,uint unknown_param_3)\n\n{\n  uint sign_bit;\n  uint result;\n  uint combined_bits;\n  uint shifted_bits;\n  uint tmp;\n  int shift_amount;\n  uint shifted_amount;\n  uint remaining_bits;\n  bool shift_technique_1;\n  bool shift_technique_2;\n  bool shift_technique_3;\n  \n  tmp = input << 1;\n  shift_technique_2 = tmp == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_bits = (uint)((int)tmp >> 3) >> 1;\n  combined_bits = sign_bit | shifted_bits;\n  input = input << 0x1d;\n  if (!shift_technique_2) {\n    unknown_param_3 = tmp & 0xff000000;\n    shift_technique_2 = unknown_param_3 == 0;\n  }\n  if (!shift_technique_2) {\n    shift_technique_2 = unknown_param_3 == 0xff000000;\n  }\n  if (!shift_technique_2) {\n    return CONCAT44(combined_bits,input) ^ 0x3800000000000000;\n  }\n  if ((tmp & 0xffffff) == 0) {\n    return CONCAT44(combined_bits,input);\n  }\n  if (unknown_param_3 == 0xff000000) {\n    return CONCAT44(combined_bits,input) | 0x8000000000000;\n  }\n  result = input;\n  tmp = shifted_bits;\n  if (shifted_bits == 0) {\n    result = 0;\n    tmp = input;\n  }\n  shift_amount = LZCOUNT(tmp);\n  if (shifted_bits == 0) {\n    shift_amount = shift_amount + 0x20;\n  }\n  shifted_amount = shift_amount - 0xb;\n  shift_technique_3 = SBORROW4(shifted_amount,0x20);\n  shifted_bits = shift_amount - 0x2b;\n  shift_technique_2 = (int)shifted_bits < 0;\n  shift_technique_1 = shifted_bits == 0;\n  if ((int)shifted_amount < 0x20) {\n    shift_technique_3 = SCARRY4(shifted_bits,0xc);\n    shift_amount = shift_amount + -0x1f;\n    shift_technique_2 = shift_amount < 0;\n    shift_technique_1 = shift_amount == 0;\n    shifted_bits = shifted_amount;\n    if (!shift_technique_1 && shift_technique_2 == shift_technique_3) {\n      result = tmp << (shifted_amount & 0xff);\n      tmp = tmp >> (0xcU - shift_amount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (shift_technique_1 || shift_technique_2 != shift_technique_3) {\n    remaining_bits = 0x20 - shifted_bits;\n  }\n  tmp = tmp << (shifted_bits & 0xff);\n  if (shift_technique_1 || shift_technique_2 != shift_technique_3) {\n    tmp = tmp | result >> (remaining_bits & 0xff);\n  }\n  if (shift_technique_1 || shift_technique_2 != shift_technique_3) {\n    result = result << (shifted_bits & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shifted_amount < 0x381) {\n    return CONCAT44(tmp + (0x380 - shifted_amount) * 0x100000 | sign_bit,result);\n  }\n  shifted_bits = ~(0x380 - shifted_amount);\n  if (0x1e < (int)shifted_bits) {\n    return CONCAT44(combined_bits,tmp >> (shifted_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shift_amount = shifted_bits - 0x13;\n  if (shift_amount == 0 || shift_amount < 0 != SCARRY4(shifted_bits - 0x1f,0xc)) {\n    shifted_bits = shifted_bits + 1;\n    return CONCAT44(sign_bit | tmp >> (shifted_bits & 0xff),\n                    result >> (shifted_bits & 0xff) | tmp << (0x20 - shifted_bits & 0xff));\n  }\n  return CONCAT44(combined_bits,result >> (0x20 - (0xcU - shift_amount) & 0xff) | tmp << (0xcU - shift_amount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "extract_shifted_bits_08000418",
                "param_1": "input",
                "param_2": "unknown_param_1",
                "param_3": "unknown_param_2",
                "param_4": "unknown_param_3",
                "uVar1": "sign_bit",
                "uVar2": "result",
                "uVar3": "combined_bits",
                "uVar4": "shifted_bits",
                "uVar5": "tmp",
                "iVar6": "shift_amount",
                "uVar7": "shifted_amount",
                "in_r12": "remaining_bits",
                "bVar8": "shift_technique_1",
                "bVar9": "shift_technique_2",
                "bVar10": "shift_technique_3"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_product_080004c8",
            "code": "\nulonglong calculateProduct_080004c8(undefined4 input1,uint input2,uint exponent1,uint exponent2)\n\n{\n  ulonglong product64;\n  longlong intermediate;\n  uint high32Product;\n  uint op1Exponent11Bits;\n  int sumExponents;\n  uint op1Exponent;\n  uint op2Exponent11Bits;\n  uint op1Exponent2;\n  uint op2Exponent2;\n  bool isZero;\n  bool carryBit;\n  bool overflow;\n  ulonglong inputProduct;\n  \n  inputProduct = CONCAT44(input2,input1);\n  op1Exponent2 = 0x7ff;\n  op1Exponent11Bits = input2 >> 0x14 & 0x7ff;\n  isZero = op1Exponent11Bits == 0;\n  if (!isZero) {\n    op2Exponent11Bits = exponent2 >> 0x14 & 0x7ff;\n    isZero = op2Exponent11Bits == 0;\n  }\n  if (!isZero) {\n    isZero = op1Exponent11Bits == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = op2Exponent11Bits == 0x7ff;\n  }\n  if (isZero) {\n    inputProduct = FUN_080006a4();\n  }\n  high32Product = (uint)(inputProduct >> 0x20);\n  sumExponents = op1Exponent11Bits + op2Exponent11Bits;\n  op1Exponent11Bits = high32Product ^ exponent2;\n  high32Product = high32Product & ~(op1Exponent2 << 0x15);\n  exponent2 = exponent2 & ~(op1Exponent2 << 0x15);\n  isZero = ((uint)inputProduct | high32Product << 0xc) == 0;\n  if (!isZero) {\n    isZero = (exponent1 | exponent2 << 0xc) == 0;\n  }\n  high32Product = high32Product | 0x100000;\n  exponent2 = exponent2 | 0x100000;\n  if (isZero) {\n    exponent1 = (uint)inputProduct | exponent1;\n    exponent2 = (op1Exponent11Bits & 0x80000000 | high32Product) ^ exponent2;\n    op1Exponent11Bits = op1Exponent2 >> 1;\n    overflow = SBORROW4(sumExponents,op1Exponent11Bits);\n    op1Exponent = sumExponents - op1Exponent11Bits;\n    isZero = op1Exponent == 0;\n    high32Product = op1Exponent;\n    if (!isZero && (int)op1Exponent11Bits <= sumExponents) {\n      overflow = SBORROW4(op1Exponent2,op1Exponent);\n      high32Product = op1Exponent2 - op1Exponent;\n      isZero = op1Exponent2 == op1Exponent;\n    }\n    if (!isZero && (int)high32Product < 0 == overflow) {\n      exponent2 = exponent2 | op1Exponent * 0x100000;\n    }\n    if (!isZero && (int)high32Product < 0 == overflow) {\n      return CONCAT44(exponent2,exponent1);\n    }\n    exponent2 = exponent2 | 0x100000;\n    op1Exponent2 = 0;\n    overflow = SBORROW4(op1Exponent,1);\n    op1Exponent = op1Exponent - 1;\n    isZero = op1Exponent == 0;\n    op1Exponent11Bits = op1Exponent;\n  }\n  else {\n    product64 = (inputProduct & 0xffffffff) * (ulonglong)exponent1;\n    inputProduct = (inputProduct & 0xffffffff) * (ulonglong)exponent2 +\n             (ulonglong)high32Product * (ulonglong)exponent1 + (product64 >> 0x20);\n    op2Exponent2 = (uint)inputProduct;\n    intermediate = (ulonglong)high32Product * (ulonglong)exponent2 + (inputProduct >> 0x20);\n    op1Exponent2 = (uint)intermediate;\n    high32Product = (uint)((ulonglong)intermediate >> 0x20);\n    if ((int)product64 != 0) {\n      op2Exponent2 = op2Exponent2 | 1;\n    }\n    op1Exponent = (sumExponents + -0x3ff) - (uint)(high32Product < 0x200);\n    if (high32Product < 0x200) {\n      isZero = (op2Exponent2 & 0x80000000) != 0;\n      op2Exponent2 = op2Exponent2 << 1;\n      intermediate = CONCAT44(high32Product * 2 + (uint)(CARRY4(op1Exponent2,op1Exponent2) || CARRY4(op1Exponent2 * 2,(uint)isZero)),\n                       op1Exponent2 * 2 + (uint)isZero);\n    }\n    exponent2 = op1Exponent11Bits & 0x80000000 | (int)((ulonglong)intermediate >> 0x20) << 0xb | (uint)intermediate >> 0x15;\n    exponent1 = (uint)intermediate << 0xb | op2Exponent2 >> 0x15;\n    op1Exponent2 = op2Exponent2 * 0x800;\n    carryBit = 0xfc < op1Exponent;\n    overflow = SBORROW4(op1Exponent,0xfd);\n    high32Product = op1Exponent - 0xfd;\n    isZero = high32Product == 0;\n    op1Exponent11Bits = high32Product;\n    if (carryBit && !isZero) {\n      carryBit = 0x6ff < high32Product;\n      overflow = SBORROW4(high32Product,0x700);\n      op1Exponent11Bits = op1Exponent - 0x7fd;\n      isZero = high32Product == 0x700;\n    }\n    if (!carryBit || isZero) {\n      isZero = 0x7fffffff < op1Exponent2;\n      if (op1Exponent2 == 0x80000000) {\n        isZero = (op2Exponent2 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(exponent2 + op1Exponent * 0x100000 + (uint)CARRY4(exponent1,(uint)isZero),exponent1 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)op1Exponent11Bits < 0 == overflow) {\n    return (ulonglong)(exponent2 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carryBit = SCARRY4(op1Exponent,0x36);\n  isZero = (int)(op1Exponent + 0x36) < 0;\n  overflow = op1Exponent == 0xffffffca;\n  if (overflow || isZero != carryBit) {\n    exponent1 = 0;\n  }\n  if (overflow || isZero != carryBit) {\n    exponent2 = exponent2 & 0x80000000;\n  }\n  if (overflow || isZero != carryBit) {\n    return CONCAT44(exponent2,exponent1);\n  }\n  op1Exponent11Bits = -op1Exponent;\n  high32Product = op1Exponent11Bits - 0x20;\n  if (0x1f < (int)op1Exponent11Bits) {\n    op1Exponent = exponent1 >> (high32Product & 0xff) | exponent2 << (0x20 - high32Product & 0xff);\n    op1Exponent11Bits = (exponent2 >> (high32Product & 0xff) & ~((exponent2 & 0x80000000) >> (high32Product & 0xff))) -\n            ((int)op1Exponent >> 0x1f);\n    if ((op1Exponent2 | exponent1 << (0x20 - high32Product & 0xff) | op1Exponent << 1) == 0) {\n      op1Exponent11Bits = op1Exponent11Bits & ~(op1Exponent >> 0x1f);\n    }\n    return CONCAT44(exponent2,op1Exponent11Bits) & 0x80000000ffffffff;\n  }\n  sumExponents = op1Exponent11Bits - 0x14;\n  if (sumExponents == 0 || sumExponents < 0 != SCARRY4(high32Product,0xc)) {\n    op2Exponent2 = exponent1 << (op1Exponent + 0x20 & 0xff);\n    high32Product = exponent1 >> (op1Exponent11Bits & 0xff) | exponent2 << (op1Exponent + 0x20 & 0xff);\n    op1Exponent = high32Product + -((int)op2Exponent2 >> 0x1f);\n    if ((op1Exponent2 | op2Exponent2 << 1) == 0) {\n      op1Exponent = op1Exponent & ~(op2Exponent2 >> 0x1f);\n    }\n    return CONCAT44((exponent2 & 0x80000000) +\n                    ((exponent2 & 0x7fffffff) >> (op1Exponent11Bits & 0xff)) +\n                    (uint)CARRY4(high32Product,-((int)op2Exponent2 >> 0x1f)),op1Exponent);\n  }\n  op1Exponent11Bits = 0xc - sumExponents;\n  op1Exponent = exponent1 << (op1Exponent11Bits & 0xff);\n  op1Exponent11Bits = exponent1 >> (0x20 - op1Exponent11Bits & 0xff) | exponent2 << (op1Exponent11Bits & 0xff);\n  high32Product = op1Exponent11Bits + -((int)op1Exponent >> 0x1f);\n  if ((op1Exponent2 | op1Exponent << 1) == 0) {\n    high32Product = high32Product & ~(op1Exponent >> 0x1f);\n  }\n  return CONCAT44((exponent2 & 0x80000000) + (uint)CARRY4(op1Exponent11Bits,-((int)op1Exponent >> 0x1f)),high32Product);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_product_080004c8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "exponent1",
                "param_4": "exponent2",
                "uVar1": "product64",
                "lVar2": "intermediate",
                "uVar3": "high32Product",
                "uVar4": "op1Exponent11Bits",
                "iVar5": "sumExponents",
                "uVar6": "op1Exponent",
                "unaff_r5": "op2Exponent11Bits",
                "uVar7": "op1Exponent2",
                "uVar8": "op2Exponent2",
                "bVar9": "isZero",
                "bVar10": "carryBit",
                "bVar11": "overflow",
                "uVar12": "inputProduct"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_bitwise_operation_080006a4",
            "code": "\nulonglong calculate_bitwise_operation_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit_value1;\n  uint bit_value2;\n  uint temp1;\n  uint temp2;\n  uint input_mask;\n  bool is_zero;\n  \n  temp1 = input_mask & input4 >> 0x14;\n  if (bit_value2 != input_mask && temp1 != input_mask) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit_value2 == 0) {\n      temp2 = input2 & 0x80000000;\n      do {\n        bit_value1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit_value1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp2 = input2;\n  if (((!is_zero) && ((bit_value2 != input_mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp1 != input_mask || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_bitwise_operation_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit_value1",
                "unaff_r4": "bit_value2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "input_mask",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint remainder1;\n  uint remainder2;\n  uint shiftedParam3;\n  uint shiftedParam4;\n  uint shiftedRemainder1;\n  uint shiftedRemainder2;\n  uint exponent1;\n  int exponentDiff;\n  uint exponentSum;\n  uint exponent2;\n  uint combinedExponent1;\n  uint combinedExponent2;\n  uint difference;\n  uint specialCase;\n  bool isZeroCase;\n  bool isCarryFlag;\n  bool isSignedOverflow;\n  undefined8 result;\n  \n  result = CONCAT44(param2,param1);\n  specialCase = 0x7ff;\n  exponent1 = param2 >> 0x14 & 0x7ff;\n  isZeroCase = exponent1 == 0;\n  if (!isZeroCase) {\n    exponent2 = param4 >> 0x14 & 0x7ff;\n    isZeroCase = exponent2 == 0;\n  }\n  if (!isZeroCase) {\n    isZeroCase = exponent1 == 0x7ff;\n  }\n  if (!isZeroCase) {\n    isZeroCase = exponent2 == 0x7ff;\n  }\n  if (isZeroCase) {\n    result = FUN_0800088a();\n  }\n  exponentSum = (uint)((ulonglong)result >> 0x20);\n  combinedExponent2 = (uint)result;\n  exponentDiff = exponent1 - exponent2;\n  if ((param3 | param4 << 0xc) == 0) {\n    exponent1 = (exponentSum ^ param4) & 0x80000000 | exponentSum & 0xfffff;\n    isSignedOverflow = SCARRY4(exponentDiff,specialCase >> 1);\n    exponentSum = exponentDiff + (specialCase >> 1);\n    isZeroCase = (int)exponentSum < 0;\n    isCarryFlag = exponentSum == 0;\n    if (!isCarryFlag && isZeroCase == isSignedOverflow) {\n      isSignedOverflow = SBORROW4(specialCase,exponentSum);\n      isZeroCase = (int)(specialCase - exponentSum) < 0;\n      isCarryFlag = specialCase == exponentSum;\n    }\n    if (!isCarryFlag && isZeroCase == isSignedOverflow) {\n      exponent1 = exponent1 | exponentSum * 0x100000;\n    }\n    if (!isCarryFlag && isZeroCase == isSignedOverflow) {\n      return CONCAT44(exponent1,combinedExponent2);\n    }\n    exponent1 = exponent1 | 0x100000;\n    specialCase = 0;\n    isCarryFlag = SBORROW4(exponentSum,1);\n    exponentSum = exponentSum - 1;\n    isZeroCase = exponentSum == 0;\n    shiftedParam3 = exponentSum;\n  }\n  else {\n    shiftedParam3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    specialCase = param3 << 8;\n    combinedExponent1 = (exponentSum << 0xc) >> 4 | 0x10000000 | combinedExponent2 >> 0x18;\n    combinedExponent2 = combinedExponent2 * 0x100;\n    exponent1 = (exponentSum ^ param4) & 0x80000000;\n    isZeroCase = shiftedParam3 <= combinedExponent1;\n    if (combinedExponent1 == shiftedParam3) {\n      isZeroCase = specialCase <= combinedExponent2;\n    }\n    exponentDiff = exponentDiff + (uint)isZeroCase;\n    exponentSum = exponentDiff + 0x3fd;\n    if (isZeroCase == false) {\n      shiftedParam3 = shiftedParam3 >> 1;\n      specialCase = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | specialCase >> 1;\n    }\n    difference = combinedExponent2 - specialCase;\n    combinedExponent1 = (combinedExponent1 - shiftedParam3) - (uint)(combinedExponent2 < specialCase);\n    shiftedParam4 = shiftedParam3 >> 1;\n    remainder1 = (uint)((shiftedParam3 & 1) != 0) << 0x1f | specialCase >> 1;\n    combinedExponent2 = 0x100000;\n    shiftedParam3 = 0x80000;\n    while( true ) {\n      isZeroCase = remainder1 <= difference;\n      if (shiftedParam4 < combinedExponent1 || combinedExponent1 - shiftedParam4 < (uint)isZeroCase) {\n        difference = difference - remainder1;\n        combinedExponent2 = combinedExponent2 | shiftedParam3;\n        combinedExponent1 = (combinedExponent1 - shiftedParam4) - (uint)!isZeroCase;\n      }\n      shiftedRemainder1 = shiftedParam4 >> 1;\n      remainder1 = (uint)((shiftedParam4 & 1) != 0) << 0x1f | remainder1 >> 1;\n      isCarryFlag = remainder1 <= difference;\n      isZeroCase = combinedExponent1 - shiftedRemainder1 < (uint)isCarryFlag;\n      specialCase = combinedExponent1;\n      if (shiftedRemainder1 < combinedExponent1 || isZeroCase) {\n        difference = difference - remainder1;\n        specialCase = (combinedExponent1 - shiftedRemainder1) - (uint)!isCarryFlag;\n      }\n      if (shiftedRemainder1 < combinedExponent1 || isZeroCase) {\n        combinedExponent2 = combinedExponent2 | shiftedParam3 >> 1;\n      }\n      combinedExponent1 = shiftedParam4 >> 2;\n      remainder2 = (uint)((shiftedRemainder1 & 1) != 0) << 0x1f | remainder1 >> 1;\n      isCarryFlag = remainder2 <= difference;\n      isZeroCase = specialCase - combinedExponent1 < (uint)isCarryFlag;\n      shiftedRemainder1 = specialCase;\n      if (combinedExponent1 < specialCase || isZeroCase) {\n        difference = difference - remainder2;\n        shiftedRemainder1 = (specialCase - combinedExponent1) - (uint)!isCarryFlag;\n      }\n      if (combinedExponent1 < specialCase || isZeroCase) {\n        combinedExponent2 = combinedExponent2 | shiftedParam3 >> 2;\n      }\n      shiftedRemainder2 = shiftedParam4 >> 3;\n      remainder1 = (uint)((combinedExponent1 & 1) != 0) << 0x1f | remainder2 >> 1;\n      isCarryFlag = remainder1 <= difference;\n      isZeroCase = shiftedRemainder1 - shiftedRemainder2 < (uint)isCarryFlag;\n      combinedExponent1 = shiftedRemainder1;\n      if (shiftedRemainder2 < shiftedRemainder1 || isZeroCase) {\n        difference = difference - remainder1;\n        combinedExponent1 = (shiftedRemainder1 - shiftedRemainder2) - (uint)!isCarryFlag;\n      }\n      if (shiftedRemainder2 < shiftedRemainder1 || isZeroCase) {\n        combinedExponent2 = combinedExponent2 | shiftedParam3 >> 3;\n      }\n      specialCase = combinedExponent1 | difference;\n      if (specialCase == 0) break;\n      combinedExponent1 = combinedExponent1 << 4 | difference >> 0x1c;\n      difference = difference << 4;\n      shiftedParam4 = shiftedParam4 & 0xfffffff8 | remainder1 >> 0x1d;\n      remainder1 = (remainder2 >> 1) << 3;\n      shiftedParam3 = shiftedParam3 >> 4;\n      if (shiftedParam3 == 0) {\n        shiftedRemainder2 = shiftedParam4;\n        if ((exponent1 & 0x100000) != 0) goto LAB_0800083a;\n        exponent1 = exponent1 | combinedExponent2;\n        combinedExponent2 = 0;\n        shiftedParam3 = 0x80000000;\n      }\n    }\n    if ((exponent1 & 0x100000) == 0) {\n      exponent1 = exponent1 | combinedExponent2;\n      combinedExponent2 = 0;\n    }\nLAB_0800083a:\n    isSignedOverflow = 0xfc < exponentSum;\n    isCarryFlag = SBORROW4(exponentSum,0xfd);\n    shiftedParam4 = exponentDiff + 0x300;\n    isZeroCase = shiftedParam4 == 0;\n    shiftedParam3 = shiftedParam4;\n    if (isSignedOverflow && !isZeroCase) {\n      isSignedOverflow = 0x6ff < shiftedParam4;\n      isCarryFlag = SBORROW4(shiftedParam4,0x700);\n      shiftedParam3 = exponentDiff - 0x400;\n      isZeroCase = shiftedParam4 == 0x700;\n    }\n    if (!isSignedOverflow || isZeroCase) {\n      isZeroCase = shiftedRemainder2 <= combinedExponent1;\n      if (combinedExponent1 == shiftedRemainder2) {\n        isZeroCase = remainder1 <= difference;\n      }\n      if (combinedExponent1 == shiftedRemainder2 && difference == remainder1) {\n        isZeroCase = (combinedExponent2 & 1) != 0;\n      }\n      return CONCAT44(exponent1 + exponentSum * 0x100000 + (uint)CARRY4(combinedExponent2,(uint)isZeroCase),combinedExponent2 + isZeroCase);\n    }\n  }\n  if (!isZeroCase && (int)shiftedParam3 < 0 == isCarryFlag) {\n    return (ulonglong)(exponent1 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isSignedOverflow = SCARRY4(exponentSum,0x36);\n  isZeroCase = (int)(exponentSum + 0x36) < 0;\n  isCarryFlag = exponentSum == 0xffffffca;\n  if (isCarryFlag || isZeroCase != isSignedOverflow) {\n    combinedExponent2 = 0;\n  }\n  if (isCarryFlag || isZeroCase != isSignedOverflow) {\n    exponent1 = exponent1 & 0x80000000;\n  }\n  if (isCarryFlag || isZeroCase != isSignedOverflow) {\n    return CONCAT44(exponent1,combinedExponent2);\n  }\n  shiftedParam3 = -exponentSum;\n  combinedExponent1 = shiftedParam3 - 0x20;\n  if (0x1f < (int)shiftedParam3) {\n    shiftedParam3 = combinedExponent2 >> (combinedExponent1 & 0xff) | exponent1 << (0x20 - combinedExponent1 & 0xff);\n    exponentSum = (exponent1 >> (combinedExponent1 & 0xff) & ~((exponent1 & 0x80000000) >> (combinedExponent1 & 0xff))) -\n            ((int)shiftedParam3 >> 0x1f);\n    if ((specialCase | combinedExponent2 << (0x20 - combinedExponent1 & 0xff) | shiftedParam3 << 1) == 0) {\n      exponentSum = exponentSum & ~(shiftedParam3 >> 0x1f);\n    }\n    return CONCAT44(exponent1,exponentSum) & 0x80000000ffffffff;\n  }\n  exponentDiff = shiftedParam3 - 0x14;\n  if (exponentDiff != 0 && exponentDiff < 0 == SCARRY4(combinedExponent1,0xc)) {\n    exponentSum = 0xc - exponentDiff;\n    shiftedParam3 = combinedExponent2 << (exponentSum & 0xff);\n    combinedExponent2 = combinedExponent2 >> (0x20 - exponentSum & 0xff) | exponent1 << (exponentSum & 0xff);\n    exponentSum = combinedExponent2 + -((int)shiftedParam3 >> 0x1f);\n    if ((specialCase | shiftedParam3 << 1) == 0) {\n      exponentSum = exponentSum & ~(shiftedParam3 >> 0x1f);\n    }\n    return CONCAT44((exponent1 & 0x80000000) + (uint)CARRY4(combinedExponent2,-((int)shiftedParam3 >> 0x1f)),exponentSum);\n  }\n  combinedExponent1 = combinedExponent2 << (exponentSum + 0x20 & 0xff);\n  combinedExponent2 = combinedExponent2 >> (shiftedParam3 & 0xff) | exponent1 << (exponentSum + 0x20 & 0xff);\n  exponentSum = combinedExponent2 + -((int)combinedExponent1 >> 0x1f);\n  if ((specialCase | combinedExponent1 << 1) == 0) {\n    exponentSum = exponentSum & ~(combinedExponent1 >> 0x1f);\n  }\n  return CONCAT44((exponent1 & 0x80000000) +\n                  ((exponent1 & 0x7fffffff) >> (shiftedParam3 & 0xff)) +\n                  (uint)CARRY4(combinedExponent2,-((int)combinedExponent1 >> 0x1f)),exponentSum);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "remainder1",
                "uVar2": "remainder2",
                "uVar3": "shiftedParam3",
                "uVar4": "shiftedParam4",
                "uVar5": "shiftedRemainder1",
                "uVar6": "shiftedRemainder2",
                "uVar7": "exponent1",
                "iVar8": "exponentDiff",
                "uVar9": "exponentSum",
                "unaff_r5": "exponent2",
                "uVar10": "combinedExponent1",
                "uVar11": "combinedExponent2",
                "uVar12": "difference",
                "uVar13": "specialCase",
                "bVar14": "isZeroCase",
                "bVar15": "isCarryFlag",
                "bVar16": "isSignedOverflow",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_double_0800088a",
            "code": "\nulonglong calculate_double_0800088a(uint temp2,uint input_B,uint temp3,uint temp4)\n\n{\n  uint bit_A;\n  uint bit_B;\n  uint bit_C;\n  uint temp1;\n  uint bit_E;\n  bool is_zero;\n  \n  bit_C = bit_E & temp4 >> 0x14;\n  temp1 = input_B;\n  if (bit_B != bit_E || bit_C != bit_E) {\n    if (bit_B == bit_E) {\n      if (((temp2 | input_B << 0xc) == 0) && (temp2 = temp3, temp1 = temp4, bit_C != bit_E)\n         ) {\nhandle_condition1:\n        return (ulonglong)((input_B ^ temp4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit_C == bit_E) {\n      temp2 = temp3;\n      temp1 = temp4;\n      if ((temp3 | temp4 << 0xc) == 0) {\nhandle_condition2:\n        return (ulonglong)((input_B ^ temp4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (temp2 | input_B << 1) == 0;\n      if (!is_zero) {\n        is_zero = (temp3 | temp4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit_B == 0) {\n          temp1 = input_B & 0x80000000;\n          do {\n            bit_A = temp2 & 0x80000000;\n            temp2 = temp2 << 1;\n            input_B = input_B * 2 + (uint)(bit_A != 0);\n          } while ((input_B & 0x100000) == 0);\n          input_B = input_B | temp1;\n          if (bit_C != 0) {\n            return concatenate(input_B,temp2);\n          }\n        }\n        do {\n          temp1 = temp3 & 0x80000000;\n          temp3 = temp3 << 1;\n          temp4 = temp4 * 2 + (uint)(temp1 != 0);\n        } while ((temp4 & 0x100000) == 0);\n        return concatenate(input_B,temp2);\n      }\n      if ((temp2 | input_B << 1) != 0) goto handle_condition1;\n      if ((temp3 | temp4 << 1) != 0) goto handle_condition2;\n    }\n  }\n  return concatenate(temp1,temp2) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_double_0800088a",
                "param_1": "temp2",
                "param_2": "input_B",
                "param_3": "temp3",
                "param_4": "temp4",
                "uVar1": "bit_A",
                "unaff_r4": "bit_B",
                "uVar2": "bit_C",
                "uVar3": "temp1",
                "in_r12": "bit_E",
                "bVar4": "is_zero",
                "LAB_080006fc": "handle_condition1",
                "LAB_080006c0": "handle_condition2",
                "CONCAT44": "concatenate"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_params_equality_080008fc",
            "code": "\nuint check_params_equality_080008fc(uint first_param,uint second_param,uint third_param,uint fourth_param)\n\n{\n  uint param_xor_result;\n  bool is_params_zero;\n  bool is_comparison_true;\n  \n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_params_zero = (first_param | second_param << 1) == 0;\n  if (is_params_zero) {\n    is_params_zero = (third_param | fourth_param << 1) == 0;\n  }\n  if (!is_params_zero) {\n    is_params_zero = second_param == fourth_param;\n  }\n  if (is_params_zero) {\n    is_params_zero = first_param == third_param;\n  }\n  if (!is_params_zero) {\n    param_xor_result = second_param ^ fourth_param;\n    is_params_zero = param_xor_result == 0;\n    if (-1 < (int)param_xor_result) {\n      is_params_zero = second_param == fourth_param;\n    }\n    is_comparison_true = -1 < (int)param_xor_result && fourth_param <= second_param;\n    if (is_params_zero) {\n      is_comparison_true = third_param <= first_param;\n    }\n    fourth_param = (int)fourth_param >> 0x1f;\n    if (!is_comparison_true) {\n      fourth_param = ~fourth_param;\n    }\n    return fourth_param | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_params_equality_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "param_xor_result",
                "bVar2": "is_params_zero",
                "bVar3": "is_comparison_true"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "function_with_name_08000978",
            "code": "\nvoid functionWithName_08000978(undefined4 firstParameter,undefined4 secondParameter,undefined4 thirdParameter,undefined4 fourthParameter)\n\n{\n  FUN_08000988(thirdParameter,fourthParameter,firstParameter,secondParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "function_with_name_08000978",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "param_3": "thirdParameter",
                "param_4": "fourthParameter"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "initialize_08000988",
            "code": "\nundefined4 initialize_08000988(undefined4 input)\n\n{\n  FUN_080008fc();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000988": "initialize_08000988",
                "param_1": "input"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_if_null_character_present_08000998",
            "code": "\nbool check_if_null_character_present_08000998(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_if_null_character_present_08000998",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_null_termination_080009ac",
            "code": "\nbool checkNullTermination_080009ac(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08000988();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_null_termination_080009ac",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_zero_or_carry_080009c0",
            "code": "\nbool check_zero_or_carry_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000988();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_zero_or_carry_080009c0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_for_zero_flags_080009d4",
            "code": "\nbool checkForZeroFlags_080009d4(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_08000978();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_for_zero_flags_080009d4",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_null_terminated_080009e8",
            "code": "\nbool check_if_null_terminated_080009e8(void)\n\n{\n  char input_character;\n  \n  FUN_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_null_terminated_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_float_080009fc",
            "code": "\nuint calculateFloat_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint multiplied;\n  uint uVar3;\n  uint adjusted;\n  bool isZero;\n  bool isSmall;\n  \n  multiplied = input2 * 2;\n  isSmall = multiplied < 0x70000000;\n  uVar3 = multiplied + 0x90000000;\n  result = uVar3;\n  if (!isSmall) {\n    adjusted = multiplied + 0x8fe00000;\n    result = adjusted;\n  }\n  isZero = result == 0;\n  if (!isSmall && uVar3 >= 0x200000) {\n    isZero = adjusted == 0x1fc00000;\n  }\n  if (((isSmall || uVar3 < 0x200000) || 0x1fc00000 < adjusted) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)multiplied >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multiplied + 0x92e00000) < 0 != SCARRY4(uVar3,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    multiplied = 0x18 - (multiplied + 0x92e00000 >> 0x15);\n    result = input1 >> (multiplied & 0xff);\n    if (input1 << (0x20 - multiplied & 0xff) != 0) {\n      result = result | 1;\n    }\n    uVar3 = input2 & 0x1fffff | 0x100000;\n    input1 = result | uVar3 << (0x20 - multiplied & 0xff);\n    uVar3 = (uVar3 >> (multiplied & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + uVar3 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_float_080009fc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "multiplied",
                "in_r12": "adjusted",
                "bVar4": "isZero",
                "bVar5": "isSmall"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "perform_binary_operation_08000aa4",
            "code": "\nuint performBinaryOperation_08000aa4(uint operand1,uint operand2,undefined4 flag,uint result)\n\n{\n  int shiftedOperand1;\n  int shiftedOperand2;\n  uint result1;\n  uint result2;\n  uint shiftedResult1;\n  uint shiftedResult2;\n  uint difference;\n  bool isConditionMet;\n  \n  result1 = operand2 ^ 0x80000000;\n  shiftedResult1 = operand1 << 1;\n  isConditionMet = shiftedResult1 == 0;\n  if (!isConditionMet) {\n    result = operand2 << 1;\n    isConditionMet = result == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = shiftedResult1 == result;\n  }\n  shiftedOperand1 = (int)shiftedResult1 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftedOperand1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)result >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftedOperand2 = (int)(operand2 << 1) >> 0x18;\n    if (shiftedOperand1 == -1 || shiftedOperand2 == -1) {\n      shiftedResult1 = result1;\n      if (shiftedOperand1 == -1) {\n        shiftedResult1 = operand1;\n      }\n      if (shiftedOperand1 != -1 || shiftedOperand2 != -1) {\n        result1 = shiftedResult1;\n      }\n      isConditionMet = (shiftedResult1 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (result1 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = shiftedResult1 == result1;\n      }\n      if (!isConditionMet) {\n        shiftedResult1 = shiftedResult1 | 0x400000;\n      }\n      return shiftedResult1;\n    }\n    if (((operand1 ^ result1) & 0x7fffffff) != 0) {\n      if (shiftedResult1 == 0) {\n        operand1 = result1;\n      }\n      return operand1;\n    }\n    if (operand1 != result1) {\n      return 0;\n    }\n    if ((shiftedResult1 & 0xff000000) == 0) {\n      result1 = operand1 << 1;\n      if ((operand1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (shiftedResult1 < 0xfe000000) {\n      return operand1 + 0x800000;\n    }\n    operand1 = operand1 & 0x80000000;\nLAB_08000bde:\n    return operand1 | 0x7f800000;\n  }\n  shiftedResult1 = shiftedResult1 >> 0x18;\n  result = result >> 0x18;\n  difference = result - shiftedResult1;\n  isConditionMet = difference != 0;\n  shiftedResult2 = shiftedResult1;\n  if (isConditionMet && shiftedResult1 <= result) {\n    shiftedResult2 = shiftedResult1 + difference;\n  }\n  if (isConditionMet && shiftedResult1 <= result) {\n    result1 = result1 ^ operand1;\n  }\n  if (isConditionMet && shiftedResult1 <= result) {\n    operand1 = operand1 ^ result1;\n  }\n  if (isConditionMet && shiftedResult1 <= result) {\n    result1 = result1 ^ operand1;\n  }\n  if (result < shiftedResult1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return operand1;\n  }\n  shiftedResult1 = operand1 & 0xffffff | 0x800000;\n  if ((operand1 & 0x80000000) != 0) {\n    shiftedResult1 = -shiftedResult1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (shiftedResult2 == difference) {\n    result2 = result2 ^ 0x800000;\n    if (shiftedResult2 == 0) {\n      shiftedResult1 = shiftedResult1 ^ 0x800000;\n      shiftedResult2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  operand1 = shiftedResult1 & 0x80000000;\n  if ((int)shiftedResult1 < 0) {\n    isConditionMet = result2 != 0;\n    result2 = -result2;\n    shiftedResult1 = -shiftedResult1 - (uint)isConditionMet;\n  }\n  if (shiftedResult1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    shiftedResult1 = shiftedResult1 * 2 + (uint)(result1 != 0);\n    result1 = shiftedResult2 - 2;\n    if ((shiftedResult1 & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedResult1) - 8;\n      shiftedResult1 = shiftedResult1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        shiftedResult1 = shiftedResult1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        shiftedResult1 = shiftedResult1 + (result1 - difference) * 0x800000;\n      }\n      return shiftedResult1 | operand1;\n    }\n  }\n  else {\n    result1 = shiftedResult2 - 1;\n    if (0xffffff < shiftedResult1) {\n      result1 = shiftedResult1 & 1;\n      shiftedResult1 = shiftedResult1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = shiftedResult2;\n      if (0xfd < shiftedResult2) goto LAB_08000bde;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    shiftedResult1 = shiftedResult1 & 0xfffffffe;\n  }\n  return shiftedResult1 | operand1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "perform_binary_operation_08000aa4",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "flag",
                "param_4": "result",
                "iVar1": "shiftedOperand1",
                "iVar2": "shiftedOperand2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "shiftedResult1",
                "uVar6": "shiftedResult2",
                "uVar7": "difference",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_sum_08000aa8",
            "code": "\nuint calculateFloatingPointSum_08000aa8(uint operand1,uint operand2,undefined4 shiftValue,uint shiftedBits)\n\n{\n  int operand1Shifted;\n  int operand2Shifted;\n  uint operand1Normalized;\n  uint operand2Normalized;\n  uint shiftedBitsCount;\n  uint difference;\n  bool isZero;\n  \n  operand2Normalized = operand1 << 1;\n  isZero = operand2Normalized == 0;\n  if (!isZero) {\n    shiftedBits = operand2 << 1;\n    isZero = shiftedBits == 0;\n  }\n  if (!isZero) {\n    isZero = operand2Normalized == shiftedBits;\n  }\n  operand1Shifted = (int)operand2Normalized >> 0x18;\n  if (!isZero) {\n    isZero = operand1Shifted == -1;\n  }\n  if (!isZero) {\n    isZero = (int)shiftedBits >> 0x18 == -1;\n  }\n  if (isZero) {\n    operand2Shifted = (int)(operand2 << 1) >> 0x18;\n    if (operand1Shifted == -1 || operand2Shifted == -1) {\n      operand2Normalized = operand2;\n      if (operand1Shifted == -1) {\n        operand2Normalized = operand1;\n      }\n      if (operand1Shifted != -1 || operand2Shifted != -1) {\n        operand2 = operand2Normalized;\n      }\n      isZero = (operand2Normalized & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (operand2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = operand2Normalized == operand2;\n      }\n      if (!isZero) {\n        operand2Normalized = operand2Normalized | 0x400000;\n      }\n      return operand2Normalized;\n    }\n    if (((operand1 ^ operand2) & 0x7fffffff) != 0) {\n      if (operand2Normalized == 0) {\n        operand1 = operand2;\n      }\n      return operand1;\n    }\n    if (operand1 != operand2) {\n      return 0;\n    }\n    if ((operand2Normalized & 0xff000000) == 0) {\n      operand2Normalized = operand1 << 1;\n      if ((operand1 & 0x80000000) != 0) {\n        operand2Normalized = operand2Normalized | 0x80000000;\n      }\n      return operand2Normalized;\n    }\n    if (operand2Normalized < 0xfe000000) {\n      return operand1 + 0x800000;\n    }\n    operand1 = operand1 & 0x80000000;\nLAB_08000bde:\n    return operand1 | 0x7f800000;\n  }\n  operand2Normalized = operand2Normalized >> 0x18;\n  shiftedBits = shiftedBits >> 0x18;\n  difference = shiftedBits - operand2Normalized;\n  isZero = difference != 0;\n  shiftedBitsCount = operand2Normalized;\n  if (isZero && operand2Normalized <= shiftedBits) {\n    shiftedBitsCount = operand2Normalized + difference;\n  }\n  if (isZero && operand2Normalized <= shiftedBits) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (isZero && operand2Normalized <= shiftedBits) {\n    operand1 = operand1 ^ operand2;\n  }\n  if (isZero && operand2Normalized <= shiftedBits) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (shiftedBits < operand2Normalized) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return operand1;\n  }\n  operand2Normalized = operand1 & 0xffffff | 0x800000;\n  if ((operand1 & 0x80000000) != 0) {\n    operand2Normalized = -operand2Normalized;\n  }\n  operand1Normalized = operand2 & 0xffffff | 0x800000;\n  if ((operand2 & 0x80000000) != 0) {\n    operand1Normalized = -operand1Normalized;\n  }\n  if (shiftedBitsCount == difference) {\n    operand1Normalized = operand1Normalized ^ 0x800000;\n    if (shiftedBitsCount == 0) {\n      operand2Normalized = operand2Normalized ^ 0x800000;\n      shiftedBitsCount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  operand2Normalized = operand2Normalized + ((int)operand1Normalized >> (difference & 0xff));\n  operand1Normalized = operand1Normalized << (0x20 - difference & 0xff);\n  operand1 = operand2Normalized & 0x80000000;\n  if ((int)operand2Normalized < 0) {\n    isZero = operand1Normalized != 0;\n    operand1Normalized = -operand1Normalized;\n    operand2Normalized = -operand2Normalized - (uint)isZero;\n  }\n  if (operand2Normalized < 0x800000) {\n    difference = operand1Normalized & 0x80000000;\n    operand1Normalized = operand1Normalized << 1;\n    operand2Normalized = operand2Normalized * 2 + (uint)(difference != 0);\n    difference = shiftedBitsCount - 2;\n    if ((operand2Normalized & 0x800000) == 0) {\n      shiftedBitsCount = leadingZeroesCount(operand2Normalized) - 8;\n      operand2Normalized = operand2Normalized << (shiftedBitsCount & 0xff);\n      if ((int)difference < (int)shiftedBitsCount) {\n        operand2Normalized = operand2Normalized >> (-(difference - shiftedBitsCount) & 0xff);\n      }\n      else {\n        operand2Normalized = operand2Normalized + (difference - shiftedBitsCount) * 0x800000;\n      }\n      return operand2Normalized | operand1;\n    }\n  }\n  else {\n    difference = shiftedBitsCount - 1;\n    if (0xffffff < operand2Normalized) {\n      difference = operand2Normalized & 1;\n      operand2Normalized = operand2Normalized >> 1;\n      operand1Normalized = (uint)(difference != 0) << 0x1f | operand1Normalized >> 1;\n      difference = shiftedBitsCount;\n      if (0xfd < shiftedBitsCount) goto LAB_08000bde;\n    }\n  }\n  operand2Normalized = operand2Normalized + difference * 0x800000 + (uint)(0x7fffffff < operand1Normalized);\n  if (operand1Normalized == 0x80000000) {\n    operand2Normalized = operand2Normalized & 0xfffffffe;\n  }\n  return operand2Normalized | operand1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_sum_08000aa8",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "shiftValue",
                "param_4": "shiftedBits",
                "iVar1": "operand1Shifted",
                "iVar2": "operand2Shifted",
                "uVar3": "operand1Normalized",
                "uVar4": "operand2Normalized",
                "uVar5": "shiftedBitsCount",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroesCount"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_result_08000c08",
            "code": "\nuint calculateResult_08000c08(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int baseValue;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  baseValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = baseValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = baseValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_result_08000c08",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "baseValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "reverse_adjusted_value_08000c10",
            "code": "\nuint reverseAdjustedValue_08000c10(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  uint signBit;\n  int adjustedValue;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  adjustedValue = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftAmount & 0xff);\n    signBit = adjustedValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputValue << leadingZeroes + 0x18;\n  signBit = adjustedValue + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "reverse_adjusted_value_08000c10",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "adjustedValue"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_float_08000cb8",
            "code": "\nuint calculate_float_08000cb8(uint operand1,uint operand2,undefined4 unused,uint opType)\n\n{\n  longlong result;\n  uint significand;\n  uint exp1;\n  int combinedExp;\n  int expDifference;\n  uint productSignificand;\n  int normalizedOp2Exp;\n  uint resultBits;\n  bool isZeroExp1;\n  bool expDifferenceOverflow;\n  \n  exp1 = operand1 >> 0x17 & 0xff;\n  isZeroExp1 = exp1 == 0;\n  if (!isZeroExp1) {\n    opType = operand2 >> 0x17 & 0xff;\n    isZeroExp1 = opType == 0;\n  }\n  if (!isZeroExp1) {\n    isZeroExp1 = exp1 == 0xff;\n  }\n  if (!isZeroExp1) {\n    isZeroExp1 = opType == 0xff;\n  }\n  if (isZeroExp1) {\n    opType = operand2 >> 0x17 & 0xff;\n    if (exp1 == 0xff || opType == 0xff) {\n      isZeroExp1 = operand1 == 0 || operand1 == 0x80000000;\n      significand = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        isZeroExp1 = operand2 == 0;\n        significand = operand1;\n      }\n      if (!isZeroExp1) {\n        isZeroExp1 = operand2 == 0x80000000;\n      }\n      resultBits = significand;\n      if (((isZeroExp1) || ((exp1 == 0xff && ((significand & 0x7fffff) != 0)))) ||\n         ((opType == 0xff && (resultBits = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return resultBits | 0x7fc00000;\n      }\n      significand = significand ^ operand2;\n      goto LAB_08000e08;\n    }\n    isZeroExp1 = (operand1 & 0x7fffffff) == 0;\n    if (!isZeroExp1) {\n      isZeroExp1 = (operand2 & 0x7fffffff) == 0;\n    }\n    if (isZeroExp1) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    isZeroExp1 = exp1 == 0;\n    significand = operand1 & 0x80000000;\n    while( true ) {\n      if (isZeroExp1) {\n        operand1 = operand1 << 1;\n        isZeroExp1 = (operand1 & 0x800000) == 0;\n      }\n      if (!isZeroExp1) break;\n      exp1 = exp1 - 1;\n    }\n    operand1 = operand1 | significand;\n    isZeroExp1 = opType == 0;\n    significand = operand2 & 0x80000000;\n    while( true ) {\n      if (isZeroExp1) {\n        operand2 = operand2 << 1;\n        isZeroExp1 = (operand2 & 0x800000) == 0;\n      }\n      if (!isZeroExp1) break;\n      opType = opType - 1;\n    }\n    operand2 = operand2 | significand;\n  }\n  combinedExp = exp1 + opType;\n  resultBits = operand1 ^ operand2;\n  exp1 = operand1 << 9;\n  isZeroExp1 = exp1 == 0;\n  if (!isZeroExp1) {\n    operand2 = operand2 << 9;\n    isZeroExp1 = operand2 == 0;\n  }\n  if (isZeroExp1) {\n    if (exp1 == 0) {\n      operand2 = operand2 << 9;\n    }\n    significand = resultBits & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    expDifferenceOverflow = SBORROW4(combinedExp,0x7f);\n    expDifference = combinedExp + -0x7f;\n    isZeroExp1 = expDifference == 0;\n    normalizedOp2Exp = expDifference;\n    if (!isZeroExp1 && 0x7e < combinedExp) {\n      expDifferenceOverflow = SBORROW4(0xff,expDifference);\n      normalizedOp2Exp = 0xff - expDifference;\n      isZeroExp1 = expDifference == 0xff;\n    }\n    if (!isZeroExp1 && normalizedOp2Exp < 0 == expDifferenceOverflow) {\n      significand = significand | expDifference * 0x800000;\n    }\n    if (!isZeroExp1 && normalizedOp2Exp < 0 == expDifferenceOverflow) {\n      return significand;\n    }\n    significand = significand | 0x800000;\n    productSignificand = 0;\n    expDifferenceOverflow = SBORROW4(expDifference,1);\n    resultBits = combinedExp - 0x80;\n    isZeroExp1 = resultBits == 0;\n    exp1 = resultBits;\n  }\n  else {\n    result = (ulonglong)(exp1 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    productSignificand = (uint)result;\n    significand = (uint)((ulonglong)result >> 0x20);\n    isZeroExp1 = significand < 0x800000;\n    if (isZeroExp1) {\n      significand = significand << 1;\n    }\n    if (isZeroExp1) {\n      significand = significand | productSignificand >> 0x1f;\n      productSignificand = productSignificand << 1;\n    }\n    significand = resultBits & 0x80000000 | significand;\n    resultBits = (combinedExp + -0x7f) - (uint)isZeroExp1;\n    expDifferenceOverflow = SBORROW4(resultBits,0xfd);\n    isZeroExp1 = resultBits == 0xfd;\n    exp1 = resultBits - 0xfd;\n    if (resultBits < 0xfe) {\n      significand = significand + resultBits * 0x800000 + (uint)(0x7fffffff < productSignificand);\n      if (productSignificand == 0x80000000) {\n        significand = significand & 0xfffffffe;\n      }\n      return significand;\n    }\n  }\n  if (isZeroExp1 || (int)exp1 < 0 != expDifferenceOverflow) {\n    isZeroExp1 = (int)(resultBits + 0x19) < 0;\n    if (resultBits == 0xffffffe7 || isZeroExp1 != SCARRY4(resultBits,0x19)) {\n      significand = significand & 0x80000000;\n    }\n    if (resultBits != 0xffffffe7 && isZeroExp1 == SCARRY4(resultBits,0x19)) {\n      exp1 = (significand << 1) >> (-resultBits & 0xff);\n      resultBits = significand << (resultBits + 0x20 & 0xff);\n      exp1 = ((uint)((significand & 0x80000000) != 0) << 0x1f | exp1 >> 1) + (uint)((byte)exp1 & 1);\n      if ((productSignificand | resultBits << 1) == 0) {\n        exp1 = exp1 & ~(resultBits >> 0x1f);\n      }\n      return exp1;\n    }\n    return significand;\n  }\nLAB_08000e08:\n  return significand & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_float_08000cb8",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "unused",
                "param_4": "opType",
                "lVar1": "result",
                "uVar2": "significand",
                "uVar3": "exp1",
                "iVar4": "combinedExp",
                "iVar5": "expDifference",
                "uVar6": "productSignificand",
                "iVar7": "normalizedOp2Exp",
                "uVar8": "resultBits",
                "bVar9": "isZeroExp1",
                "bVar10": "expDifferenceOverflow"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "floating_point_add_08000e20",
            "code": "\nuint floatingPointAdd_08000e20(uint operand1,uint operand2,undefined4 parameter3,uint parameter4)\n\n{\n  uint shiftedOperand2;\n  uint shiftedOperand1;\n  int difference;\n  uint sum;\n  int sumWithCarry;\n  uint result;\n  bool isZero;\n  bool isOverflow;\n  bool isUnderflow;\n  \n  shiftedOperand1 = operand1 >> 0x17 & 0xff;\n  isZero = shiftedOperand1 == 0;\n  if (!isZero) {\n    parameter4 = operand2 >> 0x17 & 0xff;\n    isZero = parameter4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedOperand1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = parameter4 == 0xff;\n  }\n  if (isZero) {\n    parameter4 = operand2 >> 0x17 & 0xff;\n    result = operand1;\n    if (shiftedOperand1 == 0xff) {\n      if (((operand1 & 0x7fffff) != 0) || (result = operand2, parameter4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (parameter4 == 0xff) {\n        result = operand2;\n        if ((operand2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (operand1 ^ operand2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (operand1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (operand2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = shiftedOperand1 == 0;\n        result = operand1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand1 = operand1 << 1;\n            isZero = (operand1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          shiftedOperand1 = shiftedOperand1 - 1;\n        }\n        operand1 = operand1 | result;\n        isZero = parameter4 == 0;\n        result = operand2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand2 = operand2 << 1;\n            isZero = (operand2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          parameter4 = parameter4 - 1;\n        }\n        operand2 = operand2 | result;\n        goto LAB_08000e38;\n      }\n      if ((operand1 & 0x7fffffff) == 0) {\n        if ((operand2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    operand1 = operand1 ^ operand2;\n  }\n  else {\nLAB_08000e38:\n    difference = shiftedOperand1 - parameter4;\n    if (operand2 << 9 == 0) {\n      operand1 = (operand1 ^ operand2) & 0x80000000 | operand1 & 0x7fffff;\n      isUnderflow = SCARRY4(difference,0x7f);\n      sumWithCarry = difference + 0x7f;\n      isZero = sumWithCarry < 0;\n      isOverflow = sumWithCarry == 0;\n      if (!isOverflow && isZero == isUnderflow) {\n        isUnderflow = SBORROW4(0xff,sumWithCarry);\n        isZero = 0xff - sumWithCarry < 0;\n        isOverflow = sumWithCarry == 0xff;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        operand1 = operand1 | sumWithCarry * 0x800000;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        return operand1;\n      }\n      operand1 = operand1 | 0x800000;\n      shiftedOperand1 = 0;\n      isOverflow = SBORROW4(sumWithCarry,1);\n      sum = difference + 0x7e;\n      isZero = sum == 0;\n      result = sum;\n    }\n    else {\n      shiftedOperand2 = (operand2 << 9) >> 4 | 0x10000000;\n      shiftedOperand1 = (operand1 << 9) >> 4 | 0x10000000;\n      operand1 = (operand1 ^ operand2) & 0x80000000;\n      isZero = shiftedOperand2 <= shiftedOperand1;\n      if (!isZero) {\n        shiftedOperand1 = shiftedOperand1 << 1;\n      }\n      sum = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (shiftedOperand2 <= shiftedOperand1) {\n          shiftedOperand1 = shiftedOperand1 - shiftedOperand2;\n          operand1 = operand1 | result;\n        }\n        isZero = shiftedOperand2 >> 1 <= shiftedOperand1;\n        if (isZero) {\n          shiftedOperand1 = shiftedOperand1 - (shiftedOperand2 >> 1);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 1;\n        }\n        isZero = shiftedOperand2 >> 2 <= shiftedOperand1;\n        if (isZero) {\n          shiftedOperand1 = shiftedOperand1 - (shiftedOperand2 >> 2);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 2;\n        }\n        isZero = shiftedOperand2 >> 3 <= shiftedOperand1;\n        if (isZero) {\n          shiftedOperand1 = shiftedOperand1 - (shiftedOperand2 >> 3);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 3;\n        }\n        shiftedOperand1 = shiftedOperand1 * 0x10;\n        isZero = shiftedOperand1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isOverflow = SBORROW4(sum,0xfd);\n      isZero = sum == 0xfd;\n      result = sum - 0xfd;\n      if (sum < 0xfe) {\n        operand1 = operand1 + sum * 0x800000 + (uint)(shiftedOperand2 <= shiftedOperand1);\n        if (shiftedOperand1 - shiftedOperand2 == 0) {\n          operand1 = operand1 & 0xfffffffe;\n        }\n        return operand1;\n      }\n    }\n    if (isZero || (int)result < 0 != isOverflow) {\n      isZero = (int)(sum + 0x19) < 0;\n      if (sum == 0xffffffe7 || isZero != SCARRY4(sum,0x19)) {\n        operand1 = operand1 & 0x80000000;\n      }\n      if (sum == 0xffffffe7 || isZero != SCARRY4(sum,0x19)) {\n        return operand1;\n      }\n      result = (operand1 << 1) >> (-sum & 0xff);\n      sum = operand1 << (sum + 0x20 & 0xff);\n      result = ((uint)((operand1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((shiftedOperand1 | sum << 1) == 0) {\n        result = result & ~(sum >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return operand1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "floating_point_add_08000e20",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "shiftedOperand2",
                "uVar2": "shiftedOperand1",
                "iVar3": "difference",
                "uVar4": "sum",
                "iVar5": "sumWithCarry",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isOverflow",
                "bVar9": "isUnderflow"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "check_overflow_08000f68",
            "code": "\nuint check_overflow_08000f68(uint num1,uint num2)\n\n{\n  bool is_negative;\n  uint num1_times_two;\n  uint num2_times_two;\n  uint combined_num;\n  bool is_zero;\n  \n  num1_times_two = num1 * 2;\n  num2_times_two = num2 * 2;\n  if (((int)num1_times_two >> 0x18 == -1 || (int)num2_times_two >> 0x18 == -1) &&\n     ((((int)num1_times_two >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) ||\n      (((int)num2_times_two >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_num = num1_times_two | num2 & 0x7fffffff;\n  is_zero = combined_num == 0;\n  if (!is_zero) {\n    combined_num = num1 ^ num2;\n    is_zero = combined_num == 0;\n  }\n  is_negative = -1 < (int)combined_num;\n  if (is_negative) {\n    num1 = num1_times_two + num2 * -2;\n    is_zero = num1 == 0;\n  }\n  if ((is_negative && num2_times_two <= num1_times_two) && !is_zero) {\n    num1 = (int)num2 >> 0x1f;\n  }\n  if (!is_negative || num2_times_two > num1_times_two) {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  if (!is_zero) {\n    num1 = num1 | 1;\n  }\n  return num1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "num1_times_two",
                "uVar3": "num2_times_two",
                "uVar4": "combined_num",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "copy_params_and_reverse_08000fc8",
            "code": "\nvoid copyParamsAndReverse_08000fc8(undefined4 destination,undefined4 source)\n\n{\n  FUN_08000fd0(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "copy_params_and_reverse_08000fc8",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_and_return_08000fd0",
            "code": "\nundefined8 concatenate_and_return_08000fd0(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  FUN_08000f68();\n  return CONCAT44(input_param_2,input_param_1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_and_return_08000fd0",
                "param_1": "input_param_1",
                "param_2": "input_param_2"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_if_null_terminated_08000ff4",
            "code": "\nbool check_if_null_terminated_08000ff4(void)\n\n{\n  char input_character;\n  \n  FUN_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_if_null_terminated_08000ff4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "is_string_null_terminated_08001030",
            "code": "\nbool is_string_null_terminated_08001030(void)\n\n{\n  char input_char;\n  \n  FUN_08000fc8();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "is_string_null_terminated_08001030",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "process_number_08001044",
            "code": "\nuint processNumber_08001044(uint number)\n\n{\n  uint result;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((number << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (number << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "process_number_08001044",
                "param_1": "number",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_ptr_next;\n  undefined4 *src_ptr;\n  uint remaining_length;\n  uint copy_length;\n  bool is_remaining_length_positive;\n  \n  dest_ptr_next = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copy_length = length - 4;\n      if (3 < length) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest_ptr_next;\n          is_remaining_length_positive = copy_length != 0;\n          copy_length = copy_length - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_ptr_next = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (is_remaining_length_positive);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_length = 4 - ((uint)destination & 3);\n      length = length - copy_length;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_ptr_next = dest_ptr;\n      source = src_ptr;\n      if ((copy_length & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_ptr_next = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *dest_ptr_next = *source;\n    dest_ptr_next[1] = source[1];\n    dest_ptr_next[2] = source[2];\n    dest_ptr_next[3] = source[3];\n    dest_ptr_next[4] = source[4];\n    dest_ptr_next[5] = source[5];\n    dest_ptr_next[6] = source[6];\n    dest_ptr_next[7] = source[7];\n    dest_ptr_next[8] = source[8];\n    dest_ptr_next[9] = source[9];\n    dest_ptr_next[10] = source[10];\n    dest_ptr_next[0xb] = source[0xb];\n    dest_ptr_next[0xc] = source[0xc];\n    dest_ptr_next[0xd] = source[0xd];\n    dest_ptr_next[0xe] = source[0xe];\n    dest_ptr_next[0xf] = source[0xf];\n    dest_ptr_next = dest_ptr_next + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remaining_length = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *dest_ptr_next = *source;\n      dest_ptr_next[1] = source[1];\n      dest_ptr_next[2] = source[2];\n      dest_ptr_next[3] = source[3];\n      dest_ptr_next = dest_ptr_next + 4;\n      source = source + 4;\n      is_remaining_length_positive = 0xf < remaining_length;\n      remaining_length = remaining_length - 0x10;\n    } while (is_remaining_length_positive);\n  }\n  copy_length = remaining_length + 0xc;\n  src_ptr = dest_ptr_next;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_length) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      is_remaining_length_positive = 3 < copy_length;\n      copy_length = copy_length - 4;\n      dest_ptr_next = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (is_remaining_length_positive);\n  }\nLAB_08001108:\n  if (copy_length + 4 != 0) {\n    dest_ptr = dest_ptr_next;\n    src_ptr = source;\n    if ((copy_length & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_ptr_next + 1);\n      *(undefined *)dest_ptr_next = *(undefined *)source;\n    }\n    if ((copy_length + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr_next",
                "puVar3": "src_ptr",
                "uVar4": "remaining_length",
                "uVar5": "copy_length",
                "bVar6": "is_remaining_length_positive"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "is_valid_params_08001170",
            "code": "\nundefined4 is_valid_params_08001170(uint value_1,int value_2,uint value_3,int value_4)\n\n{\n  if ((((value_2 << 1) >> 0x15 != -1) || ((value_1 | value_2 << 0xc) == 0)) &&\n     (((value_4 << 1) >> 0x15 != -1 || ((value_3 | value_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "is_valid_params_08001170",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_result_0800119c",
            "code": "\nuint calculate_result_0800119c(uint input_value_1,uint shifted_input)\n\n{\n  uint shifted_result;\n  int computed_value;\n  uint result;\n  \n  computed_value = shifted_input * 2 + 0x200000;\n  if (shifted_input * 2 < 0xffe00000) {\n    if (-1 < computed_value) {\n      return 0;\n    }\n    shifted_result = computed_value >> 0x15;\n    result = -shifted_result - 0x3e1;\n    if (shifted_result < 0xfffffc20 && result != 0) {\n      shifted_result = (shifted_input << 0xb | 0x80000000 | input_value_1 >> 0x15) >> (result & 0xff);\n      if ((shifted_input & 0x80000000) != 0) {\n        shifted_result = -shifted_result;\n      }\n      return shifted_result;\n    }\n  }\n  else if ((input_value_1 | shifted_input << 0xc) != 0) {\n    return 0;\n  }\n  shifted_input = shifted_input & 0x80000000;\n  if (shifted_input == 0) {\n    shifted_input = 0x7fffffff;\n  }\n  return shifted_input;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "param_1": "input_value_1",
                "param_2": "shifted_input",
                "uVar1": "shifted_result",
                "iVar2": "computed_value",
                "uVar3": "result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "check_valid_params_080011ec",
            "code": "\nundefined8 checkValidParams_080011ec(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "check_valid_params_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "divide_remaining_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 divide_remaining_0800121c(uint dividend,uint dividend_lower_bits,uint divisor,uint divisor_lower_bits,uint *quotient)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong multiplication_result;\n  uint quotient_lower_bits;\n  uint quotient_upper_bits;\n  uint multiplication_result_upper_bits;\n  int shift_count;\n  uint quotient_combined;\n  uint divisor_combined;\n  uint dividend_combined;\n  uint *puVar9;\n  uint temp_quotient;\n  uint quotient_factor;\n  uint temp_multiplication_result;\n  bool carry_flag;\n  undefined8 return_value;\n  \n  if (divisor_lower_bits == 0) {\n    if (dividend_lower_bits < divisor) {\n      shift_count = LZCOUNT(divisor);\n      divisor_combined = divisor;\n      if (shift_count != 0) {\n        divisor_combined = divisor << shift_count;\n        dividend_lower_bits = dividend >> (0x20U - shift_count & 0xff) | dividend_lower_bits << shift_count;\n        dividend = dividend << shift_count;\n      }\n      quotient_factor = divisor_combined >> 0x10;\n      dividend_combined = dividend_lower_bits / quotient_factor;\n      temp_quotient = dividend_combined * (divisor_combined & 0xffff);\n      quotient_combined = dividend >> 0x10 | (dividend_lower_bits - quotient_factor * dividend_combined) * 0x10000;\n      quotient_upper_bits = dividend_combined;\n      if (quotient_combined <= temp_quotient && temp_quotient - quotient_combined != 0) {\n        carry_flag = CARRY4(divisor_combined,quotient_combined);\n        quotient_combined = divisor_combined + quotient_combined;\n        quotient_upper_bits = dividend_combined - 1;\n        if ((carry_flag == false) && (quotient_combined <= temp_quotient && temp_quotient - quotient_combined != 0)) {\n          quotient_upper_bits = dividend_combined - 2;\n          quotient_combined = quotient_combined + divisor_combined;\n        }\n      }\n      quotient_lower_bits = (quotient_combined - temp_quotient) / quotient_factor;\n      multiplication_result_upper_bits = quotient_lower_bits * (divisor_combined & 0xffff);\n      dividend_combined = dividend & 0xffff | ((quotient_combined - temp_quotient) - quotient_factor * quotient_lower_bits) * 0x10000;\n      quotient_combined = quotient_lower_bits;\n      if (dividend_combined <= multiplication_result_upper_bits && multiplication_result_upper_bits - dividend_combined != 0) {\n        carry_flag = CARRY4(divisor_combined,dividend_combined);\n        dividend_combined = divisor_combined + dividend_combined;\n        quotient_combined = quotient_lower_bits - 1;\n        if ((carry_flag == false) && (dividend_combined <= multiplication_result_upper_bits && multiplication_result_upper_bits - dividend_combined != 0)) {\n          quotient_combined = quotient_lower_bits - 2;\n          dividend_combined = dividend_combined + divisor_combined;\n        }\n      }\n      quotient_combined = quotient_combined | quotient_upper_bits << 0x10;\n      puVar9 = (uint *)0x0;\n      dividend_combined = dividend_combined - multiplication_result_upper_bits;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        return_value = (*UNRECOVERED_JUMPTABLE)();\n        return return_value;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        puVar9 = (uint *)0x1;\n        dividend_lower_bits = dividend_lower_bits - divisor;\n        quotient_factor = divisor >> 0x10;\n        quotient_lower_bits = divisor & 0xffff;\n        divisor_combined = divisor;\n      }\n      else {\n        divisor_combined = divisor << shift_count;\n        quotient_combined = dividend_lower_bits >> (0x20U - shift_count & 0xff);\n        quotient_factor = divisor_combined >> 0x10;\n        temp_quotient = quotient_combined / quotient_factor;\n        quotient_lower_bits = divisor_combined & 0xffff;\n        multiplication_result_upper_bits = temp_quotient * quotient_lower_bits;\n        dividend_combined = dividend >> (0x20U - shift_count & 0xff) | dividend_lower_bits << shift_count;\n        quotient_upper_bits = dividend_combined >> 0x10 | (quotient_combined - quotient_factor * temp_quotient) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient_combined = temp_quotient;\n        if (quotient_upper_bits <= multiplication_result_upper_bits && multiplication_result_upper_bits - quotient_upper_bits != 0) {\n          carry_flag = CARRY4(divisor_combined,quotient_upper_bits);\n          quotient_upper_bits = divisor_combined + quotient_upper_bits;\n          quotient_combined = temp_quotient - 1;\n          if ((carry_flag == false) && (quotient_upper_bits <= multiplication_result_upper_bits && multiplication_result_upper_bits - quotient_upper_bits != 0)) {\n            quotient_combined = temp_quotient - 2;\n            quotient_upper_bits = quotient_upper_bits + divisor_combined;\n          }\n        }\n        temp_quotient = (quotient_upper_bits - multiplication_result_upper_bits) / quotient_factor;\n        temp_multiplication_result = temp_quotient * quotient_lower_bits;\n        dividend_lower_bits = dividend_combined & 0xffff | ((quotient_upper_bits - multiplication_result_upper_bits) - quotient_factor * temp_quotient) * 0x10000;\n        quotient_upper_bits = temp_quotient;\n        if (dividend_lower_bits <= temp_multiplication_result && temp_multiplication_result - dividend_lower_bits != 0) {\n          carry_flag = CARRY4(divisor_combined,dividend_lower_bits);\n          dividend_lower_bits = divisor_combined + dividend_lower_bits;\n          quotient_upper_bits = temp_quotient - 1;\n          if ((carry_flag == false) && (dividend_lower_bits <= temp_multiplication_result && temp_multiplication_result - dividend_lower_bits != 0)) {\n            quotient_upper_bits = temp_quotient - 2;\n            dividend_lower_bits = dividend_lower_bits + divisor_combined;\n          }\n        }\n        dividend_lower_bits = dividend_lower_bits - temp_multiplication_result;\n        puVar9 = (uint *)(quotient_upper_bits | quotient_combined << 0x10);\n      }\n      temp_quotient = dividend_lower_bits / quotient_factor;\n      quotient_combined = quotient_lower_bits * temp_quotient;\n      dividend_combined = dividend >> 0x10 | (dividend_lower_bits - quotient_factor * temp_quotient) * 0x10000;\n      quotient_upper_bits = temp_quotient;\n      if (dividend_combined <= quotient_combined && quotient_combined - dividend_combined != 0) {\n        carry_flag = CARRY4(divisor_combined,dividend_combined);\n        dividend_combined = divisor_combined + dividend_combined;\n        quotient_upper_bits = temp_quotient - 1;\n        if ((carry_flag == false) && (dividend_combined <= quotient_combined && quotient_combined - dividend_combined != 0)) {\n          quotient_upper_bits = temp_quotient - 2;\n          dividend_combined = dividend_combined + divisor_combined;\n        }\n      }\n      temp_quotient = (dividend_combined - quotient_combined) / quotient_factor;\n      quotient_lower_bits = quotient_lower_bits * temp_quotient;\n      dividend_combined = dividend & 0xffff | ((dividend_combined - quotient_combined) - quotient_factor * temp_quotient) * 0x10000;\n      quotient_combined = temp_quotient;\n      if (dividend_combined <= quotient_lower_bits && quotient_lower_bits - dividend_combined != 0) {\n        carry_flag = CARRY4(divisor_combined,dividend_combined);\n        dividend_combined = divisor_combined + dividend_combined;\n        quotient_combined = temp_quotient - 1;\n        if ((carry_flag == false) && (dividend_combined <= quotient_lower_bits && quotient_lower_bits - dividend_combined != 0)) {\n          quotient_combined = temp_quotient - 2;\n          dividend_combined = dividend_combined + divisor_combined;\n        }\n      }\n      dividend_combined = dividend_combined - quotient_lower_bits;\n      quotient_combined = quotient_combined | quotient_upper_bits << 0x10;\n    }\n    if (quotient != (uint *)0x0) {\n      *quotient = dividend_combined >> LZCOUNT(divisor);\n      quotient[1] = 0;\n    }\n  }\n  else {\n    puVar9 = quotient;\n    if (dividend_lower_bits < divisor_lower_bits) {\n      if (quotient != (uint *)0x0) {\n        *quotient = dividend;\n        quotient[1] = dividend_lower_bits;\n        return 0;\n      }\n      quotient_combined = 0;\n    }\n    else {\n      shift_count = LZCOUNT(divisor_lower_bits);\n      if (shift_count == 0) {\n        if ((divisor_lower_bits < dividend_lower_bits) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          dividend_lower_bits = (dividend_lower_bits - divisor_lower_bits) - (uint)carry_flag;\n          quotient_combined = 1;\n        }\n        else {\n          quotient_combined = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (quotient != (uint *)0x0) {\n          *quotient = dividend;\n          quotient[1] = dividend_lower_bits;\n        }\n      }\n      else {\n        dividend_combined = 0x20 - shift_count;\n        quotient_lower_bits = divisor >> (dividend_combined & 0xff) | divisor_lower_bits << shift_count;\n        divisor_combined = dividend_lower_bits >> (dividend_combined & 0xff);\n        multiplication_result_upper_bits = quotient_lower_bits >> 0x10;\n        temp_quotient = divisor_combined / multiplication_result_upper_bits;\n        quotient_factor = temp_quotient * (quotient_lower_bits & 0xffff);\n        quotient_combined = dividend_lower_bits << shift_count | dividend >> (dividend_combined & 0xff);\n        quotient_upper_bits = quotient_combined >> 0x10 | (divisor_combined - multiplication_result_upper_bits * temp_quotient) * 0x10000;\n        dividend = dividend << shift_count;\n        divisor_combined = temp_quotient;\n        if (quotient_upper_bits <= quotient_factor && quotient_factor - quotient_upper_bits != 0) {\n          carry_flag = CARRY4(quotient_lower_bits,quotient_upper_bits);\n          quotient_upper_bits = quotient_lower_bits + quotient_upper_bits;\n          divisor_combined = temp_quotient - 1;\n          if ((carry_flag == false) && (quotient_upper_bits <= quotient_factor && quotient_factor - quotient_upper_bits != 0)) {\n            divisor_combined = temp_quotient - 2;\n            quotient_upper_bits = quotient_upper_bits + quotient_lower_bits;\n          }\n        }\n        temp_quotient = (quotient_upper_bits - quotient_factor) / multiplication_result_upper_bits;\n        temp_multiplication_result = temp_quotient * (quotient_lower_bits & 0xffff);\n        quotient_upper_bits = quotient_combined & 0xffff | ((quotient_upper_bits - quotient_factor) - multiplication_result_upper_bits * temp_quotient) * 0x10000;\n        quotient_combined = temp_quotient;\n        if (quotient_upper_bits <= temp_multiplication_result && temp_multiplication_result - quotient_upper_bits != 0) {\n          carry_flag = CARRY4(quotient_lower_bits,quotient_upper_bits);\n          quotient_upper_bits = quotient_lower_bits + quotient_upper_bits;\n          quotient_combined = temp_quotient - 1;\n          if ((carry_flag == false) && (quotient_upper_bits <= temp_multiplication_result && temp_multiplication_result - quotient_upper_bits != 0)) {\n            quotient_combined = temp_quotient - 2;\n            quotient_upper_bits = quotient_upper_bits + quotient_lower_bits;\n          }\n        }\n        quotient_combined = quotient_combined | divisor_combined << 0x10;\n        multiplication_result = (ulonglong)quotient_combined * (ulonglong)(divisor << shift_count);\n        if (CONCAT44(quotient_upper_bits - temp_multiplication_result,dividend) < multiplication_result) {\n          quotient_combined = quotient_combined - 1;\n          multiplication_result = multiplication_result - CONCAT44(quotient_lower_bits,divisor << shift_count);\n        }\n        if (quotient != (uint *)0x0) {\n          divisor_combined = ((quotient_upper_bits - temp_multiplication_result) - (int)(multiplication_result >> 0x20)) - (uint)(dividend < (uint)multiplication_result);\n          *quotient = divisor_combined << (dividend_combined & 0xff) | dividend - (uint)multiplication_result >> shift_count;\n          quotient[1] = divisor_combined >> shift_count;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,quotient_combined);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "divide_remaining_0800121c",
                "param_1": "dividend",
                "param_2": "dividend_lower_bits",
                "param_3": "divisor",
                "param_4": "divisor_lower_bits",
                "param_5": "quotient",
                "uVar1": "multiplication_result",
                "uVar2": "quotient_lower_bits",
                "uVar3": "quotient_upper_bits",
                "uVar4": "multiplication_result_upper_bits",
                "iVar5": "shift_count",
                "uVar6": "quotient_combined",
                "uVar7": "divisor_combined",
                "uVar8": "dividend_combined",
                "uVar10": "temp_quotient",
                "uVar11": "quotient_factor",
                "uVar12": "temp_multiplication_result",
                "bVar13": "carry_flag",
                "uVar14": "return_value"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_data_080014f0",
            "code": "\n\n\nundefined4 initializeData_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_data_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "validate_and_set_param_0800151c",
            "code": "\nundefined4 validate_and_set_param_0800151c(uint input_param)\n\n{\n  int result;\n  undefined4 success;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (input_param < 0x10) {\n      FUN_0800172a(0xffffffff,input_param,0);\n      success = 0;\n      DAT_20000000 = input_param;\n    }\n    else {\n      success = 1;\n    }\n  }\n  else {\n    success = 1;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "validate_and_set_param_0800151c",
                "param_1": "input_param",
                "iVar1": "result",
                "uVar2": "success"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "add_input_to_data_0800157c",
            "code": "\nvoid addInputToData_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "add_input_to_data_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_global_variable_value_080015a0",
            "code": "\nundefined4 get_global_variable_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_global_variable_value_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_memory_configuration_080015b4",
            "code": "\n\n\nvoid setMemoryConfiguration_080015b4(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_memory_configuration_080015b4",
                "param_1": "configuration"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_bits_from_register_080015fc",
            "code": "\n\n\nuint getBitsFromRegister_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "update_memory_08001618",
            "code": "\nvoid updateMemory_08001618(byte memoryLocation,uint data)\n\n{\n  if ((char)memoryLocation < '\\0') {\n    *(char *)((memoryLocation & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)memoryLocation + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "update_memory_08001618",
                "param_1": "memoryLocation",
                "param_2": "data"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_bitmask_0800166c",
            "code": "\nuint applyBitmask_0800166c(uint bitsToShift,uint inputValue,uint bitmask)\n\n{\n  uint shiftAmount;\n  \n  bitsToShift = bitsToShift & 7;\n  shiftAmount = 7 - bitsToShift;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitsToShift + 4 < 7) {\n    bitsToShift = 0;\n  }\n  else {\n    bitsToShift = bitsToShift - 3;\n  }\n  return bitmask & ~(-1 << (bitsToShift & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & inputValue) << (bitsToShift & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_bitmask_0800166c",
                "param_1": "bitsToShift",
                "param_2": "inputValue",
                "param_3": "bitmask",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_range_and_set_values_080016d0",
            "code": "\n\n\nbool checkRangeAndSetValues_080016d0(int value)\n\n{\n  bool isWithinRange;\n  \n  isWithinRange = value - 1U < 0x1000000;\n  if (isWithinRange) {\n    _DAT_e000e014 = value + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isWithinRange;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_range_and_set_values_080016d0",
                "param_1": "value",
                "bVar1": "isWithinRange"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_function_08001714",
            "code": "\nvoid initializeFunction_08001714(undefined4 inputParameter)\n\n{\n  FUN_080015b4(inputParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_function_08001714",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "update_parameter_and_call_0800172a",
            "code": "\nvoid updateParameterAndCall_0800172a(char inputChar,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,param_2,param_3);\n  FUN_08001618((int)inputChar,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "update_parameter_and_call_0800172a",
                "param_1": "inputChar",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "process_data_08001762",
            "code": "\nundefined4 processData_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "process_data_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_0800177c",
            "code": "\n\n\nvoid setFlag_0800177c(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_0800177c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_application_080017b4",
            "code": "\nvoid initializeApplication_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_application_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bit_value_080017c4",
            "code": "\n\n\nvoid updateBitValue_080017c4(uint *output,uint *input)\n\n{\n  uint bitPosition;\n  uint bitValue;\n  uint instruction;\n  uint *outputPtr;\n  int index;\n  uint newValue;\n  uint bitIndex;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitPosition = 1 << (bitIndex & 0xff);\n    bitValue = *input & bitPosition;\n    if (bitValue == bitPosition) {\n      instruction = input[1];\n      if (instruction == 0x12) {\n        newValue = input[3] + 0xc;\n      }\n      else if (instruction < 0x13) {\n        if (instruction == 2) {\n          newValue = input[3] + 8;\n        }\n        else if (instruction < 3) {\n          if (instruction == 0) goto LAB_08001882;\n          if (instruction == 1) {\n            newValue = input[3];\n          }\n        }\n        else if (instruction == 3) {\n          newValue = 0;\n        }\n        else if (instruction == 0x11) {\n          newValue = input[3] + 4;\n        }\n      }\n      else if (instruction == 0x10210000) {\nLAB_08001882:\n        if (input[2] == 0) {\n          newValue = 4;\n        }\n        else if (input[2] == 1) {\n          newValue = 8;\n          output[4] = bitPosition;\n        }\n        else {\n          newValue = 8;\n          output[5] = bitPosition;\n        }\n      }\n      else if (instruction < 0x10210001) {\n        if ((instruction == 0x10110000) || (instruction == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((instruction == 0x10310000) || (instruction == 0x10320000)) || (instruction == 0x10220000))\n      goto LAB_08001882;\n      if (bitValue < 0x100) {\n        bitPosition = bitIndex << 2;\n        outputPtr = output;\n      }\n      else {\n        outputPtr = output + 1;\n        bitPosition = (bitIndex - 8) * 4;\n      }\n      *outputPtr = *outputPtr & ~(0xf << (bitPosition & 0xff)) | newValue << (bitPosition & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (output == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bitIndex & 3) << 2) |\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000);\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitValue & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitValue | _DAT_40010400;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitValue & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitValue | _DAT_40010404;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitValue & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitValue | _DAT_40010408;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitValue & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bit_value_080017c4",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "bitPosition",
                "uVar2": "bitValue",
                "uVar3": "instruction",
                "puVar4": "outputPtr",
                "iVar5": "index",
                "local_10": "newValue",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "update_value_08001a80",
            "code": "\nvoid updateValue_08001a80(int dataPointer,ushort value,char condition)\n\n{\n  if (condition == '\\0') {\n    *(uint *)(dataPointer + 0x10) = (uint)value << 0x10;\n  }\n  else {\n    *(uint *)(dataPointer + 0x10) = (uint)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "update_value_08001a80",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "condition"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_widget_properties_08001ab0",
            "code": "\nundefined4 calculateWidgetProperties_08001ab0(uint **widget)\n\n{\n  uint randomNumber;\n  char isInRange;\n  undefined4 result;\n  uint tempVariable;\n  bool isZero;\n  \n  if (widget == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)widget + 0x3d) == '\\0') {\n      *(undefined *)(widget + 0xf) = 0;\n      FUNC_08001cb8(widget);\n    }\n    *(undefined *)((int)widget + 0x3d) = 0x24;\n    **widget = **widget & 0xfffffffe;\n    randomNumber = FUN_08003518();\n    if (widget[1] < (uint *)0x186a1) {\n      tempVariable = randomNumber;\n      if (randomNumber < 2000000) {\n        tempVariable = 1;\n      }\n      isInRange = (char)tempVariable;\n      if (1999999 < randomNumber) {\n        isInRange = '\\0';\n      }\n    }\n    else {\n      tempVariable = randomNumber;\n      if (randomNumber < 4000000) {\n        tempVariable = 1;\n      }\n      isInRange = (char)tempVariable;\n      if (3999999 < randomNumber) {\n        isInRange = '\\0';\n      }\n    }\n    if (isInRange == '\\0') {\n      tempVariable = randomNumber / 1000000;\n      (*widget)[1] = tempVariable;\n      if ((uint *)0x186a0 < widget[1]) {\n        tempVariable = (tempVariable * 300) / 1000;\n      }\n      (*widget)[8] = tempVariable + 1;\n      if (widget[1] < (uint *)0x186a1) {\n        randomNumber = (randomNumber - 1) / (uint)((int)widget[1] << 1) + 1 & 0xfff;\n        if (randomNumber < 4) {\n          randomNumber = 4;\n        }\n      }\n      else {\n        if (widget[2] == (uint *)0x0) {\n          tempVariable = (randomNumber - 1) / (uint)((int)widget[1] * 3) + 1 & 0xfff;\n          isZero = tempVariable == 0;\n          if (isZero) {\n            tempVariable = 1;\n          }\n          isInRange = (char)tempVariable;\n          if (!isZero) {\n            isInRange = '\\0';\n          }\n        }\n        else {\n          tempVariable = (randomNumber - 1) / (uint)((int)widget[1] * 0x19) + 1 & 0xfff;\n          isZero = tempVariable == 0;\n          if (isZero) {\n            tempVariable = 1;\n          }\n          isInRange = (char)tempVariable;\n          if (!isZero) {\n            isInRange = '\\0';\n          }\n        }\n        if (isInRange == '\\0') {\n          if (widget[2] == (uint *)0x0) {\n            randomNumber = (randomNumber - 1) / (uint)((int)widget[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            randomNumber = (randomNumber - 1) / (uint)((int)widget[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          randomNumber = 1;\n        }\n      }\n      (*widget)[7] = randomNumber;\n      **widget = (uint)widget[8] | (uint)widget[7];\n      (*widget)[2] = (uint)widget[3] | (uint)widget[4];\n      (*widget)[3] = (uint)widget[6] | (uint)widget[5];\n      **widget = **widget | 1;\n      widget[0x10] = (uint *)0x0;\n      *(undefined *)((int)widget + 0x3d) = 0x20;\n      widget[0xc] = (uint *)0x0;\n      *(undefined *)((int)widget + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_widget_properties_08001ab0",
                "param_1": "widget",
                "uVar1": "randomNumber",
                "cVar2": "isInRange",
                "uVar3": "result",
                "uVar4": "tempVariable",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "execute_command_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nexecuteCommand_08001ccc(uint **command,undefined2 arg1,undefined2 arg2,undefined2 arg3,uint *data,\n            undefined2 arg4,undefined4 arg5)\n\n{\n  int result1;\n  int result2;\n  undefined4 returnValue;\n  uint *dataPtr;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)command + 0x3d) == ' ') {\n    do {\n      if ((~(*command)[6] & 2) != 0) {\n        result2 = 0;\n        goto LAB_08001d9c;\n      }\n      result2 = FUN_080015a0();\n    } while ((uint)(result2 - result1) < 0x1a);\n    command[0xc] = (uint *)0x0;\n    *(undefined *)((int)command + 0x3d) = 0x20;\n    *(undefined *)((int)command + 0x3e) = 0;\n    *(undefined *)(command + 0xf) = 0;\n    result2 = 3;\nLAB_08001d9c:\n    if (result2 == 0) {\n      if (*(char *)(command + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(command + 0xf) = 1;\n        if ((**command & 1) != 1) {\n          **command = **command | 1;\n        }\n        **command = **command & 0xfffff7ff;\n        *(undefined *)((int)command + 0x3d) = 0x21;\n        *(undefined *)((int)command + 0x3e) = 0x40;\n        command[0x10] = (uint *)0x0;\n        command[9] = data;\n        *(undefined2 *)((int)command + 0x2a) = arg4;\n        command[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(command + 10) = *(undefined2 *)((int)command + 0x2a);\n        result2 = FUN_08002640(command,arg1,arg2,arg3,arg5,result1);\n        if (result2 == 0) {\n          while (*(short *)(command + 10) != 0) {\n            result2 = FUN_08002bb4(command,arg5,result1);\n            if (result2 != 0) {\n              if (command[0x10] == (uint *)0x4) {\n                **command = **command | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            dataPtr = command[9];\n            command[9] = (uint *)((int)dataPtr + 1);\n            (*command)[4] = (uint)*(byte *)dataPtr;\n            *(short *)(command + 10) = *(short *)(command + 10) + -1;\n            *(short *)((int)command + 0x2a) = *(short *)((int)command + 0x2a) + -1;\n            if ((((*command)[5] & 4) == 4) && (*(short *)(command + 10) != 0)) {\n              dataPtr = command[9];\n              command[9] = (uint *)((int)dataPtr + 1);\n              (*command)[4] = (uint)*(byte *)dataPtr;\n              *(short *)(command + 10) = *(short *)(command + 10) + -1;\n              *(short *)((int)command + 0x2a) = *(short *)((int)command + 0x2a) + -1;\n            }\n          }\n          result1 = FUN_08002c2e(command,arg5,result1);\n          if (result1 == 0) {\n            **command = **command | 0x200;\n            *(undefined *)((int)command + 0x3d) = 0x20;\n            *(undefined *)((int)command + 0x3e) = 0;\n            *(undefined *)(command + 0xf) = 0;\n            returnValue = 0;\n          }\n          else if (command[0x10] == (uint *)0x4) {\n            **command = **command | 0x200;\n            returnValue = 1;\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (command[0x10] == (uint *)0x4) {\n          *(undefined *)(command + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(command + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "execute_command_08001ccc",
                "param_1": "command",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "data",
                "param_6": "arg4",
                "param_7": "arg5",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "returnValue",
                "puVar4": "dataPtr"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **data_ptr,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int initial_value;\n  uint temp_var;\n  int loop_counter;\n  undefined4 result;\n  uint *pointer_var;\n  \n  initial_value = FUN_080015a0();\n  if (*(char *)((int)data_ptr + 0x3d) == ' ') {\n    do {\n      if ((~(*data_ptr)[6] & 2) != 0) {\n        loop_counter = 0;\n        goto LAB_08002040;\n      }\n      loop_counter = FUN_080015a0();\n    } while ((uint)(loop_counter - initial_value) < 0x1a);\n    data_ptr[0xc] = (uint *)0x0;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)data_ptr + 0x3e) = 0;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    loop_counter = 3;\nLAB_08002040:\n    if (loop_counter == 0) {\n      if (*(char *)(data_ptr + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data_ptr + 0xf) = 1;\n        if ((**data_ptr & 1) != 1) {\n          **data_ptr = **data_ptr | 1;\n        }\n        **data_ptr = **data_ptr & 0xfffff7ff;\n        *(undefined *)((int)data_ptr + 0x3d) = 0x22;\n        *(undefined *)((int)data_ptr + 0x3e) = 0x40;\n        data_ptr[0x10] = (uint *)0x0;\n        data_ptr[9] = param_5;\n        *(undefined2 *)((int)data_ptr + 0x2a) = param_6;\n        data_ptr[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n        loop_counter = FUN_080027f4(data_ptr,param_2,param_3,param_4,param_7,initial_value);\n        if (loop_counter == 0) {\n          if (*(short *)(data_ptr + 10) == 0) {\n            **data_ptr = **data_ptr | 0x200;\n          }\n          else if (*(short *)(data_ptr + 10) == 1) {\n            **data_ptr = **data_ptr & 0xfffffbff;\n            disableIRQinterrupts();\n            **data_ptr = **data_ptr | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(data_ptr + 10) == 2) {\n            **data_ptr = **data_ptr | 0x800;\n            disableIRQinterrupts();\n            **data_ptr = **data_ptr & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **data_ptr = **data_ptr | 0x400;\n          }\n          while (*(short *)(data_ptr + 10) != 0) {\n            if (*(ushort *)(data_ptr + 10) < 4) {\n              if (*(short *)(data_ptr + 10) == 1) {\n                loop_counter = FUN_08002ca8(data_ptr,param_7,initial_value);\n                if (loop_counter != 0) {\n                  if (data_ptr[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n              else if (*(short *)(data_ptr + 10) == 2) {\n                do {\n                  if ((~(*data_ptr)[5] & 4) == 0) {\n                    loop_counter = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (loop_counter = FUN_080015a0(), (uint)(loop_counter - initial_value) <= param_7)\n                         )));\n                data_ptr[0xc] = (uint *)0x0;\n                *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n                *(undefined *)((int)data_ptr + 0x3e) = 0;\n                *(undefined *)(data_ptr + 0xf) = 0;\n                loop_counter = 3;\nLAB_080022fa:\n                if (loop_counter != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **data_ptr = **data_ptr | 0x200;\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n                enableIRQinterrupts();\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data_ptr)[5] & 4) == 0) {\n                    loop_counter = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (loop_counter = FUN_080015a0(), (uint)(loop_counter - initial_value) <= param_7)\n                         )));\n                data_ptr[0xc] = (uint *)0x0;\n                *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n                *(undefined *)((int)data_ptr + 0x3e) = 0;\n                *(undefined *)(data_ptr + 0xf) = 0;\n                loop_counter = 3;\nLAB_08002418:\n                if (loop_counter != 0) {\n                  return 3;\n                }\n                **data_ptr = **data_ptr & 0xfffffbff;\n                disableIRQinterrupts();\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n                do {\n                  if ((~(*data_ptr)[5] & 4) == 0) {\n                    loop_counter = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (loop_counter = FUN_080015a0(), (uint)(loop_counter - initial_value) <= param_7)\n                         )));\n                data_ptr[0xc] = (uint *)0x0;\n                *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n                *(undefined *)((int)data_ptr + 0x3e) = 0;\n                *(undefined *)(data_ptr + 0xf) = 0;\n                loop_counter = 3;\nLAB_0800250a:\n                if (loop_counter != 0) {\n                  return 3;\n                }\n                **data_ptr = **data_ptr | 0x200;\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n                enableIRQinterrupts();\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n            }\n            else {\n              loop_counter = FUN_08002ca8(data_ptr,param_7,initial_value);\n              if (loop_counter != 0) {\n                if (data_ptr[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              temp_var = (*data_ptr)[4];\n              pointer_var = data_ptr[9];\n              data_ptr[9] = (uint *)((int)pointer_var + 1);\n              *(char *)pointer_var = (char)temp_var;\n              *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n              *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              if (((*data_ptr)[5] & 4) == 4) {\n                temp_var = (*data_ptr)[4];\n                pointer_var = data_ptr[9];\n                data_ptr[9] = (uint *)((int)pointer_var + 1);\n                *(char *)pointer_var = (char)temp_var;\n                *(short *)(data_ptr + 10) = *(short *)(data_ptr + 10) + -1;\n                *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n          *(undefined *)((int)data_ptr + 0x3e) = 0;\n          *(undefined *)(data_ptr + 0xf) = 0;\n          result = 0;\n        }\n        else if (data_ptr[0x10] == (uint *)0x4) {\n          *(undefined *)(data_ptr + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data_ptr + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data_ptr",
                "iVar1": "initial_value",
                "uVar2": "temp_var",
                "iVar3": "loop_counter",
                "uVar4": "result",
                "puVar5": "pointer_var"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_flags_and_check_condition_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateFlagsAndCheckCondition_08002640(uint **ptr,byte flag,undefined2 value,short condition,uint limit,int comparison)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **ptr = **ptr | 0x100;\n  do {\n    if ((~(*ptr)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparison) <= limit))));\n  ptr[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptr + 0x3d) = 0x20;\n  *(undefined *)((int)ptr + 0x3e) = 0;\n  *(undefined *)(ptr + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*ptr)[4] = flag & 0xfe;\n    result = FUN_08002ad8(ptr,0x10002,limit,comparison);\n    if (result == 0) {\n      result = FUN_08002bb4(ptr,limit,comparison,(*ptr)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*ptr)[4] = (uint)(byte)value;\n        }\n        else {\n          (*ptr)[4] = (uint)(byte)((ushort)value >> 8);\n          result = FUN_08002bb4(ptr,limit,comparison);\n          if (result != 0) {\n            if (ptr[0x10] == (uint *)0x4) {\n              **ptr = **ptr | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*ptr)[4] = (uint)(byte)value;\n        }\n        returnValue = 0;\n      }\n      else if (ptr[0x10] == (uint *)0x4) {\n        **ptr = **ptr | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (ptr[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_flags_and_check_condition_08002640",
                "param_1": "ptr",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "comparison",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "perform_operation_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nperformOperation_080027f4(uint **functionPtr,byte inputByte,undefined2 inputShort,short flag,uint limit,int threshold)\n\n{\n  int resultVar1;\n  undefined4 resultVar2;\n  \n  **functionPtr = **functionPtr | 0x400;\n  **functionPtr = **functionPtr | 0x100;\n  do {\n    if ((~(*functionPtr)[5] & 1) == 0) {\n      resultVar1 = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (resultVar1 = FUN_080015a0(), (uint)(resultVar1 - threshold) <= limit))));\n  functionPtr[0xc] = (uint *)0x0;\n  *(undefined *)((int)functionPtr + 0x3d) = 0x20;\n  *(undefined *)((int)functionPtr + 0x3e) = 0;\n  *(undefined *)(functionPtr + 0xf) = 0;\n  resultVar1 = 3;\nLAB_080028d2:\n  if (resultVar1 == 0) {\n    (*functionPtr)[4] = inputByte & 0xfe;\n    resultVar1 = FUN_08002ad8(functionPtr,0x10002,limit,threshold);\n    if (resultVar1 == 0) {\n      resultVar1 = FUN_08002bb4(functionPtr,limit,threshold,(*functionPtr)[6]);\n      if (resultVar1 == 0) {\n        if (flag == 1) {\n          (*functionPtr)[4] = (uint)(byte)inputShort;\n        }\n        else {\n          (*functionPtr)[4] = (uint)(byte)((ushort)inputShort >> 8);\n          resultVar1 = FUN_08002bb4(functionPtr,limit,threshold);\n          if (resultVar1 != 0) {\n            if (functionPtr[0x10] == (uint *)0x4) {\n              **functionPtr = **functionPtr | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*functionPtr)[4] = (uint)(byte)inputShort;\n        }\n        resultVar1 = FUN_08002bb4(functionPtr,limit,threshold);\n        if (resultVar1 == 0) {\n          **functionPtr = **functionPtr | 0x100;\n          do {\n            if ((~(*functionPtr)[5] & 1) == 0) {\n              resultVar1 = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (resultVar1 = FUN_080015a0(), (uint)(resultVar1 - threshold) <= limit))));\n          functionPtr[0xc] = (uint *)0x0;\n          *(undefined *)((int)functionPtr + 0x3d) = 0x20;\n          *(undefined *)((int)functionPtr + 0x3e) = 0;\n          *(undefined *)(functionPtr + 0xf) = 0;\n          resultVar1 = 3;\nLAB_08002a90:\n          if (resultVar1 == 0) {\n            (*functionPtr)[4] = (uint)(inputByte | 1);\n            resultVar1 = FUN_08002ad8(functionPtr,0x10002,limit,threshold);\n            if (resultVar1 == 0) {\n              resultVar2 = 0;\n            }\n            else if (functionPtr[0x10] == (uint *)0x4) {\n              resultVar2 = 1;\n            }\n            else {\n              resultVar2 = 3;\n            }\n          }\n          else {\n            resultVar2 = 3;\n          }\n        }\n        else if (functionPtr[0x10] == (uint *)0x4) {\n          **functionPtr = **functionPtr | 0x200;\n          resultVar2 = 1;\n        }\n        else {\n          resultVar2 = 3;\n        }\n      }\n      else if (functionPtr[0x10] == (uint *)0x4) {\n        **functionPtr = **functionPtr | 0x200;\n        resultVar2 = 1;\n      }\n      else {\n        resultVar2 = 3;\n      }\n    }\n    else if (functionPtr[0x10] == (uint *)0x4) {\n      resultVar2 = 1;\n    }\n    else {\n      resultVar2 = 3;\n    }\n  }\n  else {\n    resultVar2 = 3;\n  }\n  return resultVar2;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "perform_operation_080027f4",
                "param_1": "functionPtr",
                "param_2": "inputByte",
                "param_3": "inputShort",
                "param_4": "flag",
                "param_5": "limit",
                "param_6": "threshold",
                "iVar1": "resultVar1",
                "uVar2": "resultVar2"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_permissions_08002ad8",
            "code": "\nundefined4 checkAndUpdatePermissions_08002ad8(uint **permissionsPtr,uint permissionMask,uint value,int originalValue)\n\n{\n  int comparisonResult;\n  char permissionFlag;\n  uint tempValue;\n  bool isTempValueNonZero;\n  \n  do {\n    if ((permissionMask >> 0x10 & 0xff) == 1) {\n      tempValue = permissionMask & ~(*permissionsPtr)[5] & 0xffff;\n      isTempValueNonZero = tempValue != 0;\n      if (isTempValueNonZero) {\n        tempValue = 1;\n      }\n      permissionFlag = (char)tempValue;\n      if (!isTempValueNonZero) {\n        permissionFlag = '\\0';\n      }\n    }\n    else {\n      tempValue = permissionMask & ~(*permissionsPtr)[6] & 0xffff;\n      isTempValueNonZero = tempValue != 0;\n      if (isTempValueNonZero) {\n        tempValue = 1;\n      }\n      permissionFlag = (char)tempValue;\n      if (!isTempValueNonZero) {\n        permissionFlag = '\\0';\n      }\n    }\n    if (permissionFlag == '\\0') {\n      return 0;\n    }\n    if (((*permissionsPtr)[5] & 0x400) == 0x400) {\n      **permissionsPtr = **permissionsPtr | 0x200;\n      (*permissionsPtr)[5] = 0xfffffbff;\n      permissionsPtr[0x10] = (uint *)0x4;\n      permissionsPtr[0xc] = (uint *)0x0;\n      *(undefined *)((int)permissionsPtr + 0x3d) = 0x20;\n      *(undefined *)(permissionsPtr + 0xf) = 0;\n      return 1;\n    }\n  } while ((value == 0xffffffff) ||\n          ((value != 0 && (comparisonResult = FUN_080015a0(), (uint)(comparisonResult - originalValue) <= value))));\n  permissionsPtr[0xc] = (uint *)0x0;\n  *(undefined *)((int)permissionsPtr + 0x3d) = 0x20;\n  *(undefined *)(permissionsPtr + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_permissions_08002ad8",
                "param_1": "permissionsPtr",
                "param_2": "permissionMask",
                "param_3": "value",
                "param_4": "originalValue",
                "iVar1": "comparisonResult",
                "cVar2": "permissionFlag",
                "uVar3": "tempValue",
                "bVar4": "isTempValueNonZero"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_param_and_return_code_08002bb4",
            "code": "\nundefined4 checkParamAndReturnCode_08002bb4(int *ptrInt,uint paramValue,int intValue)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    if ((*(uint *)(*ptrInt + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    returnValue = FUN_08002d3c(ptrInt);\n    if (returnValue != 0) break;\n    if ((paramValue != 0xffffffff) &&\n       ((paramValue == 0 || (returnValue = FUN_080015a0(), paramValue < (uint)(returnValue - intValue))))) {\n      flag = flag | 0x20;\n      counter = 0;\n      *(undefined *)((int)ptrInt + 0x3d) = 0x20;\n      *(undefined *)(ptrInt + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_param_and_return_code_08002bb4",
                "param_1": "ptrInt",
                "param_2": "paramValue",
                "param_3": "intValue",
                "iVar1": "returnValue",
                "param_1[0x10]": "flag",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "detect_data_overflow_08002c2e",
            "code": "\nundefined4 detectDataOverflow_08002c2e(int *dataPointer,uint maxSize,int currentSize)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*dataPointer + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(dataPointer);\n    if (result != 0) break;\n    if ((maxSize != 0xffffffff) &&\n       ((maxSize == 0 || (result = FUN_080015a0(), maxSize < (uint)(result - currentSize))))) {\n      dataPointer[0x10] = dataPointer[0x10] | 0x20;\n      dataPointer[0xc] = 0;\n      *(undefined *)((int)dataPointer + 0x3d) = 0x20;\n      *(undefined *)(dataPointer + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "detect_data_overflow_08002c2e",
                "param_1": "dataPointer",
                "param_2": "maxSize",
                "param_3": "currentSize",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_and_update_status_08002ca8",
            "code": "\nundefined4 check_and_update_status_08002ca8(int *status,uint remaining_size,int offset)\n\n{\n  int required_size;\n  \n  while( true ) {\n    if ((*(uint *)(*status + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*status + 0x14) & 0x10) == 0x10) break;\n    if ((remaining_size == 0) || (required_size = FUN_080015a0(), remaining_size < (uint)(required_size - offset))) {\n      flags = flags | 0x20;\n      *(undefined *)((int)status + 0x3d) = 0x20;\n      *(undefined *)(status + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*status + 0x14) = 0xffffffef;\n  flags = 0;\n  counter = 0;\n  *(undefined *)((int)status + 0x3d) = 0x20;\n  *(undefined *)(status + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_and_update_status_08002ca8",
                "param_1": "status",
                "param_2": "remaining_size",
                "param_3": "offset",
                "iVar1": "required_size",
                "param_1[0x10]": "flags",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_status_08002d3c",
            "code": "\nbool checkFlagStatus_08002d3c(int *flagPtr)\n\n{\n  bool hasFlag;\n  \n  hasFlag = (*(uint *)(*flagPtr + 0x14) & 0x400) == 0x400;\n  if (hasFlag) {\n    *(undefined4 *)(*flagPtr + 0x14) = 0xfffffbff;\n    errorCode = 4;\n    counter = 0;\n    *(undefined *)((int)flagPtr + 0x3d) = 0x20;\n    *(undefined *)(flagPtr + 0xf) = 0;\n  }\n  return hasFlag;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "param_1": "flagPtr",
                "bVar1": "hasFlag",
                "param_1[0x10]": "errorCode",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "process_flags_08002d98",
            "code": "\n\n\nundefined4 processFlags_08002d98(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool flagSet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (value1 == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (value1 == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value1 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value1 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (value1 == 0) {\n        startTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = FUN_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = FUN_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    flagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (flagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = FUN_080015a0();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      startTime = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        startTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = FUN_080015a0();\n          if (2 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = FUN_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = FUN_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "process_flags_08002d98",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "flagSet",
                "param_1[1]": "value1"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "update_memory_permissions_08003260",
            "code": "\n\n\nundefined4 updateMemoryPermissions_08003260(uint *permissionsArray,uint requestSize)\n\n{\n  int initialValue;\n  int currentValue;\n  uint result;\n  undefined4 status;\n  \n  if (((_DAT_40022000 & 7) < requestSize) &&\n     (_DAT_40022000 = requestSize | _DAT_40022000 & 0xfffffff8, requestSize != (requestSize & 7))) {\n    status = 1;\n  }\n  else {\n    if ((*permissionsArray & 2) != 0) {\n      _DAT_40021004 = permissionsArray[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*permissionsArray & 1) == 0) {\nLAB_08003394:\n      if ((requestSize < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = requestSize | _DAT_40022000 & 0xfffffff8, requestSize != (requestSize & 7))) {\n        status = 1;\n      }\n      else {\n        if ((*permissionsArray & 4) != 0) {\n          _DAT_40021004 = permissionsArray[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*permissionsArray & 8) != 0) {\n          _DAT_40021004 = permissionsArray[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        result = FUN_08003440();\n        DAT_20000018 = result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        status = 0;\n      }\n    }\n    else {\n      if (permissionsArray[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((permissionsArray[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = permissionsArray[1] | _DAT_40021004 & 0xfffffffc;\n      initialValue = FUN_080015a0();\n      if (permissionsArray[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        status = 3;\n      }\n      else if (permissionsArray[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        status = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        status = 3;\n      }\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003260": "update_memory_permissions_08003260",
                "param_1": "permissionsArray",
                "param_2": "requestSize",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "status"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 timeoutCounter;\n  undefined4 parameterA;\n  undefined4 parameterB;\n  undefined4 parameterC;\n  undefined4 parameterD;\n  uint executionTime;\n  undefined4 tempVariable;\n  uint local_14;\n  uint executionTimeResult;\n  uint tempVariable2;\n  \n  parameterA = 0x5040302;\n  parameterB = 0x9080706;\n  parameterC = 0xd0c0b0a;\n  parameterD = 0x10100f0e;\n  timeoutCounter = 0x201;\n  tempVariable = 0;\n  tempVariable2 = 0;\n  executionTime = 0;\n  executionTimeResult = 0;\n  local_14 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTimeResult = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    executionTime = (uint)*(byte *)((int)&parameterA + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      tempVariable2 = executionTime * 4000000;\n    }\n    else {\n      tempVariable2 = (executionTime * 8000000) / (uint)*(byte *)((int)&timeoutCounter + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTimeResult = tempVariable2;\n  }\n  else {\n    executionTimeResult = 8000000;\n  }\n  return executionTimeResult;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "timeoutCounter",
                "local_2c": "parameterA",
                "uStack_28": "parameterB",
                "uStack_24": "parameterC",
                "uStack_20": "parameterD",
                "local_1c": "executionTime",
                "local_18": "tempVariable",
                "local_10": "executionTimeResult",
                "local_c": "tempVariable2"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_value_08003504",
            "code": "\nundefined4 get_data_value_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_value_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shifted_result_08003518",
            "code": "\n\n\nuint shiftedResult_08003518(void)\n\n{\n  uint functionResult;\n  \n  functionResult = FUN_08003504();\n  return functionResult >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shifted_result_08003518",
                "uVar1": "functionResult"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "get_shifted_value_08003540",
            "code": "\n\n\nuint getShiftedValue_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "get_shifted_value_08003540",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int input)\n\n{\n  bool bVar1;\n  int iteration;\n  \n  iteration = input * (DAT_20000018 / 8000);\n  do {\n    bVar1 = iteration != 0;\n    iteration = iteration + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "input",
                "local_c": "iteration"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "FUNC_080035a4",
            "code": "\nundefined4 FUNC_080035a4(undefined4 *param_1)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined4 *)0x0) {\n    uVar1 = 1;\n  }\n  else {\n    if (*(char *)((int)param_1 + 0x3d) == '\\0') {\n      *(undefined *)(param_1 + 0xf) = 0;\n      FUNC_080035fa(param_1);\n    }\n    *(undefined *)((int)param_1 + 0x3d) = 2;\n    FUN_08003c94(*param_1,param_1 + 1);\n    *(undefined *)((int)param_1 + 0x3d) = 1;\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "FUNC_080035a4"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_bits_in_pointer_0800360c",
            "code": "\nundefined4 setBitsInPointer_0800360c(uint **pointer)\n\n{\n  (*pointer)[3] = (*pointer)[3] | 1;\n  **pointer = **pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_bits_in_pointer_0800360c",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "verify_param_08003640",
            "code": "\nundefined4 verify_param_08003640(undefined4 *param)\n\n{\n  undefined4 result;\n  \n  if (param == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)param + 0x3d) == '\\0') {\n      *(undefined *)(param + 0xf) = 0;\n      FUNC_08003696(param);\n    }\n    *(undefined *)((int)param + 0x3d) = 2;\n    FUN_08003c94(*param,param + 1);\n    *(undefined *)((int)param + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "verify_param_08003640",
                "param_1": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "initialize_flags_080036a8",
            "code": "\nundefined4 initializeFlags_080036a8(uint **pointer,undefined4 value)\n\n{\n  FUN_080041ea(*pointer,value,1);\n  if (*pointer == (uint *)0x40012c00) {\n    (*pointer)[0x11] = (*pointer)[0x11] | 0x8000;\n  }\n  **pointer = **pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "initialize_flags_080036a8",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "perform_operations_080036f8",
            "code": "\nvoid performOperations_080036f8(int *inputArray)\n\n{\n  if (((*(uint *)(*inputArray + 0x10) & 2) == 2) && ((*(uint *)(*inputArray + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*inputArray + 0x10) = 0xfffffffd;\n    *(undefined *)(inputArray + 7) = 1;\n    if ((*(uint *)(*inputArray + 0x18) & 3) == 0) {\n      FUNC_08003c4a(inputArray);\n      FUNC_08003c6e(inputArray);\n    }\n    else {\n      FUNC_08003c5c(inputArray);\n    }\n    *(undefined *)(inputArray + 7) = 0;\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 4) == 4) && ((*(uint *)(*inputArray + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*inputArray + 0x10) = 0xfffffffb;\n    *(undefined *)(inputArray + 7) = 2;\n    if ((*(uint *)(*inputArray + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(inputArray);\n      FUNC_08003c6e(inputArray);\n    }\n    else {\n      FUNC_08003c5c(inputArray);\n    }\n    *(undefined *)(inputArray + 7) = 0;\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 8) == 8) && ((*(uint *)(*inputArray + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*inputArray + 0x10) = 0xfffffff7;\n    *(undefined *)(inputArray + 7) = 4;\n    if ((*(uint *)(*inputArray + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(inputArray);\n      FUNC_08003c6e(inputArray);\n    }\n    else {\n      FUNC_08003c5c(inputArray);\n    }\n    *(undefined *)(inputArray + 7) = 0;\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 0x10) == 0x10) && ((*(uint *)(*inputArray + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*inputArray + 0x10) = 0xffffffef;\n    *(undefined *)(inputArray + 7) = 8;\n    if ((*(uint *)(*inputArray + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(inputArray);\n      FUNC_08003c6e(inputArray);\n    }\n    else {\n      FUNC_08003c5c(inputArray);\n    }\n    *(undefined *)(inputArray + 7) = 0;\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 1) == 1) && ((*(uint *)(*inputArray + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*inputArray + 0x10) = 0xfffffffe;\n    FUN_08004f78(inputArray);\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 0x80) == 0x80) && ((*(uint *)(*inputArray + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*inputArray + 0x10) = 0xffffff7f;\n    FUNC_08004378(inputArray);\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 0x40) == 0x40) && ((*(uint *)(*inputArray + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*inputArray + 0x10) = 0xffffffbf;\n    FUNC_08003c80(inputArray);\n  }\n  if (((*(uint *)(*inputArray + 0x10) & 0x20) == 0x20) && ((*(uint *)(*inputArray + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*inputArray + 0x10) = 0xffffffdf;\n    FUNC_08004366(inputArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "perform_operations_080036f8",
                "param_1": "inputArray"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_flags_and_return_08003908",
            "code": "\nundefined4 updateFlagsAndReturn_08003908(int *array,int index,undefined4 value)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    switch(value) {\n    case 0:\n      FUN_08003d60(*array,index);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 8;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffffb;\n      *(uint *)(*array + 0x18) = *(uint *)(index + 0x10) | *(uint *)(*array + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*array,index);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 0x800;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffbff;\n      *(uint *)(*array + 0x18) = *(int *)(index + 0x10) << 8 | *(uint *)(*array + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*array,index);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 8;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffffb;\n      *(uint *)(*array + 0x1c) = *(uint *)(index + 0x10) | *(uint *)(*array + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*array,index);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 0x800;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffbff;\n      *(uint *)(*array + 0x1c) = *(int *)(index + 0x10) << 8 | *(uint *)(*array + 0x1c);\n    }\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_flags_and_return_08003908",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "perform_operation_08003a94",
            "code": "\nundefined4 performOperation_08003a94(int *arrayParameter,uint *pointerParameter)\n\n{\n  undefined4 returnValue;\n  uint value;\n  \n  if (*(char *)(arrayParameter + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(arrayParameter + 0xf) = 1;\n    *(undefined *)((int)arrayParameter + 0x3d) = 2;\n    *(uint *)(*arrayParameter + 8) = *(uint *)(*arrayParameter + 8) & 0xffff0088;\n    value = *pointerParameter;\n    if (value == 0x40) {\n      FUN_080040a0(*arrayParameter,pointerParameter[1],pointerParameter[3]);\n      FUN_0800416a(*arrayParameter,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        FUN_0800416a(*arrayParameter,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          FUN_0800416a(*arrayParameter,0);\n        }\n      }\n      else if (value == 0x20) {\n        FUN_0800416a(*arrayParameter,0x20);\n      }\n      else if (value == 0x30) {\n        FUN_0800416a(*arrayParameter,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      FUN_080041a8(*arrayParameter,pointerParameter[2],pointerParameter[1],pointerParameter[3]);\n      *(uint *)(*arrayParameter + 8) = *(uint *)(*arrayParameter + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        FUN_080040a0(*arrayParameter,pointerParameter[1],pointerParameter[3]);\n        FUN_0800416a(*arrayParameter,0x50);\n      }\n      else if (value == 0x60) {\n        FUN_08004104(*arrayParameter,pointerParameter[1],pointerParameter[3]);\n        FUN_0800416a(*arrayParameter,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*arrayParameter + 8) = *(uint *)(*arrayParameter + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      FUN_080041a8(*arrayParameter,pointerParameter[2],pointerParameter[1],pointerParameter[3]);\n      *(uint *)(*arrayParameter + 8) = *(uint *)(*arrayParameter + 8) | 0x4000;\n    }\n    *(undefined *)((int)arrayParameter + 0x3d) = 1;\n    *(undefined *)(arrayParameter + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "perform_operation_08003a94",
                "param_1": "arrayParameter",
                "param_2": "pointerParameter",
                "uVar1": "returnValue",
                "uVar2": "value"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid updateMemory_08003c94(uint *memoryAddress,uint *dataBuffer)\n\n{\n  uint currentValue;\n  \n  currentValue = *memoryAddress;\n  if ((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n      (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) {\n    currentValue = dataBuffer[1] | currentValue & 0xffffff8f;\n  }\n  if (((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n     ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))) {\n    currentValue = dataBuffer[3] | currentValue & 0xfffffcff;\n  }\n  *memoryAddress = dataBuffer[5] | currentValue & 0xffffff7f;\n  memoryAddress[0xb] = dataBuffer[2];\n  memoryAddress[10] = *dataBuffer;\n  if (memoryAddress == (uint *)0x40012c00) {\n    uRam40012c30 = dataBuffer[4];\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memoryAddress",
                "param_2": "dataBuffer",
                "local_c": "currentValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_values_08003d60",
            "code": "\nvoid updateValues_08003d60(int address,uint *values)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempLocal10;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  tempLocal10 = *(uint *)(address + 4);\n  tempVar1 = *values;\n  tempVar2 = values[2] | *(uint *)(address + 0x20) & 0xfffffffd;\n  if (address == 0x40012c00) {\n    tempVar2 = (values[3] | tempVar2 & 0xfffffff7) & 0xfffffffb;\n    tempLocal10 = values[6] | values[5] | tempLocal10 & 0xfffffcff;\n  }\n  *(uint *)(address + 4) = tempLocal10;\n  *(uint *)(address + 0x18) = tempVar1 | *(uint *)(address + 0x18) & 0xffffff8c;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = tempVar2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_values_08003d60",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "local_10": "tempLocal10"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_config_08003e38",
            "code": "\nvoid updateConfig_08003e38(int configPtr,int *inputArray)\n\n{\n  int tempVar;\n  uint updatedValue;\n  uint localValue;\n  \n  *(uint *)(configPtr + 0x20) = *(uint *)(configPtr + 0x20) & 0xffffffef;\n  localValue = *(uint *)(configPtr + 4);\n  tempVar = *inputArray;\n  updatedValue = inputArray[2] << 4 | *(uint *)(configPtr + 0x20) & 0xffffffdf;\n  if (configPtr == 0x40012c00) {\n    updatedValue = (inputArray[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    localValue = inputArray[6] << 2 | inputArray[5] << 2 | localValue & 0xfffff3ff;\n  }\n  *(uint *)(configPtr + 4) = localValue;\n  *(uint *)(configPtr + 0x18) = tempVar << 8 | *(uint *)(configPtr + 0x18) & 0xffff8cff;\n  *(int *)(configPtr + 0x38) = inputArray[1];\n  *(uint *)(configPtr + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_config_08003e38",
                "param_1": "configPtr",
                "param_2": "inputArray",
                "iVar1": "tempVar",
                "uVar2": "updatedValue",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_data_08003f18",
            "code": "\nvoid updateData_08003f18(int dataAddress,uint *dataValues)\n\n{\n  uint value1;\n  uint value2;\n  uint tempValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffeff;\n  tempValue = *(uint *)(dataAddress + 4);\n  value1 = *dataValues;\n  value2 = dataValues[2] << 8 | *(uint *)(dataAddress + 0x20) & 0xfffffdff;\n  if (dataAddress == 0x40012c00) {\n    value2 = (dataValues[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    tempValue = dataValues[6] << 4 | dataValues[5] << 4 | tempValue & 0xffffcfff;\n  }\n  *(uint *)(dataAddress + 4) = tempValue;\n  *(uint *)(dataAddress + 0x1c) = value1 | *(uint *)(dataAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(dataAddress + 0x3c) = dataValues[1];\n  *(uint *)(dataAddress + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_data_08003ff8",
            "code": "\nvoid updateData_08003ff8(int dataAddress,int *paramArray)\n\n{\n  int value1;\n  int value2;\n  uint localValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  localValue = *(uint *)(dataAddress + 4);\n  value1 = *paramArray;\n  value2 = paramArray[2];\n  if (dataAddress == 0x40012c00) {\n    localValue = paramArray[5] << 6 | localValue & 0xffffbfff;\n  }\n  *(uint *)(dataAddress + 4) = localValue;\n  *(uint *)(dataAddress + 0x1c) = value1 << 8 | *(uint *)(dataAddress + 0x1c) & 0xffff8cff;\n  *(int *)(dataAddress + 0x40) = paramArray[1];\n  *(uint *)(dataAddress + 0x20) = value2 << 0xc | *(uint *)(dataAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "dataAddress",
                "param_2": "paramArray",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameters_080040a0",
            "code": "\nvoid updateParameters_080040a0(int address,uint value,int shiftValue)\n\n{\n  uint tempValue;\n  \n  tempValue = *(uint *)(address + 0x20);\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  *(uint *)(address + 0x18) = shiftValue << 4 | *(uint *)(address + 0x18) & 0xffffff0f;\n  *(uint *)(address + 0x20) = value | tempValue & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shiftValue",
                "uVar1": "tempValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_control_flags_08004104",
            "code": "\nvoid updateControlFlags_08004104(int controlStruct,int param2Value,int param3Value)\n\n{\n  *(uint *)(controlStruct + 0x20) = *(uint *)(controlStruct + 0x20) & 0xffffffef;\n  *(uint *)(controlStruct + 0x18) = param3Value << 0xc | *(uint *)(controlStruct + 0x18) & 0xffff0fff;\n  *(uint *)(controlStruct + 0x20) = param2Value << 4 | *(uint *)(controlStruct + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_control_flags_08004104",
                "param_1": "controlStruct",
                "param_2": "param2Value",
                "param_3": "param3Value"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_memory_value_0800416a",
            "code": "\nvoid updateMemoryValue_0800416a(int memoryAddress,ushort newValue)\n\n{\n  *(uint *)(memoryAddress + 8) = *(uint *)(memoryAddress + 8) & 0xffffff8f | (uint)(newValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_memory_value_0800416a",
                "param_1": "memoryAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_param_080041a8",
            "code": "\nvoid updateParam_080041a8(int baseAddr,uint newValue1,uint newValue2,int shiftValue)\n\n{\n  *(uint *)(baseAddr + 8) = newValue1 | shiftValue << 8 | newValue2 | *(uint *)(baseAddr + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_param_080041a8",
                "param_1": "baseAddr",
                "param_2": "newValue1",
                "param_3": "newValue2",
                "param_4": "shiftValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bitwise_value_080041ea",
            "code": "\nvoid updateBitwiseValue_080041ea(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bitwise_value_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_param_with_value_0800422e",
            "code": "\nundefined4 updateParamWithValue_0800422e(int *paramArray,uint *valueArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(paramArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(paramArray + 0xf) = 1;\n    *(uint *)(*paramArray + 0x44) =\n         valueArray[6] |\n         (valueArray[6] |\n         (valueArray[5] |\n         (valueArray[4] |\n         (*valueArray | (valueArray[1] | (valueArray[2] | valueArray[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(paramArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_param_with_value_0800422e",
                "param_1": "paramArray",
                "param_2": "valueArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_080042de",
            "code": "\nundefined4 updateFlags_080042de(int *flags,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(flags + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(flags + 0xf) = 1;\n    *(undefined *)((int)flags + 0x3d) = 2;\n    *(uint *)(*flags + 4) = *(uint *)(*flags + 4) & 0xffffff8f;\n    *(uint *)(*flags + 4) = *values | *(uint *)(*flags + 4);\n    *(uint *)(*flags + 8) = *(uint *)(*flags + 8) & 0xffffff7f;\n    *(uint *)(*flags + 8) = values[1] | *(uint *)(*flags + 8);\n    *(undefined *)((int)flags + 0x3d) = 1;\n    *(undefined *)(flags + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_080042de",
                "param_1": "flags",
                "param_2": "values",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_parameter_0800438a",
            "code": "\nundefined4 initializeParameter_0800438a(int *parameter)\n\n{\n  undefined4 returnValue;\n  \n  if (parameter == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)parameter + 0x39) == '\\0') {\n      *(undefined *)(parameter + 0xe) = 0;\n      FUNC_08004424(parameter);\n    }\n    *(undefined *)((int)parameter + 0x39) = 0x24;\n    *(uint *)(*parameter + 0xc) = *(uint *)(*parameter + 0xc) & 0xffffdfff;\n    FUN_080046ec(parameter);\n    *(uint *)(*parameter + 0x10) = *(uint *)(*parameter + 0x10) & 0xffffb7ff;\n    *(uint *)(*parameter + 0x14) = *(uint *)(*parameter + 0x14) & 0xffffffd5;\n    *(uint *)(*parameter + 0xc) = *(uint *)(*parameter + 0xc) | 0x2000;\n    value4 = 0;\n    *(undefined *)((int)parameter + 0x39) = 0x20;\n    *(undefined *)((int)parameter + 0x3a) = 0x20;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_parameter_0800438a",
                "param_1": "parameter",
                "uVar1": "returnValue",
                "param_1[0xf]": "value4"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "validate_and_process_data_08004436",
            "code": "\nundefined4 validate_and_process_data_08004436(uint **data_ptr,ushort *input_array,short array_length,uint timeout)\n\n{\n  int result;\n  int temp;\n  undefined4 status;\n  ushort *temp_array;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if ((input_array == (ushort *)0x0) || (array_length == 0)) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = (uint *)0x0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      result = FUN_080015a0();\n      *(short *)(data_ptr + 9) = array_length;\n      *(short *)((int)data_ptr + 0x26) = array_length;\n      temp_array = input_array;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == (uint *)0x1000) {\n          do {\n            if ((**data_ptr & 0x80) == 0x80) {\n              temp = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp = FUN_080015a0(), (uint)(temp - result) <= timeout))));\n          (*data_ptr)[3] = (*data_ptr)[3] & 0xfffffe5f;\n          (*data_ptr)[5] = (*data_ptr)[5] & 0xfffffffe;\n          *(undefined *)((int)data_ptr + 0x39) = 0x20;\n          *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n          *(undefined *)(data_ptr + 0xe) = 0;\n          temp = 3;\nLAB_0800454c:\n          if (temp != 0) {\n            return 3;\n          }\n          (*data_ptr)[1] = *temp_array & 0x1ff;\n          if (data_ptr[4] == (uint *)0x0) {\n            temp_array = temp_array + 1;\n          }\n          else {\n            temp_array = (ushort *)((int)temp_array + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data_ptr & 0x80) == 0x80) {\n              temp = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp = FUN_080015a0(), (uint)(temp - result) <= timeout))));\n          (*data_ptr)[3] = (*data_ptr)[3] & 0xfffffe5f;\n          (*data_ptr)[5] = (*data_ptr)[5] & 0xfffffffe;\n          *(undefined *)((int)data_ptr + 0x39) = 0x20;\n          *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n          *(undefined *)(data_ptr + 0xe) = 0;\n          temp = 3;\nLAB_08004614:\n          if (temp != 0) {\n            return 3;\n          }\n          (*data_ptr)[1] = (uint)*(byte *)temp_array;\n          temp_array = (ushort *)((int)temp_array + 1);\n        }\n      }\n      do {\n        if ((**data_ptr & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (temp = FUN_080015a0(), (uint)(temp - result) <= timeout))));\n      (*data_ptr)[3] = (*data_ptr)[3] & 0xfffffe5f;\n      (*data_ptr)[5] = (*data_ptr)[5] & 0xfffffffe;\n      *(undefined *)((int)data_ptr + 0x39) = 0x20;\n      *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n      *(undefined *)(data_ptr + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004436": "validate_and_process_data_08004436",
                "param_1": "data_ptr",
                "param_2": "input_array",
                "param_3": "array_length",
                "param_4": "timeout",
                "iVar1": "result",
                "iVar2": "temp",
                "uVar3": "status",
                "local_58": "temp_array"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *checksumArray)\n\n{\n  ulonglong calculationResult1;\n  int calculationResult2;\n  int calculationResult3;\n  uint calculationResult4;\n  int calculationResult5;\n  undefined8 functionResult;\n  \n  *(uint *)(*checksumArray + 0x10) = checksumArray[3] | *(uint *)(*checksumArray + 0x10) & 0xffffcfff;\n  *(uint *)(*checksumArray + 0xc) =\n       *(uint *)(*checksumArray + 0xc) & 0xffffe9f3 | checksumArray[5] | checksumArray[2] | checksumArray[4];\n  *(uint *)(*checksumArray + 0x14) = checksumArray[6] | *(uint *)(*checksumArray + 0x14) & 0xfffffcff;\n  if (*checksumArray == 0x40013800) {\n    functionResult = FUN_08003540();\n    calculationResult1 = (ulonglong)(uint)((int)functionResult * 0x19) / (ulonglong)(uint)(size << 2);\n    calculationResult2 = FUN_08003540((int)functionResult,(int)((ulonglong)functionResult >> 0x20),(int)(calculationResult1 * 0x51eb851f));\n    calculationResult3 = size;\n    functionResult = FUN_08003540();\n    calculationResult4 = ((uint)(calculationResult2 * 0x19) / (uint)(calculationResult3 << 2) +\n            (int)(((ulonglong)(uint)((int)functionResult * 0x19) / (ulonglong)(uint)(size << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    calculationResult2 = FUN_08003540((int)functionResult,(int)((ulonglong)functionResult >> 0x20),calculationResult4 * 0x51eb851f);\n    calculationResult5 = size;\n    calculationResult3 = FUN_08003540();\n    *(uint *)(*checksumArray + 8) =\n         ((((uint)(calculationResult2 * 0x19) / (uint)(calculationResult5 << 2) +\n           (int)(((ulonglong)(uint)(calculationResult3 * 0x19) / (ulonglong)(uint)(size << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(calculationResult1 / 100) * 0x10 + (calculationResult4 / 100 & 0xf0);\n  }\n  else {\n    functionResult = FUN_08003518();\n    calculationResult1 = (ulonglong)(uint)((int)functionResult * 0x19) / (ulonglong)(uint)(size << 2);\n    calculationResult2 = FUN_08003518((int)functionResult,(int)((ulonglong)functionResult >> 0x20),(int)(calculationResult1 * 0x51eb851f));\n    calculationResult3 = size;\n    functionResult = FUN_08003518();\n    calculationResult4 = ((uint)(calculationResult2 * 0x19) / (uint)(calculationResult3 << 2) +\n            (int)(((ulonglong)(uint)((int)functionResult * 0x19) / (ulonglong)(uint)(size << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    calculationResult2 = FUN_08003518((int)functionResult,(int)((ulonglong)functionResult >> 0x20),calculationResult4 * 0x51eb851f);\n    calculationResult5 = size;\n    calculationResult3 = FUN_08003518();\n    *(uint *)(*checksumArray + 8) =\n         ((((uint)(calculationResult2 * 0x19) / (uint)(calculationResult5 << 2) +\n           (int)(((ulonglong)(uint)(calculationResult3 * 0x19) / (ulonglong)(uint)(size << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(calculationResult1 / 100) * 0x10 + (calculationResult4 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "checksumArray",
                "uVar1": "calculationResult1",
                "iVar2": "calculationResult2",
                "iVar3": "calculationResult3",
                "uVar4": "calculationResult4",
                "iVar5": "calculationResult5",
                "uVar6": "functionResult",
                "param_1[3]": "checksumArray[3]",
                "param_1[5]": "checksumArray[5]",
                "param_1[2]": "checksumArray[2]",
                "param_1[4]": "checksumArray[4]",
                "param_1[6]": "checksumArray[6]",
                "param_1[1]": "size"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initializeData_0800491c(undefined4 *data)\n\n{\n  undefined zeroByte;\n  undefined byteValue;\n  undefined dataArray [5];\n  \n  zeroByte = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&zeroByte,1);\n  byteValue = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&byteValue,1);\n  dataArray[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,dataArray,1);\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  data[3] = 0;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  data[7] = 0;\n  data[8] = 0;\n  data[9] = 0;\n  data[10] = 0;\n  FUN_080049cc(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "data",
                "local_13": "zeroByte",
                "local_12": "byteValue",
                "local_11": "dataArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_averages_080049cc",
            "code": "\nvoid calculateAverages_080049cc(int valueArray)\n\n{\n  undefined4 uVar1;\n  undefined4 sumEven;\n  undefined4 sumOdd;\n  undefined4 getCurrentTime;\n  int arrayLength;\n  int i;\n  undefined4 maxEven;\n  undefined4 maxOdd;\n  undefined4 totalEven;\n  undefined4 totalOdd;\n  \n  arrayLength = 1;\n  totalOdd = 0;\n  totalEven = 0;\n  maxOdd = 0;\n  maxEven = 0;\n  getCurrentTime = (*DAT_20000a50)();\n  i = 0;\n  while( true ) {\n    if (arrayLength <= i) break;\n    sumOdd = 0;\n    sumEven = 0;\n    FUN_08004ae0(valueArray);\n    FUN_08004d78(valueArray,&sumOdd,&sumEven);\n    maxOdd = FUN_08000aa8(maxOdd,sumOdd);\n    maxEven = FUN_08000aa8(maxEven,sumEven);\n    totalOdd = FUN_08000aa8(totalOdd,*(undefined4 *)(valueArray + 0x10));\n    totalEven = FUN_08000aa8(totalEven,*(undefined4 *)(valueArray + 0x14));\n    getCurrentTime = (*DAT_20000a50)();\n    i = i + 1;\n  }\n  uVar1 = FUN_08000c10(arrayLength);\n  uVar1 = FUN_08000e20(totalOdd,uVar1);\n  *(undefined4 *)(valueArray + 0x1c) = uVar1;\n  uVar1 = FUN_08000c10(arrayLength);\n  uVar1 = FUN_08000e20(totalEven,uVar1);\n  *(undefined4 *)(valueArray + 0x20) = uVar1;\n  uVar1 = FUN_08000c10(arrayLength);\n  uVar1 = FUN_08000e20(maxOdd,uVar1);\n  *(undefined4 *)(valueArray + 0x24) = uVar1;\n  uVar1 = FUN_08000c10(arrayLength);\n  uVar1 = FUN_08000e20(maxEven,uVar1);\n  *(undefined4 *)(valueArray + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_averages_080049cc",
                "param_1": "valueArray",
                "local_2c": "sumEven",
                "local_28": "sumOdd",
                "local_24": "getCurrentTime",
                "local_20": "arrayLength",
                "local_1c": "i",
                "local_18": "maxEven",
                "local_14": "maxOdd",
                "local_10": "totalEven",
                "local_c": "totalOdd"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_data_from_binary_08004ae0",
            "code": "\nvoid extractDataFromBinary_08004ae0(undefined4 *outputData)\n\n{\n  undefined4 uVar1;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  undefined byte5;\n  undefined byte6;\n  undefined byte7;\n  undefined byte8;\n  undefined byte9;\n  undefined byte10;\n  undefined byte11;\n  undefined byte12;\n  undefined byte13;\n  undefined byte14;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&byte1,0xe);\n  short6 = CONCAT11(byte3,byte4);\n  short5 = CONCAT11(byte5,byte6);\n  short4 = CONCAT11(byte7,byte8);\n  short3 = CONCAT11(byte9,byte10);\n  short2 = CONCAT11(byte11,byte12);\n  short1 = CONCAT11(byte13,byte14);\n  uVar1 = FUN_08000c10((int)CONCAT11(byte1,byte2));\n  *outputData = uVar1;\n  uVar1 = FUN_08000c10((int)short6);\n  outputData[1] = uVar1;\n  uVar1 = FUN_08000c10((int)short5);\n  outputData[2] = uVar1;\n  uVar1 = FUN_08000c10((int)short4);\n  outputData[3] = uVar1;\n  uVar1 = FUN_08000c10((int)short3);\n  outputData[4] = uVar1;\n  uVar1 = FUN_08000c10((int)short2);\n  outputData[5] = uVar1;\n  uVar1 = FUN_08000c10((int)short1);\n  outputData[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_data_from_binary_08004ae0",
                "param_1": "outputData",
                "local_2c": "byte1",
                "local_2b": "byte2",
                "local_2a": "byte3",
                "local_29": "byte4",
                "local_28": "byte5",
                "local_27": "byte6",
                "local_26": "byte7",
                "local_25": "byte8",
                "local_24": "byte9",
                "local_23": "byte10",
                "local_22": "byte11",
                "local_21": "byte12",
                "local_20": "byte13",
                "local_1f": "byte14",
                "local_1e": "short1",
                "local_1c": "short2",
                "local_1a": "short3",
                "local_18": "short4",
                "local_16": "short5",
                "local_14": "short6"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_value_08004bd8",
            "code": "\nvoid calculateValue_08004bd8(int input,undefined4 *output)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(input + 0x10),*(undefined4 *)(input + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(input + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(input + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(input + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_value_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_results_08004d78",
            "code": "\nvoid calculateResults_08004d78(undefined4 *inputValues,undefined4 *outputValue1,undefined4 *outputValue2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  result1 = FUN_08000e20(*inputValues,0x45800000);\n  result2 = FUN_08000e20(inputValues[1],0x45800000);\n  result3 = FUN_08000e20(inputValues[2],0x45800000);\n  temp1 = FUN_08000418(result2);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  temp1 = FUN_08000418(result1);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  *outputValue1 = result2;\n  *outputValue2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_results_08004d78",
                "param_1": "inputValues",
                "param_2": "outputValue1",
                "param_3": "outputValue2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp1",
                "uVar5": "temp2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "call_software_interrupt_08004e6c",
            "code": "\nvoid call_software_interrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "call_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_data_08004e74",
            "code": "\nundefined4 initializeData_08004e74(undefined4 inputData)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_200009f0 == 0) {\n    returnValue = FUN_08004e6c(1,inputData,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_data_08004e74",
                "param_1": "inputData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "execute_function_08004ea4",
            "code": "\nvoid executeFunction_08004ea4(undefined dataPointer1,undefined dataPointer2,undefined4 parameter3,undefined2 parameter4)\n\n{\n  FUN_08001ccc(&DAT_20000a88,dataPointer1,dataPointer2,1,parameter3,parameter4,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "execute_function_08004ea4",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "parameter3",
                "param_4": "parameter4"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "execute_function_08004ee8",
            "code": "\nvoid executeFunction_08004ee8(undefined data_1,undefined data_2,undefined4 value_1,undefined2 value_2)\n\n{\n  FUN_08001f6c(&DAT_20000a88,data_1,data_2,1,value_1,value_2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "execute_function_08004ee8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "value_1",
                "param_4": "value_2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_return_value_08004f2c",
            "code": "\nundefined4 getReturnValue_08004f2c(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_080015a0();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_return_value_08004f2c",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataPointer,undefined2 value)\n\n{\n  FUN_08004436(&DAT_20000adc,dataPointer,value,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataPointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_data_08004f60",
            "code": "\nvoid initializeData_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "update_pitch_info_08004f78",
            "code": "\nvoid updatePitchInfo_08004f78(void)\n\n{\n  undefined4 returnValue;\n  int result;\n  undefined4 tempValue;\n  uint maskedValue;\n  undefined8 pitchValue;\n  byte finalValue;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitchValue = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitchValue,(int)((ulonglong)pitchValue >> 0x20));\n  returnValue = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,returnValue);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  returnValue = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(returnValue,DAT_20000b5c);\n  returnValue = FUN_08000c10(DAT_20000010);\n  result = FUN_08000ff4(returnValue,DAT_20000b5c);\n  if (result == 0) {\n    returnValue = FUN_08000c10(DAT_200009f4);\n    result = FUN_08001030(returnValue,DAT_20000b5c);\n    if (result != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  maskedValue = DAT_20000a08 ^ 0x80000000;\n  returnValue = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(maskedValue,returnValue);\n  returnValue = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  returnValue = FUN_08000aa8(returnValue,DAT_20000a58);\n  tempValue = FUN_08000c10(DAT_20000010);\n  result = FUN_08001030(returnValue,tempValue);\n  if (result == 0) {\n    tempValue = FUN_08000c10(DAT_200009f4);\n    result = FUN_08000ff4(returnValue,tempValue);\n    if (result == 0) {\n      finalValue = FUN_08001044(returnValue);\n    }\n    else {\n      finalValue = DAT_200009f4;\n    }\n  }\n  else {\n    finalValue = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,result != 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,result == 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,result != 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,result == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)finalValue;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)finalValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "update_pitch_info_08004f78",
                "uVar1": "returnValue",
                "iVar2": "result",
                "uVar3": "tempValue",
                "uVar4": "maskedValue",
                "uVar5": "pitchValue",
                "local_11": "finalValue"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "perform_initialization_08005224",
            "code": "\nvoid perform_initialization_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "perform_initialization_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_program_080052a0",
            "code": "\nvoid initializeProgram_080052a0(void)\n\n{\n  int result;\n  undefined8 time;\n  undefined4 errorCode1;\n  undefined4 errorCode2;\n  undefined4 errorCode3;\n  undefined4 errorCode4;\n  undefined4 errorCode5;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  undefined4 flag6;\n  undefined4 flag7;\n  \n  flag1 = 1;\n  flag2 = 0x10000;\n  flag3 = 0;\n  flag4 = 1;\n  flag5 = 2;\n  flag6 = 0x10000;\n  flag7 = 0x1c0000;\n  result = FUN_08002d98(&flag1);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  errorCode1 = 0xf;\n  errorCode2 = 2;\n  errorCode3 = 0x80;\n  errorCode4 = 0;\n  errorCode5 = 0;\n  result = FUN_08003260(&errorCode1,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  time = FUN_08003504();\n  FUN_08001762((uint)time / 1000,(int)((ulonglong)time >> 0x20),(uint)time * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_program_080052a0",
                "local_44": "errorCode1",
                "local_40": "errorCode2",
                "local_3c": "errorCode3",
                "local_38": "errorCode4",
                "local_34": "errorCode5",
                "local_30": "flag1",
                "local_2c": "flag2",
                "local_28": "flag3",
                "local_20": "flag4",
                "local_14": "flag5",
                "local_10": "flag6",
                "local_c": "flag7",
                "iVar1": "result",
                "uVar2": "time"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_function_08005348",
            "code": "\nvoid initializeFunction_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = FUN_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_function_08005348",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initializeProgram_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 parameter5;\n  undefined4 parameter6;\n  undefined4 parameter7;\n  undefined4 parameter8;\n  undefined4 parameter9;\n  undefined4 parameter10;\n  undefined4 parameter11;\n  undefined4 parameter12;\n  undefined4 parameter13;\n  undefined4 parameter14;\n  undefined4 parameter15;\n  undefined4 parameter16;\n  undefined4 paramArray [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  paramArray[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,paramArray);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  parameter15 = 0;\n  parameter16 = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&parameter15);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  parameter8 = 0x60;\n  parameter9 = 0;\n  parameter10 = 0;\n  parameter11 = 0;\n  parameter12 = 0;\n  parameter13 = 0;\n  parameter14 = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&parameter8,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&parameter8,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  parameter1 = 0;\n  parameter2 = 0;\n  parameter3 = 0;\n  parameter4 = 0;\n  parameter5 = 0;\n  parameter6 = 0x2000;\n  parameter7 = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&parameter1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_58": "parameter1",
                "local_54": "parameter2",
                "local_50": "parameter3",
                "local_4c": "parameter4",
                "local_48": "parameter5",
                "local_44": "parameter6",
                "local_40": "parameter7",
                "local_3c": "parameter8",
                "local_38": "parameter9",
                "local_34": "parameter10",
                "local_30": "parameter11",
                "local_2c": "parameter12",
                "local_28": "parameter13",
                "local_24": "parameter14",
                "local_20": "parameter15",
                "local_1c": "parameter16",
                "local_18": "paramArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_program_08005500",
            "code": "\nvoid initializeProgram_08005500(void)\n\n{\n  int returnValue;\n  undefined4 bufferSize;\n  undefined4 bufferIndex;\n  undefined4 buffer [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  returnValue = FUN_080035a4(&DAT_20000b60);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  buffer[0] = 0x1000;\n  returnValue = FUN_08003a94(&DAT_20000b60,buffer);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  bufferIndex = 0;\n  returnValue = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_program_08005500",
                "local_20": "bufferSize",
                "local_1c": "bufferIndex",
                "local_18": "buffer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initializeData_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = FUN_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_hardware_080055f4",
            "code": "\n\n\nvoid initializeHardware_080055f4(void)\n\n{\n  undefined4 bufferSize;\n  undefined4 isSet;\n  undefined4 flag;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  bufferSize = 0x1e;\n  isSet = 1;\n  flag = 2;\n  FUN_080017c4(0x40010800,&bufferSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_hardware_080055f4",
                "local_18": "bufferSize",
                "local_14": "isSet",
                "local_c": "flag"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_settings_08005680",
            "code": "\nvoid initializeSettings_08005680(int *settings)\n\n{\n  undefined4 setting1;\n  undefined4 setting2;\n  undefined4 setting3;\n  \n  if (*settings == 0x40012c00) {\n    setting1 = 0x900;\n    setting2 = 2;\n    setting3 = 2;\n    FUN_080017c4(0x40010800,&setting1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_settings_08005680",
                "param_1": "settings",
                "local_18": "setting1",
                "local_14": "setting2",
                "local_c": "setting3"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_components_08005704",
            "code": "\nvoid initialize_components_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_components_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_structures_08005714",
            "code": "\nvoid initialize_data_structures_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_structures_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *newPtr;\n  undefined *result;\n  undefined fixedMemory [4];\n  int remainingSize;\n  undefined *currentPtr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  currentPtr = DAT_20000a10;\n  if (fixedMemory < DAT_20000a10 + size) {\n    remainingSize = size;\n    newPtr = (undefined4 *)FUN_08005d14();\n    *newPtr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "newPtr",
                "puVar2": "result",
                "auStack_18": "fixedMemory",
                "local_14": "remainingSize",
                "local_c": "currentPtr"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_peripheral_08005780",
            "code": "\n\n\nvoid initializePeripheral_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_peripheral_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 upper_bits;\n  uint shifted_bits;\n  uint adjusted_input_4;\n  uint adjusted_input_2;\n  undefined8 result;\n  \n  adjusted_input_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (adjusted_input_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (adjusted_input_2 = input_2 & 0x7fffffff, 0x7ff00000 < (adjusted_input_2 | (-input_1 | input_1) >> 0x1f))) {\n    adjusted_input_4 = FUN_0800015c(input_3,input_4,input_1,input_2);\n    return adjusted_input_4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    adjusted_input_4 = FUN_080059f0();\n    return adjusted_input_4;\n  }\n  shifted_bits = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((adjusted_input_2 | input_1) == 0) {\n    if (shifted_bits == 2) {\n      return 0x54442d18;\n    }\n    if (shifted_bits != 3) {\n      return input_1;\n    }\n  }\n  else if ((adjusted_input_4 | input_3) != 0) {\n    if (adjusted_input_4 == 0x7ff00000) {\n      if (adjusted_input_2 == 0x7ff00000) {\n        if (shifted_bits == 2) {\n          return 0x7f3321d2;\n        }\n        if (shifted_bits == 3) {\n          return 0x7f3321d2;\n        }\n        if (shifted_bits == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (shifted_bits == 2) {\n        return 0x54442d18;\n      }\n      if (shifted_bits != 3) {\n        if (shifted_bits != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (adjusted_input_2 != 0x7ff00000) {\n      difference = (int)(adjusted_input_2 - adjusted_input_4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          FUN_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          result = FUN_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      upper_bits = (undefined4)((ulonglong)result >> 0x20);\n      adjusted_input_4 = (uint)result;\n      if (shifted_bits == 1) {\n        return adjusted_input_4;\n      }\n      if (shifted_bits == 2) {\n        result = FUN_08000158(adjusted_input_4,upper_bits,0x33145c07,0x3ca1a626);\n        adjusted_input_4 = FUN_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return adjusted_input_4;\n      }\n      if (shifted_bits != 0) {\n        result = FUN_08000158(adjusted_input_4,upper_bits,0x33145c07,0x3ca1a626);\n        adjusted_input_4 = FUN_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return adjusted_input_4;\n      }\n      return adjusted_input_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "upper_bits",
                "uVar3": "shifted_bits",
                "uVar4": "adjusted_input_4",
                "uVar5": "adjusted_input_2",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculateResult_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp4 | (-input3 | input3) >> 0x1f)) ||\n     (temp5 = input2 & 0x7fffffff, 0x7ff00000 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = FUN_0800015c(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = FUN_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else if ((temp4 | input3) != 0) {\n    if (temp4 == 0x7ff00000) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp3 != 3) {\n        if (temp3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp5 != 0x7ff00000) {\n      temp1 = (int)(temp5 - temp4) >> 0x14;\n      if (temp1 < 0x3d) {\n        if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n          temp6 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp6 = FUN_080059f0();\n        }\n      }\n      else {\n        temp6 = 0x3ff921fb54442d18;\n      }\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp4 = (uint)temp6;\n      if (temp3 == 1) {\n        return temp4;\n      }\n      if (temp3 == 2) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        return temp4;\n      }\n      if (temp3 != 0) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n        return temp4;\n      }\n      return temp4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "compute_result_080059f0",
            "code": "\nundefined8 computeResult_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp7;\n  int resultType;\n  undefined8 temp8;\n  undefined8 temp9;\n  \n  temp9 = CONCAT44(input2,input1);\n  temp7 = input2 & 0x7fffffff;\n  if (temp7 < 0x44100000) {\n    if (temp7 < 0x3fdc0000) {\n      if (temp7 < 0x3e200000) {\n        temp8 = FUN_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        resultType = FUN_080009e8((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        if (resultType != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      resultType = -1;\n    }\n    else {\n      temp9 = FUNC_08005d0c();\n      temp4 = (undefined4)((ulonglong)temp9 >> 0x20);\n      temp1 = (undefined4)temp9;\n      if (temp7 < 0x3ff30000) {\n        if (temp7 < 0x3fe60000) {\n          temp9 = FUN_0800015c(temp1,temp4,temp1,temp4);\n          temp9 = FUN_08000158((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,0x3ff00000);\n          temp8 = FUN_0800015c(temp1,temp4,0,0x40000000);\n          temp9 = FUN_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                (int)((ulonglong)temp8 >> 0x20));\n          resultType = 0;\n        }\n        else {\n          temp9 = FUN_08000158(temp1,temp4,0,0x3ff00000);\n          temp8 = FUN_0800015c(temp1,temp4,0,0x3ff00000);\n          temp9 = FUN_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                (int)((ulonglong)temp8 >> 0x20));\n          resultType = 1;\n        }\n      }\n      else if (temp7 < 0x40038000) {\n        temp9 = FUN_08000158(temp1,temp4,0,0x3ff80000);\n        temp8 = FUN_080004c8(temp1,temp4,0,0x3ff80000);\n        temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        temp9 = FUN_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                              (int)((ulonglong)temp8 >> 0x20));\n        resultType = 2;\n      }\n      else {\n        temp9 = FUN_0800071c(0,0xbff00000,temp1,temp4);\n        resultType = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp5 = (undefined4)temp9;\n    temp9 = FUN_080004c8(temp5,temp6,temp5,temp6);\n    temp2 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp1 = (undefined4)temp9;\n    temp9 = FUN_080004c8(temp1,temp2,temp1,temp2);\n    temp3 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp4 = (undefined4)temp9;\n    temp9 = FUN_080004c8(temp4,temp3,0xe322da11,0x3f90ad3a);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x920083ff,0x3fc24924);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x5555550d,0x3fd55555);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp1,temp2);\n    temp8 = FUN_080004c8(temp4,temp3,0x2c6a6c2f,0xbfa2b444);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                          (int)((ulonglong)temp8 >> 0x20));\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp5,temp6);\n    temp1 = (undefined4)((ulonglong)temp9 >> 0x20);\n    if (resultType == -1) {\n      temp9 = FUN_08000158(temp5,temp6,(int)temp9,temp1);\n      return temp9;\n    }\n    resultType = resultType * 8;\n    temp9 = FUN_08000158((int)temp9,temp1,*(undefined4 *)(&UNK_08009ee8 + resultType),\n                          *(undefined4 *)(&UNK_08009eec + resultType));\n    temp9 = FUN_08000158((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp5,temp6);\n    temp9 = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + resultType),\n                          *(undefined4 *)(&UNK_08009ecc + resultType),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)temp9 >> 0x20) + -0x80000000,(int)temp9);\n    }\n  }\n  else {\n    if ((temp7 < 0x7ff00001) && ((temp7 != 0x7ff00000 || (input1 == 0)))) {\n      temp1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        temp1 = 0x3ff921fb;\n      }\n      return CONCAT44(temp1,0x54442d18);\n    }\n    temp9 = FUN_0800015c(input1,input2,input1,input2,input4);\n  }\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "compute_result_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "resultType",
                "uVar9": "temp8",
                "uVar10": "temp9"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_global_variable_08005d14",
            "code": "\nundefined4 get_global_variable_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_global_variable_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionPointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_08005d68",
            "code": "\nvoid fillMemory_08005d68(undefined4 *dest,undefined pattern,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  uint remainingLength;\n  undefined4 fillPattern;\n  bool isRemainingZero;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingLength = length - 1;\n    destPtr = dest;\n    if (length == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = pattern;\n      length = remainingLength;\n      if (((uint)dest & 3) == 0) break;\n      isRemainingZero = remainingLength == 0;\n      remainingLength = remainingLength - 1;\n      destPtr = dest;\n      if (isRemainingZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    fillPattern = CONCAT22(CONCAT11(pattern,pattern),CONCAT11(pattern,pattern));\n    remainingLength = length;\n    destPtr = dest;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      destPtr = dest + 4;\n      do {\n        destPtr[-4] = fillPattern;\n        destPtr[-3] = fillPattern;\n        destPtr[-2] = fillPattern;\n        destPtr[-1] = fillPattern;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingLength & 0xfffffff0) + 0x20));\n      length = length & 0xf;\n      dest = dest + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      destPtr = dest;\n      if (length < 4) goto LAB_08005de4;\n    }\n    do {\n      length = length - 4;\n      *dest = fillPattern;\n      dest = dest + 1;\n    } while (3 < length);\n    dest = (undefined4 *)((int)destPtr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_08005de4:\n  if (length != 0) {\n    destPtr = dest;\n    do {\n      tempPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = pattern;\n      destPtr = tempPtr;\n    } while ((undefined4 *)(length + (int)dest) != tempPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "param_1": "dest",
                "param_2": "pattern",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "tempPtr",
                "uVar3": "remainingLength",
                "uVar4": "fillPattern",
                "bVar5": "isRemainingZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_pointer_08005dfc",
            "code": "\nvoid initializePointer_08005dfc(undefined *pointer,undefined4 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined *localPointerArray [2];\n  undefined4 localValue1;\n  undefined4 localValue2;\n  undefined *localPointer;\n  undefined4 localMaxValue;\n  undefined4 param3;\n  undefined4 param4;\n  \n  localMaxValue = 0x7fffffff;\n  localValue1 = 0x7fffffff;\n  localValue2 = 0xffff0208;\n  localPointerArray[0] = pointer;\n  localPointer = pointer;\n  param3 = param3;\n  param4 = param4;\n  FUNC_08005e9c(DAT_2000001c,localPointerArray,value,&param3);\n  *localPointerArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_pointer_08005dfc",
                "param_1": "pointer",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "localPointerArray",
                "local_78": "localValue1",
                "uStack_74": "localValue2",
                "local_70": "localPointer",
                "local_6c": "localMaxValue",
                "uStack_8": "param3",
                "uStack_4": "param4"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_offset_08005e40",
            "code": "\nint calculateOffset_08005e40(uint inputValue)\n\n{\n  int offset;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(inputValue & 0xfffffffc);\n  offset = -(inputValue & 3);\n  value = *ptr;\n  if ((inputValue & 3) != 0) {\n    value = value | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    offset = offset + 4;\n  }\n  return offset + (0x1fU - LZCOUNT(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_offset_08005e40",
                "param_1": "inputValue",
                "iVar1": "offset",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_080078c0",
            "code": "\nuint calculateDivision_080078c0(int numerator,int denominator)\n\n{\n  uint quotient;\n  uint *numeratorIter;\n  int carry;\n  int denominatorSize;\n  int numeratorSize;\n  uint finalQuotient;\n  uint *denominatorIter;\n  uint *numeratorDigits;\n  uint *denominatorDigits;\n  uint digitProduct;\n  uint *currentDenominatorDigit;\n  uint *nextDenominatorDigit;\n  \n  denominatorSize = *(int *)(denominator + 0x10);\n  if (*(int *)(numerator + 0x10) < denominatorSize) {\n    return 0;\n  }\n  numeratorSize = denominatorSize + -1;\n  denominatorIter = (uint *)(denominator + 0x14);\n  numeratorDigits = (uint *)(numerator + 0x14);\n  finalQuotient = numeratorDigits[numeratorSize] / (denominatorIter[numeratorSize] + 1);\n  denominatorDigits = denominatorIter + numeratorSize;\n  if (finalQuotient != 0) {\n    quotient = 0;\n    carry = 0;\n    numeratorIter = numeratorDigits;\n    currentDenominatorDigit = denominatorIter;\n    do {\n      nextDenominatorDigit = currentDenominatorDigit + 1;\n      quotient = finalQuotient * (*currentDenominatorDigit & 0xffff) + quotient;\n      digitProduct = finalQuotient * (*currentDenominatorDigit >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*numeratorIter & 0xffff);\n      carry = ((*numeratorIter >> 0x10) - (digitProduct & 0xffff)) + ((int)quotient >> 0x10);\n      *numeratorIter = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = digitProduct >> 0x10;\n      numeratorIter = numeratorIter + 1;\n      currentDenominatorDigit = nextDenominatorDigit;\n    } while (nextDenominatorDigit <= denominatorDigits);\n    if (numeratorDigits[numeratorSize] == 0) {\n      if ((numeratorDigits < numeratorDigits + denominatorSize + -2) && (numeratorDigits[denominatorSize + -2] == 0)) {\n        numeratorIter = numeratorDigits + denominatorSize + -3;\n        do {\n          numeratorSize = numeratorSize + -1;\n          if (numeratorIter <= numeratorDigits) break;\n          quotient = *numeratorIter;\n          numeratorIter = numeratorIter + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = numeratorSize;\n    }\n  }\n  denominatorSize = FUN_080094f8();\n  if (-1 < denominatorSize) {\n    denominatorSize = 0;\n    finalQuotient = finalQuotient + 1;\n    numeratorIter = numeratorDigits;\n    do {\n      currentDenominatorDigit = denominatorIter + 1;\n      quotient = (denominatorSize - (*denominatorIter & 0xffff)) + (*numeratorIter & 0xffff);\n      denominatorSize = ((*numeratorIter >> 0x10) - (*denominatorIter >> 0x10)) + ((int)quotient >> 0x10);\n      *numeratorIter = quotient & 0xffff | denominatorSize * 0x10000;\n      denominatorSize = denominatorSize >> 0x10;\n      numeratorIter = numeratorIter + 1;\n      denominatorIter = currentDenominatorDigit;\n    } while (currentDenominatorDigit <= denominatorDigits);\n    if (numeratorDigits[numeratorSize] == 0) {\n      if ((numeratorDigits < numeratorDigits + numeratorSize + -1) && (numeratorDigits[numeratorSize + -1] == 0)) {\n        denominatorIter = numeratorDigits + numeratorSize + -2;\n        do {\n          numeratorSize = numeratorSize + -1;\n          if (denominatorIter <= numeratorDigits) break;\n          quotient = *denominatorIter;\n          denominatorIter = denominatorIter + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = numeratorSize;\n    }\n  }\n  return finalQuotient;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "quotient",
                "puVar2": "numeratorIter",
                "iVar3": "carry",
                "iVar4": "denominatorSize",
                "iVar5": "numeratorSize",
                "uVar6": "finalQuotient",
                "puVar7": "denominatorIter",
                "puVar8": "numeratorDigits",
                "puVar9": "denominatorDigits",
                "uVar10": "digitProduct",
                "puVar11": "currentDenominatorDigit",
                "puVar12": "nextDenominatorDigit"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_float_to_string_080079e8",
            "code": "\nchar * convertFloatToString_080079e8(int value,undefined4 param1,uint param2,uint param3,uint param4,\n                   uint param5,int *intPointer,uint *uintPointer,char **charPointer)\n\n{\n  bool isParam5LessThan6;\n  bool isLocal74LessThan23;\n  bool isLessThan6;\n  char character;\n  byte byteValue;\n  undefined4 tempVariable6;\n  int intVariable7;\n  int intVariable8;\n  int intVariable9;\n  char *resultString;\n  uint tempVariable11;\n  undefined4 tempVariable12;\n  undefined4 tempVariable13;\n  int intVariable14;\n  int intVariable15;\n  undefined4 tempVariable16;\n  uint tempVariable17;\n  uint tempVariable18;\n  int intVariable19;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 tempVariable23;\n  int intVariable24;\n  bool isLocal74LessThan235;\n  undefined8 tempVariable26;\n  undefined8 tempVariable27;\n  undefined8 tempVariable28;\n  uint localVariable80;\n  uint localVariable7C;\n  uint localVariable74;\n  int localVariable70;\n  uint localVariable68;\n  int localVariable60;\n  int localVariable5C;\n  uint localVariable58;\n  uint localVariable48;\n  uint uStackVariable44;\n  uint localVariable38;\n  uint localVariable34;\n  int localVariable30;\n  int localVariable2C [2];\n  \n  intVariable14 = *(int *)(value + 0x40);\n  if (intVariable14 != 0) {\n    tempVariable18 = *(uint *)(value + 0x44);\n    *(uint *)(intVariable14 + 4) = tempVariable18;\n    *(int *)(intVariable14 + 8) = 1 << (tempVariable18 & 0xff);\n    FUN_0800910c(value,intVariable14);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  isLocal74LessThan235 = (int)param3 < 0;\n  tempVariable18 = param3;\n  if (isLocal74LessThan235) {\n    tempVariable18 = param3 & 0x7fffffff;\n  }\n  *uintPointer = (uint)isLocal74LessThan235;\n  localVariable7C = param3;\n  if (isLocal74LessThan235) {\n    localVariable7C = tempVariable18;\n  }\n  tempVariable17 = localVariable7C;\n  if ((~tempVariable18 & 0x7ff00000) == 0) {\n    *intPointer = 9999;\n    if ((param2 == 0) && ((tempVariable18 & 0xfffff) == 0)) {\n      resultString = \"Infinity\";\n      if (charPointer == (char **)0x0) {\n        return resultString;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      resultString = \"NaN\";\n      if (charPointer == (char **)0x0) {\n        return resultString;\n      }\n      pcVar21 = \"\";\n    }\n    *charPointer = pcVar21;\n    return resultString;\n  }\n  tempVariable26 = FUN_08000998(param2,localVariable7C,0,0);\n  if ((int)tempVariable26 != 0) {\n    *intPointer = 1;\n    if (charPointer != (char **)0x0) {\n      *charPointer = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  tempVariable6 = FUN_08009630(value,(int)((ulonglong)tempVariable26 >> 0x20),param2,localVariable7C,localVariable2C,&localVariable30)\n  ;\n  intVariable14 = localVariable30;\n  if (tempVariable18 >> 0x14 == 0) {\n    intVariable19 = localVariable2C[0] + localVariable30;\n    intVariable15 = intVariable19 + 0x432;\n    if (intVariable15 < 0x21) {\n      tempVariable18 = param2 << (0x20U - intVariable15 & 0xff);\n    }\n    else {\n      tempVariable18 = param2 >> (intVariable19 + 0x412U & 0xff) | tempVariable18 << (0x40U - intVariable15 & 0xff);\n    }\n    tempVariable26 = FUN_080003d4(tempVariable18);\n    intVariable19 = intVariable19 + -1;\n    isLocal74LessThan235 = true;\n    tempVariable11 = (int)((ulonglong)tempVariable26 >> 0x20) + 0xfe100000;\n    tempVariable18 = (uint)tempVariable26;\n  }\n  else {\n    intVariable19 = (tempVariable18 >> 0x14) - 0x3ff;\n    tempVariable11 = localVariable7C & 0xfffff | 0x3ff00000;\n    isLocal74LessThan235 = false;\n    tempVariable18 = param2;\n  }\n  tempVariable26 = FUN_08000158(tempVariable18,tempVariable11,0,0x3ff80000);\n  tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0x636f4361,0x3fd287a7);\n  tempVariable26 = FUN_0800015c((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  tempVariable27 = FUN_080003f4(intVariable19);\n  tempVariable27 = FUN_080004c8((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),0x509f79fb,0x3fd34413);\n  tempVariable26 = FUN_0800015c((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),(int)tempVariable27,\n                        (int)((ulonglong)tempVariable27 >> 0x20));\n  tempVariable13 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n  localVariable74 = FUN_0800119c();\n  intVariable15 = FUN_080009ac((int)tempVariable26,tempVariable13,0,0);\n  if (intVariable15 != 0) {\n    tempVariable27 = FUN_080003f4(localVariable74);\n    intVariable15 = FUN_08000998((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),(int)tempVariable26,tempVariable13);\n    if (intVariable15 == 0) {\n      localVariable74 = localVariable74 - 1;\n    }\n  }\n  if (localVariable74 < 0x17) {\n    intVariable15 = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + localVariable74 * 8),\n                          *(undefined4 *)(&DAT_08009fac + localVariable74 * 8),param2,localVariable7C);\n    if (intVariable15 == 0) {\n      isLocal74LessThan23 = false;\n    }\n    else {\n      localVariable74 = localVariable74 - 1;\n      isLocal74LessThan23 = false;\n    }\n  }\n  else {\n    isLocal74LessThan23 = true;\n  }\n  intVariable15 = (intVariable14 - intVariable19) + -1;\n  if (intVariable15 < 0) {\n    localVariable70 = 1 - (intVariable14 - intVariable19);\n    intVariable15 = 0;\n  }\n  else {\n    localVariable70 = 0;\n  }\n  if ((int)localVariable74 < 0) {\n    localVariable58 = 0;\n    localVariable70 = localVariable70 - localVariable74;\n    localVariable5C = -localVariable74;\n  }\n  else {\n    intVariable15 = intVariable15 + localVariable74;\n    localVariable58 = localVariable74;\n    localVariable5C = 0;\n  }\n  if (9 < param4) {\n    localVariable38 = 0xffffffff;\n    isParam5LessThan6 = true;\n    localVariable68 = 0xffffffff;\n    isLessThan6 = true;\n    param4 = 0;\n    param5 = 0;\n    goto LAB_08007c24;\n  }\n  isParam5LessThan6 = (int)param4 < 6;\n  if (!isParam5LessThan6) {\n    param4 = param4 - 4;\n  }\n  switch(param4) {\n  case 2:\n    isLessThan6 = false;\n    break;\n  case 3:\n    isLessThan6 = false;\n    goto LAB_08008300;\n  case 4:\n    isLessThan6 = true;\n    break;\n  case 5:\n    isLessThan6 = true;\nLAB_08008300:\n    localVariable38 = localVariable74 + param5;\n    localVariable68 = localVariable38 + 1;\n    tempVariable18 = localVariable68;\n    if ((int)localVariable68 < 1) {\n      tempVariable18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    resultString = (char *)FUN_080090c0(value,0);\n    localVariable38 = 0xffffffff;\n    localVariable68 = 0xffffffff;\n    param5 = 0;\n    *(char **)(value + 0x40) = resultString;\n    isLessThan6 = true;\n    goto LAB_08007e36;\n  }\n  if ((int)param5 < 1) {\n    localVariable38 = 1;\n    param5 = 1;\n    localVariable68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    tempVariable11 = localVariable38;\n  }\n  else {\n    localVariable38 = param5;\n    localVariable68 = param5;\n    tempVariable18 = param5;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    tempVariable11 = localVariable68;\n    if (0x17 < (int)tempVariable18) {\n      intVariable19 = 4;\n      intVariable14 = 1;\n      do {\n        intVariable7 = intVariable14;\n        intVariable19 = intVariable19 * 2;\n        intVariable14 = intVariable7 + 1;\n      } while (intVariable19 + 0x14U <= tempVariable18);\n      *(int *)(value + 0x44) = intVariable7;\n    }\n  }\n  resultString = (char *)FUN_080090c0(value);\n  *(char **)(value + 0x40) = resultString;\n  if ((tempVariable11 < 0xf) && (isParam5LessThan6)) {\n    if ((int)localVariable74 < 1) {\n      if (localVariable74 == 0) {\n        intVariable14 = 2;\n        localVariable80 = param2;\n      }\n      else {\n        intVariable14 = (-localVariable74 & 0xf) * 8;\n        tempVariable26 = FUN_080004c8(param2,localVariable7C,*(undefined4 *)(&DAT_08009fa8 + intVariable14),\n                              *(undefined4 *)(&DAT_08009fac + intVariable14));\n        localVariable7C = (uint)((ulonglong)tempVariable26 >> 0x20);\n        localVariable80 = (uint)tempVariable26;\n        intVariable19 = (int)-localVariable74 >> 4;\n        if (intVariable19 == 0) {\n          intVariable14 = 2;\n        }\n        else {\n          isParam5LessThan6 = false;\n          intVariable14 = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (intVariable19 << 0x1f < 0) {\n              tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              isParam5LessThan6 = true;\n              intVariable14 = intVariable14 + 1;\n            }\n            intVariable19 = intVariable19 >> 1;\n            puVar22 = puVar22 + 2;\n          } while (intVariable19 != 0);\n          if (isParam5LessThan6) {\n            localVariable80 = (uint)tempVariable26;\n            localVariable7C = (uint)((ulonglong)tempVariable26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      tempVariable18 = (int)localVariable74 >> 4;\n      tempVariable27 = *(undefined8 *)(&DAT_08009fa8 + (localVariable74 & 0xf) * 8);\n      tempVariable26 = *(undefined8 *)(&DAT_08009fa8 + (localVariable74 & 0xf) * 8);\n      if ((int)(tempVariable18 << 0x1b) < 0) {\n        tempVariable28 = FUN_0800071c(param2,localVariable7C,0x7f73bf3c,0x75154fdd);\n        uStackVariable44 = (uint)((ulonglong)tempVariable28 >> 0x20);\n        localVariable48 = (uint)tempVariable28;\n        intVariable14 = 3;\n        tempVariable18 = tempVariable18 & 0xf;\n      }\n      else {\n        intVariable14 = 2;\n        uStackVariable44 = localVariable7C;\n        localVariable48 = param2;\n      }\n      if (tempVariable18 != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(tempVariable18 << 0x1f) < 0) {\n            tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),*puVar22,puVar22[1]);\n            intVariable14 = intVariable14 + 1;\n          }\n          tempVariable18 = (int)tempVariable18 >> 1;\n          puVar22 = puVar22 + 2;\n          tempVariable27 = tempVariable26;\n        } while (tempVariable18 != 0);\n      }\n      localVariable7C = (uint)((ulonglong)tempVariable27 >> 0x20);\n      localVariable80 = (uint)tempVariable27;\n      tempVariable26 = FUN_0800071c(localVariable48,uStackVariable44,localVariable80,localVariable7C);\n      localVariable80 = (uint)tempVariable26;\n      localVariable7C = (uint)((ulonglong)tempVariable26 >> 0x20);\n    }\n    tempVariable26 = CONCAT44(localVariable7C,localVariable80);\n    if ((isLocal74LessThan23) && (intVariable19 = FUN_080009ac(localVariable80,localVariable7C,0,0x3ff00000), intVariable19 != 0)) {\n      if (localVariable68 == 0) {\n        tempVariable26 = FUN_080003f4(intVariable14);\n        tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),localVariable80,localVariable7C);\n        tempVariable26 = FUN_0800015c((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0x401c0000);\n        tempVariable13 = (undefined4)tempVariable26;\n        intVariable14 = (int)((ulonglong)tempVariable26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)localVariable38) {\n        tempVariable26 = FUN_080004c8(localVariable80,localVariable7C,0,0x40240000);\n        tempVariable27 = FUN_080003f4(intVariable14 + 1);\n        tempVariable27 = FUN_080004c8((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),(int)tempVariable26,\n                              (int)((ulonglong)tempVariable26 >> 0x20));\n        tempVariable27 = FUN_0800015c((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),0,0x401c0000);\n        tempVariable13 = (undefined4)tempVariable27;\n        localVariable48 = localVariable38;\n        localVariable34 = localVariable74 - 1;\n        intVariable14 = (int)((ulonglong)tempVariable27 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    tempVariable27 = FUN_080003f4(intVariable14);\n    tempVariable27 = FUN_080004c8((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),localVariable80,localVariable7C);\n    tempVariable27 = FUN_0800015c((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),0,0x401c0000);\n    tempVariable13 = (undefined4)tempVariable27;\n    intVariable14 = (int)((ulonglong)tempVariable27 >> 0x20) + -0x3400000;\n    if (localVariable68 != 0) {\n      localVariable34 = localVariable74;\n      localVariable48 = localVariable68;\nLAB_08007cfa:\n      localVariable7C = (uint)((ulonglong)tempVariable26 >> 0x20);\n      localVariable80 = (uint)tempVariable26;\n      character = FUN_0800119c(localVariable80,localVariable7C);\n      character = character + '0';\n      tempVariable16 = (&DAT_08009fa0)[localVariable48 * 2];\n      tempVariable12 = (&DAT_08009fa4)[localVariable48 * 2];\n      tempVariable26 = FUN_080003f4();\n      tempVariable26 = FUN_08000158(localVariable80,localVariable7C,(int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20));\n      tempVariable23 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n      pcVar21 = resultString + 1;\n      if (isLessThan6) {\n        tempVariable27 = FUN_0800071c(0,0x3fe00000,tempVariable16,tempVariable12);\n        tempVariable27 = FUN_08000158((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),tempVariable13,intVariable14);\n        tempVariable13 = (undefined4)((ulonglong)tempVariable27 >> 0x20);\n        *resultString = character;\n        intVariable14 = FUN_080009e8((int)tempVariable27,tempVariable13,(int)tempVariable26,tempVariable23);\n        if (intVariable14 != 0) {\nLAB_08008784:\n          localVariable74 = localVariable34;\n          goto LAB_08008294;\n        }\n        tempVariable28 = FUN_08000158(0,0x3ff00000,(int)tempVariable26,tempVariable23);\n        intVariable14 = FUN_080009e8((int)tempVariable27,tempVariable13,(int)tempVariable28,(int)((ulonglong)tempVariable28 >> 0x20));\n        if (intVariable14 == 0) {\n          if (localVariable48 != 1) {\n            pcVar20 = pcVar21;\n            do {\n              tempVariable27 = FUN_080004c8((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),0,0x40240000);\n              tempVariable13 = (undefined4)((ulonglong)tempVariable27 >> 0x20);\n              tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0x40240000);\n              character = FUN_0800119c();\n              tempVariable28 = FUN_080003f4();\n              tempVariable26 = FUN_08000158((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),(int)tempVariable28,\n                                    (int)((ulonglong)tempVariable28 >> 0x20));\n              tempVariable16 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n              character = character + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = character;\n              intVariable14 = FUN_080009ac((int)tempVariable26,tempVariable16,(int)tempVariable27,tempVariable13);\n              if (intVariable14 != 0) {\n                localVariable74 = localVariable34;\n                goto LAB_08008294;\n              }\n              tempVariable28 = FUN_08000158(0,0x3ff00000,(int)tempVariable26,tempVariable16);\n              intVariable14 = FUN_080009ac((int)tempVariable28,(int)((ulonglong)tempVariable28 >> 0x20),(int)tempVariable27,tempVariable13)\n              ;\n              if (intVariable14 != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != resultString + localVariable48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        localVariable74 = localVariable34;\n      }\n      else {\n        tempVariable27 = FUN_080004c8(tempVariable13,intVariable14,tempVariable16,tempVariable12);\n        tempVariable13 = (undefined4)((ulonglong)tempVariable27 >> 0x20);\n        *resultString = character;\n        if (localVariable48 != 1) {\n          pcVar20 = pcVar21;\n          do {\n            tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0x40240000);\n            character = FUN_0800119c();\n            tempVariable28 = FUN_080003f4();\n            tempVariable26 = FUN_08000158((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),(int)tempVariable28,\n                                  (int)((ulonglong)tempVariable28 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = character + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != resultString + localVariable48);\n        }\n        tempVariable16 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n        tempVariable28 = FUN_0800015c((int)tempVariable27,tempVariable13,0,0x3fe00000);\n        intVariable14 = FUN_080009ac((int)tempVariable28,(int)((ulonglong)tempVariable28 >> 0x20),(int)tempVariable26,tempVariable16);\n        if (intVariable14 == 0) {\n          tempVariable27 = FUN_08000158(0,0x3fe00000,(int)tempVariable27,tempVariable13);\n          intVariable14 = FUN_080009e8((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),(int)tempVariable26,tempVariable16);\n          pcVar20 = pcVar21;\n          if (intVariable14 == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        localVariable74 = localVariable34;\n        character = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    tempVariable26 = FUN_08000158(localVariable80,localVariable7C,0,0x40140000);\n    tempVariable16 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n    intVariable19 = FUN_080009e8((int)tempVariable26,tempVariable16,tempVariable13,intVariable14);\n    if (intVariable19 == 0) {\n      intVariable14 = FUN_080009ac((int)tempVariable26,tempVariable16,tempVariable13,intVariable14 + -0x80000000);\n      if (intVariable14 == 0) goto LAB_08007e36;\n      intVariable19 = 0;\n      intVariable14 = 0;\n      pcVar21 = resultString;\n      goto LAB_080084f0;\n    }\n    intVariable15 = 0;\n    intVariable7 = 0;\nLAB_08008406:\n    *resultString = '1';\n    localVariable74 = localVariable74 + 1;\n    pcVar21 = resultString + 1;\n    intVariable19 = intVariable7;\n    intVariable14 = intVariable15;\nLAB_08008416:\n    FUN_0800910c(value,intVariable14);\n    if (intVariable19 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = resultString;\n    if ((-1 < localVariable2C[0]) && ((int)localVariable74 < 0xf)) {\n      tempVariable13 = *(undefined4 *)(&DAT_08009fa8 + localVariable74 * 8);\n      tempVariable16 = *(undefined4 *)(&DAT_08009fac + localVariable74 * 8);\n      if ((-1 < (int)param5) || (0 < (int)localVariable68)) {\n        FUN_0800071c(param2,tempVariable17,tempVariable13,tempVariable16);\n        byteValue = FUN_0800119c();\n        tempVariable26 = FUN_080003f4();\n        tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),tempVariable13,tempVariable16);\n        tempVariable26 = FUN_08000158(param2,tempVariable17,(int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20));\n        *resultString = byteValue + 0x30;\n        pcVar21 = resultString + 1;\n        if (localVariable68 != 1) {\n          tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0x40240000);\n          intVariable14 = FUN_08000998((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0);\n          while (intVariable14 == 0) {\n            tempVariable23 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n            FUN_0800071c((int)tempVariable26,tempVariable23,tempVariable13,tempVariable16);\n            byteValue = FUN_0800119c();\n            tempVariable27 = FUN_080003f4();\n            tempVariable27 = FUN_080004c8((int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20),tempVariable13,tempVariable16);\n            tempVariable26 = FUN_08000158((int)tempVariable26,tempVariable23,(int)tempVariable27,(int)((ulonglong)tempVariable27 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = byteValue + 0x30;\n            pcVar21 = pcVar20;\n            if (localVariable68 == (int)pcVar20 - (int)resultString) goto LAB_08007f3a;\n            tempVariable26 = FUN_080004c8((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0x40240000);\n            intVariable14 = FUN_08000998((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        tempVariable26 = FUN_0800015c((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20));\n        tempVariable23 = (undefined4)((ulonglong)tempVariable26 >> 0x20);\n        intVariable14 = FUN_080009e8((int)tempVariable26,tempVariable23,tempVariable13,tempVariable16);\n        if ((intVariable14 == 0) &&\n           ((intVariable14 = FUN_08000998((int)tempVariable26,tempVariable23,tempVariable13,tempVariable16), intVariable14 == 0 ||\n            ((byteValue & 1) == 0)))) goto LAB_08008294;\n        character = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, character == '9') {\n          if (resultString == pcVar20) {\n            *resultString = '0';\n            character = pcVar21[-1];\n            localVariable74 = localVariable74 + 1;\n            pcVar20 = resultString;\n            break;\n          }\n          character = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = character + '\\x01';\n        goto LAB_08008294;\n      }\n      if (localVariable68 == 0) {\n        tempVariable26 = FUN_080004c8(tempVariable13,tempVariable16,0,0x40140000);\n        intVariable9 = FUN_080009d4((int)tempVariable26,(int)((ulonglong)tempVariable26 >> 0x20),param2,tempVariable17);\n        intVariable19 = 0;\n        intVariable15 = 0;\n        intVariable7 = 0;\n        intVariable14 = 0;\n        if (intVariable9 == 0) goto LAB_08008406;\n      }\n      else {\n        intVariable19 = 0;\n        intVariable14 = 0;\n      }\nLAB_080084f0:\n      localVariable74 = ~param5;\n      resultString = pcVar21;\n      goto LAB_08008416;\n    }\n    intVariable14 = localVariable5C;\n    if (isLessThan6) {\n      if ((int)param4 < 2) {\n        if (isLocal74LessThan235) {\n          localVariable60 = localVariable70;\n          localVariable70 = localVariable70 + localVariable2C[0] + 0x433;\n          intVariable15 = intVariable15 + localVariable2C[0] + 0x433;\n        }\n        else {\n          localVariable60 = localVariable70;\n          localVariable70 = localVariable70 + (0x36 - localVariable30);\n          intVariable15 = intVariable15 + (0x36 - localVariable30);\n        }\n      }\n      else {\n        intVariable19 = localVariable68 - 1;\n        if (localVariable5C < intVariable19) {\n          localVariable58 = localVariable58 + (intVariable19 - localVariable5C);\n          intVariable14 = 0;\n          localVariable5C = intVariable19;\n        }\n        else {\n          intVariable14 = localVariable5C - intVariable19;\n        }\n        if ((int)localVariable68 < 0) {\n          localVariable60 = localVariable70 - localVariable68;\n        }\n        else {\n          intVariable15 = intVariable15 + localVariable68;\n          localVariable60 = localVariable70;\n          localVariable70 = localVariable70 + localVariable68;\n        }\n      }\n      intVariable19 = FUN_08009244(value,1);\n    }\n    else {\n      localVariable60 = localVariable70;\n      intVariable19 = 0;\n    }\n    if ((0 < localVariable60) && (0 < intVariable15)) {\n      intVariable7 = localVariable60;\n      if (intVariable15 <= localVariable60) {\n        intVariable7 = intVariable15;\n      }\n      intVariable15 = intVariable15 - intVariable7;\n      localVariable70 = localVariable70 - intVariable7;\n      localVariable60 = localVariable60 - intVariable7;\n    }\n    if (localVariable5C != 0) {\n      if (isLessThan6) {\n        tempVariable13 = tempVariable6;\n        if (intVariable14 != 0) {\n          intVariable19 = FUN_080093a4(value,intVariable19,intVariable14);\n          tempVariable13 = FUN_08009258(value,intVariable19,tempVariable6);\n          FUN_0800910c(value,tempVariable6);\n          tempVariable6 = tempVariable13;\n          if (localVariable5C - intVariable14 == 0) goto LAB_08008062;\n        }\n        tempVariable6 = FUN_080093a4(value,tempVariable13,localVariable5C - intVariable14);\n      }\n      else {\n        tempVariable6 = FUN_080093a4(value,tempVariable6,localVariable5C);\n      }\n    }\nLAB_08008062:\n    intVariable14 = FUN_08009244(value,1);\n    if (localVariable58 == 0) {\n      if (((int)param4 < 2) && (param2 == 0)) {\nLAB_0800835a:\n        if ((tempVariable17 & 0xfffff) == 0) {\n          tempVariable17 = tempVariable17 & 0x7ff00000;\n          if (tempVariable17 != 0) {\n            intVariable15 = intVariable15 + 1;\n            localVariable70 = localVariable70 + 1;\n            tempVariable17 = 1;\n          }\n        }\n        else {\n          tempVariable17 = 0;\n        }\n        isLocal74LessThan235 = localVariable58 != 0;\n        tempVariable18 = param2;\n        localVariable58 = tempVariable17;\n        if (isLocal74LessThan235) goto LAB_080082d4;\n      }\n      intVariable7 = 1;\n    }\n    else {\n      tempVariable26 = FUN_080093a4(value,intVariable14);\n      intVariable14 = (int)tempVariable26;\n      if (((int)param4 < 2) && (param2 == 0)) goto LAB_0800835a;\n      localVariable58 = 0;\n      tempVariable18 = (uint)((ulonglong)tempVariable26 >> 0x20);\nLAB_080082d4:\n      intVariable7 = FUN_080091a4(*(undefined4 *)(intVariable14 + *(int *)(intVariable14 + 0x10) * 4 + 0x10),tempVariable18);\n      intVariable7 = 0x20 - intVariable7;\n    }\n    tempVariable18 = intVariable7 + intVariable15 & 0x1f;\n    if (tempVariable18 == 0) {\n      intVariable7 = 0x1c;\nLAB_08008096:\n      intVariable15 = intVariable15 + intVariable7;\n      localVariable70 = localVariable70 + intVariable7;\n      localVariable60 = localVariable60 + intVariable7;\n    }\n    else {\n      if (4 < (int)(0x20 - tempVariable18)) {\n        intVariable7 = 0x1c - tempVariable18;\n        goto LAB_08008096;\n      }\n      if (0x20 - tempVariable18 != 4) {\n        intVariable7 = 0x3c - tempVariable18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < localVariable70) {\n      tempVariable6 = FUN_08009444(value,tempVariable6,localVariable70);\n    }\n    if (0 < intVariable15) {\n      intVariable14 = FUN_08009444(value,intVariable14,intVariable15);\n    }\n    pcVar20 = resultString;\n    if ((isLocal74LessThan23) && (intVariable15 = FUN_080094f8(tempVariable6,intVariable14), intVariable15 < 0)) {\n      localVariable74 = localVariable74 - 1;\n      tempVariable6 = FUN_08009120(value,tempVariable6,10,0);\n      if (isLessThan6) {\n        intVariable19 = FUN_08009120(value,intVariable19,10,0);\n        if ((0 < (int)localVariable38) || ((int)param4 < 3)) {\n          localVariable68 = localVariable38;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)localVariable38) || ((int)param4 < 3)) {\n        localVariable68 = localVariable38;\n        goto LAB_0800820a;\n      }\n      localVariable68 = localVariable38;\nLAB_080084e8:\n      if (localVariable68 == 0) {\n        intVariable15 = FUN_08009120(value,intVariable14,5);\n        intVariable9 = FUN_080094f8(tempVariable6,intVariable15);\n        intVariable7 = intVariable19;\n        intVariable14 = intVariable15;\n        if (0 < intVariable9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)localVariable68 < 1) && (2 < (int)param4)) goto LAB_080084e8;\n    if (isLessThan6) {\nLAB_080080de:\n      localVariable80 = intVariable19;\n      if (0 < localVariable60) {\n        localVariable80 = FUN_08009444(value,intVariable19,localVariable60);\n      }\n      intVariable19 = localVariable80;\n      if (localVariable58 != 0) {\n        intVariable19 = FUN_080090c0(value,*(undefined4 *)(localVariable80 + 4));\n        FUN_08001084(intVariable19 + 0xc,localVariable80 + 0xc,(*(int *)(localVariable80 + 0x10) + 2) * 4);\n        intVariable19 = FUN_08009444(value,intVariable19,1);\n      }\nLAB_08008108:\n      intVariable15 = FUN_080078c0(tempVariable6,intVariable14);\n      intVariable7 = FUN_080094f8(tempVariable6,localVariable80);\n      intVariable9 = FUN_08009530(value,intVariable14,intVariable19);\n      intVariable24 = intVariable15 + 0x30;\n      if (*(int *)(intVariable9 + 0xc) == 0) {\n        intVariable8 = FUN_080094f8(tempVariable6);\n        FUN_0800910c(value,intVariable9);\n        if ((intVariable8 != 0) || (param4 != 0)) goto LAB_0800815a;\n        if ((param2 & 1) != 0) {\n          intVariable8 = 0;\n          goto LAB_0800815a;\n        }\n        if (intVariable24 != 0x39) {\n          if (0 < intVariable7) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        character = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(value,intVariable9);\n      intVariable8 = 1;\nLAB_0800815a:\n      if ((intVariable7 < 0) || (((intVariable7 == 0 && (param4 == 0)) && ((param2 & 1) == 0)))) {\n        if (0 < intVariable8) {\n          tempVariable6 = FUN_08009444(value,tempVariable6,1);\n          intVariable7 = FUN_080094f8(tempVariable6,intVariable14);\n          if ((0 < intVariable7) || ((intVariable7 == 0 && (intVariable15 << 0x1f < 0)))) {\n            if (intVariable24 == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            intVariable24 = intVariable15 + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)intVariable24;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < intVariable8) {\n        if (intVariable24 == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)intVariable15 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)intVariable24;\n      if (resultString + (localVariable68 - 1) != pcVar20) {\n        tempVariable6 = FUN_08009120(value,tempVariable6,10,0);\n        pcVar20 = pcVar21;\n        if (localVariable80 == intVariable19) {\n          localVariable80 = FUN_08009120(value,localVariable80,10,0);\n          intVariable19 = localVariable80;\n        }\n        else {\n          localVariable80 = FUN_08009120(value,localVariable80,10,0);\n          intVariable19 = FUN_08009120(value,intVariable19,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        intVariable24 = FUN_080078c0(tempVariable6,intVariable14);\n        intVariable24 = intVariable24 + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)intVariable24;\n        if ((int)localVariable68 <= (int)pcVar21 - (int)resultString) break;\n        tempVariable6 = FUN_08009120(value,tempVariable6,10,0);\n        pcVar20 = pcVar21;\n      }\n      localVariable80 = 0;\n    }\n    tempVariable6 = FUN_08009444(value,tempVariable6,1);\n    intVariable15 = FUN_080094f8(tempVariable6,intVariable14);\n    character = pcVar21[-1];\n    if ((0 < intVariable15) || ((intVariable15 == 0 && (intVariable24 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (character != '9') goto code_r0x08008270;\n        if (resultString == pcVar20) {\n          *resultString = '1';\n          localVariable74 = localVariable74 + 1;\n          goto LAB_08008274;\n        }\n        character = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (character == '0') {\n      character = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(value,intVariable14);\n    if (intVariable19 == 0) goto LAB_08008294;\n    if ((localVariable80 != 0) && (localVariable80 != intVariable19)) {\n      FUN_0800910c(value);\n    }\n  }\n  FUN_0800910c(value,intVariable19);\nLAB_08008294:\n  FUN_0800910c(value,tempVariable6);\n  *pcVar21 = '\\0';\n  *intPointer = localVariable74 + 1;\n  if (charPointer == (char **)0x0) {\n    return resultString;\n  }\n  *charPointer = pcVar21;\n  return resultString;\ncode_r0x08008270:\n  *pcVar20 = character + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "param_1": "value",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "intPointer",
                "param_8": "uintPointer",
                "param_9": "charPointer",
                "bVar1": "isParam5LessThan6",
                "bVar2": "isLocal74LessThan23",
                "bVar3": "isLessThan6",
                "cVar4": "character",
                "bVar5": "byteValue",
                "uVar6": "tempVariable6",
                "iVar7": "intVariable7",
                "iVar8": "intVariable8",
                "iVar9": "intVariable9",
                "pcVar10": "resultString",
                "uVar11": "tempVariable11",
                "uVar12": "tempVariable12",
                "uVar13": "tempVariable13",
                "iVar14": "intVariable14",
                "iVar15": "intVariable15",
                "iVar19": "intVariable19",
                "iVar24": "intVariable24",
                "uVar16": "tempVariable16",
                "uVar17": "tempVariable17",
                "uVar18": "tempVariable18",
                "uVar23": "tempVariable23",
                "uVar26": "tempVariable26",
                "uVar27": "tempVariable27",
                "uVar28": "tempVariable28",
                "local_80": "localVariable80",
                "local_7c": "localVariable7C",
                "local_74": "localVariable74",
                "local_70": "localVariable70",
                "local_68": "localVariable68",
                "local_60": "localVariable60",
                "local_5c": "localVariable5C",
                "local_58": "localVariable58",
                "local_48": "localVariable48",
                "uStack_44": "uStackVariable44",
                "local_38": "localVariable38",
                "local_34": "localVariable34",
                "local_30": "localVariable30",
                "local_2c": "localVariable2C"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "improve_memory_allocation_0800884c",
            "code": "\nundefined4 improveMemoryAllocation_0800884c(undefined4 param1,int param2)\n\n{\n  int initialAllocation;\n  int adjustedAllocation;\n  uint alignment;\n  \n  FUN_080090a8();\n  alignment = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjustedAllocation = ((0xfef - param2) + alignment & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedAllocation) {\n    initialAllocation = FUN_08009744(param1,0);\n    if (initialAllocation == DAT_20000454 + alignment) {\n      initialAllocation = FUN_08009744(param1,-adjustedAllocation);\n      if (initialAllocation != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjustedAllocation;\n        *(uint *)(DAT_20000454 + 4) = alignment - adjustedAllocation | 1;\n        FUN_080090b4(param1);\n        return 1;\n      }\n      adjustedAllocation = FUN_08009744(param1,0);\n      if (0xf < adjustedAllocation - DAT_20000454) {\n        DAT_20000a14 = adjustedAllocation - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjustedAllocation - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "improve_memory_allocation_0800884c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initialAllocation",
                "iVar2": "adjustedAllocation",
                "uVar3": "alignment"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "decompile_and_improve_080088ec",
            "code": "\nvoid decompile_and_improve_080088ec(undefined4 input,int data_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint *curr_block;\n  uint *next_block;\n  undefined *temp_ptr;\n  uint block_size;\n  uint next_block_size;\n  undefined *prev_block;\n  undefined *next_block;\n  undefined4 *temp_ptr;\n  int block_index;\n  uint ptr_header;\n  uint ptr_header_next;\n  \n  if (data_ptr == 0) {\n    return;\n  }\n  FUN_080090a8();\n  ptr_header = *(uint *)(data_ptr + -4);\n  curr_block = (uint *)(data_ptr + -8);\n  block_size = ptr_header & 0xfffffffe;\n  next_block = (uint *)((int)curr_block + block_size);\n  next_block_size = next_block[1] & 0xfffffffc;\n  if (DAT_20000454 == next_block) {\n    block_size = block_size + next_block_size;\n    if ((ptr_header & 1) == 0) {\n      curr_block = (uint *)((int)curr_block - *(int *)(data_ptr + -8));\n      next_block_size = curr_block[2];\n      ptr_header = curr_block[3];\n      block_size = block_size + *(int *)(data_ptr + -8);\n      *(uint *)(next_block_size + 0xc) = ptr_header;\n      *(uint *)(ptr_header + 8) = next_block_size;\n    }\n    next_block_size = DAT_20000858;\n    curr_block[1] = block_size | 1;\n    DAT_20000454 = curr_block;\n    if (next_block_size <= block_size) {\n      FUN_0800884c(input,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(input);\n    return;\n  }\n  next_block[1] = next_block_size;\n  if ((ptr_header & 1) == 0) {\n    curr_block = (uint *)((int)curr_block - *(int *)(data_ptr + -8));\n    temp_ptr = (undefined4 *)curr_block[2];\n    block_size = block_size + *(int *)(data_ptr + -8);\n    ptr_header = *(uint *)((int)next_block + next_block_size + 4) & 1;\n    if ((uint **)temp_ptr == &DAT_20000454) {\n      if (ptr_header == 0) {\n        ptr_header = next_block[2];\n        ptr_header_next = next_block[3];\n        block_size = block_size + next_block_size;\n        *(uint *)(ptr_header + 0xc) = ptr_header_next;\n        *(uint *)(ptr_header_next + 8) = ptr_header;\n        curr_block[1] = block_size | 1;\n        *(uint *)((int)curr_block + block_size) = block_size;\n      }\n      else {\n        curr_block[1] = block_size | 1;\n        *next_block = block_size;\n      }\n      goto LAB_080089f0;\n    }\n    ptr_header_next = curr_block[3];\n    temp_ptr[3] = ptr_header_next;\n    *(undefined4 **)(ptr_header_next + 8) = temp_ptr;\n  }\n  else {\n    ptr_header = *(uint *)((int)next_block + next_block_size + 4) & 1;\n  }\n  if (ptr_header == 0) {\n    temp_ptr = (undefined4 *)next_block[2];\n    block_size = block_size + next_block_size;\n    if ((uint **)temp_ptr == &DAT_20000454) {\n      DAT_2000045c = curr_block;\n      DAT_20000460 = curr_block;\n      curr_block[2] = (uint)&DAT_20000454;\n      curr_block[3] = (uint)&DAT_20000454;\n      curr_block[1] = block_size | 1;\n      *(uint *)((int)curr_block + block_size) = block_size;\n      goto LAB_080089f0;\n    }\n    next_block_size = next_block[3];\n    temp_ptr[3] = next_block_size;\n    *(undefined4 **)(next_block_size + 8) = temp_ptr;\n    curr_block[1] = block_size | 1;\n    *(uint *)((int)curr_block + block_size) = block_size;\n  }\n  else {\n    curr_block[1] = block_size | 1;\n    *(uint *)((int)curr_block + block_size) = block_size;\n  }\n  if (block_size < 0x200) {\n    block_index = (block_size >> 3) + 1;\n    block_size = 1 << ((int)(block_size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    next_block_size = *(uint *)(&DAT_2000044c + block_index * 8);\n    curr_block[2] = next_block_size;\n    curr_block[3] = (uint)(&DAT_20000444 + block_index * 8);\n    DAT_20000450 = (undefined *)block_size;\n    *(uint **)(&DAT_2000044c + block_index * 8) = curr_block;\n    *(uint **)(next_block_size + 0xc) = curr_block;\n    FUN_080090b4(input,curr_block,block_size,param_4);\n    return;\n  }\n  next_block_size = block_size >> 9;\n  if (next_block_size < 5) {\n    block_index = ((block_size >> 6) + 0x39) * 8;\n    index = (block_size >> 6) + 0x38;\n  }\n  else if (next_block_size < 0x15) {\n    block_index = (next_block_size + 0x5c) * 8;\n    index = next_block_size + 0x5b;\n  }\n  else if (next_block_size < 0x55) {\n    block_index = ((block_size >> 0xc) + 0x6f) * 8;\n    index = (block_size >> 0xc) + 0x6e;\n  }\n  else if (next_block_size < 0x155) {\n    block_index = ((block_size >> 0xf) + 0x78) * 8;\n    index = (block_size >> 0xf) + 0x77;\n  }\n  else if (next_block_size < 0x555) {\n    block_index = ((block_size >> 0x12) + 0x7d) * 8;\n    index = (block_size >> 0x12) + 0x7c;\n  }\n  else {\n    block_index = 0x3f8;\n    index = 0x7e;\n  }\n  temp_ptr = *(undefined **)(&DAT_2000044c + block_index);\n  prev_block = &DAT_20000444 + block_index;\n  if (prev_block == temp_ptr) {\n    temp_ptr = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    next_block = prev_block;\n    DAT_20000450 = temp_ptr;\n  }\n  else {\n    do {\n      next_block = temp_ptr;\n      if ((*(uint *)(temp_ptr + 4) & 0xfffffffc) <= block_size) break;\n      temp_ptr = *(undefined **)(temp_ptr + 8);\n      next_block = prev_block;\n    } while (prev_block != temp_ptr);\n    prev_block = *(undefined **)(next_block + 0xc);\n  }\n  curr_block[2] = (uint)next_block;\n  curr_block[3] = (uint)prev_block;\n  *(uint **)(prev_block + 8) = curr_block;\n  *(uint **)(next_block + 0xc) = curr_block;\n  FUN_080090b4(input,curr_block,temp_ptr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "decompile_and_improve_080088ec",
                "param_1": "input",
                "param_2": "data_ptr",
                "iVar1": "index",
                "puVar2": "curr_block",
                "puVar3": "next_block",
                "puVar4": "temp_ptr",
                "uVar5": "block_size",
                "uVar6": "next_block_size",
                "puVar7": "prev_block",
                "puVar8": "next_block",
                "puVar9": "temp_ptr",
                "iVar10": "block_index",
                "uVar11": "ptr_header",
                "uVar12": "ptr_header_next"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "calculate_modified_value_08008ad4",
            "code": "\nint calculateModifiedValue_08008ad4(void)\n\n{\n  int variable1;\n  \n  variable1 = *(int *)(DAT_2000001c + 0x34);\n  if (variable1 == 0) {\n    variable1 = 0x2000085c;\n  }\n  return variable1 + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "calculate_modified_value_08008ad4",
                "iVar1": "variable1"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_block_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_08008af8(undefined4 *result,uint size)\n\n{\n  undefined *ptr1;\n  uint temp1;\n  uint temp2;\n  int index1;\n  undefined *ptr2;\n  uint size2;\n  uint size3;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result_ptr;\n  uint temp3;\n  uint temp4;\n  int index2;\n  undefined4 *block_ptr1;\n  undefined4 *block_ptr2;\n  \n  temp3 = size + 0xb;\n  if (temp3 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    temp4 = 0x10;\n    index1 = 0x18;\n    temp3 = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index1);\n    if ((ptr5 != &DAT_20000444 + index1) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index1), &DAT_2000044c + index1 != ptr5)) {\n      index1 = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      temp3 = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      index2 = *(int *)(ptr5 + 8);\n      *(int *)(index2 + 0xc) = index1;\n      *(int *)(index1 + 8) = index2;\n      *(uint *)(ptr2 + 4) = temp3 | 1;\n      FUN_080090b4(result);\n      return (int *)(ptr5 + 8);\n    }\n    temp3 = temp3 + 2;\n  }\n  else {\n    temp4 = temp3 & 0xfffffff8;\n    if (((int)temp4 < 0) || (temp4 < size)) {\nLAB_08008c7a:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (temp4 < 0x1f8) {\n      temp3 = temp3 >> 3;\n      index1 = temp4 + 8;\n      goto LAB_08008b18;\n    }\n    temp1 = temp3 >> 9;\n    if (temp1 == 0) {\n      index1 = 0x200;\n      size2 = 0x40;\n      temp1 = 0x3f;\n    }\n    else if (temp1 < 5) {\n      size2 = (temp3 >> 6) + 0x39;\n      temp1 = (temp3 >> 6) + 0x38;\n      index1 = size2 * 8;\n    }\n    else if (temp1 < 0x15) {\n      size2 = temp1 + 0x5c;\n      temp1 = temp1 + 0x5b;\n      index1 = size2 * 8;\n    }\n    else if (temp1 < 0x55) {\n      size2 = (temp3 >> 0xc) + 0x6f;\n      temp1 = (temp3 >> 0xc) + 0x6e;\n      index1 = size2 * 8;\n    }\n    else if (temp1 < 0x155) {\n      size2 = (temp3 >> 0xf) + 0x78;\n      temp1 = (temp3 >> 0xf) + 0x77;\n      index1 = size2 * 8;\n    }\n    else if (temp1 < 0x555) {\n      size2 = (temp3 >> 0x12) + 0x7d;\n      temp1 = (temp3 >> 0x12) + 0x7c;\n      index1 = size2 * 8;\n    }\n    else {\n      index1 = 0x3f8;\n      size2 = 0x7f;\n      temp1 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index1); temp3 = size2,\n        &DAT_20000444 + index1 != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      index2 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - temp4;\n      temp3 = temp1;\n      if (0xf < index2) break;\n      if (-1 < index2) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        temp3 = *(uint *)(ptr2 + 4);\n        index1 = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  block_ptr1 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    size2 = 1 << ((int)temp3 >> 2 & 0xffU);\n    temp1 = DAT_20000450;\n    if (size2 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    size2 = DAT_2000045c[1];\n    size3 = size2 & 0xfffffffc;\n    temp1 = size3 - temp4;\n    if (0xf < (int)temp1) {\n      block_ptr2 = (undefined4 *)(temp4 + (int)DAT_2000045c);\n      DAT_2000045c[1] = temp4 | 1;\n      DAT_2000045c = block_ptr2;\n      DAT_20000460 = block_ptr2;\n      block_ptr2[2] = &DAT_20000454;\n      block_ptr2[3] = &DAT_20000454;\n      block_ptr2[1] = temp1 | 1;\n      *(uint *)((int)block_ptr1 + size3) = temp1;\n      FUN_080090b4(result);\n      return block_ptr1 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp1) {\n      *(uint *)((int)block_ptr1 + size3 + 4) = *(uint *)((int)block_ptr1 + size3 + 4) | 1;\n      FUN_080090b4(result);\n      return block_ptr1 + 2;\n    }\n    if (size3 < 0x200) {\n      index1 = (size2 >> 3) + 1;\n      index2 = *(int *)(&DAT_2000044c + index1 * 8);\n      temp1 = 1 << ((int)(size2 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      block_ptr1[2] = index2;\n      block_ptr1[3] = &DAT_20000444 + index1 * 8;\n      DAT_20000450 = temp1;\n      *(undefined4 **)(&DAT_2000044c + index1 * 8) = block_ptr1;\n      *(undefined4 **)(index2 + 0xc) = block_ptr1;\n    }\n    else {\n      temp1 = size2 >> 9;\n      if (temp1 < 5) {\n        index1 = ((size2 >> 6) + 0x39) * 8;\n        index2 = (size2 >> 6) + 0x38;\n      }\n      else if (temp1 < 0x15) {\n        index1 = (temp1 + 0x5c) * 8;\n        index2 = temp1 + 0x5b;\n      }\n      else if (temp1 < 0x55) {\n        index1 = ((size2 >> 0xc) + 0x6f) * 8;\n        index2 = (size2 >> 0xc) + 0x6e;\n      }\n      else if (temp1 < 0x155) {\n        index1 = ((size2 >> 0xf) + 0x78) * 8;\n        index2 = (size2 >> 0xf) + 0x77;\n      }\n      else if (temp1 < 0x555) {\n        index1 = ((size2 >> 0x12) + 0x7d) * 8;\n        index2 = (size2 >> 0x12) + 0x7c;\n      }\n      else {\n        index1 = 0x3f8;\n        index2 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index1);\n      ptr2 = &DAT_20000444 + index1;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (index2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= size3) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      temp1 = DAT_20000450;\n      block_ptr1[2] = ptr5;\n      block_ptr1[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = block_ptr1;\n      *(undefined4 **)(ptr5 + 0xc) = block_ptr1;\n    }\n    size2 = 1 << ((int)temp3 >> 2 & 0xffU);\n    if (size2 <= temp1) {\nLAB_08008c06:\n      if ((size2 & temp1) == 0) {\n        temp3 = temp3 & 0xfffffffc;\n        do {\n          size2 = size2 << 1;\n          temp3 = temp3 + 4;\n        } while ((size2 & temp1) == 0);\n      }\n      do {\n        block_ptr2 = (undefined4 *)(&DAT_2000044c + temp3 * 8);\n        temp1 = temp3;\n        block_ptr1 = block_ptr2;\n        do {\n          for (ptr3 = (undefined4 *)block_ptr1[3]; block_ptr1 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            size3 = ptr3[1] & 0xfffffffc;\n            temp2 = size3 - temp4;\n            if (0xf < (int)temp2) {\n              index2 = ptr3[2];\n              index1 = ptr3[3];\n              block_ptr1 = (undefined4 *)(temp4 + (int)ptr3);\n              ptr3[1] = temp4 | 1;\n              *(int *)(index2 + 0xc) = index1;\n              *(int *)(index1 + 8) = index2;\n              DAT_2000045c = block_ptr1;\n              DAT_20000460 = block_ptr1;\n              block_ptr1[2] = &DAT_20000454;\n              block_ptr1[3] = &DAT_20000454;\n              block_ptr1[1] = temp2 | 1;\n              *(uint *)((int)ptr3 + size3) = temp2;\n              FUN_080090b4(result);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)temp2) {\n              index1 = ptr3[3];\n              index2 = ptr3[2];\n              *(uint *)((int)ptr3 + size3 + 4) = *(uint *)((int)ptr3 + size3 + 4) | 1;\n              *(int *)(index2 + 0xc) = index1;\n              *(int *)(index1 + 8) = index2;\n              FUN_080090b4(result);\n              return ptr3 + 2;\n            }\n          }\n          temp1 = temp1 + 1;\n          block_ptr1 = block_ptr1 + 2;\n        } while ((temp1 & 3) != 0);\n        do {\n          size3 = temp3 & 3;\n          block_ptr1 = block_ptr2 + -2;\n          temp3 = temp3 - 1;\n          if (size3 == 0) {\n            DAT_20000450 = DAT_20000450 & ~size2;\n            break;\n          }\n          block_ptr2 = (undefined4 *)*block_ptr2;\n        } while (block_ptr2 == block_ptr1);\n        size2 = size2 * 2;\n        if ((DAT_20000450 <= size2 && size2 - DAT_20000450 != 0) || (temp3 = temp1, size2 == 0))\n        break;\n        for (; (size2 & DAT_20000450) == 0; size2 = size2 << 1) {\n          temp3 = temp3 + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  temp3 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((temp4 <= temp3) && (temp1 = temp3 - temp4, 0xf < (int)temp1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp1 = temp4 + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp1 = temp4 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)FUN_08009744(result,temp1);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    temp3 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + temp3;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + temp1;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = temp3 + temp1 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp1;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      size2 = (uint)ptr2 & 7;\n      if (size2 == 0) {\n        index1 = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - size2);\n        index1 = 0x1008 - size2;\n      }\n      index1 = index1 - ((uint)(ptr2 + temp1) & 0xfff);\n      index2 = FUN_08009744(result,index1);\n      if (index2 == -1) {\n        temp1 = 1;\n        index1 = 0;\n      }\n      else {\n        temp1 = (index2 - (int)ptr2) + index1 | 1;\n      }\n      ptr4 = DAT_20000a14 + index1;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = temp1;\n      if (ptr5 != &DAT_2000044c) {\n        if (temp3 < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        temp3 = temp3 - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | temp3;\n        *(undefined4 *)(ptr5 + temp3 + 4) = 5;\n        *(undefined4 *)(ptr5 + temp3 + 8) = 5;\n        if (0xf < temp3) {\n          FUN_080088ec(result,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    temp3 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  temp1 = (temp3 & 0xfffffffc) - temp4;\n  if ((temp4 <= (temp3 & 0xfffffffc)) && (0xf < (int)temp1)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + temp4;\n    *(uint *)(DAT_20000454 + 4) = temp4 | 1;\n    result_ptr = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = temp1 | 1;\n    FUN_080090b4(result);\n    return result_ptr;\n  }\nLAB_08008eee:\n  FUN_080090b4(result);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_block_08008af8",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "ptr1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "iVar4": "index1",
                "puVar5": "ptr2",
                "uVar6": "size2",
                "uVar7": "size3",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "piVar11": "result_ptr",
                "uVar12": "temp3",
                "uVar13": "temp4",
                "iVar14": "index2",
                "puVar15": "block_ptr1",
                "puVar16": "block_ptr2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_in_array_0800901c",
            "code": "\nuint * find_byte_in_array_0800901c(uint *array,uint byte_to_find,uint array_length)\n\n{\n  uint xor_result;\n  uint combined_byte;\n  uint *current_element;\n  uint masked_byte;\n  bool is_length_zero;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      combined_byte = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_element = array;\n      do {\n        xor_result = *current_element ^ (combined_byte | combined_byte << 0x10);\n        array = current_element + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        current_element = array;\n      } while (3 < array_length);\n    }\n    current_element = array;\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      array = current_element;\n      if (*(byte *)array != masked_byte) {\n        current_element = (uint *)(array_length + (int)array);\n        do {\n          array = (uint *)((int)array + 1);\n          if (current_element == array) goto LAB_0800906c;\n        } while (*(byte *)array != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      array = (uint *)0x0;\n    }\n    else if (*(byte *)array != masked_byte) {\n      current_element = (uint *)((int)array + 1);\n      do {\n        array = current_element;\n        array_length = combined_byte;\n        if (((uint)array & 3) == 0) goto LAB_0800904a;\n        is_length_zero = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_length_zero) goto LAB_0800906c;\n        current_element = (uint *)((int)array + 1);\n      } while (*(byte *)array != masked_byte);\n    }\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_in_array_0800901c",
                "param_1": "array",
                "param_2": "byte_to_find",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "uVar2": "combined_byte",
                "puVar3": "current_element",
                "uVar4": "masked_byte",
                "bVar5": "is_length_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initiate_data_processing_080090b4",
            "code": "\nvoid initiate_data_processing_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initiate_data_processing_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "initialize_data_080090c0",
            "code": "\nundefined4 * initializeData_080090c0(int dataPtr,uint index)\n\n{\n  undefined4 *entryPtr;\n  int dataBlockPtr;\n  \n  dataBlockPtr = *(int *)(dataPtr + 0x4c);\n  if (dataBlockPtr == 0) {\n    dataBlockPtr = FUN_08009980(dataPtr,4,0x21);\n    *(int *)(dataPtr + 0x4c) = dataBlockPtr;\n    if (dataBlockPtr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  entryPtr = *(undefined4 **)(dataBlockPtr + index * 4);\n  if (entryPtr == (undefined4 *)0x0) {\n    dataBlockPtr = 1 << (index & 0xff);\n    entryPtr = (undefined4 *)FUN_08009980(dataPtr,1,(dataBlockPtr + 5) * 4);\n    if (entryPtr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    entryPtr[1] = index;\n    entryPtr[2] = dataBlockPtr;\n  }\n  else {\n    *(undefined4 *)(dataBlockPtr + index * 4) = *entryPtr;\n  }\n  entryPtr[3] = 0;\n  entryPtr[4] = 0;\n  return entryPtr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "initialize_data_080090c0",
                "param_1": "dataPtr",
                "param_2": "index",
                "puVar1": "entryPtr",
                "iVar2": "dataBlockPtr"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_value_0800910c",
            "code": "\nvoid updatePointerValue_0800910c(int baseAddress,undefined4 *ptrToUpdate)\n\n{\n  int offset;\n  \n  if (ptrToUpdate != (undefined4 *)0x0) {\n    offset = *(int *)(baseAddress + 0x4c);\n    *ptrToUpdate = *(undefined4 *)(offset + ptrToUpdate[1] * 4);\n    *(undefined4 **)(offset + ptrToUpdate[1] * 4) = ptrToUpdate;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_value_0800910c",
                "param_1": "baseAddress",
                "param_2": "ptrToUpdate",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "perform_calculation_08009120",
            "code": "\nundefined4 * performCalculation_08009120(int input,undefined4 *output,int multiplier,uint accumulator)\n\n{\n  undefined4 *result;\n  uint tempVar;\n  int size;\n  uint *arrayPtr;\n  int counter;\n  \n  counter = 0;\n  size = output[4];\n  arrayPtr = output + 5;\n  do {\n    counter = counter + 1;\n    accumulator = multiplier * (*arrayPtr & 0xffff) + accumulator;\n    tempVar = multiplier * (*arrayPtr >> 0x10) + (accumulator >> 0x10);\n    *arrayPtr = (accumulator & 0xffff) + tempVar * 0x10000;\n    accumulator = tempVar >> 0x10;\n    arrayPtr = arrayPtr + 1;\n  } while (counter < size);\n  result = output;\n  if (accumulator != 0) {\n    if ((int)output[2] <= size) {\n      result = (undefined4 *)FUN_080090c0(input,output[1] + 1);\n      FUN_08001084(result + 3,output + 3,(output[4] + 2) * 4);\n      counter = *(int *)(input + 0x4c);\n      *output = *(undefined4 *)(counter + output[1] * 4);\n      *(undefined4 **)(counter + output[1] * 4) = output;\n    }\n    result[size + 5] = accumulator;\n    result[4] = size + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "perform_calculation_08009120",
                "param_1": "input",
                "param_2": "output",
                "param_3": "multiplier",
                "param_4": "accumulator",
                "puVar1": "result",
                "uVar2": "tempVar",
                "iVar3": "size",
                "puVar4": "arrayPtr",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "find_leading_zeros_080091a4",
            "code": "\nint findLeadingZeros_080091a4(uint input_value)\n\n{\n  int count;\n  \n  if ((input_value & 0xffff0000) == 0) {\n    input_value = input_value << 0x10;\n    count = 0x10;\n  }\n  else {\n    count = 0;\n  }\n  if ((input_value & 0xff000000) == 0) {\n    input_value = input_value << 8;\n    count = count + 8;\n  }\n  if ((input_value & 0xf0000000) == 0) {\n    input_value = input_value << 4;\n    count = count + 4;\n  }\n  if ((input_value & 0xc0000000) == 0) {\n    input_value = input_value << 2;\n    count = count + 2;\n  }\n  if (-1 < (int)input_value) {\n    if ((int)(input_value << 1) < 0) {\n      return count + 1;\n    }\n    count = 0x20;\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "find_leading_zeros_080091a4",
                "param_1": "input_value",
                "iVar1": "count"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_trailing_zeros_080091e4",
            "code": "\nint countTrailingZeros_080091e4(uint *input)\n\n{\n  int trailingZeros;\n  uint value;\n  \n  value = *input;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      trailingZeros = 0x10;\n    }\n    else {\n      trailingZeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      trailingZeros = trailingZeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      trailingZeros = trailingZeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      trailingZeros = trailingZeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      trailingZeros = trailingZeros + 1;\n    }\n    *input = value;\n    return trailingZeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *input = value >> 2;\n    return 2;\n  }\n  *input = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "param_1": "input",
                "iVar1": "trailingZeros",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initializeData_08009244(undefined4 dataBuffer,undefined4 dataValue)\n\n{\n  int dataPointer;\n  \n  dataPointer = FUN_080090c0(dataBuffer,1);\n  *(undefined4 *)(dataPointer + 0x10) = 1;\n  *(undefined4 *)(dataPointer + 0x14) = dataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "dataBuffer",
                "param_2": "dataValue",
                "iVar1": "dataPointer"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "calculate_checksum_08009258",
            "code": "\nvoid calculateChecksum_08009258(undefined4 param1,int buffer1,int buffer2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int length;\n  uint temp1;\n  uint *ptr3;\n  uint startAddr;\n  uint *ptr4;\n  uint temp2;\n  int maxLen;\n  int tempLen;\n  uint temp3;\n  int length1;\n  int buffer1_temp;\n  uint *ptr1_temp;\n  uint *ptr3_temp;\n  uint *ptr4_temp;\n  uint *ptr4_end;\n  uint *ptr1_end;\n  \n  length1 = *(int *)(buffer1 + 0x10);\n  maxLen = *(int *)(buffer2 + 0x10);\n  tempLen = maxLen;\n  buffer1_temp = buffer1;\n  if (length1 < maxLen) {\n    tempLen = length1;\n    length1 = maxLen;\n    buffer1_temp = buffer2;\n    buffer2 = buffer1;\n  }\n  maxLen = length1 + tempLen;\n  length = *(int *)(buffer1_temp + 4);\n  if (*(int *)(buffer1_temp + 8) < maxLen) {\n    length = length + 1;\n  }\n  length = FUN_080090c0(param1,length);\n  ptr1_end = (uint *)(length + 0x14);\n  ptr4_end = ptr1_end + maxLen;\n  for (ptr3 = ptr1_end; ptr3 < ptr4_end; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  startAddr = buffer2 + 0x14;\n  temp3 = startAddr + tempLen * 4;\n  ptr3 = (uint *)(buffer1_temp + 0x14);\n  if (startAddr < temp3) {\n    ptr4 = (uint *)(startAddr + ((temp3 - buffer2) - 0x15 & 0xfffffffc));\n    ptr4_temp = (uint *)(buffer2 + 0x10);\n    do {\n      while( true ) {\n        ptr4_temp = ptr4_temp + 1;\n        startAddr = *ptr4_temp & 0xffff;\n        if (startAddr != 0) break;\n        startAddr = *ptr4_temp >> 0x10;\n        if (startAddr == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr1_end;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr1_temp = ptr1_end;\n        temp3 = temp2;\n        do {\n          ptr3_temp = ptr1_temp;\n          temp1 = temp1 + startAddr * *(ushort *)ptr1 + (temp3 >> 0x10);\n          *ptr3_temp = temp2 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp3 = ptr3_temp[1];\n          temp2 = startAddr * (*ptr1 >> 0x10) + (temp3 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr1_temp = ptr3_temp + 1;\n        } while (ptr2 < ptr3 + length1);\n        ptr3_temp[1] = temp2;\n        ptr1_end = ptr1_end + 1;\n        if (ptr4 == ptr4_temp) goto LAB_0800937a;\n      }\n      temp3 = 0;\n      ptr1 = ptr1_end;\n      ptr1_temp = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr3_temp = ptr1_temp + 1;\n        temp2 = startAddr * (*ptr1_temp & 0xffff) + (*ptr2 & 0xffff) + temp3;\n        temp1 = startAddr * (*ptr1_temp >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        temp3 = temp1 >> 0x10;\n        *ptr2 = temp2 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr1_temp = ptr3_temp;\n      } while (ptr3_temp < ptr3 + length1);\n      ptr2[1] = temp3;\n      startAddr = *ptr4_temp >> 0x10;\n      if (startAddr != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr1_end = ptr1_end + 1;\n    } while (ptr4 != ptr4_temp);\n  }\nLAB_0800937a:\n  if (0 < maxLen) {\n    startAddr = ptr4_end[-1];\n    ptr4_end = ptr4_end + -1;\n    while ((startAddr == 0 && (maxLen = maxLen + -1, maxLen != 0))) {\n      ptr4_end = ptr4_end + -1;\n      startAddr = *ptr4_end;\n    }\n  }\n  *(int *)(length + 0x10) = maxLen;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "calculate_checksum_08009258",
                "param_1": "param1",
                "param_2": "buffer1",
                "param_3": "buffer2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "length",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "startAddr",
                "puVar7": "ptr4",
                "uVar8": "temp2",
                "iVar9": "maxLen",
                "iVar10": "tempLen",
                "uVar11": "temp3",
                "iVar12": "length1",
                "iVar13": "buffer1_temp",
                "puVar14": "ptr1_temp",
                "puVar15": "ptr3_temp",
                "puVar16": "ptr4_temp",
                "puVar17": "ptr4_end",
                "puVar18": "ptr1_end"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int inputArray,undefined4 *outputArray,uint arrayLength)\n\n{\n  int tempVar1;\n  int tempVar2;\n  undefined4 *ptrVar1;\n  undefined4 *ptrVar2;\n  \n  if ((arrayLength & 3) != 0) {\n    outputArray = (undefined4 *)\n              FUN_08009120(inputArray,outputArray,*(undefined4 *)(&DAT_0800a070 + ((arrayLength & 3) - 1) * 4),\n                           0);\n  }\n  tempVar2 = (int)arrayLength >> 2;\n  if (tempVar2 != 0) {\n    ptrVar2 = *(undefined4 **)(inputArray + 0x48);\n    if (ptrVar2 == (undefined4 *)0x0) {\n      ptrVar2 = (undefined4 *)FUN_080090c0(inputArray,1);\n      ptrVar2[4] = 1;\n      ptrVar2[5] = 0x271;\n      *(undefined4 **)(inputArray + 0x48) = ptrVar2;\n      *ptrVar2 = 0;\n    }\n    ptrVar1 = outputArray;\n    if (tempVar2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    tempVar2 = tempVar2 >> 1;\n    ptrVar1 = ptrVar2;\n    if (tempVar2 != 0) {\n      while( true ) {\n        ptrVar2 = (undefined4 *)*ptrVar1;\n        if (ptrVar2 == (undefined4 *)0x0) {\n          ptrVar2 = (undefined4 *)FUN_08009258(inputArray,ptrVar1,ptrVar1);\n          *ptrVar1 = ptrVar2;\n          *ptrVar2 = 0;\n        }\n        ptrVar1 = outputArray;\n        if (-1 < tempVar2 << 0x1f) break;\nLAB_080093d2:\n        outputArray = (undefined4 *)FUN_08009258(inputArray,ptrVar1,ptrVar2);\n        if (ptrVar1 == (undefined4 *)0x0) break;\n        tempVar1 = *(int *)(inputArray + 0x4c);\n        tempVar2 = tempVar2 >> 1;\n        *ptrVar1 = *(undefined4 *)(tempVar1 + ptrVar1[1] * 4);\n        *(undefined4 **)(tempVar1 + ptrVar1[1] * 4) = ptrVar1;\n        ptrVar1 = ptrVar2;\n        if (tempVar2 == 0) {\n          return outputArray;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "arrayLength",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "puVar3": "ptrVar1",
                "puVar4": "ptrVar2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "reverse_bits_and_store_08009444",
            "code": "\nvoid reverseBitsAndStore_08009444(int input,undefined4 *array,uint numBits)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined4 temp4;\n  int arrayLength;\n  int temp6;\n  uint *destPtr;\n  uint *srcPtr;\n  uint *newSrcPtr;\n  uint *loopPtr;\n  int numSections;\n  int newArrayLength;\n  uint carry;\n  uint *newDestPtr;\n  \n  arrayLength = array[4];\n  numSections = (int)numBits >> 5;\n  newArrayLength = numSections + arrayLength + 1;\n  temp3 = array[1];\n  temp2 = array[2];\n  if ((int)array[2] < newArrayLength) {\n    do {\n      temp6 = temp2 * 2;\n      temp1 = temp2 * -2;\n      temp3 = temp3 + 1;\n      temp2 = temp6;\n    } while (newArrayLength != temp6 && newArrayLength + temp1 < 0 == SBORROW4(newArrayLength,temp6));\n  }\n  temp2 = FUN_080090c0(input,temp3);\n  destPtr = (uint *)(temp2 + 0x14);\n  if (0 < numSections) {\n    loopPtr = destPtr + numSections;\n    srcPtr = destPtr;\n    do {\n      newDestPtr = srcPtr + 1;\n      *srcPtr = 0;\n      destPtr = loopPtr;\n      srcPtr = newDestPtr;\n    } while (newDestPtr != loopPtr);\n  }\n  temp3 = array[4];\n  srcPtr = array + 5;\n  numBits = numBits & 0x1f;\n  if (numBits == 0) {\n    destPtr = destPtr + -1;\n    loopPtr = srcPtr;\n    do {\n      newDestPtr = loopPtr + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *loopPtr;\n      loopPtr = newDestPtr;\n    } while (newDestPtr < srcPtr + temp3);\n  }\n  else {\n    carry = 0;\n    loopPtr = srcPtr;\n    do {\n      newDestPtr = destPtr;\n      *newDestPtr = *loopPtr << numBits | carry;\n      newSrcPtr = loopPtr + 1;\n      carry = *loopPtr >> (0x20 - numBits & 0xff);\n      destPtr = newDestPtr + 1;\n      loopPtr = newSrcPtr;\n    } while (newSrcPtr < srcPtr + temp3);\n    newDestPtr[1] = carry;\n    if (carry != 0) {\n      newArrayLength = numSections + arrayLength + 2;\n    }\n  }\n  arrayLength = *(int *)(input + 0x4c);\n  temp3 = array[1];\n  temp4 = *(undefined4 *)(arrayLength + temp3 * 4);\n  *(int *)(temp2 + 0x10) = newArrayLength + -1;\n  *array = temp4;\n  *(undefined4 **)(arrayLength + temp3 * 4) = array;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "reverse_bits_and_store_08009444",
                "param_1": "input",
                "param_2": "array",
                "param_3": "numBits",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "arrayLength",
                "iVar6": "temp6",
                "puVar7": "destPtr",
                "puVar8": "srcPtr",
                "puVar9": "newDestPtr",
                "puVar10": "newSrcPtr",
                "puVar11": "loopPtr",
                "iVar12": "numSections",
                "iVar13": "newArrayLength",
                "uVar14": "carry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int array_difference;\n  uint *ptr2;\n  int array1_length;\n  uint *ptr1;\n  \n  array1_length = *(int *)(array2 + 0x10);\n  array_difference = *(int *)(array1 + 0x10) - array1_length;\n  if (array_difference == 0) {\n    ptr2 = (uint *)(array2 + 0x14 + array1_length * 4);\n    ptr1 = (uint *)(array1 + 0x14) + array1_length;\n    do {\n      ptr1 = ptr1 + -1;\n      ptr2 = ptr2 + -1;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr1);\n  }\n  return array_difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "array_difference",
                "puVar2": "ptr2",
                "iVar3": "array1_length",
                "puVar4": "ptr1"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "compare_arrays_08009530",
            "code": "\nvoid compareArrays_08009530(undefined4 input_value,uint *array1,uint *array2,undefined4 param_4)\n\n{\n  int result;\n  uint *array2_ptr;\n  uint temp1;\n  uint temp2;\n  undefined4 flag;\n  uint *temp_ptr1;\n  uint *temp_ptr2;\n  uint *temp_ptr4;\n  uint *temp_ptr5;\n  uint *array2_end;\n  int carry;\n  uint *array1_end;\n  uint array1_length;\n  uint *temp_ptr3;\n  \n  array2_ptr = (uint *)array2[4];\n  array2_end = array1 + 5;\n  array1_end = array2 + 5;\n  temp_ptr2 = array2_end;\n  temp_ptr4 = array1;\n  if ((uint *)array1[4] == array2_ptr) {\n    temp_ptr1 = array2_end + (int)array2_ptr;\n    array2_ptr = array1_end + (int)array2_ptr;\n    while( true ) {\n      temp_ptr1 = temp_ptr1 + -1;\n      array2_ptr = array2_ptr + -1;\n      if (*temp_ptr1 != *array2_ptr) break;\n      if (temp_ptr1 <= array2_end) {\n        carry = FUN_080090c0(input_value,0,temp_ptr1,array2_ptr,param_4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*array2_ptr <= *temp_ptr1) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)array2_ptr) {\n    flag = 0;\n    temp_ptr1 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  temp_ptr1 = array2_end;\n  array2_ptr = array1;\n  temp_ptr2 = array1_end;\n  temp_ptr4 = array2;\n  array2 = array1;\n  array1_end = array2_end;\nLAB_08009578:\n  result = FUN_080090c0(input_value,temp_ptr4[1],temp_ptr1,array2_ptr,param_4);\n  carry = 0;\n  array1_length = temp_ptr4[4];\n  temp1 = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  array2_end = temp_ptr2 + array1_length;\n  array2_ptr = (uint *)(result + 0x14);\n  temp_ptr4 = array1_end;\n  do {\n    temp_ptr3 = temp_ptr2 + 1;\n    temp_ptr5 = temp_ptr4 + 1;\n    temp2 = ((*temp_ptr2 & 0xffff) + carry) - (*temp_ptr4 & 0xffff);\n    carry = ((*temp_ptr2 >> 0x10) - (*temp_ptr4 >> 0x10)) + ((int)temp2 >> 0x10);\n    temp2 = temp2 & 0xffff | carry * 0x10000;\n    temp_ptr1 = array2_ptr + 1;\n    *array2_ptr = temp2;\n    carry = carry >> 0x10;\n    array2_ptr = temp_ptr1;\n    temp_ptr2 = temp_ptr3;\n    temp_ptr4 = temp_ptr5;\n  } while (temp_ptr5 < array1_end + temp1);\n  array2_ptr = temp_ptr3;\n  temp_ptr2 = temp_ptr1;\n  if (temp_ptr3 < array2_end) {\n    do {\n      temp_ptr4 = array2_ptr + 1;\n      temp1 = (*array2_ptr & 0xffff) + carry;\n      carry = ((int)temp1 >> 0x10) + (*array2_ptr >> 0x10);\n      temp2 = temp1 & 0xffff | carry * 0x10000;\n      *temp_ptr2 = temp2;\n      carry = carry >> 0x10;\n      array2_ptr = temp_ptr4;\n      temp_ptr2 = temp_ptr2 + 1;\n    } while (temp_ptr4 < array2_end);\n    temp_ptr1 = (uint *)((int)temp_ptr1 + ((int)array2_end + ~(uint)temp_ptr3 & 0xfffffffc) + 4);\n  }\n  temp_ptr1 = temp_ptr1 + -1;\n  while (temp2 == 0) {\n    temp_ptr1 = temp_ptr1 + -1;\n    array1_length = array1_length - 1;\n    temp2 = *temp_ptr1;\n  }\n  *(uint *)(result + 0x10) = array1_length;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "compare_arrays_08009530",
                "param_1": "input_value",
                "param_2": "array1",
                "param_3": "array2",
                "iVar1": "result",
                "puVar2": "array2_ptr",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "flag",
                "puVar6": "temp_ptr1",
                "puVar7": "temp_ptr2",
                "puVar8": "temp_ptr3",
                "puVar9": "temp_ptr4",
                "puVar10": "temp_ptr5",
                "puVar11": "array2_end",
                "iVar12": "carry",
                "puVar13": "array1_end",
                "uVar14": "array1_length"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_and_modify_data_08009630",
            "code": "\nint decodeAndModifyData_08009630(undefined4 input_param1,undefined4 input_param2,uint bit_count,uint data,int *output_param1,\n                int *output_param2)\n\n{\n  int result;\n  uint shifted_bit_count;\n  int temp_var1;\n  int temp_var2;\n  uint shifted_data;\n  uint bit_count_check;\n  undefined8 operation_result;\n  uint temp_data;\n  uint modified_data;\n  \n  result = FUN_080090c0(input_param1,1);\n  bit_count_check = (data << 1) >> 0x15;\n  modified_data = data & 0xfffff;\n  if (bit_count_check != 0) {\n    modified_data = modified_data | 0x100000;\n  }\n  if (bit_count == 0) {\n    temp_var1 = FUN_080091e4(&modified_data);\n    temp_var2 = 1;\n    shifted_bit_count = temp_var1 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = modified_data;\n  }\n  else {\n    temp_data = bit_count;\n    shifted_bit_count = FUN_080091e4(&temp_data);\n    if (shifted_bit_count == 0) {\n      *(uint *)(result + 0x14) = temp_data;\n    }\n    else {\n      shifted_data = modified_data << (0x20 - shifted_bit_count & 0xff);\n      modified_data = modified_data >> (shifted_bit_count & 0xff);\n      *(uint *)(result + 0x14) = shifted_data | temp_data;\n    }\n    if (modified_data == 0) {\n      temp_var2 = 1;\n    }\n    else {\n      temp_var2 = 2;\n    }\n    *(uint *)(result + 0x18) = modified_data;\n    *(int *)(result + 0x10) = temp_var2;\n  }\n  if (bit_count_check == 0) {\n    *output_param1 = shifted_bit_count - 0x432;\n    operation_result = FUN_080091a4(*(undefined4 *)(result + temp_var2 * 4 + 0x10));\n    *output_param2 = (int)((ulonglong)operation_result >> 0x20) * 0x20 - (int)operation_result;\n    return result;\n  }\n  *output_param1 = (bit_count_check - 0x433) + shifted_bit_count;\n  *output_param2 = 0x35 - shifted_bit_count;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_and_modify_data_08009630",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "bit_count",
                "param_4": "data",
                "param_5": "output_param1",
                "param_6": "output_param2",
                "iVar1": "result",
                "uVar2": "shifted_bit_count",
                "iVar3": "temp_var1",
                "iVar4": "temp_var2",
                "uVar5": "shifted_data",
                "uVar6": "bit_count_check",
                "uVar7": "operation_result",
                "local_20": "temp_data",
                "local_1c": "modified_data"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_float_080096e0",
            "code": "\nundefined8 calculate_Float_080096e0(uint integerParam,uint floatParam,int *resultPointer,undefined4 constantParam)\n\n{\n  int counter;\n  uint positiveFloat;\n  undefined8 combinedVars;\n  \n  combinedVars = CONCAT44(floatParam,integerParam);\n  counter = 0;\n  positiveFloat = floatParam & 0x7fffffff;\n  *resultPointer = 0;\n  if ((positiveFloat < 0x7ff00000) && ((positiveFloat | integerParam) != 0)) {\n    if (positiveFloat < 0x100000) {\n      combinedVars = FUN_080004c8(integerParam,floatParam,0,0x43500000,constantParam);\n      counter = -0x36;\n      positiveFloat = (uint)((ulonglong)combinedVars >> 0x20) & 0x7fffffff;\n    }\n    integerParam = (uint)combinedVars;\n    floatParam = (uint)((ulonglong)combinedVars >> 0x20) & 0x800fffff | 0x3fe00000;\n    *resultPointer = ((int)positiveFloat >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(floatParam,integerParam);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_float_080096e0",
                "param_1": "integerParam",
                "param_2": "floatParam",
                "param_3": "resultPointer",
                "param_4": "constantParam",
                "iVar1": "counter",
                "uVar2": "positiveFloat",
                "uVar3": "combinedVars"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "find_and_store_result_08009744",
            "code": "\nvoid findAndStoreResult_08009744(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20000c10 = 0;\n  returnValue = FUN_08005728(inputValue);\n  if ((returnValue == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "find_and_store_result_08009744",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_safe_string_08009768",
            "code": "\nvoid copySafeString_08009768(uint *destination,uint *source,uint size)\n\n{\n  char currentChar;\n  uint *sourcePtr;\n  uint *destinationPtr;\n  uint currentValue;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (destinationPtr = destination, sourcePtr = source, 3 < size)) {\n    do {\n      source = sourcePtr + 1;\n      currentValue = *sourcePtr;\n      destination = destinationPtr;\n      if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      destination = destinationPtr + 1;\n      *destinationPtr = currentValue;\n      destinationPtr = destination;\n      sourcePtr = source;\n    } while (3 < size);\n  }\n  sourcePtr = source;\n  if (size != 0) {\nLAB_0800979c:\n    currentChar = *(char *)sourcePtr;\n    *(char *)destination = currentChar;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      size = size - 1;\n      if (currentChar == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      sourcePtr = (uint *)((int)sourcePtr + 1);\n      currentChar = *(char *)sourcePtr;\n      *(char *)destination = currentChar;\n    }\n    if (size != 0) {\n      sourcePtr = destination;\n      do {\n        destinationPtr = (uint *)((int)sourcePtr + 1);\n        *(char *)sourcePtr = '\\0';\n        sourcePtr = destinationPtr;\n      } while (destinationPtr != (uint *)(size + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_safe_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "cVar1": "currentChar",
                "puVar2": "sourcePtr",
                "puVar3": "destinationPtr",
                "uVar4": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *result,int *data_array,int *info_array)\n\n{\n  int current_value;\n  uint current_index;\n  int new_value;\n  int offset;\n  uint array_length;\n  uint inner_loop;\n  undefined4 *inner_ptr;\n  undefined4 *outer_ptr;\n  undefined4 temp_value;\n  \n  if (info_array[2] != 0) {\n    current_value = *data_array;\n    array_length = data_array[2];\n    outer_ptr = (undefined4 *)*info_array;\n    do {\n      do {\n        inner_ptr = outer_ptr + 2;\n        temp_value = *outer_ptr;\n        inner_loop = outer_ptr[1];\n        outer_ptr = inner_ptr;\n      } while (inner_loop == 0);\n      current_index = inner_loop;\n      if ((array_length <= inner_loop) && (current_index = array_length, (*(ushort *)(data_array + 3) & 0x480) != 0)) {\n        offset = current_value - data_array[4];\n        array_length = (data_array[5] * 3) / 2;\n        current_index = inner_loop + 1 + offset;\n        if (array_length < current_index) {\n          array_length = current_index;\n        }\n        if ((int)((uint)*(ushort *)(data_array + 3) << 0x15) < 0) {\n          new_value = FUN_08008af8(result,array_length);\n          if (new_value == 0) {\nLAB_08009896:\n            *result = 0xc;\n            *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x40;\n            info_array[1] = 0;\n            info_array[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(new_value,data_array[4],offset);\n          *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          new_value = FUN_08009adc(result);\n          if (new_value == 0) {\n            FUN_080088ec(result,data_array[4]);\n            goto LAB_08009896;\n          }\n        }\n        current_value = new_value + offset;\n        data_array[5] = array_length;\n        data_array[4] = new_value;\n        *data_array = current_value;\n        data_array[2] = array_length - offset;\n        current_index = inner_loop;\n      }\n      FUN_08009a18(current_value,temp_value,current_index);\n      offset = info_array[2];\n      array_length = data_array[2] - current_index;\n      current_value = *data_array + current_index;\n      data_array[2] = array_length;\n      *data_array = current_value;\n      info_array[2] = offset - inner_loop;\n    } while (offset - inner_loop != 0);\n  }\n  info_array[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "result",
                "param_2": "data_array",
                "param_3": "info_array",
                "iVar1": "current_value",
                "uVar2": "current_index",
                "iVar3": "new_value",
                "iVar4": "offset",
                "uVar5": "array_length",
                "uVar6": "inner_loop",
                "puVar7": "inner_ptr",
                "puVar8": "outer_ptr",
                "uVar9": "temp_value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bitMask = 1 << (count & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = count + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataPtr + (count + 2) * 4) = data;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_block_08009980",
            "code": "\nundefined4 * initializeMemoryBlock_08009980(undefined4 data,int size,int count)\n\n{\n  undefined4 *memoryBlock;\n  uint adjustedSize;\n  undefined4 *blockEnd;\n  \n  memoryBlock = (undefined4 *)FUN_08008af8(data,count * size);\n  if (memoryBlock == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjustedSize = (memoryBlock[-1] & 0xfffffffc) - 4;\n  if (adjustedSize < 0x25) {\n    blockEnd = memoryBlock;\n    if (0x13 < adjustedSize) {\n      *memoryBlock = 0;\n      memoryBlock[1] = 0;\n      if (0x1b < adjustedSize) {\n        memoryBlock[2] = 0;\n        memoryBlock[3] = 0;\n        if (adjustedSize == 0x24) {\n          memoryBlock[4] = 0;\n          memoryBlock[5] = 0;\n          blockEnd = memoryBlock + 6;\n        }\n        else {\n          blockEnd = memoryBlock + 4;\n        }\n        *blockEnd = 0;\n        blockEnd[1] = 0;\n        blockEnd[2] = 0;\n        return memoryBlock;\n      }\n      blockEnd = memoryBlock + 2;\n    }\n    *blockEnd = 0;\n    blockEnd[1] = 0;\n    blockEnd[2] = 0;\n    return memoryBlock;\n  }\n  FUN_08005d68(memoryBlock,0);\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_block_08009980",
                "param_1": "data",
                "param_2": "size",
                "param_3": "count",
                "puVar1": "memoryBlock",
                "uVar2": "adjustedSize",
                "puVar3": "blockEnd"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  int count;\n  undefined *destPtrByte;\n  undefined4 *srcPtrByte;\n  uint remainingBytes1;\n  uint remainingBytes2;\n  \n  if ((src < dest) && (srcPtr = (undefined4 *)((int)src + size), dest < srcPtr)) {\n    destPtrByte = (undefined *)((int)dest + size);\n    if (size != 0) {\n      do {\n        srcPtr = (undefined4 *)((int)srcPtr + -1);\n        destPtrByte = destPtrByte + -1;\n        *destPtrByte = *(undefined *)srcPtr;\n      } while (src != srcPtr);\n    }\n  }\n  else {\n    remainingBytes2 = size;\n    if (0xf < size) {\n      if ((((uint)dest | (uint)src) & 3) != 0) goto LAB_08009abc;\n      srcPtr = src + 4;\n      destPtr = dest + 4;\n      do {\n        srcPtrByte = srcPtr + 4;\n        destPtr[-4] = srcPtr[-4];\n        destPtr[-3] = srcPtr[-3];\n        destPtr[-2] = srcPtr[-2];\n        destPtr[-1] = srcPtr[-1];\n        srcPtr = srcPtrByte;\n        destPtr = destPtr + 4;\n      } while (srcPtrByte != (undefined4 *)((int)src + (size - 0x10 & 0xfffffff0) + 0x20));\n      count = (size - 0x10 >> 4) + 1;\n      remainingBytes2 = size & 0xf;\n      src = src + count * 4;\n      dest = dest + count * 4;\n      if (3 < remainingBytes2) {\n        srcPtr = dest + -1;\n        remainingBytes1 = remainingBytes2;\n        destPtr = src;\n        do {\n          remainingBytes1 = remainingBytes1 - 4;\n          srcPtr = srcPtr + 1;\n          *srcPtr = *destPtr;\n          destPtr = destPtr + 1;\n        } while (3 < remainingBytes1);\n        count = (remainingBytes2 - 4 & 0xfffffffc) + 4;\n        dest = (undefined4 *)((int)dest + count);\n        src = (undefined4 *)((int)src + count);\n        remainingBytes2 = size & 3;\n      }\n    }\n    size = remainingBytes2;\n    if (remainingBytes2 != 0) {\nLAB_08009abc:\n      destPtrByte = (undefined *)((int)dest + -1);\n      srcPtr = src;\n      do {\n        destPtr = (undefined4 *)((int)srcPtr + 1);\n        destPtrByte = destPtrByte + 1;\n        *destPtrByte = *(undefined *)srcPtr;\n        srcPtr = destPtr;\n      } while (destPtr != (undefined4 *)(size + (int)src));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "iVar3": "count",
                "puVar4": "destPtrByte",
                "puVar5": "srcPtrByte",
                "uVar6": "remainingBytes1",
                "uVar7": "remainingBytes2"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocateMemory_08009adc(undefined4 *inputPointer,int *outputPointer,uint size)\n\n{\n  int *tempPointer;\n  int tempVariable1;\n  int *tempVariable2;\n  uint tempVariable3;\n  int tempVariable4;\n  uint flag;\n  int *piVar7;\n  uint alignedSize;\n  uint alignedSize2;\n  uint tempVariable5;\n  int endPointer;\n  \n  if (outputPointer == (int *)0x0) {\n    tempVariable2 = (int *)FUN_08008af8(inputPointer,size);\n    return tempVariable2;\n  }\n  FUN_080090a8();\n  flag = outputPointer[-1];\n  alignedSize2 = flag & 0xfffffffc;\n  tempVariable2 = outputPointer + -2;\n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto LAB_08009b8e;\n  }\n  if (alignedSize < size) {\nLAB_08009b8e:\n    *inputPointer = 0xc;\n    return (int *)0x0;\n  }\n  endPointer = (int)tempVariable2 + alignedSize2;\n  tempVariable5 = alignedSize2;\n  if ((int)alignedSize2 < (int)alignedSize) {\n    if (DAT_20000454 == endPointer) {\n      endPointer = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + alignedSize2;\n      if ((int)(alignedSize + 0x10) <= endPointer) {\n        DAT_20000454 = (int)tempVariable2 + alignedSize;\n        *(uint *)(DAT_20000454 + 4) = endPointer - alignedSize | 1;\n        outputPointer[-1] = alignedSize | outputPointer[-1] & 1U;\n        FUN_080090b4(inputPointer);\n        return outputPointer;\n      }\n      if (-1 < (int)(flag << 0x1f)) {\n        tempPointer = (int *)((int)tempVariable2 - outputPointer[-2]);\n        flag = tempPointer[1] & 0xfffffffc;\n        if ((int)(alignedSize + 0x10) <= (int)(endPointer + flag)) {\n          tempVariable4 = tempPointer[3];\n          tempVariable2 = tempPointer + 2;\n          tempVariable1 = *tempVariable2;\n          alignedSize2 = alignedSize2 - 4;\n          *(int *)(tempVariable1 + 0xc) = tempVariable4;\n          *(int *)(tempVariable4 + 8) = tempVariable1;\n          if (alignedSize2 < 0x25) {\n            tempVariable1 = *outputPointer;\n            piVar7 = tempVariable2;\n            if (0x13 < alignedSize2) {\n              tempPointer[2] = tempVariable1;\n              tempPointer[3] = outputPointer[1];\n              tempVariable1 = outputPointer[2];\n              if (alignedSize2 < 0x1c) {\n                outputPointer = outputPointer + 2;\n                piVar7 = tempPointer + 4;\n              }\n              else {\n                tempPointer[4] = tempVariable1;\n                tempPointer[5] = outputPointer[3];\n                tempVariable1 = outputPointer[4];\n                if (alignedSize2 == 0x24) {\n                  tempPointer[6] = tempVariable1;\n                  tempPointer[7] = outputPointer[5];\n                  tempVariable1 = outputPointer[6];\n                  outputPointer = outputPointer + 6;\n                  piVar7 = tempPointer + 8;\n                }\n                else {\n                  outputPointer = outputPointer + 4;\n                  piVar7 = tempPointer + 6;\n                }\n              }\n            }\n            *piVar7 = tempVariable1;\n            piVar7[1] = outputPointer[1];\n            piVar7[2] = outputPointer[2];\n          }\n          else {\n            FUN_08009a18(tempVariable2,outputPointer);\n          }\n          DAT_20000454 = (int)tempPointer + alignedSize;\n          *(uint *)(DAT_20000454 + 4) = (endPointer + flag) - alignedSize | 1;\n          tempPointer[1] = alignedSize | tempPointer[1] & 1U;\n          FUN_080090b4(inputPointer);\n          return tempVariable2;\n        }\nLAB_08009bb0:\n        tempVariable5 = alignedSize2 + flag;\n        if ((int)alignedSize <= (int)tempVariable5) {\n          tempVariable4 = tempPointer[3];\n          piVar7 = tempPointer + 2;\n          tempVariable1 = *piVar7;\n          *(int *)(tempVariable1 + 0xc) = tempVariable4;\n          endPointer = (int)tempPointer + tempVariable5;\n          *(int *)(tempVariable4 + 8) = tempVariable1;\n          tempVariable2 = tempPointer;\n          if (alignedSize2 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(piVar7,outputPointer);\n          outputPointer = piVar7;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(endPointer + 4) & 0xfffffffe) + endPointer + 4) << 0x1f) {\n        tempVariable3 = *(uint *)(endPointer + 4) & 0xfffffffc;\n        tempVariable5 = alignedSize2 + tempVariable3;\n        if ((int)tempVariable5 < (int)alignedSize) {\n          if ((int)(flag << 0x1f) < 0) goto LAB_08009b36;\n          tempPointer = (int *)((int)tempVariable2 - outputPointer[-2]);\n          flag = tempPointer[1] & 0xfffffffc;\n          tempVariable5 = tempVariable3 + flag + alignedSize2;\n          if ((int)tempVariable5 < (int)alignedSize) goto LAB_08009bb0;\n          tempVariable1 = *(int *)(endPointer + 8);\n          endPointer = *(int *)(endPointer + 0xc);\n          *(int *)(tempVariable1 + 0xc) = endPointer;\n          *(int *)(endPointer + 8) = tempVariable1;\n          piVar7 = tempPointer + 2;\n          tempVariable1 = *piVar7;\n          tempVariable4 = tempPointer[3];\n          *(int *)(tempVariable1 + 0xc) = tempVariable4;\n          endPointer = (int)tempPointer + tempVariable5;\n          *(int *)(tempVariable4 + 8) = tempVariable1;\n          tempVariable2 = tempPointer;\n          if (0x24 < alignedSize2 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          alignedSize2 = alignedSize2 - 4;\n          tempVariable1 = *outputPointer;\n          tempPointer = piVar7;\n          if (0x13 < alignedSize2) {\n            tempVariable2[2] = tempVariable1;\n            tempVariable2[3] = outputPointer[1];\n            tempVariable1 = outputPointer[2];\n            if (alignedSize2 < 0x1c) {\n              outputPointer = outputPointer + 2;\n              tempPointer = tempVariable2 + 4;\n            }\n            else {\n              tempVariable2[4] = tempVariable1;\n              tempVariable2[5] = outputPointer[3];\n              tempVariable1 = outputPointer[4];\n              if (alignedSize2 == 0x24) {\n                tempVariable2[6] = tempVariable1;\n                tempVariable2[7] = outputPointer[5];\n                tempVariable1 = outputPointer[6];\n                outputPointer = outputPointer + 6;\n                tempPointer = tempVariable2 + 8;\n              }\n              else {\n                outputPointer = outputPointer + 4;\n                tempPointer = tempVariable2 + 6;\n              }\n            }\n          }\n          *tempPointer = tempVariable1;\n          tempPointer[1] = outputPointer[1];\n          tempPointer[2] = outputPointer[2];\n          outputPointer = piVar7;\n        }\n        else {\n          tempVariable1 = *(int *)(endPointer + 8);\n          tempVariable4 = *(int *)(endPointer + 0xc);\n          *(int *)(tempVariable1 + 0xc) = tempVariable4;\n          endPointer = (int)tempVariable2 + tempVariable5;\n          *(int *)(tempVariable4 + 8) = tempVariable1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(flag << 0x1f)) {\n        tempPointer = (int *)((int)tempVariable2 - outputPointer[-2]);\n        flag = tempPointer[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    tempPointer = (int *)FUN_08008af8(inputPointer,size);\n    if (tempPointer != (int *)0x0) {\n      if ((int *)((outputPointer[-1] & 0xfffffffeU) + (int)tempVariable2) == tempPointer + -2) {\n        tempVariable5 = alignedSize2 + (tempPointer[-1] & 0xfffffffcU);\n        endPointer = (int)tempVariable2 + tempVariable5;\n        goto LAB_08009c00;\n      }\n      alignedSize2 = alignedSize2 - 4;\n      if (alignedSize2 < 0x25) {\n        endPointer = *outputPointer;\n        tempVariable2 = outputPointer;\n        piVar7 = tempPointer;\n        if (0x13 < alignedSize2) {\n          *tempPointer = endPointer;\n          tempPointer[1] = outputPointer[1];\n          if (alignedSize2 < 0x1c) {\n            endPointer = outputPointer[2];\n            tempVariable2 = outputPointer + 2;\n            piVar7 = tempPointer + 2;\n          }\n          else {\n            tempPointer[2] = outputPointer[2];\n            tempPointer[3] = outputPointer[3];\n            if (alignedSize2 == 0x24) {\n              tempPointer[4] = outputPointer[4];\n              tempPointer[5] = outputPointer[5];\n              endPointer = outputPointer[6];\n              tempVariable2 = outputPointer + 6;\n              piVar7 = tempPointer + 6;\n            }\n            else {\n              endPointer = outputPointer[4];\n              tempVariable2 = outputPointer + 4;\n              piVar7 = tempPointer + 4;\n            }\n          }\n        }\n        *piVar7 = endPointer;\n        piVar7[1] = tempVariable2[1];\n        piVar7[2] = tempVariable2[2];\n      }\n      else {\n        FUN_08009a18(tempPointer,outputPointer);\n      }\n      FUN_080088ec(inputPointer,outputPointer);\n    }\n    FUN_080090b4(inputPointer);\n    outputPointer = tempPointer;\n  }\n  else {\nLAB_08009c00:\n    if (tempVariable5 - alignedSize < 0x10) {\n      tempVariable2[1] = tempVariable2[1] & 1U | tempVariable5;\n      *(uint *)(endPointer + 4) = *(uint *)(endPointer + 4) | 1;\n    }\n    else {\n      tempVariable2[1] = tempVariable2[1] & 1U | alignedSize;\n      *(uint *)((int)tempVariable2 + alignedSize + 4) = tempVariable5 - alignedSize | 1;\n      *(uint *)(endPointer + 4) = *(uint *)(endPointer + 4) | 1;\n      FUN_080088ec(inputPointer,(int)tempVariable2 + alignedSize + 8);\n    }\n    FUN_080090b4(inputPointer);\n  }\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "param_3": "size",
                "piVar1": "tempPointer",
                "iVar2": "tempVariable1",
                "piVar3": "tempVariable2",
                "uVar4": "tempVariable3",
                "iVar5": "tempVariable4",
                "uVar6": "flag",
                "uVar8": "alignedSize",
                "uVar9": "alignedSize2",
                "uVar10": "tempVariable5",
                "iVar11": "endPointer"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 158443,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}