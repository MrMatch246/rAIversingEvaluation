{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "calculate_double_from_uints_0800071c",
                "param_1": "first_uint",
                "param_2": "second_uint",
                "param_3": "third_uint",
                "param_4": "fourth_uint",
                "uVar1": "temp_uint_1",
                "uVar2": "temp_uint_2",
                "uVar3": "temp_uint_3",
                "uVar4": "temp_uint_4",
                "uVar5": "temp_uint_5",
                "uVar6": "temp_uint_6",
                "uVar7": "result_sign",
                "iVar8": "exponent_difference",
                "uVar9": "biased_exponent",
                "uVar10": "biased_second_exponent",
                "uVar11": "result_mantissa",
                "uVar12": "temp_mantissa",
                "uVar13": "first_exponent",
                "bVar14": "temp_bool_1",
                "bVar15": "temp_bool_2",
                "bVar16": "temp_bool_3"
            },
            "code": "\nulonglong calculate_double_from_uints_0800071c(undefined4 first_uint,uint second_uint,uint third_uint,uint fourth_uint)\n\n{\n  uint temp_uint_1;\n  uint temp_uint_2;\n  uint temp_uint_3;\n  uint temp_uint_4;\n  uint temp_uint_5;\n  uint temp_uint_6;\n  uint result_sign;\n  int exponent_difference;\n  uint biased_exponent;\n  uint unaff_r5;\n  uint biased_second_exponent;\n  uint result_mantissa;\n  uint temp_mantissa;\n  uint first_exponent;\n  bool temp_bool_1;\n  bool temp_bool_2;\n  bool temp_bool_3;\n  ulonglong temp_uint_17;\n  \n  temp_uint_17 = CONCAT44(second_uint,first_uint);\n  first_exponent = 0x7ff;\n  result_sign = second_uint >> 0x14 & 0x7ff;\n  temp_bool_1 = result_sign == 0;\n  if (!temp_bool_1) {\n    unaff_r5 = fourth_uint >> 0x14 & 0x7ff;\n    temp_bool_1 = unaff_r5 == 0;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = result_sign == 0x7ff;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = unaff_r5 == 0x7ff;\n  }\n  if (temp_bool_1) {\n    temp_uint_17 = FUN_0800088a();\n  }\n  biased_exponent = (uint)(temp_uint_17 >> 0x20);\n  result_mantissa = (uint)temp_uint_17;\n  exponent_difference = result_sign - unaff_r5;\n  if ((third_uint | fourth_uint << 0xc) == 0) {\n    result_sign = (biased_exponent ^ fourth_uint) & 0x80000000 | biased_exponent & 0xfffff;\n    temp_bool_3 = SCARRY4(exponent_difference,first_exponent >> 1);\n    biased_exponent = exponent_difference + (first_exponent >> 1);\n    temp_bool_1 = (int)biased_exponent < 0;\n    temp_bool_2 = biased_exponent == 0;\n    if (!temp_bool_2 && temp_bool_1 == temp_bool_3) {\n      temp_bool_3 = SBORROW4(first_exponent,biased_exponent);\n      temp_bool_1 = (int)(first_exponent - biased_exponent) < 0;\n      temp_bool_2 = first_exponent == biased_exponent;\n    }\n    if (!temp_bool_2 && temp_bool_1 == temp_bool_3) {\n      result_sign = result_sign | biased_exponent * 0x100000;\n    }\n    if (!temp_bool_2 && temp_bool_1 == temp_bool_3) {\n      return temp_uint_17 & 0xffffffff | (ulonglong)result_sign << 0x20;\n    }\n    result_sign = result_sign | 0x100000;\n    first_exponent = 0;\n    temp_bool_2 = SBORROW4(biased_exponent,1);\n    biased_exponent = biased_exponent - 1;\n    temp_bool_1 = biased_exponent == 0;\n    temp_uint_3 = biased_exponent;\n  }\n  else {\n    temp_uint_3 = (fourth_uint << 0xc) >> 4 | 0x10000000 | third_uint >> 0x18;\n    first_exponent = third_uint << 8;\n    biased_second_exponent = (biased_exponent << 0xc) >> 4 | 0x10000000 | result_mantissa >> 0x18;\n    result_mantissa = result_mantissa * 0x100;\n    result_sign = (biased_exponent ^ fourth_uint) & 0x80000000;\n    temp_bool_1 = temp_uint_3 <= biased_second_exponent;\n    if (biased_second_exponent == temp_uint_3) {\n      temp_bool_1 = first_exponent <= result_mantissa;\n    }\n    exponent_difference = exponent_difference + (uint)temp_bool_1;\n    biased_exponent = exponent_difference + 0x3fd;\n    if (temp_bool_1 == false) {\n      temp_uint_3 = temp_uint_3 >> 1;\n      first_exponent = (uint)((third_uint >> 0x18 & 1) != 0) << 0x1f | first_exponent >> 1;\n    }\n    temp_mantissa = result_mantissa - first_exponent;\n    biased_second_exponent = (biased_second_exponent - temp_uint_3) - (uint)(result_mantissa < first_exponent);\n    temp_uint_4 = temp_uint_3 >> 1;\n    temp_uint_1 = (uint)((temp_uint_3 & 1) != 0) << 0x1f | first_exponent >> 1;\n    result_mantissa = 0x100000;\n    temp_uint_3 = 0x80000;\n    while( true ) {\n      temp_bool_1 = temp_uint_1 <= temp_mantissa;\n      if (temp_uint_4 < biased_second_exponent || biased_second_exponent - temp_uint_4 < (uint)temp_bool_1) {\n        temp_mantissa = temp_mantissa - temp_uint_1;\n        result_mantissa = result_mantissa | temp_uint_3;\n        biased_second_exponent = (biased_second_exponent - temp_uint_4) - (uint)!temp_bool_1;\n      }\n      temp_uint_5 = temp_uint_4 >> 1;\n      temp_uint_1 = (uint)((temp_uint_4 & 1) != 0) << 0x1f | temp_uint_1 >> 1;\n      temp_bool_2 = temp_uint_1 <= temp_mantissa;\n      temp_bool_1 = biased_second_exponent - temp_uint_5 < (uint)temp_bool_2;\n      first_exponent = biased_second_exponent;\n      if (temp_uint_5 < biased_second_exponent || temp_bool_1) {\n        temp_mantissa = temp_mantissa - temp_uint_1;\n        first_exponent = (biased_second_exponent - temp_uint_5) - (uint)!temp_bool_2;\n      }\n      if (temp_uint_5 < biased_second_exponent || temp_bool_1) {\n        result_mantissa = result_mantissa | temp_uint_3 >> 1;\n      }\n      biased_second_exponent = temp_uint_4 >> 2;\n      temp_uint_2 = (uint)((temp_uint_5 & 1) != 0) << 0x1f | temp_uint_1 >> 1;\n      temp_bool_2 = temp_uint_2 <= temp_mantissa;\n      temp_bool_1 = first_exponent - biased_second_exponent < (uint)temp_bool_2;\n      temp_uint_5 = first_exponent;\n      if (biased_second_exponent < first_exponent || temp_bool_1) {\n        temp_mantissa = temp_mantissa - temp_uint_2;\n        temp_uint_5 = (first_exponent - biased_second_exponent) - (uint)!temp_bool_2;\n      }\n      if (biased_second_exponent < first_exponent || temp_bool_1) {\n        result_mantissa = result_mantissa | temp_uint_3 >> 2;\n      }\n      temp_uint_6 = temp_uint_4 >> 3;\n      temp_uint_1 = (uint)((biased_second_exponent & 1) != 0) << 0x1f | temp_uint_2 >> 1;\n      temp_bool_2 = temp_uint_1 <= temp_mantissa;\n      temp_bool_1 = temp_uint_5 - temp_uint_6 < (uint)temp_bool_2;\n      biased_second_exponent = temp_uint_5;\n      if (temp_uint_6 < temp_uint_5 || temp_bool_1) {\n        temp_mantissa = temp_mantissa - temp_uint_1;\n        biased_second_exponent = (temp_uint_5 - temp_uint_6) - (uint)!temp_bool_2;\n      }\n      if (temp_uint_6 < temp_uint_5 || temp_bool_1) {\n        result_mantissa = result_mantissa | temp_uint_3 >> 3;\n      }\n      first_exponent = biased_second_exponent | temp_mantissa;\n      if (first_exponent == 0) break;\n      biased_second_exponent = biased_second_exponent << 4 | temp_mantissa >> 0x1c;\n      temp_mantissa = temp_mantissa << 4;\n      temp_uint_4 = temp_uint_4 & 0xfffffff8 | temp_uint_1 >> 0x1d;\n      temp_uint_1 = (temp_uint_2 >> 1) << 3;\n      temp_uint_3 = temp_uint_3 >> 4;\n      if (temp_uint_3 == 0) {\n        temp_uint_6 = temp_uint_4;\n        if ((result_sign & 0x100000) != 0) goto LAB_0800083a;\n        result_sign = result_sign | result_mantissa;\n        result_mantissa = 0;\n        temp_uint_3 = 0x80000000;\n      }\n    }\n    if ((result_sign & 0x100000) == 0) {\n      result_sign = result_sign | result_mantissa;\n      result_mantissa = 0;\n    }\nLAB_0800083a:\n    temp_bool_3 = 0xfc < biased_exponent;\n    temp_bool_2 = SBORROW4(biased_exponent,0xfd);\n    temp_uint_4 = exponent_difference + 0x300;\n    temp_bool_1 = temp_uint_4 == 0;\n    temp_uint_3 = temp_uint_4;\n    if (temp_bool_3 && !temp_bool_1) {\n      temp_bool_3 = 0x6ff < temp_uint_4;\n      temp_bool_2 = SBORROW4(temp_uint_4,0x700);\n      temp_uint_3 = exponent_difference - 0x400;\n      temp_bool_1 = temp_uint_4 == 0x700;\n    }\n    if (!temp_bool_3 || temp_bool_1) {\n      temp_bool_1 = temp_uint_6 <= biased_second_exponent;\n      if (biased_second_exponent == temp_uint_6) {\n        temp_bool_1 = temp_uint_1 <= temp_mantissa;\n      }\n      if (biased_second_exponent == temp_uint_6 && temp_mantissa == temp_uint_1) {\n        temp_bool_1 = (result_mantissa & 1) != 0;\n      }\n      return CONCAT44(result_sign + biased_exponent * 0x100000 + (uint)CARRY4(result_mantissa,(uint)temp_bool_1),result_mantissa + temp_bool_1);\n    }\n  }\n  if (!temp_bool_1 && (int)temp_uint_3 < 0 == temp_bool_2) {\n    return (ulonglong)(result_sign & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_bool_3 = SCARRY4(biased_exponent,0x36);\n  temp_bool_1 = (int)(biased_exponent + 0x36) < 0;\n  temp_bool_2 = biased_exponent == 0xffffffca;\n  if (temp_bool_2 || temp_bool_1 != temp_bool_3) {\n    result_mantissa = 0;\n  }\n  if (temp_bool_2 || temp_bool_1 != temp_bool_3) {\n    result_sign = result_sign & 0x80000000;\n  }\n  if (temp_bool_2 || temp_bool_1 != temp_bool_3) {\n    return CONCAT44(result_sign,result_mantissa);\n  }\n  temp_uint_3 = -biased_exponent;\n  biased_second_exponent = temp_uint_3 - 0x20;\n  if (0x1f < (int)temp_uint_3) {\n    temp_uint_3 = result_mantissa >> (biased_second_exponent & 0xff) | result_sign << (0x20 - biased_second_exponent & 0xff);\n    biased_exponent = (result_sign >> (biased_second_exponent & 0xff) & ~((result_sign & 0x80000000) >> (biased_second_exponent & 0xff))) -\n            ((int)temp_uint_3 >> 0x1f);\n    if ((first_exponent | result_mantissa << (0x20 - biased_second_exponent & 0xff) | temp_uint_3 << 1) == 0) {\n      biased_exponent = biased_exponent & ~(temp_uint_3 >> 0x1f);\n    }\n    return CONCAT44(result_sign,biased_exponent) & 0x80000000ffffffff;\n  }\n  exponent_difference = temp_uint_3 - 0x14;\n  if (exponent_difference != 0 && exponent_difference < 0 == SCARRY4(biased_second_exponent,0xc)) {\n    biased_exponent = 0xc - exponent_difference;\n    temp_uint_3 = result_mantissa << (biased_exponent & 0xff);\n    result_mantissa = result_mantissa >> (0x20 - biased_exponent & 0xff) | result_sign << (biased_exponent & 0xff);\n    biased_exponent = result_mantissa + -((int)temp_uint_3 >> 0x1f);\n    if ((first_exponent | temp_uint_3 << 1) == 0) {\n      biased_exponent = biased_exponent & ~(temp_uint_3 >> 0x1f);\n    }\n    return CONCAT44((result_sign & 0x80000000) + (uint)CARRY4(result_mantissa,-((int)temp_uint_3 >> 0x1f)),biased_exponent);\n  }\n  biased_second_exponent = result_mantissa << (biased_exponent + 0x20 & 0xff);\n  result_mantissa = result_mantissa >> (temp_uint_3 & 0xff) | result_sign << (biased_exponent + 0x20 & 0xff);\n  biased_exponent = result_mantissa + -((int)biased_second_exponent >> 0x1f);\n  if ((first_exponent | biased_second_exponent << 1) == 0) {\n    biased_exponent = biased_exponent & ~(biased_second_exponent >> 0x1f);\n  }\n  return CONCAT44((result_sign & 0x80000000) +\n                  ((result_sign & 0x7fffffff) >> (temp_uint_3 & 0xff)) +\n                  (uint)CARRY4(result_mantissa,-((int)biased_second_exponent >> 0x1f)),biased_exponent);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_double_from_uints_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_flag_if_param_equals_dat_080036a8",
                "param_1": "data",
                "param_2": "value",
                "DAT_080036f4": "PTR_DAT_080036f4"
            },
            "code": "int set_flag_if_param_equals_dat_080036a8(uint **data, int value)\n{\n  set_value(*data, value, 1);\n  if (*data == DAT_080036f4) {\n    (*data)[0x11] = (*data)[0x11] | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_equals_dat_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "improved_memory_allocation_080088ec",
                "param_1": "function_pointer",
                "param_2": "size",
                "param_3": "unknown_parameter_1",
                "param_4": "unknown_parameter_2",
                "iVar1": "temp_variable_1",
                "iVar2": "temp_variable_2",
                "puVar3": "pointer_1",
                "uVar4": "unsigned_variable_1",
                "uVar5": "unsigned_variable_2",
                "uVar6": "unsigned_variable_3",
                "puVar7": "pointer_2",
                "puVar8": "pointer_3",
                "puVar9": "pointer_4",
                "uVar10": "unsigned_variable_4",
                "iVar11": "temp_variable_3"
            },
            "code": "\nvoid improved_memory_allocation_080088ec(undefined4 function_pointer,int size,undefined4 unknown_parameter_1,undefined4 unknown_parameter_2)\n\n{\n  int temp_variable_1;\n  int temp_variable_2;\n  uint *pointer_1;\n  uint unsigned_variable_1;\n  uint unsigned_variable_2;\n  uint unsigned_variable_3;\n  undefined *pointer_2;\n  undefined *pointer_3;\n  undefined *pointer_4;\n  uint unsigned_variable_4;\n  int temp_variable_3;\n  \n  if (size == 0) {\n    return;\n  }\n  FUN_080090a8();\n  pointer_3 = PTR_DAT_08008ac4;\n  unsigned_variable_4 = *(uint *)(size + -4);\n  temp_variable_2 = size + -8;\n  unsigned_variable_2 = unsigned_variable_4 & 0xfffffffe;\n  pointer_1 = (uint *)(temp_variable_2 + unsigned_variable_2);\n  unsigned_variable_3 = pointer_1[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == pointer_1) {\n    unsigned_variable_2 = unsigned_variable_2 + unsigned_variable_3;\n    if ((unsigned_variable_4 & 1) == 0) {\n      temp_variable_2 = temp_variable_2 - *(int *)(size + -8);\n      temp_variable_3 = *(int *)(temp_variable_2 + 8);\n      temp_variable_1 = *(int *)(temp_variable_2 + 0xc);\n      unsigned_variable_2 = unsigned_variable_2 + *(int *)(size + -8);\n      *(int *)(temp_variable_3 + 0xc) = temp_variable_1;\n      *(int *)(temp_variable_1 + 8) = temp_variable_3;\n    }\n    unsigned_variable_3 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(temp_variable_2 + 4) = unsigned_variable_2 | 1;\n    *(int *)(pointer_3 + 8) = temp_variable_2;\n    if (unsigned_variable_3 <= unsigned_variable_2) {\n      FUN_0800884c(function_pointer,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    FUN_080090b4(function_pointer);\n    return;\n  }\n  pointer_1[1] = unsigned_variable_3;\n  if ((unsigned_variable_4 & 1) == 0) {\n    temp_variable_2 = temp_variable_2 - *(int *)(size + -8);\n    pointer_4 = *(undefined **)(temp_variable_2 + 8);\n    unsigned_variable_2 = unsigned_variable_2 + *(int *)(size + -8);\n    unsigned_variable_4 = *(uint *)((int)pointer_1 + unsigned_variable_3 + 4) & 1;\n    if (pointer_4 == pointer_3 + 8) {\n      if (unsigned_variable_4 == 0) {\n        unsigned_variable_4 = pointer_1[2];\n        unsigned_variable_1 = pointer_1[3];\n        unsigned_variable_2 = unsigned_variable_2 + unsigned_variable_3;\n        *(uint *)(unsigned_variable_4 + 0xc) = unsigned_variable_1;\n        *(uint *)(unsigned_variable_1 + 8) = unsigned_variable_4;\n        *(uint *)(temp_variable_2 + 4) = unsigned_variable_2 | 1;\n        *(uint *)(temp_variable_2 + unsigned_variable_2) = unsigned_variable_2;\n      }\n      else {\n        *(uint *)(temp_variable_2 + 4) = unsigned_variable_2 | 1;\n        *pointer_1 = unsigned_variable_2;\n      }\n      goto LAB_080089f0;\n    }\n    temp_variable_3 = *(int *)(temp_variable_2 + 0xc);\n    *(int *)(pointer_4 + 0xc) = temp_variable_3;\n    *(undefined **)(temp_variable_3 + 8) = pointer_4;\n  }\n  else {\n    unsigned_variable_4 = *(uint *)((int)pointer_1 + unsigned_variable_3 + 4) & 1;\n  }\n  if (unsigned_variable_4 == 0) {\n    pointer_4 = (undefined *)pointer_1[2];\n    unsigned_variable_2 = unsigned_variable_2 + unsigned_variable_3;\n    if (pointer_4 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(pointer_3 + 0x10) = temp_variable_2;\n      *(int *)(pointer_3 + 0x14) = temp_variable_2;\n      *(undefined **)(temp_variable_2 + 8) = pointer_4;\n      *(undefined **)(temp_variable_2 + 0xc) = pointer_4;\n      *(uint *)(temp_variable_2 + 4) = unsigned_variable_2 | 1;\n      *(uint *)(temp_variable_2 + unsigned_variable_2) = unsigned_variable_2;\n      goto LAB_080089f0;\n    }\n    unsigned_variable_3 = pointer_1[3];\n    *(uint *)(pointer_4 + 0xc) = unsigned_variable_3;\n    *(undefined **)(unsigned_variable_3 + 8) = pointer_4;\n    *(uint *)(temp_variable_2 + 4) = unsigned_variable_2 | 1;\n    *(uint *)(temp_variable_2 + unsigned_variable_2) = unsigned_variable_2;\n  }\n  else {\n    *(uint *)(temp_variable_2 + 4) = unsigned_variable_2 | 1;\n    *(uint *)(temp_variable_2 + unsigned_variable_2) = unsigned_variable_2;\n  }\n  if (unsigned_variable_2 < 0x200) {\n    temp_variable_3 = (unsigned_variable_2 >> 3) + 1;\n    unsigned_variable_2 = 1 << ((int)(unsigned_variable_2 >> 3) >> 2 & 0xffU) | *(uint *)(pointer_3 + 4);\n    temp_variable_1 = *(int *)(pointer_3 + temp_variable_3 * 8);\n    *(int *)(temp_variable_2 + 8) = temp_variable_1;\n    *(undefined **)(temp_variable_2 + 0xc) = pointer_3 + temp_variable_3 * 8 + -8;\n    *(uint *)(pointer_3 + 4) = unsigned_variable_2;\n    *(int *)(pointer_3 + temp_variable_3 * 8) = temp_variable_2;\n    *(int *)(temp_variable_1 + 0xc) = temp_variable_2;\n    FUN_080090b4(function_pointer,temp_variable_2,unsigned_variable_2,unknown_parameter_2);\n    return;\n  }\n  unsigned_variable_3 = unsigned_variable_2 >> 9;\n  if (unsigned_variable_3 < 5) {\n    temp_variable_3 = ((unsigned_variable_2 >> 6) + 0x39) * 8;\n    temp_variable_1 = (unsigned_variable_2 >> 6) + 0x38;\n  }\n  else if (unsigned_variable_3 < 0x15) {\n    temp_variable_3 = (unsigned_variable_3 + 0x5c) * 8;\n    temp_variable_1 = unsigned_variable_3 + 0x5b;\n  }\n  else if (unsigned_variable_3 < 0x55) {\n    temp_variable_3 = ((unsigned_variable_2 >> 0xc) + 0x6f) * 8;\n    temp_variable_1 = (unsigned_variable_2 >> 0xc) + 0x6e;\n  }\n  else if (unsigned_variable_3 < 0x155) {\n    temp_variable_3 = ((unsigned_variable_2 >> 0xf) + 0x78) * 8;\n    temp_variable_1 = (unsigned_variable_2 >> 0xf) + 0x77;\n  }\n  else if (unsigned_variable_3 < 0x555) {\n    temp_variable_3 = ((unsigned_variable_2 >> 0x12) + 0x7d) * 8;\n    temp_variable_1 = (unsigned_variable_2 >> 0x12) + 0x7c;\n  }\n  else {\n    temp_variable_3 = 0x3f8;\n    temp_variable_1 = 0x7e;\n  }\n  pointer_4 = *(undefined **)(pointer_3 + temp_variable_3);\n  pointer_2 = pointer_3 + temp_variable_3 + -8;\n  if (pointer_2 == pointer_4) {\n    pointer_4 = (undefined *)(1 << (temp_variable_1 >> 2 & 0xffU) | *(uint *)(pointer_3 + 4));\n    *(undefined **)(pointer_3 + 4) = pointer_4;\n    pointer_3 = pointer_2;\n  }\n  else {\n    do {\n      pointer_3 = pointer_4;\n      if ((*(uint *)(pointer_4 + 4) & 0xfffffffc) <= unsigned_variable_2) break;\n      pointer_4 = *(undefined **)(pointer_4 + 8);\n      pointer_3 = pointer_2;\n    } while (pointer_2 != pointer_4);\n    pointer_2 = *(undefined **)(pointer_3 + 0xc);\n  }\n  *(undefined **)(temp_variable_2 + 8) = pointer_3;\n  *(undefined **)(temp_variable_2 + 0xc) = pointer_2;\n  *(int *)(pointer_2 + 8) = temp_variable_2;\n  *(int *)(pointer_3 + 0xc) = temp_variable_2;\n  FUN_080090b4(function_pointer,temp_variable_2,pointer_4,unknown_parameter_2);\n  return;\n}\n\n",
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08009adc",
                "FUN_08005e9c",
                "FUN_08008af8",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "improved_memory_allocation_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "FUN_080014f0": "initialize_subsystem_1",
                "FUN_080052a0": "initialize_subsystem_2",
                "FUN_080055f4": "initialize_subsystem_3",
                "FUN_08005348": "initialize_subsystem_4",
                "FUN_08005598": "initialize_subsystem_5",
                "FUN_08005500": "initialize_subsystem_6",
                "FUN_080053b0": "initialize_subsystem_7",
                "PTR_FUN_08004ea4_1_08005280": "subsystem_ptr_1",
                "PTR_FUN_08004ee8_1_08005288": "subsystem_ptr_2",
                "PTR_FUN_08004f2c_1_08005290": "subsystem_ptr_3",
                "PTR_DAT_0800527c": "system_ptr_1",
                "PTR_DAT_08005284": "system_ptr_2",
                "PTR_DAT_0800528c": "system_ptr_3",
                "FUN_080036a8": "initialize_subsystem_8",
                "PTR_DAT_08005294": "system_data_ptr_1",
                "FUN_0800491c": "initialize_subsystem_9",
                "PTR_DAT_08005298": "system_data_ptr_2",
                "FUN_0800360c": "initialize_subsystem_10",
                "PTR_DAT_0800529c": "system_data_ptr_3",
                "FUN_08004e74": "initialize_subsystem_11"
            },
            "code": "void initialize_system_08005224(void)\n{\n  initialize_subsystem_1();\n  initialize_subsystem_2();\n  initialize_subsystem_3();\n  initialize_subsystem_4();\n  initialize_subsystem_5();\n  initialize_subsystem_6();\n  initialize_subsystem_7();\n  *(void **)PTR_DAT_0800527c = PTR_FUN_08004ea4_1_08005280;\n  *(void **)PTR_DAT_08005284 = PTR_FUN_08004ee8_1_08005288;\n  *(void **)PTR_DAT_0800528c = PTR_FUN_08004f2c_1_08005290;\n  initialize_subsystem_8(PTR_DAT_08005294,0);\n  initialize_subsystem_8(PTR_DAT_08005294,0xc);\n  initialize_subsystem_9(PTR_DAT_08005298);\n  initialize_subsystem_10(PTR_DAT_0800529c);\n  initialize_subsystem_11(0);\n  do {\n  } while(true);\n}",
            "called": [
                "FUN_08005348",
                "FUN_08005598",
                "FUN_08004e74",
                "FUN_080055f4",
                "FUN_080052a0",
                "FUN_0800360c",
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080036a8",
                "FUN_080014f0",
                "FUN_0800491c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "initialize_system_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_result_08003440",
                "local_30": "local_variable",
                "local_2c": "flag",
                "uStack_28": "stack_variable_1",
                "uStack_24": "stack_variable_2",
                "uStack_20": "stack_variable_3",
                "local_1c": "local_variable_2",
                "local_18": "local_variable_3",
                "local_14": "flag_2",
                "local_10": "result",
                "local_c": "result_2",
                "byte_value": "byte_value",
                "byte_index": "byte_index",
                "word_value": "word_value",
                "DAT_080034f0": "PTR_DAT_080034f0",
                "DAT_080034f8": "DAT_080034f8",
                "DAT_080034fc": "DAT_080034fc",
                "DAT_08003500": "DAT_08003500"
            },
            "code": "uint calculate_result_08003440(void)\n{\n  uint result = 0;\n  uint flag = *(uint *)(DAT_080034f8 + 4);\n  uint multiplier = DAT_080034fc;\n  uint local_variable = 0;\n  uint byte_index = flag >> 0x12 & 0xf;\n  uint byte_value = *(byte *)((int)&local_variable + byte_index);\n  uint word_value = *(uint *)(DAT_080034f8 + 4) >> 0x11 & 1;\n  if ((flag & 0xc) == 4) {\n    result = multiplier;\n  }\n  else if ((flag & 0xc) == 8) {\n    uint local_variable2 = byte_value;\n    if ((flag & 0x10000) == 0) {\n      result = DAT_08003500 * local_variable2;\n    }\n    else {\n      result = (DAT_080034fc * local_variable2) / (uint)byte_value;\n    }\n  }\n  else {\n    result = DAT_080034fc;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_result_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_result_from_function_08004f2c",
                "uVar1": "result",
                "FUN_080015a0": "call_other_function"
            },
            "code": "int get_result_from_function_08004f2c(){\n  int result = call_other_function();\n  return result;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_result_from_function_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "status",
                "PTR_DAT_080053a0": "PTR_data_array",
                "DAT_080053a4": "initial_value_1",
                "DAT_080053a8": "initial_value_2",
                "FUN_08001ab0": "call_function",
                "PTR_s____src_main_c_080053ac": "PTR_error_message"
            },
            "code": "void initialize_data_08005348(void)\n{\n  int status;\n  data_array[0] = DAT_080053a4;\n  data_array[1] = DAT_080053a8;\n  data_array[2] = 0;\n  data_array[3] = 0;\n  data_array[4] = 0x4000;\n  data_array[5] = 0;\n  data_array[6] = 0;\n  data_array[7] = 0;\n  data_array[8] = 0;\n  status = call_function(PTR_DAT_080053a0);\n  if (status != 0) {\n    display_error_message(PTR_s____src_main_c_080053ac, 0x17a);\n  }\n  return;\n}",
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "param_array",
                "lVar1": "dividend_1",
                "lVar2": "dividend_2",
                "iVar3": "quotient_1",
                "iVar4": "quotient_2",
                "iVar5": "quotient_3",
                "uVar6": "uVar",
                "DAT_08004914": "PTR_DAT_08004914",
                "*param_1": "*param_array",
                "*(uint *)(*param_1 + 0x10)": "*ptr_1",
                "*(uint *)(*param_1 + 0xc)": "*ptr_2",
                "*(uint *)(*param_1 + 0x14)": "*ptr_3",
                "*(uint *)(*param_1 + 8)": "*ptr_4"
            },
            "code": "void calculate_values_080046ec(int *param_array)\n{\n  longlong dividend_1;\n  longlong dividend_2;\n  int quotient_1;\n  int quotient_2;\n  int quotient_3;\n  int quotient_4;\n  uint *ptr_1 = (uint *)(*param_array + 0x10);\n  uint *ptr_2 = (uint *)(*param_array + 0xc);\n  uint *ptr_3 = (uint *)(*param_array + 0x14);\n  uint *ptr_4 = (uint *)(*param_array + 8);\n  \n  *ptr_1 = param_array[3] | (*ptr_1 & 0xffffcfff);\n  \n  *ptr_2 = (*ptr_2 & 0xffffe9f3) | param_array[5] | param_array[2] | param_array[4];\n  \n  *ptr_3 = param_array[6] | (*ptr_3 & 0xfffffcff);\n  \n  if (*param_array == DAT_08004914) {\n    uint uVar1 = FUN_08003540();\n    quotient_1 = (int)(uVar1 * 0x19) / (param_array[1] << 2);\n    dividend_1 = (longlong)PTR_DAT_08004918 * quotient_1;\n    quotient_2 = FUN_08003540((int)uVar1, (int)(uVar1 >> 0x20), (int)dividend_1);\n    quotient_3 = param_array[1];\n    uint uVar2 = FUN_08003540();\n    quotient_4 = (int)(uVar2 * 0x19) / (quotient_3 << 2);\n    dividend_2 = (longlong)PTR_DAT_08004918 * (quotient_4 + (int)(PTR_DAT_08004918 * ((uVar2 * 0x19) / (quotient_3 << 2)) >> 0x25) * -100 + 0x32);\n    *ptr_4 = ((uint)(dividend_2 * 0x10) >> 0x25) & 0xf) + ((uint)(dividend_1 >> 0x25) * 0x10) + ((uint)((dividend_2 >> 0x25) & 0xf0));\n  }\n  else {\n    uint uVar3 = FUN_08003518();\n    quotient_1 = (int)(uVar3 * 0x19) / (param_array[1] << 2);\n    dividend_1 = (longlong)PTR_DAT_08004918 * quotient_1;\n    quotient_2 = FUN_08003518((int)uVar3, (int)(uVar3 >> 0x20), (int)dividend_1);\n    quotient_3 = param_array[1];\n    uint uVar4 = FUN_08003518();\n    quotient_4 = (int)(uVar4 * 0x19) / (quotient_3 << 2);\n    dividend_2 = (longlong)PTR_DAT_08004918 * (quotient_4 + (int)(PTR_DAT_08004918 * ((uVar4 * 0x19) / (quotient_3 << 2)) >> 0x25) * -100 + 0x32);\n    *ptr_4 = ((uint)(dividend_2 * 0x10) >> 0x25) & 0xf) + ((uint)(dividend_1 >> 0x25) * 0x10) + ((uint)((dividend_2 >> 0x25) & 0xf0));\n  }\n  return;\n}",
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_08005500",
                "iVar1": "status",
                "local_20": "page_size",
                "local_1c": "zero",
                "local_18": "memory",
                "PTR_DAT_08005590": "memory",
                "PTR_s____src_main_c_08005594": "error_message"
            },
            "code": "void initialize_08005500(void)\n{\n  int status;\n  unsigned int PTR_DAT_08005590[4];\n  PTR_DAT_08005590[0] = 0x40000000;\n  PTR_DAT_08005590[1] = 36000;\n  PTR_DAT_08005590[2] = 0;\n  PTR_DAT_08005590[3] = 20;\n  PTR_DAT_08005590[4] = 0;\n  PTR_DAT_08005590[5] = 0;\n  status = initialize_08005500_PTR_DAT_08005590(PTR_DAT_08005590);\n  if (status != 0) {\n    print_error(\"Error: Memory initialization failed.\");\n  }\n  unsigned int page_size = 0x1000;\n  status = set_page_size(PTR_DAT_08005590, &page_size);\n  if (status != 0) {\n    print_error(\"Error: Setting page size failed.\");\n  }\n  unsigned int permissions = 0x20;\n  status = set_permissions(PTR_DAT_08005590, &permissions);\n  if (status != 0) {\n    print_error(\"Error: Setting permissions failed.\");\n  }\n}\n",
            "called": [
                "FUN_08003a94",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_status_08002c2e",
                "param_1": "status_ptr",
                "param_2": "max_status_checks",
                "param_3": "offset",
                "iVar1": "check_result"
            },
            "code": "int check_status_08002c2e(int *status_ptr, uint32_t max_status_checks, int offset) {\n    int check_result;\n    while (true) {\n        if ((*(uint32_t *)(*status_ptr + 0x14) & 4) == 4) {\n            return 0;\n        }\n        check_result = check_next_status(status_ptr);\n        if (check_result != 0) {\n            break;\n        }\n        if ((max_status_checks != 0xffffffff) && ((max_status_checks == 0 || (check_result = get_status_size(), max_status_checks < (uint32_t)(check_result - offset))))) {\n            status_ptr[0x10] = status_ptr[0x10] | 0x20;\n            status_ptr[0xc] = 0;\n            *(undefined *)((int)status_ptr + 0x3d) = 0x20;\n            *(undefined *)(status_ptr + 0xf) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_status_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "count_down_08003568",
                "param_1": "num",
                "local_c": "product",
                "DAT_080035a0": "global_constant",
                "PTR_DAT_0800359c": "global_pointer"
            },
            "code": "void count_down_08003568(int num)\n{\n  int product = num * (uint)((ulonglong)DAT_080035a0 * (ulonglong)*PTR_DAT_0800359c >> 0x29);\n  do {\n    product--;\n  } while (product != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "count_down_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_statistics_080049cc",
                "param_1": "data",
                "local_20": "num_of_elements",
                "local_c": "sum",
                "local_10": "product",
                "local_14": "sum_of_squares",
                "local_18": "sum_of_products",
                "local_24": "function_pointer",
                "local_1c": "i",
                "local_28": "local_sum_of_squares",
                "local_2c": "local_sum_of_products"
            },
            "code": "void calculate_statistics_080049cc(int data)\n{\n    int num_of_elements = 1;\n    int sum = 0;\n    int sum_of_squares = 0;\n    int sum_of_products = 0;\n    int mean = 0;\n    int variance = 0;\n    int covar = 0;\n    int product = 0;\n    sum = 0;\n    product = 0;\n    int (*function_pointer)() = *(int (**)(void))(PTR_DAT_08004adc);\n    for (int i = 0; i < num_of_elements; i++) {\n        int local_28 = 0;\n        int local_2c = 0;\n        FUN_08004ae0(data);\n        FUN_08004d78(data,&local_28,&local_2c);\n        sum_of_squares = FUN_08000aa8(sum_of_squares,local_28);\n        sum_of_products = FUN_08000aa8(sum_of_products,local_2c);\n        sum = FUN_08000aa8(sum,*(int *)(data + 0x10));\n        product = FUN_08000aa8(product,*(int *)(data + 0x14));\n        function_pointer = *(int (**)(void))(PTR_DAT_08004adc);\n        num_of_elements++;\n    }\n    mean = FUN_08000c10(num_of_elements);\n    variance = FUN_08000e20(sum,mean);\n    *(int *)(data + 0x1c) = variance;\n    covar = FUN_08000c10(num_of_elements);\n    covar = FUN_08000e20(product,covar);\n    *(int *)(data + 0x20) = covar;\n    mean = FUN_08000c10(num_of_elements);\n    mean = FUN_08000e20(sum_of_squares,mean);\n    *(int *)(data + 0x24) = mean;\n    variance = FUN_08000c10(num_of_elements);\n    variance = FUN_08000e20(sum_of_products,variance);\n    *(int *)(data + 0x28) = variance;\n    return;\n}",
            "called": [
                "FUN_08004ae0",
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "calculate_statistics_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "update_data_08003c94",
                "param_1": "data_ptr",
                "param_2": "new_data_ptr",
                "local_c": "original_data",
                "DAT_08003d54": "PTR_SPECIAL_1",
                "DAT_08003d58": "PTR_SPECIAL_2",
                "DAT_08003d5c": "PTR_SPECIAL_3"
            },
            "code": "void update_data_08003c94(uint *data_ptr, uint *new_data_ptr)\n{\n  uint original_data = *data_ptr;\n  bool is_data_ptr_special = (data_ptr == DAT_08003d54 || data_ptr == DAT_08003d58 || data_ptr == DAT_08003d5c || data_ptr == PTR_SPECIAL_4);\n  if (is_data_ptr_special) {\n    original_data = new_data_ptr[1] | original_data & 0xffffff8f;\n  }\n  bool is_data_ptr_special_2 = (data_ptr == DAT_08003d54 || data_ptr == DAT_08003d58 || data_ptr == DAT_08003d5c || data_ptr == PTR_SPECIAL_4);\n  if (is_data_ptr_special_2) {\n    original_data = new_data_ptr[3] | original_data & 0xfffffcff;\n  }\n  *data_ptr = new_data_ptr[5] | original_data & 0xffffff7f;\n  data_ptr[11] = new_data_ptr[2];\n  data_ptr[10] = *new_data_ptr;\n  if (data_ptr == DAT_08003d54) {\n    data_ptr[12] = new_data_ptr[4];\n  }\n  data_ptr[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "update_data_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "execute_function_with_swapped_arguments_08000978",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "code": "void execute_function_with_swapped_arguments_08000978(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  execute_function_with_swapped_arguments_08000978(arg3, arg4, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "execute_function_with_swapped_arguments_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "param_1": "memory_pool_start",
                "param_2": "block_size",
                "puVar1": "memory_pool_header",
                "puVar2": "memory_block_ptr",
                "iVar3": "memory_block_header",
                "iVar4": "block_offset",
                "uVar5": "memory_pool_size"
            },
            "code": "int allocate_memory_block_0800884c(void* memory_pool_start, int block_size)\\n\\\n{\\n\\\n  void *memory_pool_ptr;\\n\\\n  void *memory_block_ptr;\\n\\\n  int block_size_rounded;\\n\\\n  int block_offset;\\n\\\n  uint32_t *memory_pool_header;\\n\\\n  int memory_pool_size;\\n\\\n  int memory_block_offset;\\n\\\n  int memory_block_header;\\n\\\n  \\n\\\n  memory_pool_header = PTR_DAT_080088e0;\\n\\\n  initialize_memory_pool();\\n\\\n  memory_pool_size = *(int *)(memory_pool_header + 2);\\n\\\n  block_size_rounded = (block_size + 3) & 0xfffffffc;\\n\\\n  block_offset = (0xfef - block_size_rounded + *(uint32_t *)(*(int *)(memory_pool_header + 2) + 4)) & 0xfffff000;\\n\\\n  if (block_offset > 0xfff) {\\n\\\n    memory_block_offset = FUN_08009744(memory_pool_start, 0);\\n\\\n    if (memory_block_offset == *(int *)(memory_pool_header + 2) + *(uint32_t *)(*(int *)(memory_pool_header + 2) + 4)) {\\n\\\n      memory_block_offset = FUN_08009744(memory_pool_start, -block_offset);\\n\\\n      memory_block_ptr = PTR_DAT_080088e4;\\n\\\n      if (memory_block_offset != -1) {\\n\\\n        memory_block_header = *(int *)PTR_DAT_080088e4;\\n\\\n        *(uint32_t *)(*(int *)(memory_pool_header + 2) + 4) = *(uint32_t *)(*(int *)(memory_pool_header + 2) + 4) - block_offset | 1;\\n\\\n        *(int *)memory_block_ptr = memory_block_header - block_offset;\\n\\\n        finalize_memory_pool();\\n\\\n        return 1;\\n\\\n      }\\n\\\n      memory_block_offset = FUN_08009744(memory_pool_start, 0);\\n\\\n      memory_block_ptr = PTR_DAT_080088e4;\\n\\\n      memory_block_offset -= *(int *)(memory_pool_header + 2);\\n\\\n      if (memory_block_offset > 0xf) {\\n\\\n        memory_block_header = *(int *)PTR_DAT_080088e8;\\n\\\n        *(uint32_t *)(*(int *)(memory_pool_header + 2) + 4) = memory_block_offset | 1;\\n\\\n        *(int *)memory_block_ptr = memory_block_offset - memory_block_header;\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  finalize_memory_pool();\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_byte_in_array_0800901c",
                "param_1": "array",
                "param_2": "array_size",
                "param_3": "byte_to_find",
                "puVar1": "current_array_element",
                "uVar2": "byte_to_find_masked",
                "uVar3": "previous_array_element",
                "puVar4": "last_array_element",
                "uVar5": "byte_to_find_masked",
                "bVar6": "is_byte_found"
            },
            "code": "uint* find_byte_in_array_0800901c(uint* array, uint array_size, uint* byte_to_find) {\n    uint* current_array_element;\n    uint byte_to_find_masked;\n    uint previous_array_element;\n    uint current_array_element_xor_mask;\n    bool is_byte_found = false;\n\n    byte_to_find_masked = array_size & 0xff;\n    current_array_element = array;\n\n    if (((uint)array & 3) == 0) {\n        while (array_size > (uint*)0x3) {\n            previous_array_element = *current_array_element;\n            current_array_element_xor_mask = previous_array_element ^ (byte_to_find_masked << 8 | byte_to_find_masked);\n            if ((current_array_element_xor_mask + 0xfefefeff & ~current_array_element_xor_mask & 0x80808080) != 0) {\n                is_byte_found = true;\n                break;\n            }\n            array_size--;\n            current_array_element++;\n        }\n    }\n    else {\n        uint* last_array_element = array + (array_size - 1);\n        if (array_size != (uint*)0x0) {\n            if (*(byte*)array != byte_to_find_masked) {\n                while (current_array_element != last_array_element) {\n                    current_array_element++;\n                    if (*(byte*)current_array_element == byte_to_find_masked) {\n                        is_byte_found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    return is_byte_found ? current_array_element : (uint*)0x0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "find_byte_in_array_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_flag_if_parameter_is_four_0800177c",
                "param_1": "parameter",
                "DAT_080017b0": "data_ptr"
            },
            "code": "void set_flag_if_parameter_is_four_0800177c(int parameter)\n{\n  int* DAT_080017b0 = DAT_080017b0;\n  if (parameter == 4) {\n    *DAT_080017b0 |= 4;\n  }\n  else {\n    *DAT_080017b0 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_flag_if_parameter_is_four_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "set_fun_to_zero_080017b4",
                "FUN_08004f78": "set_fun_value_to_zero"
            },
            "code": "void set_fun_to_zero_080017b4(void)\n{\n  set_fun_value_to_zero(0);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "set_fun_to_zero_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "status",
                "PTR_DAT_080055e8": "data_pointer_1",
                "DAT_080055ec": "data_value_1",
                "PTR_s____src_main_c_080055f0": "error_message",
                "FUN_0800438a": "call_function",
                "0x1c200": "initial_value"
            },
            "code": "void initialize_data_08005598(void)\n{\n  int status;\n  *PTR_DAT_080055e8 = DAT_080055ec;\n  *(PTR_DAT_080055e8 + 1) = 0x1c200;\n  *(PTR_DAT_080055e8 + 2) = 0;\n  *(PTR_DAT_080055e8 + 3) = 0;\n  *(PTR_DAT_080055e8 + 4) = 0;\n  *(PTR_DAT_080055e8 + 5) = 0xc;\n  *(PTR_DAT_080055e8 + 6) = 0;\n  *(PTR_DAT_080055e8 + 7) = 0;\n  status = call_function(PTR_DAT_080055e8);\n  if (status != 0) {\n    print_PTR_s____src_main_c_080055f0(PTR_s____src_main_c_080055f0, 0x1ed);\n  }\n  return;\n}",
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_string_08001030",
                "in_CY": "current_character",
                "FUN_08000fc8": "execute_some_function"
            },
            "code": "bool is_end_of_string_08001030(void)\n{\n  char current_character;\n  execute_some_function();\n  return current_character == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "get_concatenated_values_080011ec",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "result"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t get_concatenated_values_080011ec(int x, int y, int z, int w) {\n    if ((w == 0) && (z == 0)) {\n        if (y != 0 || x != 0) {\n            y = -1;\n            x = -1;\n        }\n        return ((uint64_t) y << 32) | x;\n    }\n    return FUN_0800121c();\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "send_data_to_device_08004f3c",
                "param_1": "device_ptr",
                "param_2": "data_size",
                "PTR_DAT_08004f5c": "send",
                "0x32": "timeout"
            },
            "code": "void send_data_to_device_08004f3c(void* device_ptr, uint32_t data, uint16_t data_size)\n{\n    PTR_DAT_08004f5c(device_ptr, data, data_size, 50);\n    return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "send_data_to_device_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "improved_memory_allocation_08009adc",
                "param_1": "buffer",
                "param_2": "memory",
                "param_3": "size",
                "puVar1": "temp_ptr",
                "piVar2": "temp_ptr2",
                "iVar3": "temp_int",
                "piVar4": "memory_start",
                "uVar5": "temp_uint",
                "iVar6": "temp_int2",
                "uVar7": "memory_size",
                "piVar8": "temp_ptr3",
                "uVar9": "aligned_size",
                "uVar10": "aligned_memory_size",
                "uVar11": "total_memory_size",
                "iVar12": "memory_end"
            },
            "code": "\nint * improved_memory_allocation_08009adc(undefined4 *buffer,int *memory,uint size)\n\n{\n  undefined *temp_ptr;\n  int *temp_ptr2;\n  int temp_int;\n  int *memory_start;\n  uint temp_uint;\n  int temp_int2;\n  uint memory_size;\n  int *temp_ptr3;\n  uint aligned_size;\n  uint aligned_memory_size;\n  uint total_memory_size;\n  int memory_end;\n  \n  if (memory == (int *)0x0) {\n    memory_start = (int *)FUN_08008af8(buffer,size);\n    return memory_start;\n  }\n  FUN_080090a8();\n  temp_ptr = PTR_DAT_08009e38;\n  memory_size = memory[-1];\n  aligned_memory_size = memory_size & 0xfffffffc;\n  memory_start = memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *buffer = 0xc;\n    return (int *)0x0;\n  }\n  memory_end = (int)memory_start + aligned_memory_size;\n  total_memory_size = aligned_memory_size;\n  if ((int)aligned_memory_size < (int)aligned_size) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == memory_end) {\n      memory_end = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + aligned_memory_size;\n      if ((int)(aligned_size + 0x10) <= memory_end) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)memory_start + aligned_size;\n        *(uint *)((int)memory_start + aligned_size + 4) = memory_end - aligned_size | 1;\n        memory[-1] = aligned_size | memory[-1] & 1U;\n        FUN_080090b4(buffer);\n        return memory;\n      }\n      if (-1 < (int)(memory_size << 0x1f)) {\n        temp_ptr2 = (int *)((int)memory_start - memory[-2]);\n        memory_size = temp_ptr2[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(memory_end + memory_size)) {\n          temp_int2 = temp_ptr2[3];\n          memory_start = temp_ptr2 + 2;\n          temp_int = *memory_start;\n          aligned_memory_size = aligned_memory_size - 4;\n          *(int *)(temp_int + 0xc) = temp_int2;\n          *(int *)(temp_int2 + 8) = temp_int;\n          if (aligned_memory_size < 0x25) {\n            temp_int = *memory;\n            temp_ptr3 = memory_start;\n            if (0x13 < aligned_memory_size) {\n              temp_ptr2[2] = temp_int;\n              temp_ptr2[3] = memory[1];\n              temp_int = memory[2];\n              if (aligned_memory_size < 0x1c) {\n                memory = memory + 2;\n                temp_ptr3 = temp_ptr2 + 4;\n              }\n              else {\n                temp_ptr2[4] = temp_int;\n                temp_ptr2[5] = memory[3];\n                temp_int = memory[4];\n                if (aligned_memory_size == 0x24) {\n                  temp_ptr2[6] = temp_int;\n                  temp_ptr2[7] = memory[5];\n                  temp_int = memory[6];\n                  memory = memory + 6;\n                  temp_ptr3 = temp_ptr2 + 8;\n                }\n                else {\n                  memory = memory + 4;\n                  temp_ptr3 = temp_ptr2 + 6;\n                }\n              }\n            }\n            *temp_ptr3 = temp_int;\n            temp_ptr3[1] = memory[1];\n            temp_ptr3[2] = memory[2];\n          }\n          else {\n            FUN_08009a18(memory_start,memory);\n          }\n          *(uint *)(temp_ptr + 8) = (int)temp_ptr2 + aligned_size;\n          *(uint *)((int)temp_ptr2 + aligned_size + 4) = (memory_end + memory_size) - aligned_size | 1;\n          temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n          FUN_080090b4(buffer);\n          return memory_start;\n        }\nLAB_08009bb0:\n        total_memory_size = aligned_memory_size + memory_size;\n        if ((int)aligned_size <= (int)total_memory_size) {\n          temp_int2 = temp_ptr2[3];\n          temp_ptr3 = temp_ptr2 + 2;\n          temp_int = *temp_ptr3;\n          *(int *)(temp_int + 0xc) = temp_int2;\n          memory_end = (int)temp_ptr2 + total_memory_size;\n          *(int *)(temp_int2 + 8) = temp_int;\n          memory_start = temp_ptr2;\n          if (aligned_memory_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(temp_ptr3,memory);\n          memory = temp_ptr3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(memory_end + 4) & 0xfffffffe) + memory_end + 4) << 0x1f) {\n        temp_uint = *(uint *)(memory_end + 4) & 0xfffffffc;\n        total_memory_size = aligned_memory_size + temp_uint;\n        if ((int)total_memory_size < (int)aligned_size) {\n          if ((int)(memory_size << 0x1f) < 0) goto LAB_08009b36;\n          temp_ptr2 = (int *)((int)memory_start - memory[-2]);\n          memory_size = temp_ptr2[1] & 0xfffffffc;\n          total_memory_size = temp_uint + memory_size + aligned_memory_size;\n          if ((int)total_memory_size < (int)aligned_size) goto LAB_08009bb0;\n          temp_int = *(int *)(memory_end + 8);\n          memory_end = *(int *)(memory_end + 0xc);\n          *(int *)(temp_int + 0xc) = memory_end;\n          *(int *)(memory_end + 8) = temp_int;\n          temp_ptr3 = temp_ptr2 + 2;\n          temp_int = *temp_ptr3;\n          temp_int2 = temp_ptr2[3];\n          *(int *)(temp_int + 0xc) = temp_int2;\n          memory_end = (int)temp_ptr2 + total_memory_size;\n          *(int *)(temp_int2 + 8) = temp_int;\n          memory_start = temp_ptr2;\n          if (0x24 < aligned_memory_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          aligned_memory_size = aligned_memory_size - 4;\n          temp_int = *memory;\n          temp_ptr2 = temp_ptr3;\n          if (0x13 < aligned_memory_size) {\n            memory_start[2] = temp_int;\n            memory_start[3] = memory[1];\n            temp_int = memory[2];\n            if (aligned_memory_size < 0x1c) {\n              memory = memory + 2;\n              temp_ptr2 = memory_start + 4;\n            }\n            else {\n              memory_start[4] = temp_int;\n              memory_start[5] = memory[3];\n              temp_int = memory[4];\n              if (aligned_memory_size == 0x24) {\n                memory_start[6] = temp_int;\n                memory_start[7] = memory[5];\n                temp_int = memory[6];\n                memory = memory + 6;\n                temp_ptr2 = memory_start + 8;\n              }\n              else {\n                memory = memory + 4;\n                temp_ptr2 = memory_start + 6;\n              }\n            }\n          }\n          *temp_ptr2 = temp_int;\n          temp_ptr2[1] = memory[1];\n          temp_ptr2[2] = memory[2];\n          memory = temp_ptr3;\n        }\n        else {\n          temp_int = *(int *)(memory_end + 8);\n          temp_int2 = *(int *)(memory_end + 0xc);\n          *(int *)(temp_int + 0xc) = temp_int2;\n          memory_end = (int)memory_start + total_memory_size;\n          *(int *)(temp_int2 + 8) = temp_int;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(memory_size << 0x1f)) {\n        temp_ptr2 = (int *)((int)memory_start - memory[-2]);\n        memory_size = temp_ptr2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    temp_ptr2 = (int *)FUN_08008af8(buffer,size);\n    if (temp_ptr2 != (int *)0x0) {\n      if ((int *)((memory[-1] & 0xfffffffeU) + (int)memory_start) == temp_ptr2 + -2) {\n        total_memory_size = aligned_memory_size + (temp_ptr2[-1] & 0xfffffffcU);\n        memory_end = (int)memory_start + total_memory_size;\n        goto LAB_08009c00;\n      }\n      aligned_memory_size = aligned_memory_size - 4;\n      if (aligned_memory_size < 0x25) {\n        memory_end = *memory;\n        memory_start = memory;\n        temp_ptr3 = temp_ptr2;\n        if (0x13 < aligned_memory_size) {\n          *temp_ptr2 = memory_end;\n          temp_ptr2[1] = memory[1];\n          if (aligned_memory_size < 0x1c) {\n            memory_end = memory[2];\n            memory_start = memory + 2;\n            temp_ptr3 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = memory[2];\n            temp_ptr2[3] = memory[3];\n            if (aligned_memory_size == 0x24) {\n              temp_ptr2[4] = memory[4];\n              temp_ptr2[5] = memory[5];\n              memory_end = memory[6];\n              memory_start = memory + 6;\n              temp_ptr3 = temp_ptr2 + 6;\n            }\n            else {\n              memory_end = memory[4];\n              memory_start = memory + 4;\n              temp_ptr3 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr3 = memory_end;\n        temp_ptr3[1] = memory_start[1];\n        temp_ptr3[2] = memory_start[2];\n      }\n      else {\n        FUN_08009a18(temp_ptr2,memory);\n      }\n      FUN_080088ec(buffer,memory);\n    }\n    FUN_080090b4(buffer);\n    memory = temp_ptr2;\n  }\n  else {\nLAB_08009c00:\n    if (total_memory_size - aligned_size < 0x10) {\n      memory_start[1] = memory_start[1] & 1U | total_memory_size;\n      *(uint *)(memory_end + 4) = *(uint *)(memory_end + 4) | 1;\n    }\n    else {\n      memory_start[1] = memory_start[1] & 1U | aligned_size;\n      *(uint *)((int)memory_start + aligned_size + 4) = total_memory_size - aligned_size | 1;\n      *(uint *)(memory_end + 4) = *(uint *)(memory_end + 4) | 1;\n      FUN_080088ec(buffer,(int)memory_start + aligned_size + 8);\n    }\n    FUN_080090b4(buffer);\n  }\n  return memory;\n}\n\n",
            "called": [
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "improved_memory_allocation_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "process_data_08002640",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "max_value",
                "param_6": "param6",
                "iVar1": "result"
            },
            "code": "uint32_t process_data_08002640(uint32_t **data_ptr, uint8_t flag, uint16_t value1, uint16_t value2, uint32_t max_value, int param6) {\n  uint32_t result = 3;\n  **data_ptr |= 0x100;\n  while (((*data_ptr)[5] & 1) == 0) {\n    if (max_value == 0xffffffff || (param6 - FUN_080015a0()) <= max_value) {\n      break;\n    }\n    (*data_ptr)[12] = NULL;\n    *((uint8_t *)data_ptr + 0x3d) = 0x20;\n    *((uint8_t *)data_ptr + 0x3e) = 0;\n    *((uint32_t **)data_ptr + 0xf) = NULL;\n    result = 0;\n    goto LAB_0800270a;\n  }\n  (*data_ptr)[4] = flag & 0xfe;\n  if (FUN_08002ad8(data_ptr, DAT_080027f0, max_value, param6) == 0 && FUN_08002bb4(data_ptr, max_value, param6, (*data_ptr)[6]) == 0) {\n    if (value2 == 1) {\n      (*data_ptr)[4] = (uint32_t)value1;\n    }\n    else {\n      (*data_ptr)[4] = (uint32_t)(value1 >> 8);\n      if (FUN_08002bb4(data_ptr, max_value, param6) != 0) {\n        result = ((*data_ptr)[16] == 4) ? 1 : 3;\n        goto LAB_0800270a;\n      }\n      (*data_ptr)[4] = (uint32_t)value1;\n    }\n    result = 0;\n  }\n  else {\n    result = ((*data_ptr)[16] == 4) ? 1 : 3;\n  }\nLAB_0800270a:\n  if (((result != 0) && ((*data_ptr)[16] == 4))) {\n    **data_ptr |= 0x200;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "process_data_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_param2_param4",
                "bVar2": "is_param1_param2_zero",
                "bVar3": "is_param4_less_than_param2"
            },
            "code": "uint check_parameters_080008fc(uint param1, uint param2, uint param3, uint param4)\n{\n  uint result;\n  bool is_negative_param2 = ((int)(param2 << 1) >> 0x15 == -1);\n  bool is_negative_param4 = ((int)(param4 << 1) >> 0x15 == -1);\n  if (is_negative_param2 || is_negative_param4)\n  {\n    if ((is_negative_param2 && ((param1 | param2 << 0xc) != 0)) || (is_negative_param4 && ((param3 | param4 << 0xc) != 0)))\n      result = 1;\n    else\n      result = 0;\n  }\n  else\n  {\n    bool is_param1_param2_zero = ((param1 | param2 << 1) == 0);\n    bool is_param3_param4_zero = ((param3 | param4 << 1) == 0);\n    bool are_param2_param4_equal = (param2 == param4);\n    bool are_param1_param3_equal = (param1 == param3);\n    if (!is_param1_param2_zero && !is_param3_param4_zero && !are_param2_param4_equal && !are_param1_param3_equal)\n    {\n      uint xor_param2_param4 = param2 ^ param4;\n      bool is_xor_param2_param4_zero = (xor_param2_param4 == 0);\n      bool is_xor_param2_param4_positive = (-1 < (int)xor_param2_param4);\n      bool is_param4_less_than_param2 = (param4 <= param2);\n      bool is_param3_less_than_param1 = (param3 <= param1);\n      bool is_result_positive = ((is_xor_param2_param4_zero || (is_xor_param2_param4_positive && are_param2_param4_equal)) && (is_param4_less_than_param2 || (is_xor_param2_param4_positive && !are_param2_param4_equal)) && is_param3_less_than_param1);\n      if (!is_result_positive)\n        result = ~((int)param4 >> 0x1f) | 1;\n      else\n        result = (int)param4 >> 0x1f | 1;\n    }\n    else\n      result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_parameters_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "execute_function_08000988",
                "param_1": "input_parameter",
                "FUN_080008fc": "call_setup_function"
            },
            "code": "undefined4 execute_function_08000988(undefined4 input_parameter)\n{\n  call_setup_function();\n  return input_parameter;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009ac",
                "FUN_080009c0"
            ],
            "imported": false,
            "current_name": "execute_function_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "call_function_with_param_08001714",
                "param_1": "param",
                "FUN_080015b4": "call_function"
            },
            "code": "void call_function_with_param_08001714(undefined4 param){\n  call_function(param);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "call_function_with_param_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "clear_string_08005dfc",
                "param_1": "string",
                "param_2": "sizeof_char",
                "param_3": "stack_8",
                "param_4": "stack_4",
                "local_80": "str_ptr",
                "local_78": "max_size",
                "uStack_74": "stack_74",
                "local_70": "str_start",
                "local_6c": "str_size"
            },
            "code": "void clear_string_08005dfc(char *string)\n{\n  char *str_ptr [2];\n  int max_size = INT_MAX;\n  int str_size = INT_MAX;\n  int stack_74 = DAT_08005e3c;\n  str_ptr[0] = string;\n  char *str_start = string;\n  int stack_8 = 0;\n  int stack_4 = 0;\n  function_call(*(int *)PTR_PTR_DAT_08005e38, str_ptr, sizeof(char), &stack_8);\n  *str_ptr[0] = 0;\n  return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clear_string_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "divide_arrays_080078c0",
                "param_1": "array1",
                "param_2": "array2",
                "iVar3": "carry",
                "iVar4": "dividend_size",
                "iVar5": "divisor_size",
                "puVar2": "dividend_ptr",
                "puVar7": "divisor_ptr",
                "puVar8": "dividend",
                "puVar9": "divisor_end",
                "puVar11": "dividend_end",
                "puVar12": "divisor_ptr",
                "uVar1": "temp",
                "uVar6": "quotient",
                "uVar10": "carry",
                "size1": "dividend_size",
                "size2": "divisor_size",
                "PTR_080094f8": "FUN_080094f8"
            },
            "code": "uint divide_arrays_080078c0(uint *array1, uint *array2, int size1, int size2)\n{\n  uint quotient;\n  uint *dividend = array1;\n  uint *divisor = array2;\n  int dividend_size = size1;\n  int divisor_size = size2;\n  uint *dividend_end = dividend + dividend_size - 1;\n  uint *divisor_end = divisor + divisor_size - 1;\n  uint *dividend_ptr;\n  uint *divisor_ptr;\n  uint carry;\n  uint temp;\n  int i;\n  if (*divisor_end == 0)\n    return 0;\n  quotient = *dividend_end / (*divisor_end + 1);\n  if (quotient != 0)\n  {\n    carry = 0;\n    dividend_ptr = dividend;\n    divisor_ptr = divisor;\n    for (i = 0; i < dividend_size; i++)\n    {\n      temp = quotient * (*divisor_ptr & 0xffff) + carry;\n      carry = quotient * (*divisor_ptr >> 0x10) + (temp >> 0x10);\n      temp = (int)(temp & 0xffff) - (int)(*dividend_ptr & 0xffff) + (int)(*dividend_ptr & 0xffff);\n      carry = (int)(carry & 0xffff) - (int)(*divisor_ptr >> 0x10) + (int)(temp >> 0x10);\n      *dividend_ptr = temp & 0xffff | carry << 0x10;\n      carry >>= 0x10;\n      dividend_ptr++;\n      divisor_ptr++;\n    }\n    while (*dividend_end == 0 && dividend_end > dividend)\n      dividend_end--;\n    dividend_size = dividend_end - dividend + 1;\n  }\n  if (PTR_080094f8() >= 0)\n  {\n    quotient++;\n    carry = 0;\n    dividend_ptr = dividend;\n    divisor_ptr = divisor;\n    for (i = 0; i < dividend_size; i++)\n    {\n      temp = (int)(carry & 0xffff) - (int)(*divisor_ptr & 0xffff) + (int)(*dividend_ptr & 0xffff);\n      carry = (int)(carry >> 0x10) - (int)(*divisor_ptr >> 0x10) + (int)(*dividend_ptr >> 0x10) + (int)(temp >> 0x10);\n      *dividend_ptr = temp & 0xffff | carry << 0x10;\n      carry >>= 0x10;\n      dividend_ptr++;\n      divisor_ptr++;\n    }\n    while (*dividend_end == 0 && dividend_end > dividend)\n      dividend_end--;\n    dividend_size = dividend_end - dividend + 1;\n  }\n  return quotient;\n}\n",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "divide_arrays_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_thunk_08005838",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "difference",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "abs_param4",
                "uVar5": "abs_param2",
                "uVar6": "abs_param4_or_param3",
                "uVar7": "param4_plus_0xc0100000_or_param3",
                "uVar8": "param4_shifted_0x1e_or_param2_shifted_0x1f",
                "DAT_080059e8": "MAX_ABS_PARAM",
                "DAT_080059f0": "FUN_080059f0",
                "DAT_080059b0": "RETURN_VAL_1",
                "DAT_080059a0": "RETURN_VAL_2",
                "DAT_080059d0": "RETURN_VAL_3",
                "DAT_080059d8": "RETURN_VAL_4",
                "DAT_080059e0": "RETURN_VAL_5",
                "DAT_080059c8": "RETURN_VAL_6",
                "DAT_080059c0": "DAT_080059c0",
                "DAT_080059b8": "DAT_080059b8",
                "DAT_080059bc": "DAT_080059bc",
                "DAT_080059b4": "DAT_080059b4",
                "DAT_080059a8": "DAT_080059a8",
                "DAT_080059ac": "DAT_080059ac"
            },
            "code": "uint calculate_thunk_08005838(uint param1, uint param2, uint param3, uint param4) {\n  int difference;\n  undefined4 result_low;\n  uint result_high;\n  uint abs_param3 = abs(param3);\n  uint abs_param1 = abs(param1);\n  uint abs_param4 = param4 & 0x7fffffff;\n  uint abs_param2 = param2 & 0x7fffffff;\n  uint abs_param4_or_param3 = abs_param4 | (-param3 | param3) >> 0x1f;\n  uint param4_plus_0xc0100000_or_param3 = param4 + 0xc0100000 | param3;\n  uint param4_shifted_0x1e_or_param2_shifted_0x1f = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n  if (DAT_080059e8 < abs_param4_or_param3 || DAT_080059e8 < (abs_param2 | (-param1 | param1) >> 0x1f)) {\n    uint result = FUN_0800015c(param3, param4, param1, param2);\n    return result;\n  }\n  if (param4_plus_0xc0100000_or_param3 == 0) {\n    uint result = DAT_080059f0();\n    return result;\n  }\n  if ((abs_param1 | abs_param3) == 0) {\n    if (param4_shifted_0x1e_or_param2_shifted_0x1f == 2) {\n      return DAT_080059b0;\n    }\n    uint result = DAT_080059a0;\n    if (param4_shifted_0x1e_or_param2_shifted_0x1f != 3) {\n      return param1;\n    }\n  }\n  else {\n    if ((abs_param4 | abs_param3) != 0) {\n      if (abs_param4 == DAT_080059e8) {\n        if (abs_param2 == abs_param4) {\n          if (param4_shifted_0x1e_or_param2_shifted_0x1f == 2) {\n            return DAT_080059e0;\n          }\n          if (param4_shifted_0x1e_or_param2_shifted_0x1f == 3) {\n            return DAT_080059d8;\n          }\n          if (param4_shifted_0x1e_or_param2_shifted_0x1f == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (param4_shifted_0x1e_or_param2_shifted_0x1f == 2) {\n          return DAT_080059b0;\n        }\n        if (param4_shifted_0x1e_or_param2_shifted_0x1f == 3) {\n          return DAT_080059a0;\n        }\n        if (param4_shifted_0x1e_or_param2_shifted_0x1f == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (abs_param2 != DAT_080059e8) {\n        difference = (int)(abs_param2 - abs_param4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)param4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n            result_high = 0;\n            result_low = 0;\n          }\n          else {\n            FUN_0800071c(param1, param2, param3, param4, abs_param4);\n            do_nothing_08005d0c();\n            undefined8 result = DAT_080059f0();\n            result_low = (undefined4)((ulonglong)result >> 0x20);\n            result_high = (uint)result;\n          }\n        }\n        else {\n          undefined8 result = FUN_08000158(abs_param4, DAT_080059bc, abs_param1, DAT_080059b8);\n          result_high = (uint)FUN_08000158(DAT_080059b0, DAT_080059b4, (int)((ulonglong)result >> 0x20), (int)result);\n          result_low = (undefined4)result;\n        }\n        if (param4_shifted_0x1e_or_param2_shifted_0x1f == 1) {\n          return result_high;\n        }\n        if (param4_shifted_0x1e_or_param2_shifted_0x1f == 2) {\n          undefined8 result = FUN_08000158(result_low, result_high, DAT_080059a8, DAT_080059ac);\n          result_high = (uint)FUN_08000158(DAT_080059b0, DAT_080059b4, (int)((ulonglong)result >> 0x20), (int)result);\n          return result_high;\n        }\n        if (param4_shifted_0x1e_or_param2_shifted_0x1f == 0) {\n          return result_high;\n        }\n        undefined8 result = FUN_08000158(result_low, result_high, DAT_080059a8, DAT_080059ac);\n        result_high = (uint)FUN_08000158((int)((ulonglong)result >> 0x20), (int)result, DAT_080059b0, DAT_080059b4);\n        return result_high;\n      }\n    }\n    if (-1 < (int)param2) {\n      result_high = DAT_080059b8;\n    }\n    else {\n      result_high = DAT_080059c0;\n    }\n  }\n  return result_high;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "reverse_bits_080003f4",
                "param_1": "num",
                "uVar1": "msb_index",
                "uVar2": "num_abs",
                "uVar3": "shift_amount2",
                "iVar4": "clz_result",
                "uVar5": "shift_amount",
                "uVar6": "num_sign",
                "bVar7": "shift_amount_overflow",
                "bVar8": "shift_amount_equal_zero",
                "bVar9": "shift_amount_underflow"
            },
            "code": "unsigned long long reverse_bits_080003f4(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  unsigned int msb_index = 31 - __builtin_clz(num);\n  unsigned int shift_amount = msb_index + 21;\n  unsigned int shift_amount2 = msb_index - 11;\n  unsigned long long high_bits = num << (shift_amount & 0xff);\n  unsigned long long low_bits = 0U >> ((32 - shift_amount) & 0xff);\n  unsigned long long result = 0;\n  if (msb_index < 32) {\n    high_bits |= num >> ((12 - msb_index) & 0xff);\n  }\n  if (msb_index >= 32) {\n    low_bits |= num >> (shift_amount2 & 0xff);\n  }\n  if (shift_amount < 1075) {\n    result = ((high_bits + ((1074 - shift_amount) * 0x100000)) | (num & 0x80000000));\n  }\n  else {\n    unsigned int shift_amount3 = ~(1074 - shift_amount);\n    if (shift_amount3 > 30) {\n      result = ((unsigned long long)num) & 0x80000000ffffffff;\n    }\n    else {\n      int shift_amount4 = shift_amount3 - 19;\n      if (shift_amount4 == 0 || shift_amount4 < 0 != ((shift_amount3 - 31) < 0)) {\n        shift_amount3++;\n        result = ((high_bits | (num >> (shift_amount3 & 0xff))) | (low_bits << (32 - shift_amount3)));\n      }\n      else {\n        result = (((unsigned long long)num) & 0x80000000ffffffff) | (low_bits >> (32 - (12 - shift_amount4))) | (high_bits << (12 - shift_amount4));\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "reverse_bits_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    FUN_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = FUN_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = FUN_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = FUN_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUN_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUN_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = FUN_080003f4(iVar13);\n  uVar22 = FUN_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUN_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = FUN_0800119c();\n  iVar10 = FUN_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = FUN_080003f4(local_74);\n    iVar10 = FUN_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = FUN_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)FUN_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)FUN_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUN_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUN_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUN_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUN_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = FUN_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = FUN_080003f4(iVar9);\n        uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUN_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUN_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = FUN_080003f4(iVar9 + 1);\n        uVar22 = FUN_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUN_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = FUN_080003f4(iVar9);\n    uVar22 = FUN_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUN_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = FUN_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = FUN_080003f4();\n      uVar21 = FUN_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUN_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = FUN_0800119c();\n            uVar23 = FUN_080003f4();\n            uVar21 = FUN_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUN_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUN_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = FUN_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUN_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUN_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUN_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUN_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = FUN_0800119c();\n              uVar23 = FUN_080003f4();\n              uVar21 = FUN_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = FUN_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUN_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUN_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = FUN_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = FUN_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUN_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = FUN_0800119c();\n        uVar21 = FUN_080003f4();\n        uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUN_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUN_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = FUN_0800119c();\n            uVar22 = FUN_080003f4();\n            uVar22 = FUN_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUN_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUN_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUN_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = FUN_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = FUN_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUN_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = FUN_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = FUN_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = FUN_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = FUN_080093a4(param_1,uVar12,iVar9);\n          uVar8 = FUN_08009258(param_1,uVar12,uVar3);\n          FUN_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = FUN_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = FUN_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = FUN_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = FUN_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = FUN_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = FUN_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = FUN_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = FUN_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = FUN_08009120(param_1,uVar5,5);\n        iVar9 = FUN_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = FUN_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = FUN_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = FUN_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        FUN_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = FUN_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = FUN_080078c0(uVar3,uVar5);\n      iVar13 = FUN_080094f8(uVar3,local_80);\n      iVar10 = FUN_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = FUN_080094f8(uVar3);\n        FUN_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = FUN_08009444(param_1,uVar3,1);\n          iVar13 = FUN_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = FUN_08009444(param_1,uVar3,1);\n    iVar9 = FUN_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      FUN_0800910c(param_1);\n    }\n  }\n  FUN_0800910c(param_1,uVar12);\nLAB_08008294:\n  FUN_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_08009258",
                "FUN_080003f4",
                "FUN_0800910c",
                "FUN_08009120",
                "FUN_080004c8",
                "FUN_080009ac",
                "FUN_0800119c",
                "FUN_080078c0",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009444",
                "FUN_080003d4",
                "FUN_0800015c",
                "FUN_080009d4",
                "FUN_08009244",
                "FUN_08001084",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08009530",
                "FUN_080090c0",
                "FUN_0800071c",
                "FUN_080009e8",
                "FUN_080091a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "get_bits_0800166c",
                "param_1": "bit_count",
                "param_2": "bits_to_set",
                "param_3": "bit_field",
                "uVar1": "bits_to_clear",
                "clear_mask": "clear_mask",
                "set_mask": "set_mask"
            },
            "code": "uint get_bits_0800166c(uint bit_count, uint bits_to_set, uint bit_field){\n  uint bits_to_clear = 7 - (bit_count & 7);\n  if (bits_to_clear > 3) {\n    bits_to_clear = 4;\n  }\n  if ((bit_count + 4) < 7) {\n    bit_count = 0;\n  }\n  else {\n    bit_count = bit_count - 3;\n  }\n  uint clear_mask = ~(-1 << (bit_count & 0xff));\n  uint set_mask = ~(-1 << (bits_to_clear & 0xff));\n  return (bit_field & clear_mask) | ((bits_to_set & set_mask) << (bit_count & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "data_ptr",
                "PTR_": "",
                "DAT_": "",
                "**param_1": "*data",
                "(*param_1)[3]": "data[3]"
            },
            "code": "int set_flags_0800360c(uint **data_ptr){\n    uint* data = *data_ptr;\n    data[3] |= 1;\n    *data |= 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "fill_memory_with_value_08005d68",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "remaining_size",
                "uVar4": "word_value",
                "bVar5": "is_remaining_zero"
            },
            "code": "void fill_memory_with_value_08005d68(uint32_t *memory, uint8_t value, uint32_t size) {\n    uint32_t *current_word;\n    uint32_t remaining_size;\n    uint32_t word_value;\n\n    if (((uint32_t)memory & 3) != 0) {\n        remaining_size = size - 1;\n        current_word = memory;\n        if (size == 0) {\n            return;\n        }\n        while (true) {\n            memory = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = value;\n            size = remaining_size;\n            if (((uint32_t)memory & 3) == 0)\n                break;\n            remaining_size = remaining_size - 1;\n            current_word = memory;\n            if (remaining_size == 0) {\n                return;\n            }\n        }\n    }\n    if (3 < size) {\n        word_value = (value << 24) | (value << 16) | (value << 8) | value;\n        remaining_size = size;\n        current_word = memory;\n        if (0xf < size) {\n            remaining_size = size - 0x10;\n            current_word = memory + 4;\n            do {\n                current_word[-4] = word_value;\n                current_word[-3] = word_value;\n                current_word[-2] = word_value;\n                current_word[-1] = word_value;\n                current_word = current_word + 4;\n            } while (current_word != (uint32_t *)((int)memory + (remaining_size & 0xfffffff0) + 0x20));\n            size = size & 0xf;\n            memory = memory + ((remaining_size >> 4) + 1) * 4;\n            remaining_size = size;\n            current_word = memory;\n            if (size < 4)\n                goto LAB_08005de4;\n        }\n        do {\n            size = size - 4;\n            *memory = word_value;\n            memory = memory + 1;\n        } while (3 < size);\n        memory = (uint32_t *)((int)current_word + (remaining_size - 4 & 0xfffffffc) + 4);\n        size = remaining_size & 3;\n    }\nLAB_08005de4:\n    if (size != 0) {\n        current_word = memory;\n        do {\n            uint32_t *next_word = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = value;\n            current_word = next_word;\n        } while ((uint32_t *)(size + (int)memory) != current_word);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "decode_flags_080017c4",
                "param_1": "flags",
                "param_2": "mask",
                "uVar1": "index",
                "uVar2": "shift_amount",
                "uVar3": "bit_mask",
                "uVar4": "value",
                "uVar5": "flag_value",
                "puVar6": "flag_ptr",
                "iVar7": "index",
                "local_10": "flag_offset",
                "local_c": "mask_offset"
            },
            "code": "void decode_flags_080017c4(uint *flags, uint *mask) {\n  uint bit_mask;\n  uint value;\n  uint *flag_ptr;\n  int index;\n  uint flag_value;\n  uint shift_amount;\n  uint flag_offset = 0;\n  uint mask_offset = 0;\n\n  while (true) {\n    if (mask_offset > 15) {\n      return;\n    }\n    bit_mask = 1 << (mask_offset & 0xff);\n    value = *mask & bit_mask;\n    if (value == bit_mask) {\n      flag_value = mask[1];\n      if (flag_value == 0x12) {\n        flag_offset = mask[3] + 0xc;\n      }\n      else if (flag_value < 0x13) {\n        if (flag_value == 2) {\n          flag_offset = mask[3] + 8;\n        }\n        else if (flag_value < 3) {\n          if (flag_value == 0) goto LAB_08001882;\n          if (flag_value == 1) {\n            flag_offset = mask[3];\n          }\n        }\n        else if (flag_value == 3) {\n          flag_offset = 0;\n        }\n        else if (flag_value == 0x11) {\n          flag_offset = mask[3] + 4;\n        }\n      }\n      else if (((flag_value == PTR_DAT_08001a4c) || (((shift_amount = PTR_DAT_08001a50, index = PTR_DAT_08001a54, PTR_DAT_08001a4c < flag_value && (shift_amount = PTR_DAT_08001a5c, index = PTR_DAT_08001a60, flag_value == PTR_DAT_08001a58)) || (flag_value == shift_amount)))) || (flag_value == index)) {\nLAB_08001882:\n        if (mask[2] == 0) {\n          flag_offset = 4;\n        }\n        else if (mask[2] == 1) {\n          flag_offset = 8;\n          flags[4] = bit_mask;\n        }\n        else {\n          flag_offset = 8;\n          flags[5] = bit_mask;\n        }\n      }\n      if (value < 0x100) {\n        shift_amount = mask_offset << 2;\n        flag_ptr = flags;\n      }\n      else {\n        flag_ptr = flags + 1;\n        shift_amount = (mask_offset - 8) * 4;\n      }\n      *flag_ptr = *flag_ptr & ~(0xf << (shift_amount & 0xff)) | flag_offset << (shift_amount & 0xff);\n      if ((mask[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n        if (flags == PTR_DAT_08001a6c) {\n          index = 0;\n        }\n        else if (flags == PTR_DAT_08001a70) {\n          index = 1;\n        }\n        else if (flags == PTR_DAT_08001a74) {\n          index = 2;\n        }\n        else if (flags == PTR_DAT_08001a78) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(PTR_DAT_08001a68 + ((mask_offset >> 2) + 2) * 4) = index << ((mask_offset & 3) << 2) | ~(0xf << ((mask_offset & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((mask_offset >> 2) + 2) * 4);\n        if ((mask[1] & 0x10000) == 0) {\n          *PTR_DAT_08001a7c = ~value & *PTR_DAT_08001a7c;\n        }\n        else {\n          *PTR_DAT_08001a7c = value | *PTR_DAT_08001a7c;\n        }\n        if ((mask[1] & 0x20000) == 0) {\n          PTR_DAT_08001a7c[1] = ~value & PTR_DAT_08001a7c[1];\n        }\n        else {\n          PTR_DAT_08001a7c[1] = value | PTR_DAT_08001a7c[1];\n        }\n        if ((mask[1] & 0x100000) == 0) {\n          PTR_DAT_08001a7c[2] = ~value & PTR_DAT_08001a7c[2];\n        }\n        else {\n          PTR_DAT_08001a7c[2] = value | PTR_DAT_08001a7c[2];\n        }\n        if ((mask[1] & 0x200000) == 0) {\n          PTR_DAT_08001a7c[3] = ~value & PTR_DAT_08001a7c[3];\n        }\n        else {\n          PTR_DAT_08001a7c[3] = value | PTR_DAT_08001a7c[3];\n        }\n      }\n    }\n    mask_offset++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "imported": false,
            "current_name": "decode_flags_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "check_param_validity_080035a4",
                "param_1": "param_array",
                "uVar1": "result",
                "do_nothing_080035fa": "perform_nothing_operation",
                "*(char *)((int)param_1 + 0x3d)": "param_array[15]",
                "*(undefined *)(param_1 + 0xf)": "param_array[11]",
                "FUN_08003c94": "perform_operation"
            },
            "code": "int check_param_validity_080035a4(int *param_array)\n{\n  int result;\n  if (param_array == NULL) {\n    result = 1;\n  }\n  else {\n    if (param_array[15] == 0) {\n      param_array[11] = 0;\n      perform_nothing_operation(param_array);\n    }\n    param_array[15] = 2;\n    perform_operation(param_array[0], &param_array[1]);\n    param_array[15] = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "check_param_validity_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_bit_in_uint_array_080041ea",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "PTR_": "array",
                "DAT_": "bit"
            },
            "code": "void set_bit_in_uint_array_080041ea(uint *PTR_, uint DAT__index, uint DAT__value) {\n    uint mask = ~(1 << (DAT__index & 0xff));\n    uint shifted_value = DAT__value << (DAT__index & 0xff);\n    PTR_[5] = (PTR_[5] & mask) | shifted_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "decode_data_and_store_08004ae0",
                "param_1": "output_array",
                "uVar1": "decoded_value",
                "local_2c": "byte1",
                "local_2b": "byte2",
                "local_2a": "byte3",
                "local_29": "byte4",
                "local_28": "byte5",
                "local_27": "byte6",
                "local_26": "byte7",
                "local_25": "byte8",
                "local_24": "byte9",
                "local_23": "byte10",
                "local_22": "byte11",
                "local_21": "byte12",
                "local_20": "byte13",
                "local_1f": "byte14",
                "local_1e": "byte15",
                "local_1c": "short1",
                "local_1a": "short2",
                "local_18": "short3",
                "local_16": "short4",
                "local_14": "short5",
                "local_12": "short6"
            },
            "code": "void decode_data_and_store_08004ae0(uint32_t *output_array)\n{\n  uint32_t decoded_value;\n  uint8_t byte1;\n  uint8_t byte2;\n  uint8_t byte3;\n  uint8_t byte4;\n  uint8_t byte5;\n  uint8_t byte6;\n  uint8_t byte7;\n  uint8_t byte8;\n  uint8_t byte9;\n  uint8_t byte10;\n  uint8_t byte11;\n  uint8_t byte12;\n  uint8_t byte13;\n  uint8_t byte14;\n  uint8_t byte15;\n  uint16_t short1;\n  uint16_t short2;\n  uint16_t short3;\n  uint16_t short4;\n  uint16_t short5;\n  uint16_t short6;\n  (* (void (**)(int, int, void *, int)) PTR_DAT_08004bd4)(208, 59, &byte1, 14);\n  short6 = (byte5 << 8) | byte6;\n  short5 = (byte4 << 8) | byte3;\n  short4 = (byte2 << 8) | byte1;\n  short3 = (byte8 << 8) | byte7;\n  short2 = (byte10 << 8) | byte9;\n  short1 = (byte12 << 8) | byte11;\n  decoded_value = decode_short(short4, short3);\n  *output_array = decoded_value;\n  decoded_value = decode_short(short2, short1);\n  output_array[1] = decoded_value;\n  decoded_value = decode_short(short6, short5);\n  output_array[2] = decoded_value;\n  return;\n}\n",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_data_and_store_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "calculate_value_08001044",
                "param_1": "input_value",
                "uVar1": "output_value"
            },
            "code": "uint calculate_value_08001044(uint input_value) {\n  uint output_value;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  output_value = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)output_value) {\n    return (input_value << 8 | 0x80000000) >> (output_value & 0xff);\n  }\n  if ((output_value == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_value_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "encode_08009444",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "offset",
                "iVar2": "num_blocks",
                "iVar3": "num_words",
                "uVar4": "initial_value",
                "iVar5": "data_ptr_offset",
                "iVar6": "word_offset",
                "puVar7": "encoded_data_ptr",
                "puVar8": "data_ptr",
                "puVar9": "current_ptr",
                "puVar10": "end_ptr",
                "puVar11": "data_ptr_copy",
                "iVar12": "initial_shift",
                "iVar13": "word_index",
                "uVar14": "carry"
            },
            "code": "void encode_08009444(uint32_t input1, uint32_t *input2, uint32_t input3)\n{\n  int offset = input2[4];\n  int num_blocks = (int) input3 >> 5;\n  int num_words = num_blocks + offset + 1;\n  int word_index = input2[1];\n  int initial_shift = input2[2];\n  \n  if (initial_shift < num_words) {\n    do {\n      initial_shift *= 2;\n      word_index++;\n    } while (num_words != initial_shift && num_words - initial_shift < 0 == SBORROW4(num_words, initial_shift));\n  }\n  \n  int encode_08009444d_data = FUN_080090c0(input1, word_index);\n  uint32_t *encode_08009444d_data_ptr = (uint32_t *)(encode_08009444d_data + 0x14);\n  \n  if (num_blocks > 0) {\n    uint32_t *end_ptr = encode_08009444d_data_ptr + num_blocks;\n    uint32_t *current_ptr = encode_08009444d_data_ptr;\n    do {\n      current_ptr++;\n      *current_ptr = 0;\n    } while (current_ptr != end_ptr);\n  }\n  \n  offset = input2[4];\n  uint32_t *data_ptr = input2 + 5;\n  input3 = input3 & 0x1f;\n  \n  if (input3 == 0) {\n    encode_08009444d_data_ptr--;\n    uint32_t *end_ptr = data_ptr + offset;\n    uint32_t *current_ptr = encode_08009444d_data_ptr;\n    do {\n      current_ptr++;\n      *current_ptr = *data_ptr;\n      data_ptr++;\n    } while (data_ptr < end_ptr);\n  }\n  else {\n    uint32_t carry = 0;\n    uint32_t *end_ptr = data_ptr + offset;\n    uint32_t *current_ptr = encode_08009444d_data_ptr;\n    do {\n      uint32_t *data_ptr_copy = data_ptr;\n      *current_ptr = *data_ptr_copy << input3 | carry;\n      data_ptr++;\n      carry = *data_ptr_copy >> (0x20 - input3 & 0xff);\n      current_ptr++;\n    } while (data_ptr < end_ptr);\n    current_ptr[1] = carry;\n    if (carry != 0) {\n      num_words += 1;\n    }\n  }\n  \n  int data_ptr_offset = *(int *)(input1 + 0x4c);\n  int word_offset = input2[1];\n  uint32_t initial_value = *(uint32_t *)(data_ptr_offset + word_offset * 4);\n  *(int *)(encode_08009444d_data + 0x10) = num_words - 1;\n  *input2 = initial_value;\n  *(uint32_t **)(data_ptr_offset + word_offset * 4) = input2;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "encode_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_bits_from_uint_080015fc",
                "DAT_08001614": "data_address",
                "uint": "unsigned int",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "uint get_bits_from_uint_080015fc(void)\n{\n    uint DAT_08001614 = DAT_08001614 + 0xc;\n    uint DAT_value = *(uint *)DAT_08001614;\n    uint shifted_value = DAT_value >> 8;\n    uint masked_value = shifted_value & 7;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_bits_from_uint_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "check_and_process_input_08004436",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "max_processing_time",
                "iVar1": "time_start",
                "iVar2": "time_now",
                "uVar3": "error_code",
                "local_58": "data_ptr"
            },
            "code": "int check_and_process_input_08004436(uint **input_ptr, ushort *input_data, short input_length, uint max_processing_time) {\n  int time_start = get_current_time();\n  int error_code = 0;\n  ushort *data_ptr = input_data;\n  if (*(char *)((int)input_ptr + 0x39) != ' ')\n    return 2;\n  if (input_data == NULL || input_length == 0)\n    return 1;\n  if (*(char *)(input_ptr + 0xe) == '\\x01')\n    return 2;\n  *(undefined *)(input_ptr + 0xe) = 1;\n  input_ptr[0xf] = (uint *)0x0;\n  *(undefined *)((int)input_ptr + 0x39) = 0x21;\n  int time_now = get_current_time();\n  while (*(short *)((int)input_ptr + 0x26) != 0) {\n    *(short *)((int)input_ptr + 0x26) = *(short *)((int)input_ptr + 0x26) + -1;\n    if (input_ptr[2] == (uint *)0x1000) {\n      if ((**input_ptr & 0x80) == 0x80)\n        return 3;\n      if (max_processing_time != 0 && (get_current_time() - time_now) > max_processing_time) {\n        (*input_ptr)[3] &= 0xfffffe5f;\n        (*input_ptr)[5] &= 0xfffffffe;\n        *(undefined *)((int)input_ptr + 0x39) = 0x20;\n        *(undefined *)((int)input_ptr + 0x3a) = 0x20;\n        *(undefined *)(input_ptr + 0xe) = 0;\n        return 3;\n      }\n      (*input_ptr)[1] = *data_ptr & 0x1ff;\n      if (input_ptr[4] == (uint *)0x0)\n        data_ptr++;\n      else\n        data_ptr = (ushort *)((int)data_ptr + 1);\n    }\n    else {\n      if ((**input_ptr & 0x80) == 0x80)\n        return 3;\n      if (max_processing_time != 0 && (get_current_time() - time_now) > max_processing_time) {\n        (*input_ptr)[3] &= 0xfffffe5f;\n        (*input_ptr)[5] &= 0xfffffffe;\n        *(undefined *)((int)input_ptr + 0x39) = 0x20;\n        *(undefined *)((int)input_ptr + 0x3a) = 0x20;\n        *(undefined *)(input_ptr + 0xe) = 0;\n        return 3;\n      }\n      (*input_ptr)[1] = (uint)*(byte *)data_ptr;\n      data_ptr = (ushort *)((int)data_ptr + 1);\n    }\n  }\n  while ((**input_ptr & 0x40) != 0x40) {\n    if (max_processing_time != 0 && (get_current_time() - time_now) > max_processing_time) {\n      (*input_ptr)[3] &= 0xfffffe5f;\n      (*input_ptr)[5] &= 0xfffffffe;\n      *(undefined *)((int)input_ptr + 0x39) = 0x20;\n      *(undefined *)((int)input_ptr + 0x3a) = 0x20;\n      *(undefined *)(input_ptr + 0xe) = 0;\n      return 3;\n    }\n  }\n  *(undefined *)((int)input_ptr + 0x39) = 0x20;\n  *(undefined *)(input_ptr + 0xe) = 0;\n  return error_code;\n}\n",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_process_input_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_if_initialized_and_return_function_pointer_08000110",
                "param_1": "function_pointer",
                "*PTR_DAT_08000128": "is_initialized",
                "DAT_0800012c": "global_variable",
                "PTR_FUN_08000130": "initialized_function_pointer"
            },
            "code": "undefined* check_if_initialized_and_return_function_pointer_08000110(undefined* function_pointer) {\\n    if (**PTR_DAT_08000128 == \"\\0\") {\\n        if (DAT_0800012c != 0) {\\n            function_pointer = PTR_FUN_08000130;\\n        }\\n        **PTR_DAT_08000128 = 1;\\n    }\\n    return function_pointer;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_and_return_function_pointer_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "undefined4": "uint32_t",
                "PTR_DAT_08003514": "pointer_to_data",
                "*(undefined4 *)PTR_DAT_08003514": "*pointer_to_data",
                "return *(undefined4 *)PTR_DAT_08003514;": "return value;"
            },
            "code": "uint32_t get_value_from_pointer_08003504() {\n    uint32_t* PTR_DAT_08003514 = PTR_DAT_08003514;\n    uint32_t value = *(undefined4 *)PTR_DAT_08003514;\n    return *(undefined4 *)PTR_DAT_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003518",
                "FUN_08003540"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "calculate_float_08000aa4",
                "param_1": "float_bits_a",
                "param_2": "float_bits_b",
                "param_3": "float_bits_c",
                "param_4": "float_bits_d",
                "iVar1": "exponent_diff",
                "uVar2": "significand_a",
                "uVar3": "significand_b",
                "uVar4": "exponent_a",
                "uVar5": "shift_amount",
                "uVar6": "exponent_diff_abs",
                "iVar7": "exponent_b",
                "bVar8": "comparison_result"
            },
            "code": "\nuint calculate_float_08000aa4(uint float_bits_a,uint float_bits_b,undefined4 float_bits_c,uint float_bits_d)\n\n{\n  int exponent_diff;\n  uint significand_a;\n  uint significand_b;\n  uint exponent_a;\n  uint shift_amount;\n  uint exponent_diff_abs;\n  int exponent_b;\n  bool comparison_result;\n  \n  significand_a = float_bits_b ^ 0x80000000;\n  exponent_a = float_bits_a << 1;\n  comparison_result = exponent_a == 0;\n  if (!comparison_result) {\n    float_bits_d = float_bits_b << 1;\n    comparison_result = float_bits_d == 0;\n  }\n  if (!comparison_result) {\n    comparison_result = exponent_a == float_bits_d;\n  }\n  exponent_b = (int)exponent_a >> 0x18;\n  if (!comparison_result) {\n    comparison_result = exponent_b == -1;\n  }\n  if (!comparison_result) {\n    comparison_result = (int)float_bits_d >> 0x18 == -1;\n  }\n  if (comparison_result) {\n    exponent_diff = (int)(float_bits_b << 1) >> 0x18;\n    if (exponent_b == -1 || exponent_diff == -1) {\n      exponent_a = significand_a;\n      if (exponent_b == -1) {\n        exponent_a = float_bits_a;\n      }\n      if (exponent_b != -1 || exponent_diff != -1) {\n        significand_a = exponent_a;\n      }\n      comparison_result = (exponent_a & 0x7fffff) == 0;\n      if (comparison_result) {\n        comparison_result = (significand_a & 0x7fffff) == 0;\n      }\n      if (comparison_result) {\n        comparison_result = exponent_a == significand_a;\n      }\n      if (!comparison_result) {\n        exponent_a = exponent_a | 0x400000;\n      }\n      return exponent_a;\n    }\n    if (((float_bits_a ^ significand_a) & 0x7fffffff) != 0) {\n      if (exponent_a == 0) {\n        float_bits_a = significand_a;\n      }\n      return float_bits_a;\n    }\n    if (float_bits_a != significand_a) {\n      return 0;\n    }\n    if ((exponent_a & 0xff000000) == 0) {\n      significand_a = float_bits_a << 1;\n      if ((float_bits_a & 0x80000000) != 0) {\n        significand_a = significand_a | 0x80000000;\n      }\n      return significand_a;\n    }\n    if (exponent_a < 0xfe000000) {\n      return float_bits_a + 0x800000;\n    }\n    float_bits_a = float_bits_a & 0x80000000;\nLAB_08000bde:\n    return float_bits_a | 0x7f800000;\n  }\n  exponent_a = exponent_a >> 0x18;\n  float_bits_d = float_bits_d >> 0x18;\n  exponent_diff_abs = float_bits_d - exponent_a;\n  comparison_result = exponent_diff_abs != 0;\n  shift_amount = exponent_a;\n  if (comparison_result && exponent_a <= float_bits_d) {\n    shift_amount = exponent_a + exponent_diff_abs;\n  }\n  if (comparison_result && exponent_a <= float_bits_d) {\n    significand_a = significand_a ^ float_bits_a;\n  }\n  if (comparison_result && exponent_a <= float_bits_d) {\n    float_bits_a = float_bits_a ^ significand_a;\n  }\n  if (comparison_result && exponent_a <= float_bits_d) {\n    significand_a = significand_a ^ float_bits_a;\n  }\n  if (float_bits_d < exponent_a) {\n    exponent_diff_abs = -exponent_diff_abs;\n  }\n  if (0x19 < exponent_diff_abs) {\n    return float_bits_a;\n  }\n  exponent_a = float_bits_a & 0xffffff | 0x800000;\n  if ((float_bits_a & 0x80000000) != 0) {\n    exponent_a = -exponent_a;\n  }\n  significand_b = significand_a & 0xffffff | 0x800000;\n  if ((significand_a & 0x80000000) != 0) {\n    significand_b = -significand_b;\n  }\n  if (shift_amount == exponent_diff_abs) {\n    significand_b = significand_b ^ 0x800000;\n    if (shift_amount == 0) {\n      exponent_a = exponent_a ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      exponent_diff_abs = exponent_diff_abs - 1;\n    }\n  }\n  exponent_a = exponent_a + ((int)significand_b >> (exponent_diff_abs & 0xff));\n  significand_b = significand_b << (0x20 - exponent_diff_abs & 0xff);\n  float_bits_a = exponent_a & 0x80000000;\n  if ((int)exponent_a < 0) {\n    comparison_result = significand_b != 0;\n    significand_b = -significand_b;\n    exponent_a = -exponent_a - (uint)comparison_result;\n  }\n  if (exponent_a < 0x800000) {\n    significand_a = significand_b & 0x80000000;\n    significand_b = significand_b << 1;\n    exponent_a = exponent_a * 2 + (uint)(significand_a != 0);\n    significand_a = shift_amount - 2;\n    if ((exponent_a & 0x800000) == 0) {\n      exponent_b = count_leading_zeroes(exponent_a);\n      exponent_diff_abs = exponent_b - 8;\n      exponent_a = exponent_a << (exponent_diff_abs & 0xff);\n      if ((int)significand_a < (int)exponent_diff_abs) {\n        exponent_a = exponent_a >> (-(significand_a - exponent_diff_abs) & 0xff);\n      }\n      else {\n        exponent_a = exponent_a + (significand_a - exponent_diff_abs) * 0x800000;\n      }\n      return exponent_a | float_bits_a;\n    }\n  }\n  else {\n    significand_a = shift_amount - 1;\n    if (0xffffff < exponent_a) {\n      significand_a = exponent_a & 1;\n      exponent_a = exponent_a >> 1;\n      significand_b = (uint)(significand_a != 0) << 0x1f | significand_b >> 1;\n      significand_a = shift_amount;\n      if (0xfd < shift_amount) goto LAB_08000bde;\n    }\n  }\n  exponent_a = exponent_a + significand_a * 0x800000 + (uint)(0x7fffffff < significand_b);\n  if (significand_b == 0x80000000) {\n    exponent_a = exponent_a & 0xfffffffe;\n  }\n  return exponent_a | float_bits_a;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_float_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "send_data_to_server_08004ee8",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "is_encrypted",
                "param_4": "server_port",
                "PTR_DAT_08004f28": "PACKET_HEADER",
                "*(undefined4 *)PTR_DAT_08004f24": "SERVER_KEY",
                "PTR_DAT_08004f24": "SERVER_KEY_ADDRESS",
                "FUN_08001f6c": "send_data"
            },
            "code": "void send_data_to_server_08004ee8(void* data, int data_size, int is_encrypted, int server_port, char* server_address) {\n  send_data(PTR_DAT_08004f28, data, data_size, is_encrypted, server_port, server_address, *(undefined4 *)PTR_DAT_08004f24);\n  return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "send_data_to_server_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "size_diff",
                "iVar3": "size_offset",
                "puVar2": "ptr1",
                "puVar4": "ptr2"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int size)\n{\n  int size_diff = *(int *)(array1 + 0x10) - *(int *)(array2 + 0x10);\n  if (size_diff == 0) {\n    uint *ptr1 = (uint *)(array2 + 0x14 + *(int *)(array2 + 0x10) * 4);\n    uint *ptr2 = (uint *)(array1 + 0x14) + *(int *)(array2 + 0x10);\n    do {\n      ptr2 = ptr2 - 1;\n      ptr1 = ptr1 - 1;\n      if (*ptr2 != *ptr1) {\n        if (*ptr1 <= *ptr2) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr2);\n  }\n  return size_diff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "is_input_valid_08000998",
                "in_ZR": "input_char",
                "FUN_08000988": "get_input"
            },
            "code": "bool is_input_valid_08000998(void)\n{\n  char input_char;\n  input_char = get_input();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_input_valid_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "undefined",
                "param_4": "float_3",
                "iVar1": "result_int",
                "uVar2": "temp_uint_1",
                "uVar3": "temp_uint_2",
                "uVar4": "temp_uint_3",
                "uVar5": "temp_uint_4",
                "iVar6": "temp_int_1",
                "bVar7": "temp_bool_1"
            },
            "code": "\nuint calculate_float_08000aa8(uint float_1,uint float_2,undefined4 undefined,uint float_3)\n\n{\n  int result_int;\n  uint temp_uint_1;\n  uint temp_uint_2;\n  uint temp_uint_3;\n  uint temp_uint_4;\n  int temp_int_1;\n  bool temp_bool_1;\n  \n  temp_uint_2 = float_1 << 1;\n  temp_bool_1 = temp_uint_2 == 0;\n  if (!temp_bool_1) {\n    float_3 = float_2 << 1;\n    temp_bool_1 = float_3 == 0;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = temp_uint_2 == float_3;\n  }\n  temp_int_1 = (int)temp_uint_2 >> 0x18;\n  if (!temp_bool_1) {\n    temp_bool_1 = temp_int_1 == -1;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = (int)float_3 >> 0x18 == -1;\n  }\n  if (temp_bool_1) {\n    result_int = (int)(float_2 << 1) >> 0x18;\n    if (temp_int_1 == -1 || result_int == -1) {\n      temp_uint_2 = float_2;\n      if (temp_int_1 == -1) {\n        temp_uint_2 = float_1;\n      }\n      if (temp_int_1 != -1 || result_int != -1) {\n        float_2 = temp_uint_2;\n      }\n      temp_bool_1 = (temp_uint_2 & 0x7fffff) == 0;\n      if (temp_bool_1) {\n        temp_bool_1 = (float_2 & 0x7fffff) == 0;\n      }\n      if (temp_bool_1) {\n        temp_bool_1 = temp_uint_2 == float_2;\n      }\n      if (!temp_bool_1) {\n        temp_uint_2 = temp_uint_2 | 0x400000;\n      }\n      return temp_uint_2;\n    }\n    if (((float_1 ^ float_2) & 0x7fffffff) != 0) {\n      if (temp_uint_2 == 0) {\n        float_1 = float_2;\n      }\n      return float_1;\n    }\n    if (float_1 != float_2) {\n      return 0;\n    }\n    if ((temp_uint_2 & 0xff000000) == 0) {\n      temp_uint_2 = float_1 << 1;\n      if ((float_1 & 0x80000000) != 0) {\n        temp_uint_2 = temp_uint_2 | 0x80000000;\n      }\n      return temp_uint_2;\n    }\n    if (temp_uint_2 < 0xfe000000) {\n      return float_1 + 0x800000;\n    }\n    float_1 = float_1 & 0x80000000;\nLAB_08000bde:\n    return float_1 | 0x7f800000;\n  }\n  temp_uint_2 = temp_uint_2 >> 0x18;\n  float_3 = float_3 >> 0x18;\n  temp_uint_4 = float_3 - temp_uint_2;\n  temp_bool_1 = temp_uint_4 != 0;\n  temp_uint_3 = temp_uint_2;\n  if (temp_bool_1 && temp_uint_2 <= float_3) {\n    temp_uint_3 = temp_uint_2 + temp_uint_4;\n  }\n  if (temp_bool_1 && temp_uint_2 <= float_3) {\n    float_2 = float_2 ^ float_1;\n  }\n  if (temp_bool_1 && temp_uint_2 <= float_3) {\n    float_1 = float_1 ^ float_2;\n  }\n  if (temp_bool_1 && temp_uint_2 <= float_3) {\n    float_2 = float_2 ^ float_1;\n  }\n  if (float_3 < temp_uint_2) {\n    temp_uint_4 = -temp_uint_4;\n  }\n  if (0x19 < temp_uint_4) {\n    return float_1;\n  }\n  temp_uint_2 = float_1 & 0xffffff | 0x800000;\n  if ((float_1 & 0x80000000) != 0) {\n    temp_uint_2 = -temp_uint_2;\n  }\n  temp_uint_1 = float_2 & 0xffffff | 0x800000;\n  if ((float_2 & 0x80000000) != 0) {\n    temp_uint_1 = -temp_uint_1;\n  }\n  if (temp_uint_3 == temp_uint_4) {\n    temp_uint_1 = temp_uint_1 ^ 0x800000;\n    if (temp_uint_3 == 0) {\n      temp_uint_2 = temp_uint_2 ^ 0x800000;\n      temp_uint_3 = 1;\n    }\n    else {\n      temp_uint_4 = temp_uint_4 - 1;\n    }\n  }\n  temp_uint_2 = temp_uint_2 + ((int)temp_uint_1 >> (temp_uint_4 & 0xff));\n  temp_uint_1 = temp_uint_1 << (0x20 - temp_uint_4 & 0xff);\n  float_1 = temp_uint_2 & 0x80000000;\n  if ((int)temp_uint_2 < 0) {\n    temp_bool_1 = temp_uint_1 != 0;\n    temp_uint_1 = -temp_uint_1;\n    temp_uint_2 = -temp_uint_2 - (uint)temp_bool_1;\n  }\n  if (temp_uint_2 < 0x800000) {\n    temp_uint_4 = temp_uint_1 & 0x80000000;\n    temp_uint_1 = temp_uint_1 << 1;\n    temp_uint_2 = temp_uint_2 * 2 + (uint)(temp_uint_4 != 0);\n    temp_uint_4 = temp_uint_3 - 2;\n    if ((temp_uint_2 & 0x800000) == 0) {\n      temp_int_1 = count_leading_zeroes(temp_uint_2);\n      temp_uint_3 = temp_int_1 - 8;\n      temp_uint_2 = temp_uint_2 << (temp_uint_3 & 0xff);\n      if ((int)temp_uint_4 < (int)temp_uint_3) {\n        temp_uint_2 = temp_uint_2 >> (-(temp_uint_4 - temp_uint_3) & 0xff);\n      }\n      else {\n        temp_uint_2 = temp_uint_2 + (temp_uint_4 - temp_uint_3) * 0x800000;\n      }\n      return temp_uint_2 | float_1;\n    }\n  }\n  else {\n    temp_uint_4 = temp_uint_3 - 1;\n    if (0xffffff < temp_uint_2) {\n      temp_uint_4 = temp_uint_2 & 1;\n      temp_uint_2 = temp_uint_2 >> 1;\n      temp_uint_1 = (uint)(temp_uint_4 != 0) << 0x1f | temp_uint_1 >> 1;\n      temp_uint_4 = temp_uint_3;\n      if (0xfd < temp_uint_3) goto LAB_08000bde;\n    }\n  }\n  temp_uint_2 = temp_uint_2 + temp_uint_4 * 0x800000 + (uint)(0x7fffffff < temp_uint_1);\n  if (temp_uint_1 == 0x80000000) {\n    temp_uint_2 = temp_uint_2 & 0xfffffffe;\n  }\n  return temp_uint_2 | float_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_float_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "is_end_of_string_080009ac",
                "in_CY": "current_char",
                "FUN_08000988": "execute_something"
            },
            "code": "bool is_end_of_string_080009ac(void)\n{\n  char current_char;\n  execute_something();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "swap_values_08000fc8",
                "param_1": "first_value",
                "param_2": "second_value"
            },
            "code": "void swap_values_08000fc8(int* first_value, int* second_value)\n{\n  int temp = *first_value;\n  *first_value = *second_value;\n  *second_value = temp;\n  return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "swap_values_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_parameter_0800438a",
                "param_1": "param_array",
                "uVar1": "result",
                "*(char *)((int)param_1 + 0x39)": "param_array[9]",
                "*(undefined *)(param_1 + 0xe)": "param_array[14]",
                "do_nothing_08004424": "do_nothing",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(param_array[0] + 12)",
                "FUN_080046ec": "do_something",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(param_array[0] + 16)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(param_array[0] + 20)",
                "param_1[0xf]": "param_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "param_array[9]",
                "*(undefined *)((int)param_1 + 0x3a)": "param_array[10]"
            },
            "code": "int check_parameter_0800438a(int *param_array)\n{\n    int result = 0;\n    if (param_array == NULL) {\n        result = 1;\n    }\n    else {\n        if (param_array[9] == 0) {\n            param_array[14] = 0;\n            do_nothing(param_array);\n        }\n        param_array[9] = 36;\n        *(uint *)(param_array[0] + 12) &= 0xffffdfff;\n        FUN_080046ec(param_array);\n        *(uint *)(param_array[0] + 16) &= 0xffffb7ff;\n        *(uint *)(param_array[0] + 20) &= 0xffffffd5;\n        *(uint *)(param_array[0] + 12) |= 0x2000;\n        param_array[15] = 0;\n        param_array[9] = 32;\n        param_array[10] = 32;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_parameter_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_flag_and_call_functions_080014f0",
                "FUN_08001714": "call_function_A",
                "FUN_0800151c": "call_function_B",
                "do_nothing_08002d8a": "do_nothing",
                "DAT_08001518": "flag_pointer"
            },
            "code": "int set_flag_and_call_functions_080014f0() {\\n\\\n  *DAT_08001518 = *DAT_08001518 | 0x10;\\n\\\n  call_function_A(3);\\n\\\n  call_function_B(0xf);\\n\\\n  do_nothing();\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_0800151c",
                "FUN_08001714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "set_data_08003908",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_type",
                "uVar1": "return_val",
                "*(char *)(param_1 + 0xf)": "*(char *)(data_ptr + 0xf)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(data_ptr + 0xf)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)((int)data_ptr + 0x3d)",
                "*(undefined *)((int)data_ptr + 0x3d)": "*(char *)((int)data_ptr + 0x3d)",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(*data_ptr + 0x18)",
                "*(uint *)(param_2 + 0x10)": "*(uint *)(data_size + 0x10)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(*data_ptr + 0x1c)",
                "*(int *)(param_2 + 0x10)": "*(int *)(data_size + 0x10)"
            },
            "code": "int set_data_08003908(int *data_ptr, int data_size, int data_type) {\n    int return_val;\n    if (*(char *)(data_ptr + 0xf) == '\\x01') {\n        return_val = 2;\n    }\n    else {\n        *(char *)(data_ptr + 0xf) = 1;\n        *(char *)((int)data_ptr + 0x3d) = 2;\n        switch(data_type) {\n            case 0:\n                set_data_08003908_type_0(*data_ptr, data_size);\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 8;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffffb;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(data_size + 0x10) | *(uint *)(*data_ptr + 0x18);\n                break;\n            case 4:\n                set_data_08003908_type_4(*data_ptr, data_size);\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 0x800;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffbff;\n                *(uint *)(*data_ptr + 0x18) = *(int *)(data_size + 0x10) << 8 | *(uint *)(*data_ptr + 0x18);\n                break;\n            case 8:\n                set_data_08003908_type_8(*data_ptr, data_size);\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 8;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffffb;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(data_size + 0x10) | *(uint *)(*data_ptr + 0x1c);\n                break;\n            case 0xc:\n                set_data_08003908_type_c(*data_ptr, data_size);\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 0x800;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffbff;\n                *(uint *)(*data_ptr + 0x1c) = *(int *)(data_size + 0x10) << 8 | *(uint *)(*data_ptr + 0x1c);\n        }\n        *(char *)((int)data_ptr + 0x3d) = 1;\n        *(char *)(data_ptr + 0xf) = 0;\n        return_val = 0;\n    }\n    return return_val;\n}",
            "called": [
                "FUN_08003f18",
                "FUN_08003d60",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_data_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "initialize_data_buffer_08004f60",
                "PTR_DAT_08004f74": "data_buffer",
                "0": "start_index",
                "0x40": "size",
                "FUN_08005d68": "memset"
            },
            "code": "void initialize_data_buffer_08004f60(void)\n{\n  memset(PTR_DAT_08004f74, 0, DATA_BUFFER_SIZE);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "initialize_data_buffer_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "check_for_zero_080009c0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_08000988": "execute_pre_check"
            },
            "code": "bool check_for_zero_080009c0(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  execute_pre_check();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "check_for_zero_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint32_t input1, int input2, uint32_t input3, int input4)\n{\n    int is_input1_invalid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    int is_input2_invalid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n    return !(is_input1_invalid || is_input2_invalid);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_values_08003f18",
                "param_1": "object_address",
                "param_2": "new_values",
                "uVar1": "first_value",
                "uVar2": "second_value",
                "local_10": "local_value",
                "DAT_08003ff4": "PTR_08003ff4",
                "*object_value_1": "object_value_1"
            },
            "code": "void update_values_08003f18(int object_address, uint *new_values)\n{\n  uint first_value;\n  uint second_value;\n  uint local_value;\n  \n  uint *object_value_1 = (uint *)(object_address + 0x20);\n  *object_value_1 = *object_value_1 & 0xfffffeff;\n  local_value = *(uint *)(object_address + 4);\n  first_value = *new_values;\n  second_value = new_values[2] << 8 | *(uint *)(object_address + 0x20) & 0xfffffdff;\n  if (object_address == DAT_08003ff4) {\n    second_value = (new_values[3] << 8 | second_value & 0xfffff7ff) & 0xfffffbff;\n    local_value = new_values[6] << 4 | new_values[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(object_address + 4) = local_value;\n  *(uint *)(object_address + 0x1c) = first_value | *(uint *)(object_address + 0x1c) & 0xffffff8c;\n  *(uint *)(object_address + 0x3c) = new_values[1];\n  *(uint *)(object_address + 0x20) = second_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_values_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "decompressData_080097cc",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "srcEnd",
                "iVar1": "dstIndex",
                "uVar2": "srcBitCount",
                "iVar3": "srcByteCount",
                "iVar4": "srcBitOffset",
                "uVar5": "dstByteCount",
                "uVar6": "dstBitOffset",
                "uVar7": "dstBits",
                "uVar8": "srcBits",
                "copySize": "copySize",
                "dstByteIndex": "dstByteIndex",
                "srcByteIndex": "srcByteIndex",
                "byte": "byte",
                "bits": "bits",
                "bitCount": "bitCount",
                "bitOffset": "bitOffset"
            },
            "code": "int decompressData_080097cc(int *dst, int *src, int *srcEnd)\n{\n  int dstIndex = *dst;\n  int srcIndex = *src;\n  uint srcBitCount = src[2];\n  uint srcByteCount = srcBitCount >> 3;\n  uint srcBitOffset = srcBitCount & 7;\n  uint dstByteCount = srcEnd - dst;\n  uint dstBitOffset = dstIndex & 7;\n  uint dstBits = dstIndex & 0xFFFFFFF8;\n  uint srcBits = srcIndex & 0xFFFFFFF8;\n  uint copySize;\n  uint dstByteIndex;\n  uint srcByteIndex;\n  uint byte;\n  uint bits;\n  uint bitCount;\n  uint bitOffset;\n  if (src[2] != 0) {\n    do {\n      bits = *(uint *)(srcIndex + 4);\n      bitCount = bits & 0x1F;\n      bitOffset = bits >> 5;\n      srcIndex += 8;\n      if (bitCount == 0) {\n        byte = *(uchar *)(srcByteCount + 4 + srcIndex);\n        srcByteCount++;\n        bitCount = 8;\n        bits = byte;\n        bitOffset = 0;\n      }\n      if (dstByteCount == 0) {\n        return -1;\n      }\n      if (bitCount > dstBitOffset) {\n        copySize = bitCount - dstBitOffset;\n        bitCount = dstBitOffset;\n        bits >>= copySize;\n      } else {\n        copySize = dstBitOffset - bitCount;\n        bits <<= copySize;\n      }\n      byte = *(uchar *)(dstBits + dstIndex / 8);\n      byte |= bits;\n      *(uchar *)(dstBits + dstIndex / 8) = byte;\n      dstIndex += bitCount;\n      dstByteCount--;\n      dstByteIndex = dstIndex >> 3;\n      srcByteIndex = srcIndex >> 3;\n      dstBitOffset = dstIndex & 7;\n      if (dstByteIndex != srcByteIndex) {\n        dstBits = dstByteIndex & 0xFFFFFFF8;\n        srcBits = srcByteIndex & 0xFFFFFFF8;\n        if (dstBits != srcBits) {\n          dstBits = srcBits;\n        }\n        copySize = dstByteIndex - srcByteIndex;\n        dstIndex += copySize * 8;\n        dstByteCount -= copySize;\n      }\n      if (bitOffset != 0) {\n        byte = *(uchar *)(srcBits + srcByteIndex);\n        byte >>= bitOffset;\n        bits = byte;\n        bitCount = 8 - bitOffset;\n        if (bitCount > dstByteCount * 8 - dstIndex) {\n          bitCount = dstByteCount * 8 - dstIndex;\n          bits &= (1 << bitCount) - 1;\n        }\n        byte = *(uchar *)(dstBits + dstIndex / 8);\n        byte |= bits;\n        *(uchar *)(dstBits + dstIndex / 8) = byte;\n        dstIndex += bitCount;\n        dstByteCount -= dstIndex >> 3 - dstByteIndex << 3;\n        dstByteIndex = dstIndex >> 3;\n        dstBitOffset = dstIndex & 7;\n      }\n    } while (srcIndex != srcEnd);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "decompressData_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = FUN_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = FUN_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = FUN_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ca8",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_if_valid_input_08002ad8",
                "param_1": "input_array",
                "param_2": "input_value",
                "param_3": "input_mask",
                "param_4": "param_4",
                "iVar1": "compare_result",
                "cVar2": "char_result",
                "uVar3": "masked_input_value",
                "bVar4": "input_value_valid",
                "*param_1": "*input_array",
                "(*param_1)[5]": "(array_ptr)[5]",
                "(*param_1)[6]": "(array_ptr)[6]",
                "(uint *)0x4": "(uint32_t *)0x4",
                "(uint *)0x0": "(uint32_t *)0x0",
                "(input_array + 0xf)": "(input_array + 0xf)",
                "(int)param_1 + 0x3d": "(int)input_array + 0x3d"
            },
            "code": "uint32_t check_if_valid_input_08002ad8(uint32_t **input_array, uint32_t input_value, uint32_t input_mask, int param_4)\n{\n  int compare_result;\n  char char_result;\n  uint32_t masked_input_value;\n  bool input_value_valid;\n  uint32_t *array_ptr = *input_array;\n\n  do {\n    if ((input_mask >> 0x10 & 0xff) == 1) {\n      masked_input_value = input_value & ~(array_ptr)[5] & 0xffff;\n      input_value_valid = masked_input_value != 0;\n      if (input_value_valid) {\n        masked_input_value = 1;\n      }\n      char_result = (char)masked_input_value;\n      if (!input_value_valid) {\n        char_result = 0;\n      }\n    }\n    else {\n      masked_input_value = input_value & ~(array_ptr)[6] & 0xffff;\n      input_value_valid = masked_input_value != 0;\n      if (input_value_valid) {\n        masked_input_value = 1;\n      }\n      char_result = (char)masked_input_value;\n      if (!input_value_valid) {\n        char_result = 0;\n      }\n    }\n    if (char_result == 0) {\n      return 0;\n    }\n    if (((array_ptr)[5] & 0x400) == 0x400) {\n      **input_array = **input_array | 0x200;\n      (array_ptr)[5] = 0xfffffbff;\n      input_array[0x10] = (uint32_t *)0x4;\n      input_array[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)(input_array + 0xf) = 0;\n      return 1;\n    }\n  } while ((input_mask == 0xffffffff) || ((input_mask != 0 && (compare_result = FUN_080015a0(), (uint32_t)(compare_result - param_4) <= input_mask))));\n  input_array[0xc] = (uint32_t *)0x0;\n  *(undefined *)((int)input_array + 0x3d) = 0x20;\n  *(undefined *)(input_array + 0xf) = 0;\n  return 3;\n}\n",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_if_valid_input_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "concatenate_32_bit_values_to_64_bit_value_and_return_it_08000fd0",
                "param_1": "lower_32_bits",
                "param_2": "higher_32_bits"
            },
            "code": "undefined8 concatenate_32_bit_values_to_64_bit_value_and_return_it_08000fd0(undefined4 lower_32_bits, undefined4 higher_32_bits) {\n    call_function_at_address_08000f68();\n    return CONCAT44(higher_32_bits, lower_32_bits);\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "concatenate_32_bit_values_to_64_bit_value_and_return_it_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "set_flags_08003d60",
                "param_1": "flags",
                "param_2": "data",
                "local_10": "third_data",
                "uVar1": "first_data",
                "uVar2": "second_data"
            },
            "code": "void set_flags_08003d60(int flags, uint *data)\n{\n  uint first_data = *data;\n  uint second_data = data[2] | (flags & 0xfffffffd);\n  uint third_data = *(uint *)(flags + 0x20) & 0xfffffffe;\n  if (flags == PTR_DAT_08003e34) {\n    second_data = (data[3] | second_data & 0xfffffff7) & 0xfffffffb;\n    first_data = data[6] | data[5] | first_data & 0xfffffcff;\n  }\n  *(uint *)(flags + 0x18) = first_data | *(uint *)(flags + 0x18) & 0xffffff8c;\n  *(uint *)(flags + 0x34) = data[1];\n  *(uint *)(flags + 0x20) = second_data;\n  *(uint *)(flags + 0x4) = third_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_flags_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "calculate_shifted_result_08003518",
                "uVar1": "result",
                "FUN_08003504": "calculate_value",
                "PTR_DAT_0800353c": "shift_array",
                "DAT_08003538": "data_array"
            },
            "code": "uint calculate_shifted_result_08003518(void)\n{\n  uint result = calculate_value();\n  uint shift_amount = PTR_DAT_0800353c[*(uint *)(DAT_08003538 + 4) >> 8 & 7];\n  return result >> shift_amount;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "calculate_shifted_result_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "update_data_08001618",
                "param_1": "data",
                "param_2": "value",
                "DAT_08001664": "data_ptr_1",
                "DAT_08001668": "data_ptr_2"
            },
            "code": "void update_data_08001618(byte data, uint8_t value) {\n  if (data < 0) {\n    *(char *)((data & 0xf) + DAT_08001664 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data + DAT_08001668 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "imported": false,
            "current_name": "update_data_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_bits_set_to_one_080091a4",
                "param_1": "input_number",
                "iVar1": "bit_count"
            },
            "code": "int count_bits_set_to_one_080091a4(uint32_t input_number)\n{\n    int bit_count = 0;\n    if ((input_number & 0xffff0000) == 0) {\n        input_number <<= 0x10;\n        bit_count = 0x10;\n    }\n    if ((input_number & 0xff000000) == 0) {\n        input_number <<= 8;\n        bit_count += 8;\n    }\n    if ((input_number & 0xf0000000) == 0) {\n        input_number <<= 4;\n        bit_count += 4;\n    }\n    if ((input_number & 0xc0000000) == 0) {\n        input_number <<= 2;\n        bit_count += 2;\n    }\n    if (-1 < (int)input_number) {\n        if ((int)(input_number << 1) < 0) {\n            return bit_count + 1;\n        }\n        bit_count = 0x20;\n    }\n    return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_one_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "process_audio_data_08004f78",
                "FUN_08004ae0": "initialize_audio",
                "FUN_08004bd8": "set_pitch",
                "FUN_08004f60": "get_audio_data",
                "FUN_08005dfc": "process_data",
                "FUN_08005e40": "modify_data",
                "FUN_08004f3c": "validate_data",
                "FUN_08000aa4": "set_audio_output",
                "FUN_08000cb8": "process_audio",
                "FUN_08000c10": "get_data",
                "FUN_08000ff4": "validate_data_1",
                "FUN_08001030": "validate_data_2",
                "FUN_08000c08": "modify_data_2",
                "PTR_DAT_080051e0": "audio_config_ptr",
                "PTR_DAT_080051e4": "audio_data_ptr",
                "PTR_DAT_080051ec": "data_config_ptr",
                "PTR_s_Pitch___f_080051e8": "pitch_config_ptr",
                "PTR_DAT_080051f0": "audio_output_config_ptr",
                "PTR_DAT_080051f4": "audio_output_data_ptr",
                "PTR_DAT_080051f8": "audio_processing_config_ptr",
                "PTR_DAT_080051fc": "audio_processing_data_ptr",
                "PTR_DAT_08005200": "audio_processing_2_config_ptr",
                "PTR_DAT_08005204": "audio_processing_2_data_ptr",
                "PTR_DAT_08005208": "data_processing_config_ptr",
                "PTR_DAT_0800520c": "data_processing_data_ptr",
                "PTR_DAT_08005210": "data_validation_config_ptr",
                "PTR_DAT_08005214": "audio_output_data_ptr_2",
                "PTR_DAT_08005218": "audio_processing_3_data_ptr",
                "PTR_DAT_08005220": "audio_output_config_2_ptr",
                "DAT_0800521c": "data_validation_config"
            },
            "code": "void process_audio_data_08004f78(void)\n{\n  initialize_audio();\n  set_pitch();\n  uint32_t audio_data = get_audio_data();\n  uint32_t processed_data = process_data(audio_data);\n  uint32_t modified_data = modify_data(processed_data);\n  uint32_t final_data = validate_data(modified_data);\n  set_audio_output(final_data);\n}\n",
            "called": [
                "FUN_08004ae0",
                "FUN_08000418",
                "FUN_08004f60",
                "FUN_08000aa8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08000cb8",
                "FUN_08001044",
                "FUN_08000aa4",
                "FUN_08005dfc",
                "FUN_08004bd8",
                "FUN_08000c10",
                "FUN_08000c08",
                "FUN_08005e40",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "imported": false,
            "current_name": "process_audio_data_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "getValueFromPointer_080015a0",
                "PTR_DAT_080015b0": "pointerValue"
            },
            "code": "getValueFromPointer_080015a0() {\n    return *(undefined4 *)PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002d98",
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08003260",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "process_data_08002d98",
                "param_1": "input_data",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "bVar4": "flag",
                "param_1[1]": "input_data_1",
                "param_1[4]": "input_data_4",
                "param_1[6]": "input_data_6",
                "param_1[3]": "input_data_3",
                "param_1[7]": "input_data_7",
                "param_1[8]": "input_data_8",
                "param_1[9]": "input_data_9"
            },
            "code": "\nundefined4 process_data_08002d98(uint *input_data)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool flag;\n  \n  if ((*input_data & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (input_data_1 == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (input_data_1 == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (input_data_1 == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (input_data_1 == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (input_data_1 == 0) {\n        start_time = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*input_data & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (input_data_4 != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = input_data[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (input_data_4 == 0) {\n      *DAT_08003000 = 0;\n      start_time = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      start_time = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = input_data[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*input_data & 8) != 0) {\n    if (input_data_6 == 0) {\n      *DAT_08003004 = 0;\n      start_time = FUN_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      start_time = FUN_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*input_data & 4) != 0) {\n    flag = (DAT_08003254[7] & 0x10000000) == 0;\n    if (flag) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      start_time = FUN_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        current_time = FUN_080015a0();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (input_data_3 == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (input_data_3 == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (input_data_3 == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (input_data_3 == 0) {\n      start_time = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (input_data_7 == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    result = 1;\n  }\n  else if (input_data_7 == 2) {\n    *DAT_0800325c = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (input_data_8 == 0x10000) {\n          DAT_08003254[1] = input_data[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = input_data_9 | input_data_8 | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        start_time = FUN_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          current_time = FUN_080015a0();\n          if (2 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "process_data_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "print_result_0800172a",
                "param_1": "output_char",
                "param_2": "input1",
                "param_3": "input2",
                "uVar1": "result",
                "FUN_080015fc": "calculate_result",
                "FUN_0800166c": "process_result",
                "FUN_08001618": "print_output"
            },
            "code": "void print_result_0800172a(char output_char, int input1, int input2)\n{\n  int result = calculate_result();\n  int final_result = process_result(result, input1, input2);\n  print_output((int)output_char, final_result);\n  return;\n}",
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "print_result_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "check_condition_080009d4",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_08000978": "execute_pre_check"
            },
            "code": "bool check_condition_080009d4(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  execute_pre_check();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_condition_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_other_bits_08005780",
                "DAT_080057dc": "data_pointer",
                "DAT_080057e0": "mask",
                "DAT_080057e4": "pointer_to_constant"
            },
            "code": "void set_bit_and_clear_other_bits_08005780(void)\n{\n  unsigned int *DAT_080057dc = DAT_080057dc;\n  *DAT_080057dc |= 1;\n  DAT_080057dc[1] &= DAT_080057e0;\n  *DAT_080057dc &= 0xfef6ffff;\n  *DAT_080057dc &= 0xfffbffff;\n  DAT_080057dc[1] &= 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e4 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "get_value_08009744",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr_to_val",
                "iVar2": "result"
            },
            "code": "void get_value_08009744(int *output, undefined4 input)\n{\n  undefined *ptr_to_val;\n  int result;\n  ptr_to_val = PTR_DAT_08009764;\n  *(undefined4 *)PTR_DAT_08009764 = 0;\n  result = calculate_value(input);\n  if ((result == -1) && (*(int *)ptr_to_val != 0)) {\n    *output = *(int *)ptr_to_val;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "get_value_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_param_and_call_function_08003640",
                "param_1": "param_array",
                "uVar1": "result",
                "NULL": "NULL",
                "char": "char",
                "do_nothing_08003696": "do_nothing",
                "undefined": "undefined",
                "FUN_08003c94": "call_function"
            },
            "code": "int check_param_and_call_function_08003640(int *param_array)\n{\n    int result;\n    if (param_array == NULL) {\n        result = 1;\n    }\n    else {\n        if (param_array[15] == 0) {\n            param_array[0xf] = 0;\n            do_nothing(param_array);\n        }\n        param_array[15] = 2;\n        call_function(param_array[0], &param_array[1]);\n        param_array[15] = 1;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_param_and_call_function_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_and_initialize_08009980",
                "param_1": "initial_value",
                "param_2": "num_rows",
                "param_3": "num_cols",
                "puVar1": "allocated_memory",
                "uVar2": "total_size",
                "puVar3": "return_ptr"
            },
            "code": "#include <stdlib.h>\\n\\n\\\n    int* allocate_memory_and_initialize_08009980(int initial_value, int num_rows, int num_cols)\\n\\\n    {\\n\\\n        int* allocated_memory = (int*) malloc(num_rows * num_cols * sizeof(int));\\n\\n\\\n        if (allocated_memory == NULL)\\n\\\n        {\\n\\\n            return NULL;\\n\\\n        }\\n\\n\\\n        int total_size = (allocated_memory[-1] & 0xfffffffc) - 4;\\n\\\n        if (total_size >= 37)\\n\\\n        {\\n\\\n            free(allocated_memory);\\n\\\n            return NULL;\\n\\\n        }\\n\\n\\\n        for (int i = 0; i < num_rows * num_cols; i++)\\n\\\n        {\\n\\\n            allocated_memory[i] = initial_value;\\n\\\n        }\\n\\n\\\n        return allocated_memory;\\n\\\n    }",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUN_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUN_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)FUN_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)FUN_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080096e0",
                "FUN_080003f4",
                "FUN_080004c8",
                "FUN_080009ac",
                "FUN_0800119c",
                "FUN_080009c0",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_080097cc",
                "FUN_08009768",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_08008ad4",
                "FUN_080011ec",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080009e8",
                "FUN_080079e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUN_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "number1",
                "param_2": "number2",
                "DAT_08000144": "global_variable",
                "PTR_FUN_0800014c": "function_pointer",
                "PTR_DAT_08000148": "data_pointer"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t param_1, uint64_t param_2)\n{\n  if (DAT_08000144 != 0) {\n    param_1 = PTR_FUN_0800014c;\n    param_2 = PTR_DAT_08000148;\n  }\n  return ((uint64_t)param_2 << 32) | param_1;\n}\n",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "initialize_application_08005704",
                "FUN_0800157c": "initialize_config",
                "FUN_080017b4": "initialize_gui"
            },
            "code": "void initialize_application_08005704(void)\n{\n  initialize_config();\n  initialize_gui();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "initialize_application_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "decode_binary_08000418",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "high_bits",
                "uVar2": "shifted_input",
                "uVar3": "high_bits_mask",
                "uVar4": "low_bits",
                "uVar5": "middle_bits",
                "bVar8": "is_shift_count_zero",
                "bVar9": "all_high_bits_set",
                "bVar10": "is_shift_count_negative",
                "uVar7": "leading_zeros_count",
                "all_low_bits_zero": "all_low_bits_zero",
                "high_bits_set_to_0xff": "high_bits_set_to_0xff",
                "shift_count": "shift_count",
                "leading_zeros_count": "leading_zeros_count",
                "high_bits_mask": "high_bits_mask",
                "middle_bits_mask": "middle_bits_mask",
                "low_bits_mask": "low_bits_mask",
                "high_bits_shifted": "high_bits_shifted",
                "middle_bits_shifted": "middle_bits_shifted",
                "low_bits_shifted": "low_bits_shifted"
            },
            "code": "ulonglong decode_binary_08000418(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint shift_count;\n  uint leading_zeros_count;\n  uint high_bits;\n  uint middle_bits;\n  uint low_bits;\n  bool all_high_bits_set;\n  bool all_low_bits_zero;\n  bool high_bits_set_to_0xff;\n  bool is_shift_count_negative;\n  bool is_shift_count_zero;\n  uint shifted_input;\n  uint32_t high_bits_mask;\n  uint32_t middle_bits_mask;\n  uint32_t low_bits_mask;\n  uint32_t high_bits_shifted;\n  uint32_t middle_bits_shifted;\n  uint32_t low_bits_shifted;\n  \n  middle_bits = input << 1;\n  all_low_bits_zero = middle_bits == 0;\n  high_bits = (uint)((input & 0x80000000) != 0) << 0x1f;\n  low_bits = (uint)((int)middle_bits >> 3) >> 1;\n  high_bits_mask = high_bits | low_bits;\n  shifted_input = input << 0x1d;\n  if (!all_low_bits_zero) {\n    all_high_bits_set = (middle_bits & 0xff000000) == 0xff000000;\n  }\n  if (all_low_bits_zero) {\n    if ((middle_bits & 0xffffff) == 0) {\n      return CONCAT44(high_bits_mask, shifted_input);\n    }\n  }\n  else {\n    all_high_bits_set = (middle_bits & 0xff000000) == 0xff000000;\n    if (!all_high_bits_set) {\n      return CONCAT44(high_bits_mask, shifted_input) ^ 0x3800000000000000;\n    }\n  }\n  high_bits_set_to_0xff = (middle_bits & 0xff000000) == 0xff000000;\n  if (high_bits_set_to_0xff) {\n    return CONCAT44(high_bits_mask, shifted_input) | 0x8000000000000;\n  }\n  if (low_bits == 0) {\n    middle_bits_shifted = shifted_input;\n    high_bits_shifted = high_bits_mask;\n  }\n  else {\n    leading_zeros_count = count_leading_zeroes(low_bits);\n    is_shift_count_negative = leading_zeros_count - 0xb < 0;\n    is_shift_count_zero = leading_zeros_count - 0xb == 0;\n    if (leading_zeros_count < 0x20) {\n      shift_count = is_shift_count_negative ? 0x20 : leading_zeros_count - 0x1f;\n      middle_bits_shifted = low_bits << (shift_count & 0xff);\n      high_bits_shifted = low_bits >> ((0xcU - leading_zeros_count) & 0xff);\n    }\n    else {\n      shift_count = 0x380 - leading_zeros_count;\n      high_bits_shifted = high_bits_mask | (low_bits << (shift_count & 0xff));\n      if (shift_count > 0x1e) {\n        return CONCAT44(high_bits_shifted, shifted_input) & 0x80000000ffffffff;\n      }\n      else {\n        is_shift_count_negative = shift_count - 0x13 < 0;\n        is_shift_count_zero = shift_count - 0x13 == 0;\n        high_bits_mask = high_bits_mask | (low_bits >> (shift_count & 0xff));\n        middle_bits_shifted = shifted_input >> (shift_count & 0xff) | low_bits << ((0x20 - shift_count) & 0xff);\n        if (!(is_shift_count_zero || is_shift_count_negative)) {\n          return CONCAT44(high_bits_shifted, middle_bits_shifted) & 0x80000000ffffffff;\n        }\n        else {\n          return CONCAT44(high_bits_shifted, shifted_input >> ((0x20 - (0xcU - shift_count)) & 0xff) | low_bits << ((0xcU - shift_count) & 0xff)) & 0x80000000ffffffff;\n        }\n      }\n    }\n  }\n  high_bits_mask = high_bits_shifted;\n  middle_bits_mask = middle_bits_shifted;\n  low_bits_mask = shifted_input << (shift_count & 0xff);\n  return CONCAT44(high_bits_mask, middle_bits_mask | low_bits_mask);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_binary_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_for_flagged_08002ca8",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "*param_1": "*data",
                "iVar1": "index",
                "FUN_080015a0": "get_index"
            },
            "code": "int check_for_flagged_08002ca8(int *data, uint data_size, int param_3)\n{\n  int index = 0;\n  while( true ) {\n    if ((*(uint *)(*data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*data + 0x14) & 0x10) == 0x10) break;\n    if ((data_size == 0) || (index = get_index(), data_size < (uint)(index - param_3))) {\n      data[0x10] = data[0x10] | 0x20;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data + 0x14) = 0xffffffef;\n  data[0x10] = 0;\n  data[0xc] = 0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 1;\n}\n",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_for_flagged_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "handle_input_08003a94",
                "param_1": "input_values",
                "param_2": "input_flags",
                "uVar1": "result",
                "uVar2": "input_flag"
            },
            "code": "int handle_input_08003a94(int *input_values, uint *input_flags) {\n    int result = 0;\n    if (*(char *)(input_values + 0xf) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(char *)(input_values + 0xf) = 1;\n        *(char *)((int)input_values + 0x3d) = 2;\n        *(uint *)(*input_values + 8) &= 0xffff0088;\n        uint input_flag = *input_flags;\n        if (input_flag == 0x40) {\n            execute_080040a0(*input_values, input_flags[1], input_flags[3]);\n            execute_0800416a(*input_values, 0x40);\n        }\n        else if (input_flag < 0x41) {\n            if (input_flag == 0x10) {\n                execute_0800416a(*input_values, 0x10);\n            }\n            else if (input_flag == 0) {\n                execute_0800416a(*input_values, 0);\n            }\n            else if (input_flag == 0x20) {\n                execute_0800416a(*input_values, 0x20);\n            }\n            else if (input_flag == 0x30) {\n                execute_0800416a(*input_values, 0x30);\n            }\n        }\n        else if (input_flag == 0x70) {\n            execute_080041a8(*input_values, input_flags[2], input_flags[1], input_flags[3]);\n            *(uint *)(*input_values + 8) &= 0xffffff88 | 0x77;\n        }\n        else if (input_flag < 0x71) {\n            if (input_flag == 0x50) {\n                execute_080040a0(*input_values, input_flags[1], input_flags[3]);\n                execute_0800416a(*input_values, 0x50);\n            }\n            else if (input_flag == 0x60) {\n                execute_08004104(*input_values, input_flags[1], input_flags[3]);\n                execute_0800416a(*input_values, 0x60);\n            }\n        }\n        else if (input_flag == 0x1000) {\n            *(uint *)(*input_values + 8) &= 0xfffffff8;\n        }\n        else if (input_flag == 0x2000) {\n            execute_080041a8(*input_values, input_flags[2], input_flags[1], input_flags[3]);\n            *(uint *)(*input_values + 8) |= 0x4000;\n        }\n        *(char *)((int)input_values + 0x3d) = 1;\n        *(char *)(input_values + 0xf) = 0;\n        result = 0;\n    }\n    return result;\n}\n",
            "called": [
                "FUN_0800416a",
                "FUN_080040a0",
                "FUN_08004104",
                "FUN_080041a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "handle_input_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "update_memory_allocation_0800416a",
                "param_1": "memory_address",
                "param_2": "new_allocation_size",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_1 + 8)": "allocation_flags",
                "uint": "unsigned int"
            },
            "code": "void update_memory_allocation_0800416a(int memory_address, ushort new_allocation_size) {\n    uint* allocation_flags = (uint*)(memory_address + 8);\n    *allocation_flags = (*allocation_flags & 0xffffff8f) | (uint)(new_allocation_size | 7);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_memory_allocation_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_flags_and_call_functions_080055f4",
                "local_18": "arg1",
                "local_14": "arg2",
                "local_c": "arg3",
                "DAT_0800566c": "ptr_to_flags",
                "DAT_08005670": "ptr_to_data"
            },
            "code": "void set_flags_and_call_functions_080055f4(void)\n{\n  uint32_t *flags = (uint32_t *)(DAT_0800566c + 0x18);\n  *flags |= 0x20; // set flag 5\n  *flags |= 0x04; // set flag 2\n  *flags |= 0x08; // set flag 3\n  bool flag_3_set = (*flags & 0x08) != 0;\n  FUN_08001a80(DAT_08005670, 0x1e, 0, flag_3_set);\n  uint32_t arg1 = 0x1e;\n  uint32_t arg2 = 1;\n  uint32_t arg3 = 2;\n  FUN_080017c4(DAT_08005670, &arg1);\n}\n",
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "calculate_hash_080059f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "hash_part_1",
                "uVar2": "hash_part_2",
                "uVar3": "hash_part_3",
                "uVar4": "hash_part_4",
                "uVar5": "temp_1",
                "uVar6": "temp_2",
                "uVar7": "input_2_unsigned",
                "uVar9": "concatenated_inputs",
                "uVar10": "temp_concatenated",
                "uVar11": "hash_result"
            },
            "code": "\nulonglong calculate_hash_080059f0(int input_1,uint input_2,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  undefined4 hash_part_1;\n  undefined4 hash_part_2;\n  undefined4 hash_part_3;\n  undefined4 hash_part_4;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  uint input_2_unsigned;\n  int iVar8;\n  undefined8 concatenated_inputs;\n  undefined8 temp_concatenated;\n  ulonglong hash_result;\n  \n  concatenated_inputs = CONCAT44(input_2,input_1);\n  input_2_unsigned = input_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)input_2_unsigned) {\n    if ((input_2_unsigned == DAT_08005cdc || (int)input_2_unsigned < (int)DAT_08005cdc) &&\n       ((input_2_unsigned != DAT_08005cdc || (input_1 == 0)))) {\n      hash_part_1 = DAT_08005ce4;\n      if (0 < (int)input_2) {\n        hash_part_1 = DAT_08005ce0;\n      }\n      return CONCAT44(hash_part_1,DAT_08005ce8);\n    }\n    hash_result = FUN_0800015c(input_1,input_2,input_1,input_2,unused_param_2);\n  }\n  else {\n    if (DAT_08005cec < (int)input_2_unsigned) {\n      concatenated_inputs = do_nothing_08005d0c();\n      hash_part_4 = (undefined4)((ulonglong)concatenated_inputs >> 0x20);\n      hash_part_1 = (undefined4)concatenated_inputs;\n      if (DAT_08005cfc < (int)input_2_unsigned) {\n        if (DAT_08005d00 < (int)input_2_unsigned) {\n          concatenated_inputs = FUN_0800071c(0,DAT_08005d08,hash_part_1,hash_part_4);\n          iVar8 = 3;\n        }\n        else {\n          concatenated_inputs = FUN_08000158(hash_part_1,hash_part_4,0,DAT_08005d04);\n          temp_concatenated = FUN_080004c8(hash_part_1,hash_part_4,0,DAT_08005d04);\n          temp_concatenated = FUN_0800015c((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),0,DAT_08005cf8);\n          concatenated_inputs = FUN_0800071c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),(int)temp_concatenated,\n                               (int)((ulonglong)temp_concatenated >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)input_2_unsigned) {\n        concatenated_inputs = FUN_08000158(hash_part_1,hash_part_4,0,DAT_08005cf8);\n        temp_concatenated = FUN_0800015c(hash_part_1,hash_part_4,0,DAT_08005cf8);\n        concatenated_inputs = FUN_0800071c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),(int)temp_concatenated,\n                             (int)((ulonglong)temp_concatenated >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        concatenated_inputs = FUN_0800015c(hash_part_1,hash_part_4,hash_part_1,hash_part_4);\n        concatenated_inputs = FUN_08000158((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0,DAT_08005cf8);\n        temp_concatenated = FUN_0800015c(hash_part_1,hash_part_4,0,0x40000000);\n        concatenated_inputs = FUN_0800071c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),(int)temp_concatenated,\n                             (int)((ulonglong)temp_concatenated >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)input_2_unsigned <= DAT_08005cec + -0x1bc0000) {\n        temp_concatenated = FUN_0800015c(input_1,input_2,DAT_08005cd0,DAT_08005cd4,unused_param_2);\n        iVar8 = FUN_080009e8((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(input_2,input_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    temp_2 = (undefined4)((ulonglong)concatenated_inputs >> 0x20);\n    temp_1 = (undefined4)concatenated_inputs;\n    concatenated_inputs = FUN_080004c8(temp_1,temp_2,temp_1,temp_2);\n    hash_part_2 = (undefined4)((ulonglong)concatenated_inputs >> 0x20);\n    hash_part_1 = (undefined4)concatenated_inputs;\n    concatenated_inputs = FUN_080004c8(hash_part_1,hash_part_2,hash_part_1,hash_part_2);\n    hash_part_3 = (undefined4)((ulonglong)concatenated_inputs >> 0x20);\n    hash_part_4 = (undefined4)concatenated_inputs;\n    concatenated_inputs = FUN_080004c8(hash_part_4,hash_part_3,DAT_08005c78,DAT_08005c7c);\n    concatenated_inputs = FUN_0800015c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),DAT_08005c80,DAT_08005c84);\n    concatenated_inputs = FUN_080004c8((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),hash_part_4,hash_part_3);\n    concatenated_inputs = FUN_0800015c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),DAT_08005c88,DAT_08005c8c);\n    concatenated_inputs = FUN_080004c8((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),hash_part_4,hash_part_3);\n    concatenated_inputs = FUN_0800015c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),DAT_08005c90,DAT_08005c94);\n    concatenated_inputs = FUN_080004c8((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),hash_part_4,hash_part_3);\n    concatenated_inputs = FUN_0800015c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),DAT_08005c98,DAT_08005c9c);\n    concatenated_inputs = FUN_080004c8((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),hash_part_4,hash_part_3);\n    concatenated_inputs = FUN_0800015c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    concatenated_inputs = FUN_080004c8((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),hash_part_1,hash_part_2);\n    temp_concatenated = FUN_080004c8(hash_part_4,hash_part_3,DAT_08005ca8,DAT_08005cac);\n    temp_concatenated = FUN_08000158((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    temp_concatenated = FUN_080004c8((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),hash_part_4,hash_part_3);\n    temp_concatenated = FUN_08000158((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    temp_concatenated = FUN_080004c8((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),hash_part_4,hash_part_3);\n    temp_concatenated = FUN_08000158((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    temp_concatenated = FUN_080004c8((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),hash_part_4,hash_part_3);\n    temp_concatenated = FUN_08000158((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    temp_concatenated = FUN_080004c8((int)temp_concatenated,(int)((ulonglong)temp_concatenated >> 0x20),hash_part_4,hash_part_3);\n    concatenated_inputs = FUN_0800015c((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),(int)temp_concatenated,\n                         (int)((ulonglong)temp_concatenated >> 0x20));\n    concatenated_inputs = FUN_080004c8((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),temp_1,temp_2);\n    hash_part_1 = (undefined4)((ulonglong)concatenated_inputs >> 0x20);\n    if (iVar8 == -1) {\n      hash_result = FUN_08000158(temp_1,temp_2,(int)concatenated_inputs,hash_part_1);\n      return hash_result;\n    }\n    concatenated_inputs = FUN_08000158((int)concatenated_inputs,hash_part_1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    concatenated_inputs = FUN_08000158((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),temp_1,temp_2);\n    hash_result = FUN_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)concatenated_inputs,\n                          (int)((ulonglong)concatenated_inputs >> 0x20));\n    if ((int)input_2 < 0) {\n      return hash_result & 0xffffffff | (ulonglong)((int)(hash_result >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return hash_result;\n}\n\n",
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_hash_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_data_080053b0",
                "iVar1": "status",
                "local_58": "value",
                "local_54": "offset",
                "local_50": "page_size",
                "local_4c": "flags",
                "local_48": "buffer[4]",
                "local_44": "buffer[3]",
                "local_40": "buffer[2]",
                "local_3c": "size",
                "local_38": "buffer[1]",
                "local_34": "buffer[0]",
                "local_30": "zero",
                "local_2c": "zero",
                "local_28": "zero",
                "local_24": "zero",
                "local_20": "value",
                "local_1c": "offset"
            },
            "code": "void initialize_data_080053b0(void)\n{\n    int status;\n    int buffer[4];\n    int zero = 0;\n    int size = 0x60;\n    int flags = 0;\n    int value = 0x1000;\n    int offset = 0;\n    int page_size = 0x2000;\n    status = set_data(PTR_DAT_080054f4, DAT_080054f8, 0x708, zero, 100, zero, zero, zero);\n    if (status != 0)\n    {\n        print_error(PTR_s____src_main_c_080054fc, 399);\n    }\n    buffer[0] = value;\n    status = set_data(PTR_DAT_080054f4, buffer, 0);\n    if (status != 0)\n    {\n        print_error(PTR_s____src_main_c_080054fc, 404);\n    }\n    status = set_data(PTR_DAT_080054f4, &size, 0);\n    if (status != 0)\n    {\n        print_error(PTR_s____src_main_c_080054fc, 408);\n    }\n    status = set_data(PTR_DAT_080054f4, &page_size, 0);\n    if (status != 0)\n    {\n        print_error(PTR_s____src_main_c_080054fc, 413);\n    }\n    buffer[0] = 0;\n    buffer[1] = 0;\n    buffer[2] = 0;\n    buffer[3] = 0x2000;\n    status = set_data(PTR_DAT_080054f4, buffer, &offset);\n    if (status != 0)\n    {\n        print_error(PTR_s____src_main_c_080054fc, 418);\n    }\n    print_data(PTR_DAT_080054f4);\n}\n",
            "called": [
                "FUN_08003640",
                "FUN_08003a94",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_08003908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "convert_to_double_0800088a",
                "param_1": "first_half_uint",
                "param_2": "second_half_uint",
                "param_3": "third_half_uint",
                "param_4": "fourth_half_uint",
                "uVar1": "shifted_first_half",
                "unaff_r4": "is_unaff_r4_equals_in_r12",
                "uVar2": "shifted_mask",
                "uVar3": "second_half",
                "in_r12": "mask",
                "bVar4": "is_first_half_equals_zero"
            },
            "code": "ulonglong convert_to_double_0800088a(uint first_half_uint, uint second_half_uint, uint third_half_uint, uint fourth_half_uint) {\n  uint first_half = first_half_uint;\n  uint second_half = second_half_uint;\n  uint third_half = third_half_uint;\n  uint fourth_half = fourth_half_uint;\n  uint mask = 0x80000000;\n  uint shifted_mask = mask >> 0x14;\n  bool is_unaff_r4_equals_in_r12 = third_half_uint == fourth_half_uint;\n  bool is_shifted_mask_equals_in_r12 = shifted_mask == third_half_uint;\n  if (!is_unaff_r4_equals_in_r12 || !is_shifted_mask_equals_in_r12) {\n    if (is_unaff_r4_equals_in_r12) {\n      if ((first_half_uint | (second_half_uint << 0xc)) == 0) {\n        first_half_uint = third_half_uint;\n        second_half_uint = fourth_half_uint;\n        if (!is_shifted_mask_equals_in_r12) {\n          return ((second_half_uint ^ fourth_half_uint) & mask) | 0x7ff00000ull << 0x20;\n        }\n      }\n    }\n    else if (is_shifted_mask_equals_in_r12) {\n      first_half_uint = third_half_uint;\n      second_half_uint = fourth_half_uint;\n      if ((third_half_uint | (fourth_half_uint << 0xc)) == 0) {\n        return ((second_half_uint ^ fourth_half_uint) & mask) << 0x20;\n      }\n    }\n    else {\n      bool is_first_half_equals_zero = first_half_uint == 0;\n      bool is_third_half_equals_zero = third_half_uint == 0;\n      if (!is_first_half_equals_zero || !is_second_half_equals_zero) {\n        if (!is_third_half_equals_zero || !is_fourth_half_equals_zero) {\n          if (third_half_uint == 0) {\n            uint shifted_second_half = second_half_uint & mask;\n            do {\n              uint shifted_first_half = first_half_uint & mask;\n              first_half_uint = first_half_uint << 1;\n              second_half_uint = second_half_uint * 2 + (uint)(shifted_first_half != 0);\n            } while ((second_half_uint & 0x100000) == 0);\n            second_half_uint = second_half_uint | shifted_second_half;\n            if (shifted_mask != 0) {\n              return CONCAT44(second_half_uint, first_half_uint);\n            }\n          }\n          do {\n            uint shifted_third_half = third_half_uint & mask;\n            third_half_uint = third_half_uint << 1;\n            fourth_half_uint = fourth_half_uint * 2 + (uint)(shifted_third_half != 0);\n          } while ((fourth_half_uint & 0x100000) == 0);\n          return CONCAT44(second_half_uint, first_half_uint);\n        }\n        else {\n          if ((first_half_uint | (second_half_uint << 1)) != 0) {\n            return ((second_half_uint ^ fourth_half_uint) & mask) | 0x7ff00000ull << 0x20;\n          }\n          if ((third_half_uint | (fourth_half_uint << 1)) != 0) {\n            return ((second_half_uint ^ fourth_half_uint) & mask) << 0x20;\n          }\n        }\n      }\n    }\n  }\n  return CONCAT44(second_half, first_half) | 0x7ff8000000000000ull;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "is_param_within_limit_080016d0",
                "param_1": "param",
                "bVar1": "is_within_limit"
            },
            "code": "bool is_param_within_limit_080016d0(int param) {\n  bool is_within_limit = param < 0x1000000;\n  if (is_within_limit) {\n    PTR_DAT_08001710[1] = param - 1;\n    set_value(0xffffffff, 0xf);\n    PTR_DAT_08001710[2] = 0;\n    *PTR_DAT_08001710 = 7;\n  }\n  return !is_within_limit;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "is_param_within_limit_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "process_input_08001ccc",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "CONSTANT_1",
                "iVar2": "get_value()",
                "cVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "uVar6": "result",
                "puVar7": "ptr1",
                "bVar8": "flag1"
            },
            "code": "uint32_t process_input_08001ccc(uint32_t **input, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint32_t *param_5, uint16_t param_6, uint32_t param_7)\\n{\\n  uint32_t result;\\n  uint32_t var1;\\n  int32_t var2;\\n  char var3;\\n  uint32_t var4;\\n  int32_t var5;\\n  uint32_t *ptr1;\\n  bool flag1;\\n  \\n  var2 = get_value();\\n  var1 = CONSTANT_1;\\n  if (*(char *)((int)input + 0x3d) == \" \") {\\n    do {\\n      if ((var1 >> 0x10 & 0xff) == 1) {\\n        var4 = var1 & ~(*input)[5] & 0xffff;\\n        flag1 = var4 == 0;\\n        if (flag1) {\\n          var4 = 1;\\n        }\\n        var3 = (char)var4;\\n        if (!flag1) {\\n          var3 = \"\\0\";\\n        }\\n      }\\n      else {\\n        var4 = var1 & ~(*input)[6] & 0xffff;\\n        flag1 = var4 == 0;\\n        if (flag1) {\\n          var4 = 1;\\n        }\\n        var3 = (char)var4;\\n        if (!flag1) {\\n          var3 = \"\\0\";\\n        }\\n      }\\n      if (var3 != \"\\x01\") {\\n        var5 = 0;\\n        goto LAB_08001d9c;\\n      }\\n      var5 = get_value();\\n    } while ((uint32_t)(var5 - var2) < 0x1a);\\n    input[0xc] = (uint32_t *)0x0;\\n    *(undefined *)((int)input + 0x3d) = 0x20;\\n    *(undefined *)((int)input + 0x3e) = 0;\\n    *(undefined *)(input + 0xf) = 0;\\n    var5 = 3;\\nLAB_08001d9c:\\n    if (var5 == 0) {\\n      if (*(char *)(input + 0xf) == \"\\x01\") {\\n        result = 2;\\n      }\\n      else {\\n        *(undefined *)(input + 0xf) = 1;\\n        if ((**input & 1) != 1) {\\n          **input = **input | 1;\\n        }\\n        **input = **input & 0xfffff7ff;\\n        *(undefined *)((int)input + 0x3d) = 0x21;\\n        *(undefined *)((int)input + 0x3e) = 0x40;\\n        input[0x10] = (uint32_t *)0x0;\\n        input[9] = param_5;\\n        *(uint16_t *)((int)input + 0x2a) = param_6;\\n        input[0xb] = CONSTANT_2;\\n        *(uint16_t *)(input + 10) = *(uint16_t *)((int)input + 0x2a);\\n        var5 = process_data(input, param_2, param_3, param_4, param_7, var2);\\n        if (var5 == 0) {\\n          while (*(uint16_t *)(input + 10) != 0) {\\n            var5 = process_sub_data(input, param_7, var2);\\n            if (var5 != 0) {\\n              if (input[0x10] == (uint32_t *)0x4) {\\n                **input = **input | 0x200;\\n                return 1;\\n              }\\n              return 3;\\n            }\\n            ptr1 = input[9];\\n            input[9] = (uint32_t *)((int)ptr1 + 1);\\n            (*input)[4] = (uint32_t)*(byte *)ptr1;\\n            *(uint16_t *)(input + 10) = *(uint16_t *)(input + 10) + -1;\\n            *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\\n            if ((((*input)[5] & 4) == 4) && (*(uint16_t *)(input + 10) != 0)) {\\n              ptr1 = input[9];\\n              input[9] = (uint32_t *)((int)ptr1 + 1);\\n              (*input)[4] = (uint32_t)*(byte *)ptr1;\\n              *(uint16_t *)(input + 10) = *(uint16_t *)(input + 10) + -1;\\n              *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\\n            }\\n          }\\n          var2 = process_sub_data2(input, param_7, var2);\\n          if (var2 == 0) {\\n            **input = **input | 0x200;\\n            *(undefined *)((int)input + 0x3d) = 0x20;\\n            *(undefined *)((int)input + 0x3e) = 0;\\n            *(undefined *)(input + 0xf) = 0;\\n            result = 0;\\n          }\\n          else if (input[0x10] == (uint32_t *)0x4) {\\n            **input = **input | 0x200;\\n            result = 1;\\n          }\\n          else {\\n            result = 3;\\n          }\\n        }\\n        else if (input[0x10] == (uint32_t *)0x4) {\\n          *(undefined *)(input + 0xf) = 0;\\n          result = 1;\\n        }\\n        else {\\n          *(undefined *)(input + 0xf) = 0;\\n          result = 3;\\n        }\\n      }\\n    }\\n    else {\\n      result = 2;\\n    }\\n  }\\n  else {\\n    result = 2;\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "process_input_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "add_byte_to_uint_and_store_result_0800157c",
                "PTR_DAT_0800159c": "result_ptr",
                "PTR_DAT_08001598": "byte_value_ptr",
                "int": "int_ptr",
                "uint": "uint",
                "byte": "byte"
            },
            "code": "void add_byte_to_uint_and_store_result_0800157c(void)\n{\n  uint* PTR_DAT_0800159c = (uint*)PTR_DAT_0800159c;\n  int* int_ptr = (int*)PTR_DAT_0800159c;\n  uint byte_value = (uint)(byte)*PTR_DAT_08001598;\n  *PTR_DAT_0800159c = *int_ptr + byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "add_byte_to_uint_and_store_result_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "floating_point_conversion_08000e20",
                "param_1": "float_bits",
                "param_2": "float_bits_2",
                "param_3": "unused",
                "param_4": "float_bits_3",
                "uVar1": "fractional_bits_1",
                "uVar2": "exponent_1",
                "iVar3": "exponent_diff",
                "uVar4": "shifted_exponent_diff",
                "iVar5": "shifted_exponent_diff_plus_0x7f",
                "uVar6": "result",
                "bVar7": "condition",
                "bVar8": "condition_2",
                "bVar9": "condition_3"
            },
            "code": "\nuint floating_point_conversion_08000e20(uint float_bits,uint float_bits_2,undefined4 unused,uint float_bits_3)\n\n{\n  uint fractional_bits_1;\n  uint exponent_1;\n  int exponent_diff;\n  uint shifted_exponent_diff;\n  int shifted_exponent_diff_plus_0x7f;\n  uint result;\n  bool condition;\n  bool condition_2;\n  bool condition_3;\n  \n  exponent_1 = float_bits >> 0x17 & 0xff;\n  condition = exponent_1 == 0;\n  if (!condition) {\n    float_bits_3 = float_bits_2 >> 0x17 & 0xff;\n    condition = float_bits_3 == 0;\n  }\n  if (!condition) {\n    condition = exponent_1 == 0xff;\n  }\n  if (!condition) {\n    condition = float_bits_3 == 0xff;\n  }\n  if (condition) {\n    float_bits_3 = float_bits_2 >> 0x17 & 0xff;\n    result = float_bits;\n    if (exponent_1 == 0xff) {\n      if (((float_bits & 0x7fffff) != 0) || (result = float_bits_2, float_bits_3 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (float_bits_3 == 0xff) {\n        result = float_bits_2;\n        if ((float_bits_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (float_bits ^ float_bits_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition = (float_bits & 0x7fffffff) == 0;\n      if (!condition) {\n        condition = (float_bits_2 & 0x7fffffff) == 0;\n      }\n      if (!condition) {\n        condition = exponent_1 == 0;\n        result = float_bits & 0x80000000;\n        while( true ) {\n          if (condition) {\n            float_bits = float_bits << 1;\n            condition = (float_bits & 0x800000) == 0;\n          }\n          if (!condition) break;\n          exponent_1 = exponent_1 - 1;\n        }\n        float_bits = float_bits | result;\n        condition = float_bits_3 == 0;\n        result = float_bits_2 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            float_bits_2 = float_bits_2 << 1;\n            condition = (float_bits_2 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          float_bits_3 = float_bits_3 - 1;\n        }\n        float_bits_2 = float_bits_2 | result;\n        goto LAB_08000e38;\n      }\n      if ((float_bits & 0x7fffffff) == 0) {\n        if ((float_bits_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    float_bits = float_bits ^ float_bits_2;\n  }\n  else {\nLAB_08000e38:\n    exponent_diff = exponent_1 - float_bits_3;\n    if (float_bits_2 << 9 == 0) {\n      float_bits = (float_bits ^ float_bits_2) & 0x80000000 | float_bits & 0x7fffff;\n      condition_3 = SCARRY4(exponent_diff,0x7f);\n      shifted_exponent_diff_plus_0x7f = exponent_diff + 0x7f;\n      condition = shifted_exponent_diff_plus_0x7f < 0;\n      condition_2 = shifted_exponent_diff_plus_0x7f == 0;\n      if (!condition_2 && condition == condition_3) {\n        condition_3 = SBORROW4(0xff,shifted_exponent_diff_plus_0x7f);\n        condition = 0xff - shifted_exponent_diff_plus_0x7f < 0;\n        condition_2 = shifted_exponent_diff_plus_0x7f == 0xff;\n      }\n      if (!condition_2 && condition == condition_3) {\n        float_bits = float_bits | shifted_exponent_diff_plus_0x7f * 0x800000;\n      }\n      if (!condition_2 && condition == condition_3) {\n        return float_bits;\n      }\n      float_bits = float_bits | 0x800000;\n      exponent_1 = 0;\n      condition_2 = SBORROW4(shifted_exponent_diff_plus_0x7f,1);\n      shifted_exponent_diff = exponent_diff + 0x7e;\n      condition = shifted_exponent_diff == 0;\n      result = shifted_exponent_diff;\n    }\n    else {\n      fractional_bits_1 = (float_bits_2 << 9) >> 4 | 0x10000000;\n      exponent_1 = (float_bits << 9) >> 4 | 0x10000000;\n      float_bits = (float_bits ^ float_bits_2) & 0x80000000;\n      condition = fractional_bits_1 <= exponent_1;\n      if (!condition) {\n        exponent_1 = exponent_1 << 1;\n      }\n      shifted_exponent_diff = exponent_diff + 0x7d + (uint)condition;\n      result = 0x800000;\n      do {\n        if (fractional_bits_1 <= exponent_1) {\n          exponent_1 = exponent_1 - fractional_bits_1;\n          float_bits = float_bits | result;\n        }\n        condition = fractional_bits_1 >> 1 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (fractional_bits_1 >> 1);\n        }\n        if (condition) {\n          float_bits = float_bits | result >> 1;\n        }\n        condition = fractional_bits_1 >> 2 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (fractional_bits_1 >> 2);\n        }\n        if (condition) {\n          float_bits = float_bits | result >> 2;\n        }\n        condition = fractional_bits_1 >> 3 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (fractional_bits_1 >> 3);\n        }\n        if (condition) {\n          float_bits = float_bits | result >> 3;\n        }\n        exponent_1 = exponent_1 * 0x10;\n        condition = exponent_1 == 0;\n        if (!condition) {\n          result = result >> 4;\n          condition = result == 0;\n        }\n      } while (!condition);\n      condition_2 = SBORROW4(shifted_exponent_diff,0xfd);\n      condition = shifted_exponent_diff == 0xfd;\n      result = shifted_exponent_diff - 0xfd;\n      if (shifted_exponent_diff < 0xfe) {\n        float_bits = float_bits + shifted_exponent_diff * 0x800000 + (uint)(fractional_bits_1 <= exponent_1);\n        if (exponent_1 - fractional_bits_1 == 0) {\n          float_bits = float_bits & 0xfffffffe;\n        }\n        return float_bits;\n      }\n    }\n    if (condition || (int)result < 0 != condition_2) {\n      condition = (int)(shifted_exponent_diff + 0x19) < 0;\n      if (shifted_exponent_diff == 0xffffffe7 || condition != SCARRY4(shifted_exponent_diff,0x19)) {\n        float_bits = float_bits & 0x80000000;\n      }\n      if (shifted_exponent_diff == 0xffffffe7 || condition != SCARRY4(shifted_exponent_diff,0x19)) {\n        return float_bits;\n      }\n      result = (float_bits << 1) >> (-shifted_exponent_diff & 0xff);\n      shifted_exponent_diff = float_bits << (shifted_exponent_diff + 0x20 & 0xff);\n      result = ((uint)((float_bits & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent_1 | shifted_exponent_diff << 1) == 0) {\n        result = result & ~(shifted_exponent_diff >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return float_bits & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_08004d78",
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "floating_point_conversion_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "calculate_division_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient1",
                "param_4": "quotient2",
                "param_5": "remainder",
                "uVar1": "temp",
                "uVar2": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "bVar14": "carry",
                "uVar15": "result",
                "puVar3": "result1",
                "puVar9": "result2",
                "puVar10": "result3",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_0800121c(uint dividend,uint divisor,uint quotient1,uint quotient2,uint *remainder)\n\n{\n  code *jump_table;\n  ulonglong temp;\n  uint temp1;\n  uint *result1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint *result2;\n  uint *result3;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool carry;\n  undefined8 result;\n  \n  if (quotient2 == 0) {\n    if (divisor < quotient1) {\n      temp4 = count_leading_zeroes(quotient1);\n      if (temp4 != 0) {\n        quotient1 = quotient1 << (temp4 & 0xff);\n        divisor = dividend >> (0x20 - temp4 & 0xff) | divisor << (temp4 & 0xff);\n        dividend = dividend << (temp4 & 0xff);\n      }\n      temp8 = quotient1 >> 0x10;\n      temp6 = divisor / temp8;\n      temp7 = temp6 * (quotient1 & 0xffff);\n      temp5 = dividend >> 0x10 | (divisor - temp8 * temp6) * 0x10000;\n      temp2 = temp6;\n      if (temp5 <= temp7 && temp7 - temp5 != 0) {\n        carry = CARRY4(quotient1,temp5);\n        temp5 = quotient1 + temp5;\n        temp2 = temp6 - 1;\n        if ((carry == false) && (temp5 <= temp7 && temp7 - temp5 != 0)) {\n          temp2 = temp6 - 2;\n          temp5 = temp5 + quotient1;\n        }\n      }\n      temp1 = (temp5 - temp7) / temp8;\n      temp3 = temp1 * (quotient1 & 0xffff);\n      temp6 = dividend & 0xffff | ((temp5 - temp7) - temp8 * temp1) * 0x10000;\n      temp5 = temp1;\n      if (temp6 <= temp3 && temp3 - temp6 != 0) {\n        carry = CARRY4(quotient1,temp6);\n        temp6 = quotient1 + temp6;\n        temp5 = temp1 - 1;\n        if ((carry == false) && (temp6 <= temp3 && temp3 - temp6 != 0)) {\n          temp5 = temp1 - 2;\n          temp6 = temp6 + quotient1;\n        }\n      }\n      result1 = (uint *)(temp5 | temp2 << 0x10);\n      result2 = (uint *)0x0;\n      temp6 = temp6 - temp3;\n    }\n    else {\n      if (quotient1 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x8001302);\n        result = (*jump_table)();\n        return result;\n      }\n      temp4 = count_leading_zeroes(quotient1);\n      if (temp4 == 0) {\n        result2 = (uint *)0x1;\n        divisor = divisor - quotient1;\n        temp8 = quotient1 >> 0x10;\n        temp1 = quotient1 & 0xffff;\n      }\n      else {\n        quotient1 = quotient1 << (temp4 & 0xff);\n        temp2 = divisor >> (0x20 - temp4 & 0xff);\n        temp8 = quotient1 >> 0x10;\n        temp7 = temp2 / temp8;\n        temp1 = quotient1 & 0xffff;\n        temp3 = temp7 * temp1;\n        temp6 = dividend >> (0x20 - temp4 & 0xff) | divisor << (temp4 & 0xff);\n        temp5 = temp6 >> 0x10 | (temp2 - temp8 * temp7) * 0x10000;\n        dividend = dividend << (temp4 & 0xff);\n        temp2 = temp7;\n        if (temp5 <= temp3 && temp3 - temp5 != 0) {\n          carry = CARRY4(quotient1,temp5);\n          temp5 = quotient1 + temp5;\n          temp2 = temp7 - 1;\n          if ((carry == false) && (temp5 <= temp3 && temp3 - temp5 != 0)) {\n            temp2 = temp7 - 2;\n            temp5 = temp5 + quotient1;\n          }\n        }\n        temp7 = (temp5 - temp3) / temp8;\n        temp9 = temp7 * temp1;\n        divisor = temp6 & 0xffff | ((temp5 - temp3) - temp8 * temp7) * 0x10000;\n        temp5 = temp7;\n        if (divisor <= temp9 && temp9 - divisor != 0) {\n          carry = CARRY4(quotient1,divisor);\n          divisor = quotient1 + divisor;\n          temp5 = temp7 - 1;\n          if ((carry == false) && (divisor <= temp9 && temp9 - divisor != 0)) {\n            temp5 = temp7 - 2;\n            divisor = divisor + quotient1;\n          }\n        }\n        divisor = divisor - temp9;\n        result2 = (uint *)(temp5 | temp2 << 0x10);\n      }\n      temp7 = divisor / temp8;\n      temp5 = temp1 * temp7;\n      temp6 = dividend >> 0x10 | (divisor - temp8 * temp7) * 0x10000;\n      temp2 = temp7;\n      if (temp6 <= temp5 && temp5 - temp6 != 0) {\n        carry = CARRY4(quotient1,temp6);\n        temp6 = quotient1 + temp6;\n        temp2 = temp7 - 1;\n        if ((carry == false) && (temp6 <= temp5 && temp5 - temp6 != 0)) {\n          temp2 = temp7 - 2;\n          temp6 = temp6 + quotient1;\n        }\n      }\n      temp7 = (temp6 - temp5) / temp8;\n      temp1 = temp1 * temp7;\n      temp6 = dividend & 0xffff | ((temp6 - temp5) - temp8 * temp7) * 0x10000;\n      temp5 = temp7;\n      if (temp6 <= temp1 && temp1 - temp6 != 0) {\n        carry = CARRY4(quotient1,temp6);\n        temp6 = quotient1 + temp6;\n        temp5 = temp7 - 1;\n        if ((carry == false) && (temp6 <= temp1 && temp1 - temp6 != 0)) {\n          temp5 = temp7 - 2;\n          temp6 = temp6 + quotient1;\n        }\n      }\n      temp6 = temp6 - temp1;\n      result1 = (uint *)(temp5 | temp2 << 0x10);\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp6 >> (temp4 & 0xff);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    result2 = remainder;\n    if (divisor < quotient2) {\n      result1 = remainder;\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n    }\n    else {\n      result3 = (uint *)count_leading_zeroes(quotient2);\n      if (result3 == (uint *)0x0) {\n        if ((quotient2 < divisor) || (result1 = result3, quotient1 <= dividend)) {\n          carry = dividend < quotient1;\n          dividend = dividend - quotient1;\n          divisor = (divisor - quotient2) - (uint)carry;\n          result1 = (uint *)0x1;\n        }\n        result2 = result3;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        temp6 = 0x20 - (int)result3;\n        temp1 = quotient1 >> (temp6 & 0xff) | quotient2 << ((uint)result3 & 0xff);\n        temp4 = divisor >> (temp6 & 0xff);\n        temp3 = temp1 >> 0x10;\n        temp7 = temp4 / temp3;\n        temp8 = temp7 * (temp1 & 0xffff);\n        temp2 = divisor << ((uint)result3 & 0xff) | dividend >> (temp6 & 0xff);\n        temp5 = temp2 >> 0x10 | (temp4 - temp3 * temp7) * 0x10000;\n        quotient1 = quotient1 << ((uint)result3 & 0xff);\n        dividend = dividend << ((uint)result3 & 0xff);\n        temp4 = temp7;\n        if (temp5 <= temp8 && temp8 - temp5 != 0) {\n          carry = CARRY4(temp1,temp5);\n          temp5 = temp1 + temp5;\n          temp4 = temp7 - 1;\n          if ((carry == false) && (temp5 <= temp8 && temp8 - temp5 != 0)) {\n            temp4 = temp7 - 2;\n            temp5 = temp5 + temp1;\n          }\n        }\n        temp7 = (temp5 - temp8) / temp3;\n        temp9 = temp7 * (temp1 & 0xffff);\n        temp5 = temp2 & 0xffff | ((temp5 - temp8) - temp3 * temp7) * 0x10000;\n        temp2 = temp7;\n        if (temp5 <= temp9 && temp9 - temp5 != 0) {\n          carry = CARRY4(temp1,temp5);\n          temp5 = temp1 + temp5;\n          temp2 = temp7 - 1;\n          if ((carry == false) && (temp5 <= temp9 && temp9 - temp5 != 0)) {\n            temp2 = temp7 - 2;\n            temp5 = temp5 + temp1;\n          }\n        }\n        result1 = (uint *)(temp2 | temp4 << 0x10);\n        temp = ZEXT48(result1) * (ulonglong)quotient1;\n        if (CONCAT44(temp5 - temp9,dividend) < temp) {\n          result1 = (uint *)((int)result1 + -1);\n          temp = temp - CONCAT44(temp1,quotient1);\n        }\n        if (remainder != (uint *)0x0) {\n          temp4 = ((temp5 - temp9) - (int)(temp >> 0x20)) - (uint)(dividend < (uint)temp);\n          *remainder = temp4 << (temp6 & 0xff) | dividend - (uint)temp >> ((uint)result3 & 0xff);\n          remainder[1] = temp4 >> ((uint)result3 & 0xff);\n          result2 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(result2,result1);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "calculate_division_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_value_from_pointer_to_pointer_08005d14",
                "undefined4": "int",
                "PTR_PTR_DAT_08005d1c": "pointer_to_pointer_to_value",
                "int*": "int_pointer",
                "int": "value"
            },
            "code": "int get_value_from_pointer_to_pointer_08005d14() {\n  int* pointer_to_value = *(int**)PTR_PTR_DAT_08005d1c;\n  int value = *pointer_to_value;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_to_pointer_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_bits_in_register_080015b4",
                "param_1": "register_value",
                "PTR_DAT_080015f8": "register_ptr",
                "DAT_080015f8": "register_address"
            },
            "code": "void set_bits_in_register_080015b4(uint register_value) {\n  uint* PTR_DAT_080015f8 = (uint*)(DAT_080015f8 + 0xc);\n  uint mask = 0xf8ff;\n  uint new_bits = (register_value & 7) << 8 | 0x5fa0000;\n  *PTR_DAT_080015f8 = (*PTR_DAT_080015f8 & mask) | new_bits;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "ptr_param_1",
                "*(uint *)(*param_1 + 0x10)": "flag_1",
                "*(uint *)(*param_1 + 0xc)": "flag_2",
                "*(undefined4 *)(*param_1 + 0x10)": "*(uint32_t *)(*ptr_param_1 + 0x10)",
                "*(undefined *)(param_1 + 7)": "*(uint8_t *)(ptr_param_1 + 7)",
                "*(uint *)(*param_1 + 0x18)": "*(uint32_t *)(*ptr_param_1 + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint32_t *)(*ptr_param_1 + 0x1c)",
                "do_nothing_08003c4a": "do_nothing_1",
                "do_nothing_08003c6e": "do_nothing_2",
                "do_nothing_08003c5c": "do_nothing_3",
                "FUN_08004f78": "do_something_08004f78",
                "do_nothing_08004378": "do_nothing_4",
                "do_nothing_08003c80": "do_nothing_5",
                "do_nothing_08004366": "do_nothing_6"
            },
            "code": "void process_flags_080036f8(int *ptr_param_1)\n{\n    uint32_t flag_1 = *(uint32_t *)(*ptr_param_1 + 0x10);\n    uint32_t flag_2 = *(uint32_t *)(*ptr_param_1 + 0xc);\n    \n    if ((flag_1 & 0x2) && (flag_2 & 0x2)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xfffffffd;\n        *(uint8_t *)(ptr_param_1 + 7) = 1;\n        if ((*(uint32_t *)(*ptr_param_1 + 0x18) & 0x3) == 0) {\n            do_nothing_08003c4a(ptr_param_1);\n            do_nothing_08003c6e(ptr_param_1);\n        }\n        else {\n            do_nothing_08003c5c(ptr_param_1);\n        }\n        *(uint8_t *)(ptr_param_1 + 7) = 0;\n    }\n    if ((flag_1 & 0x4) && (flag_2 & 0x4)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xfffffffb;\n        *(uint8_t *)(ptr_param_1 + 7) = 2;\n        if ((*(uint32_t *)(*ptr_param_1 + 0x18) & 0x300) == 0) {\n            do_nothing_08003c4a(ptr_param_1);\n            do_nothing_08003c6e(ptr_param_1);\n        }\n        else {\n            do_nothing_08003c5c(ptr_param_1);\n        }\n        *(uint8_t *)(ptr_param_1 + 7) = 0;\n    }\n    if ((flag_1 & 0x8) && (flag_2 & 0x8)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xfffffff7;\n        *(uint8_t *)(ptr_param_1 + 7) = 4;\n        if ((*(uint32_t *)(*ptr_param_1 + 0x1c) & 0x3) == 0) {\n            do_nothing_08003c4a(ptr_param_1);\n            do_nothing_08003c6e(ptr_param_1);\n        }\n        else {\n            do_nothing_08003c5c(ptr_param_1);\n        }\n        *(uint8_t *)(ptr_param_1 + 7) = 0;\n    }\n    if ((flag_1 & 0x10) && (flag_2 & 0x10)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xffffffef;\n        *(uint8_t *)(ptr_param_1 + 7) = 8;\n        if ((*(uint32_t *)(*ptr_param_1 + 0x1c) & 0x300) == 0) {\n            do_nothing_08003c4a(ptr_param_1);\n            do_nothing_08003c6e(ptr_param_1);\n        }\n        else {\n            do_nothing_08003c5c(ptr_param_1);\n        }\n        *(uint8_t *)(ptr_param_1 + 7) = 0;\n    }\n    if ((flag_1 & 0x1) && (flag_2 & 0x1)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xfffffffe;\n        do_something_08004f78(ptr_param_1);\n    }\n    if ((flag_1 & 0x80) && (flag_2 & 0x80)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xffffff7f;\n        do_nothing_08004378(ptr_param_1);\n    }\n    if ((flag_1 & 0x40) && (flag_2 & 0x40)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xffffffbf;\n        do_nothing_08003c80(ptr_param_1);\n    }\n    if ((flag_1 & 0x20) && (flag_2 & 0x20)) {\n        *(uint32_t *)(*ptr_param_1 + 0x10) = 0xffffffdf;\n        do_nothing_08004366(ptr_param_1);\n    }\n}\n",
            "called": [
                "FUN_08003c6e",
                "FUN_08003c4a",
                "FUN_08004378",
                "FUN_08003c80",
                "FUN_08004f78",
                "FUN_08004366",
                "FUN_08003c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_flags_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_flags_080041a8",
                "param_1": "flag_array",
                "param_2": "flag_1",
                "param_3": "flag_2",
                "param_4": "flag_index",
                "*(uint *)(param_1 + 8)": "*(uint32_t *)(flag_array + 8)",
                "param_2 | param_4 << 8 | param_3 | *(uint *)(param_1 + 8) & 0xffff00ff": "flag_1 | (flag_2 << 8) | current_flags",
                "*(uint *)(param_1 + 8) & 0xffff00ff": "new_flags & 0xFFFF00FF"
            },
            "code": "void set_flags_080041a8(uint8_t *flag_array, uint32_t flag_1, uint32_t flag_2, int flag_index) {\n    uint32_t current_flags = *(uint32_t *)(flag_array + 8);\n    uint32_t new_flags = flag_1 | (flag_2 << 8) | current_flags;\n    *(uint32_t *)(flag_array + 8) = new_flags & 0xFFFF00FF;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "multiply_and_add_080004c8",
                "param_1": "multiplier_low",
                "param_2": "multiplier_high",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "uVar1": "product_low",
                "lVar2": "product_high",
                "uVar3": "temp_low",
                "uVar4": "temp_high",
                "iVar5": "sum",
                "uVar6": "shifted_multiplicand_low",
                "uVar7": "mask",
                "uVar8": "partial_product_low",
                "bVar9": "is_zero",
                "bVar10": "overflowed",
                "bVar11": "underflowed",
                "uVar12": "multiplier_concatenated",
                "unaff_r5": "unused_variable"
            },
            "code": "\nulonglong multiply_and_add_080004c8(undefined4 multiplier_low,uint multiplier_high,uint multiplicand_low,uint multiplicand_high)\n\n{\n  ulonglong product_low;\n  longlong product_high;\n  uint temp_low;\n  uint temp_high;\n  int sum;\n  uint shifted_multiplicand_low;\n  uint unused_variable;\n  uint mask;\n  uint partial_product_low;\n  bool is_zero;\n  bool overflowed;\n  bool underflowed;\n  ulonglong multiplier_concatenated;\n  \n  multiplier_concatenated = CONCAT44(multiplier_high,multiplier_low);\n  mask = 0x7ff;\n  temp_high = multiplier_high >> 0x14 & 0x7ff;\n  is_zero = temp_high == 0;\n  if (!is_zero) {\n    unused_variable = multiplicand_high >> 0x14 & 0x7ff;\n    is_zero = unused_variable == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp_high == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = unused_variable == 0x7ff;\n  }\n  if (is_zero) {\n    multiplier_concatenated = FUN_080006a4();\n  }\n  temp_low = (uint)(multiplier_concatenated >> 0x20);\n  sum = temp_high + unused_variable;\n  temp_high = temp_low ^ multiplicand_high;\n  temp_low = temp_low & ~(mask << 0x15);\n  multiplicand_high = multiplicand_high & ~(mask << 0x15);\n  is_zero = ((uint)multiplier_concatenated | temp_low << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (multiplicand_low | multiplicand_high << 0xc) == 0;\n  }\n  temp_low = temp_low | 0x100000;\n  multiplicand_high = multiplicand_high | 0x100000;\n  if (is_zero) {\n    multiplicand_low = (uint)multiplier_concatenated | multiplicand_low;\n    multiplicand_high = (temp_high & 0x80000000 | temp_low) ^ multiplicand_high;\n    temp_high = mask >> 1;\n    underflowed = SBORROW4(sum,temp_high);\n    shifted_multiplicand_low = sum - temp_high;\n    is_zero = shifted_multiplicand_low == 0;\n    temp_low = shifted_multiplicand_low;\n    if (!is_zero && (int)temp_high <= sum) {\n      underflowed = SBORROW4(mask,shifted_multiplicand_low);\n      temp_low = mask - shifted_multiplicand_low;\n      is_zero = mask == shifted_multiplicand_low;\n    }\n    if (!is_zero && (int)temp_low < 0 == underflowed) {\n      multiplicand_high = multiplicand_high | shifted_multiplicand_low * 0x100000;\n    }\n    if (!is_zero && (int)temp_low < 0 == underflowed) {\n      return CONCAT44(multiplicand_high,multiplicand_low);\n    }\n    multiplicand_high = multiplicand_high | 0x100000;\n    mask = 0;\n    underflowed = SBORROW4(shifted_multiplicand_low,1);\n    shifted_multiplicand_low = shifted_multiplicand_low - 1;\n    is_zero = shifted_multiplicand_low == 0;\n    temp_high = shifted_multiplicand_low;\n  }\n  else {\n    product_low = (multiplier_concatenated & 0xffffffff) * (ulonglong)multiplicand_low;\n    multiplier_concatenated = (multiplier_concatenated & 0xffffffff) * (ulonglong)multiplicand_high +\n             (ulonglong)temp_low * (ulonglong)multiplicand_low + (product_low >> 0x20);\n    partial_product_low = (uint)multiplier_concatenated;\n    product_high = (ulonglong)temp_low * (ulonglong)multiplicand_high + (multiplier_concatenated >> 0x20);\n    mask = (uint)product_high;\n    temp_low = (uint)((ulonglong)product_high >> 0x20);\n    if ((int)product_low != 0) {\n      partial_product_low = partial_product_low | 1;\n    }\n    shifted_multiplicand_low = (sum + -0x3ff) - (uint)(temp_low < 0x200);\n    if (temp_low < 0x200) {\n      is_zero = (partial_product_low & 0x80000000) != 0;\n      partial_product_low = partial_product_low << 1;\n      product_high = CONCAT44(temp_low * 2 + (uint)(CARRY4(mask,mask) || CARRY4(mask * 2,(uint)is_zero)),\n                       mask * 2 + (uint)is_zero);\n    }\n    multiplicand_high = temp_high & 0x80000000 | (int)((ulonglong)product_high >> 0x20) << 0xb | (uint)product_high >> 0x15;\n    multiplicand_low = (uint)product_high << 0xb | partial_product_low >> 0x15;\n    mask = partial_product_low * 0x800;\n    overflowed = 0xfc < shifted_multiplicand_low;\n    underflowed = SBORROW4(shifted_multiplicand_low,0xfd);\n    temp_low = shifted_multiplicand_low - 0xfd;\n    is_zero = temp_low == 0;\n    temp_high = temp_low;\n    if (overflowed && !is_zero) {\n      overflowed = 0x6ff < temp_low;\n      underflowed = SBORROW4(temp_low,0x700);\n      temp_high = shifted_multiplicand_low - 0x7fd;\n      is_zero = temp_low == 0x700;\n    }\n    if (!overflowed || is_zero) {\n      is_zero = 0x7fffffff < mask;\n      if (mask == 0x80000000) {\n        is_zero = (partial_product_low >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(multiplicand_high + shifted_multiplicand_low * 0x100000 + (uint)CARRY4(multiplicand_low,(uint)is_zero),multiplicand_low + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)temp_high < 0 == underflowed) {\n    return (ulonglong)(multiplicand_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflowed = SCARRY4(shifted_multiplicand_low,0x36);\n  is_zero = (int)(shifted_multiplicand_low + 0x36) < 0;\n  underflowed = shifted_multiplicand_low == 0xffffffca;\n  if (underflowed || is_zero != overflowed) {\n    multiplicand_low = 0;\n  }\n  if (underflowed || is_zero != overflowed) {\n    multiplicand_high = multiplicand_high & 0x80000000;\n  }\n  if (underflowed || is_zero != overflowed) {\n    return CONCAT44(multiplicand_high,multiplicand_low);\n  }\n  temp_high = -shifted_multiplicand_low;\n  temp_low = temp_high - 0x20;\n  if (0x1f < (int)temp_high) {\n    shifted_multiplicand_low = multiplicand_low >> (temp_low & 0xff) | multiplicand_high << (0x20 - temp_low & 0xff);\n    temp_high = (multiplicand_high >> (temp_low & 0xff) & ~((multiplicand_high & 0x80000000) >> (temp_low & 0xff))) -\n            ((int)shifted_multiplicand_low >> 0x1f);\n    if ((mask | multiplicand_low << (0x20 - temp_low & 0xff) | shifted_multiplicand_low << 1) == 0) {\n      temp_high = temp_high & ~(shifted_multiplicand_low >> 0x1f);\n    }\n    return CONCAT44(multiplicand_high,temp_high) & 0x80000000ffffffff;\n  }\n  sum = temp_high - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(temp_low,0xc)) {\n    partial_product_low = multiplicand_low << (shifted_multiplicand_low + 0x20 & 0xff);\n    temp_low = multiplicand_low >> (temp_high & 0xff) | multiplicand_high << (shifted_multiplicand_low + 0x20 & 0xff);\n    shifted_multiplicand_low = temp_low + -((int)partial_product_low >> 0x1f);\n    if ((mask | partial_product_low << 1) == 0) {\n      shifted_multiplicand_low = shifted_multiplicand_low & ~(partial_product_low >> 0x1f);\n    }\n    return CONCAT44((multiplicand_high & 0x80000000) +\n                    ((multiplicand_high & 0x7fffffff) >> (temp_high & 0xff)) +\n                    (uint)CARRY4(temp_low,-((int)partial_product_low >> 0x1f)),shifted_multiplicand_low);\n  }\n  temp_high = 0xc - sum;\n  shifted_multiplicand_low = multiplicand_low << (temp_high & 0xff);\n  temp_high = multiplicand_low >> (0x20 - temp_high & 0xff) | multiplicand_high << (temp_high & 0xff);\n  temp_low = temp_high + -((int)shifted_multiplicand_low >> 0x1f);\n  if ((mask | shifted_multiplicand_low << 1) == 0) {\n    temp_low = temp_low & ~(shifted_multiplicand_low >> 0x1f);\n  }\n  return CONCAT44((multiplicand_high & 0x80000000) + (uint)CARRY4(temp_high,-((int)shifted_multiplicand_low >> 0x1f)),temp_low);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "multiply_and_add_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_default_value_08008ad4",
                "puVar1": "default_value",
                "PTR_PTR_DAT_08008ae8": "pointer_pointer_data",
                "PTR_DAT_08008aec": "pointer_data"
            },
            "code": "undefined * get_default_value_08008ad4(void)\n{\n  undefined *default_value;\n  default_value = *(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (*(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34) == (undefined *)0x0) {\n    default_value = PTR_DAT_08008aec;\n  }\n  return default_value + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_default_value_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_string_080009e8",
                "in_CY": "current_char",
                "FUN_08000978": "execute_predefined_function"
            },
            "code": "bool is_end_of_string_080009e8(void)\n{\n  char current_char;\n  execute_predefined_function();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "wait_forever_08005674"
            },
            "code": "void wait_forever_08005674(void)\n{\n  while(true) {}\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_08005348",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "wait_forever_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "calculate_values_and_return_result_08009630",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "output_1",
                "param_6": "output_2",
                "iVar1": "result",
                "uVar2": "temp_7",
                "iVar3": "temp_3",
                "iVar4": "temp_4",
                "uVar5": "temp_8",
                "uVar6": "temp_1",
                "local_20": "temp_6",
                "local_1c": "temp_2",
                "uVar7": "temp_11"
            },
            "code": "int calculate_values_and_return_result_08009630(int input_1, int input_2, uint32_t input_3, uint32_t input_4, int *output_1, int *output_2) {\n  int result = calculate_something(input_1, 1);\n  uint32_t temp_1 = (input_4 << 1) >> 0x15;\n  uint32_t temp_2 = input_4 & 0xfffff;\n  if (temp_1 != 0) {\n    temp_2 = temp_2 | 0x100000;\n  }\n  if (input_3 == 0) {\n    int temp_3 = calculate_something_else(&temp_2);\n    int temp_4 = 1;\n    uint32_t temp_5 = temp_2;\n    *(int *)(result + 0x10) = 1;\n    *(uint32_t *)(result + 0x14) = temp_5;\n  }\n  else {\n    uint32_t temp_6 = input_3;\n    uint32_t temp_7 = calculate_something_else(&temp_6);\n    if (temp_7 == 0) {\n      *(uint32_t *)(result + 0x14) = temp_6;\n    }\n    else {\n      uint32_t temp_8 = temp_2 << (0x20 - temp_7 & 0xff);\n      temp_2 = temp_2 >> (temp_7 & 0xff);\n      *(uint32_t *)(result + 0x14) = temp_8 | temp_6;\n    }\n    int temp_9 = 0;\n    if (temp_2 != 0) {\n      temp_9 = 2;\n    }\n    *(uint32_t *)(result + 0x18) = temp_2;\n    *(int *)(result + 0x10) = temp_9;\n  }\n  int temp_10 = 0;\n  if (temp_1 == 0) {\n    *output_1 = temp_7 - 0x432;\n    uint64_t temp_11 = calculate_something_very_different(*(int *)(result + temp_9 * 4 + 0x10));\n    *output_2 = (int)((uint64_t)temp_11 >> 0x20) * 0x20 - (int)temp_11;\n    return result;\n  }\n  *output_1 = (temp_1 - 0x433) + temp_7;\n  *output_2 = 0x35 - temp_7;\n  return result;\n}\n",
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_values_and_return_result_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "update_values_08004104",
                "param_1": "base_address",
                "param_2": "new_value2",
                "param_3": "new_value1",
                "PTR_": "",
                "DAT_": "",
                "uint": "unsigned int",
                "*": "",
                "&": "",
                "|": "",
                "<<": "",
                "+": "",
                "=": "",
                "return;": ""
            },
            "code": "void update_values_08004104(int base_address, int new_value1, int new_value2)\n{\n    uint* value1_ptr = (uint*)(base_address + 0x18);\n    uint* value2_ptr = (uint*)(base_address + 0x20);\n    *value2_ptr = (*value2_ptr & 0xffffff5f) | (new_value2 << 4);\n    *value1_ptr = (*value1_ptr & 0xffff0fff) | (new_value1 << 0xc);\n    *value2_ptr &= 0xffffffef;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_values_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "is_end_of_input_08000ff4",
                "in_CY": "input_char",
                "FUN_08000fd0": "read_input"
            },
            "code": "bool is_end_of_input_08000ff4(void)\n{\n  char input_char;\n  read_input();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "print_data_08005714",
                "FUN_080036f8": "print_message",
                "PTR_DAT_08005724": "data"
            },
            "code": "void print_data_08005714(void)\n{\n  print_message(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "print_data_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "param_1": "input",
                "iVar1": "bit_index",
                "puVar2": "word_ptr",
                "iVar3": "leading_zeroes",
                "uVar4": "word"
            },
            "code": "int find_first_set_bit_08005e40(uint x) {\n  int n = 0;\n  if (x <= 0x0000FFFFU) { n = n + 16; x = x << 16; }\n  if (x <= 0x00FFFFFFU) { n = n + 8; x = x << 8; }\n  if (x <= 0x0FFFFFFFU) { n = n + 4; x = x << 4; }\n  if (x <= 0x3FFFFFFFU) { n = n + 2; x = x << 2; }\n  if (x <= 0x7FFFFFFFU) { n = n + 1; }\n  return n;\n}\n\nint find_first_set_bit_08005e40(uint param_1)\n{\n  int bit_index = -(param_1 & 3);\n  uint word = *(uint *)(param_1 & 0xfffffffc);\n  if ((param_1 & 3) != 0) {\n    word = word | 0xffffffffU >> ((bit_index + 4U & 0x1f) << 3);\n  }\n  while (word == 0) {\n    bit_index += 32;\n    word = *(uint *)((param_1 + bit_index) & 0xfffffffc);\n  }\n  return bit_index + find_first_set_bit_08005e40(word & -word) >> 3;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "ppcVar3": "function_ptr",
                "iVar2": "i",
                "iVar4": "num_functions",
                "puVar1": "data_ptr",
                "**ppcVar3": "**function_ptr",
                "PTR_DAT_08005d58": "end_function_ptrs",
                "PTR_DAT_08005d5c": "start_function_ptrs",
                "PTR_DAT_08005d60": "start_data_ptrs",
                "PTR_DAT_08005d64": "end_data_ptrs"
            },
            "code": "void execute_functions_08005d20()\n{\n  int num_functions = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_ptr = (code **)PTR_DAT_08005d5c;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (num_functions != i);\n  }\n  code **function_ptr = (code **)PTR_DAT_08005d64;\n  undefined *data_ptr = PTR_DAT_08005d60;\n  do_nothing_08009e68();\n  int num_data = (int)data_ptr - (int)function_ptr >> 2;\n  if (num_data != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (num_data != i);\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_parameter_08001a80",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "param_3": "is_high_byte",
                "uint": "uint32_t"
            },
            "code": "void set_parameter_08001a80(uint32_t *base_address, uint16_t parameter_value, char is_high_byte) {\\n  if (is_high_byte == \"\\0\") {\\n    *(base_address + 0x10) = (uint32_t)parameter_value << 0x10;\\n  }\\n  else {\\n    *(base_address + 0x10) = (uint32_t)parameter_value;\\n  }\\n  return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_parameter_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "uVar4": "output",
                "uVar5": "abs_input_2",
                "uVar6": "concat_value",
                "abs_input_1": "abs_input_1",
                "abs_input_2": "abs_input_2",
                "abs_input_3": "abs_input_3",
                "abs_input_4": "abs_input_4"
            },
            "code": "uint calculate_08005838(uint input_1, uint input_2, uint input_3, uint input_4) {\n  int difference;\n  uint output;\n  uint abs_input_3 = abs(input_3);\n  uint abs_input_1 = abs(input_1);\n  uint abs_input_4 = abs(input_4);\n  uint abs_input_2 = abs(input_2);\n  uint concat_value = (uint) (((ulonglong) DAT_080059bc << 32) | DAT_080059b8);\n\n  if (DAT_080059e8 < (abs_input_4 | (-abs_input_3 | abs_input_3) >> 0x1f) || DAT_080059e8 < (abs_input_2 | (-abs_input_1 | abs_input_1) >> 0x1f)) {\n    output = FUN_0800015c(abs_input_3, input_4, input_1, input_2);\n    return output;\n  }\n\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    output = FUN_080059f0();\n    return output;\n  }\n\n  uint uVar3 = (int) input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n\n  if ((abs_input_4 | abs_input_1) == 0) {\n    if (uVar3 == 2) {\n      return DAT_080059b0;\n    }\n    output = DAT_080059a0;\n    if (uVar3 != 3) {\n      return input_1;\n    }\n  }\n  else {\n    if ((abs_input_4 | abs_input_3) != 0) {\n      if (abs_input_4 == DAT_080059e8) {\n        if (abs_input_2 == abs_input_4) {\n          if (uVar3 == 2) {\n            return DAT_080059e0;\n          }\n          if (uVar3 == 3) {\n            return DAT_080059d8;\n          }\n          if (uVar3 == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (uVar3 == 2) {\n          return DAT_080059b0;\n        }\n        if (uVar3 == 3) {\n          return DAT_080059a0;\n        }\n        if (uVar3 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (abs_input_2 != DAT_080059e8) {\n        difference = (int) (abs_input_2 - abs_input_4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int) input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            concat_value = 0;\n          }\n          else {\n            FUN_0800071c(input_1, input_2, input_3, input_4, abs_input_4);\n            do_nothing_08005d0c();\n            concat_value = FUN_080059f0();\n          }\n        }\n        uint uVar2 = (uint) ((ulonglong) concat_value >> 0x20);\n        output = (uint) concat_value;\n        if (uVar3 == 1) {\n          return output;\n        }\n        if (uVar3 == 2) {\n          concat_value = (uint) FUN_08000158(output, uVar2, DAT_080059a8, DAT_080059ac);\n          output = FUN_08000158(DAT_080059b0, DAT_080059b4, (int) concat_value, (int) ((ulonglong) concat_value >> 0x20));\n          return output;\n        }\n        if (uVar3 == 0) {\n          return output;\n        }\n        concat_value = (uint) FUN_08000158(output, uVar2, DAT_080059a8, DAT_080059ac);\n        output = FUN_08000158((int) concat_value, (int) ((ulonglong) concat_value >> 0x20), DAT_080059b0, DAT_080059b4);\n        return output;\n      }\n    }\n    output = DAT_080059c0;\n    if (-1 < (int) input_2) {\n      output = DAT_080059b8;\n    }\n  }\n  return output;\n}",
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_pointer_080090a8",
                "PTR_DAT_080090b0": "PTR_pointer"
            },
            "code": "void do_nothing_with_pointer_080090a8(void)\n{\n  do_nothing(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "initialize_08004e74",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_08004ea0": "ptr"
            },
            "code": "int initialize_08004e74(int param){\n  int* PTR_DAT_08004ea0 = (int*) PTR_DAT_08004ea0;\n  if (*PTR_DAT_08004ea0 == 0){\n    return FUN_08004e6c(1, param, 0);\n  }\n  else{\n    return 0;\n  }\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_float_from_uint_080096e0",
                "param_1": "uint_value",
                "param_2": "uint_value2",
                "param_3": "exponent",
                "param_4": "param_4",
                "iVar1": "max_exponent",
                "iVar2": "exponent_offset",
                "uVar3": "uint_value2",
                "uVar4": "float_value",
                "FUN_080004c8": "calculate_float_value",
                "DAT_08009740": "MAX_EXPONENT",
                "DAT_0800973c": "FLOAT_CONSTANT",
                "*param_3": "*exponent",
                "param_1 =": "uint_value =",
                "param_2 =": "uint_value2 =",
                "*param_3 =": "*exponent =",
                "(int)uVar3": "(int)uint_value2",
                "(uint)((ulonglong)uVar4 >> 0x20) & 0x7fffffff": "(uint32_t)((float_value >> 0x20) & 0x7fffffff)",
                "(uint)((ulonglong)uVar4 >> 0x20) & 0x800fffff | 0x3fe00000": "(uint32_t)((float_value >> 0x20) & 0x800fffff) | 0x3fe00000",
                "(uint)uVar4": "(uint32_t)concatenated_values",
                "CONCAT44": "CONCAT_64"
            },
            "code": "uint32_t calculate_float_from_uint_080096e0(uint32_t uint_value, uint32_t uint_value2, int *exponent, uint32_t param_4)\n{\n  int max_exponent = DAT_08009740;\n  uint64_t concatenated_values = CONCAT_64(uint_value2, uint_value);\n  int exponent_offset = 0;\n  uint32_t uint_result = 0;\n  if (((int)uint_value2 <= max_exponent) && ((uint_value2 | uint_value) != 0)) {\n    if (uint_value2 < 0x100000) {\n      uint64_t float_value = calculate_float_value(uint_value, uint_value2, 0, DAT_0800973c, param_4);\n      exponent_offset = -54;\n      uint_value2 = (uint32_t)((float_value >> 0x20) & 0x7fffffff);\n    }\n    uint_value = (uint32_t)concatenated_values;\n    uint_value2 = (uint32_t)((concatenated_values >> 0x20) & 0x800fffff) | 0x3fe00000;\n    *exponent = ((int)uint_value2 >> 0x14) + -1022 + exponent_offset;\n  }\n  return CONCAT_64(uint_value2, uint_value);\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_float_from_uint_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "extract_value_from_array_0800910c",
                "param_1": "array_base_address",
                "param_2": "index",
                "iVar1": "array_address",
                "*param_2": "*index",
                "*param_2 = *(undefined4 *)(iVar1 + param_2[1] * 4)": "*output_value = *(int *)(array_address + (*index) * 4)",
                "*(undefined4 **)(iVar1 + param_2[1] * 4) = param_2": "*(int **)(array_address + (*index) * 4) = output_value"
            },
            "code": "void extract_value_from_array_0800910c(int array_base_address, int *index, int *output_value) {\n  if (output_value != NULL) {\n    int array_address = *(int *)(array_base_address + 0x4c);\n    *output_value = *(int *)(array_address + (*index) * 4);\n    *(int **)(array_address + (*index) * 4) = output_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "extract_value_from_array_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "calculate_and_print_checksum_080052a0",
                "local_44": "mask",
                "local_40": "shift",
                "local_3c": "xor_value",
                "local_38": "initial_value",
                "local_34": "final_value",
                "local_30": "multiplier",
                "local_2c": "increment",
                "local_28": "modulus",
                "local_20": "seed",
                "local_14": "shift_amount",
                "local_10": "max_value",
                "iVar2": "success",
                "uVar3": "random_value",
                "lVar1": "product"
            },
            "code": "void calculate_and_print_checksum_080052a0(void)\n{\n    long long product;\n    int success;\n    unsigned long long random_value;\n    unsigned int multiplier = 1;\n    unsigned int increment = 0x10000;\n    unsigned int modulus = 0x10000;\n    unsigned int seed = 1;\n    unsigned int shift_amount = 2;\n    unsigned int max_value = 0x1c0000;\n    success = generate_random_number(&multiplier);\n    if (success != 0)\n    {\n        print_error_message(\"Error generating random number.\", 0x151);\n    }\n    unsigned int mask = 0xf;\n    unsigned int shift = 2;\n    unsigned int xor_value = 0x80;\n    unsigned int initial_value = 0;\n    unsigned int final_value = 0;\n    success = apply_xor_shift(&mask, shift, xor_value);\n    if (success != 0)\n    {\n        print_error_message(\"Error applying XOR shift.\", 0x15e);\n    }\n    random_value = get_random_value();\n    product = (long long)modulus * (random_value & 0xffffffff);\n    calculate_and_print_checksum_080052a0((unsigned int)(product >> 0x26), (unsigned int)(random_value >> 0x20), (unsigned int)product);\n    print_checksum(4);\n    reset_values(0xffffffff, initial_value, final_value);\n}\n",
            "called": [
                "FUN_08002d98",
                "FUN_0800177c",
                "FUN_08001762",
                "FUN_08005674",
                "FUN_08003260",
                "FUN_0800172a",
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "calculate_and_print_checksum_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_polynomial_08009120",
                "param_1": "degree",
                "param_2": "coefficients",
                "param_3": "base",
                "param_4": "initial_value",
                "puVar1": "result",
                "uVar2": "carry",
                "iVar3": "degree_count",
                "puVar4": "current_coefficient",
                "iVar5": "i",
                "PTR_080090c0": "allocate_memory_and_copy",
                "FUN_08001084": "copy_pointer"
            },
            "code": "undefined4 * calculate_polynomial_08009120(int degree, undefined4 *coefficients, int base, uint initial_value)\n{\n  undefined4 *result;\n  uint carry = 0;\n  int i;\n  uint *current_coefficient = coefficients + 5;\n  int coefficient_count = coefficients[4];\n  result = coefficients;\n  for (i = 0; i < coefficient_count; i++) {\n    initial_value += base * (*current_coefficient & 0xffff) + carry;\n    carry = base * (*current_coefficient >> 0x10) + (initial_value >> 0x10);\n    *current_coefficient = (initial_value & 0xffff) + carry * 0x10000;\n    initial_value = carry >> 0x10;\n    current_coefficient++;\n  }\n  if (initial_value != 0) {\n    if ((int)coefficients[2] <= coefficient_count) {\n      result = (undefined4 *)PTR_080090c0(coefficients[1] + 1, coefficients + 3, (coefficients[4] + 2) * 4);\n      copy_pointer(result + 3, coefficients + 3, (coefficients[4] + 2) * 4);\n      int address = *(int *)(degree + 0x4c);\n      *coefficients = *(undefined4 *)(address + coefficients[1] * 4);\n      *(undefined4 **)(address + coefficients[1] * 4) = coefficients;\n    }\n    coefficients[coefficient_count + 5] = initial_value;\n    coefficients[4] = coefficient_count + 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_polynomial_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_start",
                "puVar3": "src_ptr",
                "uVar4": "size_left_16",
                "uVar5": "size_left_4",
                "bVar6": "loop_condition",
                "is_aligned": "is_aligned"
            },
            "code": "undefined4 * copy_memory_08001084(undefined4 *dest, const undefined4 *src, uint size)\n{\n  undefined4 *dest_start = dest;\n  const undefined4 *src_start = src;\n  uint size_left = size;\n  bool is_aligned = (((uint)src | (uint)dest) & 3) == 0;\n  if (!is_aligned) {\n    if (size < 8) {\n      uint size_left_4 = size - 4;\n      if (size_left_4 > 3) {\n        do {\n          *dest_start++ = *src_start++;\n          size_left_4--;\n        } while (size_left_4);\n        *dest_start++ = *src_start++;\n        *dest_start++ = *src_start++;\n        *dest_start++ = *src_start++;\n        return dest;\n      }\n      goto unaligned_copy;\n    }\n    if (((uint)src & 3) != 0 && ((uint)dest & 3) != 0) {\n      uint size_left_4 = 4 - ((uint)dest & 3);\n      size_left -= size_left_4;\n      if (((uint)dest & 1) != 0) {\n        src_start = (const undefined4 *)((int)src_start + 1);\n        dest_start = (undefined4 *)((int)dest_start + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      if ((size_left_4 & 2) != 0) {\n        src_start = (const undefined4 *)((int)src_start + 2);\n        dest_start = (undefined4 *)((int)dest_start + 2);\n        *(undefined2 *)dest = *(undefined2 *)src;\n      }\n    }\n  }\n  while (size_left > 63) {\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    *dest_start++ = *src_start++;\n    size_left -= 64;\n  }\n  uint size_left_16 = size_left - 16;\n  if (size_left_16 > 49) {\n    do {\n      *dest_start++ = *src_start++;\n      *dest_start++ = *src_start++;\n      *dest_start++ = *src_start++;\n      *dest_start++ = *src_start++;\n      size_left_16 -= 16;\n    } while (size_left_16 > 15);\n  }\nunaligned_copy:\n  if (size_left_16 + 16 != 0) {\n    uint size_left_4 = size_left_16 + 16;\n    if ((size_left_4 & 1) != 0) {\n      src_start = (const undefined4 *)((int)src_start + 1);\n      dest_start = (undefined4 *)((int)dest_start + 1);\n      *(undefined *)dest_start = *(undefined *)src_start;\n    }\n    if ((size_left_4 & 2) != 0) {\n      src_start = (const undefined4 *)((int)src_start + 2);\n      dest_start = (undefined4 *)((int)dest_start + 2);\n      *(undefined2 *)dest_start = *(undefined2 *)src_start;\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_08009120",
                "FUN_080079e8",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "copy_memory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "check_value_08005680",
                "*param_1": "*value_ptr",
                "local_18": "target_value",
                "local_14": "value_to_compare",
                "local_c": "num_bytes_to_copy",
                "DAT_080056b4": "target_value",
                "DAT_080056b8": "copy_bytes"
            },
            "code": "void check_value_08005680(int *value_ptr)\n{\n    int DAT_080056b4 = 1337;\n    int value_to_compare = 2;\n    int num_bytes_to_copy = 2;\n    \n    if (*value_ptr == DAT_080056b4) {\n        DAT_080056b8(&DAT_080056b4, &num_bytes_to_copy);\n    }\n    return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_value_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "allocate_memory_08003260",
                "param_1": "memory_block",
                "param_2": "size",
                "uVar3": "mask",
                "uVar4": "status",
                "iVar1": "index1",
                "iVar2": "index2"
            },
            "code": "int allocate_memory_08003260(uint *memory_block, uint size) {\n  int index1;\n  int index2;\n  uint mask;\n  int status = 0;\n  \n  if (((*memory_block & 7) < size) && (*memory_block = size | *memory_block & 0xfffffff8, size != (*memory_block & 7))) {\n    status = 1;\n  }\n  else {\n    if ((*memory_block & 2) != 0) {\n      DAT_08003434[1] = memory_block[2] | DAT_08003434[1] & 0xffffff0f;\n    }\n    if ((*memory_block & 1) == 0) {\n      while (1) {\n        if ((size < (*memory_block & 7)) && (*memory_block = size | *memory_block & 0xfffffff8, size != (*memory_block & 7))) {\n          status = 1;\n          break;\n        }\n        else {\n          if ((*memory_block & 4) != 0) {\n            DAT_08003434[1] = memory_block[3] | DAT_08003434[1] & 0xfffff8ff;\n          }\n          if ((*memory_block & 8) != 0) {\n            DAT_08003434[1] = memory_block[4] << 3 | DAT_08003434[1] & 0xffffc7ff;\n          }\n          mask = FUN_08003440();\n          *(uint *)PTR_DAT_0800343c = mask >> PTR_DAT_08003438[DAT_08003434[1] >> 4 & 0xf];\n          FUN_0800151c(0xf);\n          break;\n        }\n      }\n    }\n    else {\n      if (memory_block[1] == 1) {\n        if ((*DAT_08003434 & 0x20000) == 0) {\n          status = 1;\n        }\n      }\n      else if ((memory_block[1] != 2) && ((*DAT_08003434 & 2) == 0)) {\n        status = 1;\n      }\n      DAT_08003434[1] = memory_block[1] | DAT_08003434[1] & 0xfffffffc;\n      index1 = FUN_080015a0();\n      if (memory_block[1] == 1) {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 4) break;\n          index2 = FUN_080015a0();\n          if ((uint)(index2 - index1) >= 0x1389) {\n            status = 3;\n            break;\n          }\n        }\n      }\n      else if (memory_block[1] == 2) {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 8) break;\n          index2 = FUN_080015a0();\n          if ((uint)(index2 - index1) >= 0x1389) {\n            status = 3;\n            break;\n          }\n        }\n      }\n      else {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 0) break;\n          index2 = FUN_080015a0();\n          if ((uint)(index2 - index1) >= 0x1389) {\n            status = 3;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return status;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08003440",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "allocate_memory_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_result_08001ab0",
                "param_1": "input",
                "uVar1": "random_number",
                "cVar2": "is_within_range",
                "uVar4": "calculated_value",
                "bVar5": "is_divisor_zero",
                "DAT_08001ca4": "max_value",
                "DAT_08001ca8": "max_value_1",
                "DAT_08001cac": "max_value_2"
            },
            "code": "uint32_t calculate_result_08001ab0(uint32_t **input)\n{\n    uint32_t result = 0;\n    if (input == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        if ((*input)[15] == 0)\n        {\n            (*input)[0x0f] = 0;\n            do_nothing_08001cb8(input);\n        }\n        (*input)[0x3d] = 0x24;\n        **input &= 0xfffffffe;\n        uint32_t random_number = FUN_08003518();\n        uint32_t DAT_08001ca4 = (*input)[1] < DAT_08001ca4 ? DAT_08001ca8 : DAT_08001cac;\n        bool is_within_range = random_number <= DAT_08001ca4;\n        if (!is_within_range)\n        {\n            result = 1;\n        }\n        else\n        {\n            uint32_t calculated_value = (uint32_t)((uint64_t)DAT_08001cb0 * (uint64_t)random_number >> 0x32);\n            (*input)[1] = calculated_value;\n            if ((*input)[1] > DAT_08001ca4)\n            {\n                calculated_value = (uint32_t)((uint64_t)DAT_08001cb4 * (uint64_t)(calculated_value * 300) >> 0x26);\n            }\n            (*input)[8] = calculated_value + 1;\n            if ((*input)[1] > DAT_08001ca4)\n            {\n                uint32_t divisor = (*input)[2] == NULL ? (uint32_t)((random_number - 1) / ((int)(*input)[1] * 3) + 1 & 0xfff) : (uint32_t)((random_number - 1) / ((int)(*input)[1] * 0x19) + 1 & 0xfff);\n                bool is_divisor_zero = divisor == 0;\n                if (is_divisor_zero)\n                {\n                    divisor = 1;\n                }\n                bool is_calculated_value_zero = divisor != 0;\n                if (!is_calculated_value_zero)\n                {\n                    result = 1;\n                }\n                else\n                {\n                    calculated_value = (*input)[2] == NULL ? (uint32_t)(divisor | 0x8000) : (uint32_t)(divisor | 0xc000);\n                }\n            }\n            else\n            {\n                calculated_value = (uint32_t)((random_number - 1) / ((int)(*input)[1] << 1) + 1 & 0xfff);\n                if (calculated_value < 4)\n                {\n                    calculated_value = 4;\n                }\n            }\n            (*input)[7] = calculated_value;\n            **input = (uint32_t)(*input)[8] | (uint32_t)(*input)[7];\n            (*input)[2] = (uint32_t)(*input)[3] | (uint32_t)(*input)[4];\n            (*input)[3] = (uint32_t)(*input)[6] | (uint32_t)(*input)[5];\n            **input |= 1;\n            (*input)[0x10] = NULL;\n            (*input)[0x3d] = 0x20;\n            (*input)[0x0c] = NULL;\n            (*input)[0x3e] = 0;\n            result = 0;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_result_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "calculate_shifted_result_08003540",
                "uVar1": "result",
                "DAT_08003560": "data",
                "PTR_DAT_08003564": "shift_amount"
            },
            "code": "uint calculate_shifted_result_08003540(void)\n{\n  uint result;\n  uint DAT_08003560 = *(uint *)(DAT_08003560 + 4);\n  uint PTR_DAT_08003564 = PTR_DAT_08003564[DAT_08003560 >> 0xb & 7];\n  result = FUN_08003504();\n  return result >> PTR_DAT_08003564;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "calculate_shifted_result_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "set_flag_and_value_08009244",
                "param_1": "flag",
                "param_2": "value",
                "iVar1": "result"
            },
            "code": "void set_flag_and_value_08009244(int flag, int value) {\n    int result = get_result(flag, 1);\n    *(int *)(result + 0x10) = 1;\n    *(int *)(result + 0x14) = value;\n    return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "set_flag_and_value_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "print_system_call_info_08004e6c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void print_system_call_info_08004e6c(void)\n{\n  int system_call_number = 0x3f;\n  software_interrupt(system_call_number);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "print_system_call_info_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "calculate_result_08001762",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_080016d0": "perform_calculation"
            },
            "code": "int calculate_result_08001762(int input_value)\n{\n  int result;\n  result = perform_calculation(input_value);\n  return result;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "calculate_result_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "calculate_float_from_integers_08000158",
                "param_1": "significand_1",
                "param_2": "significand_2",
                "param_3": "exponent_1",
                "param_4": "exponent_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "significand_1_shifted",
                "uVar7": "significand_2_shifted",
                "uVar9": "significand_1_shifted_temp",
                "uVar10": "exponent_diff",
                "uVar11": "sum_of_significands",
                "uVar12": "result_significand",
                "bVar2": "least_significant_bit",
                "bVar13": "is_significand_1_shifted_negative",
                "bVar14": "temp_bool_1",
                "bVar15": "temp_bool_2",
                "iVar1": "exponent_2_shifted",
                "iVar8": "exponent_1_shifted"
            },
            "code": "\nulonglong calculate_float_from_integers_08000158(uint significand_1,uint significand_2,uint exponent_1,uint exponent_2)\n\n{\n  int exponent_2_shifted;\n  byte least_significant_bit;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint significand_1_shifted;\n  uint significand_2_shifted;\n  int exponent_1_shifted;\n  uint significand_1_shifted_temp;\n  uint exponent_diff;\n  uint sum_of_significands;\n  uint result_significand;\n  bool is_significand_1_shifted_negative;\n  bool temp_bool_1;\n  bool temp_bool_2;\n  \n  significand_1_shifted = exponent_2 ^ 0x80000000;\n  significand_1_shifted_temp = significand_2 << 1;\n  exponent_2 = exponent_2 << 1;\n  is_significand_1_shifted_negative = ((significand_2 ^ significand_1_shifted) & 0x7fffffff) == 0;\n  temp_bool_1 = is_significand_1_shifted_negative && significand_1 == exponent_1;\n  if (!is_significand_1_shifted_negative || significand_1 != exponent_1) {\n    temp_bool_1 = (significand_1_shifted_temp | significand_1) == 0;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = (exponent_2 | exponent_1) == 0;\n  }\n  exponent_1_shifted = (int)significand_1_shifted_temp >> 0x15;\n  if (!temp_bool_1) {\n    temp_bool_1 = exponent_1_shifted == -1;\n  }\n  exponent_2_shifted = (int)exponent_2 >> 0x15;\n  if (!temp_bool_1) {\n    temp_bool_1 = exponent_2_shifted == -1;\n  }\n  if (temp_bool_1) {\n    if (exponent_1_shifted == -1 || exponent_2_shifted == -1) {\n      significand_1_shifted_temp = significand_1_shifted;\n      sum_of_significands = exponent_1;\n      if (exponent_1_shifted == -1) {\n        significand_1_shifted_temp = significand_2;\n        sum_of_significands = significand_1;\n      }\n      if (exponent_1_shifted != -1 || exponent_2_shifted != -1) {\n        exponent_1 = sum_of_significands;\n        significand_1_shifted = significand_1_shifted_temp;\n      }\n      temp_bool_1 = (sum_of_significands | significand_1_shifted_temp << 0xc) == 0;\n      if (temp_bool_1) {\n        temp_bool_1 = (exponent_1 | significand_1_shifted << 0xc) == 0;\n      }\n      if (temp_bool_1) {\n        temp_bool_1 = significand_1_shifted_temp == significand_1_shifted;\n      }\n      if (!temp_bool_1) {\n        significand_1_shifted_temp = significand_1_shifted_temp | 0x80000;\n      }\n      return CONCAT44(significand_1_shifted_temp,sum_of_significands);\n    }\n    if (((significand_2 ^ significand_1_shifted) & 0x7fffffff) != 0 || significand_1 != exponent_1) {\n      if ((significand_1_shifted_temp | significand_1) == 0) {\n        significand_1 = exponent_1;\n        significand_2 = significand_1_shifted;\n      }\n      return CONCAT44(significand_2,significand_1);\n    }\n    if (significand_2 != significand_1_shifted) {\n      return 0;\n    }\n    if (significand_1_shifted_temp >> 0x15 == 0) {\n      temp_bool_1 = (significand_1 & 0x80000000) != 0;\n      significand_1_shifted = significand_2 * 2 + (uint)temp_bool_1;\n      if (CARRY4(significand_2,significand_2) || CARRY4(significand_2 * 2,(uint)temp_bool_1)) {\n        significand_1_shifted = significand_1_shifted | 0x80000000;\n      }\n      return CONCAT44(significand_1_shifted,significand_1 << 1);\n    }\n    if (significand_1_shifted_temp < 0xffc00000) {\n      return CONCAT44(significand_2 + 0x100000,significand_1);\n    }\n    significand_2 = significand_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(significand_2 | 0x7ff00000) << 0x20;\n  }\n  significand_1_shifted_temp = significand_1_shifted_temp >> 0x15;\n  exponent_2 = exponent_2 >> 0x15;\n  sum_of_significands = exponent_2 - significand_1_shifted_temp;\n  temp_bool_1 = sum_of_significands != 0;\n  if (exponent_2 < significand_1_shifted_temp) {\n    sum_of_significands = -sum_of_significands;\n  }\n  exponent_diff = significand_1;\n  significand_2_shifted = significand_2;\n  if (temp_bool_1 && significand_1_shifted_temp <= exponent_2) {\n    significand_1_shifted_temp = significand_1_shifted_temp + sum_of_significands;\n    exponent_diff = exponent_1;\n    significand_2_shifted = significand_1_shifted;\n    exponent_1 = significand_1;\n    significand_1_shifted = significand_2;\n  }\n  if (0x36 < sum_of_significands) {\n    return CONCAT44(significand_2_shifted,exponent_diff);\n  }\n  temp_2 = significand_2_shifted & 0xfffff | 0x100000;\n  if ((significand_2_shifted & 0x80000000) != 0) {\n    temp_bool_1 = exponent_diff != 0;\n    exponent_diff = -exponent_diff;\n    temp_2 = -temp_2 - (uint)temp_bool_1;\n  }\n  significand_2_shifted = significand_1_shifted & 0xfffff | 0x100000;\n  if ((significand_1_shifted & 0x80000000) != 0) {\n    temp_bool_1 = exponent_1 != 0;\n    exponent_1 = -exponent_1;\n    significand_2_shifted = -significand_2_shifted - (uint)temp_bool_1;\n  }\n  if (significand_1_shifted_temp == sum_of_significands) {\n    significand_2_shifted = significand_2_shifted ^ 0x100000;\n    if (significand_1_shifted_temp == 0) {\n      temp_2 = temp_2 ^ 0x100000;\n      significand_1_shifted_temp = 1;\n    }\n    else {\n      sum_of_significands = sum_of_significands - 1;\n    }\n  }\n  significand_1_shifted = -sum_of_significands + 0x20;\n  if ((int)sum_of_significands < 0x21) {\n    result_significand = exponent_1 << (significand_1_shifted & 0xff);\n    exponent_1 = exponent_1 >> (sum_of_significands & 0xff);\n    temp_1 = exponent_diff + exponent_1;\n    temp_3 = significand_2_shifted << (significand_1_shifted & 0xff);\n    significand_1_shifted = temp_1 + temp_3;\n    temp_2 = temp_2 + CARRY4(exponent_diff,exponent_1) + ((int)significand_2_shifted >> (sum_of_significands & 0xff)) +\n            (uint)CARRY4(temp_1,temp_3);\n  }\n  else {\n    result_significand = significand_2_shifted << (-sum_of_significands + 0x40 & 0xff);\n    if (exponent_1 != 0) {\n      result_significand = result_significand | 2;\n    }\n    significand_2_shifted = (int)significand_2_shifted >> (sum_of_significands - 0x20 & 0xff);\n    significand_1_shifted = exponent_diff + significand_2_shifted;\n    temp_2 = temp_2 + ((int)significand_2_shifted >> 0x1f) + (uint)CARRY4(exponent_diff,significand_2_shifted);\n  }\n  significand_2 = temp_2 & 0x80000000;\n  sum_of_significands = temp_2;\n  if ((int)temp_2 < 0) {\n    temp_bool_1 = result_significand == 0;\n    result_significand = -result_significand;\n    sum_of_significands = -significand_1_shifted;\n    significand_1_shifted = -(uint)!temp_bool_1 - significand_1_shifted;\n    sum_of_significands = -(uint)(temp_bool_1 <= sum_of_significands) - temp_2;\n  }\n  if (0xfffff < sum_of_significands) {\n    exponent_diff = significand_1_shifted_temp - 1;\n    if (0x1fffff < sum_of_significands) {\n      exponent_diff = sum_of_significands & 1;\n      sum_of_significands = sum_of_significands >> 1;\n      least_significant_bit = (byte)significand_1_shifted;\n      significand_1_shifted = (uint)(exponent_diff != 0) << 0x1f | significand_1_shifted >> 1;\n      result_significand = (uint)(least_significant_bit & 1) << 0x1f | result_significand >> 1;\n      exponent_diff = significand_1_shifted_temp;\n      if (0xffbfffff < significand_1_shifted_temp * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    temp_bool_1 = 0x7fffffff < result_significand;\n    if (result_significand == 0x80000000) {\n      temp_bool_1 = (significand_1_shifted & 1) != 0;\n    }\n    return CONCAT44(sum_of_significands + exponent_diff * 0x100000 + (uint)CARRY4(significand_1_shifted,(uint)temp_bool_1) | significand_2,\n                    significand_1_shifted + temp_bool_1);\n  }\n  is_significand_1_shifted_negative = (result_significand & 0x80000000) != 0;\n  result_significand = result_significand << 1;\n  exponent_diff = significand_1_shifted * 2;\n  temp_bool_1 = CARRY4(significand_1_shifted,significand_1_shifted);\n  significand_1_shifted = significand_1_shifted * 2 + (uint)is_significand_1_shifted_negative;\n  sum_of_significands = sum_of_significands * 2 + (uint)(temp_bool_1 || CARRY4(exponent_diff,(uint)is_significand_1_shifted_negative));\n  exponent_diff = significand_1_shifted_temp - 2;\n  if ((sum_of_significands & 0x100000) != 0) goto LAB_08000268;\n  significand_2_shifted = significand_1_shifted;\n  significand_1_shifted_temp = sum_of_significands;\n  if (sum_of_significands == 0) {\n    significand_2_shifted = 0;\n    significand_1_shifted_temp = significand_1_shifted;\n  }\n  exponent_1_shifted = count_leading_zeroes(significand_1_shifted_temp);\n  if (sum_of_significands == 0) {\n    exponent_1_shifted = exponent_1_shifted + 0x20;\n  }\n  sum_of_significands = exponent_1_shifted - 0xb;\n  temp_bool_2 = SBORROW4(sum_of_significands,0x20);\n  significand_1_shifted = exponent_1_shifted - 0x2b;\n  temp_bool_1 = (int)significand_1_shifted < 0;\n  is_significand_1_shifted_negative = significand_1_shifted == 0;\n  if ((int)sum_of_significands < 0x20) {\n    temp_bool_2 = SCARRY4(significand_1_shifted,0xc);\n    exponent_1_shifted = exponent_1_shifted + -0x1f;\n    temp_bool_1 = exponent_1_shifted < 0;\n    is_significand_1_shifted_negative = exponent_1_shifted == 0;\n    significand_1_shifted = sum_of_significands;\n    if (!is_significand_1_shifted_negative && temp_bool_1 == temp_bool_2) {\n      significand_2_shifted = significand_1_shifted_temp << (sum_of_significands & 0xff);\n      significand_1_shifted_temp = significand_1_shifted_temp >> (0xcU - exponent_1_shifted & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_significand_1_shifted_negative || temp_bool_1 != temp_bool_2) {\n    result_significand = 0x20 - significand_1_shifted;\n  }\n  significand_1_shifted_temp = significand_1_shifted_temp << (significand_1_shifted & 0xff);\n  if (is_significand_1_shifted_negative || temp_bool_1 != temp_bool_2) {\n    significand_1_shifted_temp = significand_1_shifted_temp | significand_2_shifted >> (result_significand & 0xff);\n  }\n  if (is_significand_1_shifted_negative || temp_bool_1 != temp_bool_2) {\n    significand_2_shifted = significand_2_shifted << (significand_1_shifted & 0xff);\n  }\nLAB_080002e0:\n  if ((int)sum_of_significands <= (int)exponent_diff) {\n    return CONCAT44(significand_1_shifted_temp + (exponent_diff - sum_of_significands) * 0x100000 | significand_2,significand_2_shifted);\n  }\n  significand_1_shifted = ~(exponent_diff - sum_of_significands);\n  if ((int)significand_1_shifted < 0x1f) {\n    exponent_1_shifted = significand_1_shifted - 0x13;\n    if (exponent_1_shifted != 0 && exponent_1_shifted < 0 == SCARRY4(significand_1_shifted - 0x1f,0xc)) {\n      return CONCAT44(temp_2,significand_2_shifted >> (0x20 - (0xcU - exponent_1_shifted) & 0xff) | significand_1_shifted_temp << (0xcU - exponent_1_shifted & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    significand_1_shifted = significand_1_shifted + 1;\n    return CONCAT44(significand_2 | significand_1_shifted_temp >> (significand_1_shifted & 0xff),\n                    significand_2_shifted >> (significand_1_shifted & 0xff) | significand_1_shifted_temp << (0x20 - significand_1_shifted & 0xff));\n  }\n  return CONCAT44(temp_2,significand_1_shifted_temp >> (significand_1_shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_float_from_integers_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "uVar4": "current_uint"
            },
            "code": "void copy_string_08009768(uint *destination, uint *source, uint length)\n{\n  char current_char;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_uint;\n\n  if (((((uint)destination | (uint)source) & 3) == 0) && (destination_ptr = destination, source_ptr = source, 3 < length))) {\n    do {\n      source = source_ptr + 1;\n      current_uint = *source_ptr;\n      destination = destination_ptr;\n      if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      destination = destination_ptr + 1;\n      *destination_ptr = current_uint;\n      destination_ptr = destination;\n      source_ptr = source;\n    } while (3 < length);\n  }\n  source_ptr = source;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)source_ptr;\n    *(char *)destination = current_char;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)destination = current_char;\n    }\n    if (length != 0) {\n      destination_ptr = destination;\n      do {\n        source_ptr = (uint *)((int)destination_ptr + 1);\n        *(char *)destination_ptr = '\\0';\n        destination_ptr = source_ptr;\n      } while (source_ptr != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "update_params_08003ff8",
                "param_1": "param_address",
                "param_2": "params",
                "local_c": "value3",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "code": "void update_params_08003ff8(int param_address, int *params) {\n  int value1 = params[0];\n  int value2 = params[2];\n  uint value3 = *(uint *)(param_address + 0x04);\n  uint value4 = *(uint *)(param_address + 0x20);\n  uint value5 = *(uint *)(param_address + 0x1c);\n\n  value4 = value4 & 0xffffefff;\n\n  if (param_address == DAT_0800409c) {\n    value3 = (params[5] << 6) | (value3 & 0xffffbfff);\n  }\n\n  *(uint *)(param_address + 0x04) = value3;\n  *(uint *)(param_address + 0x1c) = (value1 << 8) | (value5 & 0xffff8cff);\n  *(int *)(param_address + 0x40) = params[1];\n  *(uint *)(param_address + 0x20) = (value2 << 12) | (value4 & 0xffffdfff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_params_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "process_data_08004ea4",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "num_iterations",
                "PTR_DAT_08004ee4": "results",
                "PTR_DAT_08004ee0": "ptr_data"
            },
            "code": "void process_data_08004ea4(void *data, size_t data_size, int flag, int num_iterations, uint16_t *PTR_DAT_08004ee4) {\n  perform_operation(data, data_size, flag, num_iterations, PTR_DAT_08004ee4, *(uint32_t *)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "update_values_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "shift_amount",
                "uVar1": "temp_value"
            },
            "code": "void update_values_080040a0(int base_address, uint32_t new_value, int shift_amount) {\n  uint32_t temp_value = *(uint32_t *)(base_address + 0x20);\n  *(uint32_t *)(base_address + 0x20) = temp_value & 0xfffffffe;\n  *(uint32_t *)(base_address + 0x18) = (shift_amount << 4) | (*(uint32_t *)(base_address + 0x18) & 0xffffff0f);\n  *(uint32_t *)(base_address + 0x20) = new_value | (temp_value & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_values_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "len",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "iVar3": "num_blocks",
                "puVar4": "dest_end",
                "puVar5": "src_end",
                "uVar6": "temp",
                "uVar7": "remaining"
            },
            "code": "void reverse_copy_08009a18(uint8_t *dest, const uint8_t *src, size_t len) {\n    if (src < dest && dest < src + len) {\n        for (size_t i = len; i > 0; i--) {\n            *(dest + i - 1) = *(src + i - 1);\n        }\n    } else {\n        size_t i = 0;\n        for (; i + 16 < len; i += 16) {\n            *(dest + i + 0) = *(src + i + 0);\n            *(dest + i + 1) = *(src + i + 1);\n            *(dest + i + 2) = *(src + i + 2);\n            *(dest + i + 3) = *(src + i + 3);\n            *(dest + i + 4) = *(src + i + 4);\n            *(dest + i + 5) = *(src + i + 5);\n            *(dest + i + 6) = *(src + i + 6);\n            *(dest + i + 7) = *(src + i + 7);\n            *(dest + i + 8) = *(src + i + 8);\n            *(dest + i + 9) = *(src + i + 9);\n            *(dest + i + 10) = *(src + i + 10);\n            *(dest + i + 11) = *(src + i + 11);\n            *(dest + i + 12) = *(src + i + 12);\n            *(dest + i + 13) = *(src + i + 13);\n            *(dest + i + 14) = *(src + i + 14);\n            *(dest + i + 15) = *(src + i + 15);\n        }\n        for (; i < len; i++) {\n            *(dest + i) = *(src + i);\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_to_integer_0800119c",
                "param_1": "value",
                "param_2": "shift_amount",
                "uVar1": "shifted_value",
                "iVar2": "shifted_value_plus_constant",
                "uVar3": "shifted_value_minus_constant"
            },
            "code": "uint convert_to_integer_0800119c(uint value, uint shift_amount)\n{\n  uint shifted_value;\n  int shifted_value_plus_constant;\n  uint shifted_value_minus_constant;\n  \n  shifted_value_plus_constant = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value_plus_constant) {\n      return 0;\n    }\n    shifted_value = shifted_value_plus_constant >> 0x15;\n    shifted_value_minus_constant = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shifted_value_minus_constant != 0) {\n      shifted_value = (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (shifted_value_minus_constant & 0xff);\n      if ((shift_amount & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  shift_amount = shift_amount & 0x80000000;\n  if (shift_amount == 0) {\n    shift_amount = 0x7fffffff;\n  }\n  return shift_amount;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_to_integer_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "memory_ptr",
                "auStack_18": "auStack",
                "local_14": "unused",
                "local_c": "available_memory"
            },
            "code": "int allocate_memory_08005728(int size)\n{\n  int *memory_ptr;\n  int available_memory = *(int *)PTR_DAT_08005778;\n  \n  if (available_memory == 0) {\n    *(int **)PTR_DAT_08005778 = PTR_DAT_0800577c;\n    available_memory = *(int *)PTR_DAT_08005778;\n  }\n  \n  if ((void *)(available_memory + size) > (void *)auStack_18) {\n    memory_ptr = (int *)FUN_08005d14();\n    *memory_ptr = 0xc;\n    available_memory = -1;\n  }\n  else {\n    *(int *)PTR_DAT_08005778 = available_memory + size;\n  }\n  \n  return available_memory;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_pointer_080090b4",
                "PTR_DAT_080090bc": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_parameter_0800422e",
                "param_1": "param_list",
                "param_2": "values",
                "uVar1": "result"
            },
            "code": "int set_parameter_0800422e(int *param_list, uint *values) {\n  int result;\n  if (*(char *)(param_list + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(param_list + 0xf) = 1;\n    *(uint *)(*param_list + 0x44) =\n         values[6] |\n         (values[6] |\n         (values[5] |\n         (values[4] |\n         (*values | (values[1] | (values[2] | values[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(param_list + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_parameter_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "update_values_08003e38",
                "param_1": "device_id",
                "param_2": "data",
                "iVar1": "new_value",
                "uVar2": "shifted_data",
                "local_10": "local_data",
                "DAT_08003f14": "device_id_2",
                "PTR_08003f18": "bitmask"
            },
            "code": "void update_values_08003e38(int device_id, int *data) {\n    int new_value;\n    uint shifted_data;\n    uint PTR_08003f18 = 0xffffffef;\n    uint local_data = *(uint *)(device_id + 0x4);\n\n    *(uint *)(device_id + 0x20) = *(uint *)(device_id + 0x20) & PTR_08003f18;\n    new_value = *data;\n    shifted_data = data[2] << 4 | *(uint *)(device_id + 0x20) & 0xffffffdf;\n    if (device_id == DAT_08003f14) {\n        shifted_data = (data[3] << 4 | shifted_data & 0xffffff7f) & 0xffffffbf;\n        local_data = data[6] << 2 | data[5] << 2 | local_data & 0xfffff3ff;\n    }\n    *(uint *)(device_id + 0x4) = local_data;\n    *(uint *)(device_id + 0x18) = new_value << 8 | *(uint *)(device_id + 0x18) & 0xffff8cff;\n    *(int *)(device_id + 0x38) = data[1];\n    *(uint *)(device_id + 0x20) = shifted_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_values_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "calculate_delay_0800151c",
                "param_1": "input_value",
                "iVar1": "result",
                "uVar2": "return_value",
                "PTR_DAT_08001570": "clock_speed",
                "PTR_DAT_08001574": "clock_divider",
                "FUN_08001762": "calculate_time",
                "PTR_DAT_08001578": "output_value"
            },
            "code": "int calculate_delay_0800151c(uint32_t input_value) {\n    uint32_t PTR_DAT_08001570 = *(uint32_t *)PTR_DAT_08001570;\n    uint8_t PTR_DAT_08001574 = *(uint8_t *)PTR_DAT_08001574;\n    uint32_t delay_time = PTR_DAT_08001570 / (1000 / PTR_DAT_08001574);\n    int result = FUN_08001762(delay_time);\n    if (result == 0) {\n        if (input_value < 0x10) {\n            FUN_0800172a(0xffffffff, input_value, 0);\n            *(uint32_t *)PTR_DAT_08001578 = input_value;\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    else {\n        return 1;\n    }\n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_delay_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp3",
                "unaff_r4": "temp4",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp5",
                "bVar4": "check"
            },
            "code": "ulonglong calculate_result_080006a4(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1 = input4 >> 0x14;\n  if (input2 != input3 && temp1 != input3) {\n    bool check = (input1 | input2 << 1) == 0;\n    if (!check) {\n      check = (input3 | input4 << 1) == 0;\n    }\n    if (check) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input3 == 0) {\n      uint temp2 = input2 & 0x80000000;\n      do {\n        uint temp3 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp3 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(input2, input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2, input1);\n  }\n  bool check = (input1 | input2 << 1) == 0;\n  if (check) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!check) {\n    check = (input3 | input4 << 1) == 0;\n  }\n  uint temp2 = input2;\n  if (((!check) && ((input2 != input3 || ((input1 | input2 << 0xc) == 0)))) && ((temp1 != input3 || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2, input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "first_number",
                "param_2": "second_number",
                "bVar1": "isNegative1",
                "uVar2": "doubleFirstNumber",
                "uVar3": "doubleSecondNumber",
                "uVar4": "tempResult",
                "bVar5": "isZero"
            },
            "code": "uint calculate_result_08000f68(uint first_number, uint second_number) {\n  bool isNegative1, isNegative2, isZero;\n  uint doubleFirstNumber = first_number * 2;\n  uint doubleSecondNumber = second_number * 2;\n  if (((int)doubleFirstNumber >> 0x18 == -1 || (int)doubleSecondNumber >> 0x18 == -1) && ((((int)doubleFirstNumber >> 0x18 == -1 && ((first_number & 0x7fffff) != 0)) || (((int)doubleSecondNumber >> 0x18 == -1 && ((second_number & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint tempResult = doubleFirstNumber | second_number & 0x7fffffff;\n  isZero = tempResult == 0;\n  if (!isZero) {\n    tempResult = first_number ^ second_number;\n    isZero = tempResult == 0;\n  }\n  isNegative1 = -1 < (int)tempResult;\n  if (isNegative1) {\n    first_number = doubleFirstNumber + second_number * -2;\n    isZero = first_number == 0;\n  }\n  if ((isNegative1 && doubleSecondNumber <= doubleFirstNumber) && !isZero) {\n    first_number = (int)second_number >> 0x1f;\n  }\n  if (!isNegative1 || doubleSecondNumber > doubleFirstNumber) {\n    first_number = ~((int)second_number >> 0x1f);\n  }\n  if (!isZero) {\n    first_number = first_number | 1;\n  }\n  return first_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_table_08009258",
                "param_1": "input",
                "param_2": "input_length",
                "param_3": "hash_table_length",
                "puVar1": "hash_table_start",
                "puVar2": "hash_table_pointer",
                "iVar3": "smaller_length",
                "uVar4": "hash_value",
                "puVar5": "input_pointer",
                "uVar6": "carry",
                "puVar7": "hash_table_end",
                "uVar8": "temp",
                "iVar9": "i",
                "iVar10": "j",
                "uVar11": "hash_value",
                "iVar12": "temp",
                "iVar13": "i",
                "iVar14": "j",
                "puVar15": "hash_table_pointer",
                "puVar16": "hash_table_start",
                "puVar17": "hash_table_end",
                "puVar18": "hash_table_pointer",
                "puVar19": "hash_table_start"
            },
            "code": "void calculate_hash_table_08009258(uint8_t *input, int input_length, int hash_table_length)\n{\n  uint32_t *hash_table_start;\n  uint32_t *hash_table_end;\n  int smaller_length;\n  uint32_t hash_value;\n  uint32_t *input_pointer;\n  uint32_t *hash_table_pointer;\n  uint32_t carry;\n  uint32_t temp;\n  int i;\n  int j;\n  \n  smaller_length = *(int *)(input_length + 0x10);\n  i = *(int *)(hash_table_length + 0x10);\n  j = i;\n  hash_table_start = (uint32_t *)input_length;\n  hash_table_end = (uint32_t *)(i + input_length);\n  if (smaller_length < i) {\n    j = smaller_length;\n    smaller_length = i;\n    hash_table_start = (uint32_t *)hash_table_length;\n    hash_table_length = input_length;\n  }\n  i = smaller_length + j;\n  temp = *(int *)(hash_table_start + 4);\n  if (*(int *)(hash_table_start + 8) < i) {\n    temp = temp + 1;\n  }\n  temp = calculate_hash_table_08009258_helper(input, temp);\n  hash_table_pointer = (uint32_t *)(temp + 0x14);\n  input_pointer = hash_table_pointer + i;\n  for (hash_table_pointer = hash_table_pointer; hash_table_pointer < input_pointer; hash_table_pointer++) {\n    *hash_table_pointer = 0;\n  }\n  carry = hash_table_length + 0x14;\n  hash_value = carry + j * 4;\n  input_pointer = (uint32_t *)(input_length + 0x14);\n  if (carry < hash_value) {\n    hash_table_pointer = (uint32_t *)(carry + ((hash_value - hash_table_length) - 0x15 & 0xfffffffc));\n    hash_table_start = (uint32_t *)(input_length + 0x10);\n    do {\n      while( true ) {\n        hash_table_start++;\n        carry = *hash_table_start & 0xffff;\n        if (carry != 0) break;\n        carry = *hash_table_start >> 0x10;\n        if (carry == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp = *hash_table_pointer;\n        hash_value = 0;\n        input_pointer = input_length;\n        hash_table_end = hash_table_pointer;\n        do {\n          hash_table_pointer = hash_table_end;\n          hash_value = hash_value + carry * *(uint16_t *)input_pointer + (temp >> 0x10);\n          *hash_table_pointer = temp & 0xffff | hash_value * 0x10000;\n          hash_table_start = input_pointer + 1;\n          temp = hash_table_pointer[1];\n          carry = carry * (*input_pointer >> 0x10) + (temp & 0xffff) + (hash_value >> 0x10);\n          hash_value = carry >> 0x10;\n          input_pointer = hash_table_start;\n          hash_table_end = hash_table_pointer + 1;\n        } while (hash_table_start < (uint32_t *)input_length + smaller_length);\n        hash_table_end[1] = carry;\n        hash_table_pointer++;\n        if (hash_table_pointer == hash_table_start) goto LAB_0800937a;\n      }\n      hash_value = 0;\n      input_pointer = hash_table_pointer;\n      hash_table_end = input_length;\n      do {\n        hash_table_start = input_pointer;\n        hash_table_end++;\n        temp = carry * (*input_length & 0xffff) + (*hash_table_start & 0xffff) + hash_value;\n        hash_value = carry * (*input_length >> 0x10) + (*hash_table_start >> 0x10) + (temp >> 0x10);\n        carry = hash_value >> 0x10;\n        *hash_table_start = temp & 0xffff | hash_value * 0x10000;\n        hash_table_pointer = hash_table_start + 1;\n        input_length = hash_table_end;\n      } while (hash_table_end < (uint32_t *)input_length + smaller_length);\n      hash_table_start[1] = carry;\n      carry = *hash_table_start >> 0x10;\n      if (carry != 0) goto LAB_0800932c;\nLAB_080092d2:\n      hash_table_pointer++;\n    } while (hash_table_pointer != hash_table_start);\n  }\nLAB_0800937a:\n  if (i > 0) {\n    input_pointer = input_pointer - 1;\n    hash_value = *input_pointer;\n    while ((hash_value == 0 && (i = i - 1, i != 0))) {\n      input_pointer = input_pointer - 1;\n      hash_value = *input_pointer;\n    }\n  }\n  *(int *)(temp + 0x10) = i;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_table_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_08000c08",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "shifted_input",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_08000c08(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift = leading_zeroes - 8;\n  int multiplier = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = multiplier + shifted_input + shifted_zero + carry;\n    if (shifted_zero == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  int shifted_multiplier = multiplier >> (0x20 - (leading_zeroes + 0x18U & 0xff));\n  uint shifted_result = shifted_input >> 0x1f;\n  uint result = shifted_multiplier + (input >> (0x20 - (leading_zeroes + 0x18U & 0xff))) - shifted_result;\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "check_flag_080042de",
                "param_1": "flag_ptr",
                "param_2": "data_ptr",
                "uVar1": "result"
            },
            "code": "int check_flag_080042de(int *flag_ptr, uint *data_ptr)\n{\n  int result;\n  if (*(char *)(flag_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(flag_ptr + 0xf) = 1;\n    *(undefined *)((int)flag_ptr + 0x3d) = 2;\n    *(uint *)(*flag_ptr + 4) &= 0xffffff8f;\n    *(uint *)(*flag_ptr + 4) |= *data_ptr;\n    *(uint *)(*flag_ptr + 8) &= 0xffffff7f;\n    *(uint *)(*flag_ptr + 8) |= data_ptr[1];\n    *(undefined *)((int)flag_ptr + 0x3d) = 1;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "check_flag_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_set_08009530",
                "param_1": "param",
                "param_2": "source",
                "param_3": "destination",
                "param_4": "param_4",
                "iVar1": "difference",
                "puVar2": "source_end",
                "uVar3": "result",
                "uVar4": "result",
                "iVar5": "difference",
                "puVar6": "source_ptr",
                "puVar7": "destination_ptr",
                "puVar9": "source_start",
                "puVar10": "destination_start",
                "puVar11": "source_end",
                "iVar12": "carry",
                "puVar13": "result_ptr"
            },
            "code": "void compare_and_set_08009530(undefined4 param_1, uint *source, uint *destination, undefined4 param_4)\n{\n  int difference;\n  uint *source_end;\n  uint *destination_end;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint *source_start;\n  uint *destination_start;\n  int carry;\n  uint *result_ptr;\n  uint result;\n  \n  source_end = (uint *)destination[4];\n  difference = source[4] - (int)source_end;\n  destination_start = source + 5;\n  source_start = destination + 5;\n  source_ptr = destination_start;\n  destination_ptr = source;\n  if (difference == 0) {\n    source_end += destination_start;\n    source_start += destination_end;\n    while (true) {\n      source_end--;\n      source_start--;\n      if (*source_end != *source_start) break;\n      if (source_end <= destination_start) {\n        difference = FUN_080090c0(param_1, 0, source_end, source_start, param_4);\n        *(undefined4 *)(difference + 0x10) = 1;\n        *(undefined4 *)(difference + 0x14) = 0;\n        return;\n      }\n    }\n    if (*source_start <= *source_end) goto LAB_08009578;\n  }\n  else if (difference >= 0) {\n    difference = 0;\n    source_end = destination;\n    goto LAB_08009578;\n  }\n  difference = 1;\n  source_end = destination_start;\n  source_start = source;\n  source_ptr = source_start;\n  destination_ptr = destination;\n  destination_start = destination_start;\nLAB_08009578:\n  result_ptr = (uint *)FUN_080090c0(param_1, source_start[1], source_ptr, destination_ptr, param_4);\n  carry = 0;\n  result = source_start[4];\n  destination_end = source[4];\n  *(int *)(result_ptr + 0xc) = difference;\n  source_end += result;\n  source_ptr = result_ptr + 0x14;\n  source_start = destination_start;\n  do {\n    destination_ptr++;\n    destination_start++;\n    result = ((*destination_ptr & 0xffff) + carry) - (*destination_start & 0xffff);\n    carry = ((*destination_ptr >> 0x10) - (*destination_start >> 0x10)) + ((int)result >> 0x10);\n    result = result & 0xffff | carry * 0x10000;\n    result_ptr = source_ptr + 1;\n    *source_ptr = result;\n    carry = carry >> 0x10;\n    source_ptr = result_ptr;\n  } while (destination_start < source_start + destination_end);\n  source_ptr = destination_ptr + 1;\n  result_ptr = source_ptr - 1;\n  if (destination_ptr < source_end) {\n    do {\n      source_start = source_ptr + 1;\n      result = (*source_ptr & 0xffff) + carry;\n      carry = ((int)result >> 0x10) + (*source_ptr >> 0x10);\n      result = result & 0xffff | carry * 0x10000;\n      *result_ptr = result;\n      carry = carry >> 0x10;\n      source_ptr = source_start;\n      result_ptr++;\n    } while (source_start < source_end);\n    source_ptr = (uint *)((int)source_ptr + ((int)source_end + ~(uint)destination_ptr & 0xfffffffc) + 4);\n  }\n  source_ptr--;\n  while (result == 0) {\n    source_ptr--;\n    result = source[4] - 1;\n    result = *source_ptr;\n  }\n  *(uint *)(result_ptr + 0x10) = result;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_and_set_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "output_ptr",
                "param_2": "size",
                "puVar1": "ptr_1",
                "puVar2": "ptr_2",
                "puVar3": "ptr_3",
                "uVar4": "var_1",
                "uVar5": "var_2",
                "puVar6": "ptr_4",
                "iVar7": "var_3",
                "puVar8": "ptr_5",
                "uVar9": "var_4",
                "uVar10": "var_5",
                "puVar11": "ptr_6",
                "puVar12": "ptr_7",
                "puVar13": "ptr_8",
                "uVar14": "var_6",
                "uVar15": "var_7",
                "iVar16": "var_8",
                "puVar17": "ptr_9",
                "puVar18": "ptr_10"
            },
            "code": "\nint * allocate_memory_08008af8(undefined4 *output_ptr,uint size)\n\n{\n  undefined *ptr_1;\n  undefined *ptr_2;\n  undefined *ptr_3;\n  uint var_1;\n  uint var_2;\n  uint *ptr_4;\n  int var_3;\n  undefined *ptr_5;\n  uint var_4;\n  uint var_5;\n  undefined4 *ptr_6;\n  undefined *ptr_7;\n  undefined *ptr_8;\n  uint var_6;\n  uint var_7;\n  int var_8;\n  undefined4 *ptr_9;\n  undefined4 *ptr_10;\n  \n  var_6 = size + 0xb;\n  if (var_6 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    var_7 = 0x10;\n    var_3 = 0x18;\n    var_6 = 2;\nLAB_08008b18:\n    ptr_5 = PTR_DAT_08008e4c + var_3;\n    ptr_7 = *(undefined **)(ptr_5 + 4);\n    if ((ptr_7 != ptr_5 + -8) || (ptr_7 = *(undefined **)(ptr_5 + 0xc), ptr_5 != ptr_7)) {\n      var_3 = *(int *)(ptr_7 + 0xc);\n      ptr_5 = ptr_7 + (*(uint *)(ptr_7 + 4) & 0xfffffffc);\n      var_6 = *(uint *)(ptr_5 + 4);\nLAB_08008b34:\n      var_8 = *(int *)(ptr_7 + 8);\n      *(int *)(var_8 + 0xc) = var_3;\n      *(int *)(var_3 + 8) = var_8;\n      *(uint *)(ptr_5 + 4) = var_6 | 1;\n      FUN_080090b4(output_ptr);\n      return (int *)(ptr_7 + 8);\n    }\n    var_6 = var_6 + 2;\n  }\n  else {\n    var_7 = var_6 & 0xfffffff8;\n    if (((int)var_7 < 0) || (var_7 < size)) {\nLAB_08008c7a:\n      *output_ptr = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (var_7 < 0x1f8) {\n      var_6 = var_6 >> 3;\n      var_3 = var_7 + 8;\n      goto LAB_08008b18;\n    }\n    var_1 = var_6 >> 9;\n    if (var_1 == 0) {\n      var_3 = 0x200;\n      var_4 = 0x40;\n      var_1 = 0x3f;\n    }\n    else if (var_1 < 5) {\n      var_4 = (var_6 >> 6) + 0x39;\n      var_1 = (var_6 >> 6) + 0x38;\n      var_3 = var_4 * 8;\n    }\n    else if (var_1 < 0x15) {\n      var_4 = var_1 + 0x5c;\n      var_1 = var_1 + 0x5b;\n      var_3 = var_4 * 8;\n    }\n    else if (var_1 < 0x55) {\n      var_4 = (var_6 >> 0xc) + 0x6f;\n      var_1 = (var_6 >> 0xc) + 0x6e;\n      var_3 = var_4 * 8;\n    }\n    else if (var_1 < 0x155) {\n      var_4 = (var_6 >> 0xf) + 0x78;\n      var_1 = (var_6 >> 0xf) + 0x77;\n      var_3 = var_4 * 8;\n    }\n    else if (var_1 < 0x555) {\n      var_4 = (var_6 >> 0x12) + 0x7d;\n      var_1 = (var_6 >> 0x12) + 0x7c;\n      var_3 = var_4 * 8;\n    }\n    else {\n      var_3 = 0x3f8;\n      var_4 = 0x7f;\n      var_1 = 0x7e;\n    }\n    for (ptr_7 = *(undefined **)(PTR_DAT_08008e4c + var_3 + 4); var_6 = var_4,\n        PTR_DAT_08008e4c + var_3 + -8 != ptr_7; ptr_7 = *(undefined **)(ptr_7 + 0xc)) {\n      var_8 = (*(uint *)(ptr_7 + 4) & 0xfffffffc) - var_7;\n      var_6 = var_1;\n      if (0xf < var_8) break;\n      if (-1 < var_8) {\n        ptr_5 = ptr_7 + (*(uint *)(ptr_7 + 4) & 0xfffffffc);\n        var_6 = *(uint *)(ptr_5 + 4);\n        var_3 = *(int *)(ptr_7 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr_5 = PTR_PTR_DAT_08008e60;\n  ptr_7 = PTR_DAT_08008e4c;\n  ptr_8 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (ptr_8 == PTR_PTR_DAT_08008e60) {\n    var_1 = *(uint *)(PTR_DAT_08008e4c + 4);\n    var_4 = 1 << ((int)var_6 >> 2 & 0xffU);\n    if (var_4 <= var_1) goto LAB_08008c06;\n  }\n  else {\n    var_4 = *(uint *)(ptr_8 + 4);\n    var_5 = var_4 & 0xfffffffc;\n    var_1 = var_5 - var_7;\n    if (0xf < (int)var_1) {\n      ptr_3 = ptr_8 + var_7;\n      *(uint *)(ptr_8 + 4) = var_7 | 1;\n      *(undefined **)(ptr_7 + 0x10) = ptr_3;\n      *(undefined **)(ptr_7 + 0x14) = ptr_3;\n      *(undefined **)(ptr_3 + 8) = ptr_5;\n      *(undefined **)(ptr_3 + 0xc) = ptr_5;\n      *(uint *)(ptr_3 + 4) = var_1 | 1;\n      *(uint *)(ptr_8 + var_5) = var_1;\n      FUN_080090b4(output_ptr);\n      return (int *)(ptr_8 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(ptr_7 + 0x14) = ptr_5;\n    if (-1 < (int)var_1) {\n      *(uint *)(ptr_8 + var_5 + 4) = *(uint *)(ptr_8 + var_5 + 4) | 1;\n      FUN_080090b4(output_ptr);\n      return (int *)(ptr_8 + 8);\n    }\n    if (var_5 < 0x200) {\n      var_3 = (var_4 >> 3) + 1;\n      var_8 = *(int *)(ptr_7 + var_3 * 8);\n      var_1 = 1 << ((int)(var_4 >> 3) >> 2 & 0xffU) | *(uint *)(ptr_7 + 4);\n      *(int *)(ptr_8 + 8) = var_8;\n      *(undefined **)(ptr_8 + 0xc) = ptr_7 + var_3 * 8 + -8;\n      *(uint *)(ptr_7 + 4) = var_1;\n      *(undefined **)(ptr_7 + var_3 * 8) = ptr_8;\n      *(undefined **)(var_8 + 0xc) = ptr_8;\n    }\n    else {\n      var_1 = var_4 >> 9;\n      if (var_1 < 5) {\n        var_3 = ((var_4 >> 6) + 0x39) * 8;\n        var_8 = (var_4 >> 6) + 0x38;\n      }\n      else if (var_1 < 0x15) {\n        var_3 = (var_1 + 0x5c) * 8;\n        var_8 = var_1 + 0x5b;\n      }\n      else if (var_1 < 0x55) {\n        var_3 = ((var_4 >> 0xc) + 0x6f) * 8;\n        var_8 = (var_4 >> 0xc) + 0x6e;\n      }\n      else if (var_1 < 0x155) {\n        var_3 = ((var_4 >> 0xf) + 0x78) * 8;\n        var_8 = (var_4 >> 0xf) + 0x77;\n      }\n      else if (var_1 < 0x555) {\n        var_3 = ((var_4 >> 0x12) + 0x7d) * 8;\n        var_8 = (var_4 >> 0x12) + 0x7c;\n      }\n      else {\n        var_3 = 0x3f8;\n        var_8 = 0x7e;\n      }\n      ptr_3 = *(undefined **)(ptr_7 + var_3);\n      ptr_1 = ptr_7 + var_3 + -8;\n      if (ptr_1 == ptr_3) {\n        var_1 = 1 << (var_8 >> 2 & 0xffU) | *(uint *)(ptr_7 + 4);\n        *(uint *)(ptr_7 + 4) = var_1;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr_3 + 4) & 0xfffffffc) <= var_5) break;\n          ptr_3 = *(undefined **)(ptr_3 + 8);\n        } while (ptr_1 != ptr_3);\n        ptr_1 = *(undefined **)(ptr_3 + 0xc);\n        var_1 = *(uint *)(ptr_7 + 4);\n      }\n      *(undefined **)(ptr_8 + 8) = ptr_3;\n      *(undefined **)(ptr_8 + 0xc) = ptr_1;\n      *(undefined **)(ptr_1 + 8) = ptr_8;\n      *(undefined **)(ptr_3 + 0xc) = ptr_8;\n    }\n    var_4 = 1 << ((int)var_6 >> 2 & 0xffU);\n    if (var_4 <= var_1) {\nLAB_08008c06:\n      if ((var_4 & var_1) == 0) {\n        var_6 = var_6 & 0xfffffffc;\n        do {\n          var_4 = var_4 << 1;\n          var_6 = var_6 + 4;\n        } while ((var_4 & var_1) == 0);\n      }\n      do {\n        ptr_9 = (undefined4 *)(ptr_7 + var_6 * 8);\n        var_1 = var_6;\n        ptr_10 = ptr_9;\n        do {\n          for (ptr_6 = (undefined4 *)ptr_10[3]; ptr_10 != ptr_6;\n              ptr_6 = (undefined4 *)ptr_6[3]) {\n            var_5 = ptr_6[1] & 0xfffffffc;\n            var_2 = var_5 - var_7;\n            if (0xf < (int)var_2) {\n              var_8 = ptr_6[2];\n              var_3 = ptr_6[3];\n              ptr_8 = (undefined *)(var_7 + (int)ptr_6);\n              ptr_6[1] = var_7 | 1;\n              *(int *)(var_8 + 0xc) = var_3;\n              *(int *)(var_3 + 8) = var_8;\n              *(undefined **)(ptr_7 + 0x10) = ptr_8;\n              *(undefined **)(ptr_7 + 0x14) = ptr_8;\n              *(undefined **)(ptr_8 + 8) = ptr_5;\n              *(undefined **)(ptr_8 + 0xc) = ptr_5;\n              *(uint *)(ptr_8 + 4) = var_2 | 1;\n              *(uint *)((int)ptr_6 + var_5) = var_2;\n              FUN_080090b4(output_ptr);\n              return ptr_6 + 2;\n            }\n            if (-1 < (int)var_2) {\n              var_3 = ptr_6[3];\n              var_8 = ptr_6[2];\n              *(uint *)((int)ptr_6 + var_5 + 4) = *(uint *)((int)ptr_6 + var_5 + 4) | 1;\n              *(int *)(var_8 + 0xc) = var_3;\n              *(int *)(var_3 + 8) = var_8;\n              FUN_080090b4(output_ptr);\n              return ptr_6 + 2;\n            }\n          }\n          var_1 = var_1 + 1;\n          ptr_10 = ptr_10 + 2;\n        } while ((var_1 & 3) != 0);\n        do {\n          var_5 = var_6 & 3;\n          ptr_10 = ptr_9 + -2;\n          var_6 = var_6 - 1;\n          if (var_5 == 0) {\n            var_5 = *(uint *)(ptr_7 + 4) & ~var_4;\n            *(uint *)(ptr_7 + 4) = var_5;\n            goto LAB_08008f24;\n          }\n          ptr_9 = (undefined4 *)*ptr_9;\n        } while (ptr_9 == ptr_10);\n        var_5 = *(uint *)(ptr_7 + 4);\nLAB_08008f24:\n        var_4 = var_4 * 2;\n        if ((var_5 <= var_4 && var_4 - var_5 != 0) || (var_6 = var_1, var_4 == 0)) break;\n        for (; (var_4 & var_5) == 0; var_4 = var_4 << 1) {\n          var_6 = var_6 + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr_5 = PTR_DAT_08008e64;\n  ptr_8 = *(undefined **)(ptr_7 + 8);\n  var_6 = *(uint *)(ptr_8 + 4) & 0xfffffffc;\n  if ((var_7 <= var_6) && (var_1 = var_6 - var_7, 0xf < (int)var_1)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    var_1 = var_7 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    var_1 = var_7 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  ptr_1 = (undefined *)FUN_08009744(output_ptr,var_1);\n  ptr_4 = (uint *)PTR_DAT_08009018;\n  ptr_3 = PTR_DAT_08008e54;\n  if (ptr_1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    ptr_8 = *(undefined **)(ptr_7 + 8);\n    var_6 = *(uint *)(ptr_8 + 4);\n  }\n  else {\n    ptr_2 = ptr_8 + var_6;\n    if (ptr_2 < ptr_1 || ptr_2 == ptr_1) {\n      var_4 = *(int *)PTR_DAT_08008e54 + var_1;\n      *(uint *)PTR_DAT_08008e54 = var_4;\n      ptr_4 = (uint *)ptr_3;\n      if ((ptr_2 != ptr_1) || (((uint)ptr_2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(ptr_7 + 8) + 4) = var_6 + var_1 | 1;\n    }\n    else {\n      if (ptr_8 != ptr_7) goto LAB_08008ed8;\n      var_4 = *(int *)PTR_DAT_08009018 + var_1;\n      *(uint *)PTR_DAT_08009018 = var_4;\nLAB_08008d02:\n      if (*(int *)ptr_5 == -1) {\n        *(undefined **)ptr_5 = ptr_1;\n      }\n      else {\n        *ptr_4 = (uint)(ptr_1 + (var_4 - (int)ptr_2));\n      }\n      var_4 = (uint)ptr_1 & 7;\n      if (var_4 == 0) {\n        var_3 = 0x1000;\n      }\n      else {\n        ptr_1 = ptr_1 + (8 - var_4);\n        var_3 = 0x1008 - var_4;\n      }\n      var_3 = var_3 - ((uint)(ptr_1 + var_1) & 0xfff);\n      var_8 = FUN_08009744(output_ptr,var_3);\n      if (var_8 == -1) {\n        var_1 = 1;\n        var_3 = 0;\n      }\n      else {\n        var_1 = (var_8 - (int)ptr_1) + var_3 | 1;\n      }\n      var_4 = *ptr_4 + var_3;\n      *(undefined **)(ptr_7 + 8) = ptr_1;\n      *ptr_4 = var_4;\n      *(uint *)(ptr_1 + 4) = var_1;\n      if (ptr_8 != ptr_7) {\n        if (var_6 < 0x10) {\n          *(undefined4 *)(ptr_1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        var_6 = var_6 - 0xc & 0xfffffff8;\n        *(uint *)(ptr_8 + 4) = *(uint *)(ptr_8 + 4) & 1 | var_6;\n        *(undefined4 *)(ptr_8 + var_6 + 4) = 5;\n        *(undefined4 *)(ptr_8 + var_6 + 8) = 5;\n        if (0xf < var_6) {\n          FUN_080088ec(output_ptr,ptr_8 + 8);\n          var_4 = *ptr_4;\n        }\n      }\n    }\n    ptr_5 = PTR_DAT_08008e5c;\n    ptr_8 = *(undefined **)(ptr_7 + 8);\n    var_1 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < var_4) {\n      *(uint *)PTR_DAT_08008e58 = var_4;\n    }\n    var_6 = *(uint *)(ptr_8 + 4);\n    if (var_1 < var_4) {\n      *(uint *)ptr_5 = var_4;\n    }\n  }\n  var_1 = (var_6 & 0xfffffffc) - var_7;\n  if ((var_7 <= (var_6 & 0xfffffffc)) && (0xf < (int)var_1)) {\nLAB_08008dac:\n    *(uint *)(ptr_8 + 4) = var_7 | 1;\n    *(undefined **)(ptr_7 + 8) = ptr_8 + var_7;\n    *(uint *)(ptr_8 + var_7 + 4) = var_1 | 1;\n    FUN_080090b4(output_ptr);\n    return (int *)(ptr_8 + 8);\n  }\nLAB_08008eee:\n  FUN_080090b4(output_ptr);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080088ec",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08009adc",
                "FUN_08005e9c",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "allocate_memory_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_condition_08002bb4",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result",
                "FUN_08002d3c": "get_value"
            },
            "code": "int check_condition_08002bb4(int *ptr_param1, uint param2, int param3) {\n  int iVar1;\n  while (true) {\n    if ((*(uint *)(*ptr_param1 + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    iVar1 = get_value(ptr_param1);\n    if (iVar1 != 0) {\n      break;\n    }\n    if ((param2 != 0xffffffff) && ((param2 == 0 || (iVar1 = get_value(), param2 < (uint)(iVar1 - param3))))) {\n      ptr_param1[0x10] |= 0x20;\n      ptr_param1[0xc] = 0;\n      *(undefined *)((int)ptr_param1 + 0x3d) = 0x20;\n      *(undefined *)(ptr_param1 + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_08001ccc",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_condition_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr",
                "bVar1": "flag",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*flag_ptr + 0x14)",
                "0x400": "0x400",
                "0xfffffbff": "0xfffffbff",
                "param_1[0x10]": "flag_ptr[0x10]",
                "4": "4",
                "param_1[0xc]": "flag_ptr[0xc]",
                "0": "0",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)flag_ptr + 0x3d)",
                "0x20": "0x20",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(flag_ptr + 0xf)"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr) {\n  bool flag = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (flag) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input",
                "param_2": "result",
                "uVar1": "first_value",
                "uVar2": "second_value",
                "uVar3": "third_value",
                "FUN_08000aa4": "get_first_value",
                "PTR_DAT_08004d60": "is_final_value_zero",
                "FUN_08000418": "get_second_value",
                "FUN_080004c8": "combine_values",
                "DAT_08004d40": "constant_one",
                "DAT_08004d44": "constant_two",
                "FUN_0800015c": "apply_operation",
                "FUN_080009fc": "get_eighth_value",
                "DAT_08004d64": "constant_three",
                "DAT_08004d48": "constant_four",
                "DAT_08004d4c": "constant_five",
                "DAT_08004d68": "constant_six",
                "DAT_08004d6c": "constant_seven",
                "get_second_value": "get_second_value",
                "get_third_value": "get_third_value",
                "get_fourth_value": "get_fourth_value",
                "get_fifth_value": "get_fifth_value",
                "combine_values": "combine_values",
                "apply_operation": "apply_operation",
                "get_eighth_value": "get_eighth_value"
            },
            "code": "void calculate_result_08004bd8(int input, int* result)\n{\n    int first_value = get_first_value(input);\n    int second_value = get_second_value();\n    int third_value = get_third_value(first_value);\n    int fourth_value = get_fourth_value();\n    int fifth_value = get_fifth_value();\n    int sixth_value = combine_values(second_value, third_value, fourth_value, fifth_value);\n    int seventh_value = apply_operation(sixth_value);\n    int eighth_value = get_eighth_value(input);\n    int final_value = combine_values(seventh_value, eighth_value);\n    if(*PTR_DAT_08004d60 == 0)\n    {\n        int first_calculation = combine_values(second_value, eighth_value, DAT_08004d40, DAT_08004d44);\n        int second_calculation = combine_values(seventh_value, final_value, DAT_08004d64, DAT_08004d48);\n        int final_calculation = combine_values(first_calculation, second_calculation);\n        final_value = apply_operation(final_calculation);\n        *PTR_DAT_08004d60 = 1;\n    }\n    else\n    {\n        *PTR_DAT_08004d60 = 0;\n    }\n    *result = final_value;\n}",
            "called": [
                "FUN_08000aa4",
                "FUN_0800015c",
                "FUN_08000418",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_result_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "find_or_create_item_080090c0",
                "param_1": "input_item",
                "param_2": "index",
                "puVar1": "item_ptr",
                "iVar2": "item_list_ptr",
                "FUN_08009980": "create_list"
            },
            "code": "undefined4 * find_or_create_item_080090c0(int input_item,uint index)\n{\n  undefined4 *item_ptr;\n  int item_list_ptr;\n  item_list_ptr = *(int *)(input_item + 0x4c);\n  if (item_list_ptr == 0) {\n    item_list_ptr = create_list(input_item,4,0x21);\n    *(int *)(input_item + 0x4c) = item_list_ptr;\n    if (item_list_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  item_ptr = *(undefined4 **)(item_list_ptr + index * 4);\n  if (item_ptr == (undefined4 *)0x0) {\n    int item_size = 1 << (index & 0xff);\n    item_ptr = (undefined4 *)create_list(input_item,1,(item_size + 5) * 4);\n    if (item_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    item_ptr[1] = index;\n    item_ptr[2] = item_size;\n  }\n  else {\n    *(undefined4 *)(item_list_ptr + index * 4) = *item_ptr;\n  }\n  item_ptr[3] = 0;\n  item_ptr[4] = 0;\n  return item_ptr;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009258",
                "FUN_08009444",
                "FUN_08009244",
                "FUN_08009120",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "find_or_create_item_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "num_copy"
            },
            "code": "uint count_trailing_zeros_080091e4(uint *num)\n{\n  uint num_copy = *num;\n  uint count = num_copy & 7;\n  if (count == 0) {\n    if ((num_copy & 0xffff) == 0) {\n      num_copy = num_copy >> 0x10;\n      count = 0x10;\n    }\n    if ((num_copy & 0xff) == 0) {\n      num_copy = num_copy >> 8;\n      count += 8;\n    }\n    if ((num_copy & 0xf) == 0) {\n      num_copy = num_copy >> 4;\n      count += 4;\n    }\n    if ((num_copy & 3) == 0) {\n      num_copy = num_copy >> 2;\n      count += 2;\n    }\n    if (-1 < (int)(num_copy << 0x1f)) {\n      num_copy = num_copy >> 1;\n      if (num_copy == 0) {\n        return 0x20;\n      }\n      count++;\n    }\n    *num = num_copy;\n    return count;\n  }\n  if (-1 < (int)(num_copy << 0x1f)) {\n    if ((int)(num_copy << 0x1e) < 0) {\n      *num = num_copy >> 1;\n      return 1;\n    }\n    *num = num_copy >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_trailing_zeros_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "exponent",
                "param_2": "fraction",
                "uVar1": "result",
                "uVar2": "fraction_times_two",
                "uVar3": "normalized_fraction",
                "in_r12": "denormalized_fraction",
                "bVar4": "is_zero",
                "bVar5": "is_normalized",
                "SCARRY4": "__builtin_sadd_overflow",
                "PTR_DAT_08002e08": "0x7fffffff",
                "PTR_DAT_08002e0c": "0x80000000"
            },
            "code": "uint calculate_float_bits_080009fc(uint exponent, uint fraction) {\n  uint sign_bit = fraction >> 31;\n  uint exponent_bits = exponent << 23;\n  uint fraction_bits = (fraction & 0x7FFFFF) | 0x800000;\n  uint shifted_exponent = exponent_bits + 0x7F800000;\n  uint is_denormalized = exponent == 0;\n  uint is_special = exponent == 0xFF;\n  if (is_special) {\n    if (fraction == 0) {\n      return shifted_exponent;\n    }\n    else {\n      return 0x7FC00000;\n    }\n  }\n  else if (is_denormalized) {\n    int shift_amount = 1 - __builtin_clz(fraction_bits);\n    uint hidden_bit = fraction_bits << shift_amount;\n    shifted_exponent = (127 - shift_amount) << 23;\n    fraction_bits = hidden_bit & 0x7FFFFF;\n  }\n  return (sign_bit << 31) | shifted_exponent | fraction_bits;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "calculate_float_08000cb8",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "unknown",
                "param_4": "unknown2",
                "lVar1": "long_var",
                "uVar2": "result",
                "uVar3": "exponent",
                "iVar4": "new_exponent",
                "iVar5": "shift_amount",
                "iVar7": "shift_amount2",
                "uVar6": "mantissa",
                "uVar8": "temp_result",
                "bVar9": "bool_1",
                "bVar10": "bool_2"
            },
            "code": "\nuint calculate_float_08000cb8(uint float_1,uint float_2,undefined4 unknown,uint unknown2)\n\n{\n  longlong long_var;\n  uint result;\n  uint exponent;\n  int new_exponent;\n  int shift_amount;\n  uint mantissa;\n  int shift_amount2;\n  uint temp_result;\n  bool bool_1;\n  bool bool_2;\n  \n  exponent = float_1 >> 0x17 & 0xff;\n  bool_1 = exponent == 0;\n  if (!bool_1) {\n    unknown2 = float_2 >> 0x17 & 0xff;\n    bool_1 = unknown2 == 0;\n  }\n  if (!bool_1) {\n    bool_1 = exponent == 0xff;\n  }\n  if (!bool_1) {\n    bool_1 = unknown2 == 0xff;\n  }\n  if (bool_1) {\n    unknown2 = float_2 >> 0x17 & 0xff;\n    if (exponent == 0xff || unknown2 == 0xff) {\n      bool_1 = float_1 == 0 || float_1 == 0x80000000;\n      result = float_2;\n      if (float_1 != 0 && float_1 != 0x80000000) {\n        bool_1 = float_2 == 0;\n        result = float_1;\n      }\n      if (!bool_1) {\n        bool_1 = float_2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((bool_1) || ((exponent == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((unknown2 == 0xff && (temp_result = float_2, (float_2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ float_2;\n      goto LAB_08000e08;\n    }\n    bool_1 = (float_1 & 0x7fffffff) == 0;\n    if (!bool_1) {\n      bool_1 = (float_2 & 0x7fffffff) == 0;\n    }\n    if (bool_1) {\n      return (float_1 ^ float_2) & 0x80000000;\n    }\n    bool_1 = exponent == 0;\n    result = float_1 & 0x80000000;\n    while( true ) {\n      if (bool_1) {\n        float_1 = float_1 << 1;\n        bool_1 = (float_1 & 0x800000) == 0;\n      }\n      if (!bool_1) break;\n      exponent = exponent - 1;\n    }\n    float_1 = float_1 | result;\n    bool_1 = unknown2 == 0;\n    result = float_2 & 0x80000000;\n    while( true ) {\n      if (bool_1) {\n        float_2 = float_2 << 1;\n        bool_1 = (float_2 & 0x800000) == 0;\n      }\n      if (!bool_1) break;\n      unknown2 = unknown2 - 1;\n    }\n    float_2 = float_2 | result;\n  }\n  new_exponent = exponent + unknown2;\n  temp_result = float_1 ^ float_2;\n  exponent = float_1 << 9;\n  bool_1 = exponent == 0;\n  if (!bool_1) {\n    float_2 = float_2 << 9;\n    bool_1 = float_2 == 0;\n  }\n  if (bool_1) {\n    if (exponent == 0) {\n      float_2 = float_2 << 9;\n    }\n    result = temp_result & 0x80000000 | float_1 & 0x7fffff | float_2 >> 9;\n    bool_2 = SBORROW4(new_exponent,0x7f);\n    shift_amount = new_exponent + -0x7f;\n    bool_1 = shift_amount == 0;\n    shift_amount2 = shift_amount;\n    if (!bool_1 && 0x7e < new_exponent) {\n      bool_2 = SBORROW4(0xff,shift_amount);\n      shift_amount2 = 0xff - shift_amount;\n      bool_1 = shift_amount == 0xff;\n    }\n    if (!bool_1 && shift_amount2 < 0 == bool_2) {\n      result = result | shift_amount * 0x800000;\n    }\n    if (!bool_1 && shift_amount2 < 0 == bool_2) {\n      return result;\n    }\n    result = result | 0x800000;\n    mantissa = 0;\n    bool_2 = SBORROW4(shift_amount,1);\n    temp_result = new_exponent - 0x80;\n    bool_1 = temp_result == 0;\n    exponent = temp_result;\n  }\n  else {\n    long_var = (ulonglong)(exponent >> 5 | 0x8000000) * (ulonglong)(float_2 >> 5 | 0x8000000);\n    mantissa = (uint)long_var;\n    result = (uint)((ulonglong)long_var >> 0x20);\n    bool_1 = result < 0x800000;\n    if (bool_1) {\n      result = result << 1;\n    }\n    if (bool_1) {\n      result = result | mantissa >> 0x1f;\n      mantissa = mantissa << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (new_exponent + -0x7f) - (uint)bool_1;\n    bool_2 = SBORROW4(temp_result,0xfd);\n    bool_1 = temp_result == 0xfd;\n    exponent = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < mantissa);\n      if (mantissa == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (bool_1 || (int)exponent < 0 != bool_2) {\n    bool_1 = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || bool_1 != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && bool_1 == SCARRY4(temp_result,0x19)) {\n      exponent = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      exponent = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent >> 1) + (uint)((byte)exponent & 1);\n      if ((mantissa | temp_result << 1) == 0) {\n        exponent = exponent & ~(temp_result >> 0x1f);\n      }\n      return exponent;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_float_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "reverse_and_improve_080093a4",
                "param_1": "size",
                "param_2": "data",
                "param_3": "count",
                "iVar1": "index",
                "iVar2": "words",
                "puVar3": "data_ptr",
                "puVar4": "word_ptr",
                "PTR_DAT_08009440": "Remainder_Array",
                "create_word": "create_word_array",
                "reverse": "reverse_array"
            },
            "code": "undefined4 *reverse_and_improve_080093a4(int size, undefined4 *data, uint count)\n{\n  int remainder = count % 4;\n  if (remainder != 0) {\n    data = (undefined4 *) reverse(size, data, *(undefined4 *)(PTR_DAT_08009440 + (remainder - 1) * 4), 0);\n  }\n  int words = (int) count >> 2;\n  if (words != 0) {\n    undefined4 *word_ptr = *(undefined4 **)(size + 0x48);\n    if (word_ptr == (undefined4 *)0x0) {\n      word_ptr = (undefined4 *) create_word(size, 1);\n      word_ptr[4] = 1;\n      word_ptr[5] = 0x271;\n      *(undefined4 **)(size + 0x48) = word_ptr;\n      *word_ptr = 0;\n    }\n    undefined4 *data_ptr = data;\n    if (words << 0x1f >= 0) {\n      goto LAB_080093c4;\n    }\nLAB_080093d2:\n    words = words >> 1;\n    data_ptr = word_ptr;\n    if (words != 0) {\n      while( true ) {\n        word_ptr = (undefined4 *)*data_ptr;\n        if (word_ptr == (undefined4 *)0x0) {\n          word_ptr = (undefined4 *)create_word(size, data_ptr, data_ptr);\n          *data_ptr = word_ptr;\n          *word_ptr = 0;\n        }\n        data_ptr = data;\n        if (-1 >= words << 0x1f) break;\nLAB_080093c4:\n        data = (undefined4 *)create_word(size, data_ptr, word_ptr);\n        if (data_ptr == (undefined4 *)0x0) break;\n        int index = *(int *)(size + 0x4c);\n        words = words >> 1;\n        *data_ptr = *(undefined4 *)(index + data_ptr[1] * 4);\n        *(undefined4 **)(index + data_ptr[1] * 4) = data_ptr;\n        data_ptr = word_ptr;\n        if (words == 0) {\n          return data;\n        }\n      }\n      goto LAB_080093d2;\n    }\n  }\n  return data;\n}\n",
            "called": [
                "FUN_08009258",
                "FUN_08009120",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "process_data_080098c0",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr_1",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "uVar4": "uVar4",
                "iVar5": "ptr_3",
                "iVar6": "ptr_2",
                "iVar7": "counter"
            },
            "code": "undefined4 process_data_080098c0(int data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr_1 = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  int ptr_2 = *(int *)PTR_PTR_DAT_08009978;\n  int ptr_3 = *(int *)(ptr_2 + 0x148);\n  if (ptr_3 == 0) {\n    ptr_3 = ptr_2 + 0x14c;\n    *(int *)(ptr_2 + 0x148) = ptr_3;\n  }\n  uint uVar4 = *(uint *)(ptr_3 + 4);\n  int counter = 0;\n  if ((int)uVar4 < 0x20) {\n    counter = uVar4 + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)ptr_1);\n      return 0xffffffff;\n    }\n    ptr_3 = 400;\n    uVar4 = 0;\n    _DAT_00000190 = *(undefined4 *)(ptr_2 + 0x148);\n    counter = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(ptr_2 + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (data != 0) {\n    int ptr_4 = ptr_3 + uVar4 * 4;\n    *(undefined4 *)(ptr_4 + 0x88) = param_3;\n    uint uVar3 = 1 << (uVar4 & 0xff);\n    *(uint *)(ptr_3 + 0x188) = *(uint *)(ptr_3 + 0x188) | uVar3;\n    *(undefined4 *)(ptr_4 + 0x108) = param_4;\n    if (data == 2) {\n      *(uint *)(ptr_3 + 0x18c) = uVar3 | *(uint *)(ptr_3 + 0x18c);\n    }\n  }\n  *(int *)(ptr_3 + 4) = counter;\n  undefined4 uVar2 = *(undefined4 *)ptr_1;\n  *(undefined4 *)(ptr_3 + (uVar4 + 2) * 4) = param_2;\n  do_nothing_08008af4(uVar2);\n  return 0;\n}",
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "process_data_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "calculate_double_precision_float_0800015c",
                "param_1": "lower_32_bits_a",
                "param_2": "upper_32_bits_a",
                "param_3": "lower_32_bits_b",
                "param_4": "upper_32_bits_b",
                "iVar1": "shift_amount_b",
                "bVar2": "least_bit_b",
                "uVar3": "sum_lower_a_b",
                "uVar4": "sum_upper_a_b",
                "uVar5": "normalized_upper_a",
                "iVar6": "shift_amount_a",
                "uVar7": "normalized_upper_b",
                "uVar8": "normalized_lower_a",
                "uVar9": "normalized_lower_b",
                "uVar10": "difference_normalized",
                "uVar11": "sticky_bit",
                "uVar12": "sum_normalized",
                "bVar13": "same_sign",
                "bVar14": "condition_met",
                "bVar15": "overflow"
            },
            "code": "\nulonglong calculate_double_precision_float_0800015c(uint lower_32_bits_a,uint upper_32_bits_a,uint lower_32_bits_b,uint upper_32_bits_b)\n\n{\n  int shift_amount_b;\n  byte least_bit_b;\n  uint sum_lower_a_b;\n  uint sum_upper_a_b;\n  uint normalized_upper_a;\n  int shift_amount_a;\n  uint normalized_upper_b;\n  uint normalized_lower_a;\n  uint normalized_lower_b;\n  uint difference_normalized;\n  uint sticky_bit;\n  uint sum_normalized;\n  bool same_sign;\n  bool condition_met;\n  bool overflow;\n  \n  normalized_upper_b = upper_32_bits_a << 1;\n  normalized_lower_b = upper_32_bits_b << 1;\n  same_sign = ((upper_32_bits_a ^ upper_32_bits_b) & 0x7fffffff) == 0;\n  condition_met = same_sign && lower_32_bits_a == lower_32_bits_b;\n  if (!same_sign || lower_32_bits_a != lower_32_bits_b) {\n    condition_met = (normalized_upper_b | lower_32_bits_a) == 0;\n  }\n  if (!condition_met) {\n    condition_met = (normalized_lower_b | lower_32_bits_b) == 0;\n  }\n  shift_amount_a = (int)normalized_upper_b >> 0x15;\n  if (!condition_met) {\n    condition_met = shift_amount_a == -1;\n  }\n  shift_amount_b = (int)normalized_lower_b >> 0x15;\n  if (!condition_met) {\n    condition_met = shift_amount_b == -1;\n  }\n  if (condition_met) {\n    if (shift_amount_a == -1 || shift_amount_b == -1) {\n      normalized_lower_b = upper_32_bits_b;\n      normalized_upper_b = lower_32_bits_b;\n      if (shift_amount_a == -1) {\n        normalized_lower_b = upper_32_bits_a;\n        normalized_upper_b = lower_32_bits_a;\n      }\n      if (shift_amount_a != -1 || shift_amount_b != -1) {\n        lower_32_bits_b = normalized_upper_b;\n        upper_32_bits_b = normalized_lower_b;\n      }\n      condition_met = (normalized_upper_b | normalized_lower_b << 0xc) == 0;\n      if (condition_met) {\n        condition_met = (lower_32_bits_b | upper_32_bits_b << 0xc) == 0;\n      }\n      if (condition_met) {\n        condition_met = normalized_lower_b == upper_32_bits_b;\n      }\n      if (!condition_met) {\n        normalized_lower_b = normalized_lower_b | 0x80000;\n      }\n      return CONCAT44(normalized_lower_b,normalized_upper_b);\n    }\n    if (((upper_32_bits_a ^ upper_32_bits_b) & 0x7fffffff) != 0 || lower_32_bits_a != lower_32_bits_b) {\n      if ((normalized_upper_b | lower_32_bits_a) == 0) {\n        lower_32_bits_a = lower_32_bits_b;\n        upper_32_bits_a = upper_32_bits_b;\n      }\n      return CONCAT44(upper_32_bits_a,lower_32_bits_a);\n    }\n    if (upper_32_bits_a != upper_32_bits_b) {\n      return 0;\n    }\n    if (normalized_upper_b >> 0x15 == 0) {\n      condition_met = (lower_32_bits_a & 0x80000000) != 0;\n      normalized_lower_b = upper_32_bits_a * 2 + (uint)condition_met;\n      if (CARRY4(upper_32_bits_a,upper_32_bits_a) || CARRY4(upper_32_bits_a * 2,(uint)condition_met)) {\n        normalized_lower_b = normalized_lower_b | 0x80000000;\n      }\n      return CONCAT44(normalized_lower_b,lower_32_bits_a << 1);\n    }\n    if (normalized_upper_b < 0xffc00000) {\n      return CONCAT44(upper_32_bits_a + 0x100000,lower_32_bits_a);\n    }\n    upper_32_bits_a = upper_32_bits_a & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(upper_32_bits_a | 0x7ff00000) << 0x20;\n  }\n  normalized_upper_b = normalized_upper_b >> 0x15;\n  normalized_lower_b = normalized_lower_b >> 0x15;\n  difference_normalized = normalized_lower_b - normalized_upper_b;\n  condition_met = difference_normalized != 0;\n  if (normalized_lower_b < normalized_upper_b) {\n    difference_normalized = -difference_normalized;\n  }\n  normalized_lower_a = lower_32_bits_a;\n  normalized_upper_a = upper_32_bits_a;\n  if (condition_met && normalized_upper_b <= normalized_lower_b) {\n    normalized_upper_b = normalized_upper_b + difference_normalized;\n    normalized_lower_a = lower_32_bits_b;\n    normalized_upper_a = upper_32_bits_b;\n    lower_32_bits_b = lower_32_bits_a;\n    upper_32_bits_b = upper_32_bits_a;\n  }\n  if (0x36 < difference_normalized) {\n    return CONCAT44(normalized_upper_a,normalized_lower_a);\n  }\n  normalized_lower_b = normalized_upper_a & 0xfffff | 0x100000;\n  if ((normalized_upper_a & 0x80000000) != 0) {\n    condition_met = normalized_lower_a != 0;\n    normalized_lower_a = -normalized_lower_a;\n    normalized_lower_b = -normalized_lower_b - (uint)condition_met;\n  }\n  normalized_upper_a = upper_32_bits_b & 0xfffff | 0x100000;\n  if ((upper_32_bits_b & 0x80000000) != 0) {\n    condition_met = lower_32_bits_b != 0;\n    lower_32_bits_b = -lower_32_bits_b;\n    normalized_upper_a = -normalized_upper_a - (uint)condition_met;\n  }\n  if (normalized_upper_b == difference_normalized) {\n    normalized_upper_a = normalized_upper_a ^ 0x100000;\n    if (normalized_upper_b == 0) {\n      normalized_lower_b = normalized_lower_b ^ 0x100000;\n      normalized_upper_b = 1;\n    }\n    else {\n      difference_normalized = difference_normalized - 1;\n    }\n  }\n  sum_normalized = -difference_normalized + 0x20;\n  if ((int)difference_normalized < 0x21) {\n    sticky_bit = lower_32_bits_b << (sum_normalized & 0xff);\n    lower_32_bits_b = lower_32_bits_b >> (difference_normalized & 0xff);\n    sum_lower_a_b = normalized_lower_a + lower_32_bits_b;\n    sum_upper_a_b = normalized_upper_a << (sum_normalized & 0xff);\n    sum_normalized = sum_lower_a_b + sum_upper_a_b;\n    normalized_lower_b = normalized_lower_b + CARRY4(normalized_lower_a,lower_32_bits_b) + ((int)normalized_upper_a >> (difference_normalized & 0xff)) +\n            (uint)CARRY4(sum_lower_a_b,sum_upper_a_b);\n  }\n  else {\n    sticky_bit = normalized_upper_a << (-difference_normalized + 0x40 & 0xff);\n    if (lower_32_bits_b != 0) {\n      sticky_bit = sticky_bit | 2;\n    }\n    normalized_upper_a = (int)normalized_upper_a >> (difference_normalized - 0x20 & 0xff);\n    sum_normalized = normalized_lower_a + normalized_upper_a;\n    normalized_lower_b = normalized_lower_b + ((int)normalized_upper_a >> 0x1f) + (uint)CARRY4(normalized_lower_a,normalized_upper_a);\n  }\n  upper_32_bits_a = normalized_lower_b & 0x80000000;\n  difference_normalized = normalized_lower_b;\n  if ((int)normalized_lower_b < 0) {\n    condition_met = sticky_bit == 0;\n    sticky_bit = -sticky_bit;\n    difference_normalized = -sum_normalized;\n    sum_normalized = -(uint)!condition_met - sum_normalized;\n    difference_normalized = -(uint)(condition_met <= difference_normalized) - normalized_lower_b;\n  }\n  if (0xfffff < difference_normalized) {\n    normalized_lower_a = normalized_upper_b - 1;\n    if (0x1fffff < difference_normalized) {\n      normalized_lower_b = difference_normalized & 1;\n      difference_normalized = difference_normalized >> 1;\n      least_bit_b = (byte)sum_normalized;\n      sum_normalized = (uint)(normalized_lower_b != 0) << 0x1f | sum_normalized >> 1;\n      sticky_bit = (uint)(least_bit_b & 1) << 0x1f | sticky_bit >> 1;\n      normalized_lower_a = normalized_upper_b;\n      if (0xffbfffff < normalized_upper_b * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition_met = 0x7fffffff < sticky_bit;\n    if (sticky_bit == 0x80000000) {\n      condition_met = (sum_normalized & 1) != 0;\n    }\n    return CONCAT44(difference_normalized + normalized_lower_a * 0x100000 + (uint)CARRY4(sum_normalized,(uint)condition_met) | upper_32_bits_a,\n                    sum_normalized + condition_met);\n  }\n  same_sign = (sticky_bit & 0x80000000) != 0;\n  sticky_bit = sticky_bit << 1;\n  normalized_lower_a = sum_normalized * 2;\n  condition_met = CARRY4(sum_normalized,sum_normalized);\n  sum_normalized = sum_normalized * 2 + (uint)same_sign;\n  difference_normalized = difference_normalized * 2 + (uint)(condition_met || CARRY4(normalized_lower_a,(uint)same_sign));\n  normalized_lower_a = normalized_upper_b - 2;\n  if ((difference_normalized & 0x100000) != 0) goto LAB_08000268;\n  normalized_upper_a = sum_normalized;\n  normalized_upper_b = difference_normalized;\n  if (difference_normalized == 0) {\n    normalized_upper_a = 0;\n    normalized_upper_b = sum_normalized;\n  }\n  shift_amount_a = count_leading_zeroes(normalized_upper_b);\n  if (difference_normalized == 0) {\n    shift_amount_a = shift_amount_a + 0x20;\n  }\n  sum_normalized = shift_amount_a - 0xb;\n  overflow = SBORROW4(sum_normalized,0x20);\n  difference_normalized = shift_amount_a - 0x2b;\n  condition_met = (int)difference_normalized < 0;\n  same_sign = difference_normalized == 0;\n  if ((int)sum_normalized < 0x20) {\n    overflow = SCARRY4(difference_normalized,0xc);\n    shift_amount_a = shift_amount_a + -0x1f;\n    condition_met = shift_amount_a < 0;\n    same_sign = shift_amount_a == 0;\n    difference_normalized = sum_normalized;\n    if (!same_sign && condition_met == overflow) {\n      normalized_upper_a = normalized_upper_b << (sum_normalized & 0xff);\n      normalized_upper_b = normalized_upper_b >> (0xcU - shift_amount_a & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (same_sign || condition_met != overflow) {\n    sticky_bit = 0x20 - difference_normalized;\n  }\n  normalized_upper_b = normalized_upper_b << (difference_normalized & 0xff);\n  if (same_sign || condition_met != overflow) {\n    normalized_upper_b = normalized_upper_b | normalized_upper_a >> (sticky_bit & 0xff);\n  }\n  if (same_sign || condition_met != overflow) {\n    normalized_upper_a = normalized_upper_a << (difference_normalized & 0xff);\n  }\nLAB_080002e0:\n  if ((int)sum_normalized <= (int)normalized_lower_a) {\n    return CONCAT44(normalized_upper_b + (normalized_lower_a - sum_normalized) * 0x100000 | upper_32_bits_a,normalized_upper_a);\n  }\n  difference_normalized = ~(normalized_lower_a - sum_normalized);\n  if ((int)difference_normalized < 0x1f) {\n    shift_amount_a = difference_normalized - 0x13;\n    if (shift_amount_a != 0 && shift_amount_a < 0 == SCARRY4(difference_normalized - 0x1f,0xc)) {\n      return CONCAT44(normalized_lower_b,normalized_upper_a >> (0x20 - (0xcU - shift_amount_a) & 0xff) | normalized_upper_b << (0xcU - shift_amount_a & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference_normalized = difference_normalized + 1;\n    return CONCAT44(upper_32_bits_a | normalized_upper_b >> (difference_normalized & 0xff),\n                    normalized_upper_a >> (difference_normalized & 0xff) | normalized_upper_b << (0x20 - difference_normalized & 0xff));\n  }\n  return CONCAT44(normalized_lower_b,normalized_upper_b >> (difference_normalized - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_float_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "send_data_080027f4",
                "param_1": "data",
                "param_2": "flags",
                "param_3": "packet_id",
                "param_4": "packet_size",
                "param_5": "timeout",
                "param_6": "timestamp",
                "iVar1": "code",
                "uVar2": "result"
            },
            "code": "uint32_t send_data_080027f4(uint32_t **data, uint8_t flags, uint16_t packet_id, uint16_t packet_size, uint32_t timeout, int timestamp) {\n    uint32_t result = 3;\n    **data |= 0x400;\n    **data |= 0x100;\n    while ((~(*data)[5] & 1) != 0) {\n        if (timeout != 0xffffffff && FUN_080015a0() - timestamp > timeout) {\n            goto end;\n        }\n    }\n    (*data)[12] = NULL;\n    (*data)[13] = 0x20;\n    (*data)[14] = NULL;\n    (*data)[15] = NULL;\n    uint32_t code = FUN_08002ad8(data, DAT_08002ad4, packet_size, timestamp);\n    if (code != 0) {\n        if ((*data)[16] == (uint32_t *)0x4) {\n            result = 1;\n        } else {\n            result = 3;\n        }\n        goto end;\n    }\n    code = FUN_08002bb4(data, packet_size, timestamp, (*data)[6]);\n    if (code != 0) {\n        if ((*data)[16] == (uint32_t *)0x4) {\n            result = 1;\n        } else {\n            result = 3;\n        }\n        goto end;\n    }\n    if (packet_id == 1) {\n        (*data)[4] = flags & 0xfe;\n        (*data)[4] = (uint32_t)(uint8_t)packet_id;\n    } else {\n        (*data)[4] = (uint32_t)(uint8_t)((uint16_t)packet_id >> 8);\n        code = FUN_08002bb4(data, packet_size, timestamp);\n        if (code != 0) {\n            if ((*data)[16] == (uint32_t *)0x4) {\n                result = 1;\n            } else {\n                result = 3;\n            }\n            goto end;\n        }\n        (*data)[4] = (uint32_t)(uint8_t)packet_id;\n    }\n    code = FUN_08002bb4(data, packet_size, timestamp);\n    if (code != 0) {\n        if ((*data)[16] == (uint32_t *)0x4) {\n            result = 1;\n        } else {\n            result = 3;\n        }\n        goto end;\n    }\n    while ((~(*data)[5] & 1) != 0) {\n        if (timeout != 0xffffffff && FUN_080015a0() - timestamp > timeout) {\n            goto end;\n        }\n    }\n    (*data)[12] = NULL;\n    (*data)[13] = 0x20;\n    (*data)[14] = NULL;\n    (*data)[15] = NULL;\n    (*data)[4] = (uint32_t)(flags | 1);\n    code = FUN_08002ad8(data, DAT_08002ad4, packet_size, timestamp);\n    if (code != 0) {\n        if ((*data)[16] == (uint32_t *)0x4) {\n            result = 1;\n        } else {\n            result = 3;\n        }\n        goto end;\n    }\n    result = FUN_08002bb4(data, packet_size, timestamp, (*data)[6]);\n    if (result != 0) {\n        if ((*data)[16] == (uint32_t *)0x4) {\n            result = 1;\n        } else {\n            result = 3;\n        }\n        goto end;\n    }\n    (*data)[4] = (uint32_t)(uint8_t)packet_id;\n    result = 0;\n    end:\n    return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "send_data_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "convert_uint64_to_uint32_080003d4",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount_with_offset",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative_shift_amount",
                "bVar6": "is_zero_shift_amount",
                "bVar7": "shift_amount_overflow"
            },
            "code": "ulonglong convert_uint64_to_uint32_080003d4(uint input)\n{\n    uint leading_zeroes = count_leading_zeroes(input);\n    uint shift_amount = leading_zeroes + 21;\n    bool shift_amount_overflow = shift_amount < leading_zeroes;\n\n    if (input == 0) {\n        return 0;\n    }\n\n    if (shift_amount_overflow) {\n        uint remaining_bits = 32 - (leading_zeroes - 11);\n        uint shifted_input = input << (leading_zeroes - 11);\n        shifted_input |= 0U >> remaining_bits;\n        return shifted_input << 32;\n    }\n\n    uint shifted_input = input << shift_amount;\n    uint remaining_bits = 32 - shift_amount;\n    shifted_input |= 0U >> remaining_bits;\n    return ((uint64_t)shifted_input) << 32 >> shift_amount | ((uint64_t)input) >> (32 - shift_amount);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_uint64_to_uint32_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_result_08004d78",
                "param_1": "input_array",
                "param_2": "output_array_1",
                "param_3": "output_array_2",
                "uVar1": "input_1",
                "uVar2": "input_2",
                "uVar3": "input_3",
                "uVar4": "intermediate_result_1",
                "uVar5": "intermediate_result_2"
            },
            "code": "void calculate_result_08004d78(float *input_array, float *output_array_1, float *output_array_2)\n{\n    float input_1 = input_array[0];\n    float input_2 = input_array[1];\n    float input_3 = input_array[2];\n    float intermediate_result_1 = calculate_intermediate(input_2);\n    float intermediate_result_2 = calculate_intermediate(input_3);\n    float intermediate_result_3 = combine_results(intermediate_result_1, intermediate_result_2);\n    float final_result_1 = calculate_final(intermediate_result_3);\n    float final_result_2 = calculate_final(intermediate_result_2);\n    output_array_1[0] = final_result_1;\n    output_array_2[0] = final_result_2;\n}",
            "called": [
                "FUN_08000e20",
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_080009fc",
                "FUN_080004c8",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_result_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input",
                "uVar1": "leading_zeroes",
                "uVar2": "shifted_input",
                "iVar4": "hash",
                "uVar5": "carry"
            },
            "code": "uint calculate_hash_08000c10(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shifted_input = input << (leading_zeroes + 0x18U);\n  uint hash = ((input & 0x80000000) | 0x4b000000) - 0x800000 + (leading_zeroes - 8) * -0x800000;\n  if (leading_zeroes > 7) {\n    uint carry = (shifted_input == 0x80000000) ? 1 : 0;\n    hash += input << (leading_zeroes - 8);\n    hash += 0U >> (0x20 - (leading_zeroes - 8));\n    hash += (uint)(0x7fffffff < carry);\n    if (carry == 0x80000000) {\n      hash = hash & 0xfffffffe;\n    }\n    return hash;\n  }\n  hash += (input >> (0x20 - (leading_zeroes + 0x18U))) - ((int)shifted_input >> 0x1f);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    hash = hash & ~(shifted_input >> 0x1f);\n  }\n  return hash;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_08004ae0",
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_array_with_zeros_0800491c",
                "*param_1": "*array",
                "local_13": "buffer1",
                "local_12": "buffer2",
                "local_11": "buffer3"
            },
            "code": "void initialize_array_with_zeros_0800491c(int *array)\n{\n    int i;\n    for(i=0; i<11; i++)\n    {\n        array[i] = 0;\n    }\n    char buffer1 = 0;\n    char buffer2 = 0x10;\n    char buffer3[5] = {8, 0, 0, 0, 0};\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&buffer1,1);\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&buffer2,1);\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,buffer3,1);\n    FUN_080049cc(array);\n}\n",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeros_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "checkIfDataExistsAndPrint_080078a0",
                "DAT_080078ac": "dataExists",
                "FUN_080098c0": "printData"
            },
            "code": "void checkIfDataExistsAndPrint_080078a0() {\n                      if (DAT_080078ac) {\n                        printData();\n                        return;\n                      }\n                      return;\n                    }",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "checkIfDataExistsAndPrint_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_data_and_clear_buffer_080057e8",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_buffer_080057e8(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08005820 + index < PTR_DAT_08005824; index += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + index) = *(undefined4 *)(DAT_0800581c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08005828; data_ptr < PTR_DAT_0800582c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  jump_table = (code *)0x800581a;\n  FUN_08005224();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08005224",
                "FUN_08005780",
                "FUN_08005d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_buffer_080057e8"
        }
    },
    "used_tokens": 196953,
    "layers": [
        [
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_08005348",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08002c2e",
            "FUN_08003568",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_08000978",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_08005598",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_080008fc",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_08005dfc",
            "FUN_080078c0",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_080015fc",
            "FUN_08004436",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_0800438a",
            "FUN_080014f0",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080009c0",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08003518",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08005780",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08000418",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_0800088a",
            "FUN_080016d0",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080036f8",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_080009e8",
            "FUN_08005674",
            "FUN_08009630",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005714",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08001ab0",
            "FUN_08003540",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_08005728",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_0800151c",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c",
            "FUN_080078a0",
            "FUN_080057e8"
        ],
        [
            "FUN_0800071c",
            "FUN_080088ec",
            "FUN_08009adc",
            "FUN_080079e8",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08001f6c",
            "FUN_08002d98",
            "FUN_080059f0",
            "FUN_08000e20",
            "FUN_0800121c",
            "FUN_080004c8",
            "FUN_08000158",
            "FUN_08008af8",
            "FUN_08000cb8",
            "FUN_0800015c"
        ]
    ],
    "locked_functions": []
}