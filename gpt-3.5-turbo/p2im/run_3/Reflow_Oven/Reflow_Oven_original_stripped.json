{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_priority_group_08002470",
                "PriorityGroup": "priority_group",
                "DAT_08002490": "ptr_dat_08002490"
            },
            "code": "void set_priority_group_08002470(uint32_t priority_group){\n    uint32_t* priority_reg = (uint32_t *)(DAT_08002490 + 0xc);\n    uint32_t priority_mask = *(uint *)(DAT_08002490 + 0xc) & 0xf8ff;\n    uint32_t priority_bits = (priority_group & 7) << 8;\n    uint32_t priority_value = priority_bits | priority_mask | 0x5fa0000;\n    *priority_reg = priority_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "imported": false,
            "current_name": "set_priority_group_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "get_file_status_08007004",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "errno_ptr",
                "iVar2": "fstat_error_code"
            },
            "code": "void get_file_status_08007004(int *error_code, int file_descriptor, struct stat *file_status) {\n  int fstat_error_code = 0;\n  int *errno_ptr = PTR_errno_08007024;\n  *errno_ptr = 0;\n  fstat_error_code = _fstat(file_descriptor, file_status);\n  if (fstat_error_code == -1 && *errno_ptr != 0) {\n    *error_code = *errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_080063d6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__080065a4,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_080065b0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_080064b0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080064b0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar8 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_080065b0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_080065b4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "__sfputs_r",
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "reset_I2C_080035fc",
                "hdma": "handle",
                "hi2c": "i2c_handle",
                "PTR_": "",
                "DAT_": "",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORT",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_ErrorCallback": "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback": "HAL_I2C_AbortCpltCallback"
            },
            "code": "void reset_I2C_080035fc(I2C_HandleTypeDef *handle)\n{\n  I2C_HandleTypeDef *i2c_handle;\n  i2c_handle = (I2C_HandleTypeDef *)handle->Parent;\n  i2c_handle->Instance->CR1 &= 0xfffffbff;\n  i2c_handle->XferCount = 0;\n  i2c_handle->hdmatx->XferAbortCallback = NULL;\n  i2c_handle->hdmarx->XferAbortCallback = NULL;\n  if (i2c_handle->State != HAL_I2C_STATE_ABORT)\n  {\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR1 &= 0xfffffffe;\n    HAL_I2C_ErrorCallback(i2c_handle);\n    return;\n  }\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Instance->CR1 &= 0xfffffffe;\n  HAL_I2C_AbortCpltCallback(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [],
            "imported": false,
            "current_name": "reset_I2C_080035fc"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_errno_08005740",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_0800574c": "PTR_errno_0800574c"
            },
            "code": "int set_errno_08005740(int pid_unused, int sig_unused)\n{\n    *(undefined4 *)PTR_errno_0800574c = 0x16;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "convert_param_to_64bit_08006158",
                "param_1": "input_param",
                "param_2": "flag",
                "DAT_08006170": "global_flag"
            },
            "code": "unsigned long long convert_param_to_64bit_08006158(unsigned int input_param, uint32_t flag)\n{\n  if (DAT_08006170 != 0) {\n    return CONCAT44(input_param, 2);\n  }\n  return (unsigned long long)input_param << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "convert_param_to_64bit_08006158"
        },
        "FUN_08006d8c": {
            "renaming": {
                "FUN_08006d8c": "process_data_08006d8c",
                "param_1": "data",
                "param_2": "callback",
                "param_3": "arg1",
                "param_4": "arg2",
                "piVar3": "current_ptr",
                "iVar4": "current_data",
                "iVar6": "current_count",
                "uVar1": "callback_result",
                "uVar5": "result"
            },
            "code": "uint process_data_08006d8c(int data, code *callback, undefined4 arg1, undefined4 arg2)\n{\n  uint result = 0;\n  int *current_ptr;\n  int current_data;\n  int current_count;\n  uint callback_result;\n  for (current_ptr = (int *)(data + 0x48); current_ptr != (int *)0x0; current_ptr = (int *)*current_ptr)\n  {\n    current_data = current_ptr[2];\n    current_count = current_ptr[1];\n    while (current_count > 0)\n    {\n      if ((*(ushort *)(current_data + 0xc) > 1) && ((*(short *)(current_data + 0xe) + 1) != 0))\n      {\n        callback_result = (*callback)(data, current_data, arg1, *(short *)(current_data + 0xe) + 1, arg2);\n        result |= callback_result;\n      }\n      current_data += 0x68;\n      current_count--;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8c",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08006d8c"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "handle_i2c_event_interrupt_08004f2c",
                "PTR_i2c_handles_08004f38": "PTR_i2c_handles",
                "i2c_handle_ptr": "i2c_handle"
            },
            "code": "void handle_i2c_event_interrupt_08004f2c(void)\n{\n  I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38_08004f38 + 4);\n  HAL_I2C_EV_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08004f2c"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nHAL_StatusTypeDef_conflict FUNC_08003688(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  HAL_StatusTypeDef_conflict HVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  bool bVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08003948;\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar5 = RCC_OscInitStruct->HSEState;\n      if (uVar5 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar5 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar5 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_0800394c = 0;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003950 = 0;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar6 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar6) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar5 = RCC_OscInitStruct->LSEState;\n    if (uVar5 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar5 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar5 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[8] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar6) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  uVar5 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar5 == 0) {\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if (uVar5 == 2) {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        DAT_08003a60[1] =\n             DAT_08003a60[1] & 0xffc2ffff |\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLMUL;\n        *DAT_08003a64 = 1;\n        uVar5 = HAL_GetTick();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar5 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "enable_i2c_slave_receive_callback_08004ec4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "remaining_bytes",
                "get_i2c_obj": "get_i2c_object",
                "i2c_onSlaveReceive": "on_slave_receive",
                "slaveMode": "slave_mode",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void enable_i2c_slave_receive_callback_08004ec4(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_t *i2c_obj;\n  uint8_t remaining_bytes;\n  \n  i2c_obj = get_i2c_object(i2c_handle);\n  if (((i2c_obj->on_slave_receive != (_func_void_uint8_t_ptr_int *)0x0) &&\n      (i2c_obj->slave_mode == '\\x01')) &&\n     (remaining_bytes = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff, remaining_bytes != 0)) {\n    (*i2c_obj->on_slave_receive)(i2c_obj->tx_rx_buffer,remaining_bytes);\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "I2C_Slave_AF",
                "I2C_Slave_STOPF",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "enable_i2c_slave_receive_callback_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "string_length_08000178",
                "__s": "str",
                "pcVar3": "current_ptr",
                "pcVar2": "next_ptr",
                "cVar1": "current_char"
            },
            "code": "size_t string_length_08000178(char *str) {\n  char current_char;\n  char *current_ptr = str;\n  while (current_char = *current_ptr) {\n    current_ptr++;\n  }\n  return (size_t)(current_ptr - str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "printNumber",
                "print"
            ],
            "imported": false,
            "current_name": "string_length_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_08006c88",
                "param_1": "size",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "total_size"
            },
            "code": "undefined4* allocate_memory_08006c88(int size, int num_elements)\n{\n  undefined4 *allocated_memory;\n  int total_size = (num_elements - 1) * 0x68;\n  \n  allocated_memory = (undefined4 *)_malloc_r(size, total_size + 0x74);\n  \n  if (allocated_memory != (undefined4 *)0x0) \n  {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    memset(allocated_memory + 3, 0, total_size + 0x68);\n  }\n  \n  return allocated_memory;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "handle_gpio_interrupt_080060e4",
                "GPIO_Pin": "pin_number",
                "bVar1": "pin_id",
                "PTR_gpio_irq_conf_08006100": "irq_config",
                "function_void___": "irq_handler"
            },
            "code": "void handle_gpio_interrupt_080060e4(uint16_t pin_number)\n{\n  uint8_t pin_id = get_pin_id(pin_number);\n  uint32_t *PTR_gpio_irq_conf_08006100 = PTR_gpio_irq_conf_08006100 + (uint)pin_id * 0x14 + 0xc;\n  if (*PTR_gpio_irq_conf_08006100 != 0) {\n    std::function<void()> irq_handler = (function_void___ *)(PTR_gpio_irq_conf_08006100 + (uint)pin_id * 0x14 + 4);\n    irq_handler();\n  }\n  return;\n}",
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "set_dma_state_to_ready_0800258c",
                "hdma": "dma_handle",
                "pDVar2": "dma_channel",
                "uVar1": "channel_offset"
            },
            "code": "HAL_StatusTypeDef set_dma_state_to_ready_0800258c(DMA_HandleTypeDef *dma_handle)\n{\n    HAL_StatusTypeDef status = HAL_OK;\n\n    if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n        dma_handle->ErrorCode = 4;\n        status = HAL_ERROR;\n    }\n\n    dma_handle->Instance->CCR &= ~(1 << 0);\n    dma_handle->Instance->CCR &= ~(1 << 1);\n\n    uint32_t channel_offset = dma_handle->Instance - DAT_0800261c;\n\n    if (channel_offset == 0) {\n        *(uint32_t *)(DAT_08002620 + 4) = 1;\n    }\n    else if (channel_offset == 1) {\n        *(uint32_t *)(DAT_08002620 + 4) = 0x10;\n    }\n    else if (channel_offset == 2) {\n        *(uint32_t *)(DAT_08002620 + 4) = 0x100;\n    }\n    else if (channel_offset == 3) {\n        *(uint32_t *)(DAT_08002620 + 4) = 0x1000;\n    }\n    else if (channel_offset == 5) {\n        *(uint32_t *)(DAT_08002620 + 4) = 0x10000;\n    }\n    else if (channel_offset == 6) {\n        *(uint32_t *)(DAT_08002620 + 4) = 0x100000;\n    }\n    else {\n        *(uint32_t *)(DAT_08002620 + 4) = 0x1000000;\n    }\n\n    dma_handle->State = HAL_DMA_STATE_READY;\n    dma_handle->Lock = HAL_UNLOCKED;\n\n    if (dma_handle->XferAbortCallback != NULL) {\n        (*dma_handle->XferAbortCallback)(dma_handle);\n    }\n\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_dma_state_to_ready_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20",
                "PTR_timer_handles_08004e30": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08004e20(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)PTR_timer_handles_08004e30_08004e30;\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c",
                "status_UNUSED": "unused_status"
            },
            "code": "void infinite_loop_0800573c(int unused_status)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "infinite_loop_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "processI2CData_080032b4",
                "*hi2c": "*i2cHandle",
                "HVar1": "i2cState",
                "pIVar2": "i2cInstance",
                "puVar3": "dataPtr",
                "tmpreg": "tmpReg"
            },
            "code": "HAL_StatusTypeDef_conflict processI2CData_080032b4(I2C_HandleTypeDef *i2cHandle)\n{\n  HAL_I2C_StateTypeDef i2cState;\n  I2C_TypeDef *i2cInstance;\n  uint8_t *dataPtr;\n  uint32_t tmpReg;\n\n  i2cState = i2cHandle->State;\n  i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n  i2cInstance = i2cHandle->Instance;\n  if ((i2cInstance->CR2 & 0x800) != 0) {\n    if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) || (i2cHandle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->XferCount = (uint16_t)i2cHandle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      i2cHandle->XferCount = (uint16_t)i2cHandle->hdmatx->Instance->CNDTR;\n    }\n  }\n  if (i2cHandle->XferCount != 0) {\n    if ((i2cInstance->SR1 & 4) != 0) {\n      dataPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cInstance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    if ((i2cHandle->Instance->SR1 & 0x40) != 0) {\n      dataPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 4;\n  }\n  if (i2cHandle->ErrorCode == 0) {\n    if (((i2cState == HAL_I2C_STATE_LISTEN) || (i2cState == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (i2cState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->XferOptions = DAT_080033b4;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2cHandle);\n    }\n    else if ((i2cHandle->PreviousState == 0x22) || (i2cState == HAL_I2C_STATE_BUSY_RX)) {\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  else {\n    I2C_ITError(i2cHandle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "processI2CData_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "return_non_null_pointer_08004d06",
                "a": "first_pointer",
                "b": "second_pointer"
            },
            "code": "void * return_non_null_pointer_08004d06(void *first_pointer, void *second_pointer) {\n    if (first_pointer != second_pointer) {\n        if (first_pointer == NULL) {\n            return second_pointer;\n        }\n        if (second_pointer == NULL) {\n            return first_pointer;\n        }\n        first_pointer = NULL;\n    }\n    return first_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "return_non_null_pointer_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "incr": "increment",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_080056d8(int increment)\n{\n  caddr_t current_pointer;\n  caddr_t new_pointer;\n  \n  if (*(int *)PTR_heap_end_08005708 == 0) {\n    *(undefined **)PTR_heap_end_08005708 = PTR__ebss_0800570c;\n  }\n  current_pointer = *(caddr_t *)PTR_heap_end_08005708;\n  new_pointer = current_pointer + increment;\n  if (new_pointer <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_08005708 = new_pointer;\n    return current_pointer;\n  }\n  *(undefined4 *)PTR_errno_08005710 = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "calculatePIDOutput_080019f6",
                "this": "pid",
                "myOutput": "output",
                "myInput": "input",
                "outputSum": "outputSum",
                "lastInput": "lastInput",
                "outMin": "outMin",
                "outMax": "outMax",
                "iVar1": "comparisonResult",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "__aeabi_dcmpgt": "compareFloatsGreaterThan",
                "__aeabi_dcmplt": "compareFloatsLessThan"
            },
            "code": "void __thiscall calculatePIDOutput_080019f6(PID *pid) {\n  float output = pid->myOutput;\n  float input = pid->myInput;\n  float outputSum = pid->outputSum;\n  float lastInput = pid->lastInput;\n  float outMin = pid->outMin;\n  float outMax = pid->outMax;\n  outputSum += pid->kp * (input - lastInput) + pid->ki * input;\n  if (outputSum > outMax) {\n    outputSum = outMax;\n  } else if (outputSum < outMin) {\n    outputSum = outMin;\n  }\n  pid->lastInput = input;\n  pid->myOutput = outputSum - pid->kd * (input - lastInput);\n}",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "SetMode"
            ],
            "imported": false,
            "current_name": "calculatePIDOutput_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "handle_i2c_rx_08002f9c",
                "*hi2c": "*i2c_handle",
                "puVar1": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_rx_08002f9c(I2C_HandleTypeDef *i2c_handle)\n{\n    uint8_t *buffer_ptr;\n    \n    if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n        if (i2c_handle->XferCount < 4) {\n            if (i2c_handle->XferCount - 2 < 2) {\n                if (i2c_handle->XferOptions == 2) {\n                    i2c_handle->Instance->CR1 |= 0x400;\n                } else {\n                    i2c_handle->Instance->CR1 &= 0xfffffbff;\n                    i2c_handle->Instance->CR1 |= 0x800;\n                }\n                i2c_handle->Instance->CR2 &= 0xfffffbff;\n            } else {\n                if (i2c_handle->XferOptions == 2) {\n                    i2c_handle->Instance->CR1 |= 0x400;\n                } else {\n                    i2c_handle->Instance->CR1 &= 0xfffffbff;\n                }\n                i2c_handle->Instance->CR2 &= 0xfffff8ff;\n                buffer_ptr = i2c_handle->pBuffPtr;\n                i2c_handle->pBuffPtr = buffer_ptr + 1;\n                *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n                i2c_handle->XferCount--;\n                i2c_handle->State = HAL_I2C_STATE_READY;\n                i2c_handle->PreviousState = 0;\n                if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n                    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MemRxCpltCallback(i2c_handle);\n                } else {\n                    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MasterRxCpltCallback(i2c_handle);\n                }\n            }\n        } else {\n            buffer_ptr = i2c_handle->pBuffPtr;\n            i2c_handle->pBuffPtr = buffer_ptr + 1;\n            *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n            i2c_handle->XferCount--;\n        }\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_rx_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "receive_data_08005510",
                "obj": "serial_obj",
                "callback": "callback_func",
                "uVar2": "rx_active",
                "bVar1": "serial_index"
            },
            "code": "void receive_data_08005510(serial_t *serial_obj, _func_void_serial_t_ptr *callback_func) {\n  byte serial_index;\n  uint8_t rx_active;\n  \n  if (serial_obj != NULL) {\n    rx_active = serial_rx_active(serial_obj);\n    if (rx_active == 0) {\n      serial_index = serial_obj->index;\n      *(_func_void_serial_t_ptr **)(PTR_rx_callback_0800555c + (uint)serial_index * 4) = callback_func;\n      *(serial_t **)(PTR_rx_callback_obj_08005560 + (uint)serial_index * 4) = serial_obj;\n      HAL_NVIC_SetPriority(serial_obj->irq, 0, 1);\n      HAL_NVIC_EnableIRQ(serial_obj->irq);\n      HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_08005564 + (uint)serial_obj->index * 4), &serial_obj->recv, 1);\n    }\n  }\n}",
            "called": [
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "receive_data_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_process_id_08005750"
            },
            "code": "__pid_t get_process_id_08005750(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "I2C_handleAddressMatch_08002cf2",
                "*hi2c": "*i2c_handle",
                "hi2c": "i2c_handle",
                "AddrMatchCode": "address_match_code",
                "OwnAddress1": "own_address_1",
                "OwnAddress2": "own_address_2"
            },
            "code": "HAL_StatusTypeDef I2C_handleAddressMatch_08002cf2(I2C_HandleTypeDef *i2c_handle)\n{\n    uint16_t address_match_code;\n    if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n        address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n    }\n    else {\n        address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n    }\n    HAL_I2C_AddrCallback(i2c_handle, (i2c_handle->Instance->SR2 & 4) == 0, address_match_code);\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "I2C_handleAddressMatch_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "out_param",
                "param_2": "size",
                "puVar1": "start_ptr",
                "uVar2": "new_brk",
                "puVar3": "free_list_ptr",
                "iVar4": "padding_size",
                "puVar5": "free_block_ptr",
                "uVar6": "remaining_space",
                "puVar7": "prev_free_block_ptr",
                "uVar8": "adjusted_size"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *out_param, uint size) {\n  uint adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *out_param = 0xc;\n  }\n  else {\n    __malloc_lock();\n    void *start_ptr = PTR___malloc_sbrk_start_08006340;\n    uint **free_list_ptr = *(uint ***)PTR___malloc_free_list_0800633c;\n    uint *prev_free_block_ptr = *(uint **)PTR___malloc_free_list_0800633c;\n    while (uint *free_block_ptr = free_list_ptr, free_block_ptr != (uint *)0x0) {\n      uint remaining_space = *free_block_ptr - adjusted_size;\n      if (-1 < (int)remaining_space) {\n        if (remaining_space < 0xc) {\n          if (prev_free_block_ptr == free_block_ptr) {\n            uint next_block_size = prev_free_block_ptr[1];\n            *(uint *)PTR___malloc_free_list_0800633c = next_block_size;\n          }\n          else {\n            uint next_block_size = free_block_ptr[1];\n          }\n          if (prev_free_block_ptr != free_block_ptr) {\n            prev_free_block_ptr[1] = next_block_size;\n            prev_free_block_ptr = free_block_ptr;\n          }\n        }\n        else {\n          *free_block_ptr = remaining_space;\n          *(uint *)((int)free_block_ptr + remaining_space) = adjusted_size;\n          prev_free_block_ptr = (uint *)((int)free_block_ptr + remaining_space);\n        }\n        goto end_of_allocation;\n      }\n      prev_free_block_ptr = free_block_ptr;\n      free_list_ptr = (uint **)free_block_ptr[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_08006340 == 0) {\n      void *new_brk = _sbrk_r(out_param);\n      *(void **)start_ptr = new_brk;\n    }\n    uint *new_block_ptr = (uint *)_sbrk_r(out_param, adjusted_size);\n    if ((new_block_ptr != (uint *)0xffffffff) &&\n       ((prev_free_block_ptr = (uint *)((int)new_block_ptr + 3U & 0xfffffffc), new_block_ptr == prev_free_block_ptr ||\n        (_sbrk_r(out_param,(int)prev_free_block_ptr - (int)new_block_ptr) != -1)))) {\n      *prev_free_block_ptr = adjusted_size;\nend_of_allocation:\n      __malloc_unlock(out_param);\n      uint block_end = (int)prev_free_block_ptr + 0xbU & 0xfffffff8;\n      int padding_size = block_end - (int)(prev_free_block_ptr + 1);\n      if (padding_size != 0) {\n        *(int *)((int)prev_free_block_ptr + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out_param = 0xc;\n    __malloc_unlock(out_param);\n  }\n  return 0;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "FUNC_08000188"
            },
            "code": "\nulonglong FUNC_08000188(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000188"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "enable_ADC_08002004",
                "*hadc": "*adc",
                "HVar1": "status",
                "pAVar2": "instance"
            },
            "code": "HAL_StatusTypeDef_conflict enable_ADC_08002004(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *instance;\n  if (adc->Lock != HAL_LOCKED) {\n    adc->Lock = HAL_LOCKED;\n    status = ADC_Enable(adc);\n    if (status == HAL_OK) {\n      adc->State = (adc->State & 0xfffffcfe) | 0x100;\n      instance = adc->Instance;\n      if ((instance == PTR_DAT_080020e8) && ((PTR_DAT_080020e8[-0xd].JOFR1 & 0xf0000) != 0)) {\n        adc->State |= 0x100000;\n        if ((*(uint *)(PTR_DAT_080020ec + 4) & 0x400) != 0) {\n          adc->State = (adc->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        adc->State &= 0xffefffff;\n        if ((instance->CR1 & 0x400) != 0) {\n          adc->State = (adc->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((adc->State & 0x1000) == 0) {\n        adc->ErrorCode = 0;\n      }\n      else {\n        adc->ErrorCode &= 0xfffffff9;\n      }\n      adc->Lock = HAL_UNLOCKED;\n      instance->SR = 0xfffffffd;\n      instance = adc->Instance;\n      if (((instance->CR2 & 0xe0000) == 0xe0000) && ((instance != PTR_DAT_080020e8 || ((PTR_DAT_080020e8[-0xd].JOFR1 & 0xf0000) == 0)))) {\n        instance->CR2 |= 0x500000;\n      }\n      else {\n        instance->CR2 |= 0x100000;\n      }\n    }\n    else {\n      adc->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "ADC_Enable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "enable_ADC_08002004"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "handle_i2c_errors_08004f3c",
                "PTR_i2c_handles_08004f48": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_errors_08004f3c(I2C_HandleTypeDef* i2c_handle)\n{\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_errors_08004f3c"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "read_adc_value_08005754",
                "ulPin": "pin_number",
                "bVar1": "is_valid_pin",
                "pin": "pin_name",
                "uVar2": "adc_value",
                "uVar3": "adc_value_converted",
                "uVar4": "resolution_bits"
            },
            "code": "uint32_t read_adc_value_08005754(uint32_t pin_number) {\n  bool is_valid_pin = false;\n  PinName_conflict pin_name;\n  uint16_t adc_value;\n  uint resolution_bits = *(uint*)PTR__readResolution_080057b0;\n\n  if (pin_number < 0xE) {\n    is_valid_pin = (pin_number + 0x2E) < 0x3C;\n  } else {\n    is_valid_pin = pin_number < 0x3C;\n  }\n\n  if (is_valid_pin) {\n    if (pin_number < 0xE) {\n      pin_number += 0x2E;\n    }\n    pin_name = PTR_digitalPin_080057ac[pin_number];\n  } else {\n    pin_name = NC;\n  }\n\n  if (pin_name == NC) {\n    adc_value = 0;\n  } else {\n    adc_value = adc_read_value(pin_name);\n    if (resolution_bits != 0xC) {\n      if (resolution_bits < 0xC) {\n        adc_value >>= (0xC - resolution_bits) & 0xFF;\n      } else {\n        adc_value <<= (resolution_bits - 0xC) & 0xFF;\n      }\n    }\n  }\n\n  return (uint32_t)adc_value;\n}",
            "called": [
                "adc_read_value"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_adc_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_gpio_irq_configuration_08005fc8",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "puVar1": "gpio_irq_conf_ptr"
            },
            "code": "void initialize_gpio_irq_configuration_08005fc8(int should_initialize, int priority) {\n  undefined *gpio_irq_conf_ptr = PTR_gpio_irq_conf_08006068;\n  \n  if (should_initialize != 1) {\n    return;\n  }\n  \n  if (priority == 0xffff) {\n    *gpio_irq_conf_ptr = 6;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xc) = 0;\n    gpio_irq_conf_ptr[0x14] = 7;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x20) = 0;\n    gpio_irq_conf_ptr[0x28] = 8;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x34) = 0;\n    gpio_irq_conf_ptr[0x3c] = 9;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x48) = 0;\n    gpio_irq_conf_ptr[0x50] = 10;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x5c) = 0;\n    gpio_irq_conf_ptr[100] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x70) = 0;\n    gpio_irq_conf_ptr[0x78] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x84) = 0;\n    gpio_irq_conf_ptr[0x8c] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x98) = 0;\n    gpio_irq_conf_ptr[0xa0] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xac) = 0;\n    gpio_irq_conf_ptr[0xb4] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xc0) = 0;\n    gpio_irq_conf_ptr[200] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xd4) = 0;\n    gpio_irq_conf_ptr[0xdc] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xe8) = 0;\n    gpio_irq_conf_ptr[0xf0] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xfc) = 0;\n    gpio_irq_conf_ptr[0x104] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x110) = 0;\n    gpio_irq_conf_ptr[0x118] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x124) = 0;\n    gpio_irq_conf_ptr[300] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x138) = 0;\n    __aeabi_atexit(0,DAT_08006070,PTR___dso_handle_0800606c);\n  }\n  return;\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_configuration_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "transferData_08002ab8",
                "*hi2c": "*i2c_handle",
                "pbVar1": "buffer_pointer",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "(uint)*pbVar1": "(uint)*buffer_pointer",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef transferData_08002ab8(I2C_HandleTypeDef *i2c_handle) {\n  byte *buffer_pointer;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    i2c_handle->Instance->DR = (uint)*buffer_pointer;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transferData_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "print_formatted_output_080068f0",
                "__format": "format",
                "iVar1": "impure_ptr",
                "pcVar2": "format_string",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "uStack_c": "unnamed_variable_1",
                "uStack_8": "unnamed_variable_2",
                "uStack_4": "unnamed_variable_3"
            },
            "code": "int print_formatted_output_080068f0(char* format, ...) {\n  \n  int impure_ptr = *(int *)PTR__impure_ptr_0800691c;\n  char *format_string = format;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  int output_length = _vfprint_r(impure_ptr,*(undefined4 *)(impure_ptr + 8),format,&uStack_c,format_string,&uStack_c);\n  return output_length;\n}",
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "print_formatted_output_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08006700;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08006774;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar6 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08006856:\n    *puVar3 = uVar7;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_control_bit_0800138e",
                "this": "lcd",
                "bVar1": "current_control_bits"
            },
            "code": "void __thiscall set_control_bit_0800138e(LiquidCrystal *lcd)\n{\n  byte current_control_bits = lcd->_control_bits;\n  lcd->_control_bits = current_control_bits | 0x04;\n  send(lcd, current_control_bits | 0x0C, '\\0');\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_control_bit_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "HardwareSerial::FUN_0800598a": "receive_serial_data",
                "*obj": "serial_object",
                "iVar1": "receive_status",
                "uVar2": "next_rx_head",
                "c": "received_char",
                "obj->rx_head": "serial_object->rx_head",
                "obj->rx_tail": "serial_object->rx_tail",
                "obj->rx_buff": "serial_object->rx_buff",
                "FUN_0800598a": "receive_serial_data_0800598a"
            },
            "code": "void receive_serial_data_0800598a(serial_t_conflict *serial_object){\n  int receive_status;\n  ushort next_rx_head;\n  uchar received_char;\n  \n  receive_status = uart_getc((serial_t *)serial_object,&received_char);\n  if ((receive_status == 0) && (next_rx_head = serial_object->rx_head + 1 & 0x3f, next_rx_head != serial_object->rx_tail)) {\n    serial_object->rx_buff[serial_object->rx_head] = received_char;\n    serial_object->rx_head = next_rx_head;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "receive_serial_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_up_system_08001c88",
                "DAT_08001ca8": "data_register",
                "FUN_08001c88Tick": "set_up_system_tick"
            },
            "code": "HAL_StatusTypeDef_conflict set_up_system_08001c88(void)\n{\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  set_up_system_08001c88_tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "set_up_system_08001c88"
        },
        "FUN_08004e34": {
            "renaming": {
                "FUN_08004e34": "handle_timer_interrupt_08004e34",
                "PTR_timer_handles_08004e44": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e34(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e44_08004e44 + 4);\n    if (timer_handle != NULL)\n    {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e34",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e34"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "setAutoMode_08001a44",
                "Mode": "mode",
                "bVar1": "isAuto",
                "this->inAuto": "this->inAuto",
                "Initialize": "initialize"
            },
            "code": "void __thiscall PID::setAutoMode_08001a44(PID *this, int mode) {\n  bool isAuto = false;\n  if (mode == 1) {\n    isAuto = true;\n    if (!this->inAuto) {\n      initialize(this);\n    }\n  }\n  this->inAuto = isAuto;\n  return;\n}",
            "called": [
                "Initialize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "setAutoMode_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "transfer_byte_08002c54",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "pbVar2": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef_conflict transfer_byte_08002c54(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef current_state;\n  uint8_t *buffer_pointer;\n  \n  current_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    i2c_handle->Instance->DR = (uint32_t)*buffer_pointer;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (current_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_flag_status_080043b4",
                "*huart": "*uart_handle",
                "huart": "uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "tickstart",
                "Timeout": "timeout",
                "uVar1": "current_tick",
                "SR": "SR",
                "CR1": "CR1",
                "CR3": "CR3",
                "gState": "gState",
                "RxState": "RxState",
                "Lock": "Lock",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef check_flag_status_080043b4(UART_HandleTypeDef *uart_handle, uint32_t flag, FlagStatus status, uint32_t tickstart, uint32_t timeout)\n{\n  uint32_t current_tick;\n  do {\n    bool flag_status = ((flag & ~uart_handle->Instance->SR) == 0);\n    if (flag_status != (bool)status) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0) && ((current_tick = HAL_GetTick()), (current_tick - tickstart) <= timeout)));\n  uart_handle->Instance->CR1 &= 0xfffffe5f;\n  uart_handle->Instance->CR3 &= 0xfffffffe;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_flag_status_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "*huart": "*uart_handle",
                "huart": "uart_handle",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "gState": "gpio_state",
                "Lock": "lock",
                "Instance": "instance",
                "ErrorCode": "error_code",
                "RxState": "rx_state",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800441a(UART_HandleTypeDef *uart_handle)\n{\n    if (uart_handle != NULL) {\n        if (uart_handle->gState == HAL_UART_STATE_RESET) {\n            uart_handle->Lock = HAL_UNLOCKED;\n            HAL_UART_MspInit(uart_handle);\n        }\n        uart_handle->gState = HAL_UART_STATE_BUSY;\n        uart_handle->Instance->CR1 &= ~(1 << 13);\n        UART_SetConfig(uart_handle);\n        uart_handle->Instance->CR2 &= ~(1 << 11);\n        uart_handle->Instance->CR3 &= ~(1 << 2);\n        uart_handle->Instance->CR1 |= (1 << 13);\n        uart_handle->ErrorCode = 0;\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->RxState = HAL_UART_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "call_RTC_user_callback_08004d18",
                "hrtc": "rtc_handler",
                "PTR_RTCUserCallback_08004d28": "user_callback_ptr",
                "PTR_callbackUserData_08004d2c": "callback_user_data_ptr",
                "code": "callback_function"
            },
            "code": "void call_RTC_user_callback_08004d18(RTC_HandleTypeDef *rtc_handler) {\n  code* user_callback = *(code **)PTR_RTCUserCallback_08004d28;\n  if (user_callback != (code *)0x0) {\n    (*user_callback)(*(undefined4 *)PTR_callbackUserData_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "call_RTC_user_callback_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_result_080006d4",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "temp_var1",
                "unaff_r4": "temp_var2",
                "uVar2": "temp_var3",
                "uVar3": "temp_var4",
                "in_r12": "mask",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_080006d4(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n  uint mask = 0x3ffc0000;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  bool is_zero;\n  \n  temp_var1 = fourth_param >> 0x14;\n  if (second_param != third_param && temp_var1 != third_param) {\n    is_zero = (first_param | (second_param << 1)) == 0;\n    if (!is_zero) {\n      is_zero = (third_param | (fourth_param << 1)) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((second_param ^ fourth_param) & mask) << 0x20;\n    }\n    if (second_param == 0) {\n      temp_var2 = third_param & mask;\n      do {\n        temp_var3 = first_param & mask;\n        first_param = first_param << 1;\n        second_param = second_param * 2 + (uint)(temp_var3 != 0);\n      } while ((second_param & 0x100000) == 0);\n      second_param = second_param | temp_var2;\n      if (temp_var1 != 0) {\n        return CONCAT44(second_param,first_param);\n      }\n    }\n    do {\n      temp_var1 = third_param & mask;\n      third_param = third_param << 1;\n      fourth_param = fourth_param * 2 + (uint)(temp_var1 != 0);\n    } while ((fourth_param & 0x100000) == 0);\n    return CONCAT44(second_param,first_param);\n  }\n  is_zero = (first_param | (second_param << 1)) == 0;\n  if (is_zero) {\n    second_param = fourth_param;\n    first_param = third_param;\n  }\n  if (!is_zero) {\n    is_zero = (third_param | (fourth_param << 1)) == 0;\n  }\n  temp_var2 = second_param;\n  if (((!is_zero) && ((second_param != third_param || ((first_param | (second_param << 0xc)) == 0)))) && ((temp_var1 != third_param || (first_param = fourth_param, temp_var2 = third_param, (third_param | (fourth_param << 0xc)) == 0)))) {\n    return (ulonglong)((second_param ^ fourth_param) & mask | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_var2,first_param) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "SetControllerDirection",
                "Compute",
                "printFloat",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "format_output_08006174",
                "__stream": "__stream",
                "__format": "__format",
                "iVar1": "output_length",
                "in_r2": "in_register_arg_1",
                "in_r3": "in_register_arg_2",
                "uStack_8": "stack_arg_1",
                "uStack_4": "stack_arg_2",
                "_vFUN_08006174_r": "_vformat_output_r",
                "PTR__impure_ptr_08006194": "PTR__impure_ptr_08006194"
            },
            "code": "int format_output_08006174(FILE *__stream, char *__format, ...)\n{\n  int output_length;\n  undefined4 in_r2;\n  undefined4 in_r3;\n  undefined4 stack_arg_1;\n  undefined4 stack_arg_2;\n  \n  stack_arg_1 = in_r2;\n  stack_arg_2 = in_r3;\n  output_length = _vformat_output_08006174_r(*(undefined4 *)PTR__impure_ptr_08006194, __stream, __format, &stack_arg_1, __stream, &stack_arg_2);\n  return output_length;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "format_output_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "check_isatty_and_set_errno_08007028",
                "param_1": "output_err",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "isatty_result"
            },
            "code": "void check_isatty_and_set_errno_08007028(int *output_err, int file_descriptor) {\n  undefined *errno_ptr;\n  int isatty_result;\n  errno_ptr = PTR_errno_08007044;\n  *(undefined4 *)PTR_errno_08007044 = 0;\n  isatty_result = _isatty(file_descriptor);\n  if ((isatty_result == -1) && (*(int *)errno_ptr != 0)) {\n    *output_err = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_isatty_and_set_errno_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "__aeabi_drsub",
                "Compute",
                "printFloat",
                "readThermocouple",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_interrupt_priority_08002494",
                "IRQn": "interrupt",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "interrupt_num",
                "uVar2": "group_priority_bits",
                "uVar3": "group_priority"
            },
            "code": "void set_interrupt_priority_08002494(IRQn_Type_conflict interrupt, uint32_t preempt_priority, uint32_t sub_priority)\n{\n  uint32_t interrupt_num = (uint32_t)interrupt;\n  uint32_t group_priority_bits = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint32_t group_priority = 7 - group_priority_bits;\n  \n  if (group_priority > 3) {\n    group_priority = 4;\n  }\n  \n  if (group_priority_bits + 4 < 7) {\n    group_priority_bits = 0;\n  }\n  else {\n    group_priority_bits = group_priority_bits - 3;\n  }\n  \n  uint32_t priority_bits = (preempt_priority & ((1 << (group_priority & 0xff)) - 1U)) << (group_priority_bits & 0xff) |\n          ((1 << (group_priority_bits & 0xff)) - 1U) & sub_priority;\n  \n  if ((int)interrupt_num < 0) {\n    *(char *)(DAT_080024f4 + (interrupt_num & 0xf)) = (char)(priority_bits << 4);\n  }\n  else {\n    *(char *)(interrupt_num + 0xe000e400) = (char)(priority_bits << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "SystemClock_Config",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar4;\n  GPIO_TypeDef *pGVar5;\n  uint32_t uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c);\n    }\n    else {\n      pUVar4 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar4;\n      pUVar3 = DAT_08005214;\n      pUVar2 = DAT_08005210;\n      pUVar1 = DAT_0800520c;\n      if (pUVar4 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (pUVar4 == DAT_0800520c) {\n          DAT_0800520c[0x7b7].BRR = DAT_0800520c[0x7b7].BRR | 0x4000;\n          pUVar1[0x7b7].BRR = pUVar1[0x7b7].BRR & 0xffffbfff;\n          pUVar1[0x7b7].CR3 = pUVar1[0x7b7].CR3 | 0x4000;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar4 == DAT_08005210) {\n          DAT_08005210[0x106e].BRR = DAT_08005210[0x106e].BRR | 0x20000;\n          pUVar2[0x106e].BRR = pUVar2[0x106e].BRR & 0xfffdffff;\n          pUVar2[0x106e].CR3 = pUVar2[0x106e].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar4 == DAT_08005214) {\n          DAT_08005214[0x1049].CR3 = DAT_08005214[0x1049].CR3 | 0x40000;\n          pUVar3[0x1049].CR3 = pUVar3[0x1049].CR3 & 0xfffbffff;\n          pUVar3[0x104a].DR = pUVar3[0x104a].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08005228 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_peripheral",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "HAL_UART_Init"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "get_uart_handler_index_080055bc",
                "huart": "uart_handler",
                "uVar1": "index",
                "PTR_uart_handlers_080055dc": "handlers"
            },
            "code": "uint8_t get_uart_handler_index_080055bc(UART_HandleTypeDef *uart_handler) {\n    uint8_t index = 0;\n\n    if (uart_handler == NULL) {\n        index = 5;\n    }\n    else {\n        while (index < 5) {\n            if (uart_handler == PTR_uart_handlers_080055dc[index]) {\n                break;\n            }\n            index++;\n        }\n    }\n\n    return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "get_uart_handler_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "limit_output_08001960",
                "this": "pid",
                "Min": "lower_limit",
                "Max": "upper_limit",
                "iVar1": "is_lower_limit_greater_than_upper_limit",
                "pdVar2": "output",
                "uVar3": "output_sum_1",
                "uVar4": "output_sum_2",
                "uVar5": "output_max_1",
                "uVar6": "output_max_2",
                "outMin": "output_min",
                "outMax": "output_max"
            },
            "code": "void limit_output_08001960(PID *pid, double lower_limit, double upper_limit) {\n  int is_lower_limit_greater_than_upper_limit;\n  double *output = pid->myOutput;\n  double *output_sum = &pid->outputSum;\n  double *output_min = &pid->outMin;\n  double *output_max = &pid->outMax;\n  \n  is_lower_limit_greater_than_upper_limit = (lower_limit >= upper_limit);\n  \n  if (is_lower_limit_greater_than_upper_limit == 0) {\n    *output_min = lower_limit;\n    *output_max = upper_limit;\n    \n    if (pid->inAuto != false) {\n      if (*output < lower_limit) {\n        *output = lower_limit;\n      } else if (*output > upper_limit) {\n        *output = upper_limit;\n      }\n      \n      if (*output_sum > *output_max) {\n        *output_sum = *output_max;\n      }\n      if (*output_sum < *output_min) {\n        *output_sum = *output_min;\n      }\n    }\n  }\n}",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "limit_output_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "find_pin_for_peripheral_08004ca2",
                "PVar1": "pinName"
            },
            "code": "PinName_conflict find_pin_for_peripheral_08004ca2(void *peripheral, PinMap_conflict *map) {\n  PinName_conflict pinName;\n  if (peripheral != NULL) {\n    pinName = pinmap_find_pin(peripheral, map);\n    return pinName;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "find_pin_for_peripheral_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "get_GPIO_PinState_08002810",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "GPIO_PIN_RESET": "GPIO_PIN_STATE_RESET",
                "GPIO_PIN_SET": "GPIO_PIN_STATE_SET"
            },
            "code": "GPIO_PinState get_GPIO_PinState_08002810(GPIO_TypeDef *gpio, uint16_t pin) {\n  if ((pin & gpio->IDR) == 0) {\n    return GPIO_PIN_RESET;\n  }\n  return GPIO_PIN_SET;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "digital_io_read"
            ],
            "imported": false,
            "current_name": "get_GPIO_PinState_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "stop_and_reset_ADC_0800224c",
                "*hadc": "*hadc",
                "HVar1": "status",
                "ADC_CR1_RESET_VALUE": "0x00000000",
                "ADC_CR2_RESET_VALUE": "0x00000000"
            },
            "code": "HAL_StatusTypeDef_conflict stop_and_reset_ADC_0800224c(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (hadc == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    hadc->State |= 2;\n    status = ADC_ConversionStop_Disable(hadc);\n    if (status == HAL_OK) {\n      hadc->Instance->SR = 0xffffffe0;\n      hadc->Instance->CR1 = ADC_CR1_RESET_VALUE & hadc->Instance->CR1;\n      hadc->Instance->CR2 = ADC_CR2_RESET_VALUE & hadc->Instance->CR2;\n      hadc->Instance->SMPR1 &= 0xff000000;\n      hadc->Instance->SMPR2 &= 0xc0000000;\n      hadc->Instance->JOFR1 &= 0xfffff000;\n      hadc->Instance->JOFR2 &= 0xfffff000;\n      hadc->Instance->JOFR3 &= 0xfffff000;\n      hadc->Instance->JOFR4 &= 0xfffff000;\n      hadc->Instance->HTR &= 0xfffff000;\n      hadc->Instance->LTR &= 0xfffff000;\n      hadc->Instance->SQR1 &= 0xff000000;\n      hadc->Instance->SQR2 &= 0xc0000000;\n      hadc->Instance->SQR3 &= 0xc0000000;\n      hadc->Instance->JSQR &= 0xffc00000;\n      HAL_ADC_MspDeInit(hadc);\n      hadc->ErrorCode = 0;\n      hadc->State = 0;\n    }\n    hadc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_and_reset_ADC_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_uart_transmit_complete_080054b0",
                "obj": "serial",
                "HVar1": "uart_state"
            },
            "code": "bool is_uart_transmit_complete_080054b0(serial_t *serial) {\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(*(UART_HandleTypeDef **)(PTR_uart_handlers_080054d0 + (uint)serial->index * 4));\n  return (uart_state & 0x21U) == 0x21;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "execute_signal_handler_08006f00",
                "__sig": "signal_number",
                "iVar1": "return_value",
                "_FUN_08006f00_r": "_execute_signal_handler_r"
            },
            "code": "int execute_signal_handler_08006f00(int signal_number)\n{\n  int return_value;\n  return_value = _execute_signal_handler_08006f00_r(*(undefined4 *)PTR__impure_ptr_08006f0c, signal_number);\n  return return_value;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "execute_signal_handler_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "__thiscall PID::FUN_080016b4": "calculatePID",
                "this": "pid",
                "bVar1": "inAuto",
                "uVar2": "currentTime",
                "iVar3": "comparisonResult",
                "uVar4": "error1",
                "uVar5": "input1",
                "uVar6": "output1",
                "uVar7": "outMin1",
                "uVar8": "input2",
                "uVar9": "output2",
                "uVar10": "outMin2",
                "uVar12": "outMax1",
                "uVar13": "outMax2",
                "uVar14": "error2",
                "uVar15": "error3",
                "uVar16": "inputDiff",
                "uVar17": "outputDiff",
                "cVar11": "inAuto1",
                "dVar18": "output",
                "dVar19": "outputDiffDouble",
                "local_38": "outputDiffLow",
                "uStack_34": "outputDiffHigh",
                "FUN_080016b4": "calculatePID_080016b4"
            },
            "code": "bool __thiscall calculatePID_080016b4(PID *pid)\n{\n    bool inAuto = pid->inAuto;\n    if (inAuto) {\n        uint32_t currentTime = millis();\n        if (currentTime - pid->lastTime >= pid->SampleTime) {\n            double input = *(double *)pid->myInput;\n            double setpoint = *(double *)pid->mySetpoint;\n            double error = setpoint - input;\n            double dInput = input - pid->lastInput;\n            double output = 0;\n            output += pid->kp * error;\n            output += pid->ki * pid->outputSum;\n            output -= pid->kd * dInput;\n            if (output > pid->outMax) {\n                output = pid->outMax;\n            }\n            else if (output < pid->outMin) {\n                output = pid->outMin;\n            }\n            *(double *)pid->myOutput = output;\n            pid->lastInput = input;\n            pid->lastTime = currentTime;\n            pid->outputSum += error;\n            if (pid->outputSum > pid->outMax) {\n                pid->outputSum = pid->outMax;\n            }\n            else if (pid->outputSum < pid->outMin) {\n                pid->outputSum = pid->outMin;\n            }\n        }\n        else {\n            inAuto = false;\n        }\n    }\n    return inAuto;\n}\n",
            "called": [
                "__aeabi_dadd",
                "millis",
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080016b4"
        },
        "FUN_08004e48": {
            "renaming": {
                "FUN_08004e48": "handle_timer_interrupt_08004e48",
                "PTR_timer_handles_08004e58": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TIM_handle",
                "HAL_TIM_IRQHandler": "handle_TIM_interrupt"
            },
            "code": "void handle_timer_interrupt_08004e48(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e58_08004e58 + 8);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e48",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e48"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "PID::FUN_080018f8": "calculatePID",
                "this": "pid",
                "Kp": "proportionalGain",
                "Ki": "integralGain",
                "Kd": "derivativeGain",
                "in_stack_ffffffec": "pOnValue",
                "this->pOn": "pid->pOn",
                "FUN_080018f8": "calculatePID_080018f8"
            },
            "code": "void calculatePID_080018f8(PID *pid, double proportionalGain, double integralGain, double derivativeGain) {\n    double pOnValue = (double)(pid->inAuto ? pid->pOn : 0);\n    calculatePID_080018f8(pid, proportionalGain, integralGain, derivativeGain, pOnValue);\n}",
            "called": [
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "read_digital_pin_08005890",
                "ulPin": "pin_number",
                "_Var1": "pin_configured",
                "port": "port",
                "uVar2": "digital_pin_mask",
                "uVar3": "digital_pin_number",
                "PTR_digitalPin_080058d8": "digitalPinArray",
                "0x3c": "max_pin_number",
                "0xffffffff": "invalid_pin",
                "is_pin_configured": "is_pin_configured",
                "PinName_conflict": "PinName",
                "PTR_g_digPinConfigured_080058dc": "configured_digital_pins",
                "get_GPIO_Port": "get_GPIO_Port",
                "digital_io_read": "digital_io_read"
            },
            "code": "int read_digital_pin_08005890(uint32_t pin_number)\n{\n  bool pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t digital_pin_number;\n  uint digital_pin_mask;\n  uint8_t digital_pin_value;\n  \n  if (pin_number < 0x3c) {\n    digital_pin_number = (uint32_t)(char)PTR_digitalPin_080058d8[pin_number];\n  }\n  else {\n    digital_pin_number = 0xffffffff;\n  }\n  \n  if (digital_pin_number == 0xffffffff) {\n    digital_pin_value = 0;\n  }\n  else {\n    pin_configured = is_pin_configured((PinName_conflict)digital_pin_number, (uint32_t *)PTR_g_digPinConfigured_080058dc);\n    if (pin_configured) {\n      port = get_GPIO_Port((digital_pin_number << 0x18) >> 0x1c);\n      digital_pin_mask = 1 << (digital_pin_number & 0xf) & 0xffff;\n      digital_pin_value = digital_io_read(port, digital_pin_mask) & 0xff;\n    }\n    else {\n      digital_pin_value = 0;\n    }\n  }\n  \n  if (digital_pin_value != 0) {\n    digital_pin_value = 1;\n  }\n  \n  return digital_pin_value;\n}",
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "readData",
                "loop"
            ],
            "imported": false,
            "current_name": "read_digital_pin_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "print_08005da0",
                "this": "self",
                "b": "character",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall Print::print_08005da0(Print *this, uchar character, int base) {\n  size_t result;\n  result = print_08005da0(this, (uint)character, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_function_from_pin_08004cb2",
                "pin": "target_pin",
                "map": "pin_map",
                "NC": "0xffffffff",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "uint32_t find_function_from_pin_08004cb2(PinName_conflict target_pin,PinMap_conflict *pin_map) {\n  while(true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map = pin_map + 1;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_function_from_pin_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "enable_i2c_listen_mode_08004ef4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_mode_08004ef4(I2C_HandleTypeDef *i2c_handle)\\n{\\n  i2c_t *i2c_obj;\\n  i2c_obj = get_i2c_object(i2c_handle);\\n  if (i2c_obj->is_master == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_mode_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_08001294": "set_row_offsets",
                "this": "lcd",
                "row0": "first_row_offset",
                "row1": "second_row_offset",
                "row2": "third_row_offset",
                "row3": "fourth_row_offset",
                "_row_offsets": "row_offsets",
                "uint8_t": "unsigned char",
                "FUN_08001294": "set_row_offsets_08001294"
            },
            "code": "void set_row_offsets_08001294(LiquidCrystal *lcd, int first_row_offset, int second_row_offset, int third_row_offset, int fourth_row_offset) {\n  lcd->row_offsets[0] = (uint8_t)first_row_offset;\n  lcd->row_offsets[1] = (uint8_t)second_row_offset;\n  lcd->row_offsets[2] = (uint8_t)third_row_offset;\n  lcd->row_offsets[3] = (uint8_t)fourth_row_offset;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_row_offsets_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "performADCConversion_08002384",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "systemClockFrequency",
                "uVar3": "currentTime",
                "pAVar4": "adcInstance",
                "uVar5": "peripheralClockFrequency",
                "wait_loop_index": "waitLoopIndex"
            },
            "code": "HAL_StatusTypeDef_conflict performADCConversion_08002384(ADC_HandleTypeDef *adcHandle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t systemClockFrequency, peripheralClockFrequency, waitLoopIndex;\n  ADC_TypeDef *adcInstance;\n  uint32_t startTime, currentTime;\n  \n  if (adcHandle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adcHandle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adcHandle);\n  if (status == HAL_OK) {\n    adcHandle->State = adcHandle->State & 0xffffeefd | 2;\n    systemClockFrequency = *(uint *)PTR_SystemCoreClock_0800246c;\n    peripheralClockFrequency = HAL_RCCEx_GetPeriphCLKFreq(2);\n    waitLoopIndex = systemClockFrequency / peripheralClockFrequency << 1;\n    while (waitLoopIndex != 0) {\n        waitLoopIndex = waitLoopIndex - 1;\n    }\n    ADC_Enable(adcHandle);\n    adcInstance = adcHandle->Instance;\n    adcInstance->CR2 = adcInstance->CR2 | 8;\n    startTime = HAL_GetTick();\n    while ((adcInstance->CR2 & 8) != 0) {\n      currentTime = HAL_GetTick();\n      if (10 < currentTime - startTime) {\n        adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n        adcHandle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adcInstance->CR2 = adcInstance->CR2 | 4;\n    startTime = HAL_GetTick();\n    while ((adcHandle->Instance->CR2 & 4) != 0) {\n      currentTime = HAL_GetTick();\n      if (10 < currentTime - startTime) {\n        adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n        adcHandle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adcHandle->State = adcHandle->State & 0xfffffffc | 1;\n  }\n  adcHandle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "performADCConversion_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "print_uart_status_08005650",
                "huart": "uart_handle",
                "tmpval": "status_register_value"
            },
            "code": "void print_uart_status_08005650(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t status_register_value;\n  //read the status register and store the value in status_register_value\n  status_register_value = uart_handle->Instance->SR;\n  //print the status register value\n  printf(\"UART status register value: %lu\\n\", status_register_value);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "print_uart_status_08005650"
        },
        "FUN_08006fb6": {
            "renaming": {
                "FUN_08006fb6": "close_file_descriptor_08006fb6",
                "param_1": "file_descriptor",
                "param_2": "offset"
            },
            "code": "void close_file_descriptor_08006fb6(int file_descriptor, int offset) {\n  _close_r(file_descriptor, (int)*(short *)(offset + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fb6",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08006fb6"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "readByteFromI2C_08002ad8",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer",
                "XferCount": "transfer_count",
                "pBuffPtr": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef readByteFromI2C_08002ad8(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "readByteFromI2C_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "set_uart_config_08004204",
                "*huart": "huart",
                "uVar1": "mantissa",
                "uVar2": "fraction",
                "uVar3": "pclk_freq",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "baud_rate",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "pUVar12": "uart_instance",
                "DAT_080043ac": "USART1",
                "DAT_080043b0": "16"
            },
            "code": "void set_uart_config_08004204(UART_HandleTypeDef *huart)\n{\n  uint32_t pclk_freq = 0;\n  uint32_t baud_rate = 0;\n  uint32_t mantissa = 0;\n  uint32_t fraction = 0;\n  USART_TypeDef *uart_instance = huart->Instance;\n  uint32_t stop_bits = (huart->Init).StopBits;\n  uint32_t word_length = (huart->Init).WordLength;\n  uint32_t parity = (huart->Init).Parity;\n  uint32_t mode = (huart->Init).Mode;\n  uint32_t hw_flow_ctl = (huart->Init).HwFlowCtl;\n  \n  uart_instance->CR2 = (uart_instance->CR2 & 0xffffcfff) | stop_bits;\n  uart_instance->CR1 = word_length | parity | mode | (uart_instance->CR1 & 0xffffe9f3);\n  uart_instance->CR3 = (uart_instance->CR3 & 0xfffffcff) | hw_flow_ctl;\n  \n  if (uart_instance != DAT_080043ac) {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n    baud_rate = (huart->Init).BaudRate;\n  }\n  else {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n    baud_rate = (huart->Init).BaudRate;\n  }\n  \n  mantissa = ((pclk_freq * 25) / (baud_rate * 4));\n  fraction = ((mantissa % 100) * DAT_080043b0) / 100;\n  mantissa = mantissa / 100;\n  uart_instance->BRR = (mantissa << 4) | fraction;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "print_double_08005da8",
                "this": "p",
                "number": "number",
                "digits": "digits",
                "iVar1": "unordered",
                "n": "integer_part",
                "sVar2": "digits_printed",
                "sVar3": "total_printed",
                "bVar4": "decimal_digit",
                "lVar5": "unused",
                "uVar6": "temp_double1",
                "uVar7": "temp_double2"
            },
            "code": "size_t print_double_08005da8(Print *p, double number, uint8_t digits) {\n  int unordered = __unorddf2();\n  if (unordered == 0) {\n    int greater = __aeabi_dcmpgt(number, 0.0);\n    int less = __aeabi_dcmplt(number, 0.0);\n    if (greater == 0 && less == 0) {\n      return print(p, PTR_DAT_08005f20);\n    }\n    else {\n      if (greater == 1) {\n        print(p, '-');\n        number = -number;\n      }\n      int integer_part = (int)number;\n      size_t digits_printed = print(p, integer_part, 10);\n      number = number - (double)integer_part;\n      if (digits > 0) {\n        print(p, PTR_DAT_08005f28);\n        for (int i = 0; i < digits; i++) {\n          number = number * 10.0;\n          int decimal_digit = (int)number;\n          digits_printed += print(p, decimal_digit, 10);\n          number = number - (double)decimal_digit;\n        }\n      }\n      return digits_printed;\n    }\n  }\n  else {\n    return print(p, PTR_DAT_08005f1c);\n  }\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dadd",
                "print",
                "__floatsidf",
                "print",
                "__divdf3",
                "print",
                "__subdf3",
                "__aeabi_dcmplt",
                "__fixunsdfsi",
                "__fixdfsi",
                "__muldf3",
                "__floatunsidf",
                "__aeabi_dcmpgt",
                "print",
                "__aeabi_dcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_double_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "clear_uart_transmission_complete_flag_080045fe",
                "huart": "uart",
                "Instance": "instance",
                "CR1": "control_register_1",
                "gState": "uart_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY",
                "HAL_UART_TxCpltCallback": "transmission_complete_callback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef clear_uart_transmission_complete_flag_080045fe(UART_HandleTypeDef *uart)\n{\n  // clear the transmission complete flag\n  uart->Instance->CR1 &= ~(1 << 6);\n  // set the UART state to ready\n  uart->gState = HAL_UART_STATE_READY;\n  // call the transmission complete callback\n  HAL_UART_TxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "clear_uart_transmission_complete_flag_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "print_double_with_precision_08005f2c",
                "this": "printer",
                "n": "number",
                "digits": "precision",
                "sVar1": "result"
            },
            "code": "size_t print_double_with_precision_08005f2c(Print *printer, double number, int precision) {\n  size_t result = print_double_as_float(printer, (double)(number), number);\n  return result;\n}",
            "called": [
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "loop",
                "println"
            ],
            "imported": false,
            "current_name": "print_double_with_precision_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "handle_uart_receive_080055e0",
                "*huart": "huart",
                "byte bVar1": "uint8_t uart_index",
                "uint uVar2": "uint8_t callback_index",
                "uVar2": "callback_index",
                "bVar1": "uart_index",
                "PTR_rx_callback_080055fc": "PTR_rx_callback_080055fc",
                "PTR_rx_callback_obj_08005600": "PTR_rx_callback_obj_08005600"
            },
            "code": "void handle_uart_receive_080055e0(UART_HandleTypeDef *huart)\n{\n  uint8_t uart_index = get_uart_index(huart);\n  uint8_t callback_index = uart_index * 4;\n  if (callback_index < 20) {\n    code* callback_function = *(code**)(PTR_rx_callback_080055fc + callback_index);\n    void* callback_object = *(void**)(PTR_rx_callback_obj_08005600 + callback_index);\n    (*callback_function)(callback_object);\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "handle_uart_receive_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "printDoubleWithDigits_08005f40",
                "this": "printObj",
                "num": "num",
                "digits": "digits",
                "sVar1": "s1",
                "sVar2": "s2",
                "in_stack_ffffffec": "stackVar"
            },
            "code": "size_t Print::printDoubleWithDigits_08005f40(Print *printObj, double num, int digits)\n{\n  size_t s1;\n  size_t s2;\n  uint stackVar;\n  ulonglong numAsUnsignedLongLong = (ulonglong)num & 0xffffffff | (ulonglong)stackVar << 0x20;\n  s1 = print(printObj, numAsUnsignedLongLong, num._0_4_);\n  s2 = printDoubleWithDigits_08005f40(printObj);\n  return s2 + s1;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printDoubleWithDigits_08005f40"
        },
        "FUN_08006f10": {
            "renaming": {
                "FUN_08006f10": "kill_process_if_exists_08006f10",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_exists_08006f10(int *error_code, int process_id, int signal) {\n  undefined *errno_ptr;\n  int kill_result;\n\n  errno_ptr = PTR_errno_08006f30;\n  *(undefined4 *)PTR_errno_08006f30 = 0;\n  kill_result = _kill(process_id, signal);\n  if ((kill_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f10",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_exists_08006f10"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "adc_configure_0800213c",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "uVar2": "number_of_conversion",
                "uVar3": "external_trig_conv_data_align",
                "uVar4": "state",
                "uVar5": "continuous_conv_mode",
                "DAT_08002244": "external_trig_conv_data_align_mask",
                "DAT_08002248": "external_trig_conv_data_align_mask_compare"
            },
            "code": "HAL_StatusTypeDef_conflict adc_configure_0800213c(ADC_HandleTypeDef *adc_handle) {\n    HAL_StatusTypeDef_conflict status;\n    uint32_t continuous_conv_mode;\n    uint external_trig_conv_data_align;\n    uint scan_conv_mode;\n    uint number_of_disc_conversion;\n    uint number_of_conversion;\n\n    if (adc_handle == (ADC_HandleTypeDef *)0x0) {\n        return HAL_ERROR;\n    }\n\n    if (adc_handle->State == 0) {\n        adc_handle->ErrorCode = 0;\n        adc_handle->Lock = HAL_UNLOCKED;\n        HAL_ADC_MspInit(adc_handle);\n    }\n\n    status = ADC_ConversionStop_Disable(adc_handle);\n    uint state = adc_handle->State & 0x10;\n    if ((state == 0) && (status == HAL_OK)) {\n        adc_handle->State = adc_handle->State & 0xffffeefd | 2;\n        continuous_conv_mode = (adc_handle->Init).ContinuousConvMode;\n        external_trig_conv_data_align = (adc_handle->Init).DataAlign | (adc_handle->Init).ExternalTrigConv | continuous_conv_mode << 1;\n        scan_conv_mode = (adc_handle->Init).ScanConvMode;\n        if (scan_conv_mode == 0x100 || scan_conv_mode == 1) {\n            number_of_conversion = ((adc_handle->Init).NbrOfConversion - 1) * 0x100000;\n        } else {\n            number_of_conversion = 0;\n        }\n\n        if ((adc_handle->Init).DiscontinuousConvMode == 1) {\n            if (continuous_conv_mode == 0) {\n                number_of_disc_conversion = ((adc_handle->Init).NbrOfDiscConversion - 1) * 0x2000 | 0x800 | number_of_conversion;\n            } else {\n                adc_handle->State = adc_handle->State | 0x20;\n                adc_handle->ErrorCode = adc_handle->ErrorCode | 1;\n            }\n        }\n\n        adc_handle->Instance->CR1 = number_of_disc_conversion | adc_handle->Instance->CR1 & 0xffff16ff;\n        adc_handle->Instance->CR2 = DAT_08002244 & adc_handle->Instance->CR2 | external_trig_conv_data_align;\n        adc_handle->Instance->SQR1 = number_of_conversion | adc_handle->Instance->SQR1 & 0xff0fffff;\n\n        if (external_trig_conv_data_align != (DAT_08002248 & adc_handle->Instance->CR2)) {\n            adc_handle->State = adc_handle->State & 0xffffffed | 0x10;\n            adc_handle->ErrorCode = adc_handle->ErrorCode | 1;\n            return HAL_ERROR;\n        }\n\n        adc_handle->ErrorCode = 0;\n        adc_handle->State = adc_handle->State & 0xfffffffc | 1;\n        return HAL_OK;\n    }\n    adc_handle->State = adc_handle->State | 0x10;\n    return HAL_ERROR;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "adc_configure_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_uart_state_0800455a",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "gState": "state",
                "Lock": "lock",
                "pTxBuffPtr": "tx_buffer_pointer",
                "TxXferSize": "tx_transfer_size",
                "TxXferCount": "tx_transfer_count",
                "ErrorCode": "error_code",
                "Instance": "instance"
            },
            "code": "HAL_StatusTypeDef check_uart_state_0800455a(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size) {\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == (uint8_t *)0x0 || size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pTxBuffPtr = data;\n        uart_handle->TxXferSize = size;\n        uart_handle->TxXferCount = size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 |= 0x80;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "check_uart_state_0800455a"
        },
        "FUN_08004d30": {
            "renaming": {
                "FUN_08004d30": "handle_rtc_alarm_08004d30",
                "PTR_RtcHandle_08004d3c": "rtc_handle",
                "HAL_RTC_AlarmIRQHandler": "handle_rtc_alarm_irq"
            },
            "code": "void handle_rtc_alarm_08004d30(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_08004d3c = (RTC_HandleTypeDef*) PTR_RtcHandle_08004d3c;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_08004d3c);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d30",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_08004d30"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "updateControllerDirection_08001a66",
                "this": "pid",
                "Direction": "newDirection",
                "dVar1": "temp",
                "inAuto": "isAuto",
                "controllerDirection": "currentDirection",
                "kp": "proportionalGain",
                "ki": "integralGain",
                "kd": "derivativeGain"
            },
            "code": "void __thiscall PID::updateControllerDirection_08001a66(PID *pid, int newDirection) {\n  double newKp, newKi, newKd;\n  if ((pid->inAuto != false) && (pid->controllerDirection != newDirection)) {\n    newKp = -pid->kp;\n    newKi = -pid->ki;\n    newKd = -pid->kd;\n    pid->kp = newKp;\n    pid->ki = newKi;\n    pid->kd = newKd;\n  }\n  pid->controllerDirection = newDirection;\n  return;\n}",
            "called": [
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "updateControllerDirection_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_SystemCoreClock_value_08003c44",
                "PTR_SystemCoreClock_08003c4c": "SystemCoreClock_address"
            },
            "code": "uint32_t get_SystemCoreClock_value_08003c44(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "imported": false,
            "current_name": "get_SystemCoreClock_value_08003c44"
        },
        "FUN_08006074": {
            "renaming": {
                "FUN_08006074": "handle_external_interrupt_08006074"
            },
            "code": "void handle_external_interrupt_08006074(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006074",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_08006074"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "send_i2c_data_080028d2",
                "*hi2c": "*i2c_handle",
                "hi2c->Devaddress": "i2c_handle->Devaddress",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "hi2c": "i2c_handle",
                "Devaddress": "device_addr"
            },
            "code": "HAL_StatusTypeDef send_i2c_data_080028d2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t device_addr = i2c_handle->Devaddress & 0xff;\n  i2c_handle->Instance->DR = device_addr;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_i2c_data_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "isEndOfString_08000a18",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_08000a18(void)\n{\n  char currentChar;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "loop"
            ],
            "imported": false,
            "current_name": "isEndOfString_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "initialize_uart_debug_08005384",
                "pin": "pin_name",
                "obj": "serial_debug_obj",
                "PVar1": "rx_pin_name",
                "pvVar2": "tx_pin_peripheral"
            },
            "code": "void initialize_uart_debug_08005384(void)\n{\n  PinName_conflict pin_name;\n  undefined *serial_debug_obj;\n  PinName_conflict tx_pin_name;\n  void *tx_pin_peripheral;\n  PinName_conflict rx_pin_name;\n\n  pin_name = digitalPin_1;\n  tx_pin_peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PinMap_UART_TX);\n  if (tx_pin_peripheral != (void *)0x0) {\n    tx_pin_peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PinMap_UART_TX);\n    rx_pin_name = pinmap_pin(tx_pin_peripheral, (PinMap_conflict *)PinMap_UART_RX);\n    serial_debug_obj = serial_debug;\n    serial_debug[0x59] = rx_pin_name;\n    serial_debug[0x58] = pin_name;\n    *(undefined4 *)(serial_debug + 0x48) = 0x2580;\n    *(undefined4 *)(serial_debug + 0x54) = 0;\n    *(undefined4 *)(serial_debug + 0x4c) = 0;\n    *(undefined4 *)(serial_debug + 0x50) = 0;\n    uart_init((serial_t *)serial_debug_obj);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "pinmap_peripheral",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_transmit_pin_08005b3c",
                "_tx": "transmit_pin_index",
                "PVar1": "transmit_pin",
                "PTR_digitalPin_08005b50": "digitalPin"
            },
            "code": "void __thiscall HardwareSerial::set_transmit_pin_08005b3c(HardwareSerial *this, uint32_t transmit_pin_index) {\n  PinName transmit_pin;\n  if (transmit_pin_index < 0x3c) {\n    transmit_pin = PTR_digitalPin_08005b50[transmit_pin_index];\n  }\n  else {\n    transmit_pin = NC;\n  }\n  (this->serial).pin_tx = transmit_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_transmit_pin_08005b3c"
        },
        "FUN_0800091c": {
            "renaming": {
                "FUN_0800091c": "check_collision_0800091c",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "uVar1": "xor_val",
                "bVar2": "is_collision",
                "bVar3": "is_y2_less_than_y1"
            },
            "code": "uint check_collision_0800091c(uint x1, uint y1, uint x2, uint y2)\n{\n  bool is_collision = false;\n  if (((int)(y1 << 1) >> 0x15 == -1 || (int)(y2 << 1) >> 0x15 == -1) && ((((int)(y1 << 1) >> 0x15 == -1 && ((x1 | y1 << 0xc) != 0)) || (((int)(y2 << 1) >> 0x15 == -1 && ((x2 | y2 << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  is_collision = (x1 | y1 << 1) == 0;\n  if (is_collision) {\n    is_collision = (x2 | y2 << 1) == 0;\n  }\n  if (!is_collision) {\n    is_collision = y1 == y2;\n  }\n  if (is_collision) {\n    is_collision = x1 == x2;\n  }\n  if (!is_collision) {\n    uint xor_val = y1 ^ y2;\n    is_collision = xor_val == 0;\n    if (-1 < (int)xor_val) {\n      is_collision = y1 == y2;\n    }\n    bool is_y2_less_than_y1 = -1 < (int)xor_val && y2 <= y1;\n    if (is_collision) {\n      is_y2_less_than_y1 = x2 <= x1;\n    }\n    y2 = (int)y2 >> 0x1f;\n    if (!is_y2_less_than_y1) {\n      y2 = ~y2;\n    }\n    return y2 | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800091c",
            "calling": [],
            "imported": false,
            "current_name": "check_collision_0800091c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "handle_UART_events_080046b8",
                "*huart": "*huart",
                "HVar1": "status",
                "uVar2": "cr1",
                "pUVar3": "instance",
                "uVar4": "cr3_eie",
                "uVar5": "sr",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "USART_TypeDef": "USART_TypeDef",
                "USART_SR_RXNE": "USART_SR_RXNE",
                "USART_SR_IDLE": "USART_SR_IDLE",
                "USART_CR1_IDLEIE": "USART_CR1_IDLEIE",
                "UART_Receive_IT": "UART_Receive_IT",
                "USART_SR_TXE": "USART_SR_TXE",
                "USART_CR1_TXEIE": "USART_CR1_TXEIE",
                "UART_Transmit_IT": "UART_Transmit_IT",
                "USART_SR_TC": "USART_SR_TC",
                "USART_CR1_TCIE": "USART_CR1_TCIE",
                "UART_EndTransmit_IT": "UART_EndTransmit_IT",
                "USART_SR_PE": "USART_SR_PE",
                "USART_CR1_PEIE": "USART_CR1_PEIE",
                "HAL_UART_ERROR_PE": "HAL_UART_ERROR_PE",
                "USART_SR_FE": "USART_SR_FE",
                "USART_CR3_EIE": "USART_CR3_EIE",
                "HAL_UART_ERROR_FE": "HAL_UART_ERROR_FE",
                "USART_SR_NE": "USART_SR_NE",
                "HAL_UART_ERROR_NE": "HAL_UART_ERROR_NE",
                "USART_SR_ORE": "USART_SR_ORE",
                "HAL_UART_ERROR_ORE": "HAL_UART_ERROR_ORE",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback",
                "UART_EndRxTransfer": "UART_EndRxTransfer",
                "USART_CR3_DMAR": "USART_CR3_DMAR",
                "UART_DMAAbortOnError": "UART_DMAAbortOnError",
                "HAL_DMA_Abort_IT": "HAL_DMA_Abort_IT",
                "HAL_OK": "HAL_OK"
            },
            "code": "void handle_UART_events_080046b8(UART_HandleTypeDef *huart)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr;\n  uint32_t cr1;\n  uint32_t cr3;\n\n  sr = huart->Instance->SR;\n  cr1 = huart->Instance->CR1;\n  cr3 = huart->Instance->CR3;\n\n  if (((sr & USART_SR_RXNE) == 0) && ((sr & USART_SR_IDLE) != 0)) && ((cr1 & USART_CR1_IDLEIE) != 0)) {\n    UART_Receive_IT(huart);\n    return;\n  }\n  if (((sr & USART_SR_RXNE) == 0) || ((cr3 & USART_CR3_EIE) == 0 && ((cr1 & (USART_CR1_RXNEIE | USART_CR1_PEIE)) == 0))) {\n    if (((sr & USART_SR_TXE) != 0) && ((cr1 & USART_CR1_TXEIE) != 0)) {\n      UART_Transmit_IT(huart);\n      return;\n    }\n    if (((sr & USART_SR_TC) != 0) && ((cr1 & USART_CR1_TCIE) != 0)) {\n      UART_EndTransmit_IT(huart);\n    }\n  }\n  else {\n    if (((sr & USART_SR_PE) != 0) && ((cr1 & USART_CR1_PEIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_PE;\n    }\n    if (((sr & USART_SR_FE) != 0) && ((cr3 & USART_CR3_EIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_FE;\n    }\n    if (((sr & USART_SR_NE) != 0) && ((cr3 & USART_CR3_EIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_NE;\n    }\n    if (((sr & USART_SR_ORE) != 0) && ((cr3 & USART_CR3_EIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_ORE;\n    }\n    if (huart->ErrorCode != 0) {\n      if (((sr & USART_SR_IDLE) != 0) && ((cr1 & USART_CR1_IDLEIE) != 0)) {\n        UART_Receive_IT(huart);\n      }\n      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) == 0) && ((cr3 & USART_CR3_EIE) == 0)) {\n        HAL_UART_ErrorCallback(huart);\n        huart->ErrorCode = 0;\n        return;\n      }\n      UART_EndRxTransfer(huart);\n      cr3 = huart->Instance->CR3;\n      if ((cr3 & USART_CR3_EIE) == 0) {\n        HAL_UART_ErrorCallback(huart);\n        return;\n      }\n      cr3 &= ~USART_CR3_DMAR;\n      if (huart->hdmarx == NULL) {\n        HAL_UART_ErrorCallback(huart);\n        return;\n      }\n      huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;\n      status = HAL_DMA_Abort_IT(huart->hdmarx);\n      if (status != HAL_OK) {\n        huart->hdmarx->XferAbortCallback(huart->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT",
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_UART_events_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_pin_name_08004c8a",
                "peripheral": "peripheral",
                "map": "pin_map",
                "PinName_conflict": "PinName_conflict",
                "PinMap_conflict": "PinMap_conflict",
                "NC": "NC",
                "void": "void",
                "*peripheral": "*peripheral",
                "*map": "*pin_map"
            },
            "code": "PinName_conflict find_pin_name_08004c8a(void *peripheral, PinMap_conflict *pin_map) {\n    while (true) {\n        if (pin_map->peripheral == (void *)0x0) {\n            return NC;\n        }\n        if (pin_map->peripheral == peripheral) {\n            break;\n        }\n        pin_map++;\n    }\n    return pin_map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "find_pin_name_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "wait_for_adc_conversion_08001cd0",
                "*hadc": "*adc_handle",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "pAVar5": "adc_instance",
                "Conversion_Timeout_CPU_cycles": "conversion_timeout_cpu_cycles",
                "ADC_CR2_ADON": "ADC_CR2_ADON",
                "ADC_CR1_EOCIE": "ADC_CR1_EOCIE",
                "ADC_SQR1_L": "ADC_SQR1_L",
                "ADC_SR_EOC": "ADC_SR_EOC",
                "ADC_STATE_TIMEOUT": "ADC_STATE_TIMEOUT",
                "ADC_STATE_REG_EOC": "ADC_STATE_REG_EOC",
                "PTR_SystemCoreClock_08001e2c": "PTR_SystemCoreClock_08001e2c",
                "RCC_PERIPHCLK_ADC": "RCC_PERIPHCLK_ADC",
                "DAT_08001e30": "DAT_08001e30",
                "DAT_08001e34": "DAT_08001e34",
                "DAT_08001e38": "DAT_08001e38",
                "DAT_08001e3c": "DAT_08001e3c",
                "ADC_STATE_CONTINUOUS": "ADC_STATE_CONTINUOUS",
                "ADC_STATE_INJECTED_BUSY": "ADC_STATE_INJECTED_BUSY",
                "ADC_STATE_READY": "ADC_STATE_READY",
                "ADC_STATE_ERROR_INTERNAL": "ADC_STATE_ERROR_INTERNAL",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict"
            },
            "code": "HAL_StatusTypeDef_conflict wait_for_adc_conversion_08001cd0(ADC_HandleTypeDef *adc_handle, uint32_t timeout)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t start_time = HAL_GetTick();\n    ADC_TypeDef *adc_instance = adc_handle->Instance;\n    uint32_t conversion_timeout_cpu_cycles = 0;\n    \n    if ((adc_instance->CR2 & ADC_CR2_ADON) == 0) {\n        if (((adc_instance->CR1 & ADC_CR1_EOCIE) == 0) && ((adc_instance->SQR1 & ADC_SQR1_L) == 0)) {\n            do {\n                if ((adc_handle->Instance->SR & ADC_SR_EOC) != 0) {\n                    goto conversion_complete;\n                }\n            } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - start_time <= timeout))));\n            adc_handle->State |= ADC_STATE_TIMEOUT;\n            adc_handle->Lock = HAL_UNLOCKED;\n            status = HAL_TIMEOUT;\n        }\n        else {\n            uint32_t core_clock = *(uint *)PTR_SystemCoreClock_08001e2c;\n            uint32_t periph_clock_freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);\n            uint32_t sample_time = 0;\n            \n            if ((adc_instance->SMPR2 & DAT_08001e30) == 0 &&\n                (adc_instance->SMPR1 & (DAT_08001e30 + 0xdc000000)) == 0) {\n                if ((adc_instance->SMPR2 & DAT_08001e34) == 0) {\n                    if ((adc_instance->SMPR1 & DAT_08001e38) == 0) {\n                        sample_time = 20;\n                    }\n                    else {\n                        sample_time = 41;\n                    }\n                }\n                else {\n                    sample_time = 41;\n                }\n            }\n            else if ((adc_instance->SMPR2 & DAT_08001e34) == 0 &&\n                     (adc_instance->SMPR1 & (DAT_08001e34 + 0xee000000)) == 0) {\n                sample_time = 84;\n            }\n            else if ((DAT_08001e3c & adc_instance->SMPR2) == 0) {\n                if ((DAT_08001e3c & adc_instance->SMPR1) == 0) {\n                    sample_time = 84;\n                }\n                else {\n                    sample_time = 239;\n                }\n            }\n            else {\n                sample_time = 239;\n            }\n            \n            uint32_t cpu_cycles_per_conversion = (core_clock / periph_clock_freq) * sample_time;\n            for (; conversion_timeout_cpu_cycles <= cpu_cycles_per_conversion && cpu_cycles_per_conversion - conversion_timeout_cpu_cycles != 0;\n                 conversion_timeout_cpu_cycles++) {\n                if ((timeout != 0xffffffff) &&\n                    ((timeout == 0 || (HAL_GetTick() - start_time > timeout)))) {\n                    adc_handle->State |= ADC_STATE_TIMEOUT;\n                    adc_handle->Lock = HAL_UNLOCKED;\n                    return HAL_TIMEOUT;\n                }\n            }\n            \n        conversion_complete:\n            adc_handle->Instance->SR = ADC_FLAG_EOC;\n            adc_handle->State |= ADC_STATE_REG_EOC;\n            if ((adc_handle->Instance->CR2 & ADC_CR2_CONT) == ADC_CR2_CONT) {\n                if ((adc_handle->Init).ContinuousConvMode == 0) {\n                    adc_handle->State &= ~ADC_STATE_CONTINUOUS;\n                    if ((adc_handle->State & ADC_STATE_INJECTED_BUSY) == 0) {\n                        adc_handle->State |= ADC_STATE_READY;\n                        status = HAL_OK;\n                    }\n                    else {\n                        status = HAL_OK;\n                    }\n                }\n                else {\n                    status = HAL_OK;\n                }\n            }\n            else {\n                status = HAL_OK;\n            }\n        }\n    }\n    else {\n        adc_handle->State |= ADC_STATE_ERROR_INTERNAL;\n        adc_handle->Lock = HAL_UNLOCKED;\n        status = HAL_ERROR;\n    }\n    return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "wait_for_adc_conversion_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08000130": {
            "renaming": {
                "FUN_08000130": "execute_code_if_initialized_08000130",
                "DAT_08000164": "is_initialized",
                "PTR__edata_08000170": "pointer_initialized",
                "DAT_08000174": "code_pointer"
            },
            "code": "void execute_code_if_initialized_08000130(void)\n{\n    bool DAT_08000164 = DAT_08000164;\n    bool is_PTR__edata_08000170 = (*(int *)PTR__edata_08000170 != 0);\n    code* DAT_08000174 = DAT_08000174;\n\n    if (!DAT_08000164) {\n        return;\n    }\n\n    if (is_PTR__edata_08000170 && DAT_08000174 != (code *)0x0) {\n        (*DAT_08000174)(PTR__edata_08000170, PTR_object_8672_0800016c);\n        return;\n    }\n\n    if (is_PTR__edata_08000170 && DAT_08000174 != (code *)0x0) {\n        (*DAT_08000174)();\n        return;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000130",
            "calling": [],
            "imported": false,
            "current_name": "execute_code_if_initialized_08000130"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "read_analog_pin_08004a4c",
                "PinName_conflict": "pin",
                "HAL_StatusTypeDef_conflict": "status",
                "uint32_t": "adc_value",
                "uint16_t": "converted_value",
                "ADC_ChannelConfTypeDef": "channel_config",
                "ADC_HandleTypeDef": "adc_handle"
            },
            "code": "uint16_t read_analog_pin_08004a4c(PinName_conflict pin)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t adc_value;\n    uint16_t converted_value;\n    ADC_ChannelConfTypeDef channel_config;\n    ADC_HandleTypeDef adc_handle;\n\n    memset(&adc_handle, 0, sizeof(ADC_HandleTypeDef));\n    channel_config.Channel = 0;\n    channel_config.Rank = 0;\n    channel_config.SamplingTime = 0;\n    converted_value = 0;\n    adc_handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_ADC_08004b2c);\n    if (adc_handle.Instance == (ADC_TypeDef *)0x0) {\n        converted_value = 0;\n    }\n    else {\n        adc_handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;\n        adc_handle.Init.ScanConvMode = DISABLE;\n        adc_handle.Init.ContinuousConvMode = DISABLE;\n        adc_handle.Init.DiscontinuousConvMode = DISABLE;\n        adc_handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;\n        adc_handle.State = 0;\n        adc_handle.Init.NbrOfConversion = 1;\n        adc_handle.Init.NbrOfDiscConversion = 0;\n        *PTR_g_current_pin_08004b30 = pin;\n        status = HAL_ADC_Init(&adc_handle);\n        if (status == HAL_OK) {\n            channel_config.Channel = get_adc_channel(pin);\n            if (channel_config.Channel < 0x12) {\n                channel_config.Rank = 1;\n                channel_config.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;\n                status = HAL_ADC_ConfigChannel(&adc_handle, &channel_config);\n                if (status == HAL_OK) {\n                    status = HAL_ADCEx_Calibration_Start(&adc_handle);\n                    if (status == HAL_OK) {\n                        status = HAL_ADC_Start(&adc_handle);\n                        if (status == HAL_OK) {\n                            status = HAL_ADC_PollForConversion(&adc_handle, 10);\n                            if (status == HAL_OK) {\n                                uint32_t adc_state = HAL_ADC_GetState(&adc_handle);\n                                if ((adc_state & ADC_FLAG_EOC) != 0) {\n                                    adc_value = HAL_ADC_GetValue(&adc_handle);\n                                    converted_value = (uint16_t)adc_value;\n                                }\n                                status = HAL_ADC_Stop(&adc_handle);\n                                if (status != HAL_OK) {\n                                    converted_value = 0;\n                                }\n                            }\n                            else {\n                                converted_value = 0;\n                            }\n                        }\n                        else {\n                            converted_value = 0;\n                        }\n                    }\n                    else {\n                        converted_value = 0;\n                    }\n                }\n                else {\n                    converted_value = 0;\n                }\n            }\n            else {\n                converted_value = 0;\n            }\n        }\n        else {\n            converted_value = 0;\n        }\n    }\n    return converted_value;\n}",
            "called": [
                "get_adc_channel",
                "HAL_ADC_GetValue",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_GetState",
                "pinmap_peripheral",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_Stop",
                "HAL_ADC_PollForConversion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "analogRead"
            ],
            "imported": false,
            "current_name": "read_analog_pin_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "register_exit_handler_08006112",
                "param_1": "exit_handler",
                "param_2": "arg",
                "__cxa_atexit": "__register_atexit"
            },
            "code": "void register_exit_handler_08006112(void (*exit_handler)(void*), void* arg) {\n    __cxa_atexit(exit_handler, arg);\n    return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_handler_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "initialize_ADC_GPIO_pins_08004974",
                "hadc": "adc_handle",
                "puVar1": "current_pin",
                "GPIOx": "gpio_port",
                "tmpreg": "tmpreg",
                "tmpreg_1": "tmpreg_1",
                "GPIO_InitStruct": "gpio_init_struct",
                "DAT_080049e0": "ADC1",
                "DAT_080049e4": "ADC2",
                "g_current_pin_080049e8": "g_current_pin",
                "PTR_g_current_pin_080049e8": "current_pin"
            },
            "code": "void initialize_ADC_GPIO_pins_08004974(ADC_HandleTypeDef *adc_handle) {\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  GPIO_InitTypeDef gpio_init_struct;\n  if (adc_handle->Instance == DAT_080049e0) {\n    *(uint *)(g_adc_common_registers + 0x18) = *(uint *)(g_adc_common_registers + 0x18) | 0x200;\n  }\n  else if (adc_handle->Instance == DAT_080049e4) {\n    *(uint *)(g_adc_common_registers + 0x18) = *(uint *)(g_adc_common_registers + 0x18) | 0x400;\n  }\n  uint8_t* PTR_g_current_pin_080049e8 = g_PTR_g_current_pin_080049e8;\n  GPIO_TypeDef* gpio_port = set_GPIO_Port_Clock((uint)((int)(char)*g_PTR_g_current_pin_080049e8 << 0x18) >> 0x1c);\n  gpio_init_struct.Pin = 1 << (*PTR_g_current_pin_080049e8 & 0xf) & 0xffff;\n  gpio_init_struct.Mode = GPIO_MODE_ANALOG;\n  gpio_init_struct.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(gpio_port, &gpio_init_struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "HAL_ADC_Init"
            ],
            "imported": false,
            "current_name": "initialize_ADC_GPIO_pins_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "checkI2CStatus_08003520",
                "hi2c": "i2c_handle",
                "HVar1": "state",
                "pIVar2": "i2c_instance",
                "uVar3": "sr1_reg",
                "uVar4": "cr2_reg",
                "DAT_080035f8": "I2C_SR1_ERROR_MASK",
                "0x100": "I2C_CR2_ITBUFEN",
                "1": "I2C_ERROR_BERR",
                "0xfffffeff": "I2C_SR1_ERROR_MASK_INV",
                "0x8000": "I2C_CR1_STOP",
                "0x10200": "I2C_SR1_ADDR",
                "2": "I2C_ERROR_ADDR",
                "0xfffffdff": "I2C_SR1_ADDR_INV",
                "0x10400": "I2C_SR1_TXE",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "0x21": "I2C_STATE_ADDR",
                "4": "I2C_ERROR_TXE",
                "0xfffffbff": "I2C_SR1_TXE_INV",
                "0x10800": "I2C_SR1_RXNE",
                "8": "I2C_ERROR_RXNE",
                "0xfffff7ff": "I2C_SR1_RXNE_INV",
                "0x20": "I2C_SR1_STOPF",
                "16": "I2C_ERROR_STOPF",
                "0xfffff": "I2C_SR1_STOPF_INV"
            },
            "code": "void checkI2CStatus_08003520(I2C_HandleTypeDef *i2c_handle)\n{\n    HAL_I2C_StateTypeDef state;\n    I2C_TypeDef *i2c_instance;\n    uint16_t sr1_reg;\n    uint16_t cr2_reg;\n\n    i2c_instance = i2c_handle->Instance;\n    sr1_reg = i2c_instance->SR1;\n    cr2_reg = i2c_instance->CR2;\n\n    if (((sr1_reg & DAT_080035f8) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_BERR;\n        i2c_instance->SR1 = DAT_080035f8_INV;\n        i2c_instance->CR1 |= I2C_CR1_STOP;\n    }\n\n    if (((sr1_reg & I2C_SR1_ADDR) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_ADDR;\n        i2c_instance->SR1 = I2C_SR1_ADDR_INV;\n    }\n\n    if (((sr1_reg & I2C_SR1_TXE) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) {\n        state = i2c_handle->State;\n        if (((i2c_handle->Mode == HAL_I2C_MODE_SLAVE) && (i2c_handle->XferCount == 0)) && (((state == HAL_I2C_STATE_BUSY_TX) || (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((state == HAL_I2C_STATE_LISTEN) && (i2c_handle->PreviousState == I2C_STATE_ADDR)))) {\n            I2C_Slave_AF(i2c_handle);\n        }\n        else {\n            i2c_handle->ErrorCode |= I2C_ERROR_TXE;\n            if (i2c_handle->Mode == HAL_I2C_MODE_MASTER) {\n                i2c_instance->CR1 |= I2C_CR1_STOP;\n            }\n            i2c_instance->SR1 = I2C_SR1_TXE_INV;\n        }\n    }\n\n    if (((sr1_reg & I2C_SR1_RXNE) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_RXNE;\n        i2c_instance->SR1 = I2C_SR1_RXNE_INV;\n    }\n\n    if (((sr1_reg & I2C_SR1_STOPF) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_STOPF;\n        i2c_instance->SR1 = I2C_SR1_STOPF_INV;\n    }\n\n    if (i2c_handle->ErrorCode != 0) {\n        I2C_ITError(i2c_handle);\n    }\n}",
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "handle_i2c_data_transfer_08002ca6",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "*puVar2": "*buffer_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "XferCount": "TransferCount",
                "pBuffPtr": "BufferPtr",
                "Instance": "Instance",
                "DR": "DR",
                "PreviousState": "PreviousState",
                "State": "State",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict",
                "HAL_I2C_StateTypeDef": "HAL_I2C_StateTypeDef",
                "uint8_t": "uint8_t",
                "HAL_I2C_STATE_BUSY_RX_LISTEN": "HAL_I2C_STATE_BUSY_RX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_SlaveRxCpltCallback": "HAL_I2C_SlaveRxCpltCallback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_data_transfer_08002ca6(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *buffer_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->TransferCount != 0) {\n    buffer_ptr = i2c_handle->BufferPtr;\n    i2c_handle->BufferPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->TransferCount = i2c_handle->TransferCount - 1;\n    if ((i2c_handle->TransferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_data_transfer_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54::FUN_08005b54": "initializeSerial",
                "this": "serialObject",
                "peripheral": "peripheral",
                "PVar1": "pin",
                "extraout_r1": "context",
                "extraout_r1_00": "context2",
                "PTR_Serial2_08005ba4": "serial2Pointer",
                "PTR_PinMap_UART_RX_08005ba8": "pinMapUartRxPointer",
                "PTR_PinMap_UART_TX_08005bac": "pinMapUartTxPointer",
                "FUN_08005b54": "initializeSerial_08005b54"
            },
            "code": "initializeSerial_08005b54 * __thiscall initializeSerial_08005b54(initializeSerial_08005b54 *serialObject, void *peripheral)\n{\n  PinName pin_rx, pin_tx;\n  EVP_PKEY_CTX *ctx;\n  EVP_PKEY_CTX *extraout_r1_00;\n  EVP_PKEY_CTX *extraout_r1;\n  \n  (serialObject->super_Stream).super_Print.write_error = 0;\n  (serialObject->super_Stream)._timeout = 1000;\n  (serialObject->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)writePointer;\n  if (serialObject == (initializeSerial_08005b54 *)PTR_Serial2_08005ba4) {\n    setRx(serialObject,0);\n    setTx(serialObject,1);\n    ctx = extraout_r1_00;\n  }\n  else {\n    pin_rx = pinmap_pin(peripheral,(PinMap_conflict *)PTR_PinMap_UART_RX_08005ba8);\n    (serialObject->_serial).pin_rx = pin_rx;\n    pin_tx = pinmap_pin(peripheral,(PinMap_conflict *)PTR_PinMap_UART_TX_08005bac);\n    (serialObject->_serial).pin_tx = pin_tx;\n    ctx = extraout_r1;\n  }\n  init(serialObject,ctx);\n  return serialObject;\n}",
            "called": [
                "pinmap_pin",
                "setTx",
                "setRx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initializeSerial_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "receive_data_08004618",
                "*huart": "*uart",
                "huart->RxState": "uart->RxState",
                "HAL_UART_STATE_BUSY_RX": "HAL_UART_STATE_BUSY_RX",
                "HAL_BUSY": "HAL_BUSY",
                "huart->Init.WordLength": "word_length",
                "huart->Init.Parity": "uart->Init.Parity",
                "huart->pRxBuffPtr": "rx_buffer_ptr",
                "huart->Instance->DR": "data_register",
                "uint16_t": "uint16_t",
                "uint8_t *": "uint8_t *",
                "*(uint16_t *)huart->pRxBuffPtr": "*(uint16_t *)rx_buffer_ptr",
                "rx_buffer_ptr += 2": "rx_buffer_ptr += 2",
                "*(uint16_t *)huart->pRxBuffPtr = (uint16_t)huart->Instance->DR & 0xff": "*(uint16_t *)rx_buffer_ptr = (uint16_t)(*data_register & 0xFF)",
                "rx_buffer_ptr++": "rx_buffer_ptr++",
                "uint8_t": "uint8_t",
                "*huart->pRxBuffPtr": "*rx_buffer_ptr",
                "(uint8_t)huart->Instance->DR": "data_byte = *data_register",
                "*huart->pRxBuffPtr = (uint8_t)huart->Instance->DR": "*rx_buffer_ptr = data_byte",
                "*(byte *)huart->pRxBuffPtr = (byte)huart->Instance->DR & 0x7f": "data_byte = *data_register & 0x7F;\n    *rx_buffer_ptr = data_byte;",
                "huart->RxXferCount": "uart->RxXferCount",
                "HAL_OK": "HAL_OK",
                "uart->Instance->CR1 &= 0xffffffdf": "uart->Instance->CR1 &= ~(1 << 5)",
                "uart->Instance->CR1 &= 0xfffffeff": "uart->Instance->CR1 &= ~(1 << 8)",
                "uart->Instance->CR3 &= 0xfffffffe": "uart->Instance->CR3 &= ~(1)",
                "huart->RxState = HAL_UART_STATE_READY": "uart->RxState = HAL_UART_STATE_READY",
                "HAL_UART_RxCpltCallback(huart)": "HAL_UART_RxCpltCallback(uart)"
            },
            "code": "HAL_StatusTypeDef receive_data_08004618(UART_HandleTypeDef *uart)\n{\n  uint16_t word_length = uart->Init.WordLength;\n  uint8_t *rx_buffer_ptr = uart->pRxBuffPtr;\n  uint8_t *data_register = (uint8_t *)&uart->Instance->DR;\n  uint8_t data_byte;\n\n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n\n  if (word_length == 0x1000) {\n    if (uart->Init.Parity == UART_PARITY_NONE) {\n      *(uint16_t *)rx_buffer_ptr = (uint16_t)(*data_register & 0x7F);\n      rx_buffer_ptr += 2;\n    }\n    else {\n      *(uint16_t *)rx_buffer_ptr = (uint16_t)(*data_register & 0xFF);\n      rx_buffer_ptr++;\n    }\n  }\n  else if (uart->Init.Parity == UART_PARITY_NONE) {\n    data_byte = *data_register;\n    *rx_buffer_ptr = data_byte;\n    rx_buffer_ptr++;\n  }\n  else {\n    data_byte = *data_register & 0x7F;\n    *rx_buffer_ptr = data_byte;\n    rx_buffer_ptr++;\n  }\n\n  uart->RxXferCount--;\n  if (uart->RxXferCount != 0) {\n    return HAL_OK;\n  }\n\n  uart->Instance->CR1 &= ~(1 << 5);\n  uart->Instance->CR1 &= ~(1 << 8);\n  uart->Instance->CR3 &= ~(1);\n  uart->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08004618"
        },
        "FUN_080060a6": {
            "renaming": {
                "FUN_080060a6": "handle_gpio_exti_irq_080060a6",
                "uVar1": "gpio_pin",
                "PTR_": "no change",
                "DAT_": "no change"
            },
            "code": "void handle_gpio_exti_irq_080060a6(void)\n{\n  uint16_t gpio_pin = 0x20;\n  uint16_t max_pin = 0x201;\n  while(gpio_pin < max_pin)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060a6",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080060a6"
        },
        "FUN_08001c30": {
            "renaming": {
                "FUN_08001c30": "wait_forever_08001c30"
            },
            "code": "void wait_forever_08001c30(void)\n{\n  while(true)\n  {\n    //Do nothing\n  }\n}",
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c30",
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08001c30"
        },
        "FUN_08005c72": {
            "renaming": {
                "__thiscall Print::FUN_08005c72": "print_buffer",
                "*this": "print_object",
                "pPVar1": "print_pointer",
                "sVar2": "num_printed_chars",
                "*buffer": "buffer",
                "size": "buffer_size",
                "FUN_08005c72": "print_buffer_08005c72"
            },
            "code": "size_t __thiscall print_buffer_08005c72(Print *print_object, uint8_t *buffer, size_t buffer_size) {\n  Print *print_pointer;\n  size_t num_printed_chars = 0;\n\n  print_pointer = print_object;\n\n  while (buffer_size > 0) {\n    if (print_pointer == NULL) {\n      return num_printed_chars;\n    }\n\n    print_pointer = (Print *)(**print_object->_vptr_Print)(print_pointer, (uint)*buffer);\n\n    if (print_pointer == NULL) {\n      break;\n    }\n\n    num_printed_chars++;\n    buffer++;\n    buffer_size--;\n  }\n\n  return num_printed_chars;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c72",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_08005c72"
        },
        "FUN_08006c40": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "temp",
                "PTR_DAT_08006c78": "temp1",
                "DAT_08006c7c": "temp2",
                "DAT_08006c80": "temp3",
                "DAT_08006c84": "temp4",
                "FUN_08006c40": "initialize_data_08006c40"
            },
            "code": "void initialize_data_08006c40(undefined4 *data, undefined2 value1, undefined2 value2)\n{\n    // Initialize data\n    data[0] = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value1;\n    data[0x19] = 0;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    memset(data + 0x17, 0, 8);\n    data[8] = data;\n    data[9] = PTR_DAT_08006c78;\n    data[10] = PTR_DAT_08006c7c;\n    data[0xb] = PTR_DAT_08006c80;\n    data[0xc] = PTR_DAT_08006c84;\n}\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_08006c40"
        },
        "FUN_0800048c": {
            "renaming": {
                "FUN_0800048c": "calculate_0800048c",
                "param_1": "number1",
                "param_2": "number2",
                "uVar2": "result2",
                "uVar3": "shiftAmount1",
                "uVar4": "result1",
                "uVar6": "shiftAmount2",
                "iVar5": "loopCounter1",
                "iVar7": "loopCounter2",
                "bVar1": "bitValue",
                "bVar9": "isNegative",
                "bVar10": "isCarry2",
                "bVar11": "isCarry1",
                "uVar8": "carry1",
                "uVar2_00": "carry2"
            },
            "code": "ulonglong calculate_0800048c(uint number1, uint number2)\n{\n  byte bitValue;\n  uint shiftAmount1;\n  uint shiftAmount2;\n  uint carry1;\n  int loopCounter1;\n  uint carry2;\n  int loopCounter2;\n  uint result1;\n  uint result2;\n  bool isCarry1;\n  bool isCarry2;\n  bool isNegative;\n  \n  if ((number1 | number2) == 0) {\n    return CONCAT44(number2, number1);\n  }\n  \n  loopCounter2 = 0x432;\n  shiftAmount2 = number2 >> 0x16;\n  if (shiftAmount2 != 0) {\n    loopCounter2 = 3;\n    if (number2 >> 0x19 != 0) {\n      loopCounter2 = 6;\n    }\n    if (number2 >> 0x1c != 0) {\n      loopCounter2 = loopCounter2 + 3;\n    }\n    shiftAmount1 = loopCounter2 - ((int)number2 >> 0x1f);\n    result1 = number1 << (0x20 - shiftAmount1 & 0xff);\n    number1 = number1 >> (shiftAmount1 & 0xff) | number2 << (0x20 - shiftAmount1 & 0xff);\n    number2 = number2 >> (shiftAmount1 & 0xff);\n    loopCounter2 = shiftAmount1 + 0x432;\n  }\n  \n  if (0xfffff < number2) {\n    if (0x1fffff < number2) {\n      shiftAmount1 = number2 & 1;\n      number2 = number2 >> 1;\n      bitValue = (byte)number1;\n      number1 = (uint)(shiftAmount1 != 0) << 0x1f | number1 >> 1;\n      result1 = (uint)(bitValue & 1) << 0x1f | result1 >> 1;\n      loopCounter2 = loopCounter2 + 1;\n      if (0xffbfffff < (uint)(loopCounter2 * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\n    \n    isCarry2 = 0x7fffffff < result1;\n    if (result1 == 0x80000000) {\n      isCarry2 = (number1 & 1) != 0;\n    }\n    return CONCAT44(number2 + loopCounter2 * 0x100000 + (uint)CARRY4(number1,(uint)isCarry2), number1 + isCarry2);\n  }\n  \n  isNegative = (shiftAmount2 & 0x80000000) != 0;\n  shiftAmount2 = shiftAmount2 << 1;\n  result1 = number1 * 2;\n  isCarry2 = CARRY4(number1,number1);\n  number1 = number1 * 2 + (uint)isNegative;\n  number2 = number2 * 2 + (uint)(isCarry2 || CARRY4(result1,(uint)isNegative));\n  loopCounter2 = loopCounter2 + -1;\n  if ((number2 & 0x100000) != 0) {\n    goto LAB_080002a0;\n  }\n  result2 = number1;\n  result1 = number2;\n  if (number2 == 0) {\n    result2 = 0;\n    result1 = number1;\n  }\n  loopCounter1 = count_leading_zeroes(result1);\n  if (number2 == 0) {\n    loopCounter1 = loopCounter1 + 0x20;\n  }\n  shiftAmount1 = loopCounter1 - 0xb;\n  isCarry1 = SBORROW4(shiftAmount1, 0x20);\n  loopCounter2 = loopCounter1 - 0x2b;\n  isNegative = (int)loopCounter2 < 0;\n  isCarry2 = loopCounter2 == 0;\n  if ((int)shiftAmount1 < 0x20) {\n    isCarry1 = SCARRY4(loopCounter2, 0xc);\n    loopCounter1 = loopCounter1 + -0x1f;\n    isNegative = loopCounter1 < 0;\n    isCarry2 = loopCounter1 == 0;\n    shiftAmount1 = shiftAmount1;\n    if (!isCarry2 && isNegative == isCarry1) {\n      result2 = result1 << (shiftAmount1 & 0xff);\n      result1 = result1 >> (0xcU - loopCounter1 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isCarry2 || isNegative != isCarry1) {\n    shiftAmount2 = 0x20 - shiftAmount1;\n  }\n  result1 = result1 << (shiftAmount1 & 0xff);\n  if (isCarry2 || isNegative != isCarry1) {\n    result1 = result1 | result2 >> (shiftAmount2 & 0xff);\n  }\n  if (isCarry2 || isNegative != isCarry1) {\n    result2 = result2 << (shiftAmount1 & 0xff);\n  }\nLAB_08000318:\n  if ((int)loopCounter2 <= loopCounter2) {\n    return CONCAT44(result1 + (loopCounter2 - shiftAmount1) * 0x100000, result2);\n  }\n  shiftAmount2 = ~(loopCounter2 - shiftAmount1);\n  if (0x1e < (int)shiftAmount2) {\n    return (ulonglong)(result1 >> (shiftAmount2 - 0x1f & 0xff));\n  }\n  loopCounter2 = shiftAmount2 - 0x13;\n  if (loopCounter2 == 0 || loopCounter2 < 0 != SCARRY4(shiftAmount2 - 0x1f, 0xc)) {\n    shiftAmount2 = shiftAmount2 + 1;\n    return CONCAT44(result1 >> (shiftAmount2 & 0xff), result2 >> (shiftAmount2 & 0xff) | result1 << (0x20 - shiftAmount2 & 0xff));\n  }\n  return (ulonglong)(result2 >> (0x20 - (0xcU - loopCounter2) & 0xff) | result1 << (0xcU - loopCounter2 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800048c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_0800048c"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c::FUN_0800157c": "initialize_pins",
                "SO": "so_pin",
                "CS": "cs_pin",
                "SCK": "sck_pin",
                "FUN_0800157c": "initialize_pins_0800157c"
            },
            "code": "initialize_pins_0800157c * __thiscall initialize_pins_0800157c(initialize_pins_0800157c *this, uchar so_pin, uchar cs_pin, uchar sck_pin)\n{\n  this->so = so_pin;\n  this->cs = cs_pin;\n  this->sck = sck_pin;\n  pinMode((uint)so_pin, OUTPUT);\n  pinMode((uint)this->cs, INPUT);\n  pinMode((uint)this->sck, INPUT);\n  digitalWrite((uint)this->cs, HIGH);\n  digitalWrite((uint)this->sck, LOW);\n  return this;\n}",
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_pins_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "configureUART_080045a2",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "RxState": "Rx_State",
                "HAL_UART_STATE_READY": "UART_READY",
                "HAL_BUSY": "BUSY",
                "HAL_ERROR": "ERROR",
                "Lock": "Lock_Status",
                "pRxBuffPtr": "Rx_Buffer_Ptr",
                "RxXferSize": "Rx_Transfer_Size",
                "RxXferCount": "Rx_Transfer_Count",
                "ErrorCode": "Error_Code",
                "HAL_UART_STATE_BUSY_RX": "UART_BUSY_RX",
                "HAL_UNLOCKED": "UNLOCKED",
                "Instance": "UART_Instance",
                "CR1": "UART_CR1",
                "CR3": "UART_CR3",
                "USART_CR1_RXNEIE": "UART_CR1_RXNEIE",
                "USART_CR3_EIE": "UART_CR3_EIE",
                "USART_CR1_RE": "UART_CR1_RE"
            },
            "code": "HAL_StatusTypeDef configureUART_080045a2(UART_HandleTypeDef *uart_handle,uint8_t *data,uint16_t size)\n{\n  if (uart_handle->RxState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->Lock != HAL_LOCKED) {\n    uart_handle->pRxBuffPtr = data;\n    uart_handle->RxXferSize = size;\n    uart_handle->RxXferCount = size;\n    uart_handle->ErrorCode = 0;\n    uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n    uart_handle->Lock = HAL_UNLOCKED;\n    uart_handle->Instance->CR1 |= USART_CR1_RXNEIE;\n    uart_handle->Instance->CR3 |= USART_CR3_EIE;\n    uart_handle->Instance->CR1 |= USART_CR1_RE;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "configureUART_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_evp_pkey_context_08001c32",
                "ctx": "pkey_ctx",
                "hw_config_FUN_08001c32": "initialize_hardware_config"
            },
            "code": "int initialize_evp_pkey_context_08001c32(EVP_PKEY_CTX *pkey_ctx) {\n  initialize_hardware_config();\n  return (int)pkey_ctx;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_evp_pkey_context_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "calculate_UART_state_080047e8",
                "*huart": "*uart_handle",
                "huart": "uart_handle",
                "RxState": "rx_state",
                "gState": "g_state",
                "HAL_UART_StateTypeDef": "UART_state"
            },
            "code": "HAL_UART_StateTypeDef calculate_UART_state_080047e8(UART_HandleTypeDef *uart_handle)\n{\n    HAL_UART_StateTypeDef rx_state = uart_handle->RxState;\n    HAL_UART_StateTypeDef g_state = uart_handle->gState;\n    return rx_state | g_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "imported": false,
            "current_name": "calculate_UART_state_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Bool": "bool",
                "PinName_conflict": "PinName_conflict",
                "PTR_digitalPin_08005838": "digitalPin",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured",
                "PTR_g_anOutputPinConfigured_0800583c": "output_pin_configured",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_PWM_08005840": "PinMap_PWM",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "switch": "switch",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_08005844": "dig_pin_configured"
            },
            "code": "void configure_pin_080057b4(uint32_t pin_number, uint32_t mode) {\n  PinName_conflict pin_name;\n  if (pin_number < 0x3c) {\n    pin_name = PTR_digitalPin_08005838[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    bool is_pin_configured = is_pin_configured(pin_name, (uint32_t*)PTR_g_anOutputPinConfigured_0800583c);\n    if (is_pin_configured) {\n      bool is_pin_in_pwm_map = pin_in_pinmap(pin_name, (PinMap_conflict*)PTR_PinMap_PWM_08005840);\n      if (is_pin_in_pwm_map) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name, (uint32_t*)PTR_g_anOutputPinConfigured_0800583c);\n    }\n    switch (mode) {\n      case 0:\n        digital_io_init(pin_name, 0, 0);\n        break;\n      case 1:\n        digital_io_init(pin_name, 1, 0);\n        break;\n      case 2:\n        digital_io_init(pin_name, 0, 1);\n        break;\n      case 3:\n        digital_io_init(pin_name, 0, 2);\n    }\n    set_pin_configured(pin_name, (uint32_t*)PTR_g_digPinConfigured_08005844);\n  }\n}",
            "called": [
                "digital_io_init",
                "pwm_stop",
                "is_pin_configured",
                "reset_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "setup",
                "MAX31855",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "init_08001b18",
                "*Input": "input",
                "*Output": "output",
                "*Setpoint": "setpoint",
                "Kp": "kp",
                "Ki": "ki",
                "Kd": "kd",
                "ControllerDirection": "controller_direction"
            },
            "code": "double *input, double *output, double *setpoint, double kp, double ki, double kd, int controller_direction\\n\"\n                      \"init_08001b18 * __thiscall init_08001b18::init_08001b18(init_08001b18 *this, double *input, double *output, double *setpoint, double kp, double ki, double kd, int controller_direction)\\n\"\n                      \"{\\n\"\n                      \"    init_08001b18(this, input, output, setpoint, kp, ki, kd, 1, controller_direction);\\n\"\n                      \"    return this;\\n\"\n                      \"}",
            "called": [
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "init_08001b18"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "uVar1": "xor_value",
                "bVar2": "is_x1_x2_zero",
                "bVar3": "is_y2_less_than_x2",
                "shift_value": "shift_value",
                "result": "result"
            },
            "code": "uint check_parameters_0800092c(uint x1, uint x2, uint y1, uint y2)\n{\n  uint result;\n  bool is_x1_x2_zero = (x1 | x2 << 1) == 0;\n  bool is_y1_y2_zero = (y1 | y2 << 1) == 0;\n  if (((int)(x2 << 1) >> 0x15 == -1 || (int)(y2 << 1) >> 0x15 == -1) && (((int)(x2 << 1) >> 0x15 == -1 && ((x1 | x2 << 0xc) != 0)) || (((int)(y2 << 1) >> 0x15 == -1 && ((y1 | y2 << 0xc) != 0))))){\n    return 1;\n  }\n  if (!is_x1_x2_zero || !is_y1_y2_zero){\n    if (x2 != y2 || x1 != y1){\n      uint xor_value = x2 ^ y2;\n      bool is_xor_value_zero = xor_value == 0;\n      if (-1 < (int)xor_value){\n        is_xor_value_zero = x2 == y2;\n      }\n      bool is_y2_less_than_x2 = -1 < (int)xor_value && y2 <= x2;\n      if (is_xor_value_zero){\n        is_y2_less_than_x2 = y1 <= x1;\n      }\n      uint shift_value = (int)y2 >> 0x1f;\n      if (!is_y2_less_than_x2){\n        shift_value = ~shift_value;\n      }\n      result = shift_value | 1;\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "__thiscall Print::FUN_08005d8a": "print_number",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "size",
                "FUN_08005d8aNumber": "print_number_base",
                "uint8_t": "uint8_t",
                "_vptr_Print": "_vptr_Print",
                "FUN_08005d8a": "print_number_08005d8a"
            },
            "code": "size_t __thiscall print_number_08005d8a(Print *printer, ulong number, int base) {\n  size_t size;\n  if (base != 0) {\n    size = print_number_08005d8a_base(printer, number, (uint8_t)base);\n  } else {\n    size = (**printer->_vptr_Print)(printer, number & 0xff);\n  }\n  return size;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_number_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_clk_source_08002560",
                "CLKSource": "clk_source",
                "*DAT_0800257c": "ptr_dat_0800257c"
            },
            "code": "void set_clk_source_08002560(uint32_t clk_source) {\n  if (clk_source != 4) {\n    *DAT_0800257c &= 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c |= 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clk_source_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_byte_in_memory_08006e90",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "size",
                "pbVar1": "current_byte",
                "pbVar2": "current_byte_checked"
            },
            "code": "void * find_byte_in_memory_08006e90(void *memory, int byte_to_find, size_t size) {\n  unsigned char *current_byte = (unsigned char *)memory;\n  while (current_byte != (unsigned char *)(size + (int)memory)) {\n    if ((uint)*current_byte == (byte_to_find & 0xffU)) {\n      return (void *)current_byte;\n    }\n    current_byte++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_08006920(int *error_code, int size)\n{\n  undefined *errno_ptr;\n  caddr_t memory_ptr;\n  errno_ptr = PTR_errno_0800693c;\n  *(undefined4 *)PTR_errno_0800693c = 0;\n  memory_ptr = _sbrk(size);\n  if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_080008ba",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "unaff_r4": "temp",
                "in_r12": "mask",
                "uVar1": "bit",
                "uVar2": "mask_shifted",
                "uVar3": "temp2",
                "bVar4": "is_a_b_zero"
            },
            "code": "ulonglong calculate_080008ba(uint a, uint b, uint c, uint d) {\n  uint mask = d >> 0x14;\n  uint temp = b;\n  if (c != a || mask != a) {\n    if (c == a) {\n      if ((a | b << 0xc) == 0 && mask != a) {\n        return (ulonglong)((b ^ d) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask == a) {\n      a = c;\n      temp = d;\n      if ((c | d << 0xc) == 0) {\n        return (ulonglong)((b ^ d) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool is_a_b_zero = (a | b << 1) == 0;\n      if (!is_a_b_zero) {\n        is_a_b_zero = (c | d << 1) == 0;\n      }\n      if (!is_a_b_zero) {\n        if (c == 0) {\n          temp = b & 0x80000000;\n          do {\n            uint bit = a & 0x80000000;\n            a = a << 1;\n            b = b * 2 + (uint)(bit != 0);\n          } while ((b & 0x100000) == 0);\n          b = b | temp;\n          if (mask != 0) {\n            return CONCAT44(b, a);\n          }\n        }\n        do {\n          temp = c & 0x80000000;\n          c = c << 1;\n          d = d * 2 + (uint)(temp != 0);\n        } while ((d & 0x100000) == 0);\n        return CONCAT44(b, a);\n      }\n      if ((a | b << 1) != 0) goto LAB_0800072c;\n      if ((c | d << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp, a) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "handle_i2c_events_08002d1c",
                "*hi2c": "*i2c_handle",
                "XferOptions": "transfer_options",
                "State": "state",
                "PreviousState": "previous_state",
                "Instance": "instance",
                "CR2": "cr2",
                "SR1": "sr1",
                "CR1": "cr1",
                "Mode": "mode",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "4": "I2C_TRANSFER_OPTIONS_RELOAD_AND_STOP",
                "8": "I2C_TRANSFER_OPTIONS_GENCALL",
                "DAT_08002dac": "I2C_TRANSFER_OPTIONS_DEFAULT"
            },
            "code": "HAL_StatusTypeDef handle_i2c_events_08002d1c(I2C_HandleTypeDef *i2c_handle) {\n  if (((i2c_handle->transfer_options == I2C_TRANSFER_OPTIONS_RELOAD_AND_STOP) || (i2c_handle->transfer_options == I2C_TRANSFER_OPTIONS_GENCALL)) && (i2c_handle->state == HAL_I2C_STATE_LISTEN)) {\n    i2c_handle->transfer_options = DAT_08002dac;\n    i2c_handle->instance->CR2 = i2c_handle->instance->CR2 & 0xfffff8ff;\n    i2c_handle->instance->SR1 = 0xfffffbff;\n    i2c_handle->instance->CR1 = i2c_handle->instance->CR1 & 0xfffffbff;\n    i2c_handle->previous_state = 0;\n    i2c_handle->state = HAL_I2C_STATE_READY;\n    i2c_handle->mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2c_handle);\n  }\n  else if (i2c_handle->state == HAL_I2C_STATE_BUSY_TX) {\n    i2c_handle->transfer_options = DAT_08002dac;\n    i2c_handle->previous_state = 0x21;\n    i2c_handle->state = HAL_I2C_STATE_READY;\n    i2c_handle->mode = HAL_I2C_MODE_NONE;\n    i2c_handle->instance->CR2 = i2c_handle->instance->CR2 & 0xfffff8ff;\n    i2c_handle->instance->SR1 = 0xfffffbff;\n    i2c_handle->instance->CR1 = i2c_handle->instance->CR1 & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n  }\n  else {\n    i2c_handle->instance->SR1 = 0xfffffbff;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_events_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_08005714",
                "file_UNUSED": "file_not_used"
            },
            "code": "int return_error_08005714(int file_not_used)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculatePeripheralClockFrequency_08003da4",
                "PeriphClk": "peripheralClock",
                "uVar1": "frequency",
                "uVar2": "multiplier",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMULFactorTable",
                "PTR_DAT_08003e8c": "PLLMUL_FACTOR_TABLE",
                "PTR_DAT_08003e90": "PLLMUL_FACTOR_TABLE",
                "DAT_08003e9c": "preMultipliedFrequency",
                "DAT_08003e94": "preMultipliedFrequency",
                "DAT_08003e98": "multiplier"
            },
            "code": "uint32_t calculatePeripheralClockFrequency_08003da4(uint32_t peripheralClock)\n{\n  uint32_t frequency = 0;\n  uint8_t predivFactorTable [2];\n  uint8_t pllMULFactorTable [16];\n  pllMULFactorTable[0] = *(uint32_t *)(PTR_DAT_08003e8c + 0);\n  pllMULFactorTable[1] = *(uint32_t *)(PTR_DAT_08003e8c + 4);\n  pllMULFactorTable[2] = *(uint32_t *)(PTR_DAT_08003e8c + 8);\n  predivFactorTable[0] = *(uint8_t *)(PREDIV_FACTOR_TABLE + 0);\n  predivFactorTable[1] = *(uint8_t *)(PREDIV_FACTOR_TABLE + 1);\n\n  if (peripheralClock == 2) {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((PTR_DAT_08003e8c[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (peripheralClock == 0x10) {\n    if ((*PTR_DAT_08003e8c & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      uint32_t DAT_08003e98 = pllMULFactorTable[(PTR_DAT_08003e8c[1] << 10) >> 0x1c];\n      uint32_t divider = predivFactorTable[-((int)(PTR_DAT_08003e8c[1] << 0xe) >> 0x1f)];\n      uint32_t DAT_08003e9c = DAT_08003e94 / divider;\n      frequency = DAT_08003e98 * DAT_08003e9c;\n      if ((PTR_DAT_08003e8c[1] & 0x400000) == 0) {\n        frequency = (uint32_t)((uint64_t)DAT_08003e98 * (uint64_t)(frequency * 2) >> 0x21);\n      }\n    }\n  }\n  else if (peripheralClock == 1) {\n    if ((PTR_DAT_08003e8c[8] & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else {\n      uint32_t uVar2 = PTR_DAT_08003e8c[8] & 0x300;\n      if ((uVar2 == 0x200) && ((PTR_DAT_08003e8c[9] & 2) != 0)) {\n        frequency = 32000;\n      }\n      else if (uVar2 == 0x300) {\n        if ((*PTR_DAT_08003e8c & 0x20000) == 0) {\n          frequency = 0;\n        }\n        else {\n          frequency = 0xf424;\n        }\n      }\n      else {\n        frequency = 0;\n      }\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "imported": false,
            "current_name": "calculatePeripheralClockFrequency_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initializeSerialBuffers_08005a44",
                "this": "hardwareSerial",
                "ctx": "context",
                "_serial": "serialPort",
                "rx_buff": "rxBuffer",
                "_rx_buffer": "rxBufferPtr",
                "rx_head": "rxHead",
                "rx_tail": "rxTail",
                "tx_buff": "txBuffer",
                "_tx_buffer": "txBufferPtr",
                "tx_head": "txHead",
                "tx_tail": "txTail"
            },
            "code": "int __thiscall initializeSerialBuffers_08005a44(HardwareSerial *hardwareSerial,EVP_PKEY_CTX *context)\n{\n  hardwareSerial->rx_buffer = hardwareSerial->_rx_buffer;\n  hardwareSerial->rx_head = 0;\n  hardwareSerial->rx_tail = 0;\n  hardwareSerial->tx_buffer = hardwareSerial->_tx_buffer;\n  hardwareSerial->tx_head = 0;\n  hardwareSerial->tx_tail = 0;\n  return (int)hardwareSerial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerialBuffers_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "isEndOfString_080009dc",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009dc(void)\n{\n  char currentChar;\n  __aeabi_cdcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "reset_uart_state_0800417c",
                "huart": "uart_handle",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "receive_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY"
            },
            "code": "void reset_uart_state_0800417c(UART_HandleTypeDef *uart_handle)\n{\n  // Reset UART control registers\n  uart_handle->Instance->CR1 &= ~(1 << 13);\n  uart_handle->Instance->CR3 &= ~(1 << 0);\n  // Set UART receive state to ready\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_state_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004b94(void)\n{\n  uint32_t current_tick;\n  current_tick = HAL_GetTick();\n  return current_tick;\n}\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_current_milli_seconds_080058e0",
                "uVar1": "current_milli_seconds"
            },
            "code": "uint32_t get_current_milli_seconds_080058e0(void)\n{\n  uint32_t current_milli_seconds = GetCurrentMilli();\n  return current_milli_seconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "setup",
                "Compute",
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "get_current_milli_seconds_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "update_PID_coefficients_08001918",
                "this": "pid",
                "NewSampleTime": "new_sample_time",
                "uVar1": "new_kd_int",
                "uVar2": "new_sample_time_double",
                "uVar3": "old_sample_time_double",
                "dVar4": "temp",
                "this->SampleTime": "pid->sample_time",
                "&this->ki": "&pid->ki",
                "&this->kd": "&pid->kd"
            },
            "code": "void __thiscall update_PID_coefficients_08001918(PID *pid, int new_sample_time)\n{\n    if (new_sample_time > 0) {\n        double new_sample_time_double = (double)new_sample_time;\n        double old_sample_time_double = (double)pid->sample_time;\n        double sample_time_ratio = new_sample_time_double / old_sample_time_double;\n        double new_ki = pid->ki * sample_time_ratio;\n        double new_kd = pid->kd / sample_time_ratio;\n        pid->ki = new_ki;\n        pid->kd = new_kd;\n        pid->sample_time = new_sample_time;\n    }\n    return;\n}",
            "called": [
                "__floatsidf",
                "__divdf3",
                "__muldf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "update_PID_coefficients_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "print_assertion_failure_0800611c",
                "param_1": "file_name",
                "param_2": "line_num",
                "param_3": "val1",
                "param_4": "error_code",
                "puVar1": "val1_ptr",
                "puVar2": "val2_ptr",
                "PTR_s__08006154": "default_val_ptr",
                "PTR_s___function__0800614c": "function_name_ptr",
                "PTR_s_assertion___s__failed__file___s__08006150": "assertion_failure_str",
                "PTR__impure_ptr_08006148": "impure_ptr"
            },
            "code": "void print_assertion_failure_0800611c(FILE *file, const char *file_name, int line_num, const char *assertion, const char *message, void *val1, void *val2, int error_code) {\n  void *val1_ptr = PTR_s__08006154;\n  void *val2_ptr = PTR_s__08006154;\n  if (val1 != NULL) {\n    val1_ptr = val1;\n    val2_ptr = PTR_s___function__0800614c;\n  }\n  fiprintf(*(FILE **)(*(int *)PTR__PTR__impure_ptr_08006148_08006148 + 0xc), PTR_s_assertion___s__failed__file___s__08006150, error_code, file_name, line_num, assertion, val2_ptr, val1_ptr, error_code);\n  abort();\n}",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failure_0800611c"
        },
        "FUN_0800049c": {
            "renaming": {
                "FUN_0800049c": "multiply_and_add_0800049c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "bVar1": "carry_bit",
                "uVar2": "multiplicand_copy",
                "uVar3": "multiplier_copy",
                "uVar4": "carry",
                "iVar5": "bit_count",
                "uVar6": "is_negative",
                "iVar7": "carry_flag",
                "uVar8": "bit_flag"
            },
            "code": "ulonglong multiply_and_add_0800049c(uint multiplicand, uint multiplier) {\n  byte carry_bit;\n  uint multiplicand_copy, multiplier_copy, carry, bit_count;\n  bool is_negative, carry_flag, bit_flag;\n  if ((multiplicand | multiplier) == 0) {\n    return CONCAT44(multiplier, multiplicand);\n  }\n  is_negative = (multiplier & 0x80000000) != 0;\n  multiplicand_copy = multiplicand;\n  if (is_negative) {\n    carry_flag = multiplicand != 0;\n    multiplicand_copy = -multiplicand;\n    multiplier_copy = -multiplier - carry_flag;\n  } else {\n    multiplier_copy = multiplier;\n  }\n  bit_count = 0x432;\n  if (multiplier_copy >> 0x16 != 0) {\n    bit_count = 3;\n    if (multiplier_copy >> 0x19 != 0) {\n      bit_count = 6;\n    }\n    if (multiplier_copy >> 0x1c != 0) {\n      bit_count += 3;\n    }\n    carry = bit_count - ((int)multiplier_copy >> 0x1f);\n    multiplicand_copy = multiplicand << (0x20 - carry & 0xff);\n    multiplier_copy = multiplier_copy >> carry | multiplier_copy << (0x20 - carry & 0xff);\n    multiplier_copy = multiplier_copy >> carry;\n    bit_count += 0x432;\n  }\n  while (multiplier_copy <= 0xfffff) {\n    carry_flag = (multiplier_copy >> 0x1f) != 0;\n    multiplier_copy = multiplier_copy << 1 | carry_flag;\n    multiplicand_copy = multiplicand_copy * 2 + carry_flag;\n    bit_count--;\n  }\n  if (multiplier_copy <= 0x1fffff) {\n    carry_flag = (multiplier_copy & 1) != 0;\n    multiplier_copy = multiplier_copy >> 1;\n    carry_bit = (byte)multiplicand_copy;\n    multiplicand_copy = (uint)(carry_flag != 0) << 0x1f | multiplicand_copy >> 1;\n    carry = (uint)(carry_bit & 1) << 0x1f | multiplicand >> 1;\n    bit_count++;\n    if ((uint)(bit_count * 0x200000) > 0xffbfffff) {\n      return (ulonglong)(is_negative | 0x7ff00000) << 0x20;\n    }\n  }\n  while ((multiplier_copy & 0x100000) != 0) {\n    carry = 0x20 - bit_count;\n    multiplier_copy = multiplier_copy << (carry & 0xff);\n    multiplicand_copy = multiplicand_copy >> (0xcU - bit_count & 0xff) | multiplicand_copy << (bit_count & 0xff);\n    bit_count++;\n  }\n  if (multiplier_copy <= 0x1e) {\n    carry = ~(bit_count - multiplier_copy);\n    if (carry > 0x1e) {\n      return CONCAT44(multiplier, multiplicand_copy >> (carry - 0x1f & 0xff)) & 0x80000000ffffffff;\n    }\n    bit_count = carry - 0x13;\n    if (bit_count == 0 || (bit_count < 0) != (carry - 0x1f < 0xc)) {\n      carry++;\n      return CONCAT44(is_negative | multiplier_copy >> (carry & 0xff), multiplicand_copy >> (carry & 0xff) | multiplier_copy << (0x20 - carry & 0xff));\n    }\n    return CONCAT44(multiplier, multiplicand_copy >> (0x20 - (0xcU - bit_count) & 0xff) | multiplier_copy << (0xcU - bit_count & 0xff)) & 0x80000000ffffffff;\n  }\n  carry = ~(bit_count - multiplier_copy);\n  if (carry > 0x1e) {\n    return CONCAT44(multiplier, multiplicand_copy >> (carry - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  return CONCAT44(is_negative | multiplicand_copy + (carry - bit_count) * 0x100000 | multiplier & 0xfffff0000000000, multiplicand_copy + (multiplier_copy >> 0x1f | carry));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800049c",
            "calling": [],
            "imported": false,
            "current_name": "multiply_and_add_0800049c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "is_pin_set_high_080047f4",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool is_pin_set_high_080047f4(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = ((int)pin << 0x18) >> 0x1c;\n    uint32_t pin_mask = (1 << ((int)pin & 0xfU));\n    uint32_t pin_value = (pin_map[pin_index] & pin_mask);\n    return (_Bool)(pin_value != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_set_high_080047f4"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "configureI2C_08002c10",
                "hi2c": "handle",
                "pIVar1": "i2cInstance",
                "HAL_I2C_STATE_READY": "HAL_I2C_READY",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_LISTEN",
                "CR1": "I2C_CR1",
                "CR2": "I2C_CR2",
                "HAL_BUSY": "HAL_ERROR_BUSY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureI2C_08002c10(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *i2cInstance;\n  \n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  i2cInstance = handle->Instance;\n  if ((i2cInstance->CR1 & I2C_CR1_PE) == 0) {\n    i2cInstance->CR1 |= I2C_CR1_PE;\n  }\n  i2cInstance->CR1 |= I2C_CR1_ACK;\n  i2cInstance->CR2 |= (I2C_CR2_ITERREN | I2C_CR2_ITEVTEN);\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "configureI2C_08002c10"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_not_equal_to_zero_or_both_are_zero_080009f0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_not_equal_to_zero_or_both_are_zero_080009f0(void)\n{\n  bool is_CY_zero = __aeabi_cdcmpeq();\n  bool is_ZR_zero = (bool)in_ZR;\n  return !is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_zero_or_both_are_zero_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "sendValue_0800134e",
                "this": "lcd",
                "value": "data"
            },
            "code": "size_t __thiscall LiquidCrystal::sendValue_0800134e(LiquidCrystal *lcd,uint8_t value)\n{\n  send(lcd,value,'\\x01');\n  return 1;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "sendValue_0800134e"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "flush_if_buffer_full_08006be0",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "param_3": "write_mode",
                "param_4": "flags",
                "uVar1": "result",
                "PTR___sf_fake_stdin_08006c28": "PTR___sf_fake_stdin_08006c28",
                "PTR___sf_fake_stdout_08006c2c": "PTR___sf_fake_stdout_08006c2c",
                "PTR___sf_fake_stderr_08006c30": "PTR___sf_fake_stderr_08006c30",
                "stream_buffer_size": "stream_buffer_size"
            },
            "code": "int flush_if_buffer_full_08006be0(int file_descriptor, void* stream, int write_mode, int flags) {\n  int result;\n  int* stream_buffer_size = (int*)(stream + 0x10);\n  if (*stream_buffer_size != 0) {\n    if ((file_descriptor != 0) && (*(int*)(file_descriptor + 0x18) == 0)) {\n      __sinit();\n    }\n    if (stream == PTR___sf_fake_stdin_08006c28) {\n      stream = *(void**)(file_descriptor + 4);\n    }\n    else if (stream == PTR___sf_fake_stdout_08006c2c) {\n      stream = *(void**)(file_descriptor + 8);\n    }\n    else if (stream == PTR___sf_fake_stderr_08006c30) {\n      stream = *(void**)(file_descriptor + 0xc);\n    }\n    if (*(short*)(stream + 0xc) != 0) {\n      result = __sflush_r(file_descriptor, stream, write_mode, flags);\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_full_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "writeToDataPins_080012e8",
                "this": "lcd",
                "value": "data",
                "uVar1": "i"
            },
            "code": "void __thiscall LiquidCrystal::writeToDataPins_080012e8(LiquidCrystal *lcd, uint8_t value) {\n  for (uint8_t i = 0; i < 8; i++) {\n    digitalWrite((uint)lcd->_data_pins[i], (value >> i) & 1);\n  }\n  pulseEnable(lcd);\n  return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "send"
            ],
            "imported": false,
            "current_name": "writeToDataPins_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "write_string_to_stream_08006370",
                "param_1": "stream_id",
                "param_2": "byte_count",
                "param_3": "string",
                "param_4": "current_position",
                "iVar1": "write_result",
                "puVar2": "string_end",
                "iVar3": "current_byte_count"
            },
            "code": "int write_string_to_stream_08006370(int stream_id, int byte_count, char *string, int current_position) {\n  int write_result;\n  char *string_end = string + byte_count;\n  int current_byte_count = byte_count;\n  do {\n    if (string == string_end) {\n      return 0;\n    }\n    write_result = __sfputc_r(stream_id, *string, byte_count, current_position, current_byte_count);\n    current_position = write_result + 1;\n    string++;\n  } while (current_position != 0);\n  return write_result;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_string_to_stream_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_interrupt_enable_bit_080024f8",
                "IRQn": "interrupt_number",
                "uVar1": "interrupt_number",
                "DAT_08002510": "interrupt_enable_register_base_address"
            },
            "code": "void set_interrupt_enable_bit_080024f8(IRQn_Type_conflict IRQn)\n{\n  uint32_t interrupt_number = (uint32_t)IRQn;\n  if (interrupt_number >= 0) {\n    *(int *)(DAT_08002510 + (interrupt_number >> 5) * 4) = 1 << (interrupt_number & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "uart_attach_tx_callback",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_enable_bit_080024f8"
        },
        "FUN_0800594e": {
            "renaming": {
                "FUN_0800594e": "readByte_0800594e",
                "this": "serial",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uVar2": "tailIndex",
                "bVar1": "byteToRead"
            },
            "code": "ssize_t __thiscall HardwareSerial::readByte_0800594e(HardwareSerial *serial,int fileDescriptor,void *buffer,size_t numBytes) {\n  byte byteToRead;\n  ushort tailIndex;\n  tailIndex = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)tailIndex) {\n    byteToRead = (serial->_serial).rx_buff[tailIndex];\n    (serial->_serial).rx_tail = (tailIndex + 1) & 0x3f;\n    return (uint)byteToRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800594e",
            "calling": [],
            "imported": false,
            "current_name": "readByte_0800594e"
        },
        "FUN_080056a8": {
            "renaming": {
                "FUN_080056a8": "handle_USART2_interrupt_080056a8",
                "PTR_uart_handlers_080056bc": "uart_handlers"
            },
            "code": "void handle_USART2_interrupt_080056a8(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_080056bc[1]);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART2_interrupt_080056a8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "PIDController_08001ab0",
                "this": "PIDController",
                "Input": "input",
                "Output": "output",
                "Setpoint": "setpoint",
                "Kp": "Kp",
                "Ki": "Ki",
                "Kd": "Kd",
                "POn": "POn",
                "ControllerDirection": "controllerDirection",
                "in_stack_ffffffe8": "PTR_ffffffe8",
                "in_stack_ffffffec": "PTR_ffffffec",
                "in_stack_fffffff4": "PTR_fffffff4",
                "POn_00": "PTR_fffffff0",
                "myOutput": "output",
                "myInput": "input",
                "mySetpoint": "setpoint",
                "inAuto": "inAuto",
                "SetOutputLimits": "setOutputLimits",
                "SampleTime": "sampleTime",
                "SetControllerDirection": "setControllerDirection",
                "SetTunings": "setTunings",
                "millis": "millis",
                "lastTime": "lastTime"
            },
            "code": "class PIDController_08001ab0 {\\n\\\n    \\n\\\n    public:\\n\\\n        double* input;\\n\\\n        double* output;\\n\\\n        double* setpoint;\\n\\\n        bool inAuto;\\n\\\n        int sampleTime;\\n\\\n        double Kp;\\n\\\n        double Ki;\\n\\\n        double Kd;\\n\\\n        int POn;\\n\\\n        int controllerDirection;\\n\\\n        uint32_t lastTime;\\n\\\n        \\n\\\n        PIDController_08001ab0(double* Input, double* Output, double* Setpoint, double Kp, double Ki, double Kd, int POn, int ControllerDirection) {\\n\\\n            input = Input;\\n\\\n            output = Output;\\n\\\n            setpoint = Setpoint;\\n\\\n            inAuto = false;\\n\\\n            setOutputLimits((double)CONCAT44(DAT_08001b14,DAT_08001b10), (double)CONCAT44(PTR_ffffffec,PTR_ffffffe8));\\n\\\n            sampleTime = 100;\\n\\\n            setControllerDirection(ControllerDirection);\\n\\\n            setTunings(Ki, Kd, (double)CONCAT44(PTR_fffffff4,PTR_fffffff0), POn);\\n\\\n            lastTime = millis() - sampleTime;\\n\\\n        }\\n\\\n        \\n\\\n        void setOutputLimits(double, double);\\n\\\n        void setControllerDirection(int);\\n\\\n        void setTunings(double, double, double, int);\\n\\\n        void compute();\\n\\\n        \\n\\\n    private:\\n\\\n        double iTerm;\\n\\\n        double lastInput;\\n\\\n        double lastOutput;\\n\\\n        double outputSum;\\n\\\n    };\\n\\\n    \\n\\\n    void PIDController_08001ab0::setOutputLimits(double min, double max) {\\n\\\n        // implementation\\n\\\n    }\\n\\\n    \\n\\\n    void PIDController_08001ab0::setControllerDirection(int direction) {\\n\\\n        // implementation\\n\\\n    }\\n\\\n    \\n\\\n    void PIDController_08001ab0::setTunings(double Kp, double Ki, double Kd, int POn) {\\n\\\n        // implementation\\n\\\n    }\\n\\\n    \\n\\\n    void PIDController_08001ab0::compute() {\\n\\\n        // implementation\\n\\\n    }",
            "called": [
                "SetControllerDirection",
                "millis",
                "SetOutputLimits",
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "PIDController_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "handle_signal_08006ac0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_signal_08006ac0(void)\n{\n  raise(SIGABRT);\n  _exit(EXIT_FAILURE);\n}",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "imported": false,
            "current_name": "handle_signal_08006ac0"
        },
        "FUN_08007220": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_08007220": "set_flags",
                "PTR_id_08007284": "ptr1",
                "PTR_id_08007288": "ptr2",
                "PTR_id_0800728c": "ptr3",
                "PTR_id_08007290": "ptr4",
                "PTR_id_08007294": "ptr5",
                "PTR_id_08007298": "ptr6",
                "PTR_id_0800729c": "ptr7",
                "PTR_id_080072a0": "ptr8",
                "FUN_08007220": "set_flags_08007220"
            },
            "code": "void set_flags_08007220() {\n  if (*(int *)PTR_id_08007284 < 0) {\n    *(undefined4 *)PTR_id_08007284 = 1;\n  }\n  if (*(int *)PTR_id_08007288 < 0) {\n    *(undefined4 *)PTR_id_08007288 = 1;\n  }\n  if (*(int *)PTR_id_0800728c < 0) {\n    *(undefined4 *)PTR_id_0800728c = 1;\n  }\n  if (*(int *)PTR_id_08007290 < 0) {\n    *(undefined4 *)PTR_id_08007290 = 1;\n  }\n  if (*(int *)PTR_id_08007294 < 0) {\n    *(undefined4 *)PTR_id_08007294 = 1;\n  }\n  if (*(int *)PTR_id_08007298 < 0) {\n    *(undefined4 *)PTR_id_08007298 = 1;\n  }\n  if (*(int *)PTR_id_0800729c < 0) {\n    *(undefined4 *)PTR_id_0800729c = 1;\n  }\n  if (*(int *)PTR_id_080072a0 < 0) {\n    *(undefined4 *)PTR_id_080072a0 = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007220",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_08007220"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "sendUARTData_08004198",
                "huart": "uart",
                "HAL_UART_STATE_BUSY_TX": "HAL_BUSY",
                "WordLength": "wordLength",
                "pTxBuffPtr": "txBufferPtr",
                "Parity": "parity",
                "TxXferCount": "txTransferCount",
                "Instance": "instance",
                "DR": "dataRegister",
                "CR1": "controlRegister1"
            },
            "code": "HAL_StatusTypeDef_conflict sendUARTData_08004198(UART_HandleTypeDef *uart)\n{\n  uint16_t wordLength;\n  byte *txBufferPtr;\n  \n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  \n  wordLength = (uart->Init).WordLength;\n  txBufferPtr = uart->pTxBuffPtr;\n  \n  if (wordLength == 0x1000) {\n    uint16_t *data = (uint16_t*)txBufferPtr;\n    uint16_t maskedData = *data & 0x1ff;\n    huart->Instance->DR = maskedData;\n    if ((uart->Init).Parity == 0) {\n      uart->pTxBuffPtr = txBufferPtr + 2;\n    }\n    else {\n      uart->pTxBuffPtr = txBufferPtr + 1;\n    }\n  }\n  else {\n    uint8_t data = *txBufferPtr;\n    huart->Instance->DR = (uint)data;\n    uart->pTxBuffPtr = txBufferPtr + 1;\n  }\n  \n  uart->TxXferCount--;\n  \n  if (uart->TxXferCount == 0) {\n    huart->Instance->CR1 &= 0xffffff7f;\n    huart->Instance->CR1 |= 0x40;\n    return HAL_OK;\n  }\n  \n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "sendUARTData_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "HAL_StatusTypeDef_configureTickPriority_08001c3c",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfig",
                "sysClock": "sysClock",
                "PTR_SystemCoreClock_08001c80": "PTR_SystemCoreClock_08001c80",
                "tickFreq": "tickFreq",
                "PTR_uwTickFreq_08001c7c": "PTR_uwTickFreq_08001c7c",
                "result": "result",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_OK": "HAL_OK",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001c84": "PTR_uwTickPrio_08001c84"
            },
            "code": "HAL_StatusTypeDef_configureTickPriority_08001c3c(uint32_t tickPriority)\n{\n  uint32_t sysClock = *(uint *)PTR_SystemCoreClock_08001c80;\n  uint32_t tickFreq = *(uint8_t *)PTR_uwTickFreq_08001c7c;\n  uint32_t systickConfig = sysClock / (1000 / tickFreq);\n  HAL_StatusTypeDef result = HAL_SYSTICK_Config(systickConfig);\n  if (result != HAL_OK) {\n    return HAL_ERROR;\n  }\n  if (tickPriority > 0xf) {\n    return HAL_ERROR;\n  }\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08001c84 = tickPriority;\n  return HAL_OK;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "HAL_StatusTypeDef_configureTickPriority_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint input1, int input2, uint input3, int input4) {\n  bool is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  bool is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n  if (is_input2_valid && is_input4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "sendToDisplay_08001366",
                "this": "lcd",
                "col": "column",
                "row": "row_index",
                "uVar1": "row_index",
                "_numlines": "_num_display_lines",
                "_row_offsets": "_display_row_offsets",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void __thiscall LiquidCrystal::sendToDisplay_08001366(LiquidCrystal *lcd,uint8_t col,uint8_t row)\n{\n  uint8_t row_index;\n  \n  row_index = (uint8_t)row;\n  if (row_index > 3) {\n    row_index = 3;\n  }\n  if (lcd->_numlines <= row_index) {\n    row_index = (lcd->_numlines - 1) & 0xff;\n  }\n  uint8_t display_col = col + lcd->_row_offsets[row_index] | 0x80;\n  uint8_t command = \"\\0\";\n  send(lcd, display_col, command);\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "sendToDisplay_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "digitalPinWrite_08005848",
                "ulPin": "pin",
                "ulVal": "value",
                "_Var1": "isConfigured",
                "port": "port",
                "uVar2": "digitalPinIndex",
                "PTR_digitalPin_08005888": "digitalPinArray",
                "PTR_g_digPinConfigured_0800588c": "digitalPinConfigured",
                "GPIO_TypeDef": "GPIO_TypeDef",
                "PinName_conflict": "PinName_conflict",
                "get_GPIO_Port": "getGPIOPort",
                "digital_io_write": "digitalIOWrite"
            },
            "code": "void digitalPinWrite_08005848(uint32_t pin, uint32_t value)\n{\n  bool isConfigured;\n  GPIO_TypeDef *port;\n  uint32_t digitalPinIndex;\n  \n  if (pin < 0x3c) {\n    digitalPinIndex = (uint32_t)(char)PTR_digitalPin_08005888[pin];\n  }\n  else {\n    digitalPinIndex = 0xffffffff;\n  }\n  if ((digitalPinIndex != 0xffffffff) && (isConfigured = isPinConfigured((PinName_conflict)digitalPinIndex, &PTR_g_digPinConfigured_0800588c))) {\n    port = getGPIOPort((digitalPinIndex << 0x18) >> 0x1c);\n    digitalIOWrite(port, 1 << (digitalPinIndex & 0xf) & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "is_pin_configured",
                "digital_io_write",
                "get_GPIO_Port"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "readData",
                "write4bits",
                "send",
                "setup",
                "MAX31855",
                "begin",
                "write8bits",
                "pulseEnable",
                "loop"
            ],
            "imported": false,
            "current_name": "digitalPinWrite_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "interrupt_and_return_08000ae8",
                "a0": "input_value",
                "a1": "interrupt_code",
                "a2": "interrupt_flag"
            },
            "code": "uint32_t interrupt_and_return_08000ae8(uint32_t input_value, uint32_t interrupt_code, int32_t interrupt_flag)\n{\n  software_interrupt(interrupt_code);\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_and_return_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "reset_timer_08003ed8",
                "htim": "timer_handle",
                "pTVar1": "timer_instance",
                "HAL_TIM_STATE_BUSY": "TIMER_BUSY",
                "HAL_TIM_STATE_RESET": "TIMER_RESET",
                "HAL_UNLOCKED": "UNLOCKED",
                "HAL_TIM_PWM_MspDeInit": "deinitialize_timer_pwm",
                "HAL_OK": "TIMER_OK"
            },
            "code": "HAL_StatusTypeDef_conflict reset_timer_08003ed8(TIM_HandleTypeDef *htim)\n{\n  TIM_TypeDef *timer_instance;\n  timer_instance = htim->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= ~(1U);\n  }\n  HAL_TIM_PWM_MspDeInit(htim);\n  htim->State = HAL_TIM_STATE_RESET;\n  htim->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "reset_timer_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "memset_080061e0",
                "__s": "pointer",
                "__c": "value",
                "__n": "num",
                "puVar1": "p"
            },
            "code": "void * memset_080061e0(void *pointer, int value, size_t num) {\n  unsigned char *p = pointer;\n  for (size_t i = 0; i < num; i++) {\n    *p++ = (unsigned char)value;\n  }\n  return pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "__sfp",
                "adc_read_value",
                "std.isra.0",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "memset_080061e0"
        },
        "FUN_08004f0c": {
            "renaming": {
                "FUN_08004f0c": "handle_i2c_event_interrupt_08004f0c",
                "PTR_i2c_handles_08004f18": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_event_interrupt_08004f0c(void)\n{\n  I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef**)PTR_i2c_handles_08004f18;\n  HAL_I2C_EV_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f0c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08004f0c"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "*huart": "*uart_handler",
                "bVar1": "uart_index",
                "uVar2": "uart_index_uint",
                "iVar3": "callback_result",
                "iVar4": "callback_obj_address",
                "PTR_tx_callback_obj_08005644": "PTR_tx_callback_obj_address",
                "PTR_tx_callback_08005648": "PTR_tx_callback_address",
                "PTR_uart_handlers_0800564c": "PTR_uart_handlers_address"
            },
            "code": "void transmit_data_08005604(UART_HandleTypeDef *uart_handler) {\n    uint8_t uart_index = get_uart_index(uart_handler);\n    uint32_t callback_obj_address = *(uint32_t *)(PTR_tx_callback_obj_08005644 + uart_index * 4);\n    if (uart_index < 5) {\n        uint32_t callback_address = *(uint32_t *)(PTR_tx_callback_08005648 + uart_index * 4);\n        int result = (*(void (**)(uint32_t))(callback_address))(callback_obj_address);\n        if (result != -1) {\n            uint8_t* data = (uint8_t*)(*(uint32_t *)(callback_obj_address + 100) + *(uint16_t *)(callback_obj_address + 0x6a));\n            HAL_UART_Transmit_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_0800564c + *(uint8_t *)(callback_obj_address + 0x44) * 4), data, 1);\n        }\n    }\n}\n",
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "alwaysReturnsOne_08005724",
                "file_UNUSED": "fileDescriptor"
            },
            "code": "int alwaysReturnsOne_08005724(int fileDescriptor) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "alwaysReturnsOne_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "file_is_unused_08005728",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "ptr_is_unused",
                "dir_UNUSED": "dir_is_unused"
            },
            "code": "int file_is_unused_08005728(int file_descriptor, int ptr_is_unused, int dir_is_unused) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "file_is_unused_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "send_control_signal_0800135a",
                "this": "lcd",
                "'\\x01'": "CONTROL_SIGNAL"
            },
            "code": "void send_control_signal_0800135a(LiquidCrystal *lcd){\n  send(lcd, CONTROL_SIGNAL, 0);\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "setup",
                "begin",
                "loop"
            ],
            "imported": false,
            "current_name": "send_control_signal_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "__thiscall Print::FUN_08005c96": "size_t Print::printString",
                "this": "this",
                "str": "stringToPrint",
                "sVar1": "stringLength",
                "sVar2": "printedLength",
                "_vptr_Print": "virtualFunctionTable",
                "FUN_08005c96": "printString_08005c96"
            },
            "code": "size_t Print::printString_08005c96(Print *this, char *stringToPrint) {\n  size_t stringLength;\n  size_t printedLength;\n\n  if (stringToPrint != NULL) {\n    stringLength = strlen(stringToPrint);\n    printedLength = (*this->virtualFunctionTable[1])(stringLength, stringToPrint, stringLength);\n    return printedLength;\n  }\n  return 0;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "setup",
                "printFloat",
                "println",
                "loop"
            ],
            "imported": false,
            "current_name": "printString_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_file_mode_to_directory_0800571a",
                "file_UNUSED": "",
                "st": "file_stats"
            },
            "code": "int set_file_mode_to_directory_0800571a(stat *file_stats) {\n  file_stats->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "handle_i2c_transfer_08002efc",
                "hi2c": "i2c_handle",
                "uVar1": "transfer_options",
                "pbVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef handle_i2c_transfer_08002efc(I2C_HandleTypeDef *i2c_handle) {\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2c_handle->XferCount == 0) {\n      if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n        i2c_handle->PreviousState = 0;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2c_handle);\n        }\n      }\n      else {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->PreviousState = 0x11;\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      i2c_handle->Instance->DR = (uint)*buffer_ptr;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "delay_0800365c",
                "mdelay": "milliseconds",
                "Delay": "delay_cycles",
                "bVar1": "delay_complete",
                "DAT_08003684": "system_core_clock_multiplier",
                "PTR_SystemCoreClock_08003680": "system_core_clock_frequency_pointer"
            },
            "code": "void delay_0800365c(uint32_t milliseconds)\n{\n  bool delay_0800365c_complete;\n  uint32_t delay_0800365c_cycles = milliseconds * (uint)((ulonglong)DAT_08003684 * (ulonglong)*PTR_SystemCoreClock_08003680 >> 0x29);\n  do {\n    delay_0800365c_complete = delay_0800365c_cycles != 0;\n    delay_0800365c_cycles--;\n  } while (delay_0800365c_complete);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_0800365c"
        },
        "FUN_08006ad0": {
            "renaming": {
                "FUN_08006ad0": "read_input_08006ad0",
                "param_1": "input_buffer",
                "param_2": "input_params",
                "iVar1": "block_size",
                "piVar2": "temp_ptr",
                "uVar3": "input_size",
                "uVar4": "temp_input_size",
                "iVar5": "temp_value",
                "pcVar6": "read_func_ptr",
                "iVar7": "block_offset",
                "uVar8": "temp_value2",
                "bVar9": "is_temp_value_zero"
            },
            "code": "int read_input_08006ad0(uint *input_buffer, int *input_params) {\n    int read_size;\n    int *temp_ptr;\n    uint input_size = (uint)*(ushort *)(input_params + 3);\n    if ((int)(input_size << 0x1c) < 0) {\n        int block_size = input_params[4];\n        if (block_size != 0) {\n            int temp_value = input_size << 0x1e;\n            bool is_temp_value_zero = temp_value != 0;\n            if (is_temp_value_zero) {\n                temp_value = 0;\n            }\n            int block_offset = *input_params;\n            if (!is_temp_value_zero) {\n                temp_value = input_params[5];\n            }\n            *input_params = block_size;\n            input_params[2] = temp_value;\n            for (block_offset = block_offset - block_size; block_offset > 0; block_offset = block_offset - temp_value) {\n                temp_value = (*(code *)input_params[10])(input_buffer, input_params[8], block_size, block_offset);\n                if (temp_value < 1) {\n                    *(ushort *)(input_params + 3) = (ushort)input_size;\n                    return -1;\n                }\n                block_size = block_size + temp_value;\n            }\n        }\n    }\n    else if (((0 < input_params[1]) || (0 < input_params[0x10])) && (input_params[0xb] != (int *)0x0)) {\n        code *read_func_ptr = (code *)input_params[0xb];\n        uint temp_input_size = *input_buffer;\n        *input_buffer = 0;\n        if ((input_size & 0x1000) == 0) {\n            read_size = (*read_func_ptr)(input_buffer, input_params[8], input_size & 0x1000, 1);\n            if ((read_size == -1) && (*input_buffer != 0)) {\n                if ((*input_buffer != 0x1d) && (*input_buffer != 0x16)) {\n                    *(ushort *)(input_params + 3) = *(ushort *)(input_params + 3) | 0x40;\n                    return -1;\n                }\n                *input_buffer = temp_input_size;\n                return 0;\n            }\n        }\n        else {\n            read_size = input_params[0x15];\n        }\n        if (((int)((uint)*(ushort *)(input_params + 3) << 0x1d) < 0) && (input_params[0xd] != 0)) {\n            read_size = read_size - input_params[1];\n            if (input_params[0xd] != input_params + 0x11) {\n                _free_r(input_buffer);\n            }\n            input_params[0xd] = 0;\n            return -1;\n        }\n        read_size = (*(code *)input_params[0xb])(input_buffer, input_params[8], read_size, 0);\n        ushort temp_input_size2 = *(ushort *)(input_params + 3);\n        if ((read_size == -1) && ((0x1d < *input_buffer || (-1 < (int)((DAT_08006bdc >> (*input_buffer & 0xff)) << 0x1f))))) {\n            *(ushort *)(input_params + 3) = temp_input_size2 | 0x40;\n            return -1;\n        }\n        input_params[1] = 0;\n        *input_params = input_params[4];\n        if (((int)((uint)temp_input_size2 << 0x13) < 0) && ((read_size != -1 || (*input_buffer == 0)))) {\n            input_params[0x15] = read_size;\n        }\n        temp_ptr = (int *)input_params[0xd];\n        *input_buffer = temp_input_size;\n        if (temp_ptr != (int *)0x0) {\n            if (temp_ptr != input_params + 0x11) {\n                _free_r(input_buffer);\n            }\n            input_params[0xd] = 0;\n            return 0;\n        }\n    }\n    return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ad0",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "read_input_08006ad0"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "handle_I2C_events_080033b8",
                "hi2c": "i2c_handle",
                "pIVar1": "i2c_instance",
                "uVar2": "SR1_reg",
                "uVar3": "CR2_reg",
                "uVar4": "SR2_reg"
            },
            "code": "void handle_I2C_events_080033b8(I2C_HandleTypeDef *i2c_handle) {\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint16_t SR1_reg = i2c_instance->SR1;\n  uint16_t SR2_reg = i2c_instance->SR2;\n  uint16_t CR2_reg = i2c_instance->CR2;\n  if ((i2c_handle->Mode == HAL_I2C_MODE_MASTER) || (i2c_handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((SR1_reg & I2C_SR1_SB) == 0) || ((CR2_reg & I2C_CR2_ITEVTEN) == 0)) {\n      if (((SR1_reg & I2C_SR1_ADDR) == 0) || ((CR2_reg & I2C_CR2_ITEVTEN) == 0)) {\n        if (((SR1_reg & I2C_SR1_TXE) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n          I2C_MasterTransmit_TXE(i2c_handle);\n        }\n      }\n      else {\n        I2C_Master_ADD10(i2c_handle);\n      }\n    }\n    else {\n      I2C_Master_SB(i2c_handle);\n    }\n    if ((SR2_reg & I2C_SR2_MSL) == 0) {\n      if ((((SR1_reg & I2C_SR1_RXNE) != 0) && ((CR2_reg & I2C_CR2_ITBUFEN) != 0)) && ((SR1_reg & I2C_SR1_BTF) == 0)) {\n        I2C_MasterReceive_RXNE(i2c_handle);\n        return;\n      }\n      if (((SR1_reg & I2C_SR1_BTF) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_MasterReceive_BTF(i2c_handle);\n        return;\n      }\n    }\n    else {\n      if ((((SR1_reg & I2C_SR1_TXE) != 0) && ((CR2_reg & I2C_CR2_ITBUFEN) != 0)) && ((SR1_reg & I2C_SR1_BTF) == 0)) {\n        I2C_MasterTransmit_TXE(i2c_handle);\n        return;\n      }\n      if (((SR1_reg & I2C_SR1_BTF) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_MasterTransmit_BTF(i2c_handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((SR1_reg & I2C_SR1_ADDR) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n      I2C_Slave_ADDR(i2c_handle);\n      return;\n    }\n    if (((SR1_reg & I2C_SR1_STOPF) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n      I2C_Slave_STOPF(i2c_handle);\n      return;\n    }\n    if ((SR2_reg & I2C_SR2_MSL) == 0) {\n      if ((((SR1_reg & I2C_SR1_RXNE) != 0) && ((CR2_reg & I2C_CR2_ITBUFEN) != 0)) && ((SR1_reg & I2C_SR1_BTF) == 0)) {\n        I2C_SlaveReceive_RXNE(i2c_handle);\n        return;\n      }\n      if (((SR1_reg & I2C_SR1_BTF) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_SlaveReceive_BTF(i2c_handle);\n      }\n    }\n    else {\n      if ((((SR1_reg & I2C_SR1_TXE) != 0) && ((CR2_reg & I2C_CR2_ITBUFEN) != 0)) && ((SR1_reg & I2C_SR1_BTF) == 0)) {\n        I2C_SlaveTransmit_TXE(i2c_handle);\n        return;\n      }\n      if (((SR1_reg & I2C_SR1_BTF) != 0) && ((CR2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_SlaveTransmit_BTF(i2c_handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_ADDR",
                "I2C_Slave_STOPF",
                "I2C_Master_ADD10",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_ADDR",
                "I2C_MasterReceive_RXNE"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_events_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "read_input_080069e4",
                "param_1": "read_result",
                "param_2": "stream",
                "iVar3": "impure_ptr",
                "PTR__impure_ptr_08006ab0": "impure_ptr_address",
                "PTR___sf_fake_stdin_08006ab4": "fake_stdin_address",
                "PTR___sf_fake_stdout_08006ab8": "fake_stdout_address",
                "PTR___sf_fake_stderr_08006abc": "fake_stderr_address",
                "uVar1": "flags_as_int",
                "uVar2": "flags",
                "flags": "flags",
                "flags_as_int": "flags_as_int"
            },
            "code": "uint read_input_080069e4(uint *read_result, uint *stream)\n{\n  uint impure_ptr = *(uint *)PTR__impure_ptr_08006ab0;\n  if ((impure_ptr != 0) && (*(uint *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  if (stream == (uint *)PTR___sf_fake_stdin_08006ab4) {\n    stream = *(uint **)(impure_ptr + 4);\n  }\n  else if (stream == (uint *)PTR___sf_fake_stdout_08006ab8) {\n    stream = *(uint **)(impure_ptr + 8);\n  }\n  else if (stream == (uint *)PTR___sf_fake_stderr_08006abc) {\n    stream = *(uint **)(impure_ptr + 0xc);\n  }\n  ushort flags = *(ushort *)(stream + 3);\n  uint flags_as_int = (uint)flags;\n  if (-1 < (int)(flags_as_int << 0x1c)) {\n    if (-1 < (int)(flags_as_int << 0x1b)) {\n      *read_result = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(flags_as_int << 0x1d) < 0) {\n      if ((uint *)stream[0xd] != (uint *)0x0) {\n        if ((uint *)stream[0xd] != stream + 0x11) {\n          _free_r(read_result);\n        }\n        stream[0xd] = 0;\n      }\n      *(ushort *)(stream + 3) = *(ushort *)(stream + 3) & 0xffdb;\n      stream[1] = 0;\n      *stream = stream[4];\n    }\n    *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 8;\n  }\n  if ((stream[4] == 0) && ((*(ushort *)(stream + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(read_result, stream);\n  }\n  flags = *(ushort *)(stream + 3);\n  flags_as_int = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      flags_as_int = stream[5];\n    }\n    stream[2] = flags_as_int;\n  }\n  else {\n    stream[2] = 0;\n    stream[6] = -stream[5];\n  }\n  if (stream[4] == 0) {\n    flags = *(ushort *)(stream + 3);\n    flags_as_int = (int)(short)flags & 0x80;\n    if (flags_as_int != 0) {\nLAB_08006a14:\n      *(ushort *)(stream + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    flags_as_int = 0;\n  }\n  return flags_as_int;\n}",
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "read_input_080069e4"
        },
        "FUN_080060bc": {
            "renaming": {
                "FUN_080060bc": "loop_through_gpio_pins_and_trigger_interrupts_080060bc",
                "uVar1": "gpio_pin_number"
            },
            "code": "void loop_through_gpio_pins_and_trigger_interrupts_080060bc(void)\n{\n  uint gpio_pin_number;\n  for (gpio_pin_number = 0x400; gpio_pin_number < 0x8001; gpio_pin_number <<= 1) {\n    HAL_GPIO_EXTI_IRQHandler((uint16_t)gpio_pin_number);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060bc",
            "calling": [],
            "imported": false,
            "current_name": "loop_through_gpio_pins_and_trigger_interrupts_080060bc"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "handleSysTickInterrupt_08004b9e",
                "noOsSystickHandler": "handleNoOsSystickInterrupt"
            },
            "code": "void handleSysTickInterrupt_08004b9e(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystickInterrupt();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "handleSysTickInterrupt_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08006940": {
            "renaming": {
                "FUN_08006940": "write_to_stream_08006940",
                "param_1": "file_handle",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "stream_buffer_size",
                "iVar1": "status",
                "uVar2": "character_count",
                "puVar3": "buffer_pointer"
            },
            "code": "uint write_to_stream_08006940(int file_handle, uint character, int *stream_buffer, undefined4 stream_buffer_size) {\n  int status;\n  uint character_count;\n  undefined *buffer_pointer;\n  if ((file_handle != 0) && (*(int *)(file_handle + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream_buffer == (int *)PTR___sf_fake_stdin_080069d8) {\n    stream_buffer = *(int **)(file_handle + 4);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stdout_080069dc) {\n    stream_buffer = *(int **)(file_handle + 8);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stderr_080069e0) {\n    stream_buffer = *(int **)(file_handle + 0xc);\n  }\n  stream_buffer[2] = stream_buffer[6];\n  character_count = (uint)*(ushort *)(stream_buffer + 3);\n  status = character_count << 0x1c;\n  if (((status < 0) && (character_count = stream_buffer[4], character_count != 0)) || (status = __swsetup_r(file_handle, stream_buffer, status, character_count, stream_buffer_size), status == 0)) {\n    character = character & 0xff;\n    status = *stream_buffer - stream_buffer[4];\n    if ((status < stream_buffer[5]) || (status = _fflush_r(file_handle, stream_buffer), status == 0)) {\n      stream_buffer[2] = stream_buffer[2] + -1;\n      buffer_pointer = (undefined *)*stream_buffer;\n      *stream_buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (status + 1 != stream_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      status = _fflush_r(file_handle, stream_buffer);\n      if (status == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006940",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_08006940"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "transmit_data_08005730",
                "file_UNUSED": "file_descriptor",
                "ptr": "data",
                "len": "data_length",
                "sVar1": "bytes_transmitted"
            },
            "code": "int transmit_data_08005730(int file_descriptor, char *data, int data_length)\n{\n  size_t bytes_transmitted;\n  bytes_transmitted = uart_debug_transmit((uint8_t *)data, data_length);\n  return bytes_transmitted;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "transmit_data_08005730"
        },
        "FUN_080058ea": {
            "renaming": {
                "FUN_080058ea": "transmitBufferFull_080058ea",
                "obj": "serial_obj",
                "uVar1": "incremented_tail",
                "uVar2": "masked_tail",
                "iVar3": "new_tail_index"
            },
            "code": "int HardwareSerial::transmitBufferFull_080058ea(serial_t_conflict *serial_obj)\n{\n  unsigned short incremented_tail;\n  unsigned short masked_tail;\n  int new_tail_index = serial_obj->tx_tail + 1;\n  incremented_tail = (unsigned short)new_tail_index;\n  masked_tail = incremented_tail & 0x7F;\n  if (new_tail_index == 0)\n  {\n    masked_tail = -(-incremented_tail & 0x7F);\n  }\n  serial_obj->tx_tail = masked_tail;\n  if (serial_obj->tx_head != serial_obj->tx_tail)\n  {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ea",
            "calling": [],
            "imported": false,
            "current_name": "transmitBufferFull_080058ea"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "handle_systick_interrupt_08002582"
            },
            "code": "void handle_systick_interrupt_08002582(void)\n{\n    HAL_SYSTICK_Callback();\n    return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_systick_interrupt_08002582"
        },
        "FUN_08005976": {
            "renaming": {
                "FUN_08005976": "wait_until_transmit_complete_08005976",
                "_written": "is_written",
                "this": "serial_obj",
                "_serial": "serial"
            },
            "code": "void __thiscall HardwareSerial::wait_until_transmit_complete_08005976(HardwareSerial *serial_obj)\n{\n  if (serial_obj->is_written) {\n    while ((serial_obj->serial).tx_head != (serial_obj->serial).tx_tail);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005976",
            "calling": [],
            "imported": false,
            "current_name": "wait_until_transmit_complete_08005976"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "get_gpio_08004884",
                "port_idx": "port_index",
                "pGVar1": "gpio",
                "tmpreg": "gpio_reg",
                "tmpreg_1": "gpio_reg_1",
                "tmpreg_2": "gpio_reg_2",
                "tmpreg_3": "gpio_reg_3",
                "tmpreg_4": "gpio_reg_4"
            },
            "code": "GPIO_TypeDef* get_gpio_08004884(uint32_t port_index) {\n  GPIO_TypeDef *gpio;\n  uint32_t gpio_reg;\n  switch(port_index) {\n    case 0:\n      gpio_reg = *(uint *)(DAT_08004914 + 0x18) | 4;\n      gpio = DAT_08004918;\n      break;\n    case 1:\n      gpio_reg = *(uint *)(DAT_08004914 + 0x18) | 8;\n      gpio = DAT_0800491c;\n      break;\n    case 2:\n      gpio_reg = *(uint *)(DAT_08004914 + 0x18) | 0x10;\n      gpio = DAT_08004920;\n      break;\n    case 3:\n      gpio_reg = *(uint *)(DAT_08004914 + 0x18) | 0x20;\n      gpio = DAT_08004924;\n      break;\n    case 4:\n      gpio_reg = *(uint *)(DAT_08004914 + 0x18) | 0x40;\n      gpio = DAT_08004928;\n      break;\n    default:\n      gpio = (GPIO_TypeDef*)0x0;\n      break;\n  }\n  *(uint *)(DAT_08004914 + 0x18) = gpio_reg;\n  return gpio;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_gpio_08004884"
        },
        "FUN_08005fa0": {
            "renaming": {
                "FUN_08005fa0": "free_gpio_irq_conf_08005fa0",
                "param_1": "ptr",
                "puVar1": "previous",
                "puVar2": "current"
            },
            "code": "void free_gpio_irq_conf_08005fa0(void *ptr)\n{\n    void *current = PTR___malloc_free_list_08005fc0;\n    while (current != PTR_gpio_irq_conf_08005fc4) {\n        void *previous = current - 0x14;\n        if (*(code **)(current - 8) != (code *)0x0) {\n            (**(code **)(current - 8))(current - 0x10, current - 0x10, 3);\n        }\n        current = previous;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fa0",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_conf_08005fa0"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "PTR_completed_8667_08001c28": "completed_ptr",
                "PTR___dso_handle_08001c20": "dso_handle_ptr",
                "PTR__sidata_08001c1c": "sidata_ptr",
                "PTR__ebss_08001c2c": "ebss_ptr"
            },
            "code": "void initialize_system_08001be8(void)\n{\n  int index;\n  undefined4 *PTR_completed_8667_08001c28 = (undefined4 *)PTR_completed_8667_08001c28;\n  undefined4 *PTR___dso_handle_08001c20 = (undefined4 *)PTR___dso_handle_08001c20;\n  undefined4 *PTR__sidata_08001c1c = (undefined4 *)PTR__sidata_08001c1c;\n  undefined4 *PTR__ebss_08001c2c = (undefined4 *)PTR__ebss_08001c2c;\n  \n  /* Copy initialized data from flash to RAM */\n  for (index = 0; PTR___dso_handle_08001c20 + index < (undefined4 *)PTR__edata_08001c24; index++) {\n    *(PTR___dso_handle_08001c20 + index) = *(PTR__sidata_08001c1c + index);\n  }\n  \n  /* Clear uninitialized data section */\n  for (; PTR_completed_8667_08001c28 < PTR__ebss_08001c2c; PTR_completed_8667_08001c28++) {\n    *PTR_completed_8667_08001c28 = 0;\n  }\n  \n  SystemInit();\n  __libc_init_array();\n  \n  /* Call main function */\n  code *jumptable_ptr = (code *)0x8001c1a;\n  (*jumptable_ptr)();\n}\n",
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "free_list_ptr",
                "extraout_r1": "extraout_r1",
                "ppiVar2": "next_ptr",
                "ppiVar3": "insert_ptr",
                "piVar4": "data_ptr",
                "ppiVar5": "free_list",
                "ppiVar6": "next_ptr",
                "ppiVar7": "mem_ptr"
            },
            "code": "void allocate_memory_080061f0(int* error_code, int size, int arg3, int arg4) {\n  if (size == 0) {\n    return;\n  }\n  int** mem_ptr = (int**)(size - 4);\n  if (*(int*)(size - 4) < 0) {\n    mem_ptr = (int**)((int)mem_ptr + *(int*)(size - 4));\n  }\n  __malloc_lock();\n  void* free_list_ptr = PTR___malloc_free_list_08006284;\n  int** free_list = *(int***)PTR___malloc_free_list_08006284;\n  if (free_list == (int**)0x0) {\n    mem_ptr[1] = (int*)0x0;\n    *(int***)free_list_ptr = mem_ptr;\n    int** extraout_r1 = NULL;\n    int** insert_ptr = (int**)free_list_ptr;\n  }\n  else if (mem_ptr < free_list) {\n    int** next_ptr = (int**)*mem_ptr;\n    int** insert_ptr = (int**)((int)mem_ptr + (int)next_ptr);\n    if (free_list == insert_ptr) {\n      int* data_ptr = *free_list;\n      free_list = (int**)free_list[1];\n      insert_ptr = (int**)((int)data_ptr + (int)next_ptr);\n      *mem_ptr = (int*)insert_ptr;\n    }\n    mem_ptr[1] = (int*)free_list;\n    *(int***)free_list_ptr = mem_ptr;\n  }\n  else {\n    int** next_ptr = free_list;\n    int** insert_ptr = NULL;\n    while (next_ptr != (int**)0x0 && next_ptr <= mem_ptr) {\n      insert_ptr = next_ptr;\n      next_ptr = (int**)next_ptr[1];\n    }\n    if (insert_ptr == NULL || mem_ptr < (int**)((int)insert_ptr + (int)*insert_ptr)) {\n      *error_code = 0xc;\n    }\n    else {\n      int** next_ptr = (int**)((int)mem_ptr + (int)*mem_ptr);\n      if (insert_ptr[1] == next_ptr) {\n        int* data_ptr = *insert_ptr[1];\n        next_ptr = (int**)insert_ptr[1][1];\n        next_ptr = (int**)((int)data_ptr + (int)*mem_ptr);\n        *insert_ptr = (int*)next_ptr;\n        insert_ptr[1] = (int*)next_ptr;\n      }\n      else {\n        mem_ptr[1] = (int*)insert_ptr[1];\n        insert_ptr[1] = (int*)mem_ptr;\n      }\n    }\n  }\n  __malloc_unlock(error_code, insert_ptr, mem_ptr, arg4);\n  return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "__sflush_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "stop_adc_conversion_08002348",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict",
                "hadc->Lock": "adc_handle->Lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "ADC_ConversionStop_Disable": "ADC_ConversionStop_Disable",
                "hadc->State": "adc_handle->State",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_08002348(ADC_HandleTypeDef *adc_handle) {\n    HAL_StatusTypeDef_conflict status;\n    if (adc_handle->Lock == HAL_LOCKED) {\n        return HAL_BUSY;\n    }\n    adc_handle->Lock = HAL_LOCKED;\n    status = ADC_ConversionStop_Disable(adc_handle);\n    if (status == HAL_OK) {\n        adc_handle->State = adc_handle->State & 0xffffeefe | 1;\n    }\n    adc_handle->Lock = HAL_UNLOCKED;\n    return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_08002348"
        },
        "FUN_08004f1c": {
            "renaming": {
                "FUN_08004f1c": "handle_I2C_errors_08004f1c",
                "PTR_i2c_handles_08004f28": "i2c_handle_ptr"
            },
            "code": "void handle_I2C_errors_08004f1c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef **)PTR_i2c_handles_08004f28;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f1c",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_errors_08004f1c"
        },
        "FUN_080060d4": {
            "renaming": {
                "std::function<void()>::operator__": "execute_function",
                "this": "function_pointer",
                "function_void___": "function_pointer",
                "_M_manager": "manager_type",
                "_M_invoker": "invoker",
                "_Any_data": "any_data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080060d4": "execute_function_080060d4"
            },
            "code": "void __thiscall execute_function_080060d4(void *function_pointer){\n\tif ((function_pointer->super__Function_base)._M_manager != (_Manager_type)0x0) {\n\t\t(*function_pointer->_M_invoker)((_Any_data *)function_pointer);\n\t\treturn;\n\t}\n\t__throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "execute_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "configureHardwareSerial_08005a68",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "config_masked",
                "iVar2": "bitcount"
            },
            "code": "void __thiscall configureHardwareSerial_08005a68(HardwareSerial *serial, ulong baudrate, byte config) {\n  byte config_masked = config & 7;\n  int databits = 0;\n  int parity = 0;\n  int stopbits = 0;\n  int bitcount = 0;\n\n  if (config_masked == 4) {\n    bitcount = 7;\n  }\n  else if (config_masked == 6) {\n    bitcount = 8;\n  }\n  else if (config_masked == 2) {\n    bitcount = 6;\n  }\n\n  if ((config & 0x30) == 0x30) {\n    parity = 0x600;\n    bitcount++;\n  }\n  else if ((config & 0x20) == 0) {\n    parity = 0;\n  }\n  else {\n    parity = 0x400;\n    bitcount++;\n  }\n\n  if ((config & 8) == 0) {\n    stopbits = 0;\n  }\n  else {\n    stopbits = 0x2000;\n  }\n\n  if (bitcount == 8) {\n    databits = 0;\n  }\n  else if (bitcount == 9) {\n    databits = 0x1000;\n  }\n\n  (serial->_serial).baudrate = baudrate;\n  (serial->_serial).databits = databits;\n  (serial->_serial).parity = parity;\n  (serial->_serial).stopbits = stopbits;\n\n  if (bitcount != 0) {\n    uart_init((serial_t *)&serial->_serial);\n    uart_attach_rx_callback((serial_t *)&serial->_serial, DAT_08005b14);\n    return;\n  }\n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08005b20, 299, PTR___PRETTY_FUNCTION___08005b1c, PTR_s_databits__0_08005b18);\n}",
            "called": [
                "__assert_func",
                "uart_attach_rx_callback",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "configureHardwareSerial_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "configure_08001814",
                "this": "pid",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "POn": "power_on_time",
                "iVar1": "is_less_than_zero",
                "uVar2": "uVar2",
                "in_r2": "in_register_2",
                "in_r3": "in_register_3",
                "uVar3": "is_not_zero",
                "bVar4": "is_not_one",
                "uVar5": "uVar5",
                "dVar6": "p_term",
                "dVar7": "i_term",
                "dVar8": "d_term"
            },
            "code": "void PID::configure_08001814(PID *pid, double proportional_gain, double integral_gain, double derivative_gain, int power_on_time)\n{\n    int is_less_than_zero;\n    undefined4 uVar2;\n    undefined4 in_register_2;\n    undefined4 in_register_3;\n    undefined is_not_zero;\n    bool is_not_one;\n    undefined8 uVar5;\n    double p_term;\n    double i_term;\n    double d_term;\n    is_less_than_zero = __aeabi_dcmplt();\n    if (((is_less_than_zero == 0) && (is_less_than_zero = __aeabi_dcmplt(proportional_gain._0_4_, proportional_gain._4_4_, 0, 0), is_less_than_zero == 0)) && (is_less_than_zero = __aeabi_dcmplt(integral_gain._0_4_, integral_gain._4_4_, 0, 0), is_less_than_zero == 0)) {\n        pid->power_on_time = derivative_gain._0_4_;\n        is_not_one = derivative_gain._0_4_ != 1;\n        if (is_not_one) {\n            derivative_gain._0_4_ = 0;\n        }\n        is_not_zero = (undefined)derivative_gain._0_4_;\n        if (!is_not_one) {\n            is_not_zero = true;\n        }\n        pid->power_on_time_enabled = (bool)is_not_zero;\n        *(undefined4 *)&pid->displayed_proportional_gain = in_register_2;\n        *(undefined4 *)((int)&pid->displayed_proportional_gain + 4) = in_register_3;\n        pid->displayed_integral_gain = proportional_gain;\n        pid->displayed_derivative_gain = integral_gain;\n        uVar5 = __floatunsidf(pid->sample_time);\n        uVar5 = __divdf3((int)uVar5, (int)((ulonglong)uVar5 >> 0x20), 0, DAT_080018f4);\n        uVar2 = (undefined4)((ulonglong)uVar5 >> 0x20);\n        *(undefined4 *)&pid->proportional_gain = in_register_2;\n        *(undefined4 *)((int)&pid->proportional_gain + 4) = in_register_3;\n        p_term = (double)__muldf3(proportional_gain._0_4_, proportional_gain._4_4_, (int)uVar5, uVar2);\n        pid->integral_gain = p_term;\n        i_term = (double)__divdf3(integral_gain._0_4_, integral_gain._4_4_, (int)uVar5, uVar2);\n        pid->derivative_gain = i_term;\n        if (pid->controller_direction == 1) {\n            d_term = (double)__subdf3(0, 0);\n            pid->proportional_gain = d_term;\n            p_term = (double)__subdf3(0, 0, SUB84(p_term, 0), (int)((ulonglong)p_term >> 0x20));\n            pid->integral_gain = p_term;\n            p_term = (double)__subdf3(0, 0, SUB84(i_term, 0), (int)((ulonglong)i_term >> 0x20));\n            pid->derivative_gain = p_term;\n        }\n    }\n    return;\n}",
            "called": [
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "SetTunings",
                "PID"
            ],
            "imported": false,
            "current_name": "configure_08001814"
        },
        "FUN_080056c0": {
            "renaming": {
                "FUN_080056c0": "handle_uart_interrupt_080056c0",
                "PTR_uart_handlers_080056d4": "uart_handler_pointer",
                "DAT_080056d8": "NULL",
                "USART3_IRQn": "USART3_interrupt",
                "UART_HandleTypeDef": "uart_handler_type",
                "PTR_uart_handlers_080056d4 + 8": "uart_handler_pointer_offset",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8)": "uart_handler",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "HAL_UART_IRQHandler": "handle_uart_interrupt"
            },
            "code": "void handle_uart_interrupt_080056c0(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  if (*(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8) != DAT_080056d8) {\n    HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8));\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_080056c0"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "call_afl_on_ticks_08000aec",
                "ticks": "ticks",
                "uVar1": "afl_return_value",
                "PTR_noHyperCall_08000b04": "no_hypercall_ptr"
            },
            "code": "int call_afl_on_ticks_08000aec(int ticks)\n{\n  uint32_t afl_return_value;\n  if (*(int *)PTR_noHyperCall_08000b04 != 0) {\n    return 0;\n  }\n  afl_return_value = aflCall(1, ticks, 0);\n  return afl_return_value;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_on_ticks_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "calculate_checksum_0800572c",
                "file_UNUSED": "fileDescriptor",
                "ptr_UNUSED": "data",
                "len_UNUSED": "length"
            },
            "code": "int calculate_checksum_0800572c(int fileDescriptor, char *data, int length) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "handle_timer_interrupt_08004e12",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "irqHandle": "interrupt_handler"
            },
            "code": "void handle_timer_interrupt_08004e12(TIM_HandleTypeDef *timer_handle) {\n  stimer_t *timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->interrupt_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->interrupt_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "calculate_08000a58",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "shifted_divisor",
                "uVar3": "shifted_amount"
            },
            "code": "uint calculate_08000a58(uint dividend, uint divisor)\n{\n  uint quotient;\n  int shifted_divisor;\n  uint shifted_amount;\n  \n  shifted_divisor = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < shifted_divisor) {\n      return 0;\n    }\n    quotient = shifted_divisor >> 0x15;\n    shifted_amount = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && shifted_amount != 0) {\n      quotient = (dividend << 0xb | 0x80000000 | divisor >> 0x15) >> (shifted_amount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "calculate_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_clocks_08001b48",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "PeriphClkInit": "periph_clk_init",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct": "osc_init",
                "OscillatorType": "RCC_OSCILLATORTYPE_HSI",
                "HSIState": "RCC_HSI_ON",
                "HSICalibrationValue": "RCC_HSICALIBRATION_DEFAULT",
                "PLLState": "RCC_PLL_ON",
                "PLLSource": "RCC_PLLSOURCE_HSI",
                "PLLMUL": "RCC_PLL_MUL16",
                "ClockType": "RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2",
                "SYSCLKSource": "RCC_SYSCLKSOURCE_PLLCLK",
                "AHBCLKDivider": "RCC_SYSCLK_DIV1",
                "APB1CLKDivider": "RCC_HCLK_DIV2",
                "APB2CLKDivider": "RCC_HCLK_DIV1",
                "PeriphClockSelection": "RCC_PERIPHCLK_ADC",
                "AdcClockSelection": "RCC_ADCPCLK2_DIV6",
                "HAL_RCC_OscConfig": "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig": "HAL_RCC_ClockConfig",
                "HAL_RCCEx_PeriphCLKConfig": "HAL_RCCEx_PeriphCLKConfig",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_SYSTICK_CLKSourceConfig": "HAL_SYSTICK_CLKSourceConfig",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "DAT_08001be0": "SYSTICK_RELOAD_VALUE"
            },
            "code": "void initialize_clocks_08001b48(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  RCC_PeriphCLKInitTypeDef periph_clk_init;\n  RCC_ClkInitTypeDef clk_init;\n  RCC_OscInitTypeDef osc_init;\n\n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x88);\n  }\n\n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x95);\n  }\n\n  periph_clk_init.PeriphClockSelection = RCC_PERIPHCLK_ADC;\n  periph_clk_init.AdcClockSelection = RCC_ADCPCLK2_DIV6;\n  status = HAL_RCCEx_PeriphCLKConfig(&periph_clk_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x9c);\n  }\n\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)((uint64_t)DAT_08001be0 * (uint64_t)hclk_freq / (uint64_t)1000000));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config",
                "HAL_RCC_OscConfig",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_CLKSourceConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_channel_state_08004092",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "CCER": "channel_capture_compare_enable_register",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void update_channel_state_08004092(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_state) {\n  uint32_t mask = ~(1 << (channel & 0xff));\n  uint32_t shifted_state = channel_state << (channel & 0xff);\n  timer->CCER = (timer->CCER & mask) | shifted_state;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "update_channel_state_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculateTotalPrintSize_08005cd4",
                "this": "printObj",
                "c": "text",
                "sVar1": "sizeOfPrintedText",
                "sVar2": "sizeOfRemainingPrints"
            },
            "code": "size_t __thiscall Print::calculateTotalPrintSize_08005cd4(Print *printObj, char *text) {\n  size_t sizeOfPrintedText = print(printObj, text);\n  size_t sizeOfRemainingPrints = calculateTotalPrintSize_08005cd4(printObj);\n  return sizeOfPrintedText + sizeOfRemainingPrints;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculateTotalPrintSize_08005cd4"
        },
        "FUN_08000450": {
            "renaming": {
                "FUN_08000450": "reverseBits_08000450",
                "param_1": "n",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "unused",
                "uVar1": "mask",
                "uVar2": "rev",
                "uVar3": "result",
                "uVar4": "shifted",
                "uVar5": "temp",
                "uVar7": "count",
                "iVar6": "numBits",
                "in_r12": "unused",
                "bVar8": "isZero",
                "bVar9": "isMax",
                "bVar10": "carry"
            },
            "code": "uint64_t reverseBits_08000450(uint32_t n) {\n  uint32_t rev = 0;\n  for (int i = 0; i < 32; ++i) {\n    rev = (rev << 1) | (n & 1);\n    n >>= 1;\n  }\n  return (uint64_t)rev << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000450",
            "calling": [],
            "imported": false,
            "current_name": "reverseBits_08000450"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initializePriority_08005bb0",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel",
                "PTR_Serial2_08005bd0": "serial2Pointer",
                "DAT_08005bcc": "data"
            },
            "code": "void initializePriority_08005bb0(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize != 1) {\n    return;\n  }\n  if (priorityLevel == 0xffff) {\n    HardwareSerial::HardwareSerial(&PTR_Serial2_08005bd0, DAT_08005bcc);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "imported": false,
            "current_name": "initializePriority_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080014ba": "initializeLCD",
                "this": "lcd",
                "fourbitmode": "fourBitMode",
                "rs": "rsPin",
                "rw": "rwPin",
                "enable": "enablePin",
                "d0": "dataPins[0]",
                "d1": "dataPins[1]",
                "d2": "dataPins[2]",
                "d3": "dataPins[3]",
                "d4": "dataPins[4]",
                "d5": "dataPins[5]",
                "d6": "dataPins[6]",
                "d7": "dataPins[7]",
                "_rs_pin": "rsPin",
                "_rw_pin": "rwPin",
                "_enable_pin": "enablePin",
                "_data_pins": "dataPins",
                "fourbitmode == '\\0'": "fourBitMode == 0",
                "_displayfunction": "_displayFunction",
                "FUN_080014ba": "initializeLCD_080014ba"
            },
            "code": "void __thiscall initializeLCD_080014ba(LiquidCrystal *lcd, uint8_t fourBitMode, uint8_t rsPin, uint8_t rwPin, uint8_t enablePin, uint8_t dataPins[8]){\n  lcd->_rs_pin = rsPin;\n  lcd->_rw_pin = rwPin;\n  lcd->_enable_pin = enablePin;\n  for(int i=0;i<8;i++){\n    lcd->_data_pins[i] = dataPins[i];\n  }\n  if (fourBitMode == 0) {\n    lcd->_displayfunction = 0x10;\n  }\n  else {\n    lcd->_displayfunction = 0x00;\n  }\n  begin(lcd, 0x10, 0x01, 0x00);\n  return;\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "LiquidCrystal"
            ],
            "imported": false,
            "current_name": "initializeLCD_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "configurePeriphClocks_08003c90",
                "PeriphClkInit": "PeriphClockInit",
                "iVar1": "i",
                "puVar2": "reg",
                "uVar3": "start_time",
                "uVar4": "current_time",
                "uVar5": "clock_sel",
                "bVar6": "update_rtc_clock",
                "tmpreg": "status",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "RCC_PeriphCLKInitTypeDef_conflict": "RCC_PeriphCLKInitTypeDef",
                "DAT_08003d98": "RCC_BASE",
                "DAT_08003d9c": "RCC_BASE + RCC_BDCR_OFFSET",
                "DAT_08003da0": "RCC_BASE + RCC_BDCR_OFFSET + 0x20",
                "HAL_GetTick": "HAL_GetTick()"
            },
            "code": "HAL_StatusTypeDef configurePeriphClocks_08003c90(RCC_PeriphCLKInitTypeDef *PeriphClkInit)\n{\n  int i;\n  uint32_t *reg;\n  uint32_t start_time;\n  uint32_t current_time;\n  uint clock_sel;\n  bool update_rtc_clock = false;\n  bool update_usb_clock = false;\n  bool update_adc_clock = false;\n  HAL_StatusTypeDef status = HAL_OK;\n  \n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) != 0) {\n    update_rtc_clock = (*(uint *)(DAT_08003d9c) & RCC_BDCR_RTCEN) == 0;\n    if (update_rtc_clock) {\n      *(uint *)(DAT_08003d9c) |= RCC_BDCR_RTCEN;\n    }\n    if ((*(uint *)(DAT_08003d9c) & RCC_BDCR_RTCEN) == 0) {\n      *(uint *)(DAT_08003d9c) |= RCC_BDCR_RTCEN;\n      start_time = HAL_GetTick();\n      while ((*(uint *)(DAT_08003d9c) & RCC_BDCR_RTCEN) == 0) {\n        current_time = HAL_GetTick();\n        if (current_time - start_time > 100) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    reg = (uint32_t *)(DAT_08003da0);\n    clock_sel = *reg & RCC_BDCR_RTCSEL;\n    if ((clock_sel != 0) && (clock_sel != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {\n      clock_sel = *reg;\n      *reg = RCC_BDCR_RTCEN;\n      *reg &= ~RCC_BDCR_RTCSEL;\n      *reg |= PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL;\n      if ((clock_sel & RCC_BDCR_RTCEN) != 0) {\n        start_time = HAL_GetTick();\n        while ((*(uint *)(DAT_08003d9c) & RCC_BDCR_RTCSEL) == 0) {\n          current_time = HAL_GetTick();\n          if (current_time - start_time > 5000) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    *reg &= ~RCC_BDCR_RTCEN;\n    if (update_rtc_clock) {\n      *(uint *)(DAT_08003d9c) &= ~RCC_BDCR_RTCEN;\n    }\n  }\n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) != 0) {\n    update_adc_clock = true;\n    *(uint *)(DAT_08003d98 + RCC_CFGR_OFFSET) &= ~RCC_CFGR_ADCPRE;\n    *(uint *)(DAT_08003d98 + RCC_CFGR_OFFSET) |= PeriphClkInit->AdcClockSelection;\n  }\n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USB) != 0) {\n    update_usb_clock = true;\n    *(uint *)(DAT_08003d98 + RCC_CFGR_OFFSET) &= ~RCC_CFGR_USBPRE;\n    *(uint *)(DAT_08003d98 + RCC_CFGR_OFFSET) |= PeriphClkInit->UsbClockSelection;\n  }\n  if (update_adc_clock || update_usb_clock) {\n    *(uint *)(DAT_08003d98 + RCC_APB2ENR_OFFSET) |= RCC_APB2ENR_ADCEN;\n    *(uint *)(DAT_08003d98 + RCC_APB1ENR1_OFFSET) |= RCC_APB1ENR1_USBEN;\n    if (update_adc_clock) {\n      *(uint *)(ADC_BASE + ADC_CCR_OFFSET) |= RCC_CFGR_ADCPRE_0;\n    }\n    if (update_usb_clock) {\n      *(uint *)(DAT_08003d98 + RCC_CCIPR_OFFSET) &= ~RCC_CCIPR_CLK48SEL;\n      *(uint *)(DAT_08003d98 + RCC_CCIPR_OFFSET) |= PeriphClkInit->Clk48ClockSelection;\n    }\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configurePeriphClocks_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "calculate_ticks_08002514",
                "TicksNumb": "ticks_count",
                "puVar1": "ticks_ptr",
                "DAT_08002538": "ticks_data",
                "DAT_0800253c": "data_buffer"
            },
            "code": "uint32_t calculate_ticks_08002514(uint32_t ticks_count)\n{\n  undefined4 *ticks_ptr;\n  ticks_ptr = DAT_08002538;\n  if (ticks_count - 1 < 0x1000000) {\n    DAT_08002538[1] = ticks_count - 1;\n    *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n    ticks_ptr[2] = 0;\n    *ticks_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c::FUN_08005c1c": "initializeAddress",
                "this": "this",
                "first_octet": "first_octet",
                "second_octet": "second_octet",
                "third_octet": "third_octet",
                "fourth_octet": "fourth_octet",
                "(this->super_Printable)._vptr_Printable": "(this->superPrintable)._vptrPrintable",
                "_func_int_varargs": "_func_int_varargs",
                "PTR_DAT_08005c34": "PTR_DAT_08005c34",
                "(this->_address).bytes[0]": "(this->address).bytes[0]",
                "(this->_address).bytes[1]": "(this->address).bytes[1]",
                "(this->_address).bytes[2]": "(this->address).bytes[2]",
                "(this->_address).bytes[3]": "(this->address).bytes[3]",
                "FUN_08005c1c": "initializeAddress_08005c1c"
            },
            "code": "initializeAddress_08005c1c * __thiscall initializeAddress_08005c1c(initializeAddress_08005c1c *this, uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n  (this->superPrintable)._vptrPrintable = (_func_int_varargs **)PTR_DAT_08005c34;\n  (this->address).bytes[0] = first_octet;\n  (this->address).bytes[1] = second_octet;\n  (this->address).bytes[2] = third_octet;\n  (this->address).bytes[3] = fourth_octet;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initializeAddress_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permission_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info_address",
                "param_3": "permission_status",
                "param_4": "is_executable",
                "iVar1": "stat_result",
                "uVar2": "permission_value",
                "auStack_4c": "file_status"
            },
            "code": "int check_file_permission_08006dc8(int file_descriptor, int file_info_address, int *permission_status, uint *is_executable) {\n  int file_status;\n  int stat_result = _fstat_r(file_descriptor, (int)*(short *)(file_info_address + 0xe), &file_status);\n  if (*(short *)(file_info_address + 0xe) < 0 || stat_result < 0) {\n    *permission_status = 0;\n    if ((int)((uint)*(ushort *)(file_info_address + 0xc) << 0x18) < 0) {\n      *is_executable = 1;\n      return 64;\n    }\n  }\n  else {\n    *permission_status = (int)((file_status & 0xf000) == 0x2000);\n  }\n  return 1024;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_permission_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "disable_timer_channel_0800412c",
                "*htim": "*timer",
                "Channel": "channel",
                "pTVar1": "timer_instance",
                "Instance": "timer->Instance",
                "CCER": "timer_instance->CCER",
                "BDTR": "timer_instance->BDTR",
                "CR1": "timer_instance->CR1",
                "HAL_StatusTypeDef_conflict": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict disable_timer_channel_0800412c(TIM_HandleTypeDef *timer, uint32_t channel)\n{\n  TIM_TypeDef *timer_instance;\n  TIM_CCxNChannelCmd(timer->Instance, channel, 0);\n  timer_instance = timer->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR &= 0xffff7fff;\n  }\n  timer_instance = timer->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "std::FUN_08007090": "abort_program",
                "FUN_08007090": "abort_program_08007090"
            },
            "code": "void abort_program_08007090(void)\n{\n    abort();\n}",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_pin_adc_channel_0800492c",
                "pin": "pin_name",
                "uVar1": "function_index",
                "PTR_PinMap_ADC_08004944": "pin_map",
                "uVar2": "channel_number"
            },
            "code": "uint32_t get_pin_adc_channel_0800492c(PinName_conflict pin)\n{\n  uint32_t function_index = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_ADC_08004944);\n  uint32_t channel_number = (function_index << 12) >> 27;\n  if (channel_number > 15) {\n    channel_number = 0;\n  }\n  return channel_number;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_pin_adc_channel_0800492c"
        },
        "FUN_08000cbc": {
            "renaming": {
                "FUN_08000cbc": "initialize_static_data_08000cbc"
            },
            "code": "void initialize_static_data_08000cbc(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08000cbc"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_pin_high_0800480a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_high_0800480a(PinName_conflict pin, uint32_t *pin_map)\n{\n  uint32_t pin_index = ((uint32_t)pin << 24) >> 28;\n  pin_map[pin_index] |= 1 << ((uint32_t)pin & 0xF);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_high_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "MAX31855::FUN_080015f8": "getTemperature",
                "this": "tempSensor",
                "unit": "unitType",
                "uVar1": "rawData",
                "uVar2": "rawTemp",
                "uVar4": "temp",
                "uVar5": "tempCalc",
                "extraout_d0": "defaultTemp",
                "extraout_d0_00": "defaultTemp",
                "dVar3": "tempResult",
                "DAT_080016a0": "CelsiusToKelvin",
                "DAT_080016a4": "KelvinToCelsius",
                "DAT_080016a8": "CelsiusToFahrenheit",
                "DAT_080016ac": "FahrenheitToCelsius",
                "DAT_080016b0": "FahrenheitOffset",
                "FUN_080015f8": "getTemperature_080015f8"
            },
            "code": "double __thiscall getTemperature_080015f8(MAX31855 *tempSensor, unit_t unit) {\n  ulong rawData = readData(tempSensor);\n  if ((rawData & 0x10000) != 0) {\n    uint errorCode = rawData & 7;\n    if (errorCode == 2 || errorCode == 4) {\n      return 0.0;\n    }\n    else {\n      return -1.0;\n    }\n  }\n  else {\n    uint rawTemp = rawData >> 0x12;\n    double temp = __floatunsidf(rawTemp & 0x1fff);\n    if ((rawTemp & 0x2000) != 0) {\n      double negTemp = __floatunsidf(~rawTemp & 0x1fff);\n      temp = __aeabi_dadd((int)negTemp,(int)((ulonglong)negTemp >> 0x20),0,tempSensor->DAT_080016a0);\n      temp = temp & 0xffffffff | (ulonglong)((int)(temp >> 0x20) + 0x80000000) << 0x20;\n    }\n    temp = __muldf3((int)temp,(int)(temp >> 0x20),0,tempSensor->DAT_080016a4);\n    if (unit == FAHRENHEIT) {\n      temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0,tempSensor->DAT_080016a8);\n      temp = __divdf3((int)temp,(int)((ulonglong)temp >> 0x20),0,tempSensor->DAT_080016ac);\n      temp = (double)__aeabi_dadd((int)temp,(int)((ulonglong)temp >> 0x20),0,tempSensor->DAT_080016b0);\n    }\n    return temp;\n  }\n}",
            "called": [
                "readData",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "getTemperature_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initializeIPAddress_08005c38",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel"
            },
            "code": "void initializeIPAddress_08005c38(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize == 1 && priorityLevel == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08005c60, \"\\0\", \"\\0\", \"\\0\", \"\\0\");\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializeIPAddress_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_in_uint16_08005f8c",
                "pin": "input",
                "uVar1": "i",
                "uVar2": "count"
            },
            "code": "uint8_t count_bits_set_in_uint16_08005f8c(uint16_t input) {\n  uint8_t count = 0;\n  for (uint i = input; i != 1; i = i >> 1) {\n    count = count + 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_in_uint16_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "write_data_to_file_08006f5a",
                "param_1": "file_descriptor",
                "param_2": "data_offset",
                "param_3": "data_buffer",
                "param_4": "data_size"
            },
            "code": "void write_data_to_file_08006f5a(FILE* file_descriptor, int data_offset, void* data_buffer, size_t data_size){\n  if ((int)((uint)*(ushort *)(data_offset + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(data_offset + 0xe),0,2);\n  }\n  *(ushort *)(data_offset + 0xc) = *(ushort *)(data_offset + 0xc) & 0xefff;\n  _write_r(file_descriptor,(int)*(short *)(data_offset + 0xe),data_buffer,data_size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initialize_prio_PID_lcd_thermocouple_08000b08",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "PID": "oven_pid",
                "PTR_reflowOvenPID_08000b9c": "oven_pid_ptr",
                "PTR_input_08000b98": "input_ptr",
                "PTR_output_08000b94": "output_ptr",
                "PTR_setpoint_08000b90": "setpoint_ptr",
                "PTR_kp_08000b8c": "kp_ptr",
                "PTR_ki_08000b88": "ki_ptr",
                "PTR_kd_08000b84": "kd_ptr",
                "LiquidCrystal": "lcd",
                "PTR_lcd_08000bb8": "lcd_ptr",
                "*PTR_lcdRsPin_08000ba0": "lcd_rs_pin",
                "*PTR_lcdEPin_08000ba4": "lcd_e_pin",
                "*PTR_lcdD4Pin_08000ba8": "lcd_d4_pin",
                "*PTR_lcdD5Pin_08000bac": "lcd_d5_pin",
                "*PTR_lcdD6Pin_08000bb0": "lcd_d6_pin",
                "*PTR_lcdD7Pin_08000bb4": "lcd_d7_pin",
                "MAX31855": "thermocouple",
                "PTR_thermocouple_08000bc8": "thermocouple_ptr",
                "*PTR_thermocoupleSOPin_08000bc4": "thermocouple_so_pin",
                "*PTR_thermocoupleCSPin_08000bc0": "thermocouple_cs_pin",
                "*PTR_thermocoupleCLKPin_08000bbc": "thermocouple_clk_pin"
            },
            "code": "void initialize_prio_PID_lcd_thermocouple_08000b08(int should_initialize, int priority_level) {\n  if (should_initialize == 1 && priority_level == 0xffff) {\n    PID oven_pid(PTR_reflowOvenPID_08000b9c, PTR_input_08000b98, PTR_output_08000b94, PTR_setpoint_08000b90, *PTR_kp_08000b8c, *PTR_ki_08000b88, *PTR_kd_08000b84, 0);\n    LiquidCrystal lcd(PTR_lcd_08000bb8, *PTR_lcdRsPin_08000ba0, *PTR_lcdEPin_08000ba4, *PTR_lcdD4Pin_08000ba8, *PTR_lcdD5Pin_08000bac, *PTR_lcdD6Pin_08000bb0, *PTR_lcdD7Pin_08000bb4);\n    MAX31855 thermocouple(PTR_thermocouple_08000bc8, *PTR_thermocoupleSOPin_08000bc4, *PTR_thermocoupleCSPin_08000bc0, *PTR_thermocoupleCLKPin_08000bbc);\n  }\n}",
            "called": [
                "MAX31855",
                "LiquidCrystal",
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [
                "_GLOBAL__sub_I_lcdMessagesReflowStatus"
            ],
            "imported": false,
            "current_name": "initialize_prio_PID_lcd_thermocouple_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data",
                "uVar1": "sfp",
                "iVar2": "global_ptr",
                "bVar3": "is_global_ptr"
            },
            "code": "void initialize_data_08006cb4(int data)\n{\n    if (*(int *)(data + 0x18) == 0) {\n        *(int *)(data + 0x48) = 0;\n        *(int *)(data + 0x4c) = 0;\n        *(int *)(data + 0x50) = 0;\n        int global_ptr = *(int *)PTR__global_impure_ptr_08006d0c;\n        *(int *)(data + 0x28) = DAT_08006d10;\n        bool is_global_ptr = data == global_ptr;\n        if (is_global_ptr) {\n            global_ptr = 1;\n        }\n        if (is_global_ptr) {\n            *(int *)(data + 0x18) = global_ptr;\n        }\n        int sfp1 = __sfp();\n        *(int *)(data + 4) = sfp1;\n        int sfp2 = __sfp(data);\n        *(int *)(data + 8) = sfp2;\n        int sfp3 = __sfp(data);\n        *(int *)(data + 0xc) = sfp3;\n        std_isra_0(*(int *)(data + 4), 4, 0);\n        std_isra_0(*(int *)(data + 8), 9, 1);\n        std_isra_0(*(int *)(data + 0xc), 0x12, 2);\n        *(int *)(data + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "__sfp",
                "std.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "__sfp",
                "__swbuf_r",
                "_fflush_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_peripheral_from_pin_08004c5e",
                "pin": "target_pin",
                "map": "pin_map",
                "NC": "NC",
                "void *": "void*",
                "peripheral": "peripheral"
            },
            "code": "void* find_peripheral_from_pin_08004c5e(PinName_conflict target_pin, PinMap_conflict* pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return (void*)0x0;\n    }\n    if (pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_from_pin_08004c5e"
        },
        "FUN_08007098": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08007098": "set_ctype_flags",
                "FUN_08007098": "set_ctype_flags_08007098"
            },
            "code": "void set_ctype_flags_08007098() {\n  if (*(int *)PTR_id_0800712c < 0) {\n    *(undefined4 *)PTR_id_0800712c = 1;\n  }\n  if (*(int *)PTR_id_08007130 < 0) {\n    *(undefined4 *)PTR_id_08007130 = 1;\n  }\n  if (*(int *)PTR_id_08007134 < 0) {\n    *(undefined4 *)PTR_id_08007134 = 1;\n  }\n  if (*(int *)PTR_id_08007138 < 0) {\n    *(undefined4 *)PTR_id_08007138 = 1;\n  }\n  if (*(int *)PTR_id_0800713c < 0) {\n    *(undefined4 *)PTR_id_0800713c = 1;\n  }\n  if (*(int *)PTR_id_08007140 < 0) {\n    *(undefined4 *)PTR_id_08007140 = 1;\n  }\n  if (*(int *)PTR_id_08007144 < 0) {\n    *(undefined4 *)PTR_id_08007144 = 1;\n  }\n  if (*(int *)PTR_id_08007148 < 0) {\n    *(undefined4 *)PTR_id_08007148 = 1;\n  }\n  if (*(int *)PTR_id_0800714c < 0) {\n    *(undefined4 *)PTR_id_0800714c = 1;\n  }\n  if (*(int *)PTR_id_08007150 < 0) {\n    *(undefined4 *)PTR_id_08007150 = 1;\n  }\n  if (*(int *)PTR_id_08007154 < 0) {\n    *(undefined4 *)PTR_id_08007154 = 1;\n  }\n  if (*(int *)PTR_id_08007158 < 0) {\n    *(undefined4 *)PTR_id_08007158 = 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007098",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_08007098"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "stop_pwm_signal_08004b3c",
                "pin": "PinName_conflict pin",
                "Channel": "uint32_t channel",
                "uVar1": "uint32_t function",
                "timHandle": "TIM_HandleTypeDef tim_handle",
                "PTR_PinMap_PWM_08004b90": "PinMap_conflict *",
                "get_pwm_channel": "get_pwm_channel",
                "HAL_TIM_PWM_Stop": "HAL_TIM_PWM_Stop",
                "HAL_TIMEx_PWMN_Stop": "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_DeInit": "HAL_TIM_PWM_DeInit"
            },
            "code": "void stop_pwm_signal_08004b3c(PinName_conflict pin)\n{\n  uint32_t channel;\n  uint32_t function;\n  TIM_HandleTypeDef tim_handle;\n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin, (PTR_PinMap_PWM_08004b90)PTR_PinMap_PWM_08004b90);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) && (((channel = get_pwm_channel(pin), channel == 0 || (channel == 4)) || (channel == 8)) || ((channel == 0xc || (channel == 0x18))))){\n    function = pinmap_function(pin, (PTR_PinMap_PWM_08004b90)PTR_PinMap_PWM_08004b90);\n    if ((function & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle, channel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle, channel);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_08001550": "printAtLocation",
                "location": "location",
                "charmap": "charmap",
                "iVar1": "i",
                "send": "send",
                "this": "this",
                "byte": "uint8_t",
                "super_Print": "super_Print",
                "FUN_08001550": "printAtLocation_08001550"
            },
            "code": "void __thiscall LiquidCrystal::printAtLocation_08001550(LiquidCrystal *this, uint8_t location, uint8_t *charmap)\\n{\\n  int i;\\n  uint8_t address = (location & 7) << 3 | 0x40;\\n  send(this, address, \"\\0\");\\n  for (i = 0; i < 8; i++)\\n  {\\n    (**(this->super_Print)._vptr_Print)(this, (uint)charmap[i]);\\n  }\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "printAtLocation_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint32_t uVar4;\n  undefined *puVar5;\n  int iVar6;\n  undefined4 extraout_r1;\n  uint uVar7;\n  int digits;\n  int digits_00;\n  int digits_01;\n  undefined8 uVar8;\n  undefined4 in_stack_ffffffe4;\n  \n  uVar4 = millis();\n  if (*(uint *)PTR_nextRead_08000f50 < uVar4) {\n    *(uint *)PTR_nextRead_08000f50 = *(uint *)PTR_nextRead_08000f50 + 1000;\n    puVar5 = PTR_thermocouple_08000f74;\n    MAX31855::readThermocouple((MAX31855 *)PTR_thermocouple_08000f74,CELSIUS);\n    puVar2 = PTR_input_08000f6c;\n    *(undefined **)PTR_input_08000f6c = puVar5;\n    *(undefined4 *)(puVar2 + 4) = extraout_r1;\n    iVar6 = __aeabi_dcmpeq();\n    if (((iVar6 != 0) ||\n        (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f20,DAT_08000f24), iVar6 != 0)) ||\n       (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f28,DAT_08000f2c), iVar6 != 0)) {\n      *PTR_reflowState_08000f64 = 7;\n      *PTR_reflowStatus_08000f58 = 0;\n    }\n  }\n  uVar4 = millis();\n  if (*(uint *)PTR_nextCheck_08000f54 < uVar4) {\n    *(uint *)PTR_nextCheck_08000f54 = *(uint *)PTR_nextCheck_08000f54 + 1000;\n    if (*PTR_reflowStatus_08000f58 == '\\x01') {\n      uVar4 = *(uint32_t *)PTR_ledRedPin_08000f5c;\n      iVar6 = digitalRead(uVar4);\n      uVar7 = count_leading_zeroes(iVar6);\n      digitalWrite(uVar4,uVar7 >> 5);\n      iVar6 = *(int *)PTR_timerSeconds_08000f78;\n      *(int *)PTR_timerSeconds_08000f78 = iVar6 + 1;\n      puVar2 = PTR_Serial2_08000f7c;\n      Print::print((Print *)PTR_Serial2_08000f7c,iVar6 + 1,10);\n      puVar5 = PTR_DAT_08000f80;\n      Print::print((Print *)puVar2,PTR_DAT_08000f80);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits);\n      Print::print((Print *)puVar2,puVar5);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_00);\n      Print::print((Print *)puVar2,puVar5);\n      Print::println((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_01);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ledRedPin_08000f5c,1);\n    }\n    puVar2 = PTR_lcd_08000f60;\n    LiquidCrystal::clear((LiquidCrystal *)PTR_lcd_08000f60);\n    puVar3 = PTR_reflowState_08000f64;\n    Print::print((Print *)puVar2,\n                 *(char **)(PTR_lcdMessagesReflowStatus_08000f68 +\n                           (uint)(byte)*PTR_reflowState_08000f64 * 4));\n    LiquidCrystal::setCursor((LiquidCrystal *)puVar2,'\\0','\\x01');\n    puVar5 = PTR_lcd_08000f60;\n    if (*puVar3 == '\\a') {\n      Print::print((Print *)puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      Print::print((Print *)PTR_lcd_08000f60,(double)CONCAT44(in_stack_ffffffe4,2),2);\n      LiquidCrystal::write((LiquidCrystal *)puVar5,'\\0');\n      Print::print((Print *)puVar5,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_reflowState_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_reflowState_08000f64]))();\n    return;\n  }\n  if ((*PTR_switchStatus_08001274 == '\\x01') && (*PTR_reflowStatus_0800126c == '\\x01')) {\n    *PTR_reflowStatus_0800126c = 0;\n    *PTR_reflowState_08001258 = 0;\n  }\n  cVar1 = *PTR_debounceState_08001278;\n  if (cVar1 == '\\x01') {\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      if (0x32 < uVar4 - *(int *)PTR_lastDebounceTime_08001284) {\n        *PTR_debounceState_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_debounceState_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_switchStatus_08001274 = 0;\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      *(uint32_t *)PTR_lastDebounceTime_08001284 = uVar4;\n      *PTR_debounceState_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') &&\n          (uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280), uVar4 != 0)) {\n    *PTR_switchStatus_08001274 = 1;\n    *PTR_debounceState_08001278 = 0;\n  }\n  if (*PTR_reflowStatus_0800126c == '\\x01') {\n    uVar4 = millis();\n    PID::Compute((PID *)PTR_reflowOvenPID_08001250);\n    if (*(uint *)PTR_windowSize_0800128c < uVar4 - *(int *)PTR_windowStartTime_08001288) {\n      *(uint *)PTR_windowStartTime_08001288 =\n           *(int *)PTR_windowStartTime_08001288 + *(uint *)PTR_windowSize_0800128c;\n    }\n    uVar8 = __floatunsidf(uVar4 - *(int *)PTR_windowStartTime_08001288);\n    iVar6 = __aeabi_dcmplt((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),\n                           *(undefined4 *)PTR_output_08001290,\n                           *(undefined4 *)(PTR_output_08001290 + 4));\n    if (iVar6 == 0) {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,1);\n    }\n  }\n  else {\n    digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "print",
                "__aeabi_dadd",
                "millis",
                "print",
                "SetMode",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "__aeabi_dcmplt",
                "setCursor",
                "analogRead",
                "digitalRead",
                "println",
                "SetTunings",
                "__aeabi_dcmpgt",
                "__aeabi_dcmple",
                "println",
                "write",
                "SetSampleTime",
                "__floatsidf",
                "digitalWrite",
                "SetOutputLimits",
                "Compute",
                "clear",
                "print",
                "readThermocouple",
                "__floatunsidf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_08001310": "set_lcd_pin",
                "this": "lcd",
                "value": "data",
                "mode": "rs_mode",
                "_rs_pin": "rs_pin",
                "_rw_pin": "rw_pin",
                "_displayfunction": "display_function",
                "write4bits": "write_4_bits",
                "write8bits": "write_8_bits",
                "FUN_08001310": "set_lcd_pin_08001310"
            },
            "code": "void __thiscall set_lcd_pin_08001310(LiquidCrystal *lcd,uint8_t value,uint8_t mode)\n{\n    digitalWrite((uint)lcd->rs_pin,(uint)mode);\n    if (lcd->rw_pin != 0xff) {\n        digitalWrite((uint)lcd->rw_pin,LOW);\n    }\n    if ((lcd->display_function & 0x10) == 0) {\n        write_4_bits(lcd,value >> 4);\n        write_4_bits(lcd,value);\n        return;\n    }\n    write_8_bits(lcd,value);\n    return;\n}",
            "called": [
                "write4bits",
                "digitalWrite",
                "write8bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "clear",
                "createChar",
                "write",
                "display",
                "begin",
                "setCursor"
            ],
            "imported": false,
            "current_name": "set_lcd_pin_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "compare_double_values_080009a8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result1",
                "param_4": "result2"
            },
            "code": "void compare_double_values_080009a8(double value1, double value2, double result1, double result2)\n{\n  __aeabi_cdcmpeq(value1, value2, result1, result2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "imported": false,
            "current_name": "compare_double_values_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_timer_interrupt_flags_08004d90",
                "htim": "timer_handle",
                "uint": "uint32_t",
                "Instance": "timer_instance",
                "DAT_08004de4": "TIMER_INSTANCE_1",
                "DAT_08004df0": "TIMER_MEMORY_BASE_ADDRESS",
                "TIM_TypeDef": "TIM_typedef_pointer",
                "TIMER_INSTANCE_1": "TIMER_INSTANCE_1",
                "0x40000000": "TIM_typedef_pointer",
                "TIMER_INSTANCE_2": "TIMER_INSTANCE_2",
                "DAT_08004de8": "TIMER_INSTANCE_2",
                "TIMER_INSTANCE_3": "TIMER_INSTANCE_3",
                "DAT_08004dec": "TIMER_INSTANCE_3"
            },
            "code": "void set_timer_interrupt_flags_08004d90(TIM_HandleTypeDef *timer_handle)\n{\n    uint32_t *timer_flags = (uint32_t *)(DAT_08004df0 + 0x18);\n    if (timer_handle->Instance == DAT_08004de4)\n    {\n        *timer_flags &= ~(1 << 11);\n    }\n    if (timer_handle->Instance == (TIM_TypeDef *)0x40000000)\n    {\n        uint32_t *timer_interrupt_enable = (uint32_t *)(DAT_08004df0 + 0x1c);\n        *timer_interrupt_enable &= ~1;\n    }\n    if (timer_handle->Instance == DAT_08004de8)\n    {\n        uint32_t *timer_interrupt_enable = (uint32_t *)(DAT_08004df0 + 0x1c);\n        *timer_interrupt_enable &= ~2;\n    }\n    if (timer_handle->Instance == DAT_08004dec)\n    {\n        uint32_t *timer_interrupt_enable = (uint32_t *)(DAT_08004df0 + 0x1c);\n        *timer_interrupt_enable &= ~4;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "set_timer_interrupt_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "__thiscall Print::FUN_08005ce8": "print_uint_as_base",
                "this": "print_object",
                "n": "number",
                "base": "base",
                "cVar1": "character",
                "sVar2": "length",
                "sVar3": "total_length",
                "uVar4": "remainder",
                "uVar5": "base_uint",
                "uVar6": "quotient",
                "__s": "buffer_pointer",
                "buf": "buffer",
                "FUN_08005ce8": "print_uint_as_base_08005ce8"
            },
            "code": "size_t __thiscall Print::print_uint_as_base_08005ce8(Print *print_object, ulong number, uint8_t base) {\n  char character;\n  size_t length;\n  size_t total_length;\n  uint base_uint;\n  uint remainder;\n  uint quotient;\n  char *buffer_pointer;\n  char buffer[33];\n  buffer[32] = '\\0';\n  if (base < 2) {\n    base_uint = 10;\n  }\n  else {\n    base_uint = (uint) base;\n  }\n  buffer_pointer = buffer + 0x20;\n  do {\n    quotient = number / base_uint;\n    remainder = (number & 0xff) - (quotient * base_uint & 0xff) & 0xff;\n    buffer_pointer = buffer_pointer + -1;\n    if (remainder < 10) {\n      character = remainder + '0';\n    }\n    else {\n      character = remainder + '7';\n    }\n    *buffer_pointer = character;\n    number = quotient;\n  } while (quotient != 0);\n  if (buffer_pointer == (char *)0x0) {\n    total_length = 0;\n  }\n  else {\n    length = strlen(buffer_pointer);\n    total_length = (*print_object->_vptr_Print[1])(length, buffer_pointer, length);\n  }\n  return total_length;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "print",
                "print"
            ],
            "imported": false,
            "current_name": "print_uint_as_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "i2c_handle_0800316c",
                "*hi2c": "*handle",
                "HVar1": "status",
                "*puVar2": "*buffer_ptr",
                "*pIVar3": "*instance_ptr",
                "byte": "state"
            },
            "code": "void i2c_handle_0800316c(I2C_HandleTypeDef *handle)\n{\n  HAL_StatusTypeDef status;\n  uint8_t *buffer_ptr;\n  I2C_TypeDef *instance_ptr;\n  uint8_t state = (uint8_t)handle->State;\n  if (state - 0x29 < 2) {\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n      handle->State = HAL_I2C_STATE_READY;\n    }\n    handle->PreviousState = 0;\n    handle->Mode = HAL_I2C_MODE_NONE;\n  }\n  handle->Instance->CR1 &= 0xfffff7ff;\n  instance_ptr = handle->Instance;\n  if ((instance_ptr->CR2 & 0x800) == 0) {\n    if (handle->State == HAL_I2C_STATE_ABORT) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode = 0;\n      if ((instance_ptr->SR1 & 0x40) != 0) {\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)instance_ptr->DR;\n      }\n      handle->Instance->CR1 &= 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(handle);\n    }\n    else {\n      if ((instance_ptr->SR1 & 0x40) != 0) {\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)instance_ptr->DR;\n      }\n      HAL_I2C_ErrorCallback(handle);\n    }\n  }\n  else {\n    instance_ptr->CR2 &= 0xfffff7ff;\n    if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n      handle->hdmarx->XferAbortCallback = i2c_handle_0800316c;\n      status = HAL_DMA_Abort_IT(handle->hdmarx);\n      if (status != HAL_OK) {\n        if ((handle->Instance->SR1 & 0x40) != 0) {\n          buffer_ptr = handle->pBuffPtr;\n          handle->pBuffPtr = buffer_ptr + 1;\n          *buffer_ptr = (uint8_t)handle->Instance->DR;\n        }\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n      }\n    }\n    else {\n      handle->hdmatx->XferAbortCallback = i2c_handle_0800316c;\n      status = HAL_DMA_Abort_IT(handle->hdmatx);\n      if (status != HAL_OK) {\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n      }\n    }\n  }\n  if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n    handle->XferOptions = 0;\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "i2c_handle_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "clearPinFromMap_08004828",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "mapIndex",
                "bitPosition": "bitPos"
            },
            "code": "void clearPinFromMap_08004828(PinName_conflict pin, uint32_t *map) {\n  uint8_t bitPosition = (uint8_t)pin & 0xfU;\n  uint8_t mapIndex = (uint8_t)((int)pin << 0x18) >> 0x1c;\n  map[mapIndex] &= ~(1 << bitPosition);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "clearPinFromMap_08004828"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_pwm_mode_08004948",
                "pin": "pin_name",
                "uVar1": "pwm_function",
                "uVar2": "pwm_mode",
                "PTR_PinMap_PWM_08004970": "pwm_pin_map"
            },
            "code": "uint32_t get_pwm_mode_08004948(PinName_conflict pin)\n{\n  uint32_t pwm_function = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004970);\n  uint32_t pwm_mode = (pwm_function << 12) >> 27;\n  if (pwm_mode == 3) {\n    return 8;\n  }\n  if (pwm_mode == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_pwm_mode_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_rx_pin_08005b24",
                "_rx": "rx_pin_num",
                "PVar1": "rx_pin",
                "PTR_digitalPin_08005b38": "digitalPin"
            },
            "code": "void __thiscall HardwareSerial::set_rx_pin_08005b24(HardwareSerial *this, uint32_t rx_pin_num) {\n  PinName rx_pin;\n  if (rx_pin_num < 0x3c) {\n    rx_pin = PTR_digitalPin_08005b38[rx_pin_num];\n  }\n  else {\n    rx_pin = NC;\n  }\n  (this->serial).pin_rx = rx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_rx_pin_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_adc_status_080049f0",
                "*hadc": "*adc_handle",
                "iVar1": "current_adc_status"
            },
            "code": "void update_adc_status_080049f0(ADC_HandleTypeDef *adc_handle)\n{\n  int current_adc_status = adc_status;\n  if (adc_handle->Instance != ADC1) {\n    if (adc_handle->Instance == ADC2) {\n      *(uint *)(current_adc_status + 0xc) |= 0x400;\n      *(uint *)(current_adc_status + 0xc) &= 0xfffffbff;\n      *(uint *)(current_adc_status + 0x18) &= 0xfffffbff;\n      *(uint *)(current_adc_status + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(current_adc_status + 0xc) |= 0x200;\n  *(uint *)(current_adc_status + 0xc) &= 0xfffffdff;\n  *(uint *)(current_adc_status + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "imported": false,
            "current_name": "update_adc_status_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_ADC_value_08001e40",
                "hadc": "adc_handle"
            },
            "code": "uint32_t get_ADC_value_08001e40(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->Instance->DR;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_value_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "value",
                "uVar2": "flag",
                "local_1c": "buffer",
                "abStack_18": "buffer",
                "uStack_14": "multiplier",
                "uStack_10": "flag",
                "uStack_c": "value"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint value = 0;\n  uint flag = *(uint *)(PTR__etext_08003ac4 + 4);\n  uint multiplier = DAT_08003ad0;\n  byte buffer[4];\n  buffer[0] = *(byte *)(PTR__etext_08003ac4 + 0x10);\n  buffer[1] = *(byte *)(PTR__etext_08003ac4 + 0x11);\n  buffer[2] = *(byte *)(PTR__etext_08003ac4 + 0x12);\n  buffer[3] = *(byte *)(PTR__etext_08003ac4 + 0x13);\n  if ((flag & 0xc) == 8) {\n    if ((flag & 0x10000) == 0) {\n      value = DAT_08003acc * (uint)buffer[(flag << 10) >> 0x1c];\n    }\n    else {\n      uint divisor = (uint)*(byte *)((int)&buffer[0] - ((*(int *)(PTR__etext_08003ac4 + 4) << 0xe) >> 0x1f));\n      value = (multiplier * buffer[(flag << 10) >> 0x1c]) / divisor;\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "pulseEnablePin_080012a2",
                "this": "lcd",
                "_enable_pin": "_enablePin",
                "digitalWrite((uint)this->_enable_pin,0)": "digitalWrite((uint)lcd->_enablePin, LOW)",
                "digitalWrite((uint)this->_enable_pin,1)": "digitalWrite((uint)lcd->_enablePin, HIGH)",
                "LOW": "0",
                "HIGH": "1"
            },
            "code": "void __thiscall LiquidCrystal::pulseEnablePin_080012a2(LiquidCrystal *lcd)\n{\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  digitalWrite((uint)lcd->_enable_pin, HIGH);\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  return;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "write4bits",
                "write8bits"
            ],
            "imported": false,
            "current_name": "pulseEnablePin_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral_address"
            },
            "code": "void * find_peripheral_08004c78(PinName_conflict pin, PinMap_conflict *map)\n{\n  void *peripheral_address;\n  if (pin != NC) {\n    peripheral_address = pinmap_find_peripheral_08004c78(pin, map);\n    return peripheral_address;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "pwm_stop",
                "adc_read_value",
                "uart_debug_write",
                "uart_debug_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_peripheral_08004c78"
        },
        "FUN_08005bd4": {
            "renaming": {
                "FUN_08005bd4": "initialize_static_data_08005bd4"
            },
            "code": "void initialize_static_data_08005bd4(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bd4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08005bd4"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "configureADC_08001e48",
                "*hadc": "*adcHandle",
                "*sConfig": "*channelConfig",
                "HVar1": "status",
                "uVar2": "rank",
                "*pAVar3": "*adcInstance",
                "wait_loop_index": "waitLoopIndex"
            },
            "code": "HAL_StatusTypeDef_conflict configureADC_08001e48(ADC_HandleTypeDef *adcHandle, ADC_ChannelConfTypeDef *channelConfig) {\n    HAL_StatusTypeDef_conflict status;\n    uint32_t rank = channelConfig->Rank;\n    uint32_t channel = channelConfig->Channel;\n    uint32_t samplingTime = channelConfig->SamplingTime;\n    ADC_TypeDef *adcInstance = adcHandle->Instance;\n\n    if (adcHandle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n    }\n    else {\n        adcHandle->Lock = HAL_LOCKED;\n        if (rank < 7) {\n            uint32_t offset = rank * 5 - 5;\n            adcInstance->SQR3 = (channel << offset) | (adcInstance->SQR3 & ~(0x1f << offset));\n        }\n        else if (rank < 0xd) {\n            uint32_t offset = rank * 5 - 0x23;\n            adcInstance->SQR2 = (channel << offset) | (adcInstance->SQR2 & ~(0x1f << offset));\n        }\n        else {\n            uint32_t offset = rank * 5 - 0x41;\n            adcInstance->SQR1 = (channel << offset) | (adcInstance->SQR1 & ~(0x1f << offset));\n        }\n        if (channel < 10) {\n            adcInstance->SMPR2 = (samplingTime << (channel * 3)) | (adcInstance->SMPR2 & ~(7 << (channel * 3)));\n        }\n        else {\n            uint32_t offset = channel * 3 - 0x1e;\n            adcInstance->SMPR1 = (samplingTime << offset) | (adcInstance->SMPR1 & ~(7 << offset));\n        }\n        if ((channel - 0x10) < 2) {\n            if (adcInstance == ADC1) {\n                if ((adcInstance->CR2 & 0x800000) == 0) {\n                    adcInstance->CR2 |= 0x800000;\n                    if (channel == 0x10) {\n                        uint32_t wait_loop_index = (uint32_t)((uint64_t)ADC_DELAY_CALIB_ENABLE_CPU_CYCLES * (uint64_t)*(uint32_t*)SYS_CLOCK_FREQ_08001f78 >> 0x32) * 10;\n                        while (wait_loop_index != 0) {\n                            wait_loop_index--;\n                        }\n                        status = HAL_OK;\n                    }\n                    else {\n                        status = HAL_OK;\n                    }\n                }\n                else {\n                    status = HAL_OK;\n                }\n            }\n            else {\n                adcHandle->State |= 0x20;\n                status = HAL_ERROR;\n            }\n        }\n        else {\n            status = HAL_OK;\n        }\n        adcHandle->Lock = HAL_UNLOCKED;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configureADC_08001e48"
        },
        "FUN_080059c8": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_080059c8": "writeByte",
                "this": "serial",
                "c": "byteToWrite",
                "_written": "isWritten",
                "_serial": "serialPort",
                "tx_head": "txHead",
                "uVar2": "isTxActive",
                "serial_tx_active": "serialTxActive",
                "uart_attach_tx_callback": "attachTxCallback",
                "DAT_08005a14": "serialTxCallback",
                "bVar1": "newTxHead",
                "bVar3": "maskedNewTxHead",
                "iVar4": "tempTxHead",
                "uVar5": "currentTxHead",
                "FUN_080059c8": "writeByte_080059c8"
            },
            "code": "size_t __thiscall HardwareSerial::writeByte_080059c8(HardwareSerial *serial,uint8_t byteToWrite)\\n{\\n  bool isWritten = true;\\n  uint txHead = (uint)(serial->_serial).tx_head;\\n  int newTxHead = txHead + 1;\\n  byte maskedNewTxHead = (byte)newTxHead & 0x7f;\\n  if (newTxHead == 0) {\\n    maskedNewTxHead = -(-maskedNewTxHead & 0x7f);\\n  }\\n  while ((serial->_serial).tx_tail == (ushort)maskedNewTxHead);\\n  (serial->_serial).tx_buff[txHead] = byteToWrite;\\n  (serial->_serial).tx_head = (ushort)maskedNewTxHead;\\n  uint8_t isTxActive = serial_tx_active((serial_t *)&serial->_serial);\\n  if (isTxActive == \"\\0\") {\\n    uart_attach_tx_callback((serial_t *)&serial->_serial, DAT_08005a14);\\n  }\\n  return 1;\\n}",
            "called": [
                "uart_attach_tx_callback",
                "serial_tx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059c8",
            "calling": [],
            "imported": false,
            "current_name": "writeByte_080059c8"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "compare_floats_080009b8",
                "param_1": "float1",
                "__eqdf2": "__eqdf2",
                "return": "result"
            },
            "code": "float32_t compare_floats_080009b8(float32_t float1, float32_t float2)\n{\n    float32_t result = __eqdf2(float1, float2);\n    return result;\n}",
            "called": [
                "__eqdf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "imported": false,
            "current_name": "compare_floats_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "intermediate_value",
                "uVar2": "output_value"
            },
            "code": "uint32_t calculate_shifted_value_08000aa8(uint32_t input_value, uint32_t shift_amount)\n{\n  int32_t intermediate_value;\n  uint32_t output_value;\n\n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    output_value = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int32_t)output_value) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (output_value & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_not_CY_or_ZR_08000a04",
                "in_CY": "CY",
                "in_ZR": "ZR"
            },
            "code": "bool is_not_CY_or_ZR_08000a04(void)\n{\n    bool not_CY = !(bool)CY;\n    bool ZR = (bool)ZR;\n    return not_CY || ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_CY_or_ZR_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "has_completed_init_0800010c",
                "param_1": "init_ptr",
                "PTR_completed_8667_08000124": "completed_flag",
                "DAT_08000128": "init_ptr",
                "PTR__init_0800012c": "init_function"
            },
            "code": "bool has_completed_init_0800010c(bool* PTR_completed_8667_08000124, void* DAT_08000128) {\n  if (*PTR_completed_8667_08000124 == false) {\n    if (DAT_08000128 != NULL) {\n      DAT_08000128 = PTR__init_0800012c;\n    }\n    *PTR_completed_8667_08000124 = true;\n  }\n  return DAT_08000128;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "has_completed_init_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "update_uwTick_08001cac",
                "PTR_uwTick_08001cbc": "uwTick",
                "PTR_uwTickFreq_08001cc0": "uwTickFreq"
            },
            "code": "void update_uwTick_08001cac(void)\n{\n    uint8_t tickFreq = *PTR_PTR_uwTick_08001cbcFreq_08001cc0;\n    uint32_t* PTR_uwTick_08001cbcPtr = PTR_uwTick_08001cbc;\n    *PTR_uwTick_08001cbcPtr = tickFreq + *PTR_uwTick_08001cbcPtr;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uwTick_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "checkSerial2Availability_08005a18",
                "DAT_08005a3c": "serial2Initialized",
                "PTR_Serial2_08005a40": "&Serial2"
            },
            "code": "void checkSerial2Availability_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    HardwareSerial::available(PTR_Serial2_08005a40);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial2Availability_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_TIM_interrupts_08003f18",
                "*htim": "*timer_handle",
                "TIM_TypeDef *pTVar1": "TIM_TypeDef *timer_instance",
                "pTVar1": "timer_instance",
                "HAL_TIM_ACTIVE_CHANNEL_1": "TIM_CHANNEL_1",
                "HAL_TIM_ACTIVE_CHANNEL_2": "TIM_CHANNEL_2",
                "HAL_TIM_ACTIVE_CHANNEL_3": "TIM_CHANNEL_3",
                "HAL_TIM_ACTIVE_CHANNEL_4": "TIM_CHANNEL_4",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "TIM_CHANNEL_NONE",
                "TIM_FLAG_CC1": "TIM_SR_CC1IF",
                "TIM_FLAG_CC2": "TIM_SR_CC2IF",
                "TIM_FLAG_CC3": "TIM_SR_CC3IF",
                "TIM_FLAG_CC4": "TIM_SR_CC4IF",
                "TIM_FLAG_UPDATE": "TIM_SR_UIF",
                "TIM_FLAG_BREAK": "TIM_SR_BIF",
                "TIM_FLAG_TRIGGER": "TIM_SR_TIF",
                "TIM_FLAG_COM": "TIM_SR_COMIF",
                "TIM_IT_CC1": "TIM_DIER_CC1IE",
                "TIM_IT_CC2": "TIM_DIER_CC2IE",
                "TIM_IT_CC3": "TIM_DIER_CC3IE",
                "TIM_IT_CC4": "TIM_DIER_CC4IE",
                "TIM_IT_UPDATE": "TIM_DIER_UIE",
                "TIM_IT_BREAK": "TIM_DIER_BIE",
                "TIM_IT_TRIGGER": "TIM_DIER_TIE",
                "TIM_IT_COM": "TIM_DIER_COMIE",
                "CCMR1": "CCMR1",
                "CCMR2": "CCMR2",
                "CCMR1_CC1S": "TIM_CCMR1_CC1S",
                "CCMR1_CC2S": "TIM_CCMR1_CC2S",
                "CCMR2_CC3S": "TIM_CCMR2_CC3S",
                "CCMR2_CC4S": "TIM_CCMR2_CC4S",
                "HAL_TIM_OC_DelayElapsedCallback": "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback": "HAL_TIM_TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "HAL_TIMEx_CommutationCallback"
            },
            "code": "void process_TIM_interrupts_08003f18(TIM_HandleTypeDef *htim)\n{\n  TIM_TypeDef *timer_instance = htim->Instance;\n  if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC1);\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_CC2) != 0) && ((timer_instance->DIER & TIM_IT_CC2) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC2);\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_CC3) != 0) && ((timer_instance->DIER & TIM_IT_CC3) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC3);\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_CC4) != 0) && ((timer_instance->DIER & TIM_IT_CC4) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC4);\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_UPDATE) != 0) && ((timer_instance->DIER & TIM_IT_UPDATE) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_UPDATE);\n    HAL_TIM_PeriodElapsedCallback(htim);\n  }\n  if (((timer_instance->SR & TIM_FLAG_BREAK) != 0) && ((timer_instance->DIER & TIM_IT_BREAK) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_BREAK);\n    HAL_TIMEx_BreakCallback(htim);\n  }\n  if (((timer_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((timer_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_TRIGGER);\n    HAL_TIM_TriggerCallback(htim);\n  }\n  if (((timer_instance->SR & TIM_FLAG_COM) != 0) && ((timer_instance->DIER & TIM_IT_COM) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_COM);\n    HAL_TIMEx_CommutationCallback(htim);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "TIM2_IRQHandler",
                "TIM4_IRQHandler",
                "TIM1_UP_IRQHandler",
                "TIM3_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_TIM_interrupts_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculateAvailableRxBufferSpace_0800591e",
                "this": "serialInstance",
                "_serial": "serialData",
                "rx_head": "head",
                "rx_tail": "tail",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int __thiscall calculateAvailableRxBufferSpace_0800591e(HardwareSerial *serialInstance) {\n    int head = serialInstance->_serial.rx_head;\n    int tail = serialInstance->_serial.rx_tail;\n    int bufferSpace = (head + 0x40) - tail & 0x3f;\n    return bufferSpace;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateAvailableRxBufferSpace_0800591e"
        },
        "FUN_08006104": {
            "renaming": {
                "FUN_08006104": "initialize_static_data_08006104"
            },
            "code": "void initialize_static_data_08006104(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006104",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08006104"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_interrupt_flag_08002540",
                "IRQn": "irq",
                "uVar1": "irq_num",
                "DAT_0800255c": "interrupt_flag_base"
            },
            "code": "void set_interrupt_flag_08002540(IRQn_Type_conflict irq)\n{\n    uint irq_num = (uint)irq;\n    if (irq_num >= 0) {\n        int* interrupt_flag = (int*)(DAT_0800255c + ((irq_num >> 5) + 0x60) * 4);\n        *interrupt_flag = 1 << (irq_num & 0x1f);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_flag_08002540"
        },
        "FUN_08005be2": {
            "renaming": {
                "__thiscall IPAddress::FUN_08005be2": "printIPAddress",
                "this": "ipAddress",
                "p": "printer",
                "iVar3": "i",
                "iVar4": "totalPrinted",
                "sVar1": "bytesPrinted",
                "sVar2": "dotPrinted",
                "FUN_08005be2": "printIPAddress_08005be2"
            },
            "code": "size_t printIPAddress_08005be2(IPAddress *ipAddress, Print *printer) {\n  size_t totalPrinted = 0;\n  for (int i = 0; i < 3; i++) {\n    size_t bytesPrinted = Print::print(printer, (ipAddress->_address).bytes[i], 10);\n    size_t dotPrinted = Print::print(printer, '.');\n    totalPrinted += bytesPrinted + dotPrinted;\n  }\n  totalPrinted += Print::print(printer, (ipAddress->_address).bytes[3], 10);\n  return totalPrinted;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005be2",
            "calling": [],
            "imported": false,
            "current_name": "printIPAddress_08005be2"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "write_byte_to_buffer_08006344",
                "param_1": "undefined_param",
                "param_2": "byte_to_write",
                "param_3": "buffer",
                "uVar1": "status",
                "pbVar2": "current_position",
                "start_position": "start_position"
            },
            "code": "uint write_byte_to_buffer_08006344(undefined4 param_1, byte byte_to_write, byte **buffer) {\n  uint status;\n  byte *current_position = buffer[2] - 1;\n  buffer[2] = current_position;\n  if (((int)current_position < 0) && (((int)current_position < (int)buffer[6] || (byte_to_write == 10)))) {\n    status = __swbuf_r();\n    return status;\n  }\n  byte *start_position = *buffer;\n  *buffer = start_position + 1;\n  *start_position = byte_to_write;\n  return (uint)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "check_if_equal_080009c8",
                "in_ZR": "input_char"
            },
            "code": "bool check_if_equal_080009c8(void)\n{\n  char input_char;\n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_if_equal_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "i2c_transfer_08002db2",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pbVar2": "buffer_ptr",
                "uVar3": "transfer_options"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_08002db2(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state = handle->State;\n  uint32_t transfer_options = handle->XferOptions;\n\n  if (handle->XferSize == 0 && state == HAL_I2C_STATE_BUSY_TX) {\n    if (transfer_options == 4 || transfer_options == 8 || transfer_options == 0xffff0000) {\n      handle->Instance->CR2 &= 0xfffff8ff;\n      handle->Instance->CR1 |= 0x200;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      if (handle->Mode == HAL_I2C_MODE_MEM) {\n        handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(handle);\n      }\n      else {\n        handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(handle);\n      }\n    }\n    else {\n      handle->Instance->CR2 &= 0xfffff8ff;\n      handle->PreviousState = 0x11;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(handle);\n    }\n  }\n  else if (state == HAL_I2C_STATE_BUSY_TX || (handle->Mode == HAL_I2C_MODE_MEM && state == HAL_I2C_STATE_BUSY_RX)) {\n    if (handle->XferCount == 0) {\n      handle->Instance->CR2 &= 0xfffffbff;\n    }\n    else if (handle->Mode == HAL_I2C_MODE_MEM) {\n      if (handle->EventCount == 0) {\n        if (handle->MemaddSize == 1) {\n          handle->Instance->DR = handle->Memaddress & 0xff;\n          handle->EventCount += 2;\n        }\n        else {\n          handle->Instance->DR = (handle->Memaddress << 0x10) >> 0x18;\n          handle->EventCount++;\n        }\n      }\n      else if (handle->EventCount == 1) {\n        handle->Instance->DR = handle->Memaddress & 0xff;\n        handle->EventCount++;\n      }\n      else if (handle->EventCount == 2) {\n        if (state == HAL_I2C_STATE_BUSY_RX) {\n          handle->Instance->CR1 |= 0x100;\n        }\n        else if (state == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *buffer_ptr = handle->pBuffPtr;\n          handle->pBuffPtr = buffer_ptr + 1;\n          handle->Instance->DR = (uint)*buffer_ptr;\n          handle->XferCount--;\n        }\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      handle->Instance->DR = (uint)*buffer_ptr;\n      handle->XferCount--;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08002db2"
        },
        "FUN_08005932": {
            "renaming": {
                "FUN_08005932": "get_next_byte_from_serial_buffer_08005932",
                "this": "serial_port",
                "uVar1": "rx_tail"
            },
            "code": "int __thiscall get_next_byte_from_serial_buffer_08005932(HardwareSerial *serial_port) {\n  uint32_t rx_tail = (uint32_t)(serial_port->_serial).rx_tail;\n  if ((serial_port->_serial).rx_head != rx_tail) {\n    return (uint32_t)(serial_port->_serial).rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005932",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_from_serial_buffer_08005932"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_uwTick_value_08001cc4",
                "PTR_uwTick_08001ccc": "ptr_uwTick"
            },
            "code": "uint32_t get_uwTick_value_08001cc4(void)\n{\n  uint32_t* PTR_uwTick_08001ccc = (uint32_t*)PTR_uwTick_08001ccc;\n  return *PTR_uwTick_08001ccc;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_ADCEx_Calibration_Start",
                "HAL_RCC_OscConfig",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_ADC_PollForConversion",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "check_and_handle_alarm_08003ea0",
                "hrtc": "rtc_handle",
                "hrtc->Instance->CRH": "crh_value",
                "hrtc->Instance->CRL": "crl_value",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_a_event",
                "DAT_08003ed4": "PTR_DAT_08003ed4"
            },
            "code": "void check_and_handle_alarm_08003ea0(RTC_HandleTypeDef *rtc_handle) {\n\tuint32_t crh_value = rtc_handle->Instance->CRH;\n\tuint32_t crl_value = rtc_handle->Instance->CRL;\n\tbool is_alarm_a_enabled = (crh_value & 2) != 0;\n\tbool is_alarm_a_triggered = (crl_value & 2) != 0;\n\tif (is_alarm_a_enabled && is_alarm_a_triggered) {\n\t\tHAL_RTC_AlarmAEventCallback(rtc_handle);\n\t\trtc_handle->Instance->CRL = 0xfffffffd;\n\t}\n\t*(uint32_t *)(DAT_08003ed4 + 0x14) = 0x20000;\n\trtc_handle->State = HAL_RTC_STATE_READY;\n\treturn;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_and_handle_alarm_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "i2c_transfer_0800306c",
                "*hi2c": "*handle",
                "uVar1": "transfer_options",
                "puVar2": "buffer_ptr",
                "XferOptions": "transfer_options",
                "XferCount": "handle->XferCount",
                "pBuffPtr": "handle->pBuffPtr",
                "Instance": "handle->Instance",
                "CR1": "handle->Instance->CR1",
                "CR2": "handle->Instance->CR2",
                "DR": "handle->Instance->DR",
                "State": "handle->State",
                "PreviousState": "handle->PreviousState",
                "Mode": "handle->Mode",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MASTER_RxCpltCallback": "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MEM_RxCpltCallback": "HAL_I2C_MemRxCpltCallback"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_0800306c(I2C_HandleTypeDef *handle)\n{\n    uint32_t transfer_options = handle->XferOptions;\n    uint8_t *buffer_ptr;\n    if (handle->XferCount == 3) {\n        if (((transfer_options == I2C_FIRST_AND_LAST_FRAME) || (transfer_options == I2C_FIRST_FRAME)) || (transfer_options == I2C_LAST_FRAME)) {\n            handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffbff;\n        }\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount--;\n    }\n    else if (handle->XferCount == 2) {\n        if (((transfer_options == I2C_FIRST_AND_LAST_FRAME) || (transfer_options == I2C_FIRST_FRAME)) || (transfer_options == I2C_LAST_FRAME)) {\n            handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffcff;\n            handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n        }\n        else {\n            if (transfer_options == I2C_LAST_FRAME) {\n                handle->Instance->CR1 = handle->Instance->CR1 | 0x400;\n            }\n            else {\n                handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffbff;\n            }\n            handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffcff;\n        }\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount--;\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount--;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->PreviousState = 0;\n        if (handle->Mode == HAL_I2C_MODE_MEM) {\n            handle->Mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_MemRxCpltCallback(handle);\n        }\n        else {\n            handle->Mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_MasterRxCpltCallback(handle);\n        }\n    }\n    else {\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount--;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_0800306c"
        },
        "FUN_08005c64": {
            "renaming": {
                "FUN_08005c64": "initialize_static_variables_and_destructors_08005c64"
            },
            "code": "void initialize_static_variables_and_destructors_08005c64(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c64",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_and_destructors_08005c64"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_serial_transmit_complete_0800548c",
                "obj": "serial_obj",
                "HVar1": "uart_state",
                "PTR_uart_handlers_080054ac": "uart_handlers",
                "uint": "unsigned int",
                "return": "is_complete",
                "uint8_t": "bool"
            },
            "code": "bool is_serial_transmit_complete_0800548c(serial_t *serial_obj) {\\\n                          UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_PTR_uart_handlers_080054ac_080054ac + (uint)serial_obj->index * 4);\\\n                          HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\\\n                          bool is_complete = ((uart_state & 0x22U) == 0x22);\\\n                          return is_complete;\\\n                      }",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_serial_transmit_complete_0800548c"
        },
        "FUN_08000924": {
            "renaming": {
                "FUN_08000924": "check_values_08000924",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xor_val",
                "bVar2": "is_equal",
                "bVar3": "is_less_or_equal",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_values_08000924(uint value1, uint value2, uint value3, uint value4)\n{\n  uint result;\n  bool is_negative1, is_negative2;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_negative1 = (value1 | value2 << 1) == 0;\n  if (is_negative1) {\n    is_negative1 = (value3 | value4 << 1) == 0;\n  }\n  if (!is_negative1) {\n    is_negative1 = value2 == value4;\n  }\n  if (is_negative1) {\n    is_negative1 = value1 == value3;\n  }\n  if (!is_negative1) {\n    uint xor_val = value2 ^ value4;\n    is_negative1 = xor_val == 0;\n    if (-1 < (int)xor_val) {\n      is_negative1 = value2 == value4;\n    }\n    is_negative2 = -1 < (int)xor_val && value4 <= value2;\n    if (is_negative1) {\n      is_negative2 = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative2) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000924",
            "calling": [],
            "imported": false,
            "current_name": "check_values_08000924"
        },
        "FUN_08006c34": {
            "renaming": {
                "FUN_08006c34": "walk_reentrant_file_pointers_08006c34",
                "param_1": "reent_structure_ptr",
                "DAT_08006c3c": "file_pointer_walker_function"
            },
            "code": "void walk_reentrant_file_pointers_08006c34(void* reent_structure_ptr)\n{\n  _fwalk_reent(reent_structure_ptr, DAT_08006c3c);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c34",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrant_file_pointers_08006c34"
        },
        "FUN_080072a4": {
            "renaming": {
                "std::ctype_byname<char>::FUN_080072a4": "set_ctype_flags",
                "PTR_id_08007308": "id_08007308",
                "PTR_id_0800730c": "id_0800730c",
                "PTR_id_08007310": "id_08007310",
                "PTR_id_08007314": "id_08007314",
                "PTR_id_08007318": "id_08007318",
                "PTR_id_0800731c": "id_0800731c",
                "PTR_id_08007320": "id_08007320",
                "PTR_id_08007324": "id_08007324",
                "FUN_080072a4": "set_ctype_flags_080072a4"
            },
            "code": "void set_ctype_flags_080072a4() {\n  if (*(int *)PTR_PTR_id_08007308 < 0) {\n    *(undefined4 *)PTR_PTR_id_08007308 = 1;\n  }\n  if (*(int *)PTR_PTR_id_0800730c < 0) {\n    *(undefined4 *)PTR_PTR_id_0800730c = 1;\n  }\n  if (*(int *)PTR_PTR_id_08007310 < 0) {\n    *(undefined4 *)PTR_PTR_id_08007310 = 1;\n  }\n  if (*(int *)PTR_PTR_id_08007314 < 0) {\n    *(undefined4 *)PTR_PTR_id_08007314 = 1;\n  }\n  if (*(int *)PTR_PTR_id_08007318 < 0) {\n    *(undefined4 *)PTR_PTR_id_08007318 = 1;\n  }\n  if (*(int *)PTR_PTR_id_0800731c < 0) {\n    *(undefined4 *)PTR_PTR_id_0800731c = 1;\n  }\n  if (*(int *)PTR_PTR_id_08007320 < 0) {\n    *(undefined4 *)PTR_PTR_id_08007320 = 1;\n  }\n  if (*(int *)PTR_PTR_id_08007324 < 0) {\n    *(undefined4 *)PTR_PTR_id_08007324 = 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072a4",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_080072a4"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_gpio_08004848",
                "port_idx": "port_index",
                "DAT_08004870": "port_a",
                "DAT_08004880": "port_b",
                "DAT_08004874": "port_c",
                "DAT_08004878": "port_d",
                "DAT_0800487c": "port_e"
            },
            "code": "GPIO_TypeDef* get_gpio_08004848(uint32_t port_index) {\n    switch(port_index) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return (GPIO_TypeDef *)0x0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "imported": false,
            "current_name": "get_gpio_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "print_number_08005d82",
                "this": "self",
                "n": "num",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall Print::print_number_08005d82(Print *this,int num,int base)\n{\n  size_t result;\n  result = print_number_08005d82(this,num,base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "print_number_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "find_file_position_and_set_flag_08006f92",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "iVar1": "file_position",
                "uVar2": "flag",
                "bVar3": "file_position_not_found"
            },
            "code": "void find_file_position_and_set_flag_08006f92(int file_descriptor, int* file_info) {\n    int file_position = _lseek_r(file_descriptor, (int)*(short *)(file_info + 0xe));\n    bool file_position_not_found = file_position == -1;\n    ushort flag;\n    if (file_position_not_found) {\n        flag = *(ushort *)(file_info + 0xc) & 0xefff;\n    }\n    else {\n        *(int *)(file_info + 0x54) = file_position;\n        flag = *(ushort *)(file_info + 0xc) | 0x1000;\n    }\n    if (file_position_not_found) {\n        *(ushort *)(file_info + 0xc) = flag;\n    }\n    else {\n        *(ushort *)(file_info + 0xc) = flag;\n    }\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "find_file_position_and_set_flag_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "writeToDataPins_080012c0",
                "this": "lcd",
                "value": "data",
                "uVar1": "pinIndex",
                "_data_pins": "dataPins",
                "digitalWrite": "setPinState",
                "pulseEnable": "sendPulse"
            },
            "code": "void __thiscall LiquidCrystal::writeToDataPins_080012c0(LiquidCrystal *this, uint8_t value) {\n    uint8_t pinIndex;\n    for (pinIndex = 0; pinIndex < 4; pinIndex++) {\n        uint8_t dataPin = this->_data_pins[pinIndex];\n        uint8_t bitValue = (value >> pinIndex) & 0x01;\n        digitalWrite((uint)dataPin, bitValue);\n    }\n    pulseEnable(this);\n    return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "send",
                "begin"
            ],
            "imported": false,
            "current_name": "writeToDataPins_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_ADC_state_08001f80",
                "hadc": "adc_handle"
            },
            "code": "uint32_t get_ADC_state_08001f80(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_state_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "check_ADC_status_08001f84",
                "*hadc": "*hadc",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pAVar4": "adc_instance",
                "wait_loop_index": "wait_time"
            },
            "code": "HAL_StatusTypeDef_conflict check_ADC_status_08001f84(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t wait_time;\n  ADC_TypeDef *adc_instance;\n  \n  adc_instance = hadc->Instance;\n  if ((adc_instance->CR2 & 1) == 0) {\n    adc_instance->CR2 = adc_instance->CR2 | 1;\n    wait_time = (uint32_t)(((uint64_t)DAT_08002000 * (uint64_t)*(uint *)PTR_SystemCoreClock_08001ffc) >> 0x32);\n    while (wait_time != 0) {\n        wait_time--;\n    }\n    uint32_t start_time = HAL_GetTick();\n    do {\n      if ((hadc->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      uint32_t current_time = HAL_GetTick();\n    } while (current_time - start_time < 3);\n    hadc->State |= 0x10;\n    hadc->ErrorCode |= 1;\n    hadc->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "HAL_ADC_Start",
                "HAL_ADCEx_Calibration_Start"
            ],
            "imported": false,
            "current_name": "check_ADC_status_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "initializeReflowOven_08000bcc",
                "puVar1": "ssr_pin",
                "puVar2": "buzzer_pin",
                "this": "lcd",
                "uVar3": "current_time"
            },
            "code": "void initializeReflowOven_08000bcc() {\n  uint32_t ssr_pin;\n  uint32_t buzzer_pin;\n  uint32_t led_pin;\n  LiquidCrystal_I2C lcd(0x27, 16, 2);\n  uint32_t current_time;\n\n  ssr_pin = PTR_ssrPin_08000c90;\n  digitalWrite(*(uint32_t *)PTR_ssrPin_08000c90, LOW);\n  pinMode(ssr_pin, OUTPUT);\n\n  buzzer_pin = PTR_buzzerPin_08000c94;\n  digitalWrite(*(uint32_t *)PTR_buzzerPin_08000c94, LOW);\n  pinMode(buzzer_pin, OUTPUT);\n\n  led_pin = PTR_ledRedPin_08000c98;\n  digitalWrite(*(uint32_t *)PTR_ledRedPin_08000c98, LOW);\n  pinMode(led_pin, OUTPUT);\n\n  digitalWrite(buzzer_pin, HIGH);\n\n  lcd.begin(16, 2);\n  lcd.createChar(0, PTR_degree_08000ca0);\n  lcd.clear();\n  lcd.print(PTR_s_Reflow_08000ca4);\n  lcd.setCursor(0, 1);\n  lcd.print(PTR_s_Oven_1_2_08000ca8);\n\n  digitalWrite(buzzer_pin, LOW);\n  delay(2500);\n\n  lcd.clear();\n\n  Serial2.begin(57600);\n  digitalWrite(led_pin, HIGH);\n\n  *(undefined4 *)PTR_windowSize_08000cb0 = 2000;\n  current_time = millis();\n  *(uint32_t *)PTR_nextCheck_08000cb4 = current_time;\n  current_time = millis();\n  *(uint32_t *)PTR_nextRead_08000cb8 = current_time;\n\n  startForkserver(0);\n}\n",
            "called": [
                "clear",
                "createChar",
                "millis",
                "begin",
                "digitalWrite",
                "setCursor",
                "print",
                "begin",
                "pinMode",
                "startForkserver",
                "delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeReflowOven_08000bcc"
        },
        "FUN_080047d8": {
            "renaming": {
                "FUN_080047d8": "reset_uart_transfer_counts_080047d8",
                "hdma": "dma_handle",
                "huart": "uart_handle",
                "RxXferCount": "rx_transfer_count",
                "TxXferCount": "tx_transfer_count",
                "HAL_UART_ErrorCallback": "handle_uart_error"
            },
            "code": "void reset_uart_transfer_counts_080047d8(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d8",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_080047d8"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_GPIO_PinState_0800281e",
                "GPIOx": "GPIO_Port",
                "GPIO_Pin": "GPIO_Pin",
                "PinState": "PinState",
                "GPIO_PIN_RESET": "GPIO_PIN_RESET",
                "BSRR": "BSRR",
                "uint": "uint32_t"
            },
            "code": "void set_GPIO_PinState_0800281e(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin, GPIO_PinState PinState)\n{\n  if (PinState == GPIO_PIN_RESET) {\n    GPIO_Port->BSRR = (uint32_t)GPIO_Pin << 16;\n    return;\n  }\n  GPIO_Port->BSRR = (uint32_t)GPIO_Pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_GPIO_PinState_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_preinit_array_and_global_dtors_08006198",
                "puVar1": "preinit_array_end",
                "iVar2": "preinit_array_size",
                "iVar3": "i",
                "PTR___preinit_array_end_080061d0": "preinit_array_end",
                "PTR___preinit_array_end_080061d4": "preinit_array_start",
                "_init": "_initialize_global_variables",
                "PTR___preinit_array_end_080061d8": "dtors_array_start",
                "PTR___do_global_dtors_aux_fini_array_entry_080061dc": "dtors_array_end",
                "dtors_array_size": "dtors_array_size"
            },
            "code": "void execute_preinit_array_and_global_dtors_08006198()\\\n                      {\\\n                          void **PTR___preinit_array_end_080061d0 = PTR___PTR___preinit_array_end_080061d0_080061d0;\\\n                          void **PTR___PTR___preinit_array_end_080061d0_080061d4 = PTR___PTR___preinit_array_end_080061d0_080061d4;\\\n                          int preinit_array_size = (int)PTR___PTR___preinit_array_end_080061d0_080061d4 - (int)PTR___preinit_array_end_080061d0;\\\n                          for (int i = 0; i < preinit_array_size / sizeof(void*); i++) {\\\n                              (**(void (**)(void))(PTR___preinit_array_end_080061d0 + i))();\\\n                          }\\\n                          _init();\\\n                          void **PTR___PTR___preinit_array_end_080061d0_080061d8 = PTR___PTR___preinit_array_end_080061d0_080061d8;\\\n                          void **PTR___do_global_dtors_aux_fini_array_entry_080061dc = PTR___do_global_dtors_aux_fini_array_entry_080061dc;\\\n                          int dtors_array_size = (int)PTR___do_global_dtors_aux_fini_array_entry_080061dc - (int)PTR___PTR___preinit_array_end_080061d0_080061d8;\\\n                          for (int i = 0; i < dtors_array_size / sizeof(void*); i++) {\\\n                              (**(void (**)(void))(PTR___PTR___preinit_array_end_080061d0_080061d8 + i))();\\\n                          }\\\n                      }",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_and_global_dtors_08006198"
        },
        "FUN_08006fc0": {
            "renaming": {
                "FUN_08006fc0": "write_to_file_08006fc0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_08006fc0(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *errno_ptr;\n  int write_result;\n  errno_ptr = PTR_errno_08006fe0;\n  *(undefined4 *)PTR_errno_08006fe0 = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fc0",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08006fc0"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "seek_file_08007048",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08007048(int *error_code, int file_descriptor, int offset, int whence) {\n  undefined *error_ptr;\n  int seek_result;\n  error_ptr = PTR_errno_08007068;\n  *(undefined4 *)PTR_errno_08007068 = 0;\n  seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_HCLK_frequency_divided_by_APB_prescaler_08003c50",
                "uVar1": "HCLK_frequency",
                "DAT_08003c68": "data_08003c68",
                "APB_prescaler_index": "APB_prescaler_index",
                "PTR_APBPrescTable_08003c6c": "APB_prescaler_table",
                "APB_prescaler_value": "APB_prescaler_value",
                "uVar2": "HCLK_frequency_divided_by_APB_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003c50(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (uint)(*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08003c6c[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_value;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "result_size",
                "param_4": "param_4",
                "param_5": "processor",
                "iVar1": "process_result",
                "uVar2": "max_data_size",
                "uVar3": "data_processed",
                "bVar4": "has_data_offset",
                "data_offset": "data_offset",
                "result_offset": "result_offset",
                "result_data_size": "result_data_size",
                "data_remaining": "data_remaining"
            },
            "code": "undefined4 process_data_080065c0(undefined4 data, uint *data_size, uint *result_size, undefined4 param_4, code *processor)\n{\n    int i = 0;\n    uint max_data_size = data_size[4];\n    if ((int)data_size[4] < (int)data_size[2]) {\n        max_data_size = data_size[2];\n    }\n    *result_size = max_data_size;\n    if (*(char *)((int)data_size + 0x43) != '\\0') {\n        *result_size = max_data_size + 1;\n    }\n    if ((int)(*data_size << 0x1a) < 0) {\n        *result_size = *result_size + 2;\n    }\n    uint data_offset = *data_size & 6;\n    if (data_offset == 0) {\n        for (; (int)data_offset < (int)(data_size[3] - *result_size); data_offset = data_offset + 1) {\n            int process_result = (*processor)(data, param_4, (int)data_size + 0x19, 1);\n            if (process_result == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    uint result_offset = (uint)*(byte *)((int)data_size + 0x43);\n    if (result_offset != 0) {\n        result_offset = 1;\n    }\n    uint result_data_size = result_offset;\n    if ((int)(*data_size << 0x1a) < 0) {\n        *(undefined *)((int)data_size + result_offset + 0x43) = 0x30;\n        result_data_size = result_offset + 2;\n        *(undefined *)((int)data_size + result_offset + 0x44) = *(undefined *)((int)data_size + 0x45);\n    }\n    int process_result = (*processor)(data, param_4, (int)data_size + 0x43, result_data_size);\n    if (process_result != -1) {\n        uint data_remaining = data_size[3];\n        bool has_data_offset = (*data_size & 6) != 4;\n        if (has_data_offset) {\n            data_remaining = 0;\n        }\n        uint data_processed = 0;\n        if (!has_data_offset) {\n            data_remaining = data_remaining - *result_size;\n        }\n        if (!has_data_offset) {\n            data_remaining = data_remaining & ~((int)data_remaining >> 0x1f);\n        }\n        if ((int)data_size[4] < (int)data_size[2]) {\n            data_remaining = data_remaining + (data_size[2] - data_size[4]);\n        }\n        while (true) {\n            if (data_remaining == data_processed) {\n                return 0;\n            }\n            int process_result = (*processor)(data, param_4, (int)data_size + 0x1a, 1);\n            if (process_result == -1) {\n                break;\n            }\n            data_processed = data_processed + 1;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "receive_data_080054d4",
                "obj": "serial_object",
                "c": "received_character",
                "uVar1": "active_rx"
            },
            "code": "int receive_data_080054d4(serial_t *serial_object, uchar *received_character)\n{\n  uint8_t active_rx;\n  \n  if (serial_object == NULL) {\n    return -1;\n  }\n  active_rx = serial_rx_active(serial_object);\n  if (active_rx == 0) {\n    *received_character = serial_object->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_0800550c + (uint)serial_object->index * 4),\n                        &serial_object->recv,1);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "serial_rx_active",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_080054d4"
        },
        "FUN_0800715c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800715c": "set_c_type_flags",
                "PTR_id_080071f0": "id_1",
                "PTR_id_080071f4": "id_2",
                "PTR_id_080071f8": "id_3",
                "PTR_id_080071fc": "id_4",
                "PTR_id_08007200": "id_5",
                "PTR_id_08007204": "id_6",
                "PTR_id_08007208": "id_7",
                "PTR_id_0800720c": "id_8",
                "PTR_id_08007210": "id_9",
                "PTR_id_08007214": "id_10",
                "PTR_id_08007218": "id_11",
                "PTR_id_0800721c": "id_12",
                "FUN_0800715c": "set_c_type_flags_0800715c"
            },
            "code": "void set_c_type_flags_0800715c() {\n  if (is_flag_set(PTR_id_080071f0)) {\n    set_flag(PTR_id_080071f0);\n  }\n  if (is_flag_set(PTR_id_080071f4)) {\n    set_flag(PTR_id_080071f4);\n  }\n  if (is_flag_set(PTR_id_080071f8)) {\n    set_flag(PTR_id_080071f8);\n  }\n  if (is_flag_set(PTR_id_080071fc)) {\n    set_flag(PTR_id_080071fc);\n  }\n  if (is_flag_set(PTR_id_08007200)) {\n    set_flag(PTR_id_08007200);\n  }\n  if (is_flag_set(PTR_id_08007204)) {\n    set_flag(PTR_id_08007204);\n  }\n  if (is_flag_set(PTR_id_08007208)) {\n    set_flag(PTR_id_08007208);\n  }\n  if (is_flag_set(PTR_id_0800720c)) {\n    set_flag(PTR_id_0800720c);\n  }\n  if (is_flag_set(PTR_id_08007210)) {\n    set_flag(PTR_id_08007210);\n  }\n  if (is_flag_set(PTR_id_08007214)) {\n    set_flag(PTR_id_08007214);\n  }\n  if (is_flag_set(PTR_id_08007218)) {\n    set_flag(PTR_id_08007218);\n  }\n  if (is_flag_set(PTR_id_0800721c)) {\n    set_flag(PTR_id_0800721c);\n  }\n  if (is_flag_set(PTR_id_080071f03)) {\n    set_flag(PTR_id_080071f03);\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800715c",
            "calling": [],
            "imported": false,
            "current_name": "set_c_type_flags_0800715c"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_for_input_08004d40",
                "msg": "message",
                "val": "value"
            },
            "code": "void wait_for_input_08004d40(char *message, int value) {\n    while(true) {\n        //do nothing\n    }\n}",
            "called": [
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "SystemClock_Config",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "wait_for_input_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_bit_and_clear_flags_08004d44",
                "puVar1": "data_ptr",
                "DAT_08004d84": "PTR_DATA",
                "DAT_08004d88": "PTR_DATA_1",
                "DAT_08004d8c": "PTR_DATA_2"
            },
            "code": "void set_bit_and_clear_flags_08004d44(void)\n{\n  uint32_t *data_ptr;\n  data_ptr = DAT_08004d84;\n  *DAT_08004d84 = *DAT_08004d84 | 1;\n  data_ptr[1] = DAT_08004d88 & data_ptr[1];\n  *data_ptr = *data_ptr & 0xfef6ffff;\n  *data_ptr = *data_ptr & 0xfffbffff;\n  data_ptr[1] = data_ptr[1] & 0xff80ffff;\n  data_ptr[2] = 0x9f0000;\n  *(uint32_t *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "check_gpio_pin_0800282c",
                "GPIO_Pin": "pin",
                "DAT_08002844": "gpio_dat"
            },
            "code": "void check_gpio_pin_0800282c(uint16_t pin) {\n  uint* DAT_08002844 = (uint*)(DAT_08002844 + 0x14);\n  if ((*DAT_08002844 & (uint)pin) != 0) {\n    *DAT_08002844 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [
                "EXTI1_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI0_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_gpio_pin_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "MAX31855::FUN_080015b2": "readMax31855",
                "*this": "max31855",
                "uVar2": "bit",
                "uVar3": "data",
                "iVar1": "bitValue",
                "FUN_080015b2": "readMax31855_080015b2"
            },
            "code": "unsigned long readMax31855_080015b2(MAX31855 *max31855)\n{\n  int bitValue;\n  uint32_t data = 0;\n  digitalWrite(max31855->cs, LOW);\n  for (int bit = 31; bit >= 0; bit--)\n  {\n    digitalWrite(max31855->sck, HIGH);\n    bitValue = digitalRead(max31855->so);\n    if (bitValue)\n    {\n      data |= (1UL << bit);\n    }\n    digitalWrite(max31855->sck, LOW);\n  }\n  digitalWrite(max31855->cs, HIGH);\n  return data;\n}",
            "called": [
                "digitalWrite",
                "digitalRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "readThermocouple"
            ],
            "imported": false,
            "current_name": "readMax31855_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "calculate_shifted_value_0800040c",
                "param_1": "input",
                "uVar1": "shifted_value1",
                "uVar2": "shifted_value2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "in_r12": "unused_variable",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "code": "ulonglong calculate_shifted_value_0800040c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 0x15;\n  bool is_overflow = shift_amount < 0x20;\n  uint shift_amount2 = leading_zeroes - 0xb;\n  bool is_negative = (int)shift_amount2 < 0;\n  bool is_zero = shift_amount2 == 0;\n  if (is_overflow) {\n    is_overflow = SCARRY4(shift_amount2, 0xc);\n    leading_zeroes++;\n    is_negative = leading_zeroes < 0;\n    is_zero = leading_zeroes == 0;\n    shift_amount2 = shift_amount;\n    if (!is_zero && is_negative == is_overflow) {\n      ulonglong shifted_value = input << (shift_amount & 0xff);\n      input = input >> (0xcU - leading_zeroes & 0xff);\n      return shifted_value;\n    }\n  }\n  uint shift_amount3 = 0x20 - shift_amount2;\n  ulonglong shifted_value = input << (shift_amount2 & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    shifted_value |= 0U >> (shift_amount3 & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    shifted_value = 0 << (shift_amount2 & 0xff);\n  }\n  if (shift_amount < 0x433) {\n    return CONCAT44(shifted_value + (0x432 - shift_amount) * 0x100000, 0);\n  }\n  uint shift_amount4 = ~(0x432 - shift_amount);\n  if (0x1e < shift_amount4) {\n    return (ulonglong)(input >> (shift_amount4 - 0x1f & 0xff));\n  }\n  int shift_amount5 = shift_amount4 - 0x13;\n  if (shift_amount5 == 0 || shift_amount5 < 0 != SCARRY4(shift_amount4 - 0x1f, 0xc)) {\n    shift_amount4++;\n    return CONCAT44(input >> (shift_amount4 & 0xff), shifted_value >> (shift_amount4 & 0xff) | input << (0x20 - shift_amount4 & 0xff));\n  }\n  return (ulonglong)(shifted_value >> (0x20 - (0xcU - shift_amount5) & 0xff) | input << (0xcU - shift_amount5 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800040c"
        },
        "FUN_08006088": {
            "renaming": {
                "FUN_08006088": "handle_gpio_exti_interrupt_08006088",
                "PTR_": "",
                "DAT_": "",
                "4": "GPIO_PIN_4"
            },
            "code": "void handle_gpio_exti_interrupt_08006088(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006088",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_08006088"
        },
        "FUN_08006eb0": {
            "renaming": {
                "FUN_08006eb0": "process_handler_08006eb0",
                "param_1": "status",
                "param_2": "process_id",
                "param_3": "signal",
                "param_4": "flags",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "handler",
                "pcVar4": "handler"
            },
            "code": "int process_handler_08006eb0(int *status, uint32_t process_id, int signal, uint32_t flags) {\n  __pid_t pid;\n  int result;\n  code *handler;\n  \n  if (process_id > 31) {\n    *status = 22;\n    return -1;\n  }\n  handler = *(code **)(status[17] + process_id * 4);\n  if (handler == NULL) {\n    pid = _getpid_r();\n    result = _kill_r(status, pid, signal, flags);\n    return result;\n  }\n  if (handler == (code *)1) {\n    return 0;\n  }\n  if (handler == (code *)0xffffffff) {\n    *status = 22;\n    return 1;\n  }\n  *(uint32_t *)(status[17] + process_id * 4) = 0;\n  (*handler)(process_id);\n  return 0;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eb0",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_handler_08006eb0"
        },
        "FUN_08004e5c": {
            "renaming": {
                "FUN_08004e5c": "handle_timer_interrupt_08004e5c",
                "PTR_timer_handles_08004e6c": "PTR_timer_handles",
                "timer_handle": "timer",
                "HAL_TIM_IRQHandler": "handle_tim_irq"
            },
            "code": "void handle_timer_interrupt_08004e5c(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08004e6c_08004e6c + 0xc);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e5c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e5c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "get_stimer_from_timer_handle_08004df4",
                "htim": "timer_handle",
                "htim[-1].Lock": "previous_timer_handle->Lock",
                "stimer_t": "stimer_t"
            },
            "code": "stimer_t* get_stimer_from_timer_handle_08004df4(TIM_HandleTypeDef* timer_handle)\n{\n    TIM_HandleTypeDef* previous_timer_handle = timer_handle - 1;\n    return (stimer_t*)&previous_timer_handle->Lock;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_timer_handle_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "configure_GPIO_pin_08004bb0",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pin_pull",
                "uVar1": "pin_index",
                "GPIOx": "GPIO_port",
                "tmpreg": "unused",
                "GPIO_InitStructure": "GPIO_config"
            },
            "code": "void configure_GPIO_pin_08004bb0(PinName_conflict pin, uint32_t mode, uint32_t pull) {\n  uint32_t pin_index = (uint32_t)pin;\n  GPIO_TypeDef *GPIO_port = set_GPIO_Port_Clock((pin_index << 24) >> 28);\n  GPIO_InitTypeDef GPIO_config;\n  GPIO_config.Pin = 1 << (pin_index & 0x0F) & 0xFFFF;\n  GPIO_config.Speed = GPIO_SPEED_FREQ_HIGH;\n  *(uint32_t *)(DAT_08004c28 + 0x18) |= 1;\n  if ((pin_index - 13) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) &= 0xF8FFFFFF;\n    *(uint32_t *)(DAT_08004c2c + 4) |= 0x4000000;\n  }\n  if ((pin_index == 15) || (pin_index == 19) || (pin_index == 20)) {\n    *(uint32_t *)(DAT_08004c2c + 4) &= 0xF8FFFFFF;\n    *(uint32_t *)(DAT_08004c2c + 4) |= 0x2000000;\n  }\n  GPIO_config.Mode = mode;\n  GPIO_config.Pull = pull;\n  HAL_GPIO_Init(GPIO_port, &GPIO_config);\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pin_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "handle_timer_interrupt_08004df8",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "irqHandleOC": "timer_interrupt_handler"
            },
            "code": "void handle_timer_interrupt_08004df8(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->timer_interrupt_handler != NULL) && (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->timer_interrupt_handler)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510::FUN_08001510": "create_new_function",
                "this": "new_function_object",
                "rs": "rs_value",
                "enable": "enable_value",
                "d0": "d0_value",
                "d1": "d1_value",
                "d2": "d2_value",
                "d3": "d3_value",
                "init": "initialize_object",
                "super_Print": "super_print_object",
                "write_error": "write_error_value",
                "_vptr_Print": "vptr_print_value",
                "PTR_PTR_write_1_0800154c": "PTR_PTR_write_1_0800154c_value",
                "FUN_08001510": "create_new_function_08001510"
            },
            "code": "create_new_function_08001510* create_new_function_08001510(create_new_function_08001510* this, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) {\n  this->super_Print.write_error = 0;\n  this->super_Print._vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_0800154c;\n  init(this, '\\x01', rs, 0xff, enable, d0, d1, d2, d3, '\\0', '\\0', '\\0', '\\0');\n  return this;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "create_new_function_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "i2c_listen_08002af8",
                "hi2c": "handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "options",
                "HVar1": "status",
                "pIVar2": "instance",
                "tmpreg": "cr1_reg"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_listen_08002af8(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t options) {\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *instance;\n  uint32_t cr1_reg;\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    } else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      cr1_reg = instance->CR1;\n      if (!(cr1_reg & 1)) {\n        instance->CR1 = cr1_reg | 1;\n      }\n      instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      instance->CR2 |= 0x700;\n    }\n  } else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "handle_I2C_events_080028de",
                "*hi2c": "*i2c_handle",
                "uVar1": "transfer_options",
                "pIVar2": "i2c_instance",
                "tmpreg": "event_count",
                "tmpreg_1": "transfer_count",
                "tmpreg_2": "addressing_mode",
                "tmpreg_3": "previous_state",
                "tmpreg_4": "i2c_state"
            },
            "code": "HAL_StatusTypeDef_conflict handle_I2C_events_080028de(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint32_t event_count = i2c_handle->EventCount;\n  uint32_t transfer_count = i2c_handle->XferCount;\n  uint32_t addressing_mode = (i2c_handle->Init).AddressingMode;\n  uint32_t previous_state = i2c_handle->PreviousState;\n  uint32_t i2c_state = i2c_handle->State;\n\n  if ((i2c_state == HAL_I2C_STATE_BUSY_RX) && ((event_count != 0) || (i2c_handle->Mode != HAL_I2C_MODE_MEM))) {\n    if ((event_count == 0) && (addressing_mode == 0xc000)) {\n      i2c_instance->CR1 |= 0x100;\n      i2c_handle->EventCount++;\n    }\n    else {\n      if (transfer_count == 0) {\n        i2c_instance->CR1 |= 0x200;\n      }\n      else if (transfer_count == 1) {\n        if (transfer_options == 0xffff0000) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          if ((i2c_instance->CR2 & 0x800) == 0) {\n            i2c_instance->CR1 |= 0x200;\n          }\n          else {\n            i2c_instance->CR1 &= 0xfffffbff;\n          }\n        }\n        else if (((transfer_options == 4) || (transfer_options == 8)) || (previous_state == 0x12)) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          i2c_instance->CR1 |= 0x200;\n        }\n        else if (transfer_options == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n      }\n      else if (transfer_count == 2) {\n        if (transfer_options == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 |= 0x800;\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      else {\n        i2c_instance->CR1 |= 0x400;\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      i2c_handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_events_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "i2c_handle_mem_mode_08002848",
                "*hi2c": "*i2c_handle",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "EventCount": "event_count",
                "Instance": "instance",
                "Devaddress": "dev_address",
                "I2C_ADDRESSINGMODE_10BIT": "0x4000",
                "State": "state"
            },
            "code": "HAL_StatusTypeDef i2c_handle_mem_mode_08002848(I2C_HandleTypeDef *i2c_handle)\n{\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        if (i2c_handle->EventCount == 0) {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n        }\n        else {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n        }\n    }\n    else if ((i2c_handle->Init).AddressingMode == I2C_ADDRESSINGMODE_10BIT) {\n        if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n        }\n        else {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n        }\n    }\n    else if (i2c_handle->EventCount == 0) {\n        i2c_handle->Instance->DR = (i2c_handle->Devaddress << 16) >> 23 & 6 | 0xf0;\n    }\n    else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = (i2c_handle->Devaddress << 16) >> 23 & 6 | 0xf1;\n    }\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_mem_mode_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "get_i2c_t_08004e70",
                "hi2c": "i2c_handle"
            },
            "code": "typedef struct {\n    uint32_t EventCount;\n    uint32_t ErrorCount;\n    HAL_StatusTypeDef Status;\n    uint32_t Mode;\n    uint32_t OwnAddress1;\n    uint32_t OwnAddress2;\n    uint32_t OwnAddress3;\n    uint32_t AddressingMode;\n    uint32_t DualAddressMode;\n    uint32_t GeneralCallMode;\n    uint32_t NoStretchMode;\n} i2c_t;\n\ni2c_t* get_i2c_t_08004e70(I2C_HandleTypeDef* i2c_handle) {\n    return (i2c_t*)&i2c_handle->EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_t_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_ADC_conversion_ready_080020f0",
                "*hadc": "*adc_handle",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "pAVar3": "adc_instance",
                "PTR_16_LOCAL_ADC_TypeDef": "ADC_TypeDef",
                "PTR_20_LOCAL_ADC_HandleTypeDef": "ADC_HandleTypeDef",
                "PTR_24_LOCAL_HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "DAT_080030a4": "ADC_CR2_ADON",
                "CR2": "CR2",
                "State": "State",
                "ErrorCode": "ErrorCode"
            },
            "code": "PTR_24_LOCAL_HAL_StatusTypeDef check_ADC_conversion_ready_080020f0(PTR_20_LOCAL_ADC_HandleTypeDef *adc_handle)\n{\n  uint32_t start_time = HAL_GetTick();\n  PTR_16_LOCAL_ADC_TypeDef *adc_instance = adc_handle->Instance;\n  if ((adc_instance->CR2 & DAT_080030a4) == 0) {\n    return HAL_OK;\n  }\n  adc_instance->CR2 &= ~DAT_080030a4;\n  while ((adc_handle->Instance->CR2 & DAT_080030a4) != 0 && (HAL_GetTick() - start_time < 3)) {}\n  if ((adc_handle->Instance->CR2 & DAT_080030a4) != 0) {\n    adc_handle->State |= HAL_ADC_STATE_ERROR_INTERNAL;\n    adc_handle->ErrorCode |= HAL_ADC_ERROR_INTERNAL;\n    return HAL_ERROR;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "imported": false,
            "current_name": "check_ADC_conversion_ready_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "allocate_memory_08006e10",
                "param_1": "memory_size",
                "param_2": "memory_block",
                "uVar1": "status_flags",
                "iVar2": "allocation_result",
                "local_18": "local_memory_size",
                "local_14": "local_memory_block"
            },
            "code": "void allocate_memory_08006e10(int memory_size, int *memory_block)\n{\n    ushort status_flags;\n    int allocation_result;\n    int local_memory_size;\n    int *local_memory_block;\n\n    if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n        local_memory_size = memory_size;\n        local_memory_block = memory_block;\n        status_flags = __swhatbuf_r(memory_size, memory_block, &local_memory_size, &local_memory_block);\n        allocation_result = _malloc_r(memory_size, local_memory_size);\n        if (allocation_result != 0) {\n            *(undefined4 *)(memory_size + 0x28) = DAT_08006e8c;\n            *memory_block = allocation_result;\n            *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n            memory_block[4] = allocation_result;\n            memory_block[5] = local_memory_size;\n            if ((local_memory_block != (int *)0x0) &&\n                (allocation_result = _isatty_r(memory_size, (int)*(short *)((int)memory_block + 0xe)), allocation_result != 0)) {\n                *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(memory_block + 3) = status_flags | *(ushort *)(memory_block + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n    }\n    *memory_block = (int)memory_block + 0x47;\n    memory_block[4] = (int)memory_block + 0x47;\n    memory_block[5] = 1;\n    return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006e10"
        },
        "FUN_0800607e": {
            "renaming": {
                "FUN_0800607e": "handle_GPIO_EXTI_Interrupt_0800607e"
            },
            "code": "void handle_GPIO_EXTI_Interrupt_0800607e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800607e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_Interrupt_0800607e"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "i2c_handle_slave_transmit_08004e74",
                "hi2c": "i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "HAL_I2C_Slave_Sequential_Transmit_IT",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "ushort": "unsigned_short"
            },
            "code": "void i2c_handle_slave_transmit_08004e74(I2C_HandleTypeDef *i2c_handle, uint8_t transfer_direction, uint16_t address_match_code) {\\n  i2c_t *i2c_obj = get_i2c_object(i2c_handle);\\n  if ((uint)address_match_code == (i2c_handle->Init).OwnAddress1) {\\n    if (transfer_direction == \"\\0\") {\\n      i2c_obj->tx_rx_buffer_size = \"\\0\";\\n      i2c_obj->slave_mode = \"\\0\";\\n      if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\\n        (*i2c_obj->on_slave_transmit)();\\n      }\\n      HAL_I2C_Slave_Sequential_Transmit_IT\\n                (i2c_handle, i2c_obj->tx_rx_buffer, (ushort)i2c_obj->tx_rx_buffer_size, 8);\\n      return;\\n    }\\n    i2c_obj->slave_mode = \"\\x01\";\\n    HAL_I2C_Slave_Sequential_Receive_IT(i2c_handle, i2c_obj->tx_rx_buffer, 0x20, 8);\\n  }\\n  return;\\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_handle_slave_transmit_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_gpio_pin_value_08004c30",
                "port": "gpio_port",
                "pin": "gpio_pin_number",
                "val": "pin_value",
                "GPIO_TypeDef": "gpio_port_type",
                "GPIO_PIN_RESET": "gpio_pin_reset",
                "GPIO_PIN_SET": "gpio_pin_set",
                "HAL_GPIO_WritePin": "write_gpio_pin"
            },
            "code": "void set_gpio_pin_value_08004c30(GPIO_TypeDef *gpio_port, uint32_t gpio_pin_number, uint32_t pin_value) {\n    if (pin_value == 0) {\n        HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin_number, GPIO_PIN_RESET);\n        return;\n    }\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin_number, GPIO_PIN_SET);\n    return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_value_08004c30"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "handle_GPIO_interrupt_08006092",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_GPIO_interrupt_08006092(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08006092"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "read_and_update_data_08006f38",
                "param_1": "file_descriptor",
                "param_2": "data_address",
                "iVar1": "bytes_read",
                "uVar2": "updated_value",
                "bVar3": "read_successful"
            },
            "code": "void read_and_update_data_08006f38(int file_descriptor, int data_address) {\n  int bytes_read = _read_r(file_descriptor, (int)*(short *)(data_address + 0xe));\n  bool read_successful = bytes_read >= 0;\n  uint updated_value;\n  if (read_successful) {\n    updated_value = *(int *)(data_address + 0x54) + bytes_read;\n  }\n  else {\n    updated_value = *(ushort *)(data_address + 0xc) & 0xffffefff;\n  }\n  if (read_successful) {\n    *(uint *)(data_address + 0x54) = updated_value;\n  }\n  if (!read_successful) {\n    *(short *)(data_address + 0xc) = (short)updated_value;\n  }\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_data_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "findPinFunction_08004cce",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "functionIndex"
            },
            "code": "uint32_t findPinFunction_08004cce(PinName_conflict pin, PinMap_conflict *map)\n{\n    uint32_t functionIndex;\n    if (pin == NC)\n    {\n        return 0xffffffff;\n    }\n    functionIndex = pinmap_find_function(pin, map);\n    return functionIndex;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "pwm_stop",
                "get_adc_channel",
                "get_pwm_channel",
                "uart_init"
            ],
            "imported": false,
            "current_name": "findPinFunction_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006f34": {
            "renaming": {
                "FUN_08006f34": "get_process_id_08006f34"
            },
            "code": "__pid_t get_process_id_08006f34(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08006f34"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08006fe4": {
            "renaming": {
                "FUN_08006fe4": "close_file_and_handle_error_08006fe4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_pointer",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_handle_error_08006fe4(int *error_code, int file_descriptor) {\n    undefined *errno_pointer;\n    int close_result;\n    errno_pointer = PTR_errno_08007000;\n    *(undefined4 *)PTR_errno_08007000 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)errno_pointer != 0)) {\n        *error_code = *(int *)errno_pointer;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fe4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_handle_error_08006fe4"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "configureClocks_08003ad4",
                "RCC_ClkInitTypeDef_conflict": "RCC_ClkInitTypeDef",
                "RCC_ClkInitStruct": "clockInit",
                "FLatency": "latency",
                "puVar1": "flashLatency",
                "uVar2": "currentTime",
                "uVar3": "elapsedTime",
                "uVar4": "sysClockSource"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003ad4(RCC_ClkInitTypeDef* clockInit, uint32_t latency)\n{\n    uint* flashLatency = DAT_08003c34;\n    uint32_t currentTime, elapsedTime;\n    uint sysClockSource;\n\n    if (((*flashLatency & 7) < latency) && (*flashLatency = *flashLatency & 0xfffffff8 | latency, latency != (*flashLatency & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | clockInit->AHBCLKDivider;\n    }\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n        sysClockSource = clockInit->SYSCLKSource;\n        if (sysClockSource == RCC_SYSCLKSOURCE_PLLCLK) {\n            if ((*DAT_08003c38 & 0x20000) == 0) {\n                return HAL_ERROR;\n            }\n        }\n        else if ((sysClockSource != RCC_SYSCLKSOURCE_HSE) && ((*DAT_08003c38 & 2) == 0)) {\n            return HAL_ERROR;\n        }\n        DAT_08003c38[1] = sysClockSource | DAT_08003c38[1] & 0xfffffffc;\n        currentTime = HAL_GetTick();\n        while ((DAT_08003c38[1] & RCC_CFGR_SWS) != (sysClockSource << 2)) {\n            elapsedTime = HAL_GetTick();\n            if (5000 < elapsedTime - currentTime) {\n                return HAL_TIMEOUT;\n            }\n        }\n    }\n    flashLatency = DAT_08003c34;\n    if ((latency < (*DAT_08003c34 & 7)) && (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | latency, latency != (*flashLatency & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | clockInit->APB1CLKDivider;\n    }\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | clockInit->APB2CLKDivider << 3;\n    }\n    uint sysClockFrequency = HAL_RCC_GetSysClockFreq();\n    *(uint*)PTR_SystemCoreClock_08003c40 = sysClockFrequency >> PTR_AHBPrescTable_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n    HAL_InitTick(0xf);\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_channel_state_08004110",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channel_new_state",
                "CCER": "ccer_mask"
            },
            "code": "void update_channel_state_08004110(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_new_state) {\n  uint32_t channel_mask = 4 << (channel & 0xff);\n  uint32_t ccer_mask = ~(channel_mask);\n  timer->CCER = (timer->CCER & ccer_mask) | (channel_new_state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "update_channel_state_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "is_pin_valid_08004ce2",
                "pin": "pin_name",
                "map": "pin_map",
                "NC": "invalid_pin",
                "true": "valid",
                "false": "invalid"
            },
            "code": "\nbool is_pin_valid_08004ce2(PinName_conflict pin, PinMap_conflict *map)\n{\n    if (pin == NC) {\n        return false;\n    }\n    while (true) {\n        if (map->pin == NC) {\n            return false;\n        }\n        if (pin == map->pin) break;\n        map = map + 1;\n    }\n    return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_valid_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "transmit_data_08005568",
                "obj": "serial_object",
                "callback": "transmit_callback",
                "bVar1": "index",
                "PTR_tx_callback_080055b0": "tx_callback_080055b0",
                "tx_callback": "tx_callback",
                "PTR_tx_callback_obj_080055b4": "tx_callback_obj_080055b4",
                "tx_callback_object": "tx_callback_object",
                "irq": "interrupt_request",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "PTR_uart_handlers_080055b8": "uart_handlers_080055b8",
                "uart_handler": "uart_handler",
                "HAL_UART_Transmit_IT": "transmit_data_interrupt"
            },
            "code": "void transmit_data_08005568(serial_t *serial_object, _func_int_serial_t_ptr *transmit_callback)\n{\n  if (serial_object != NULL) {\n    uint8_t index = serial_object->index;\n    _func_int_serial_t_ptr **tx_callback = (_func_int_serial_t_ptr **)(PTR_PTR_tx_callback_080055b0 + index * 4);\n    *tx_callback = transmit_callback;\n    serial_t **tx_callback_object = (serial_t **)(PTR_PTR_tx_callback_obj_080055b4 + index * 4);\n    *tx_callback_object = serial_object;\n    HAL_NVIC_SetPriority(serial_object->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_object->irq);\n    UART_HandleTypeDef **uart_handler = (UART_HandleTypeDef **)(PTR_PTR_uart_handlers_080055b8 + index * 4);\n    HAL_UART_Transmit_IT(*uart_handler, serial_object->tx_buff + serial_object->tx_tail, 1);\n  }\n}",
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "transmit_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "UART_Transmit_08004478",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_time"
            },
            "code": "HAL_StatusTypeDef UART_Transmit_08004478(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n\n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n\n  if (data == NULL || size == 0) {\n    return HAL_ERROR;\n  }\n\n  if (uart_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n\n  uart_handle->Lock = HAL_LOCKED;\n  uart_handle->ErrorCode = 0;\n  uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n  start_time = HAL_GetTick();\n  uart_handle->TxXferSize = size;\n  uart_handle->TxXferCount = size;\n\n  while (uart_handle->TxXferCount != 0) {\n    uart_handle->TxXferCount--;\n    if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        uart_handle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = *(uint16_t *)data & 0x1FF;\n      if (uart_handle->Init.Parity == UART_PARITY_NONE) {\n        data += 2;\n      }\n      else {\n        data++;\n      }\n    }\n    else {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        uart_handle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = (uint32_t)*data;\n      data++;\n    }\n  }\n\n  status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, start_time, timeout);\n  if (status == HAL_OK) {\n    uart_handle->gState = HAL_UART_STATE_READY;\n    uart_handle->Lock = HAL_UNLOCKED;\n  }\n  else {\n    status = HAL_TIMEOUT;\n  }\n\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "UART_Transmit_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_EVP_PKEY_context_08005f5e",
                "ctx": "context"
            },
            "code": "void initialize_EVP_PKEY_context_08005f5e(EVP_PKEY_CTX *context)\n{\n  context = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(context);\n  return;\n}",
            "called": [
                "init",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_context_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "__thiscall Print::FUN_08005cb6": "size_t Print::printChar",
                "this": "this",
                "c": "character",
                "sVar1": "size",
                "FUN_08005cb6": "printChar_08005cb6"
            },
            "code": "size_t Print::printChar_08005cb6(Print *this,char character) {\n  size_t size;\n  size = (**this->_vptr_Print)(this,(int)character);\n  return size;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "printTo",
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "printChar_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_HCLK_frequency_08003c70",
                "uVar1": "HCLK_frequency",
                "DAT_08003c88": "data_pointer",
                "PTR_APBPrescTable_08003c8c": "APB_prescaler_table",
                "APB_prescaler_index": "APB_prescaler_index",
                "result": "final_frequency"
            },
            "code": "uint32_t get_HCLK_frequency_08003c70(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08003c8c[APB_prescaler_index];\n  uint32_t result = HCLK_frequency >> APB_prescaler_value;\n  return result;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "transmit_uart_data_080053d4",
                "*data": "data",
                "size": "size",
                "PinName_conflict": "PinName",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "pin": "pin_name",
                "HVar1": "status",
                "uVar2": "start_time_ms",
                "pvVar3": "peripheral_ptr",
                "uVar4": "i",
                "uVar5": "i"
            },
            "code": "size_t transmit_uart_data_080053d4(uint8_t *data, uint32_t size)\n{\n  PinName pin_name;\n  HAL_StatusTypeDef status;\n  uint32_t start_time_ms;\n  void *peripheral_ptr;\n  uint32_t i;\n\n  start_time_ms = HAL_GetTick();\n  pin_name = PTR_digitalPin_0800547c[1];\n  peripheral_ptr = pinmap_peripheral(pin_name, (PinMap *)PTR_PinMap_UART_TX_08005480);\n  if (peripheral_ptr == NULL) {\n    return 0;\n  }\n  i = 0;\n  while (i < 5 && ((*(int *)(PTR_uart_handlers_08005484 + i * 4) == 0 || (peripheral_ptr = pinmap_peripheral(pin_name, (PinMap *)PTR_PinMap_UART_TX_08005480), **(void ***)(PTR_uart_handlers_08005484 + i * 4) != peripheral_ptr)))) {\n    i++;\n  }\n  if (i > 4) {\n    if (PTR_serial_debug_08005488[0x44] > 4) {\n      uart_debug_init();\n      if (PTR_serial_debug_08005488[0x44] > 4) {\n        return 0;\n      }\n    }\n    i = PTR_serial_debug_08005488[0x44];\n  }\n  do {\n    status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08005484 + i * 4), data, (uint16_t)size, 1000);\n    if (status == HAL_OK) {\n      return size;\n    }\n  } while (HAL_GetTick() - start_time_ms < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_UART_Transmit",
                "pinmap_peripheral",
                "uart_debug_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "listen_state_handler_08002b84",
                "hi2c": "i2c_handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "tmpreg": "control_register"
            },
            "code": "HAL_StatusTypeDef_conflict listen_state_handler_08002b84(I2C_HandleTypeDef *i2c_handle, uint8_t *data, uint16_t size, uint32_t transfer_options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t control_register;\n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "listen_state_handler_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "read_GPIO_pin_state_08004c48",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "GVar1": "pin_state"
            },
            "code": "uint32_t read_GPIO_pin_state_08004c48(GPIO_TypeDef *gpio_port, uint32_t gpio_pin) {\n  GPIO_PinState pin_state;\n  pin_state = HAL_GPIO_ReadPin(gpio_port, (uint16_t)gpio_pin);\n  return (uint32_t)pin_state;\n}",
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "digitalRead"
            ],
            "imported": false,
            "current_name": "read_GPIO_pin_state_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "reverse_bits_0800042c",
                "param_1": "num_bits",
                "uVar1": "result_high",
                "uVar2": "abs_bits",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "temp",
                "uVar6": "is_negative",
                "in_r12": "unused",
                "bVar7": "temp_bool_1",
                "bVar8": "temp_bool_2",
                "bVar9": "temp_bool_3",
                "count_leading_zeroes": "count_leading_zeros",
                "SCARRY4": "SCARRY4",
                "CONCAT44": "CONCAT44"
            },
            "code": "ulonglong reverse_bits_0800042c(uint num_bits)\n{\n  uint abs_bits = num_bits & 0x7FFFFFFF;\n  if (abs_bits == 0) {\n    return 0;\n  }\n  uint leading_zeros = count_leading_zeroes(abs_bits);\n  uint shift_amount = leading_zeros + 0x15;\n  bool is_negative = (int)num_bits < 0;\n  uint masked_bits = abs_bits << leading_zeros;\n  if ((int)shift_amount < 0x20) {\n    shift_amount = shift_amount + 1;\n    if (shift_amount >= 0) {\n      masked_bits = abs_bits << shift_amount;\n    }\n  }\n  if ((int)shift_amount < 0x433) {\n    return CONCAT44(masked_bits | (is_negative ? 0x80000000 : 0), 0) >> (0x432 - shift_amount) * 0x10;\n  }\n  uint excess_bits = ~(0x432 - shift_amount);\n  if (0x1E < (int)excess_bits) {\n    return CONCAT44(num_bits, masked_bits >> (excess_bits - 0x1F)) & 0x80000000FFFFFFFF;\n  }\n  int shift_amount_2 = excess_bits - 0x13;\n  if (shift_amount_2 == 0 || shift_amount_2 < 0 != SCARRY4(excess_bits - 0x1F, 0xC)) {\n    excess_bits = excess_bits + 1;\n    return CONCAT44(masked_bits >> excess_bits | (is_negative ? 0x80000000 : 0), 0) | (ulonglong)masked_bits << (0x20 - excess_bits);\n  }\n  return CONCAT44(num_bits, masked_bits >> (0x20 - (0xCU - shift_amount_2)) | (ulonglong)masked_bits << (0xCU - shift_amount_2)) & 0x80000000FFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "main_loop_08005f6c",
                "DAT_08005f88": "serial_event_pending",
                "serialEventRun": "runSerialEvent",
                "loop": "runLoop",
                "setup": "initialize",
                "initVariant": "initializeVariant"
            },
            "code": "int main_loop_08005f6c(void)\n{\n  initVariant();\n  setup();\n  do {\n    do {\n      loop();\n    } while (serialEventPending() == 0);\n    runSerialEvent();\n  } while(true);\n}",
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_08005f6c"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "handle_UART1_interrupt_08005690",
                "PTR_uart_handlers_080056a4": "PTR_uart_handlers",
                "*PTR_uart_handlers_080056a4": "uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "USART1_IRQn": "UART1_IRQn",
                "HAL_UART_IRQHandler": "handle_UART_interrupt",
                "UART_HandleTypeDef": "UART_handler"
            },
            "code": "void handle_UART1_interrupt_08005690(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  UART_HandleTypeDef* *PTR_uart_handlers_080056a4 = *(UART_HandleTypeDef **)PTR_*PTR_uart_handlers_080056a4_080056a4_080056a4;\n  HAL_UART_IRQHandler(*PTR_uart_handlers_080056a4);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART1_interrupt_08005690"
        },
        "FUN_08005cc0": {
            "renaming": {
                "__thiscall Print::FUN_08005cc0": "printMessage",
                "this": "printObj",
                "sVar1": "messageLength",
                "FUN_08005cc0": "printMessage_08005cc0"
            },
            "code": "size_t __thiscall printMessage_08005cc0(Print *printObj)\n{\n  size_t messageLength;\n  messageLength = (*printObj->_vptr_Print[1])(printObj,PTR_DAT_08005cd0,2);\n  return messageLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printMessage_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "read_file_contents_0800706c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_bytes"
            },
            "code": "void read_file_contents_0800706c(int* error_code, int file_descriptor, char* buffer, int buffer_size) {\n    undefined* error_ptr = PTR_errno_0800708c;\n    *(undefined4*)PTR_errno_0800708c = 0;\n    int read_bytes = _read(file_descriptor, buffer, buffer_size);\n    if ((read_bytes == -1) && (*(int*)error_ptr != 0)) {\n        *error_code = *(int*)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_contents_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "configure_GPIO_pins_08002624",
                "GPIOx": "gpio_port",
                "GPIO_Init": "gpio_init",
                "pGVar1": "gpio_port_temp",
                "uVar2": "var_1",
                "uVar3": "var_2",
                "uVar4": "var_3",
                "uVar5": "pin_num",
                "uVar6": "mode",
                "uVar7": "speed",
                "iVar8": "var_4",
                "uVar9": "var_5",
                "iVar10": "var_6",
                "tmpreg": "temp_reg",
                "DAT_08002804": "GPIO_MODE_AF_PP",
                "DAT_08002808": "GPIO_MODE_AF_OD"
            },
            "code": "void configure_GPIO_pins_08002624(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {\n    uint8_t pin_num;\n    uint8_t mode;\n    uint8_t speed;\n    uint8_t pull;\n    uint32_t tmpreg;\n\n    for (pin_num = 0; pin_num <= 15; pin_num++) {\n        uint16_t pin_mask = 1 << pin_num;\n        if ((GPIO_Init->Pin & pin_mask) == pin_mask) {\n            mode = GPIO_Init->Mode;\n            if (mode == DAT_08002804 || mode == DAT_08002808) {\n                speed = GPIO_Init->Speed + GPIO_SPEED_FREQ_HIGH;\n            }\n            else {\n                switch (mode) {\n                    case GPIO_MODE_INPUT:\n                    case GPIO_MODE_IT_RISING:\n                    case GPIO_MODE_IT_FALLING:\n                    case GPIO_MODE_IT_RISING_FALLING:\n                        speed = GPIO_Init->Speed;\n                        break;\n                    case GPIO_MODE_OUTPUT_PP:\n                    case GPIO_MODE_OUTPUT_OD:\n                        speed = GPIO_Init->Speed + GPIO_SPEED_FREQ_LOW;\n                        break;\n                    case GPIO_MODE_ANALOG:\n                        speed = GPIO_Init->Speed;\n                        break;\n                    default:\n                        speed = 0;\n                        break;\n                }\n            }\n            pull = GPIO_Init->Pull;\n            if (pull == GPIO_NOPULL) {\n                speed = GPIO_Init->Speed + GPIO_SPEED_FREQ_VERY_HIGH;\n            }\n            else if (pull == GPIO_PULLUP) {\n                GPIOx->BSRR = pin_mask;\n            }\n            else {\n                GPIOx->BRR = pin_mask;\n            }\n            if (pin_num <= 7) {\n                GPIOx->CRL = (GPIOx->CRL & ~(0xf << (pin_num * 4))) | (speed << (pin_num * 4));\n            }\n            else {\n                GPIOx->CRH = (GPIOx->CRH & ~(0xf << ((pin_num - 8) * 4))) | (speed << ((pin_num - 8) * 4));\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pins_08002624"
        },
        "FUN_0800609c": {
            "renaming": {
                "FUN_0800609c": "handle_GPIO_EXTI_interrupt_0800609c",
                "PTR_": "",
                "DAT_": "",
                "0x10": "EXTI_Line_4"
            },
            "code": "void handle_GPIO_EXTI_interrupt_0800609c(void)\n{\n  const uint32_t EXTI_Line_4 = 0x10;\n  HAL_GPIO_EXTI_IRQHandler(EXTI_Line_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800609c",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_interrupt_0800609c"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "set_channel_to_low_state_080040b0",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "tim_instance",
                "DAT_0800410c": "instance_0800410c"
            },
            "code": "HAL_StatusTypeDef_conflict set_channel_to_low_state_080040b0(TIM_HandleTypeDef *htim, uint32_t channel)\n{\n  TIM_TypeDef *tim_instance = htim->Instance;\n  TIM_CCxChannelCmd(tim_instance, channel, 0);\n  if (((tim_instance == DAT_0800410c) && ((tim_instance->CCER & 0x1111) == 0)) && ((tim_instance->CCER & 0x444) == 0))\n  {\n    tim_instance->BDTR &= 0xffff7fff;\n  }\n  if (((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\n    tim_instance->CR1 &= 0xfffffffe;\n  }\n  htim->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "set_channel_to_low_state_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "__thiscall Print::FUN_08005d42": "print_number",
                "this": "print_obj",
                "n": "number",
                "base": "base",
                "sVar1": "result",
                "sVar2": "result2",
                "FUN_08005d42Number": "print_number_base",
                "'\\n'": "'\\n'",
                "FUN_08005d42": "print_number_08005d42"
            },
            "code": "size_t print_number_08005d42(Print *print_obj, long number, int base) {\n    size_t result;\n    if (base == 0) {\n        result = (**print_obj->_vptr_Print)(print_obj, number & 0xff);\n        return result;\n    }\n    if (base != 10) {\n        result = print_number_08005d42_base(print_obj, number, (uint8_t)base);\n        return result;\n    }\n    if (number >= 0) {\n        result = print_number_08005d42_base(print_obj, number, '\\n');\n        return result;\n    }\n    result = print_char(print_obj, '-');\n    result += print_number_08005d42_base(print_obj, -number, '\\n');\n    return result;\n}",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_08004b34(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_HAL_and_system_clock_08004c52"
            },
            "code": "void initialize_HAL_and_system_clock_08004c52(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_HAL_and_system_clock_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "initializeLCD_080013a4",
                "this": "lcd",
                "cols": "num_columns",
                "lines": "num_lines",
                "dotsize": "dot_size",
                "iVar1": "data_pin_mode",
                "iVar2": "data_pin_index"
            },
            "code": "void __thiscall initializeLCD_080013a4(LiquidCrystal *lcd, uint8_t num_columns, uint8_t num_lines, uint8_t dot_size) {\n  int data_pin_index = 0;\n  if (num_lines > 1) {\n    lcd->_displayfunction |= 8;\n  }\n  lcd->_numlines = num_lines;\n  setRowOffsets(lcd, 0, 0x40, (uint)num_columns, num_columns + 0x40);\n  if ((dot_size != 0) && (num_lines == 1)) {\n    lcd->_displayfunction |= 4;\n  }\n  pinMode((uint)lcd->_rs_pin, OUTPUT);\n  if (lcd->_rw_pin != 0xff) {\n    pinMode((uint)lcd->_rw_pin, OUTPUT);\n  }\n  pinMode((uint)lcd->_enable_pin, OUTPUT);\n  while (data_pin_index < 4) {\n    if ((lcd->_displayfunction & 0x10) == 0x00) {\n      pinMode((uint)lcd->_data_pins[data_pin_index], OUTPUT);\n    }\n    else {\n      pinMode((uint)lcd->_data_pins[data_pin_index], OUTPUT);\n    }\n    data_pin_index++;\n  }\n  digitalWrite((uint)lcd->_rs_pin, LOW);\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  if (lcd->_rw_pin != 0xff) {\n    digitalWrite((uint)lcd->_rw_pin, LOW);\n  }\n  if ((lcd->_displayfunction & 0x10) == 0x00) {\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x02);\n  }\n  else {\n    send(lcd, lcd->_displayfunction | 0x20, 0x00);\n    send(lcd, lcd->_displayfunction | 0x20, 0x00);\n    send(lcd, lcd->_displayfunction | 0x20, 0x00);\n  }\n  send(lcd, lcd->_displayfunction | 0x20, 0x00);\n  lcd->_displaycontrol = 0x04;\n  display(lcd);\n  clear(lcd);\n  lcd->_displaymode = 0x02;\n  send(lcd, 0x06, 0x00);\n}\n",
            "called": [
                "clear",
                "write4bits",
                "send",
                "setRowOffsets",
                "display",
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "setup",
                "init"
            ],
            "imported": false,
            "current_name": "initializeLCD_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "find_unused_buffer_08006d14",
                "param_1": "error_code",
                "piVar1": "buffer_ptr",
                "piVar2": "current_buffer_ptr",
                "iVar3": "global_impure_ptr",
                "ppiVar4": "buffer_list_ptr"
            },
            "code": "int * find_unused_buffer_08006d14(undefined4 *error_code) {\n  int *buffer_ptr;\n  int *current_buffer_ptr;\n  int global_impure_ptr = *(int *)PTR__global_impure_ptr_08006d88;\n  if (*(int *)(global_impure_ptr + 0x18) == 0) {\n    __sinit(global_impure_ptr);\n  }\n  int **buffer_list_ptr = (int **)(global_impure_ptr + 0x48);\n  do {\n    current_buffer_ptr = buffer_list_ptr[2];\n    buffer_ptr = buffer_list_ptr[1];\n    while (buffer_ptr = (int *)((int)buffer_ptr + -1), -1 < (int)buffer_ptr) {\n      if (*(short *)(current_buffer_ptr + 3) == 0) {\n        *(undefined2 *)((int)current_buffer_ptr + 0xe) = 0xffff;\n        current_buffer_ptr[0x19] = 0;\n        *(undefined2 *)(current_buffer_ptr + 3) = 1;\n        *current_buffer_ptr = 0;\n        current_buffer_ptr[2] = 0;\n        current_buffer_ptr[1] = 0;\n        current_buffer_ptr[4] = 0;\n        current_buffer_ptr[5] = 0;\n        current_buffer_ptr[6] = 0;\n        memset(current_buffer_ptr + 0x17,0,8);\n        current_buffer_ptr[0xd] = 0;\n        current_buffer_ptr[0xe] = 0;\n        current_buffer_ptr[0x12] = 0;\n        current_buffer_ptr[0x13] = 0;\n        return current_buffer_ptr;\n      }\n      current_buffer_ptr = current_buffer_ptr + 0x1a;\n    }\n    if (*buffer_list_ptr == (int *)0x0) {\n      buffer_ptr = (int *)__sfmoreglue(error_code,4);\n      *buffer_list_ptr = buffer_ptr;\n      if (buffer_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    buffer_list_ptr = (int **)*buffer_list_ptr;\n  } while( true );\n}",
            "called": [
                "memset",
                "__sinit",
                "__sfmoreglue"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "find_unused_buffer_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "SetSampleTime",
                "Compute",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 255205,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_080035fc",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08006d8c",
            "FUN_08004f2c",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08004f3c",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_0800598a",
            "FUN_08004e34",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_080016b4",
            "FUN_08004e48",
            "FUN_08005890",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08005650",
            "FUN_08006fb6",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_080055e0",
            "FUN_08006f10",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08004d30",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_08006074",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_0800091c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08000130",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08004618",
            "FUN_080060a6",
            "FUN_08001c30",
            "FUN_08005c72",
            "FUN_0800048c",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_0800049c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_0800594e",
            "FUN_080056a8",
            "FUN_08006ac0",
            "FUN_08007220",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08004f0c",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08006ad0",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_080060bc",
            "FUN_08004b9e",
            "FUN_08006940",
            "FUN_080058ea",
            "FUN_08002582",
            "FUN_08005976",
            "FUN_08004884",
            "FUN_08005fa0",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_08004f1c",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_080056c0",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08000450",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_0800492c",
            "FUN_08000cbc",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08007098",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08005bd4",
            "FUN_08001e48",
            "FUN_080059c8",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08006104",
            "FUN_08002540",
            "FUN_08005be2",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08005932",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_08005c64",
            "FUN_0800548c",
            "FUN_08000924",
            "FUN_08006c34",
            "FUN_080072a4",
            "FUN_08004848",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_080047d8",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08006fc0",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_0800715c",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08006088",
            "FUN_08006eb0",
            "FUN_08004e5c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_0800607e",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006092",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08006f34",
            "FUN_08006fe4",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005690",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_0800609c",
            "FUN_080040b0",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_08001c88",
            "FUN_08006174",
            "FUN_08006f00",
            "FUN_080018f8",
            "FUN_08005da0",
            "FUN_08005f2c",
            "FUN_08005f40",
            "FUN_08005b54",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001b18",
            "FUN_08005d8a",
            "FUN_08001ab0",
            "FUN_08005730",
            "FUN_080060d4",
            "FUN_08005cd4",
            "FUN_08007090",
            "FUN_08005d82",
            "FUN_08001510",
            "FUN_08005d42"
        ]
    ],
    "locked_functions": []
}