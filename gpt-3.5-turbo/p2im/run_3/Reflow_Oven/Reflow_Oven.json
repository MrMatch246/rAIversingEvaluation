{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputParameter)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputParameter;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_char = current_position + 1;\n    current_char = *current_position;\n    current_position = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_result_08000190",
            "code": "\nulonglong calculate_result_08000190(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_1;\n  byte carry;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int shift_2;\n  uint result_1;\n  uint result_2;\n  uint diff;\n  uint temp_6;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  \n  temp_4 = input_4 ^ 0x80000000;\n  result_1 = input_2 << 1;\n  input_4 = input_4 << 1;\n  flag_1 = ((input_2 ^ temp_4) & 0x7fffffff) == 0;\n  flag_2 = flag_1 && input_1 == input_3;\n  if (!flag_1 || input_1 != input_3) {\n    flag_2 = (result_1 | input_1) == 0;\n  }\n  if (!flag_2) {\n    flag_2 = (input_4 | input_3) == 0;\n  }\n  shift_2 = (int)result_1 >> 0x15;\n  if (!flag_2) {\n    flag_2 = shift_2 == -1;\n  }\n  shift_1 = (int)input_4 >> 0x15;\n  if (!flag_2) {\n    flag_2 = shift_1 == -1;\n  }\n  if (flag_2) {\n    if (shift_2 == -1 || shift_1 == -1) {\n      result_1 = temp_4;\n      diff = input_3;\n      if (shift_2 == -1) {\n        result_1 = input_2;\n        diff = input_1;\n      }\n      if (shift_2 != -1 || shift_1 != -1) {\n        input_3 = diff;\n        temp_4 = result_1;\n      }\n      flag_2 = (diff | result_1 << 0xc) == 0;\n      if (flag_2) {\n        flag_2 = (input_3 | temp_4 << 0xc) == 0;\n      }\n      if (flag_2) {\n        flag_2 = result_1 == temp_4;\n      }\n      if (!flag_2) {\n        result_1 = result_1 | 0x80000;\n      }\n      return CONCAT44(result_1,diff);\n    }\n    if (((input_2 ^ temp_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((result_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_4) {\n      return 0;\n    }\n    if (result_1 >> 0x15 == 0) {\n      flag_2 = (input_1 & 0x80000000) != 0;\n      temp_4 = input_2 * 2 + (uint)flag_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)flag_2)) {\n        temp_4 = temp_4 | 0x80000000;\n      }\n      return CONCAT44(temp_4,input_1 << 1);\n    }\n    if (result_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  result_1 = result_1 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  diff = input_4 - result_1;\n  flag_2 = diff != 0;\n  if (input_4 < result_1) {\n    diff = -diff;\n  }\n  result_2 = input_1;\n  temp_5 = input_2;\n  if (flag_2 && result_1 <= input_4) {\n    result_1 = result_1 + diff;\n    result_2 = input_3;\n    temp_5 = temp_4;\n    input_3 = input_1;\n    temp_4 = input_2;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(temp_5,result_2);\n  }\n  temp_2 = temp_5 & 0xfffff | 0x100000;\n  if ((temp_5 & 0x80000000) != 0) {\n    flag_2 = result_2 != 0;\n    result_2 = -result_2;\n    temp_2 = -temp_2 - (uint)flag_2;\n  }\n  temp_5 = temp_4 & 0xfffff | 0x100000;\n  if ((temp_4 & 0x80000000) != 0) {\n    flag_2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_5 = -temp_5 - (uint)flag_2;\n  }\n  if (result_1 == diff) {\n    temp_5 = temp_5 ^ 0x100000;\n    if (result_1 == 0) {\n      temp_2 = temp_2 ^ 0x100000;\n      result_1 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp_4 = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    temp_6 = input_3 << (temp_4 & 0xff);\n    input_3 = input_3 >> (diff & 0xff);\n    temp_1 = result_2 + input_3;\n    temp_3 = temp_5 << (temp_4 & 0xff);\n    temp_4 = temp_1 + temp_3;\n    temp_2 = temp_2 + CARRY4(result_2,input_3) + ((int)temp_5 >> (diff & 0xff)) +\n            (uint)CARRY4(temp_1,temp_3);\n  }\n  else {\n    temp_6 = temp_5 << (-diff + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_6 = temp_6 | 2;\n    }\n    temp_5 = (int)temp_5 >> (diff - 0x20 & 0xff);\n    temp_4 = result_2 + temp_5;\n    temp_2 = temp_2 + ((int)temp_5 >> 0x1f) + (uint)CARRY4(result_2,temp_5);\n  }\n  input_2 = temp_2 & 0x80000000;\n  diff = temp_2;\n  if ((int)temp_2 < 0) {\n    flag_2 = temp_6 == 0;\n    temp_6 = -temp_6;\n    diff = -temp_4;\n    temp_4 = -(uint)!flag_2 - temp_4;\n    diff = -(uint)(flag_2 <= diff) - temp_2;\n  }\n  if (0xfffff < diff) {\n    result_2 = result_1 - 1;\n    if (0x1fffff < diff) {\n      result_2 = diff & 1;\n      diff = diff >> 1;\n      carry = (byte)temp_4;\n      temp_4 = (uint)(result_2 != 0) << 0x1f | temp_4 >> 1;\n      temp_6 = (uint)(carry & 1) << 0x1f | temp_6 >> 1;\n      result_2 = result_1;\n      if (0xffbfffff < result_1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    flag_2 = 0x7fffffff < temp_6;\n    if (temp_6 == 0x80000000) {\n      flag_2 = (temp_4 & 1) != 0;\n    }\n    return CONCAT44(diff + result_2 * 0x100000 + (uint)CARRY4(temp_4,(uint)flag_2) | input_2,\n                    temp_4 + flag_2);\n  }\n  flag_1 = (temp_6 & 0x80000000) != 0;\n  temp_6 = temp_6 << 1;\n  result_2 = temp_4 * 2;\n  flag_2 = CARRY4(temp_4,temp_4);\n  temp_4 = temp_4 * 2 + (uint)flag_1;\n  diff = diff * 2 + (uint)(flag_2 || CARRY4(result_2,(uint)flag_1));\n  result_2 = result_1 - 2;\n  if ((diff & 0x100000) != 0) goto LAB_080002a0;\n  temp_5 = temp_4;\n  result_1 = diff;\n  if (diff == 0) {\n    temp_5 = 0;\n    result_1 = temp_4;\n  }\n  shift_2 = LZCOUNT(result_1);\n  if (diff == 0) {\n    shift_2 = shift_2 + 0x20;\n  }\n  diff = shift_2 - 0xb;\n  flag_3 = SBORROW4(diff,0x20);\n  temp_4 = shift_2 - 0x2b;\n  flag_2 = (int)temp_4 < 0;\n  flag_1 = temp_4 == 0;\n  if ((int)diff < 0x20) {\n    flag_3 = SCARRY4(temp_4,0xc);\n    shift_2 = shift_2 + -0x1f;\n    flag_2 = shift_2 < 0;\n    flag_1 = shift_2 == 0;\n    temp_4 = diff;\n    if (!flag_1 && flag_2 == flag_3) {\n      temp_5 = result_1 << (diff & 0xff);\n      result_1 = result_1 >> (0xcU - shift_2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_6 = 0x20 - temp_4;\n  }\n  result_1 = result_1 << (temp_4 & 0xff);\n  if (flag_1 || flag_2 != flag_3) {\n    result_1 = result_1 | temp_5 >> (temp_6 & 0xff);\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_5 = temp_5 << (temp_4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)diff <= (int)result_2) {\n    return CONCAT44(result_1 + (result_2 - diff) * 0x100000 | input_2,temp_5);\n  }\n  temp_4 = ~(result_2 - diff);\n  if ((int)temp_4 < 0x1f) {\n    shift_2 = temp_4 - 0x13;\n    if (shift_2 != 0 && shift_2 < 0 == SCARRY4(temp_4 - 0x1f,0xc)) {\n      return CONCAT44(temp_2,temp_5 >> (0x20 - (0xcU - shift_2) & 0xff) | result_1 << (0xcU - shift_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_4 = temp_4 + 1;\n    return CONCAT44(input_2 | result_1 >> (temp_4 & 0xff),\n                    temp_5 >> (temp_4 & 0xff) | result_1 << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_2,result_1 >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_result_08000190",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_1",
                "bVar2": "carry",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "uVar7": "temp_5",
                "iVar8": "shift_2",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "diff",
                "uVar12": "temp_6",
                "bVar13": "flag_1",
                "bVar14": "flag_2",
                "bVar15": "flag_3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_sum_08000194",
            "code": "\nulonglong calculate_sum_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input2 << 1;\n  temp6 = input4 << 1;\n  flag1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp4 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (temp6 | input3) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)temp6 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp6 = input4;\n      temp4 = input3;\n      if (shift2 == -1) {\n        temp6 = input2;\n        temp4 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = temp4;\n        input4 = temp6;\n      }\n      flag2 = (temp4 | temp6 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp6 == input4;\n      }\n      if (!flag2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp4);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp4 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  temp6 = temp6 >> 0x15;\n  temp7 = temp6 - temp4;\n  flag2 = temp7 != 0;\n  if (temp6 < temp4) {\n    temp7 = -temp7;\n  }\n  temp5 = input1;\n  temp3 = input2;\n  if (flag2 && temp4 <= temp6) {\n    temp4 = temp4 + temp7;\n    temp5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,temp5);\n  }\n  temp6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    flag2 = temp5 != 0;\n    temp5 = -temp5;\n    temp6 = -temp6 - (uint)flag2;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)flag2;\n  }\n  if (temp4 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      temp6 = temp6 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = input3 << (temp9 & 0xff);\n    input3 = input3 >> (temp7 & 0xff);\n    temp1 = temp5 + input3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    temp6 = temp6 + CARRY4(temp5,input3) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    temp6 = temp6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  input2 = temp6 & 0x80000000;\n  temp7 = temp6;\n  if ((int)temp6 < 0) {\n    flag2 = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!flag2 - temp9;\n    temp7 = -(uint)(flag2 <= temp7) - temp6;\n  }\n  if (0xfffff < temp7) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry1 = (byte)temp9;\n      temp9 = (uint)(temp6 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry1 & 1) << 0x1f | temp8 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    flag2 = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      flag2 = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)flag2) | input2,\n                    temp9 + flag2);\n  }\n  flag1 = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  flag2 = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)flag1;\n  temp7 = temp7 * 2 + (uint)(flag2 || CARRY4(temp5,(uint)flag1));\n  temp5 = temp4 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = temp9;\n  temp4 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    temp4 = temp9;\n  }\n  shift2 = LZCOUNT(temp4);\n  if (temp7 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  flag3 = SBORROW4(temp9,0x20);\n  temp7 = shift2 - 0x2b;\n  flag2 = (int)temp7 < 0;\n  flag1 = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    flag3 = SCARRY4(temp7,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp7 = temp9;\n    if (!flag1 && flag2 == flag3) {\n      temp3 = temp4 << (temp9 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp8 = 0x20 - temp7;\n  }\n  temp4 = temp4 << (temp7 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp4 = temp4 | temp3 >> (temp8 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp9) * 0x100000 | input2,temp3);\n  }\n  temp7 = ~(temp5 - temp9);\n  if ((int)temp7 < 0x1f) {\n    shift2 = temp7 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(temp6,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(input2 | temp4 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | temp4 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(temp6,temp4 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_sum_08000194",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "bitwise_shift_and_concatenate_0800040c",
            "code": "\nulonglong bitwiseShiftAndConcatenate_0800040c(uint input_value)\n\n{\n  uint concatenated_value;\n  uint shift_value;\n  int bit_count;\n  uint shift_constant;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_lt_32;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  concatenated_value = 0;\n  bit_count = LZCOUNT(input_value);\n  shift_constant = bit_count + 0x15;\n  is_lt_32 = SBORROW4(shift_constant,0x20);\n  shift_value = bit_count - 0xb;\n  is_negative = (int)shift_value < 0;\n  is_zero = shift_value == 0;\n  if (shift_constant < 0x20) {\n    is_lt_32 = SCARRY4(shift_value,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    shift_value = shift_constant;\n    if (!is_zero && is_lt_32 == false) {\n      concatenated_value = input_value << shift_constant;\n      input_value = input_value >> (0xcU - (bit_count + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || is_negative != is_lt_32) {\n    remaining_bits = 0x20 - shift_value;\n  }\n  input_value = input_value << (shift_value & 0xff);\n  if (is_zero || is_negative != is_lt_32) {\n    input_value = input_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_lt_32) {\n    concatenated_value = 0 << (shift_value & 0xff);\n  }\nLAB_08000318:\n  if (shift_constant < 0x433) {\n    return CONCAT44(input_value + (0x432 - shift_constant) * 0x100000,concatenated_value);\n  }\n  shift_value = ~(0x432 - shift_constant);\n  if (0x1e < (int)shift_value) {\n    return (ulonglong)(input_value >> (shift_value - 0x1f & 0xff));\n  }\n  bit_count = shift_value - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(shift_value - 0x1f,0xc)) {\n    shift_value = shift_value + 1;\n    return CONCAT44(input_value >> (shift_value & 0xff),\n                    concatenated_value >> (shift_value & 0xff) | input_value << (0x20 - shift_value & 0xff));\n  }\n  return (ulonglong)(concatenated_value >> (0x20 - (0xcU - bit_count) & 0xff) | input_value << (0xcU - bit_count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "bitwise_shift_and_concatenate_0800040c",
                "param_1": "input_value",
                "uVar1": "concatenated_value",
                "uVar2": "shift_value",
                "iVar3": "bit_count",
                "uVar4": "shift_constant",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_lt_32"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "bitwise_shift_and_concatenate_0800042c",
            "code": "\nulonglong bitwise_shift_and_concatenate_0800042c(uint input_value)\n\n{\n  uint result;\n  uint abs_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero_shift;\n  bool is_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_value = -input_value;\n  }\n  result = 0;\n  leading_zeros = LZCOUNT(abs_value);\n  total_bits = leading_zeros + 0x15;\n  is_overflow = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero_shift = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero_shift = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero_shift && is_overflow == false) {\n      result = abs_value << total_bits;\n      abs_value = abs_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero_shift || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_value = abs_value << (shift_amount & 0xff);\n  if (is_zero_shift || is_negative != is_overflow) {\n    abs_value = abs_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero_shift || is_negative != is_overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nLAB_08000318:\n  if (total_bits < 0x433) {\n    return CONCAT44(abs_value + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_value >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "bitwise_shift_and_concatenate_0800042c",
                "param_1": "input_value",
                "uVar1": "result",
                "uVar2": "abs_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "total_bits",
                "uVar6": "sign_bit",
                "bVar7": "is_negative",
                "bVar8": "is_zero_shift",
                "bVar9": "is_overflow",
                "in_r12": "remaining_bits"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_floating_point_080004f8",
            "code": "\nulonglong calculateFloatingPoint_080004f8(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  ulonglong product;\n  longlong temp;\n  uint exponent;\n  uint tempExponent;\n  int tempValue;\n  uint tempValue2;\n  uint tempExponent2;\n  uint result;\n  uint carry;\n  bool isZero;\n  bool isNegative;\n  bool resultNegative;\n  ulonglong combinedValue;\n  \n  combinedValue = CONCAT44(value2,value1);\n  result = 0x7ff;\n  tempExponent = value2 >> 0x14 & 0x7ff;\n  isZero = tempExponent == 0;\n  if (!isZero) {\n    tempExponent2 = value4 >> 0x14 & 0x7ff;\n    isZero = tempExponent2 == 0;\n  }\n  if (!isZero) {\n    isZero = tempExponent == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = tempExponent2 == 0x7ff;\n  }\n  if (isZero) {\n    combinedValue = check_bits_080006d4();\n  }\n  exponent = (uint)(combinedValue >> 0x20);\n  tempValue = tempExponent + tempExponent2;\n  tempExponent = exponent ^ value4;\n  exponent = exponent & ~(result << 0x15);\n  value4 = value4 & ~(result << 0x15);\n  isZero = ((uint)combinedValue | exponent << 0xc) == 0;\n  if (!isZero) {\n    isZero = (value3 | value4 << 0xc) == 0;\n  }\n  exponent = exponent | 0x100000;\n  value4 = value4 | 0x100000;\n  if (isZero) {\n    value3 = (uint)combinedValue | value3;\n    value4 = (tempExponent & 0x80000000 | exponent) ^ value4;\n    tempExponent = result >> 1;\n    resultNegative = SBORROW4(tempValue,tempExponent);\n    tempValue2 = tempValue - tempExponent;\n    isZero = tempValue2 == 0;\n    exponent = tempValue2;\n    if (!isZero && (int)tempExponent <= tempValue) {\n      resultNegative = SBORROW4(result,tempValue2);\n      exponent = result - tempValue2;\n      isZero = result == tempValue2;\n    }\n    if (!isZero && (int)exponent < 0 == resultNegative) {\n      value4 = value4 | tempValue2 * 0x100000;\n    }\n    if (!isZero && (int)exponent < 0 == resultNegative) {\n      return CONCAT44(value4,value3);\n    }\n    value4 = value4 | 0x100000;\n    result = 0;\n    resultNegative = SBORROW4(tempValue2,1);\n    tempValue2 = tempValue2 - 1;\n    isZero = tempValue2 == 0;\n    tempExponent = tempValue2;\n  }\n  else {\n    product = (combinedValue & 0xffffffff) * (ulonglong)value3;\n    combinedValue = (combinedValue & 0xffffffff) * (ulonglong)value4 +\n             (ulonglong)exponent * (ulonglong)value3 + (product >> 0x20);\n    carry = (uint)combinedValue;\n    temp = (ulonglong)exponent * (ulonglong)value4 + (combinedValue >> 0x20);\n    result = (uint)temp;\n    exponent = (uint)((ulonglong)temp >> 0x20);\n    if ((int)product != 0) {\n      carry = carry | 1;\n    }\n    tempValue2 = (tempValue + -0x3ff) - (uint)(exponent < 0x200);\n    if (exponent < 0x200) {\n      isZero = (carry & 0x80000000) != 0;\n      carry = carry << 1;\n      temp = CONCAT44(exponent * 2 + (uint)(CARRY4(result,result) || CARRY4(result * 2,(uint)isZero)),\n                       result * 2 + (uint)isZero);\n    }\n    value4 = tempExponent & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    value3 = (uint)temp << 0xb | carry >> 0x15;\n    result = carry * 0x800;\n    isNegative = 0xfc < tempValue2;\n    resultNegative = SBORROW4(tempValue2,0xfd);\n    exponent = tempValue2 - 0xfd;\n    isZero = exponent == 0;\n    tempExponent = exponent;\n    if (isNegative && !isZero) {\n      isNegative = 0x6ff < exponent;\n      resultNegative = SBORROW4(exponent,0x700);\n      tempExponent = tempValue2 - 0x7fd;\n      isZero = exponent == 0x700;\n    }\n    if (!isNegative || isZero) {\n      isZero = 0x7fffffff < result;\n      if (result == 0x80000000) {\n        isZero = (carry >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value4 + tempValue2 * 0x100000 + (uint)CARRY4(value3,(uint)isZero),value3 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)tempExponent < 0 == resultNegative) {\n    return (ulonglong)(value4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(tempValue2,0x36);\n  isZero = (int)(tempValue2 + 0x36) < 0;\n  resultNegative = tempValue2 == 0xffffffca;\n  if (resultNegative || isZero != isNegative) {\n    value3 = 0;\n  }\n  if (resultNegative || isZero != isNegative) {\n    value4 = value4 & 0x80000000;\n  }\n  if (resultNegative || isZero != isNegative) {\n    return CONCAT44(value4,value3);\n  }\n  tempExponent = -tempValue2;\n  exponent = tempExponent - 0x20;\n  if (0x1f < (int)tempExponent) {\n    tempValue2 = value3 >> (exponent & 0xff) | value4 << (0x20 - exponent & 0xff);\n    tempExponent = (value4 >> (exponent & 0xff) & ~((value4 & 0x80000000) >> (exponent & 0xff))) -\n            ((int)tempValue2 >> 0x1f);\n    if ((result | value3 << (0x20 - exponent & 0xff) | tempValue2 << 1) == 0) {\n      tempExponent = tempExponent & ~(tempValue2 >> 0x1f);\n    }\n    return CONCAT44(value4,tempExponent) & 0x80000000ffffffff;\n  }\n  tempValue = tempExponent - 0x14;\n  if (tempValue == 0 || tempValue < 0 != SCARRY4(exponent,0xc)) {\n    carry = value3 << (tempValue2 + 0x20 & 0xff);\n    exponent = value3 >> (tempExponent & 0xff) | value4 << (tempValue2 + 0x20 & 0xff);\n    tempValue2 = exponent + -((int)carry >> 0x1f);\n    if ((result | carry << 1) == 0) {\n      tempValue2 = tempValue2 & ~(carry >> 0x1f);\n    }\n    return CONCAT44((value4 & 0x80000000) +\n                    ((value4 & 0x7fffffff) >> (tempExponent & 0xff)) +\n                    (uint)CARRY4(exponent,-((int)carry >> 0x1f)),tempValue2);\n  }\n  tempExponent = 0xc - tempValue;\n  tempValue2 = value3 << (tempExponent & 0xff);\n  tempExponent = value3 >> (0x20 - tempExponent & 0xff) | value4 << (tempExponent & 0xff);\n  exponent = tempExponent + -((int)tempValue2 >> 0x1f);\n  if ((result | tempValue2 << 1) == 0) {\n    exponent = exponent & ~(tempValue2 >> 0x1f);\n  }\n  return CONCAT44((value4 & 0x80000000) + (uint)CARRY4(tempExponent,-((int)tempValue2 >> 0x1f)),exponent);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_floating_point_080004f8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "product",
                "lVar2": "temp",
                "uVar3": "exponent",
                "uVar4": "tempExponent",
                "iVar5": "tempValue",
                "uVar6": "tempValue2",
                "unaff_r5": "tempExponent2",
                "uVar7": "result",
                "uVar8": "carry",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "bVar11": "resultNegative",
                "uVar12": "combinedValue"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "check_bits_080006d4",
            "code": "\nulonglong check_bits_080006d4(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint tmp1;\n  uint tmp2;\n  uint mask;\n  bool isZero;\n  \n  tmp1 = mask & value4 >> 0x14;\n  if (bit2 != mask && tmp1 != mask) {\n    isZero = (value1 | value2 << 1) == 0;\n    if (!isZero) {\n      isZero = (value3 | value4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      tmp2 = value2 & 0x80000000;\n      do {\n        bit1 = value1 & 0x80000000;\n        value1 = value1 << 1;\n        value2 = value2 * 2 + (uint)(bit1 != 0);\n      } while ((value2 & 0x100000) == 0);\n      value2 = value2 | tmp2;\n      if (tmp1 != 0) {\n        return CONCAT44(value2,value1);\n      }\n    }\n    do {\n      tmp1 = value3 & 0x80000000;\n      value3 = value3 << 1;\n      value4 = value4 * 2 + (uint)(tmp1 != 0);\n    } while ((value4 & 0x100000) == 0);\n    return CONCAT44(value2,value1);\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    value2 = value4;\n    value1 = value3;\n  }\n  if (!isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  tmp2 = value2;\n  if (((!isZero) && ((bit2 != mask || ((value1 | value2 << 0xc) == 0)))) &&\n     ((tmp1 != mask || (value1 = value3, tmp2 = value4, (value3 | value4 << 0xc) == 0)))) {\n    return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(tmp2,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "check_bits_080006d4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "tmp1",
                "uVar3": "tmp2",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculateFloatingPoint_0800074c(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  int result8;\n  uint result9;\n  uint result10;\n  uint result11;\n  uint result12;\n  uint result13;\n  uint result14;\n  bool isZero1;\n  bool isZero2;\n  bool carryFlag;\n  undefined8 result17;\n  \n  result17 = CONCAT44(param2,param1);\n  result14 = 0x7ff;\n  result7 = param2 >> 0x14 & 0x7ff;\n  isZero1 = result7 == 0;\n  if (!isZero1) {\n    result10 = param4 >> 0x14 & 0x7ff;\n    isZero1 = result10 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = result7 == 0x7ff;\n  }\n  if (!isZero1) {\n    isZero1 = result10 == 0x7ff;\n  }\n  if (isZero1) {\n    result17 = process_numbers_080008ba();\n  }\n  result9 = (uint)((ulonglong)result17 >> 0x20);\n  result12 = (uint)result17;\n  result8 = result7 - result10;\n  if ((param3 | param4 << 0xc) == 0) {\n    result7 = (result9 ^ param4) & 0x80000000 | result9 & 0xfffff;\n    carryFlag = SCARRY4(result8,result14 >> 1);\n    result9 = result8 + (result14 >> 1);\n    isZero1 = (int)result9 < 0;\n    isZero2 = result9 == 0;\n    if (!isZero2 && isZero1 == carryFlag) {\n      carryFlag = SBORROW4(result14,result9);\n      isZero1 = (int)(result14 - result9) < 0;\n      isZero2 = result14 == result9;\n    }\n    if (!isZero2 && isZero1 == carryFlag) {\n      result7 = result7 | result9 * 0x100000;\n    }\n    if (!isZero2 && isZero1 == carryFlag) {\n      return CONCAT44(result7,result12);\n    }\n    result7 = result7 | 0x100000;\n    result14 = 0;\n    isZero2 = SBORROW4(result9,1);\n    result9 = result9 - 1;\n    isZero1 = result9 == 0;\n    result3 = result9;\n  }\n  else {\n    result3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    result14 = param3 << 8;\n    result11 = (result9 << 0xc) >> 4 | 0x10000000 | result12 >> 0x18;\n    result12 = result12 * 0x100;\n    result7 = (result9 ^ param4) & 0x80000000;\n    isZero1 = result3 <= result11;\n    if (result11 == result3) {\n      isZero1 = result14 <= result12;\n    }\n    result8 = result8 + (uint)isZero1;\n    result9 = result8 + 0x3fd;\n    if (isZero1 == false) {\n      result3 = result3 >> 1;\n      result14 = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | result14 >> 1;\n    }\n    result13 = result12 - result14;\n    result11 = (result11 - result3) - (uint)(result12 < result14);\n    result4 = result3 >> 1;\n    result1 = (uint)((result3 & 1) != 0) << 0x1f | result14 >> 1;\n    result12 = 0x100000;\n    result3 = 0x80000;\n    while( true ) {\n      isZero1 = result1 <= result13;\n      if (result4 < result11 || result11 - result4 < (uint)isZero1) {\n        result13 = result13 - result1;\n        result12 = result12 | result3;\n        result11 = (result11 - result4) - (uint)!isZero1;\n      }\n      result5 = result4 >> 1;\n      result1 = (uint)((result4 & 1) != 0) << 0x1f | result1 >> 1;\n      isZero2 = result1 <= result13;\n      isZero1 = result11 - result5 < (uint)isZero2;\n      result14 = result11;\n      if (result5 < result11 || isZero1) {\n        result13 = result13 - result1;\n        result14 = (result11 - result5) - (uint)!isZero2;\n      }\n      if (result5 < result11 || isZero1) {\n        result12 = result12 | result3 >> 1;\n      }\n      result11 = result4 >> 2;\n      result2 = (uint)((result5 & 1) != 0) << 0x1f | result1 >> 1;\n      isZero2 = result2 <= result13;\n      isZero1 = result14 - result11 < (uint)isZero2;\n      result5 = result14;\n      if (result11 < result14 || isZero1) {\n        result13 = result13 - result2;\n        result5 = (result14 - result11) - (uint)!isZero2;\n      }\n      if (result11 < result14 || isZero1) {\n        result12 = result12 | result3 >> 2;\n      }\n      result6 = result4 >> 3;\n      result1 = (uint)((result11 & 1) != 0) << 0x1f | result2 >> 1;\n      isZero2 = result1 <= result13;\n      isZero1 = result5 - result6 < (uint)isZero2;\n      result11 = result5;\n      if (result6 < result5 || isZero1) {\n        result13 = result13 - result1;\n        result11 = (result5 - result6) - (uint)!isZero2;\n      }\n      if (result6 < result5 || isZero1) {\n        result12 = result12 | result3 >> 3;\n      }\n      result14 = result11 | result13;\n      if (result14 == 0) break;\n      result11 = result11 << 4 | result13 >> 0x1c;\n      result13 = result13 << 4;\n      result4 = result4 & 0xfffffff8 | result1 >> 0x1d;\n      result1 = (result2 >> 1) << 3;\n      result3 = result3 >> 4;\n      if (result3 == 0) {\n        result6 = result4;\n        if ((result7 & 0x100000) != 0) goto LAB_0800086a;\n        result7 = result7 | result12;\n        result12 = 0;\n        result3 = 0x80000000;\n      }\n    }\n    if ((result7 & 0x100000) == 0) {\n      result7 = result7 | result12;\n      result12 = 0;\n    }\nLAB_0800086a:\n    carryFlag = 0xfc < result9;\n    isZero2 = SBORROW4(result9,0xfd);\n    result4 = result8 + 0x300;\n    isZero1 = result4 == 0;\n    result3 = result4;\n    if (carryFlag && !isZero1) {\n      carryFlag = 0x6ff < result4;\n      isZero2 = SBORROW4(result4,0x700);\n      result3 = result8 - 0x400;\n      isZero1 = result4 == 0x700;\n    }\n    if (!carryFlag || isZero1) {\n      isZero1 = result6 <= result11;\n      if (result11 == result6) {\n        isZero1 = result1 <= result13;\n      }\n      if (result11 == result6 && result13 == result1) {\n        isZero1 = (result12 & 1) != 0;\n      }\n      return CONCAT44(result7 + result9 * 0x100000 + (uint)CARRY4(result12,(uint)isZero1),result12 + isZero1);\n    }\n  }\n  if (!isZero1 && (int)result3 < 0 == isZero2) {\n    return (ulonglong)(result7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carryFlag = SCARRY4(result9,0x36);\n  isZero1 = (int)(result9 + 0x36) < 0;\n  isZero2 = result9 == 0xffffffca;\n  if (isZero2 || isZero1 != carryFlag) {\n    result12 = 0;\n  }\n  if (isZero2 || isZero1 != carryFlag) {\n    result7 = result7 & 0x80000000;\n  }\n  if (isZero2 || isZero1 != carryFlag) {\n    return CONCAT44(result7,result12);\n  }\n  result3 = -result9;\n  result11 = result3 - 0x20;\n  if (0x1f < (int)result3) {\n    result3 = result12 >> (result11 & 0xff) | result7 << (0x20 - result11 & 0xff);\n    result9 = (result7 >> (result11 & 0xff) & ~((result7 & 0x80000000) >> (result11 & 0xff))) -\n            ((int)result3 >> 0x1f);\n    if ((result14 | result12 << (0x20 - result11 & 0xff) | result3 << 1) == 0) {\n      result9 = result9 & ~(result3 >> 0x1f);\n    }\n    return CONCAT44(result7,result9) & 0x80000000ffffffff;\n  }\n  result8 = result3 - 0x14;\n  if (result8 != 0 && result8 < 0 == SCARRY4(result11,0xc)) {\n    result9 = 0xc - result8;\n    result3 = result12 << (result9 & 0xff);\n    result12 = result12 >> (0x20 - result9 & 0xff) | result7 << (result9 & 0xff);\n    result9 = result12 + -((int)result3 >> 0x1f);\n    if ((result14 | result3 << 1) == 0) {\n      result9 = result9 & ~(result3 >> 0x1f);\n    }\n    return CONCAT44((result7 & 0x80000000) + (uint)CARRY4(result12,-((int)result3 >> 0x1f)),result9);\n  }\n  result11 = result12 << (result9 + 0x20 & 0xff);\n  result12 = result12 >> (result3 & 0xff) | result7 << (result9 + 0x20 & 0xff);\n  result9 = result12 + -((int)result11 >> 0x1f);\n  if ((result14 | result11 << 1) == 0) {\n    result9 = result9 & ~(result11 >> 0x1f);\n  }\n  return CONCAT44((result7 & 0x80000000) +\n                  ((result7 & 0x7fffffff) >> (result3 & 0xff)) +\n                  (uint)CARRY4(result12,-((int)result11 >> 0x1f)),result9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "iVar8": "result8",
                "uVar9": "result9",
                "unaff_r5": "result10",
                "uVar10": "result11",
                "uVar11": "result12",
                "uVar12": "result13",
                "uVar13": "result14",
                "bVar14": "isZero1",
                "bVar15": "isZero2",
                "bVar16": "carryFlag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "process_numbers_080008ba",
            "code": "\nulonglong processNumbers_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool isZero;\n  \n  temp2 = temp4 & input4 >> 0x14;\n  temp3 = input2;\n  if (temp1 != temp4 || temp2 != temp4) {\n    if (temp1 == temp4) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp3 = input4, temp2 != temp4)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp2 == temp4) {\n      input1 = input3;\n      temp3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp1 == 0) {\n          temp3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp3;\n          if (temp2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "process_numbers_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "in_r12": "temp4",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_conditions_0800092c",
            "code": "\nuint check_conditions_0800092c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint xor_result;\n  bool is_all_zeros;\n  bool is_valid;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_all_zeros = (input_1 | input_2 << 1) == 0;\n  if (is_all_zeros) {\n    is_all_zeros = (input_3 | input_4 << 1) == 0;\n  }\n  if (!is_all_zeros) {\n    is_all_zeros = input_2 == input_4;\n  }\n  if (is_all_zeros) {\n    is_all_zeros = input_1 == input_3;\n  }\n  if (!is_all_zeros) {\n    xor_result = input_2 ^ input_4;\n    is_all_zeros = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_all_zeros = input_2 == input_4;\n    }\n    is_valid = -1 < (int)xor_result && input_4 <= input_2;\n    if (is_all_zeros) {\n      is_valid = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!is_valid) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_conditions_0800092c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "xor_result",
                "bVar2": "is_all_zeros",
                "bVar3": "is_valid"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "check_and_return_080009a8",
            "code": "\nvoid check_and_return_080009a8(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  check_and_return_080009a8_080009b8(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "check_and_return_080009a8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "check_and_return_080009b8",
            "code": "\nundefined4 check_and_return_080009b8(undefined4 input_value)\n\n{\n  check_conditions_0800092c();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "check_and_return_080009b8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_and_return_true_080009c8",
            "code": "\nbool check_and_return_true_080009c8(void)\n\n{\n  char flag;\n  \n  check_and_return_080009b8();\n  return flag != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_and_return_true_080009c8",
                "in_ZR": "flag"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "check_if_null_terminate_080009dc",
            "code": "\nbool check_if_null_terminate_080009dc(void)\n\n{\n  char input_character;\n  \n  check_and_return_080009b8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "check_if_null_terminate_080009dc",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_and_return_080009f0",
            "code": "\nbool check_and_return_080009f0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  check_and_return_080009f0_080009b8();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_and_return_080009f0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_flags_and_return_08000a04",
            "code": "\nbool check_flags_and_return_08000a04(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  check_flags();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_flags_and_return_08000a04",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry",
                "check_and_return_080009a8": "check_flags"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "check_if_string_is_empty_08000a18",
            "code": "\nbool check_if_string_is_empty_08000a18(void)\n\n{\n  char input_character;\n  \n  check_and_return_080009a8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "check_if_string_is_empty_08000a18",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_parameters_08000a2c",
            "code": "\nundefined4 check_parameters_08000a2c(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "calculate_result_08000a58",
            "code": "\nuint calculateResult_08000a58(uint input1,uint input2)\n\n{\n  uint finalResult;\n  int modifiedInput2;\n  uint difference;\n  \n  modifiedInput2 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < modifiedInput2) {\n      return 0;\n    }\n    finalResult = modifiedInput2 >> 0x15;\n    difference = -finalResult - 0x3e1;\n    if (finalResult < 0xfffffc20 && difference != 0) {\n      finalResult = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (difference & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        finalResult = -finalResult;\n      }\n      return finalResult;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "calculate_result_08000a58",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "finalResult",
                "iVar2": "modifiedInput2",
                "uVar3": "difference"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "check_and_shift_08000aa8",
            "code": "\nuint check_and_shift_08000aa8(uint input_value,uint shift_value)\n\n{\n  int shifted_value;\n  uint result;\n  \n  if ((shift_value & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_value * 2 + 0x200000;\n  if (shift_value * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    result = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)result) {\n      return (shift_value << 0xb | 0x80000000 | input_value >> 0x15) >> (result & 0xff);\n    }\n  }\n  else if ((input_value | shift_value << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "check_and_shift_08000aa8",
                "param_1": "input_value",
                "param_2": "shift_value",
                "iVar1": "shifted_value",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_software_interrupt_08000ae8",
            "code": "\nvoid executeSoftwareInterrupt_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_software_interrupt_08000ae8"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_interrupt_check_08000aec",
            "code": "\nundefined4 execute_interrupt_check_08000aec(undefined4 input_param,undefined4 unused_param,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_08000ae8(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_interrupt_check_08000aec",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_and_process_data_08000b08",
            "code": "\nvoid initialize_and_process_data_08000b08(int result_is_one,int param_is_0xffff)\n\n{\n  if ((result_is_one == 1) && (param_is_0xffff == 0xffff)) {\n    initialize_and_update_params(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initialize_and_process_data_08000b08(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    initialize_memory(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_and_process_data_08000b08",
                "param_1": "result_is_one",
                "param_2": "param_is_0xffff",
                "initialize_and_update_params_08001b18": "initialize_and_update_params",
                "initialize_and_process_data_08001510": "initialize_and_process_data",
                "initialize_memory_0800157c": "initialize_memory"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_and_configure_oven_08000bcc",
            "code": "\nvoid initialize_and_configure_oven_08000bcc(void)\n\n{\n  process_data(DAT_20000064,0);\n  configure_memory(DAT_20000064,1);\n  process_data(DAT_20000004,0);\n  configure_memory(DAT_20000004,1);\n  process_data(DAT_20000060,0);\n  configure_memory(DAT_20000060,1);\n  process_data(DAT_20000004,1);\n  configure_memory_and_process_data(&DAT_20000194,8,2,0);\n  process_data_and_multiply(&DAT_20000194,0,&DAT_20000008);\n  process_and_multiply_data(&DAT_20000194);\n  process_string(&DAT_20000194,\"Reflow\");\n  process_data(&DAT_20000194,0,1);\n  process_string(&DAT_20000194,\"Oven 1.2\");\n  process_data(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  process_and_multiply_data(&DAT_20000194);\n  initialize_serial_port(&DAT_2000036c,0xe100,6);\n  process_data(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initialize_data();\n  DAT_200001b4 = initialize_data();\n  execute_interrupt_check(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_and_configure_oven_08000bcc",
                "process_data_08005848": "process_data",
                "process_memory_configuration_080057b4": "configure_memory",
                "configure_memory_and_process_data_080013a4": "configure_memory_and_process_data",
                "process_data_and_multiply_08001550": "process_data_and_multiply",
                "process_and_multiply_data_0800135a": "process_and_multiply_data",
                "process_string_08005c96": "process_string",
                "process_data_08001366": "process_data",
                "initialize_serial_port_08005a68": "initialize_serial_port",
                "initialize_data_080058e0": "initialize_data",
                "execute_interrupt_check_08000aec": "execute_interrupt_check"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid processData_08000cd0(void)\n\n{\n  uint dataCount;\n  undefined4 floatPart1;\n  int result;\n  undefined4 floatPart2;\n  undefined4 extraResult1;\n  undefined4 extraResult2;\n  undefined4 extraResult3;\n  undefined8 concatenatedValue;\n  \n  dataCount = initialize_data_080058e0();\n  if (DAT_200001b4 < dataCount) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    concatenatedValue = convert_parameter_to_float_080015f8(&DAT_2000024c,0);\n    floatPart2 = (undefined4)((ulonglong)concatenatedValue >> 0x20);\n    floatPart1 = (undefined4)concatenatedValue;\n    DAT_20000188 = floatPart1;\n    DAT_2000018c = floatPart2;\n    result = check_and_return_true_080009c8(floatPart1,floatPart2,0,0x40c38800);\n    if (((result != 0) || (result = check_and_return_true_080009c8(floatPart1,floatPart2,0,0x40c38880), result != 0)) ||\n       (result = check_and_return_true_080009c8(floatPart1,floatPart2,0,0x40c38900), result != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  dataCount = initialize_data_080058e0();\n  floatPart1 = DAT_20000060;\n  if (DAT_200001b0 < dataCount) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      result = check_parameter_value_08005890(DAT_20000060);\n      process_data_08005848(floatPart1,result == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      execute_converted_function_08005d82(&DAT_2000036c,DAT_20000250,10);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_data_08005f2c(&DAT_2000036c,extraResult1,DAT_20000240,DAT_20000244,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_data_08005f2c(&DAT_2000036c,extraResult2,DAT_20000188,DAT_2000018c,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_sum_08005f40(&DAT_2000036c,extraResult3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      process_data_08005848(DAT_20000060,1);\n    }\n    process_and_multiply_data_0800135a(&DAT_20000194);\n    process_string_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    process_data_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_string_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      process_data_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      process_and_multiply_data_0800134e(&DAT_20000194,0);\n      process_string_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  floatPart2 = DAT_2000018c;\n  floatPart1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    result = check_flags_and_return_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (result == 0) {\n      if (DAT_20000248 == '\\x01') {\n        add_processed_string_to_result_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_data_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        concatenatedValue = bitwise_shift_and_concatenate_0800042c(DAT_20000258);\n        process_params_08001960(&DAT_200001c0,(int)((ulonglong)concatenatedValue >> 0x20),0,0,concatenatedValue);\n        update_data_values_08001918(&DAT_200001c0,1000);\n        update_param_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    result = check_flags_and_return_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (result != 0) {\n      concatenatedValue = initialize_data_080058e0();\n      DAT_20000254 = (int)concatenatedValue + 9000;\n      initialize_080018f8(&DAT_200001c0,(int)((ulonglong)concatenatedValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    dataCount = initialize_data_080058e0();\n    if (DAT_20000254 < dataCount) {\n      result = initialize_data_080058e0();\n      DAT_20000254 = result + 9000;\n      concatenatedValue = calculate_sum_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)concatenatedValue >> 0x20);\n      DAT_20000240 = (undefined4)concatenatedValue;\n      concatenatedValue = check_if_string_is_empty_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)concatenatedValue != 0) {\n        initialize_080018f8(&DAT_200001c0,(int)((ulonglong)concatenatedValue >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    concatenatedValue = check_flags_and_return_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)concatenatedValue != 0) {\n      initialize_080018f8(&DAT_200001c0,(int)((ulonglong)concatenatedValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    result = check_and_return_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (result != 0) {\n      result = initialize_data_080058e0();\n      DAT_20000180 = result + 1000;\n      process_data_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    dataCount = initialize_data_080058e0();\n    if (DAT_20000180 < dataCount) {\n      process_data_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    result = check_if_null_terminate_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (result != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    result = check_and_return_true_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((result == 0) && (result = check_and_return_true_080009c8(floatPart1,floatPart2,0,0x40c38880), result == 0)) &&\n       (result = check_and_return_true_080009c8(floatPart1,floatPart2,0,0x40c38900), result == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    result = process_value_08005754(DAT_20000068);\n    if (result == 0) {\n      result = initialize_data_080058e0();\n      if (0x32 < (uint)(result - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    result = process_value_08005754(DAT_20000068);\n    if (result == 0) {\n      DAT_20000190 = initialize_data_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (result = process_value_08005754(DAT_20000068), result != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    result = initialize_data_080058e0();\n    process_data_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(result - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    concatenatedValue = bitwise_shift_and_concatenate_0800040c(result - DAT_2000025c);\n    result = check_if_null_terminate_080009dc((int)concatenatedValue,(int)((ulonglong)concatenatedValue >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (result == 0) {\n      process_data_08005848(DAT_20000064,0);\n    }\n    else {\n      process_data_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    process_data_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "dataCount",
                "uVar2": "floatPart1",
                "iVar3": "result",
                "uVar4": "floatPart2",
                "extraout_r1": "extraResult1",
                "extraout_r1_00": "extraResult2",
                "extraout_r1_01": "extraResult3",
                "uVar5": "concatenatedValue"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_params_08001294",
            "code": "\nvoid setParams_08001294(int objectAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(objectAddress + 0x18) = value1;\n  *(undefined *)(objectAddress + 0x19) = value2;\n  *(undefined *)(objectAddress + 0x1a) = value3;\n  *(undefined *)(objectAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_params_08001294",
                "param_1": "objectAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "process_data_multiple_times_080012a2",
            "code": "\nvoid process_data_multiple_times_080012a2(int address)\n\n{\n  process_data(*(undefined *)(address + 10),0);\n  process_data(*(undefined *)(address + 10),1);\n  process_data(*(undefined *)(address + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "process_data_multiple_times_080012a2",
                "param_1": "address",
                "process_data_08005848": "process_data"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "process_and_multiply_data_080012c0",
            "code": "\nvoid process_and_multiply_data_080012c0(int input_ptr,int shift_value)\n\n{\n  uint iterator;\n  \n  for (iterator = 0; (int)iterator < 4; iterator = iterator + 1) {\n    process_single_data(*(undefined *)(input_ptr + iterator + 0xb),shift_value >> (iterator & 0xff) & 1);\n  }\n  process_data_multiple_times(input_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "process_and_multiply_data_080012c0",
                "param_1": "input_ptr",
                "param_2": "shift_value",
                "uVar1": "iterator",
                "process_data_08005848": "process_single_data",
                "process_data_multiple_times_080012a2": "process_data_multiple_times"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "process_data_loop_080012e8",
            "code": "\nvoid process_data_loop_080012e8(int array_ptr,int bit_mask)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < 8; iteration_count = iteration_count + 1) {\n    process_data_08005848(*(undefined *)(array_ptr + iteration_count + 0xb),bit_mask >> (iteration_count & 0xff) & 1);\n  }\n  process_data_multiple_times_080012a2(array_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "process_data_loop_080012e8",
                "param_1": "array_ptr",
                "param_2": "bit_mask",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "process_and_multiply_data_08001310",
            "code": "\nvoid processAndMultiplyData_08001310(int dataAddress,uint dataLength,undefined4 paramA,undefined4 paramB)\n\n{\n  process_data_08005848(*(undefined *)(dataAddress + 8),paramA,paramA,paramB,paramB);\n  if (*(char *)(dataAddress + 9) != -1) {\n    process_data_08005848(*(char *)(dataAddress + 9),0);\n  }\n  if ((*(byte *)(dataAddress + 0x13) & 0x10) == 0) {\n    process_and_multiply_data_080012c0(dataAddress,dataLength >> 4);\n    process_and_multiply_data_080012c0(dataAddress,dataLength);\n    return;\n  }\n  process_data_loop_080012e8(dataAddress,dataLength);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "process_and_multiply_data_08001310",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "param_3": "paramA",
                "param_4": "paramB"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "process_and_multiply_data_0800134e",
            "code": "\nundefined4 process_and_multiply_data_0800134e(undefined4 input_1,undefined4 input_2,undefined4 constant,undefined4 output)\n\n{\n  process_and_multiply_data_0800134e_08001310(input_1,input_2,1,output,output);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "process_and_multiply_data_0800134e",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant",
                "param_4": "output"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "process_and_multiply_data_0800135a",
            "code": "\nvoid processAndMultiplyData_0800135a(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  process_and_multiply_data_08001310(inputParam1,1,0,inputParam4,inputParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "process_and_multiply_data_0800135a",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "process_data_08001366",
            "code": "\nvoid processData_08001366(int dataAddress,char offset,uint length,undefined4 additionalParameter)\n\n{\n  char character;\n  \n  if (3 < length) {\n    length = 3;\n  }\n  if ((int)(uint)*(byte *)(dataAddress + 0x17) <= (int)length) {\n    length = *(byte *)(dataAddress + 0x17) - 1 & 0xff;\n  }\n  character = *(char *)(length + dataAddress + 0x18);\n  processData_08001366AndMultiply(dataAddress,offset + character | 0x80,0,character,additionalParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "process_data_08001366",
                "param_1": "dataAddress",
                "param_2": "offset",
                "param_3": "length",
                "param_4": "additionalParameter",
                "cVar1": "character",
                "process_and_multiply_data_08001310": "processDataAndMultiply"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "process_and_multiply_data_0800138e",
            "code": "\nvoid process_and_multiply_data_0800138e(int data_address,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  byte original_value;\n  \n  original_value = *(byte *)(data_address + 0x14);\n  *(byte *)(data_address + 0x14) = original_value | 4;\n  process_multiply_helper(data_address,original_value | 0xc,0,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "process_and_multiply_data_0800138e",
                "param_1": "data_address",
                "bVar1": "original_value",
                "process_and_multiply_data_08001310": "process_multiply_helper"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "configure_memory_and_process_data_080013a4",
            "code": "\nvoid configureMemoryAndProcessData_080013a4(int memoryParameter,int dataParameter,int length,int flag)\n\n{\n  int configSize;\n  int configIndex;\n  \n  if (1 < length) {\n    *(byte *)(memoryParameter + 0x13) = *(byte *)(memoryParameter + 0x13) | 8;\n  }\n  *(char *)(memoryParameter + 0x17) = (char)length;\n  set_params_08001294(memoryParameter,0,0x40,dataParameter,dataParameter + 0x40);\n  if ((flag != 0) && (length == 1)) {\n    *(byte *)(memoryParameter + 0x13) = *(byte *)(memoryParameter + 0x13) | 4;\n  }\n  process_memory_configuration_080057b4(*(undefined *)(memoryParameter + 8),1);\n  if (*(char *)(memoryParameter + 9) != -1) {\n    process_memory_configuration_080057b4(*(char *)(memoryParameter + 9),1);\n  }\n  process_memory_configuration_080057b4(*(undefined *)(memoryParameter + 10),1);\n  configIndex = 0;\n  while( true ) {\n    if ((*(byte *)(memoryParameter + 0x13) & 0x10) == 0) {\n      configSize = 4;\n    }\n    else {\n      configSize = 8;\n    }\n    if (configSize <= configIndex) break;\n    process_memory_configuration_080057b4(*(undefined *)(memoryParameter + configIndex + 0xb),1);\n    configIndex = configIndex + 1;\n  }\n  process_data_08005848(*(undefined *)(memoryParameter + 8),0);\n  process_data_08005848(*(undefined *)(memoryParameter + 10),0);\n  if (*(char *)(memoryParameter + 9) != -1) {\n    process_data_08005848(*(char *)(memoryParameter + 9),0);\n  }\n  if ((*(byte *)(memoryParameter + 0x13) & 0x10) == 0) {\n    process_and_multiply_data_080012c0(memoryParameter,3);\n    process_and_multiply_data_080012c0(memoryParameter,3);\n    process_and_multiply_data_080012c0(memoryParameter,3);\n    process_and_multiply_data_080012c0(memoryParameter,2);\n  }\n  else {\n    process_and_multiply_data_08001310(memoryParameter,*(byte *)(memoryParameter + 0x13) | 0x20,0);\n    process_and_multiply_data_08001310(memoryParameter,*(byte *)(memoryParameter + 0x13) | 0x20,0);\n    process_and_multiply_data_08001310(memoryParameter,*(byte *)(memoryParameter + 0x13) | 0x20,0);\n  }\n  process_and_multiply_data_08001310(memoryParameter,*(byte *)(memoryParameter + 0x13) | 0x20,0);\n  *(undefined *)(memoryParameter + 0x14) = 4;\n  process_and_multiply_data_0800138e(memoryParameter);\n  process_and_multiply_data_0800135a(memoryParameter);\n  *(undefined *)(memoryParameter + 0x15) = 2;\n  process_and_multiply_data_08001310(memoryParameter,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "configure_memory_and_process_data_080013a4",
                "param_1": "memoryParameter",
                "param_2": "dataParameter",
                "param_3": "length",
                "param_4": "flag",
                "iVar1": "configSize",
                "iVar2": "configIndex"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "update_memory_and_process_data_080014ba",
            "code": "\nvoid updateMemoryAndProcessData_080014ba(int memoryAddress,int flag,undefined value1,undefined4 value2,undefined value3,\n                 undefined value4,undefined value5,undefined value6,undefined value7,\n                 undefined value8,undefined value9,undefined value10,undefined value11)\n\n{\n  *(undefined *)(memoryAddress + 8) = value1;\n  *(char *)(memoryAddress + 9) = (char)value2;\n  *(undefined *)(memoryAddress + 10) = value3;\n  *(undefined *)(memoryAddress + 0xb) = value4;\n  *(undefined *)(memoryAddress + 0xc) = value5;\n  *(undefined *)(memoryAddress + 0xd) = value6;\n  *(undefined *)(memoryAddress + 0xe) = value7;\n  *(undefined *)(memoryAddress + 0xf) = value8;\n  *(undefined *)(memoryAddress + 0x10) = value9;\n  *(undefined *)(memoryAddress + 0x11) = value10;\n  *(undefined *)(memoryAddress + 0x12) = value11;\n  if (flag == 0) {\n    *(undefined *)(memoryAddress + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(memoryAddress + 0x13) = 0;\n  }\n  configure_memory_and_process_data_080013a4(memoryAddress,0x10,1,0,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "update_memory_and_process_data_080014ba",
                "param_1": "memoryAddress",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7",
                "param_10": "value8",
                "param_11": "value9",
                "param_12": "value10",
                "param_13": "value11"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_and_process_data_08001510",
            "code": "\nundefined4 *\ninitialize_and_process_data_08001510(undefined4 *data_array,undefined4 input_value1,undefined4 input_value2,undefined4 input_value3,\n            undefined flag1,undefined flag2,undefined flag3)\n\n{\n  data_array[1] = 0;\n  *data_array = &PTR_process_and_multiply_data_0800134e_1_080073f8;\n  update_memory_and_process_data_080014ba(data_array,1,input_value1,0xff,input_value2,input_value3,flag1,flag2,flag3,0,0,0,0);\n  return data_array;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_and_process_data_08001510",
                "param_1": "data_array",
                "param_2": "input_value1",
                "param_3": "input_value2",
                "param_4": "input_value3",
                "param_5": "flag1",
                "param_6": "flag2",
                "param_7": "flag3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "process_data_and_multiply_08001550",
            "code": "\nvoid process_data_and_multiply_08001550(undefined4 *data_ptr,uint data_size,int data_array_ptr)\n\n{\n  int index;\n  \n  process_and_multiply_data_08001310(data_ptr,(data_size & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*data_ptr)(data_ptr,*(undefined *)(data_array_ptr + index));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "process_data_and_multiply_08001550",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_array_ptr",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_memory_0800157c",
            "code": "\nundefined * initializeMemory_0800157c(undefined *memoryBlock,undefined4 value1,undefined value2,undefined value3)\n\n{\n  *memoryBlock = (char)value1;\n  memoryBlock[1] = value2;\n  memoryBlock[2] = value3;\n  process_memory_configuration_080057b4(value1,0);\n  process_memory_configuration_080057b4(memoryBlock[1],1);\n  process_memory_configuration_080057b4(memoryBlock[2],1);\n  process_data_08005848(memoryBlock[1],1);\n  process_data_08005848(memoryBlock[2],0);\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_memory_0800157c",
                "param_1": "memoryBlock",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "check_parameter_bits_080015b2",
            "code": "\nuint check_parameter_bits_080015b2(undefined *param_1)\n\n{\n  int check_result;\n  uint bit_index;\n  uint bitmask;\n  \n  process_data_08005848(param_1[1],0);\n  bitmask = 0;\n  for (bit_index = 0x1f; -1 < (int)bit_index; bit_index = bit_index - 1) {\n    process_data_08005848(param_1[2],1);\n    check_result = check_parameter_value_08005890(*param_1);\n    if (check_result != 0) {\n      bitmask = bitmask | 1 << (bit_index & 0xff);\n    }\n    process_data_08005848(param_1[2],0);\n  }\n  process_data_08005848(param_1[1],1);\n  return bitmask;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "check_parameter_bits_080015b2",
                "iVar1": "check_result",
                "uVar2": "bit_index",
                "uVar3": "bitmask"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "convert_parameter_to_float_080015f8",
            "code": "\nundefined8 convertParameterToFloat_080015f8(undefined4 flags,int type,undefined4 arg3,undefined4 arg4)\n\n{\n  uint bitwiseParam;\n  undefined8 result;\n  \n  bitwiseParam = check_parameter_bits_080015b2();\n  if ((bitwiseParam & 0x10000) == 0) {\n    bitwiseParam = bitwiseParam >> 0x12;\n    result = bitwise_shift_and_concatenate_0800040c(bitwiseParam & 0x1fff);\n    if ((bitwiseParam & 0x2000) != 0) {\n      result = bitwise_shift_and_concatenate_0800040c(~bitwiseParam & 0x1fff);\n      result = calculate_sum_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,arg4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculate_floating_point_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (type == 1) {\n      result = calculate_floating_point_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = calculate_floating_point_0800074c((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = calculate_sum_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    bitwiseParam = bitwiseParam & 7;\n    if (bitwiseParam == 2) {\n      return 0x40c3888000000000;\n    }\n    if (bitwiseParam == 4) {\n      return 0x40c3890000000000;\n    }\n    if (bitwiseParam != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "convert_parameter_to_float_080015f8",
                "param_1": "flags",
                "param_2": "type",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "bitwiseParam",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "process_data_080016b4",
            "code": "\nchar processData_080016b4(int data)\n\n{\n  char result;\n  int initializedData;\n  int checkResult;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  undefined4 tempVar7;\n  undefined4 tempVar8;\n  undefined4 tempVar9;\n  undefined4 tempVar10;\n  char flag;\n  undefined4 tempVar12;\n  undefined4 tempVar13;\n  undefined4 tempVar14;\n  undefined8 tempVar15;\n  undefined8 tempVar16;\n  undefined8 tempVar17;\n  undefined8 tempVar18;\n  undefined4 tempLocal38;\n  undefined4 tempStack34;\n  \n  flag = *(char *)(data + 0x70);\n  if (flag != '\\0') {\n    initializedData = initialize_data_080058e0();\n    if ((uint)(initializedData - *(int *)(data + 0x44)) < *(uint *)(data + 0x58)) {\n      flag = '\\0';\n    }\n    else {\n      tempVar5 = **(undefined4 **)(data + 0x38);\n      tempVar8 = (*(undefined4 **)(data + 0x38))[1];\n      tempVar15 = calculate_result_08000190(**(undefined4 **)(data + 0x40),(*(undefined4 **)(data + 0x40))[1])\n      ;\n      tempVar14 = (undefined4)((ulonglong)tempVar15 >> 0x20);\n      tempVar16 = calculate_result_08000190(tempVar5,tempVar8,*(undefined4 *)(data + 0x50),\n                            *(undefined4 *)(data + 0x54));\n      tempVar4 = (undefined4)((ulonglong)tempVar16 >> 0x20);\n      tempVar17 = calculate_floating_point_080004f8((int)tempVar15,tempVar14,*(undefined4 *)(data + 0x20),\n                            *(undefined4 *)(data + 0x24));\n      tempVar17 = calculate_sum_08000194((int)tempVar17,(int)((ulonglong)tempVar17 >> 0x20),\n                            *(undefined4 *)(data + 0x48),*(undefined4 *)(data + 0x4c));\n      *(undefined8 *)(data + 0x48) = tempVar17;\n      result = *(char *)(data + 0x71);\n      if (result == '\\0') {\n        tempVar18 = calculate_floating_point_080004f8((int)tempVar16,tempVar4,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n        tempVar17 = calculate_result_08000190((int)tempVar17,(int)((ulonglong)tempVar17 >> 0x20),(int)tempVar18,\n                              (int)((ulonglong)tempVar18 >> 0x20));\n        *(undefined8 *)(data + 0x48) = tempVar17;\n      }\n      tempVar6 = *(undefined4 *)(data + 0x48);\n      tempVar9 = *(undefined4 *)(data + 0x4c);\n      tempVar12 = *(undefined4 *)(undefined8 *)(data + 0x68);\n      tempVar13 = *(undefined4 *)(data + 0x6c);\n      tempVar17 = *(undefined8 *)(data + 0x68);\n      checkResult = check_if_string_is_empty_08000a18(tempVar6,tempVar9,tempVar12,tempVar13);\n      if (checkResult == 0) {\n        tempVar7 = *(undefined4 *)(data + 0x60);\n        tempVar10 = *(undefined4 *)(data + 100);\n        checkResult = check_if_null_terminate_080009dc(tempVar6,tempVar9);\n        if (checkResult != 0) {\n          *(undefined4 *)(data + 0x48) = tempVar7;\n          *(undefined4 *)(data + 0x4c) = tempVar10;\n        }\n      }\n      else {\n        *(undefined4 *)(data + 0x48) = tempVar12;\n        *(undefined4 *)(data + 0x4c) = tempVar13;\n      }\n      if (result == '\\0') {\n        tempVar15 = 0;\n      }\n      else {\n        tempVar15 = calculate_floating_point_080004f8((int)tempVar15,tempVar14,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n      }\n      tempStack34 = (undefined4)((ulonglong)tempVar15 >> 0x20);\n      tempLocal38 = (undefined4)tempVar15;\n      tempVar14 = *(undefined4 *)(data + 0x48);\n      tempVar6 = *(undefined4 *)(data + 0x4c);\n      tempVar15 = calculate_floating_point_080004f8((int)tempVar16,tempVar4,*(undefined4 *)(data + 0x28),\n                            *(undefined4 *)(data + 0x2c));\n      tempVar15 = calculate_result_08000190(tempVar14,tempVar6,(int)tempVar15,(int)((ulonglong)tempVar15 >> 0x20));\n      tempVar15 = calculate_sum_08000194(tempLocal38,tempStack34,(int)tempVar15,(int)((ulonglong)tempVar15 >> 0x20));\n      tempVar14 = (undefined4)((ulonglong)tempVar15 >> 0x20);\n      checkResult = check_if_null_terminate_080009dc(tempVar12,tempVar13,(int)tempVar15,tempVar14);\n      if (checkResult == 0) {\n        tempVar17 = *(undefined8 *)(data + 0x60);\n        checkResult = check_if_null_terminate_080009dc((int)tempVar15,tempVar14,*(undefined4 *)(undefined8 *)(data + 0x60),\n                             *(undefined4 *)(data + 100));\n        if (checkResult == 0) {\n          tempVar17 = tempVar15;\n        }\n      }\n      **(undefined8 **)(data + 0x3c) = tempVar17;\n      *(undefined4 *)(data + 0x50) = tempVar5;\n      *(undefined4 *)(data + 0x54) = tempVar8;\n      *(int *)(data + 0x44) = initializedData;\n    }\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "param_1": "data",
                "cVar1": "result",
                "iVar2": "initializedData",
                "iVar3": "checkResult",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "cVar11": "flag",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13",
                "uVar14": "tempVar14",
                "uVar15": "tempVar15",
                "uVar16": "tempVar16",
                "uVar17": "tempVar17",
                "uVar18": "tempVar18",
                "local_38": "tempLocal38",
                "uStack_34": "tempStack34"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "initialize_params_08001814",
            "code": "\nvoid initializeParams_08001814(undefined4 *outputArray,undefined4 input1,undefined4 input2,undefined4 input3,\n                 undefined4 input4,undefined4 input5,undefined4 input6,undefined4 input7,\n                 int flag)\n\n{\n  int isNullTerminated;\n  undefined4 resultHigh;\n  undefined temp;\n  bool isFlagOne;\n  undefined8 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  isNullTerminated = check_if_null_terminate_080009dc(input2,input3,0,0);\n  if (((isNullTerminated == 0) && (isNullTerminated = check_if_null_terminate_080009dc(input4,input5,0,0), isNullTerminated == 0)) &&\n     (isNullTerminated = check_if_null_terminate_080009dc(input6,input7,0,0), isNullTerminated == 0)) {\n    outputArray[0xd] = flag;\n    isFlagOne = flag != 1;\n    if (isFlagOne) {\n      flag = 0;\n    }\n    temp = (undefined)flag;\n    if (!isFlagOne) {\n      temp = 1;\n    }\n    *(undefined *)((int)outputArray + 0x71) = temp;\n    *outputArray = input2;\n    outputArray[1] = input3;\n    outputArray[2] = input4;\n    outputArray[3] = input5;\n    outputArray[4] = input6;\n    outputArray[5] = input7;\n    result1 = bitwise_shift_and_concatenate_0800040c(outputArray[0x16]);\n    result1 = calculate_floating_point_0800074c((int)result1,(int)((ulonglong)result1 >> 0x20),0,0x408f4000);\n    resultHigh = (undefined4)((ulonglong)result1 >> 0x20);\n    outputArray[6] = input2;\n    outputArray[7] = input3;\n    result2 = calculate_floating_point_080004f8(input4,input5,(int)result1,resultHigh);\n    *(undefined8 *)(outputArray + 8) = result2;\n    result1 = calculate_floating_point_0800074c(input6,input7,(int)result1,resultHigh);\n    *(undefined8 *)(outputArray + 10) = result1;\n    if (outputArray[0xc] == 1) {\n      result3 = calculate_result_08000190(0,0,input2,input3);\n      *(undefined8 *)(outputArray + 6) = result3;\n      result2 = calculate_result_08000190(0,0,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      *(undefined8 *)(outputArray + 8) = result2;\n      result1 = calculate_result_08000190(0,0,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      *(undefined8 *)(outputArray + 10) = result1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "initialize_params_08001814",
                "param_1": "outputArray",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "input4",
                "param_6": "input5",
                "param_7": "input6",
                "param_8": "input7",
                "param_9": "flag",
                "iVar1": "isNullTerminated",
                "uVar2": "resultHigh",
                "uVar3": "temp",
                "bVar4": "isFlagOne",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "result3"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_080018f8",
            "code": "\nvoid initialize_080018f8(void)\n\n{\n  initialize_080018f8_params();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_080018f8",
                "initialize_params_08001814": "initialize_params"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_data_values_08001918",
            "code": "\nvoid updateDataValues_08001918(int dataPointer,int newValue,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 upperBits;\n  undefined8 shiftedNewValue;\n  undefined8 shiftedDataValue;\n  \n  if (0 < newValue) {\n    shiftedNewValue = bitwise_shift_and_concatenate_0800042c(newValue);\n    shiftedDataValue = bitwise_shift_and_concatenate_0800040c(*(undefined4 *)(dataPointer + 0x58));\n    shiftedNewValue = calculate_floating_point_0800074c((int)shiftedNewValue,(int)((ulonglong)shiftedNewValue >> 0x20),(int)shiftedDataValue,\n                         (int)((ulonglong)shiftedDataValue >> 0x20),param4);\n    upperBits = (undefined4)((ulonglong)shiftedNewValue >> 0x20);\n    shiftedDataValue = calculate_floating_point_080004f8((int)shiftedNewValue,upperBits,*(undefined4 *)(dataPointer + 0x20),\n                         *(undefined4 *)(dataPointer + 0x24));\n    *(undefined8 *)(dataPointer + 0x20) = shiftedDataValue;\n    shiftedNewValue = calculate_floating_point_0800074c(*(undefined4 *)(dataPointer + 0x28),*(undefined4 *)(dataPointer + 0x2c),(int)shiftedNewValue,\n                         upperBits);\n    *(undefined8 *)(dataPointer + 0x28) = shiftedNewValue;\n    *(int *)(dataPointer + 0x58) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_data_values_08001918",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "upperBits",
                "uVar2": "shiftedNewValue",
                "uVar3": "shiftedDataValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "process_params_08001960",
            "code": "\nvoid processParams_08001960(int baseAddress,undefined4 param2,undefined4 sourceAddress,undefined4 destAddress,\n                 undefined4 tempAddress,undefined4 temp2Address)\n\n{\n  int checkResult;\n  undefined4 *ptrToData;\n  undefined4 dataValue1;\n  undefined4 dataValue2;\n  undefined4 tempValue1;\n  undefined4 temp2Value;\n  \n  checkResult = checkFlagsAndReturn(sourceAddress,destAddress,tempAddress,temp2Address,destAddress);\n  if (checkResult == 0) {\n    *(undefined4 *)(baseAddress + 0x60) = sourceAddress;\n    *(undefined4 *)(baseAddress + 100) = destAddress;\n    *(undefined4 *)(baseAddress + 0x68) = tempAddress;\n    *(undefined4 *)(baseAddress + 0x6c) = temp2Address;\n    if (*(char *)(baseAddress + 0x70) != '\\0') {\n      ptrToData = *(undefined4 **)(baseAddress + 0x3c);\n      dataValue1 = *ptrToData;\n      tempValue1 = ptrToData[1];\n      checkResult = checkIfNullTerminate(tempAddress,temp2Address,dataValue1,tempValue1);\n      if (checkResult == 0) {\n        checkResult = checkIfStringEmpty(sourceAddress,destAddress,dataValue1,tempValue1);\n        if (checkResult != 0) {\n          *ptrToData = sourceAddress;\n          ptrToData[1] = destAddress;\n        }\n      }\n      else {\n        *ptrToData = tempAddress;\n        ptrToData[1] = temp2Address;\n      }\n      dataValue1 = *(undefined4 *)(baseAddress + 0x48);\n      tempValue1 = *(undefined4 *)(baseAddress + 0x4c);\n      dataValue2 = *(undefined4 *)(baseAddress + 0x68);\n      temp2Value = *(undefined4 *)(baseAddress + 0x6c);\n      checkResult = checkIfStringEmpty(dataValue1,tempValue1,dataValue2,temp2Value);\n      if (checkResult != 0) {\n        *(undefined4 *)(baseAddress + 0x48) = dataValue2;\n        *(undefined4 *)(baseAddress + 0x4c) = temp2Value;\n        return;\n      }\n      dataValue2 = *(undefined4 *)(baseAddress + 0x60);\n      temp2Value = *(undefined4 *)(baseAddress + 100);\n      checkResult = checkIfNullTerminate(dataValue1,tempValue1,dataValue2,temp2Value);\n      if (checkResult != 0) {\n        *(undefined4 *)(baseAddress + 0x48) = dataValue2;\n        *(undefined4 *)(baseAddress + 0x4c) = temp2Value;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "process_params_08001960",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "sourceAddress",
                "param_4": "destAddress",
                "param_5": "tempAddress",
                "param_6": "temp2Address",
                "iVar1": "checkResult",
                "puVar2": "ptrToData",
                "uVar3": "dataValue1",
                "uVar4": "dataValue2",
                "uVar5": "tempValue1",
                "uVar6": "temp2Value",
                "check_flags_and_return_08000a04": "checkFlagsAndReturn",
                "check_if_null_terminate_080009dc": "checkIfNullTerminate",
                "check_if_string_is_empty_08000a18": "checkIfStringEmpty"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "check_and_update_strings_080019f6",
            "code": "\nvoid check_and_update_strings_080019f6(int base_address)\n\n{\n  int is_empty;\n  undefined4 string_ptr1;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 string_ptr2;\n  \n  ptr1 = **(undefined4 **)(base_address + 0x3c);\n  ptr2 = (*(undefined4 **)(base_address + 0x3c))[1];\n  *(undefined4 *)(base_address + 0x48) = ptr1;\n  *(undefined4 *)(base_address + 0x4c) = ptr2;\n  string_ptr1 = (*(undefined4 **)(base_address + 0x38))[1];\n  *(undefined4 *)(base_address + 0x50) = **(undefined4 **)(base_address + 0x38);\n  *(undefined4 *)(base_address + 0x54) = string_ptr1;\n  string_ptr1 = *(undefined4 *)(base_address + 0x68);\n  string_ptr2 = *(undefined4 *)(base_address + 0x6c);\n  is_empty = check_if_string_is_empty_08000a18(ptr1,ptr2,string_ptr1,string_ptr2);\n  if (is_empty == 0) {\n    string_ptr1 = *(undefined4 *)(base_address + 0x60);\n    string_ptr2 = *(undefined4 *)(base_address + 100);\n    is_empty = check_if_null_terminate_080009dc(ptr1,ptr2,string_ptr1,string_ptr2);\n    if (is_empty != 0) {\n      *(undefined4 *)(base_address + 0x48) = string_ptr1;\n      *(undefined4 *)(base_address + 0x4c) = string_ptr2;\n    }\n    return;\n  }\n  *(undefined4 *)(base_address + 0x48) = string_ptr1;\n  *(undefined4 *)(base_address + 0x4c) = string_ptr2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "check_and_update_strings_080019f6",
                "param_1": "base_address",
                "iVar1": "is_empty",
                "uVar2": "string_ptr1",
                "uVar3": "ptr1",
                "uVar4": "ptr2",
                "uVar5": "string_ptr2"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_param_08001a44",
            "code": "\nvoid updateParam_08001a44(int ptr,int flag)\n\n{\n  undefined newValue;\n  \n  if (flag == 1) {\n    newValue = 1;\n    if (*(char *)(ptr + 0x70) == '\\0') {\n      check_and_update_strings_080019f6();\n    }\n  }\n  else {\n    newValue = 0;\n  }\n  *(undefined *)(ptr + 0x70) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_param_08001a44",
                "param_1": "ptr",
                "param_2": "flag",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_values_08001a66",
            "code": "\nvoid updateValues_08001a66(int currentObject,int newParam,undefined4 param3,undefined4 param4)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(currentObject + 0x70) != '\\0') && (*(int *)(currentObject + 0x30) != newParam)) {\n    result = calculateResult(0,0,*(undefined4 *)(currentObject + 0x18),*(undefined4 *)(currentObject + 0x1c),param4\n                        );\n    *(undefined8 *)(currentObject + 0x18) = result;\n    result = calculateResult(0,0,*(undefined4 *)(currentObject + 0x20),*(undefined4 *)(currentObject + 0x24));\n    *(undefined8 *)(currentObject + 0x20) = result;\n    result = calculateResult(0,0,*(undefined4 *)(currentObject + 0x28),*(undefined4 *)(currentObject + 0x2c));\n    *(undefined8 *)(currentObject + 0x28) = result;\n  }\n  *(int *)(currentObject + 0x30) = newParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_values_08001a66",
                "param_1": "currentObject",
                "param_2": "newParam",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "calculate_result_08000190": "calculateResult"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_and_update_params_08001ab0",
            "code": "\nint initialize_and_update_params_08001ab0(int data_struct,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                undefined4 extra_param_1,undefined4 extra_param_2,undefined4 extra_param_3,undefined4 extra_param_4,\n                undefined4 extra_param_5,undefined4 extra_param_6,undefined4 extra_param_7,undefined4 extra_param_8)\n\n{\n  int result;\n  undefined4 param_result;\n  \n  *(undefined4 *)(data_struct + 0x3c) = param_3;\n  *(undefined4 *)(data_struct + 0x38) = param_2;\n  *(undefined4 *)(data_struct + 0x40) = param_4;\n  *(undefined *)(data_struct + 0x70) = 0;\n  process_params(data_struct,param_2,0,0,0,0x406fe000);\n  *(undefined4 *)(data_struct + 0x58) = 100;\n  update_values(data_struct,extra_param_8);\n  initialize_params(data_struct,param_result,extra_param_1,extra_param_2,extra_param_3,extra_param_4,extra_param_5,extra_param_6,extra_param_7);\n  result = initialize_data();\n  *(int *)(data_struct + 0x44) = result - *(int *)(data_struct + 0x58);\n  return data_struct;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_and_update_params_08001ab0",
                "param_1": "data_struct",
                "param_5": "extra_param_1",
                "param_6": "extra_param_2",
                "param_7": "extra_param_3",
                "param_8": "extra_param_4",
                "param_9": "extra_param_5",
                "param_10": "extra_param_6",
                "param_11": "extra_param_7",
                "param_12": "extra_param_8",
                "iVar1": "result",
                "extraout_r1": "param_result",
                "process_params_08001960": "process_params",
                "update_values_08001a66": "update_values",
                "initialize_params_08001814": "initialize_params",
                "initialize_data_080058e0": "initialize_data"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_update_params_08001b18",
            "code": "\nundefined4 initializeAndUpdateParams_08001b18(undefined4 input)\n\n{\n  initializeAndUpdateParams_08001b18Helper();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_update_params_08001b18",
                "param_1": "input",
                "initialize_and_update_params_08001ab0": "initializeAndUpdateParamsHelper"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_and_update_memory_08001b48",
            "code": "\nvoid initialize_and_update_memory_08001b48(void)\n\n{\n  int result;\n  uint dataValue;\n  undefined4 settings [2];\n  undefined4 settingValue;\n  undefined4 memoryOffset;\n  undefined4 memoryCount;\n  undefined4 initialOffset;\n  undefined4 offsetStep;\n  undefined4 offset;\n  undefined4 flagValues [4];\n  undefined4 flagValue;\n  undefined4 memorySize;\n  undefined4 flagCount;\n  undefined4 initialValue;\n  undefined4 memoryAddress;\n  \n  flagValues[0] = 2;\n  flagValue = 1;\n  memorySize = 0x10;\n  flagCount = 2;\n  initialValue = 0;\n  memoryAddress = 0x380000;\n  result = check_and_process_flags_08003688(flagValues);\n  if (result != 0) {\n    endless_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  memoryOffset = 0xf;\n  memoryCount = 2;\n  initialOffset = 0;\n  offsetStep = 0x400;\n  offset = 0;\n  result = initialize_memory_08003ad4(&memoryOffset);\n  if (result != 0) {\n    endless_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  settings[0] = 2;\n  settingValue = 0x8000;\n  result = update_settings_08003c90(settings);\n  if (result != 0) {\n    endless_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  dataValue = get_data_value_08003c44();\n  validate_input_08002514(dataValue / 1000);\n  modify_e000e010_flag_08002560(4);\n  update_memory_08002494(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_and_update_memory_08001b48",
                "local_30": "flagValues",
                "local_20": "flagValue",
                "local_1c": "memorySize",
                "local_14": "flagCount",
                "local_10": "initialValue",
                "local_c": "memoryAddress",
                "local_44": "memoryOffset",
                "local_40": "memoryCount",
                "local_3c": "initialOffset",
                "local_38": "offsetStep",
                "local_34": "offset",
                "local_54": "settings",
                "local_4c": "settingValue",
                "iVar1": "result",
                "uVar2": "dataValue"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_08004d44();\n  execute_functions_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  continuous_data_processing_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_device_and_memory_08001c32",
            "code": "\nvoid initialize_device_and_memory_08001c32(void)\n\n{\n  initialize_device_and_memory_08001c32_08004c52();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_device_and_memory_08001c32"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "validate_and_update_memory_08001c3c",
            "code": "\nundefined4 validateAndUpdateMemory_08001c3c(uint inputValue)\n\n{\n  int validationResult;\n  \n  validationResult = validate_input_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (validationResult != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  update_memory_08002494(0xffffffff,inputValue,0);\n  DAT_2000007c = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "validate_and_update_memory_08001c3c",
                "param_1": "inputValue",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_device_08001c88",
            "code": "\n\n\nundefined4 initialize_device_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_config_registers(3);\n  validate_and_update_memory(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_device_08001c88",
                "update_config_registers_08002470": "update_config_registers",
                "validate_and_update_memory_08001c3c": "validate_and_update_memory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "addition_and_update_08001cac",
            "code": "\nvoid additionAndUpdate_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "addition_and_update_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_value_08001cc4",
            "code": "\nundefined4 get_data_value_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_value_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_and_update_status_08001cd0",
            "code": "\nundefined4 calculateAndUpdateStatus_08001cd0(uint **dataPtr,uint limit)\n\n{\n  int initialValue;\n  uint value;\n  int difference;\n  undefined4 status;\n  uint *ptr;\n  uint calculation;\n  uint counter;\n  \n  counter = 0;\n  initialValue = get_data_value_08001cc4();\n  calculation = DAT_20000084;\n  ptr = *dataPtr;\n  if ((ptr[2] & 0x100) == 0) {\n    if (((ptr[1] & 0x100) == 0) && ((ptr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**dataPtr & 2) != 0) goto LAB_08001de2;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (difference = get_data_value_08001cc4(), (uint)(difference - initialValue) <= limit))));\n      dataPtr[10] = (uint *)((uint)dataPtr[10] | 4);\n      *(undefined *)(dataPtr + 9) = 0;\n      status = 3;\n    }\n    else {\n      value = calculate_value_08003da4(2);\n      ptr = *dataPtr;\n      if (((ptr[4] & 0x24924924) == 0) && ((ptr[3] & 0x924924) == 0)) {\n        if ((ptr[4] & 0x12492492) == 0) {\n          if ((ptr[3] & 0x492492) == 0) {\n            difference = 0x14;\n          }\n          else {\n            difference = 0x29;\n          }\n        }\n        else {\n          difference = 0x29;\n        }\n      }\n      else if (((ptr[4] & 0x12492492) == 0) && ((ptr[3] & 0x492492) == 0)) {\n        difference = 0x54;\n      }\n      else if ((ptr[4] & 0x249249) == 0) {\n        if ((ptr[3] & 0x249249) == 0) {\n          difference = 0x54;\n        }\n        else {\n          difference = 0xfc;\n        }\n      }\n      else {\n        difference = 0xfc;\n      }\n      calculation = (calculation / value) * difference;\n      for (; counter <= calculation && calculation - counter != 0; counter = counter + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (difference = get_data_value_08001cc4(), limit < (uint)(difference - initialValue))))) {\n          dataPtr[10] = (uint *)((uint)dataPtr[10] | 4);\n          *(undefined *)(dataPtr + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **dataPtr = 0xffffffed;\n      dataPtr[10] = (uint *)((uint)dataPtr[10] | 0x200);\n      if (((*dataPtr)[2] & 0xe0000) == 0xe0000) {\n        if (dataPtr[3] == (uint *)0x0) {\n          dataPtr[10] = (uint *)((uint)dataPtr[10] & 0xfffffeff);\n          if (((uint)dataPtr[10] & 0x1000) == 0) {\n            dataPtr[10] = (uint *)((uint)dataPtr[10] | 1);\n            status = 0;\n          }\n          else {\n            status = 0;\n          }\n        }\n        else {\n          status = 0;\n        }\n      }\n      else {\n        status = 0;\n      }\n    }\n  }\n  else {\n    dataPtr[10] = (uint *)((uint)dataPtr[10] | 0x20);\n    *(undefined *)(dataPtr + 9) = 0;\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_and_update_status_08001cd0",
                "param_1": "dataPtr",
                "param_2": "limit",
                "iVar1": "initialValue",
                "uVar2": "value",
                "iVar3": "difference",
                "uVar4": "status",
                "puVar5": "ptr",
                "uVar6": "calculation",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 get_offset_value_08001e40(int *input_param)\n\n{\n  return *(undefined4 *)(*input_param + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_configuration_08001e48",
            "code": "\nundefined4 updateConfiguration_08001e48(int *config,uint *values)\n\n{\n  undefined4 result;\n  uint value;\n  int counter;\n  \n  if (*(char *)(config + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(config + 9) = 1;\n    value = values[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*config + 0x34) =\n           *values << (value & 0xff) | *(uint *)(*config + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*config + 0x30) =\n           *values << (value & 0xff) | *(uint *)(*config + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*config + 0x2c) =\n           *values << (value & 0xff) | *(uint *)(*config + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = *values;\n    if (value < 10) {\n      *(uint *)(*config + 0x10) =\n           values[2] << (value * 3 & 0xff) |\n           *(uint *)(*config + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*config + 0xc) =\n           values[2] << (value & 0xff) | *(uint *)(*config + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*config == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(config + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "param_1": "config",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "value",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_value_from_address_08001f80",
            "code": "\nundefined4 get_value_from_address_08001f80(int address)\n\n{\n  return *(undefined4 *)(address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_value_from_address_08001f80",
                "param_1": "address"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "update_data_08001f84",
            "code": "\nundefined4 updateData_08001f84(int *dataPointer,undefined4 value)\n\n{\n  int newValue;\n  undefined4 result;\n  int dataValue;\n  uint iterationCount;\n  \n  dataValue = *dataPointer;\n  if ((*(uint *)(dataValue + 8) & 1) == 0) {\n    *(uint *)(dataValue + 8) = *(uint *)(dataValue + 8) | 1;\n    for (iterationCount = DAT_20000084 / 1000000; iterationCount != 0; iterationCount = iterationCount - 1) {\n    }\n    dataValue = get_data_value_08001cc4(dataPointer,value,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPointer + 8) & 1) != 0) {\n        return 0;\n      }\n      newValue = get_data_value_08001cc4();\n    } while ((uint)(newValue - dataValue) < 3);\n    dataPointer[10] = dataPointer[10] | 0x10;\n    dataPointer[0xb] = dataPointer[0xb] | 1;\n    *(undefined *)(dataPointer + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "update_data_08001f84",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "newValue",
                "iVar3": "dataValue",
                "uVar2": "result",
                "local_14": "iterationCount"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "update_data_08002004",
            "code": "\n\n\nint updateData_08002004(int *data)\n\n{\n  int result;\n  undefined4 *ptr;\n  int temp;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = update_data_08001f84();\n    if (result == 0) {\n      data[10] = data[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        data[0xb] = 0;\n      }\n      else {\n        data[0xb] = data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr = 0xfffffffd;\n      temp = *data;\n      if (((*(uint *)(temp + 8) & 0xe0000) == 0xe0000) &&\n         ((temp != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(temp + 8) = *(uint *)(temp + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(temp + 8) = *(uint *)(temp + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "update_data_08002004",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "temp"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_data_080020f0",
            "code": "\nundefined4 updateData_080020f0(int *dataPointer)\n\n{\n  int value1;\n  int value2;\n  \n  value2 = *dataPointer;\n  if ((*(uint *)(value2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value2 + 8) = *(uint *)(value2 + 8) & 0xfffffffe;\n  value2 = get_data_value_08001cc4();\n  do {\n    if ((*(uint *)(*dataPointer + 8) & 1) == 0) {\n      return 0;\n    }\n    value1 = get_data_value_08001cc4();\n  } while ((uint)(value1 - value2) < 3);\n  dataPointer[10] = dataPointer[10] | 0x10;\n  dataPointer[0xb] = dataPointer[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_data_080020f0",
                "param_1": "dataPointer",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_register_status_0800213c",
            "code": "\nundefined4 update_register_status_0800213c(int *register_status)\n\n{\n  int result;\n  uint combined_flags;\n  uint additional_flags;\n  \n  if (register_status == (int *)0x0) {\n    return 1;\n  }\n  if (register_status[10] == 0) {\n    register_status[0xb] = 0;\n    *(undefined *)(register_status + 9) = 0;\n    update_register_values_08004974();\n  }\n  result = update_data_080020f0(register_status);\n  if (((register_status[10] & 0x10U) == 0) && (result == 0)) {\n    register_status[10] = register_status[10] & 0xffffeefdU | 2;\n    combined_flags = register_status[1] | register_status[7] | register_status[3] << 1;\n    if (register_status[2] == 0x100) {\n      additional_flags = 0x100;\n    }\n    else {\n      additional_flags = 0;\n      if (register_status[2] == 1) {\n        additional_flags = 0x100;\n      }\n    }\n    if (register_status[5] == 1) {\n      if (register_status[3] == 0) {\n        additional_flags = additional_flags | (register_status[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        register_status[10] = register_status[10] | 0x20;\n        register_status[0xb] = register_status[0xb] | 1;\n      }\n    }\n    *(uint *)(*register_status + 4) = additional_flags | *(uint *)(*register_status + 4) & 0xffff16ff;\n    *(uint *)(*register_status + 8) = *(uint *)(*register_status + 8) & 0xffe1f7fd | combined_flags;\n    if ((register_status[2] == 0x100) || (register_status[2] == 1)) {\n      additional_flags = (register_status[4] + -1) * 0x100000;\n    }\n    else {\n      additional_flags = 0;\n    }\n    *(uint *)(*register_status + 0x2c) = additional_flags | *(uint *)(*register_status + 0x2c) & 0xff0fffff;\n    if (combined_flags != (*(uint *)(*register_status + 8) & 0xff1f0efe)) {\n      register_status[10] = register_status[10] & 0xffffffedU | 0x10;\n      register_status[0xb] = register_status[0xb] | 1;\n      return 1;\n    }\n    register_status[0xb] = 0;\n    register_status[10] = register_status[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  register_status[10] = register_status[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_register_status_0800213c",
                "param_1": "register_status",
                "iVar1": "result",
                "uVar2": "combined_flags",
                "uVar3": "additional_flags"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "update_data_0800224c",
            "code": "\nint updateData_0800224c(int *dataPtr)\n\n{\n  int returnValue;\n  \n  if (dataPtr == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    dataPtr[10] = dataPtr[10] | 2;\n    returnValue = update_data_080020f0();\n    if (returnValue == 0) {\n      *(undefined4 *)*dataPtr = 0xffffffe0;\n      *(uint *)(*dataPtr + 4) = *(uint *)(*dataPtr + 4) & 0xff3f0000;\n      *(uint *)(*dataPtr + 8) = *(uint *)(*dataPtr + 8) & 0xff0106f0;\n      *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xff000000;\n      *(uint *)(*dataPtr + 0x10) = *(uint *)(*dataPtr + 0x10) & 0xc0000000;\n      *(uint *)(*dataPtr + 0x14) = *(uint *)(*dataPtr + 0x14) & 0xfffff000;\n      *(uint *)(*dataPtr + 0x18) = *(uint *)(*dataPtr + 0x18) & 0xfffff000;\n      *(uint *)(*dataPtr + 0x1c) = *(uint *)(*dataPtr + 0x1c) & 0xfffff000;\n      *(uint *)(*dataPtr + 0x20) = *(uint *)(*dataPtr + 0x20) & 0xfffff000;\n      *(uint *)(*dataPtr + 0x24) = *(uint *)(*dataPtr + 0x24) & 0xfffff000;\n      *(uint *)(*dataPtr + 0x28) = *(uint *)(*dataPtr + 0x28) & 0xfffff000;\n      *(uint *)(*dataPtr + 0x2c) = *(uint *)(*dataPtr + 0x2c) & 0xff000000;\n      *(uint *)(*dataPtr + 0x2c) = *(uint *)(*dataPtr + 0x2c) & 0xff000000;\n      *(uint *)(*dataPtr + 0x30) = *(uint *)(*dataPtr + 0x30) & 0xc0000000;\n      *(uint *)(*dataPtr + 0x34) = *(uint *)(*dataPtr + 0x34) & 0xc0000000;\n      *(uint *)(*dataPtr + 0x38) = *(uint *)(*dataPtr + 0x38) & 0xffc00000;\n      *(uint *)(*dataPtr + 0x38) = *(uint *)(*dataPtr + 0x38) & 0xffc00000;\n      update_control_registers_080049f0(dataPtr);\n      dataPtr[0xb] = 0;\n      dataPtr[10] = 0;\n    }\n    *(undefined *)(dataPtr + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "update_data_0800224c",
                "param_1": "dataPtr",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "check_and_update_data_08002348",
            "code": "\nint checkAndUpdateData_08002348(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = updateData;\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "check_and_update_data_08002348",
                "param_1": "data",
                "iVar1": "result",
                "update_data_080020f0()": "updateData"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "process_data_08002384",
            "code": "\nint processData_08002384(int *dataPtr)\n\n{\n  uint dividend;\n  int result;\n  uint divisor;\n  int initialValue;\n  int currentValue;\n  int count;\n  \n  if (*(char *)(dataPtr + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(dataPtr + 9) = 1;\n  result = update_data_080020f0();\n  if (result == 0) {\n    dataPtr[10] = dataPtr[10] & 0xffffeefdU | 2;\n    dividend = DAT_20000084;\n    divisor = calculate_value_08003da4(2);\n    for (count = dividend / divisor << 1; count != 0; count = count + -1) {\n    }\n    update_data_08001f84(dataPtr);\n    *(uint *)(*dataPtr + 8) = *(uint *)(*dataPtr + 8) | 8;\n    initialValue = get_data_value_08001cc4();\n    while (currentValue = *dataPtr, (*(uint *)(currentValue + 8) & 8) != 0) {\n      currentValue = get_data_value_08001cc4();\n      if (10 < (uint)(currentValue - initialValue)) {\n        dataPtr[10] = dataPtr[10] & 0xffffffedU | 0x10;\n        *(undefined *)(dataPtr + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentValue + 8) = *(uint *)(currentValue + 8) | 4;\n    initialValue = get_data_value_08001cc4();\n    while ((*(uint *)(*dataPtr + 8) & 4) != 0) {\n      currentValue = get_data_value_08001cc4();\n      if (10 < (uint)(currentValue - initialValue)) {\n        dataPtr[10] = dataPtr[10] & 0xffffffedU | 0x10;\n        *(undefined *)(dataPtr + 9) = 0;\n        return 1;\n      }\n    }\n    dataPtr[10] = dataPtr[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(dataPtr + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "process_data_08002384",
                "param_1": "dataPtr",
                "uVar1": "dividend",
                "iVar2": "result",
                "uVar3": "divisor",
                "iVar4": "initialValue",
                "iVar5": "currentValue",
                "local_14": "count"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_config_registers_08002470",
            "code": "\n\n\nvoid updateConfigRegisters_08002470(uint configData)\n\n{\n  _DAT_e000ed0c = (configData & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_config_registers_08002470",
                "param_1": "configData"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_memory_08002494",
            "code": "\n\n\nvoid updateMemory_08002494(uint address,uint data,uint mask)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (data & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & mask;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_value_080024f8",
            "code": "\nvoid setBitValue_080024f8(uint inputValue)\n\n{\n  if (-1 < (int)inputValue) {\n    *(int *)((inputValue >> 5) * 4 + -0x1fff1f00) = 1 << (inputValue & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_value_080024f8",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "validate_input_08002514",
            "code": "\n\n\nundefined4 validate_input_08002514(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    status 0;\n  }\n  status 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "validate_input_08002514",
                "param_1": "input_value",
                "return": "status"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_value_08002540",
            "code": "\nvoid setBitValue_08002540(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_value_08002540",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "modify_e000e010_flag_08002560",
            "code": "\n\n\nvoid modify_e000e010_flag_08002560(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "modify_e000e010_flag_08002560",
                "param_1": "flag_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "execute_application_08002582",
            "code": "\nvoid execute_application_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "execute_application_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "initialize_data_0800258c",
            "code": "\n\n\nundefined4 initializeData_0800258c(uint **data)\n\n{\n  uint *pointer1;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    data[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  pointer1 = *data;\n  if (pointer1 == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (pointer1 == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (pointer1 == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (pointer1 == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (pointer1 == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (pointer1 == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (data[0xd] != (uint *)0x0) {\n    (*(code *)data[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "initialize_data_0800258c",
                "param_1": "data",
                "puVar1": "pointer1"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_register_values_08002624",
            "code": "\n\n\nvoid updateRegisterValues_08002624(uint *registerValues,uint *inputValues)\n\n{\n  uint *currentRegister;\n  uint bitMask;\n  uint bitCheck;\n  uint bitPosition;\n  uint valueCheck;\n  uint newValue;\n  int shift;\n  int registerIndex;\n  \n  newValue = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    bitMask = 1 << (bitPosition & 0xff);\n    bitCheck = *inputValues & bitMask;\n    if (bitMask == bitCheck) {\n      valueCheck = inputValues[1];\n      if (valueCheck == 0x12) {\n        newValue = inputValues[3] + 0xc;\n      }\n      else if (valueCheck < 0x13) {\n        if (valueCheck == 2) {\n          newValue = inputValues[3] + 8;\n        }\n        else if (valueCheck < 3) {\n          if (valueCheck == 0) goto LAB_08002776;\n          if (valueCheck == 1) {\n            newValue = inputValues[3];\n          }\n        }\n        else if (valueCheck == 3) {\n          newValue = 0;\n        }\n        else if (valueCheck == 0x11) {\n          newValue = inputValues[3] + 4;\n        }\n      }\n      else if (valueCheck == 0x10210000) {\nLAB_08002776:\n        if (inputValues[2] == 0) {\n          newValue = 4;\n        }\n        else if (inputValues[2] == 1) {\n          registerValues[4] = bitMask;\n          newValue = 8;\n        }\n        else {\n          registerValues[5] = bitMask;\n          newValue = 8;\n        }\n      }\n      else if (valueCheck < 0x10210001) {\n        if ((valueCheck == 0x10110000) || (valueCheck == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((valueCheck == 0x10310000) || ((valueCheck == 0x10320000 || (valueCheck == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = bitPosition;\n      currentRegister = registerValues;\n      if (0xff < bitCheck) {\n        bitMask = bitPosition - 8;\n        currentRegister = registerValues + 1;\n      }\n      *currentRegister = *currentRegister & ~(0xf << (bitMask << 2 & 0xff)) | newValue << (bitMask << 2 & 0xff);\n      if ((inputValues[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift = (bitPosition & 3) << 2;\n        if (registerValues == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (registerValues == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (registerValues == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (registerValues == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shift) | registerIndex << shift;\n        if ((inputValues[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitCheck;\n        }\n        if ((inputValues[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitCheck;\n        }\n        if ((inputValues[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitCheck;\n        }\n        if ((inputValues[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitCheck;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_register_values_08002624",
                "param_1": "registerValues",
                "param_2": "inputValues",
                "puVar1": "currentRegister",
                "uVar2": "bitMask",
                "uVar3": "bitCheck",
                "uVar4": "bitPosition",
                "uVar5": "valueCheck",
                "uVar6": "newValue",
                "iVar7": "shift",
                "iVar8": "registerIndex"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int input_value,uint bitmask)\n\n{\n  if ((bitmask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "input_value",
                "param_2": "bitmask"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_value_0800281e",
            "code": "\nvoid setParamValue_0800281e(int data,int value,int flag)\n\n{\n  if (flag == 0) {\n    *(int *)(data + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(data + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_and_check_bit_0800282c",
            "code": "\n\n\nvoid update_and_check_bit_0800282c(uint bit_to_update)\n\n{\n  if ((_DAT_40010414 & bit_to_update) != 0) {\n    _DAT_40010414 = bit_to_update;\n    handle_bit_check();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_and_check_bit_0800282c",
                "param_1": "bit_to_update",
                "handle_bit_check_080060e4": "handle_bit_check"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "set_flags_based_on_conditions_08002848",
            "code": "\nundefined4 setFlagsBasedOnConditions_08002848(int *parameters)\n\n{\n  if (*(char *)((int)parameters + 0x3e) == '@') {\n    if (value1 == 0) {\n      *(uint *)(*parameters + 0x10) = value2 & 0xfe;\n    }\n    else {\n      *(uint *)(*parameters + 0x10) = value2 & mask2 | 1;\n    }\n  }\n  else if (value3 == 0x4000) {\n    if (*(char *)((int)parameters + 0x3d) == '!') {\n      *(uint *)(*parameters + 0x10) = value2 & 0xfe;\n    }\n    else {\n      *(uint *)(*parameters + 0x10) = value2 & mask2 | 1;\n    }\n  }\n  else if (value1 == 0) {\n    *(uint *)(*parameters + 0x10) = (uint)(value2 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (value1 == 1) {\n    *(uint *)(*parameters + 0x10) = (uint)(value2 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "set_flags_based_on_conditions_08002848",
                "param_1": "parameters",
                "param_1[0x14]": "value1",
                "param_1[0x11]": "value2",
                "0xffU": "mask2",
                "param_1[4]": "value3"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "extract_byte_from_array_080028d2",
            "code": "\nundefined4 extract_byte_from_array_080028d2(int *array_ptr)\n\n{\n  *(uint *)(*array_ptr + 0x10) = array_ptr[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "extract_byte_from_array_080028d2",
                "param_1": "array_ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "update_flags_080028de",
            "code": "\nundefined4 updateFlags_080028de(uint **inputParams)\n\n{\n  uint *ptrValue;\n  \n  ptrValue = inputParams[0xb];\n  if ((*(char *)((int)inputParams + 0x3d) == '\\\"') &&\n     ((ptrValue2 != (uint *)0x0 || (*(char *)((int)inputParams + 0x3e) != '@')))) {\n    if ((ptrValue2 == (uint *)0x0) && (ptrValue3 == (uint *)0xc000)) {\n      **inputParams = **inputParams | 0x100;\n      ptrValue2 = (uint *)((int)ptrValue2 + 1);\n    }\n    else {\n      if (*(short *)((int)inputParams + 0x2a) == 0) {\n        **inputParams = **inputParams | 0x200;\n      }\n      else if (*(short *)((int)inputParams + 0x2a) == 1) {\n        if (ptrValue == (uint *)0xffff0000) {\n          **inputParams = **inputParams & 0xfffffbff;\n          ptrValue = *inputParams;\n          if ((ptrValue[1] & 0x800) == 0) {\n            *ptrValue = *ptrValue | 0x200;\n          }\n          else {\n            *ptrValue = *ptrValue & 0xfffffbff;\n          }\n        }\n        else if (((ptrValue == (uint *)0x4) || (ptrValue == (uint *)0x8)) ||\n                (inputParams[0xc] == (uint *)0x12)) {\n          **inputParams = **inputParams & 0xfffffbff;\n          **inputParams = **inputParams | 0x200;\n        }\n        else if (inputParams[0xb] == (uint *)0x2) {\n          **inputParams = **inputParams | 0x400;\n        }\n        else {\n          **inputParams = **inputParams & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)inputParams + 0x2a) == 2) {\n        if (inputParams[0xb] == (uint *)0x2) {\n          **inputParams = **inputParams | 0x400;\n        }\n        else {\n          **inputParams = **inputParams | 0x800;\n          **inputParams = **inputParams & 0xfffffbff;\n        }\n        ptrValue = *inputParams;\n        if ((ptrValue[1] & 0x800) != 0) {\n          ptrValue[1] = ptrValue[1] | 0x1000;\n        }\n      }\n      else {\n        **inputParams = **inputParams | 0x400;\n        ptrValue = *inputParams;\n        if ((ptrValue[1] & 0x800) != 0) {\n          ptrValue[1] = ptrValue[1] | 0x1000;\n        }\n      }\n      ptrValue2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "inputParams",
                "puVar1": "ptrValue",
                "param_1[0x14]": "ptrValue2",
                "param_1[4]": "ptrValue3"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_pointer_08002ab8",
            "code": "\nundefined4 updatePointer_08002ab8(int *pointer)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)pointer + 0x2a) != 0) {\n    bytePointer = (byte *)pointer[9];\n    pointer[9] = (int)(bytePointer + 1);\n    *(uint *)(*pointer + 0x10) = (uint)*bytePointer;\n    *(short *)((int)pointer + 0x2a) = *(short *)((int)pointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_pointer_08002ab8",
                "param_1": "pointer",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_param_value_08002ad8",
            "code": "\nundefined4 updateParamValue_08002ad8(int *paramArray)\n\n{\n  undefined *newPointer;\n  \n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    newPointer = (undefined *)paramArray[9];\n    paramArray[9] = (int)(newPointer + 1);\n    *newPointer = (char)*(undefined4 *)(*paramArray + 0x10);\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_param_value_08002ad8",
                "param_1": "paramArray",
                "puVar1": "newPointer",
                "param_1[9]": "paramArray[9]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "validate_input_08002af8",
            "code": "\nundefined4 validate_input_08002af8(uint **param_array,uint *input_array,int input_length,uint *output_array)\n\n{\n  undefined4 result;\n  uint *pointer_var;\n  \n  if (*(char *)((int)param_array + 0x3d) == '(') {\n    if (input_array == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      pointer_var = *param_array;\n      if ((*pointer_var & 1) == 0) {\n        *pointer_var = *pointer_var | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x29;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      result = 0;\n      param_array[0x10] = (uint *)0x0;\n      param_array[9] = input_array;\n      *(short *)((int)param_array + 0x2a) = (short)input_length;\n      param_array[0xb] = output_array;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "validate_input_08002af8",
                "param_1": "param_array",
                "param_2": "input_array",
                "param_3": "input_length",
                "param_4": "output_array",
                "uVar1": "result",
                "puVar2": "pointer_var"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "check_params_and_init_08002b84",
            "code": "\nundefined4 check_params_and_init_08002b84(uint **param_array,uint *data_ptr,int size,uint *result_ptr)\n\n{\n  undefined4 return_value;\n  uint *ptr_1;\n  \n  if (*(char *)((int)param_array + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      return_value = 1;\n    }\n    else if (size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      ptr_1 = *param_array;\n      if ((*ptr_1 & 1) == 0) {\n        *ptr_1 = *ptr_1 | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x2a;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      return_value = 0;\n      param_array[0x10] = (uint *)0x0;\n      param_array[9] = data_ptr;\n      *(short *)((int)param_array + 0x2a) = (short)size;\n      param_array[0xb] = result_ptr;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "check_params_and_init_08002b84",
                "param_1": "param_array",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "result_ptr",
                "uVar1": "return_value",
                "puVar2": "ptr_1"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_data_08002c10",
            "code": "\nundefined4 initializeData_08002c10(uint **dataPointer)\n\n{\n  uint *firstValue;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  firstValue = *dataPointer;\n  if ((*firstValue & 1) == 0) {\n    *firstValue = *firstValue | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "param_1": "dataPointer",
                "puVar1": "firstValue"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_array_08002ca6",
            "code": "\nundefined4 updateArray_08002ca6(int *array)\n\n{\n  char charValue;\n  undefined *bytePointer;\n  \n  charValue = *(char *)((int)array + 0x3d);\n  if (*(short *)((int)array + 0x2a) != 0) {\n    bytePointer = (undefined *)bytePointerInArray;\n    bytePointerInArray = (int)(bytePointer + 1);\n    *bytePointer = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n    if ((*(short *)((int)array + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xfffffbff;\n      twelfthElementInArray = 0x22;\n      *(undefined *)((int)array + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_array_08002ca6",
                "param_1": "array",
                "cVar1": "charValue",
                "puVar2": "bytePointer",
                "param_1[9]": "bytePointerInArray",
                "param_1[0xc]": "twelfthElementInArray"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "validate_and_process_input_08002cf2",
            "code": "\nundefined4 validate_and_process_input_08002cf2(int *input_array,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 selected_value;\n  uint flags;\n  \n  flags = *(uint *)(*input_array + 0x18);\n  if ((flags & 0x80) == 0) {\n    selected_value = *(undefined2 *)(input_array + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(input_array + 6);\n  }\n  validate_input_08004e74(input_array,(*(uint *)(*input_array + 0x18) & 4) == 0,selected_value,flags,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "validate_and_process_input_08002cf2",
                "param_1": "input_array",
                "uVar1": "selected_value",
                "uVar2": "flags"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "validate_input_and_execute_08002d1c",
            "code": "\nundefined4 validateInputAndExecute_08002d1c(uint **inputParams)\n\n{\n  if (((paramValueB == (uint *)0x4) || (paramValueB == (uint *)0x8)) &&\n     (*(char *)((int)inputParams + 0x3d) == '(')) {\n    paramValueB = (uint *)0xffff0000;\n    (*inputParams)[1] = (*inputParams)[1] & 0xfffff8ff;\n    (*inputParams)[5] = 0xfffffbff;\n    **inputParams = **inputParams & 0xfffffbff;\n    paramValueC = (uint *)0x0;\n    *(undefined *)((int)inputParams + 0x3d) = 0x20;\n    *(undefined *)((int)inputParams + 0x3e) = 0;\n    execute_code_08004ec4();\n  }\n  else if (*(char *)((int)inputParams + 0x3d) == '!') {\n    paramValueB = (uint *)0xffff0000;\n    paramValueC = (uint *)0x21;\n    *(undefined *)((int)inputParams + 0x3d) = 0x20;\n    *(undefined *)((int)inputParams + 0x3e) = 0;\n    (*inputParams)[1] = (*inputParams)[1] & 0xfffff8ff;\n    (*inputParams)[5] = 0xfffffbff;\n    **inputParams = **inputParams & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*inputParams)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "validate_input_and_execute_08002d1c",
                "param_1": "inputParams",
                "param_1[0xb]": "paramValueB",
                "param_1[0xc]": "paramValueC"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_input_08002db2",
            "code": "\nundefined4 process_input_08002db2(uint **input)\n\n{\n  char char_value;\n  uint *pointer_value;\n  \n  char_value = *(char *)((int)input + 0x3d);\n  pointer_value = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (char_value == '!')) {\n    if ((pointer_value == (uint *)0x4) || ((pointer_value == (uint *)0x8 || (pointer_value == (uint *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((char_value == '!') || ((*(char *)((int)input + 0x3e) == '@' && (char_value == '\\\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint *)0x0) {\n        if (input[0x13] == (uint *)0x1) {\n          (*input)[4] = (uint)input[0x12] & 0xff;\n          input[0x14] = (uint *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint *)0x1) {\n        (*input)[4] = (uint)input[0x12] & 0xff;\n        input[0x14] = (uint *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\\\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          pointer_value = input[9];\n          input[9] = (uint *)((int)pointer_value + 1);\n          (*input)[4] = (uint)*(byte *)pointer_value;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_value = input[9];\n      input[9] = (uint *)((int)pointer_value + 1);\n      (*input)[4] = (uint)*(byte *)pointer_value;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "char_value",
                "puVar2": "pointer_value"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_param_08002efc",
            "code": "\nundefined4 processParam_08002efc(uint **paramArray)\n\n{\n  uint *ptrVal;\n  \n  ptrVal = paramArray[0xb];\n  if (*(char *)((int)paramArray + 0x3d) == '!') {\n    if (*(short *)((int)paramArray + 0x2a) == 0) {\n      if (((ptrVal == (uint *)0x4) || (ptrVal == (uint *)0x8)) || (ptrVal == (uint *)0xffff0000)) {\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        **paramArray = **paramArray | 0x200;\n        paramArray[0xc] = (uint *)0x0;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        if (*(char *)((int)paramArray + 0x3e) == '@') {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        paramArray[0xc] = (uint *)0x11;\n        *(undefined *)((int)paramArray + 0x3e) = 0;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      ptrVal = paramArray[9];\n      paramArray[9] = (uint *)((int)ptrVal + 1);\n      (*paramArray)[4] = (uint)*(byte *)ptrVal;\n      *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_param_08002efc",
                "param_1": "paramArray",
                "puVar1": "ptrVal",
                "param_1[0xc]": "paramArray[0xc]",
                "param_1[9]": "paramArray[9]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "update_configuration_08002f9c",
            "code": "\nundefined4 updateConfiguration_08002f9c(uint **config)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)config + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)config + 0x2a) < 4) {\n      if (*(ushort *)((int)config + 0x2a) - 2 < 2) {\n        if (config[0xb] == (uint *)0x2) {\n          **config = **config | 0x400;\n        }\n        else {\n          **config = **config & 0xfffffbff;\n          **config = **config | 0x800;\n        }\n        (*config)[1] = (*config)[1] & 0xfffffbff;\n      }\n      else {\n        if (config[0xb] == (uint *)0x2) {\n          **config = **config | 0x400;\n        }\n        else {\n          **config = **config & 0xfffffbff;\n        }\n        (*config)[1] = (*config)[1] & 0xfffff8ff;\n        tempPtr = config[9];\n        config[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*config)[4];\n        *(short *)((int)config + 0x2a) = *(short *)((int)config + 0x2a) + -1;\n        *(undefined *)((int)config + 0x3d) = 0x20;\n        config[0xc] = (uint *)0x0;\n        if (*(char *)((int)config + 0x3e) == '@') {\n          *(undefined *)((int)config + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)config + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      tempPtr = config[9];\n      config[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*config)[4];\n      *(short *)((int)config + 0x2a) = *(short *)((int)config + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "update_configuration_08002f9c",
                "param_1": "config",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_data_0800306c",
            "code": "\nundefined4 processData_0800306c(uint **data)\n\n{\n  uint *value;\n  \n  value = ptr;\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (value == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    ptr2 = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "puVar1": "value",
                "param_1[0xb]": "ptr",
                "param_1[9]": "counter",
                "param_1[0xc]": "ptr2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "process_data_0800316c",
            "code": "\nvoid processData_0800316c(uint **data)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_0800316a(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_and_initialize_data_08004ef4(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&LAB_080035fc_1;\n      result = initialize_data_0800258c(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&LAB_080035fc_1;\n      result = initialize_data_0800258c(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    execute_code_08004ec4(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "process_data_0800316c",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_param_080032b4",
            "code": "\nundefined4 process_param_080032b4(uint **param_ptr)\n\n{\n  char char_var1;\n  uint *uint_ptr1;\n  uint *uint_ptr2;\n  \n  char_var1 = *(char *)((int)param_ptr + 0x3d);\n  (*param_ptr)[1] = (*param_ptr)[1] & 0xfffff8ff;\n  **param_ptr = **param_ptr | 1;\n  **param_ptr = **param_ptr & 0xfffffbff;\n  uint_ptr1 = *param_ptr;\n  if ((uint_ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param_ptr + 0x3d) == '\\\"') || (*(char *)((int)param_ptr + 0x3d) == '*')) {\n      *(short *)((int)param_ptr + 0x2a) = (short)*(undefined4 *)(*param_ptr[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param_ptr + 0x2a) = (short)*(undefined4 *)(*param_ptr[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param_ptr + 0x2a) != 0) {\n    if ((uint_ptr1[5] & 4) != 0) {\n      uint_ptr2 = param_ptr[9];\n      param_ptr[9] = (uint *)((int)uint_ptr2 + 1);\n      *(char *)uint_ptr2 = (char)uint_ptr1[4];\n      *(short *)((int)param_ptr + 0x2a) = *(short *)((int)param_ptr + 0x2a) + -1;\n    }\n    if (((*param_ptr)[5] & 0x40) != 0) {\n      uint_ptr1 = param_ptr[9];\n      param_ptr[9] = (uint *)((int)uint_ptr1 + 1);\n      *(char *)uint_ptr1 = (char)(*param_ptr)[4];\n      *(short *)((int)param_ptr + 0x2a) = *(short *)((int)param_ptr + 0x2a) + -1;\n    }\n    param_ptr[0x10] = (uint *)((uint)param_ptr[0x10] | 4);\n  }\n  if (param_ptr[0x10] == (uint *)0x0) {\n    if (((char_var1 == '(') || (char_var1 == '*')) || (char_var1 == ')')) {\n      param_ptr[0xb] = (uint *)0xffff0000;\n      param_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_ptr + 0x3d) = 0x20;\n      *(undefined *)((int)param_ptr + 0x3e) = 0;\n      execute_code_08004ec4();\n    }\n    else if ((param_ptr[0xc] == (uint *)0x22) || (char_var1 == '\\\"')) {\n      param_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_ptr + 0x3d) = 0x20;\n      *(undefined *)((int)param_ptr + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    process_data_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_param_080032b4",
                "param_1": "param_ptr",
                "cVar1": "char_var1",
                "puVar2": "uint_ptr1",
                "puVar3": "uint_ptr2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_function_080033b8",
            "code": "\nvoid process_function_080033b8(int *input_array)\n\n{\n  int value;\n  uint condition_1;\n  uint condition_2;\n  uint condition_3;\n  \n  value = *input_array;\n  condition_3 = *(uint *)(value + 0x18);\n  condition_1 = *(uint *)(value + 0x14);\n  condition_2 = *(uint *)(value + 4);\n  if ((*(char *)((int)input_array + 0x3e) == '\\x10') || (*(char *)((int)input_array + 0x3e) == '@')) {\n    if (((condition_1 & 0x10001) == 0) || ((condition_2 & 0x200) == 0)) {\n      if (((condition_1 & 0x10008) == 0) || ((condition_2 & 0x200) == 0)) {\n        if (((condition_1 & 0x10002) != 0) && ((condition_2 & 0x200) != 0)) {\n          update_flags_080028de(input_array);\n        }\n      }\n      else {\n        extract_byte_from_array_080028d2(input_array);\n      }\n    }\n    else {\n      set_flags_based_on_conditions_08002848(input_array);\n    }\n    if ((condition_3 & 0x100004) == 0) {\n      if ((((condition_1 & 0x10040) != 0) && ((condition_2 & 0x400) != 0)) && ((condition_1 & 0x10004) == 0)) {\n        update_configuration_08002f9c(input_array);\n        return;\n      }\n      if (((condition_1 & 0x10004) != 0) && ((condition_2 & 0x200) != 0)) {\n        process_data_0800306c(input_array);\n        return;\n      }\n    }\n    else {\n      if ((((condition_1 & 0x10080) != 0) && ((condition_2 & 0x400) != 0)) && ((condition_1 & 0x10004) == 0)) {\n        process_input_08002db2(input_array);\n        return;\n      }\n      if (((condition_1 & 0x10004) != 0) && ((condition_2 & 0x200) != 0)) {\n        process_param_08002efc(input_array);\n        return;\n      }\n    }\n  }\n  else {\n    if (((condition_1 & 0x10002) != 0) && ((condition_2 & 0x200) != 0)) {\n      validate_and_process_input_08002cf2();\n      return;\n    }\n    if (((condition_1 & 0x10010) != 0) && ((condition_2 & 0x200) != 0)) {\n      process_param_080032b4(input_array);\n      return;\n    }\n    if ((condition_3 & 0x100004) == 0) {\n      if ((((condition_1 & 0x10040) != 0) && ((condition_2 & 0x400) != 0)) && ((condition_1 & 0x10004) == 0)) {\n        update_array_08002ca6(input_array);\n        return;\n      }\n      if (((condition_1 & 0x10004) != 0) && ((condition_2 & 0x200) != 0)) {\n        update_param_value_08002ad8(input_array);\n      }\n    }\n    else {\n      if ((((condition_1 & 0x10080) != 0) && ((condition_2 & 0x400) != 0)) && ((condition_1 & 0x10004) == 0)) {\n        process_data_08002c54(input_array);\n        return;\n      }\n      if (((condition_1 & 0x10004) != 0) && ((condition_2 & 0x200) != 0)) {\n        update_pointer_08002ab8(input_array);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_function_080033b8",
                "param_1": "input_array",
                "iVar1": "value",
                "uVar2": "condition_1",
                "uVar3": "condition_2",
                "uVar4": "condition_3"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "process_flags_08003520",
            "code": "\nvoid process_flags_08003520(uint **ptr_array)\n\n{\n  char character;\n  uint *pointer;\n  uint flag1;\n  uint flag2;\n  \n  pointer = *ptr_array;\n  flag1 = pointer[5];\n  flag2 = pointer[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n    **ptr_array = **ptr_array | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 2);\n    (*ptr_array)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)ptr_array + 0x3d);\n    if (((*(char *)((int)ptr_array + 0x3e) == ' ') && (*(short *)((int)ptr_array + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (ptr_array[0xc] == (uint *)0x21)))))) {\n      validate_input_and_execute_08002d1c(ptr_array);\n    }\n    else {\n      ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 4);\n      if (*(char *)((int)ptr_array + 0x3e) == '\\x10') {\n        **ptr_array = **ptr_array | 0x200;\n      }\n      (*ptr_array)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 8);\n    (*ptr_array)[5] = 0xfffff7ff;\n  }\n  if (ptr_array[0x10] != (uint *)0x0) {\n    process_data_0800316c(ptr_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "process_flags_08003520",
                "param_1": "ptr_array",
                "cVar1": "character",
                "puVar2": "pointer",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "decrement_and_stop_0800365c",
            "code": "\nvoid decrementAndStop_0800365c(int inputValue)\n\n{\n  bool isNonzero;\n  int calculatedValue;\n  \n  calculatedValue = inputValue * (DAT_20000084 / 8000);\n  do {\n    isNonzero = calculatedValue != 0;\n    calculatedValue = calculatedValue + -1;\n  } while (isNonzero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "decrement_and_stop_0800365c",
                "param_1": "inputValue",
                "local_4": "calculatedValue",
                "bVar1": "isNonzero"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_and_process_flags_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 check_and_process_flags_08003688(uint *flags)\n\n{\n  int start_value;\n  int current_value;\n  undefined4 result;\n  uint tmp_value;\n  bool flag_check;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tmp_value = flags[1];\n      if (tmp_value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (tmp_value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (tmp_value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_value = get_data_value_08001cc4();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_value = get_data_value_08001cc4();\n          if (100 < (uint)(current_value - start_value)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_value = get_data_value_08001cc4();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_value = get_data_value_08001cc4();\n          if (100 < (uint)(current_value - start_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_value = get_data_value_08001cc4();\n        if (2 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_value = get_data_value_08001cc4();\n        if (2 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_value = get_data_value_08001cc4();\n        if (2 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_value = get_data_value_08001cc4();\n        if (2 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n      decrement_and_stop_0800365c(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    flag_check = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag_check) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = get_data_value_08001cc4();\n        if (100 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n    }\n    tmp_value = flags[3];\n    if (tmp_value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (tmp_value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (tmp_value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_value = get_data_value_08001cc4();\n        if (5000 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_value = get_data_value_08001cc4();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_value = get_data_value_08001cc4();\n        if (5000 < (uint)(current_value - start_value)) {\n          return 3;\n        }\n      }\n    }\n    if (flag_check) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_value = get_data_value_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        start_value = get_data_value_08001cc4();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_value = get_data_value_08001cc4();\n        } while ((uint)(current_value - start_value) < 3);\n        return 3;\n      }\n      current_value = get_data_value_08001cc4();\n    } while ((uint)(current_value - start_value) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_value = get_data_value_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_value = get_data_value_08001cc4();\n    } while ((uint)(current_value - start_value) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_and_process_flags_08003688",
                "param_1": "flags",
                "iVar1": "start_value",
                "iVar2": "current_value",
                "uVar3": "result",
                "uVar4": "tmp_value",
                "bVar5": "flag_check"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculateDelay_08003a68(void)\n\n{\n  uint delay;\n  undefined2 constant5;\n  undefined4 constant4;\n  undefined4 constant3;\n  undefined4 constant2;\n  undefined4 constant1;\n  \n  constant1 = 0x10100f0e;\n  constant2 = 0xd0c0b0a;\n  constant3 = 0x9080706;\n  constant4 = 0x5040302;\n  constant5 = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&constant4 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&constant5 - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "uStack_c": "constant1",
                "uStack_10": "constant2",
                "uStack_14": "constant3",
                "uStack_18": "constant4",
                "local_1c": "constant5",
                "uVar1": "delay"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_memory_08003ad4",
            "code": "\n\n\nundefined4 initializeMemory_08003ad4(uint *flags,uint size)\n\n{\n  int initialValue;\n  int currentValue;\n  uint delay;\n  \n  if ((_DAT_40022000 & 7) < size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    delay = flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    initialValue = getDataValue();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentValue = getDataValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentValue = getDataValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentValue = getDataValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculateDelay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validateAndUpdateMemory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_memory_08003ad4",
                "param_1": "flags",
                "param_2": "size",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "delay",
                "get_data_value_08001cc4": "getDataValue",
                "calculate_delay_08003a68": "calculateDelay",
                "validate_and_update_memory_08001c3c": "validateAndUpdateMemory"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_device_08003afa",
            "code": "\n\n\nundefined4 initialize_device_08003afa(uint *device_configuration,uint required_memory)\n\n{\n  int initial_value;\n  int current_value;\n  uint calculated_value;\n  \n  if ((*device_configuration & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | device_configuration[2];\n  }\n  if ((*device_configuration & 1) != 0) {\n    calculated_value = device_configuration[1];\n    if (calculated_value == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((calculated_value != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = calculated_value | _DAT_40021004 & 0xfffffffc;\n    initial_value = get_data_value_08001cc4();\n    if (device_configuration[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_value = get_data_value_08001cc4();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else if (device_configuration[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_value = get_data_value_08001cc4();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_value = get_data_value_08001cc4();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (required_memory < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | required_memory;\n    if (required_memory != (required_memory & 7)) {\n      return 1;\n    }\n  }\n  if ((*device_configuration & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | device_configuration[3];\n  }\n  if ((*device_configuration & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | device_configuration[4] << 3;\n  }\n  calculated_value = calculate_delay_08003a68();\n  DAT_20000084 = calculated_value >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_update_memory_08001c3c(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_device_08003afa",
                "param_1": "device_configuration",
                "param_2": "required_memory",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "uVar3": "calculated_value"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_value_08003c44",
            "code": "\nundefined4 get_data_value_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_value_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "extracted_data_shift_08003c50",
            "code": "\n\n\nuint extracted_data_shift_08003c50(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value_08003c44();\n  return data_value >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "extracted_data_shift_08003c50",
                "uVar1": "data_value"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_shifted_data_value_08003c70",
            "code": "\n\n\nuint get_shifted_data_value_08003c70(void)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value_08003c44();\n  return dataValue >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_shifted_data_value_08003c70",
                "uVar1": "dataValue"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "update_settings_08003c90",
            "code": "\n\n\nundefined4 updateSettings_08003c90(uint *settings)\n\n{\n  uint tempFlag;\n  uint tempValue;\n  int initialValue;\n  int currentValue;\n  bool shouldResetFlag;\n  \n  if ((*settings & 1) != 0) {\n    shouldResetFlag = (_DAT_4002101c & 0x10000000) == 0;\n    if (shouldResetFlag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_value_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_08001cc4();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (settings[1] & 0x300))) {\n      tempValue = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempFlag = _DAT_40021020 & 1;\n      _DAT_40021020 = tempValue;\n      if (tempFlag != 0) {\n        initialValue = get_data_value_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_value_08001cc4();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | settings[1];\n    if (shouldResetFlag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | settings[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "update_settings_08003c90",
                "param_1": "settings",
                "uVar1": "tempFlag",
                "uVar2": "tempValue",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "shouldResetFlag"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_value_08003da4",
            "code": "\n\n\nuint calculate_value_08003da4(int input)\n\n{\n  uint result;\n  undefined2 constant;\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_3;\n  undefined4 data_4;\n  \n  data_4 = 0x10100f0e;\n  data_3 = 0xd0c0b0a;\n  data_2 = 0x9080706;\n  data_1 = 0x5040302;\n  constant = 0x201;\n  if (input == 2) {\n    result = get_shifted_data_value_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&constant - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&data_1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "constant",
                "uStack_20": "data_1",
                "uStack_1c": "data_2",
                "uStack_18": "data_3",
                "uStack_14": "data_4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "initialize_state_machine_08003ea0",
            "code": "\n\n\nvoid initializeStateMachine_08003ea0(uint **stateMachine)\n\n{\n  if (((**stateMachine & 2) != 0) && (((*stateMachine)[1] & 2) != 0)) {\n    executeCallbackIfPresent();\n    (*stateMachine)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)stateMachine + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "initialize_state_machine_08003ea0",
                "param_1": "stateMachine",
                "execute_callback_if_present_08004d18": "executeCallbackIfPresent"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "set_flag_08003ed8",
            "code": "\nvoid setFlag_08003ed8(uint **pointer)\n\n{\n  uint *ptr;\n  \n  *(undefined *)((int)pointer + 0x3d) = 2;\n  ptr = *pointer;\n  if ((ptr[8] & 0x1111) == 0) {\n    if ((ptr[8] & 0x444) == 0) {\n      *ptr = *ptr & 0xfffffffe;\n    }\n  }\n  update_flags_08004b34(pointer);\n  *(undefined *)((int)pointer + 0x3d) = 0;\n  *(undefined *)(pointer + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "set_flag_08003ed8",
                "param_1": "pointer",
                "puVar1": "ptr"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_conditions_08003f18",
            "code": "\nvoid processConditions_08003f18(int *input)\n\n{\n  int currentValue;\n  \n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 2) != 0) && ((*(uint *)(currentValue + 0xc) & 2) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffffd;\n    *(undefined *)(input + 7) = 1;\n    if ((*(uint *)(*input + 0x18) & 3) == 0) {\n      executeElseConditionMet();\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 4) != 0) && ((*(uint *)(currentValue + 0xc) & 4) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffffb;\n    *(undefined *)(input + 7) = 2;\n    if ((*(uint *)(*input + 0x18) & 0x300) == 0) {\n      executeElseConditionMet(input);\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 8) != 0) && ((*(uint *)(currentValue + 0xc) & 8) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffff7;\n    *(undefined *)(input + 7) = 4;\n    if ((*(uint *)(*input + 0x1c) & 3) == 0) {\n      executeElseConditionMet(input);\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 0x10) != 0) && ((*(uint *)(currentValue + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffffef;\n    *(undefined *)(input + 7) = 8;\n    if ((*(uint *)(*input + 0x1c) & 0x300) == 0) {\n      executeElseConditionMet(input);\n      FUNC_08003f14(input);\n    }\n    else {\n      FUNC_08003f12(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 1) != 0) && ((*(uint *)(currentValue + 0xc) & 1) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffffe;\n    executeCallback(input);\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 0x80) != 0) && ((*(uint *)(currentValue + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffff7f;\n    FUNC_0800417a(input);\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 0x40) != 0) && ((*(uint *)(currentValue + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffffbf;\n    FUNC_08003f16(input);\n  }\n  currentValue = *input;\n  if (((*(uint *)(currentValue + 0x10) & 0x20) != 0) && ((*(uint *)(currentValue + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffffdf;\n    FUNC_08004178(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_conditions_08003f18",
                "param_1": "input",
                "iVar1": "currentValue",
                "execute_if_condition_met_08004df8": "executeElseConditionMet",
                "execute_callback_08004e12": "executeCallback"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bit_value_08004092",
            "code": "\nvoid updateBitValue_08004092(int address,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bit_value_08004092",
                "param_1": "address",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_and_check_values_080040b0",
            "code": "\nundefined4 updateAndCheckValues_080040b0(uint **data,undefined4 value)\n\n{\n  uint *ptr;\n  \n  update_bit_value_08004092(*data,value,0);\n  if (((*data == (uint *)0x40012c00) && ((constantValue2 & 0x1111) == 0)) &&\n     ((constantValue2 & 0x444) == 0)) {\n    updatedValue1 = updatedValue1 & 0xffff7fff;\n  }\n  ptr = *data;\n  if (((ptrValue & 0x1111) == 0) && ((ptrValue & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)data + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_and_check_values_080040b0",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "ptr",
                "uRam40012c20": "constantValue2",
                "uRam40012c44": "updatedValue1",
                "puVar1[8]": "ptrValue"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bitwise_values_08004110",
            "code": "\nvoid updateBitwiseValues_08004110(int baseAddress,uint bitOffset,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bitwise_values_08004110",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "update_and_check_values_0800412c",
            "code": "\nundefined4 updateAndCheckValues_0800412c(uint **ptrArray,undefined4 value)\n\n{\n  uint *ptr;\n  \n  update_bitwise_values_08004110(*ptrArray,value,0);\n  ptr = *ptrArray;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    ptr[0x11] = ptr[0x11] & 0xffff7fff;\n  }\n  ptr = *ptrArray;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "update_and_check_values_0800412c",
                "param_1": "ptrArray",
                "param_2": "value",
                "puVar1": "ptr",
                "puVar1[8]": "ptr[8]",
                "puVar1[0x11]": "ptr[0x11]"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "clear_bits_and_set_boundary_0800417c",
            "code": "\nvoid clearBitsAndSetBoundary_0800417c(int *pointer)\n\n{\n  *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xfffffedf;\n  *(uint *)(*pointer + 0x14) = *(uint *)(*pointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)pointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "clear_bits_and_set_boundary_0800417c",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "decode_data_08004198",
            "code": "\nundefined4 decode_data_08004198(int *data_array)\n\n{\n  short counter;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data_array + 0x39) != '!') {\n    return 2;\n  }\n  if (memory_segment == 0x1000) {\n    *(uint *)(*data_array + 4) = *(ushort *)value_ptr & 0x1ff;\n    if (condition == 0) {\n      value_ptr = value_ptr + 2;\n    }\n    else {\n      value_ptr = value_ptr + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)value_ptr;\n    value_ptr = (int)(byte_ptr + 1);\n    *(uint *)(*data_array + 4) = (uint)*byte_ptr;\n  }\n  counter = *(short *)((int)data_array + 0x26) + -1;\n  *(short *)((int)data_array + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*data_array + 0xc) = *(uint *)(*data_array + 0xc) & 0xffffff7f;\n    *(uint *)(*data_array + 0xc) = *(uint *)(*data_array + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "decode_data_08004198",
                "param_1": "data_array",
                "sVar1": "counter",
                "pbVar2": "byte_ptr",
                "param_1[2]": "memory_segment",
                "param_1[8]": "value_ptr",
                "param_1[4]": "condition"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_and_store_value_08004204",
            "code": "\nvoid calculateAndStoreValue_08004204(int *inputArray)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int shiftedValue6;\n  int shiftedValue7;\n  int shiftedValue8;\n  int shiftedValue9;\n  int shiftedValue10;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  shiftedValue10 = *inputArray;\n  if (shiftedValue10 != 0x40013800) {\n    shiftedValue1 = extracted_data_shift_08003c50();\n    shiftedValue6 = inputArray[1];\n    shiftedValue2 = extracted_data_shift_08003c50();\n    shiftedValue7 = inputArray[1];\n    shiftedValue3 = extracted_data_shift_08003c50();\n    shiftedValue8 = inputArray[1];\n    shiftedValue4 = extracted_data_shift_08003c50();\n    shiftedValue9 = inputArray[1];\n    shiftedValue5 = extracted_data_shift_08003c50();\n    *(uint *)(shiftedValue10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(shiftedValue9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(shiftedValue7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(shiftedValue8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(shiftedValue6 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue10 = get_shifted_data_value_08003c70();\n  shiftedValue5 = inputArray[1];\n  shiftedValue1 = get_shifted_data_value_08003c70();\n  shiftedValue6 = inputArray[1];\n  shiftedValue2 = get_shifted_data_value_08003c70();\n  shiftedValue7 = inputArray[1];\n  shiftedValue3 = get_shifted_data_value_08003c70();\n  shiftedValue8 = inputArray[1];\n  shiftedValue4 = get_shifted_data_value_08003c70();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedValue3 * 0x19) / (uint)(shiftedValue8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedValue4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedValue1 * 0x19) / (uint)(shiftedValue6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(shiftedValue7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(shiftedValue10 * 0x19) / (ulonglong)(uint)(shiftedValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_and_store_value_08004204",
                "param_1": "inputArray",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "shiftedValue6",
                "iVar7": "shiftedValue7",
                "iVar8": "shiftedValue8",
                "iVar9": "shiftedValue9",
                "iVar10": "shiftedValue10"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_conditions_080043b4",
            "code": "\nundefined4 checkConditions_080043b4(uint **data,uint value,uint condition,int threshold,uint limit)\n\n{\n  int dataValue;\n  \n  do {\n    if (((value & ~**data) == 0) != condition) {\n      return 0;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (dataValue = get_data_value_08001cc4(), (uint)(dataValue - threshold) <= limit))));\n  (*data)[3] = (*data)[3] & 0xfffffe5f;\n  (*data)[5] = (*data)[5] & 0xfffffffe;\n  *(undefined *)((int)data + 0x39) = 0x20;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  *(undefined *)(data + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_conditions_080043b4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "condition",
                "param_4": "threshold",
                "param_5": "limit",
                "iVar1": "dataValue"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "validate_and_configure_0800441a",
            "code": "\nundefined4 validate_and_configure_0800441a(int *configuration)\n\n{\n  if (configuration != (int *)0x0) {\n    if (*(char *)((int)configuration + 0x39) == '\\0') {\n      *(undefined *)(configuration + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)configuration + 0x39) = 0x24;\n    *(uint *)(*configuration + 0xc) = *(uint *)(*configuration + 0xc) & 0xffffdfff;\n    calculate_and_store_value(configuration);\n    *(uint *)(*configuration + 0x10) = *(uint *)(*configuration + 0x10) & 0xffffb7ff;\n    *(uint *)(*configuration + 0x14) = *(uint *)(*configuration + 0x14) & 0xffffffd5;\n    *(uint *)(*configuration + 0xc) = *(uint *)(*configuration + 0xc) | 0x2000;\n    config_flag = 0;\n    *(undefined *)((int)configuration + 0x39) = 0x20;\n    *(undefined *)((int)configuration + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "validate_and_configure_0800441a",
                "param_1": "configuration",
                "calculate_and_store_value_08004204": "calculate_and_store_value",
                "param_1[0xf]": "config_flag"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *dataArray,ushort *byteArray,int arrayLength,undefined4 param)\n\n{\n  int checkResult;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataArray + 0x39) == ' ') {\n    if (byteArray == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (arrayLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataArray + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataArray + 0xe) = 1;\n      dataArray[0xf] = 0;\n      *(undefined *)((int)dataArray + 0x39) = 0x21;\n      returnValue = get_data_value_08001cc4();\n      *(short *)(dataArray + 9) = (short)arrayLength;\n      *(short *)((int)dataArray + 0x26) = (short)arrayLength;\n      while (*(short *)((int)dataArray + 0x26) != 0) {\n        *(short *)((int)dataArray + 0x26) = *(short *)((int)dataArray + 0x26) + -1;\n        if (dataArray[2] == 0x1000) {\n          checkResult = check_conditions_080043b4(dataArray,0x80,0,returnValue,param);\n          if (checkResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataArray + 4) = *byteArray & 0x1ff;\n          if (dataArray[4] == 0) {\n            byteArray = byteArray + 1;\n          }\n          else {\n            byteArray = (ushort *)((int)byteArray + 1);\n          }\n        }\n        else {\n          checkResult = check_conditions_080043b4(dataArray,0x80,0,returnValue,param);\n          if (checkResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataArray + 4) = (uint)*(byte *)byteArray;\n          byteArray = (ushort *)((int)byteArray + 1);\n        }\n      }\n      checkResult = check_conditions_080043b4(dataArray,0x40,0,returnValue,param);\n      if (checkResult == 0) {\n        *(undefined *)((int)dataArray + 0x39) = 0x20;\n        *(undefined *)(dataArray + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "dataArray",
                "param_2": "byteArray",
                "param_3": "arrayLength",
                "param_4": "param",
                "iVar1": "checkResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "validate_input_0800455a",
            "code": "\nundefined4 validate_input_0800455a(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short *)(input_array + 9) = (short)value2;\n    *(short *)((int)input_array + 0x26) = (short)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "validate_and_update_data_080045a2",
            "code": "\nundefined4 validate_and_update_data_080045a2(int *data,int value_1,int value_2)\n\n{\n  if (*(char *)((int)data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data[10] = value_1;\n    *(short *)(data + 0xb) = (short)value_2;\n    *(short *)((int)data + 0x2e) = (short)value_2;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x3a) = 0x22;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x100;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) | 1;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "validate_and_update_data_080045a2",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "initialize_flags_080045fe",
            "code": "\nundefined4 initializeFlags_080045fe(int *flags)\n\n{\n  *(uint *)(*flags + 0xc) = *(uint *)(*flags + 0xc) & 0xffffffbf;\n  *(undefined *)((int)flags + 0x39) = 0x20;\n  execute_validation_08005604();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "initialize_flags_080045fe",
                "param_1": "flags"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_binary_data_08004618",
            "code": "\nundefined4 processBinaryData_08004618(int *binaryData)\n\n{\n  byte *bytePointer;\n  short remainingIterations;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)binaryData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (binaryData[2] == 0x1000) {\n    if (binaryData[4] == 0) {\n      *(ushort *)binaryData[10] = (ushort)((uint)(*(int *)(*binaryData + 4) << 0x17) >> 0x17);\n      binaryData[10] = binaryData[10] + 2;\n    }\n    else {\n      *(ushort *)binaryData[10] = (ushort)*(undefined4 *)(*binaryData + 4) & 0xff;\n      binaryData[10] = binaryData[10] + 1;\n    }\n  }\n  else if (binaryData[4] == 0) {\n    undefinedPointer = (undefined *)binaryData[10];\n    binaryData[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*binaryData + 4);\n  }\n  else {\n    bytePointer = (byte *)binaryData[10];\n    binaryData[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*binaryData + 4) & 0x7f;\n  }\n  remainingIterations = *(short *)((int)binaryData + 0x2e) + -1;\n  *(short *)((int)binaryData + 0x2e) = remainingIterations;\n  if (remainingIterations != 0) {\n    return 0;\n  }\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xffffffdf;\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xfffffeff;\n  *(uint *)(*binaryData + 0x14) = *(uint *)(*binaryData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)binaryData + 0x3a) = 0x20;\n  execute_function_080055e0();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_binary_data_08004618",
                "param_1": "binaryData",
                "pbVar1": "bytePointer",
                "sVar2": "remainingIterations",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_data_080046b8",
            "code": "\nvoid process_data_080046b8(uint **data_ptr)\n\n{\n  int returnValue;\n  uint data_ptr_3;\n  uint *ptr;\n  uint flag;\n  uint data;\n  \n  ptr = *data_ptr;\n  data = *ptr;\n  data_ptr_3 = ptr[3];\n  if ((((data & 0xf) == 0) && ((data & 0x20) != 0)) && ((data_ptr_3 & 0x20) != 0)) {\n    process_binary_data(data_ptr);\n    return;\n  }\n  if (((data & 0xf) == 0) || ((flag = ptr[5] & 1, flag == 0 && ((data_ptr_3 & 0x120) == 0)))) {\n    if (((data & 0x80) != 0) && ((data_ptr_3 & 0x80) != 0)) {\n      decode_data(data_ptr);\n      return;\n    }\n    if (((data & 0x40) != 0) && ((data_ptr_3 & 0x40) != 0)) {\n      initialize_flags(data_ptr);\n    }\n  }\n  else {\n    if (((data & 1) != 0) && ((data_ptr_3 & 0x100) != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 1);\n    }\n    if (((data & 4) != 0) && (flag != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 2);\n    }\n    if (((data & 2) != 0) && (flag != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 4);\n    }\n    if (((data & 8) != 0) && (flag != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 8);\n    }\n    if (data_ptr[0xf] != (uint *)0x0) {\n      if (((data & 0x20) != 0) && ((data_ptr_3 & 0x20) != 0)) {\n        process_binary_data(data_ptr);\n      }\n      if ((((uint)data_ptr[0xf] & 8) == 0) && (((*data_ptr)[5] & 0x40) == 0)) {\n        FUNC_08005650(data_ptr);\n        data_ptr[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_bits_and_set_boundary(data_ptr);\n      ptr = *data_ptr;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08005650(data_ptr);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data_ptr[0xd] == (uint *)0x0) {\n        FUNC_08005650(data_ptr);\n        return;\n      }\n      data_ptr[0xd][0xd] = (uint)&label_080047d8;\n      returnValue = initialize_data(data_ptr[0xd]);\n      if (returnValue != 0) {\n        (*(code *)data_ptr[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data_ptr",
                "iVar1": "returnValue",
                "uVar2": "data_ptr_3",
                "puVar3": "ptr",
                "uVar4": "flag",
                "uVar5": "data",
                "process_binary_data_08004618": "process_binary_data",
                "decode_data_08004198": "decode_data",
                "initialize_flags_080045fe": "initialize_flags",
                "clear_bits_and_set_boundary_0800417c": "clear_bits_and_set_boundary",
                "LAB_080047d8_1": "label_080047d8",
                "initialize_data_0800258c": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "address"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "bitwise_shift_and_mask_080047f4",
            "code": "\nuint bitwise_shift_and_mask_080047f4(uint input_value,int array_address)\n\n{\n  return *(uint *)(array_address + ((input_value << 0x18) >> 0x1c) * 4) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "bitwise_shift_and_mask_080047f4",
                "param_1": "input_value",
                "param_2": "array_address"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "update_bit_in_array_0800480a",
            "code": "\nvoid updateBitInArray_0800480a(uint bitPosition,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "update_bit_in_array_0800480a",
                "param_1": "bitPosition",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "clear_bit_in_array_08004828",
            "code": "\nvoid clearBitInArray_08004828(uint inputIndex,int arrayPointer)\n\n{\n  uint shiftAmount;\n  \n  shiftAmount = (inputIndex << 0x18) >> 0x1c;\n  *(uint *)(arrayPointer + shiftAmount * 4) = *(uint *)(arrayPointer + shiftAmount * 4) & ~(1 << (inputIndex & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "clear_bit_in_array_08004828",
                "param_1": "inputIndex",
                "param_2": "arrayPointer",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 getMemoryAddress_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_memory_address_08004884",
            "code": "\n\n\nundefined4 setMemoryAddress_08004884(undefined4 type)\n\n{\n  undefined4 newAddress;\n  \n  switch(type) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    newAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    newAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    newAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    newAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    newAddress = 0x40011800;\n    break;\n  default:\n    newAddress = 0;\n  }\n  return newAddress;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_memory_address_08004884",
                "param_1": "type",
                "uVar1": "newAddress"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "calculate_index_0800492c",
            "code": "\nuint calculateIndex_0800492c(undefined4 value,undefined4 unknown,undefined4 index,undefined4 length)\n\n{\n  int valueIndex;\n  uint shiftedIndex;\n  \n  valueIndex = get_value_index_08004cce(value,&DAT_08007400,index,length,length);\n  shiftedIndex = (uint)(valueIndex << 0xc) >> 0x1b;\n  if (0x10 < shiftedIndex - 1) {\n    shiftedIndex = 0;\n  }\n  return shiftedIndex;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "calculate_index_0800492c",
                "param_1": "value",
                "param_2": "unknown",
                "param_3": "index",
                "param_4": "length",
                "iVar1": "valueIndex",
                "uVar2": "shiftedIndex"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "check_value_08004948",
            "code": "\nundefined4 check_value_08004948(undefined4 value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint shifted_value;\n  \n  index = get_value_index_08004cce(value,&DAT_080074b4,param_3,param_4,param_4);\n  shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "check_value_08004948",
                "param_1": "value",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "update_register_values_08004974",
            "code": "\n\n\nvoid updateRegisterValues_08004974(int *memoryAddress,undefined4 value)\n\n{\n  undefined4 result;\n  uint flag;\n  int memoryValue;\n  uint bitMask;\n  undefined4 count;\n  undefined4 offset;\n  \n  memoryValue = *memoryAddress;\n  if (memoryValue == 0x40012400) {\n    flag = _DAT_40021018 | 0x200;\n    memoryValue = 0x200;\n    _DAT_40021018 = flag;\n  }\n  else {\n    flag = 0x40012800;\n    if (memoryValue == 0x40012800) {\n      flag = _DAT_40021018 | 0x400;\n      memoryValue = 0x400;\n      _DAT_40021018 = flag;\n    }\n  }\n  result = set_memory_address_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,value,flag,memoryValue);\n  bitMask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  count = 3;\n  offset = 0;\n  update_register_values_08002624(result,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "update_register_values_08004974",
                "param_1": "memoryAddress",
                "param_2": "value",
                "uVar1": "result",
                "uVar2": "flag",
                "iVar3": "memoryValue",
                "local_18": "bitMask",
                "local_14": "count",
                "local_10": "offset"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_control_registers_080049f0",
            "code": "\n\n\nvoid updateControlRegisters_080049f0(int *controlRegister)\n\n{\n  if (*controlRegister != 0x40012400) {\n    if (*controlRegister == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "controlRegister"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "process_parameter_08004a4c",
            "code": "\nundefined2 processParameter_08004a4c(undefined4 parameter)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint index;\n  undefined4 flag1;\n  undefined4 flag2;\n  int status;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 counter;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 address;\n  undefined4 value7;\n  \n  fill_memory_080061e0(&status,0,0x30);\n  index = 0;\n  flag1 = 0;\n  flag2 = 0;\n  result = 0;\n  status = check_parameter_08004c78(parameter,&DAT_08007400);\n  if (status == 0) {\n    result = 0;\n  }\n  else {\n    value1 = 0;\n    value2 = 0;\n    value3 = 0;\n    value5 = 0;\n    address = 0xe0000;\n    value7 = 0;\n    counter = 1;\n    value6 = 0;\n    DAT_20000080 = (undefined)parameter;\n    iVar1 = update_register_status_0800213c(&status);\n    if (iVar1 == 0) {\n      index = calculate_index_0800492c(parameter);\n      if (index < 0x12) {\n        flag1 = 1;\n        flag2 = 2;\n        iVar1 = update_configuration_08001e48(&status,&index);\n        if (iVar1 == 0) {\n          iVar1 = process_data_08002384(&status);\n          if (iVar1 == 0) {\n            iVar1 = update_data_08002004(&status);\n            if (iVar1 == 0) {\n              iVar1 = calculate_and_update_status_08001cd0(&status,10);\n              if (iVar1 == 0) {\n                uVar2 = get_value_from_address_08001f80(&status);\n                if ((uVar2 & 0x200) != 0) {\n                  result = get_offset_value_08001e40(&status);\n                }\n                iVar1 = check_and_update_data_08002348(&status);\n                if (iVar1 == 0) {\n                  iVar1 = update_data_0800224c(&status);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "process_parameter_08004a4c",
                "param_1": "parameter",
                "local_46": "result",
                "local_44": "index",
                "local_40": "flag1",
                "local_3c": "flag2",
                "local_38": "status",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "value3",
                "local_28": "counter",
                "local_24": "value5",
                "local_20": "value6",
                "local_1c": "address",
                "local_10": "value7"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "update_flags_08004b34",
            "code": "\nvoid update_flags_08004b34(void)\n\n{\n  update_flags_08004b34_based_on_parameter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "update_flags_08004b34",
                "update_flags_based_on_param_08004d90": "update_flags_based_on_parameter"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "process_parameter_08004b3c",
            "code": "\nvoid processParameter_08004b3c(undefined4 inputParameter)\n\n{\n  int valueCheckResult;\n  uint valueIndex;\n  int parameterValues [17];\n  \n  parameterValues[0] = check_parameter_08004c78(inputParameter,&DAT_080074b4);\n  if ((parameterValues[0] != 0) &&\n     ((((valueCheckResult = check_value_08004948(inputParameter), valueCheckResult == 0 || (valueCheckResult == 4)) || (valueCheckResult == 8)) ||\n      ((valueCheckResult == 0xc || (valueCheckResult == 0x18)))))) {\n    valueIndex = get_value_index_08004cce(inputParameter,&DAT_080074b4);\n    if ((valueIndex & 0x100000) == 0) {\n      update_and_check_values_080040b0(parameterValues,valueCheckResult);\n    }\n    else {\n      update_and_check_values_0800412c(parameterValues,valueCheckResult);\n    }\n    set_flag_08003ed8(parameterValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "process_parameter_08004b3c",
                "param_1": "inputParameter",
                "iVar1": "valueCheckResult",
                "uVar2": "valueIndex",
                "local_50": "parameterValues"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_data_values_08004b94",
            "code": "\nvoid initialize_data_values_08004b94(void)\n\n{\n  fetch_data_value();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_data_values_08004b94",
                "get_data_value_08001cc4": "fetch_data_value"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "run_application_08004b9e",
            "code": "\nvoid run_application_08004b9e(void)\n\n{\n  perform_addition_and_update();\n  launch_executable();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "run_application_08004b9e",
                "addition_and_update_08001cac": "perform_addition_and_update",
                "execute_application_08002582": "launch_executable"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "configure_memory_08004bb0",
            "code": "\n\n\nvoid configureMemory_08004bb0(uint memoryAddress,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 memorySetResult;\n  uint bitMask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  memorySetResult = set_memory_address_08004884((memoryAddress << 0x18) >> 0x1c);\n  bitMask = 1 << (memoryAddress & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((memoryAddress - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((memoryAddress == 0xf) || (memoryAddress == 0x13)) || (memoryAddress == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_register_values_08002624(memorySetResult,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "configure_memory_08004bb0",
                "param_1": "memoryAddress",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "memorySetResult",
                "local_20": "bitMask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_param_value_if_non_zero_08004c30",
            "code": "\nvoid setParamValueIfNonZero_08004c30(undefined4 param1,undefined2 param2,int param3,undefined4 param4)\n\n{\n  if (param3 == 0) {\n    set_param_value_0800281e(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_0800281e(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_param_value_if_non_zero_08004c30",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "check_and_verify_parameters_08004c48",
            "code": "\nvoid check_and_verify_parameters_08004c48(undefined4 input_param_1,undefined2 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  check_bit_08002810(input_param_1,input_param_2,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "check_and_verify_parameters_08004c48",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_device_and_memory_08004c52",
            "code": "\nvoid initialize_device_and_memory_08004c52(void)\n\n{\n  initialize_device();\n  initialize_and_update_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_device_and_memory_08004c52",
                "initialize_device_08001c88": "initialize_device",
                "initialize_and_update_memory_08001b48": "initialize_and_update_memory"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_index_08004c5e",
            "code": "\nundefined4 find_value_index_08004c5e(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_index_08004c5e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "check_parameter_08004c78",
            "code": "\nundefined4 check_parameter_08004c78(int input_parameter)\n\n{\n  undefined4 value_index;\n  \n  if (input_parameter != -1) {\n    value_index = find_value_index_08004c5e();\n    return value_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "check_parameter_08004c78",
                "param_1": "input_parameter",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_in_array_08004c8a",
            "code": "\nint find_value_in_array_08004c8a(int value_to_find,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == value_to_find) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_in_array_08004c8a",
                "param_1": "value_to_find",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "check_and_find_value_08004ca2",
            "code": "\nundefined4 check_and_find_value_08004ca2(int value_to_check)\n\n{\n  undefined4 found_value;\n  \n  if (value_to_check != 0) {\n    found_value = find_value_in_array_08004c8a();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "check_and_find_value_08004ca2",
                "param_1": "value_to_check",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_index_08004cb2",
            "code": "\nundefined4 find_value_index_08004cb2(int value_to_find,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value_to_find) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_index_08004cb2",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "get_value_index_08004cce",
            "code": "\nundefined4 getValueIndex_08004cce(int inputValue)\n\n{\n  undefined4 valueIndex;\n  \n  if (inputValue == -1) {\n    return 0xffffffff;\n  }\n  valueIndex = find_value_index_08004cb2();\n  return valueIndex;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "get_value_index_08004cce",
                "param_1": "inputValue",
                "uVar1": "valueIndex"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_value_in_list_08004ce2",
            "code": "\nundefined4 find_value_in_list_08004ce2(int target_value,char *list)\n\n{\n  if (target_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*list == -1) {\n      return 0;\n    }\n    if (target_value == *list) break;\n    list = list + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_value_in_list_08004ce2",
                "param_1": "target_value",
                "param_2": "list"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "find_nonzero_param_08004d06",
            "code": "\nint find_nonzero_param_08004d06(int input1,int input2)\n\n{\n  if (input1 != input2) {\n    if (input1 == 0) {\n      return input2;\n    }\n    if (input2 == 0) {\n      return input1;\n    }\n    input1 = 0;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "find_nonzero_param_08004d06",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_if_present_08004d18",
            "code": "\nvoid execute_callback_if_present_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_if_present_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "endless_loop_08004d40",
            "code": "\nvoid endlessLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "endless_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_system_08004d44",
            "code": "\n\n\nvoid initializeSystem_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_system_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_flags_based_on_param_08004d90",
            "code": "\n\n\nvoid updateFlagsBasedOnParam_08004d90(int *param)\n\n{\n  if (*param == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*param == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*param == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*param == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_flags_based_on_param_08004d90",
                "param_1": "param"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtract_four_08004df4(int original_value)\n\n{\n  return original_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "original_value"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_if_condition_met_08004df8",
            "code": "\nvoid execute_if_condition_met_08004df8(int parameter)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if ((*(function **)(result + 0x4c) != (function *)0x0) && (*(char *)(parameter + 0x1c) == '\\x01')) {\n    (**(function **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_if_condition_met_08004df8",
                "param_1": "parameter",
                "iVar1": "result",
                "subtract_four_08004df4": "get_function_pointer",
                "code": "function"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_callback_08004e12",
            "code": "\nvoid executeCallback_08004e12(void)\n\n{\n  int result;\n  \n  result = getCallbackAddress();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_callback_08004e12",
                "iVar1": "result",
                "subtract_four_08004df4": "getCallbackAddress"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "check_and_process_conditions_08004e20",
            "code": "\nvoid check_and_process_conditions_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    process_conditions_08003f18();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "check_and_process_conditions_08004e20"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtract_four_08004e70(int original_value)\n\n{\n  return original_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "original_value"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "validate_input_08004e74",
            "code": "\nvoid validateInput_08004e74(int input,int flag,int compareValue,undefined4 param)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (compareValue == *(int *)(input + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validateInput_08004e74Helper(input,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    checkParamsAndInit(input,result + 0x68,0x20,8,param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "validate_input_08004e74",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "compareValue",
                "param_4": "param",
                "iVar1": "result",
                "subtract_four_08004e70": "subtractFour",
                "validate_input_08002af8": "validateInputHelper",
                "check_params_and_init_08002b84": "checkParamsAndInit"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "execute_code_08004ec4",
            "code": "\nvoid executeCode_08004ec4(undefined4 input)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initializeData(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "execute_code_08004ec4",
                "param_1": "input",
                "iVar1": "result",
                "subtract_four_08004e70": "subtractFour",
                "initialize_data_08002c10": "initializeData"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "check_and_initialize_data_08004ef4",
            "code": "\nvoid checkAndInitializeData_08004ef4(undefined4 inputParam)\n\n{\n  int result;\n  \n  result = getOffset();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initializeData(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "check_and_initialize_data_08004ef4",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_08004e70": "getOffset",
                "initialize_data_08002c10": "initializeData"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "initialize_uart_pins_08004f4c",
            "code": "\n\n\nvoid initialize_uart_pins_08004f4c(int *uart_pins)\n\n{\n  int uart_pin1_result;\n  int uart_pin2_result;\n  undefined4 memory_address;\n  uint value_index;\n  uint uart_pin1_bit;\n  uint uart_pin1_config;\n  uint uart_pin1_shift;\n  undefined4 local_var;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_pin1_result = check_parameter_08004c78((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n    uart_pin2_result = check_parameter_08004c78((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n    if ((uart_pin2_result == 0) || (uart_pin1_result == 0)) {\n      initialize_and_process_data_080068f0(\"ERROR: at least one UART pin has no peripheral\\n\",uart_pin2_result);\n    }\n    else {\n      uart_pin1_result = find_nonzero_param_08004d06(uart_pin1_result);\n      *uart_pins = uart_pin1_result;\n      if (uart_pin1_result == 0) {\n        initialize_and_process_data_080068f0(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_pin1_result == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (uart_pin1_result == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (uart_pin1_result == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        memory_address = set_memory_address_08004884((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        value_index = get_value_index_08004cce((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n        uart_pin1_bit = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        uart_pin1_config = (value_index >> 3 & 1) << 4 | value_index & 7;\n        uart_pin1_shift = (value_index << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((value_index << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        local_var = 3;\n        update_register_values_08002624(memory_address,&uart_pin1_bit);\n        memory_address = set_memory_address_08004884((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        value_index = get_value_index_08004cce((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n        uart_pin1_bit = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        uart_pin1_config = (value_index >> 3 & 1) << 4 | value_index & 7;\n        uart_pin1_shift = (value_index << 0x1a) >> 0x1e;\n        update_register_values_08002624(memory_address,&uart_pin1_bit);\n        (&DAT_2000032c)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        validate_and_configure_0800441a(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "initialize_uart_pins_08004f4c",
                "param_1": "uart_pins",
                "iVar1": "uart_pin1_result",
                "iVar2": "uart_pin2_result",
                "uVar3": "memory_address",
                "uVar4": "value_index",
                "local_20": "uart_pin1_bit",
                "local_1c": "uart_pin1_config",
                "local_18": "uart_pin1_shift",
                "local_14": "local_var"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initialize_uart_08005384(void)\n\n{\n  int check_result;\n  undefined4 check_value;\n  \n  check_result = check_parameter_08004c78(2,&DAT_0800764c);\n  if (check_result != 0) {\n    check_value = check_parameter_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = check_and_find_value_08004ca2(check_value,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    pin_configuration(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "check_result",
                "uVar2": "check_value",
                "initialize_uart_pins_08004f4c": "pin_configuration"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_validate_data_080053d4",
            "code": "\nuint process_and_validate_data_080053d4(undefined4 input_value,uint flags)\n\n{\n  int data_value;\n  int param_check_value;\n  uint index;\n  \n  data_value = get_data_value_08001cc4();\n  param_check_value = check_parameter_08004c78(2,&DAT_0800764c);\n  if (param_check_value == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (param_check_value = check_parameter_08004c78(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != param_check_value))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (initialize_uart_08005384(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    param_check_value = process_data_08004478((&DAT_2000032c)[index],input_value,flags & 0xffff,1000);\n    if (param_check_value == 0) {\n      return flags;\n    }\n    param_check_value = get_data_value_08001cc4();\n  } while ((uint)(param_check_value - data_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_validate_data_080053d4",
                "param_1": "input_value",
                "param_2": "flags",
                "iVar1": "data_value",
                "iVar2": "param_check_value",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "check_combined_bytes_0800548c",
            "code": "\nbool checkCombinedBytes_0800548c(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "check_combined_bytes_0800548c",
                "param_1": "inputValue",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "check_flag_080054b0",
            "code": "\nbool check_flag_080054b0(int flag_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_2000032c)[*(byte *)(flag_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "check_flag_080054b0",
                "param_1": "flag_value",
                "uVar1": "combined_bytes",
                "combine_bytes_080047e8": "combine_bytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "copy_and_validate_data_080054d4",
            "code": "\nundefined4 copyAndValidateData_080054d4(int dataPtr,undefined *outputPtr,undefined4 size,undefined4 otherData)\n\n{\n  int result;\n  \n  if (dataPtr == 0) {\n    return 0xffffffff;\n  }\n  result = checkCombinedBytes();\n  if (result == 0) {\n    *outputPtr = *(undefined *)(dataPtr + 0x45);\n    validateAndUpdateData((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],dataPtr + 0x45,1,&DAT_2000032c,otherData);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "copy_and_validate_data_080054d4",
                "param_1": "dataPtr",
                "param_2": "outputPtr",
                "param_3": "size",
                "param_4": "otherData",
                "iVar1": "result",
                "check_combined_bytes_0800548c": "checkCombinedBytes",
                "validate_and_update_data_080045a2": "validateAndUpdateData"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "update_data_08005510",
            "code": "\nvoid updateData_08005510(int inputData,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  uint index;\n  \n  if (inputData != 0) {\n    result = check_combined_bytes_0800548c();\n    if (result == 0) {\n      index = (uint)*(byte *)(inputData + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = value1;\n      *(int *)(&DAT_200002f0 + index * 4) = inputData;\n      updateMemory((int)*(char *)(inputData + 0x5a),0,1,index,value3);\n      setBitValue((int)*(char *)(inputData + 0x5a));\n      validateAndUpdateData((&DAT_2000032c)[*(byte *)(inputData + 0x44)],inputData + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "param_1": "inputData",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "uVar2": "index",
                "update_memory_08002494": "updateMemory",
                "set_bit_value_080024f8": "setBitValue",
                "validate_and_update_data_080045a2": "validateAndUpdateData"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_memory_and_validate_08005568",
            "code": "\nvoid updateMemoryAndValidate_08005568(int dataPtr,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPtr != 0) {\n    byteValue = *(byte *)(dataPtr + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = dataPtr;\n    updateMemory((int)*(char *)(dataPtr + 0x5a),0,2);\n    setBitValue((int)*(char *)(dataPtr + 0x5a));\n    validateInput((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 100) + (uint)*(ushort *)(dataPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_memory_and_validate_08005568",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "update_memory_08002494": "updateMemory",
                "set_bit_value_080024f8": "setBitValue",
                "validate_input_0800455a": "validateInput"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_index_080055bc",
            "code": "\nuint find_index_080055bc(int num)\n\n{\n  uint index;\n  \n  if (num == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (num == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_index_080055bc",
                "param_1": "num",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_function_080055e0",
            "code": "\nvoid execute_function_080055e0(void)\n\n{\n  uint index;\n  \n  index = find_index();\n  if (index < 5) {\n    (**(code **)(&DAT_200002dc + index * 4))(*(undefined4 *)(&DAT_200002f0 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_function_080055e0",
                "uVar1": "index",
                "find_index_080055bc": "find_index"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "execute_validation_08005604",
            "code": "\nvoid executeValidation_08005604(void)\n\n{\n  uint index;\n  int returnValue;\n  int data;\n  \n  index = findIndex();\n  data = *(int *)(&DAT_20000318 + index * 4);\n  if ((index < 5) && (returnValue = (**(functionPointer **)(&DAT_20000304 + index * 4))(data), returnValue != -1)) {\n    validateInput((&DAT_2000032c)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "execute_validation_08005604",
                "uVar1": "index",
                "iVar2": "returnValue",
                "iVar3": "data",
                "find_index_080055bc": "findIndex",
                "code": "functionPointer",
                "validate_input_0800455a": "validateInput"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocateMemory_080056d8(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocatedMemory = DAT_20000340;\n  if (DAT_20000340 + size <= stackEnd) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocatedMemory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackEnd"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "get_return_value_08005714",
            "code": "\nundefined4 getReturnValue_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "get_return_value_08005714"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "initialize_memory_0800571a",
            "code": "\nundefined4 initializeMemory_0800571a(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "initialize_08005724",
            "code": "\nundefined4 initialize_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "initialize_08005724"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_program_08005728",
            "code": "\nvoid initializeProgram_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_program_08005728",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_program_0800572c",
            "code": "\nundefined4 initializeProgram_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_program_0800572c"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "process_and_validate_data_08005730",
            "code": "\nvoid process_and_validate_data_08005730(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_and_validate_data_08005730_080053d4(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "process_and_validate_data_08005730",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "set_default_value_08005740",
            "code": "\nundefined4 set_default_value_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "set_default_value_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "check_return_value_08005750",
            "code": "\nundefined4 check_return_value_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "check_return_value_08005750"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "process_value_08005754",
            "code": "\nuint process_value_08005754(uint input_value)\n\n{\n  bool is_less_than_0x3c;\n  char result_char;\n  uint processed_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_0x3c = true;\n    }\n    else {\n      is_less_than_0x3c = false;\n    }\n  }\n  else {\n    is_less_than_0x3c = input_value < 0x3c;\n  }\n  if (is_less_than_0x3c) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    result_char = (&DAT_080076f0)[input_value];\n  }\n  else {\n    result_char = -1;\n  }\n  if (result_char == -1) {\n    processed_value = 0;\n  }\n  else {\n    processed_value = process_parameter_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return processed_value >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return processed_value << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return processed_value;\n}\n\n",
            "renaming": {
                "FUN_08005754": "process_value_08005754",
                "param_1": "input_value",
                "bVar1": "is_less_than_0x3c",
                "cVar2": "result_char",
                "uVar3": "processed_value"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "process_memory_configuration_080057b4",
            "code": "\nvoid processMemoryConfiguration_080057b4(uint inputIndex,undefined4 configurationType,undefined4 parameter,undefined *memoryData)\n\n{\n  int bitwiseResult;\n  undefined *bitwisePointer;\n  int value;\n  \n  if (inputIndex < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[inputIndex];\n    bitwisePointer = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    bitwisePointer = memoryData;\n  }\n  if (value != -1) {\n    bitwiseResult = applyBitwiseShiftAndMask(value,&DAT_20000344,parameter,bitwisePointer,memoryData);\n    if (bitwiseResult != 0) {\n      bitwiseResult = findValueInList(value,&DAT_080074b4);\n      if (bitwiseResult != 0) {\n        processParameter(value);\n      }\n      clearBitInArray(value,&DAT_20000344);\n    }\n    switch(configurationType) {\n    case 0:\n      configureMemory(value,0);\n      break;\n    case 1:\n      configureMemory(value,1,0);\n      break;\n    case 2:\n      configureMemory(value,0,1);\n      break;\n    case 3:\n      configureMemory(value,0,2);\n    }\n    updateBitInArray(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "process_memory_configuration_080057b4",
                "param_1": "inputIndex",
                "param_2": "configurationType",
                "param_3": "parameter",
                "param_4": "memoryData",
                "iVar1": "bitwiseResult",
                "puVar2": "bitwisePointer",
                "iVar3": "value",
                "configure_memory_08004bb0": "configureMemory",
                "bitwise_shift_and_mask_080047f4": "applyBitwiseShiftAndMask",
                "find_value_in_list_08004ce2": "findValueInList",
                "process_parameter_08004b3c": "processParameter",
                "clear_bit_in_array_08004828": "clearBitInArray",
                "update_bit_in_array_0800480a": "updateBitInArray"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "process_data_08005848",
            "code": "\nvoid processData_08005848(uint inputIndex,undefined4 outputValue,undefined4 inputValue,undefined *dataBuffer)\n\n{\n  int result;\n  undefined4 memoryAddress;\n  undefined *bufferPtr;\n  uint charValue;\n  \n  if (inputIndex < 0x3c) {\n    charValue = (uint)(char)(&DAT_080076f0)[inputIndex];\n    bufferPtr = &DAT_080076f0;\n  }\n  else {\n    charValue = 0xffffffff;\n    bufferPtr = dataBuffer;\n  }\n  if ((charValue != 0xffffffff) &&\n     (result = bitwise_shift_and_mask_080047f4(charValue,&DAT_20000358,inputValue,bufferPtr,dataBuffer), result != 0)) {\n    memoryAddress = get_memory_address_08004848((charValue << 0x18) >> 0x1c);\n    set_param_value_if_non_zero_08004c30(memoryAddress,1 << (charValue & 0xf) & 0xffff,outputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "param_1": "inputIndex",
                "param_2": "outputValue",
                "param_3": "inputValue",
                "param_4": "dataBuffer",
                "iVar1": "result",
                "uVar2": "memoryAddress",
                "puVar3": "bufferPtr",
                "uVar4": "charValue"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_parameter_value_08005890",
            "code": "\nchar check_parameter_value_08005890(uint input_value)\n\n{\n  char result;\n  int shifted_value;\n  undefined4 memory_address;\n  uint lookup_value;\n  \n  if (input_value < 0x3c) {\n    lookup_value = (uint)(char)(&DAT_080076f0)[input_value];\n  }\n  else {\n    lookup_value = 0xffffffff;\n  }\n  if (lookup_value == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    shifted_value = bitwise_shift_and_mask_080047f4(lookup_value,&DAT_20000358);\n    if (shifted_value == 0) {\n      result = '\\0';\n    }\n    else {\n      memory_address = get_memory_address_08004848((lookup_value << 0x18) >> 0x1c);\n      result = check_and_verify_parameters_08004c48(memory_address,1 << (lookup_value & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_parameter_value_08005890",
                "param_1": "input_value",
                "cVar1": "result",
                "iVar2": "shifted_value",
                "uVar3": "memory_address",
                "uVar4": "lookup_value"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_data_080058e0",
            "code": "\nvoid initialize_data_080058e0(void)\n\n{\n  init_data_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_data_080058e0",
                "initialize_data_values_08004b94": "init_data_values"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_offset_0800591e",
            "code": "\nushort calculate_offset_0800591e(int base_address)\n\n{\n  return (*(short *)(base_address + 0x134) + 0x40) - *(short *)(base_address + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_offset_0800591e",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "validate_and_copy_data_0800598a",
            "code": "\nvoid validateAndCopyData_0800598a(int data)\n\n{\n  int result;\n  ushort nextIndex;\n  undefined copiedData;\n  \n  result = copy_and_validate_data_080054d4(data,&copiedData);\n  if ((result == 0) &&\n     (nextIndex = *(short *)(data + 0x60) + 1U & 0x3f, nextIndex != *(ushort *)(data + 0x62))) {\n    *(undefined *)(*(int *)(data + 0x5c) + (uint)*(ushort *)(data + 0x60)) = copiedData;\n    *(ushort *)(data + 0x60) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "validate_and_copy_data_0800598a",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "nextIndex",
                "local_9": "copiedData"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_memory_08005a44",
            "code": "\nvoid initializeMemory_08005a44(int memoryAddress)\n\n{\n  *(int *)(memoryAddress + 0x130) = memoryAddress + 0x11;\n  *(undefined2 *)(memoryAddress + 0x134) = 0;\n  *(undefined2 *)(memoryAddress + 0x136) = 0;\n  *(int *)(memoryAddress + 0x138) = memoryAddress + 0x51;\n  *(undefined2 *)(memoryAddress + 0x13c) = 0;\n  *(undefined2 *)(memoryAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_memory_08005a44",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_serial_port_08005a68",
            "code": "\nvoid initializeSerialPort_08005a68(int serialPort,undefined4 baudRate,byte configuration)\n\n{\n  uint extraOutput;\n  char *errorMessage;\n  byte bits;\n  int uartConfig;\n  byte *bytePointer;\n  char tempChar;\n  int tempInt;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x140) = configuration;\n  bits = configuration & 7;\n  if (bits == 4) {\n    uartConfig = 7;\n  }\n  else if (bits == 6) {\n    uartConfig = 8;\n  }\n  else if (bits == 2) {\n    uartConfig = 6;\n  }\n  else {\n    uartConfig = 0;\n  }\n  if ((configuration & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    uartConfig = uartConfig + 1;\n  }\n  else if ((configuration & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    uartConfig = uartConfig + 1;\n  }\n  if ((configuration & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (uartConfig == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (uartConfig == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    uartConfig = 0;\n  }\n  if (uartConfig != 0) {\n    initialize_uart_pins_08004f4c(serialPort + 0xd4);\n    update_data_08005510(serialPort + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  handle_assertion_failure_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  bytePointer = *(byte **)(extraOutput + tempInt);\n  errorMessage[0x1e] = tempChar;\n  *(undefined *)(*bytePointer + 0x1e) = 0;\n  if (extraOutput < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[extraOutput];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_serial_port_08005a68",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "configuration",
                "extraout_r1": "extraOutput",
                "pcVar1": "errorMessage",
                "bVar2": "bits",
                "iVar3": "uartConfig",
                "pbVar4": "bytePointer",
                "unaff_r4": "tempChar",
                "unaff_r6": "tempInt",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_memory_value_08005b24",
            "code": "\nvoid setMemoryValue_08005b24(int address,uint value)\n\n{\n  undefined memoryByte;\n  code *jumpTable;\n  \n  if (value < 0x3c) {\n    memoryByte = (&DAT_080076f0)[value];\n  }\n  else {\n    memoryByte = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = memoryByte;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_memory_value_08005b24",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "memoryByte",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_byte_value_08005b3c",
            "code": "\nvoid setByteValue_08005b3c(int address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_byte_value_08005b3c",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_data_08005b54",
            "code": "\nundefined4 *\ninitializeData_08005b54(undefined4 *data,undefined4 value,undefined4 memory_value,undefined4 byte_value)\n\n{\n  undefined found_value;\n  \n  data[1] = 0;\n  data[2] = 1000;\n  *data = &PTR_LAB_080059c8_1_08007804;\n  if (data == (undefined4 *)&DAT_2000036c) {\n    set_memory_value_08005b24(&DAT_2000036c,0,memory_value,&DAT_2000036c,byte_value);\n    set_byte_value_08005b3c(&DAT_2000036c,1);\n  }\n  else {\n    found_value = check_and_find_value_08004ca2(value,&DAT_08007604);\n    *(undefined *)((int)data + 0x12d) = found_value;\n    found_value = check_and_find_value_08004ca2(value,&DAT_0800764c);\n    *(undefined *)(data + 0x4b) = found_value;\n  }\n  initialize_memory_08005a44(data);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_data_08005b54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "memory_value",
                "param_4": "byte_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_if_param1_is_one_08005bb0",
            "code": "\nvoid initialize_if_param1_is_one_08005bb0(int is_param1_one,int param2_value,undefined4 param3_value,undefined4 param4_value)\n\n{\n  if (is_param1_one != 1) {\n    return;\n  }\n  if (param2_value == 0xffff) {\n    initialize_data(&DAT_2000036c,0x40004400,param3_value,0xffff,param4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_if_param1_is_one_08005bb0",
                "param_1": "is_param1_one",
                "param_2": "param2_value",
                "param_3": "param3_value",
                "param_4": "param4_value",
                "initialize_data_08005b54": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *outputBuffer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *outputBuffer = &DAT_08007858;\n  *(undefined *)(outputBuffer + 1) = value1;\n  *(undefined *)((int)outputBuffer + 5) = value2;\n  *(undefined *)((int)outputBuffer + 6) = value3;\n  *(undefined *)((int)outputBuffer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "outputBuffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_data_if_condition_met_08005c38",
            "code": "\nvoid initialize_data_if_condition_met_08005c38(int input_param_1,int input_param_2)\n\n{\n  if ((input_param_1 == 1) && (input_param_2 == 0xffff)) {\n    initialize_data_08005c1c(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_data_if_condition_met_08005c38",
                "param_1": "input_param_1",
                "param_2": "input_param_2"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "process_string_08005c96",
            "code": "\nundefined4 process_string_08005c96(int *string_array,int string_length,undefined4 unused_param,undefined4 additional_param)\n\n{\n  undefined4 end_of_string;\n  \n  if (string_length != 0) {\n    end_of_string = find_end_of_string(string_length);\n    end_of_string = (**(code **)(*string_array + 4))(string_array,string_length,end_of_string,*(code **)(*string_array + 4),additional_param);\n    return end_of_string;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "process_string_08005c96",
                "param_1": "string_array",
                "param_2": "string_length",
                "param_3": "unused_param",
                "param_4": "additional_param",
                "uVar1": "end_of_string",
                "find_end_of_string_08000178": "find_end_of_string"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_pointer_08005cb6",
            "code": "\nvoid executeFunctionPointer_08005cb6(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_08005cc0",
            "code": "\nvoid executeFunction_08005cc0(int *functionPointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(code **)(*functionPointer + 4))(functionPointer,&DAT_0800786c,2,*(code **)(*functionPointer + 4),arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "functionPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "add_processed_string_to_result_08005cd4",
            "code": "\nint addProcessedStringToResult_08005cd4(undefined4 inputParameter)\n\n{\n  int stringResult;\n  int functionResult;\n  \n  stringResult = process_string_08005c96();\n  functionResult = execute_function_08005cc0(inputParameter);\n  return functionResult + stringResult;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "add_processed_string_to_result_08005cd4",
                "param_1": "inputParameter",
                "iVar1": "stringResult",
                "iVar2": "functionResult"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_to_base_08005ce8",
            "code": "\nundefined4 convertToBase_08005ce8(int *number,uint value,uint base)\n\n{\n  char charValue;\n  undefined4 returnValue;\n  uint remainder;\n  uint quotient;\n  char *result;\n  char convertedNumber [9];\n  \n  convertedNumber[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  result = convertedNumber + 1;\n  do {\n    quotient = value / base;\n    remainder = (value & 0xff) - (quotient * base & 0xff) & 0xff;\n    result = result + -1;\n    charValue = (char)remainder;\n    if (remainder < 10) {\n      charValue = charValue + '0';\n    }\n    else {\n      charValue = charValue + '7';\n    }\n    *result = charValue;\n    value = quotient;\n  } while (quotient != 0);\n  if (result == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    returnValue = find_end_of_string_08000178(result);\n    returnValue = (**(code **)(*number + 4))(number,result,returnValue);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_to_base_08005ce8",
                "param_1": "number",
                "param_2": "value",
                "param_3": "base",
                "cVar1": "charValue",
                "uVar2": "returnValue",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "result",
                "local_15": "convertedNumber"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_and_execute_08005d42",
            "code": "\nint convert_and_execute_08005d42(undefined4 *function_pointer,uint value,uint base)\n\n{\n  int result;\n  int execute_result;\n  \n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,value & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_to_base_08005ce8(function_pointer,value,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)value) {\n    result = convert_to_base_08005ce8(function_pointer,value,10);\n    return result;\n  }\n  result = execute_function_pointer_08005cb6(function_pointer,0x2d);\n  execute_result = convert_to_base_08005ce8(function_pointer,-value,10);\n  return execute_result + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_and_execute_08005d42",
                "param_1": "function_pointer",
                "param_2": "value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "execute_result"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "execute_converted_function_08005d82",
            "code": "\nvoid execute_converted_function_08005d82(void)\n\n{\n  convert_and_execute();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "execute_converted_function_08005d82",
                "convert_and_execute_08005d42": "convert_and_execute"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_to_base_or_call_08005d8a",
            "code": "\nvoid convert_to_base_or_call_08005d8a(undefined4 *function_ptr,uint input_value,uint flag,undefined4 code_param)\n\n{\n  if (flag != 0) {\n    convert_to_base(function_ptr,input_value,flag & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr,input_value & 0xff,0,*(code **)*function_ptr,code_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_to_base_or_call_08005d8a",
                "param_1": "function_ptr",
                "param_2": "input_value",
                "param_3": "flag",
                "param_4": "code_param",
                "convert_to_base_08005ce8": "convert_to_base"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "process_data_08005da8",
            "code": "\nint processData_08005da8(undefined4 input1,undefined4 input2,undefined4 input3,uint input4,byte input5)\n\n{\n  int result1;\n  undefined4 result2;\n  int result3;\n  byte byteVar;\n  undefined8 floatingVar1;\n  undefined8 floatingVar2;\n  \n  result1 = check_parameters_08000a2c(input3,input4,input3,input4);\n  if (result1 == 0) {\n    result1 = check_parameters_08000a2c(input3,input4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result1 == 0) &&\n       (result1 = check_and_return_080009f0(input3,input4 & 0x7fffffff,0xffffffff,0x7fefffff), result1 == 0)) {\n      result1 = process_string_08005c96(input1,&DAT_08007860);\n    }\n    else {\n      result1 = check_if_string_is_empty_08000a18(input3,input4,0xe0000000,0x41efffff);\n      if (result1 == 0) {\n        result1 = check_if_null_terminate_080009dc(input3,input4,0xe0000000,0xc1efffff);\n        if (result1 == 0) {\n          result1 = check_if_null_terminate_080009dc(input3,input4,0,0);\n          if (result1 == 0) {\n            result1 = 0;\n          }\n          else {\n            result1 = execute_function_pointer_08005cb6(input1,0x2d);\n            input4 = input4 + 0x80000000;\n          }\n          floatingVar1 = 0x3fe0000000000000;\n          for (byteVar = 0; result2 = (undefined4)((ulonglong)floatingVar1 >> 0x20), byteVar < input5;\n              byteVar = byteVar + 1) {\n            floatingVar1 = calculate_floating_point_0800074c((int)floatingVar1,result2,0,0x40240000);\n          }\n          floatingVar1 = calculate_sum_08000194(input3,input4,(int)floatingVar1,result2);\n          result2 = check_and_shift_08000aa8();\n          floatingVar2 = bitwise_shift_and_concatenate_0800040c();\n          floatingVar1 = calculate_result_08000190((int)floatingVar1,(int)((ulonglong)floatingVar1 >> 0x20),(int)floatingVar2,\n                               (int)((ulonglong)floatingVar2 >> 0x20));\n          result3 = convert_to_base_or_call_08005d8a(input1,result2,10);\n          result1 = result1 + result3;\n          if (input5 != 0) {\n            result3 = process_string_08005c96(input1,&DAT_08007868);\n            result1 = result1 + result3;\n          }\n          while (input5 != 0) {\n            floatingVar1 = calculate_floating_point_080004f8((int)floatingVar1,(int)((ulonglong)floatingVar1 >> 0x20),0,0x40240000);\n            result2 = calculate_result_08000a58();\n            result3 = execute_converted_function_08005d82(input1,result2,10);\n            result1 = result1 + result3;\n            floatingVar2 = bitwise_shift_and_concatenate_0800042c(result2);\n            floatingVar1 = calculate_result_08000190((int)floatingVar1,(int)((ulonglong)floatingVar1 >> 0x20),(int)floatingVar2,\n                                 (int)((ulonglong)floatingVar2 >> 0x20));\n            input5 = input5 - 1;\n          }\n        }\n        else {\n          result1 = process_string_08005c96(input1,&DAT_08007864);\n        }\n      }\n      else {\n        result1 = process_string_08005c96(input1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result1 = process_string_08005c96(input1,&DAT_0800785c);\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "process_data_08005da8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "result1",
                "uVar2": "result2",
                "iVar3": "result3",
                "bVar4": "byteVar",
                "uVar5": "floatingVar1",
                "uVar6": "floatingVar2"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "process_data_08005f2c",
            "code": "\nvoid process_data_08005f2c(void)\n\n{\n  process_data_08005f2c_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "process_data_08005f2c",
                "process_data_08005da8": "process_data_helper"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_sum_08005f40",
            "code": "\nint calculate_sum_08005f40(undefined4 input_param)\n\n{\n  int data_result;\n  int function_result;\n  \n  data_result = process_data_08005f2c();\n  function_result = execute_function_08005cc0(input_param);\n  return function_result + data_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "param_1": "input_param",
                "iVar1": "data_result",
                "iVar2": "function_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_device_and_memory_08005f5e",
            "code": "\nvoid initialize_device_and_memory_08005f5e(void)\n\n{\n  configure_registers(3);\n  initialize_device_and_memory_08005f5e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_device_and_memory_08005f5e",
                "update_config_registers_08002470": "configure_registers",
                "initialize_device_and_memory_08001c32": "initialize_device_and_memory"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "continuous_data_processing_08005f6c",
            "code": "\nvoid continuous_data_processing_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  configure_oven();\n  do {\n    process_data();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "continuous_data_processing_08005f6c",
                "initialize_and_configure_oven_08000bcc": "configure_oven",
                "process_data_08000cd0": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar count_set_bits_08005f8c(uint input_num)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; input_num != 1; input_num = input_num >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "input_num",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initializeData_08005fc8(int flag,int value,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shiftLeftBy32Bits(0,&LAB_08005fa0_1,&DAT_20000000,&DAT_200004b8,unusedParam2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "shift_param2_left_by32_bits_08006112": "shiftLeftBy32Bits"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "handle_data_check_080060d4",
            "code": "\nvoid handle_data_check_080060d4(int input_data)\n\n{\n  int bit_count;\n  \n  if (*(int *)(input_data + 8) != 0) {\n    (**(code **)(input_data + 0xc))();\n    return;\n  }\n  handle_data();\n  bit_count = count_set_bits();\n  if ((&DAT_200004c4)[bit_count * 5] != 0) {\n    handle_data_check_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "handle_data_check_080060d4",
                "param_1": "input_data",
                "iVar1": "bit_count",
                "handle_data_08007090": "handle_data",
                "count_set_bits_08005f8c": "count_set_bits"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "handle_bit_check_080060e4",
            "code": "\nvoid handle_bit_check_080060e4(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    handleDataCheck();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "handle_bit_check_080060e4",
                "iVar1": "bitCount",
                "count_set_bits_08005f8c": "countSetBits",
                "handle_data_check_080060d4": "handleDataCheck"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "shift_param2_left_by32_bits_08006112",
            "code": "\nvoid shift_param2_left_by32_bits_08006112(undefined4 input_param,undefined4 shift_param)\n\n{\n  shift_param2_left_by32_bits_08006112_08006158(shift_param,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "shift_param2_left_by32_bits_08006112",
                "param_1": "input_param",
                "param_2": "shift_param"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "handle_assertion_failure_0800611c",
            "code": "\nvoid handle_assertion_failure_0800611c(undefined4 message,undefined4 file,char *line,undefined4 function)\n\n{\n  undefined4 file_descriptor;\n  char *additional_message;\n  undefined8 result;\n  undefined4 function_name;\n  \n  file_descriptor = *(undefined4 *)(DAT_200000f8 + 0xc);\n  function_name = function;\n  if (line == (char *)0x0) goto LAB_08006140;\n  additional_message = \", function: \";\n  do {\n    process_data_08006174(file_descriptor,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,message,file\n                 ,additional_message,line,function_name);\n    result = process_and_handle_data_08006ac0();\n    file = (undefined4)((ulonglong)result >> 0x20);\n    file_descriptor = (undefined4)result;\nLAB_08006140:\n    line = \"\";\n    additional_message = line;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "handle_assertion_failure_0800611c",
                "param_1": "message",
                "param_2": "file",
                "param_3": "line",
                "param_4": "function",
                "uVar1": "file_descriptor",
                "pcVar2": "additional_message",
                "uVar3": "result",
                "uVar4": "function_name"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_param2_left_by32_bits_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftParam2LeftBy32Bits_08006158(undefined4 param1,uint param2)\n\n{\n  return (ulonglong)param2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_param2_left_by32_bits_08006158",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_data_08006174",
            "code": "\nvoid process_data_08006174(undefined4 input_param1,undefined4 input_param2,undefined4 output_param1,undefined4 output_param2)\n\n{\n  undefined4 temp_variable1;\n  undefined4 temp_variable2;\n  \n  temp_variable1 = output_param1;\n  temp_variable2 = output_param2;\n  process_data_08006174_08006394(DAT_200000f8,input_param1,input_param2,&temp_variable1,input_param1,&temp_variable1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_data_08006174",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "output_param1",
                "param_4": "output_param2",
                "uStack_8": "temp_variable1",
                "uStack_4": "temp_variable2"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid executeFunctions_08006198(void)\n\n{\n  int i;\n  \n  for (i = 0; i != 0; i = i + 1) {\n    (*(code *)(&DAT_08007944)[i])();\n  }\n  FUNC_08007328();\n  for (i = 0; i != 10; i = i + 1) {\n    (*(code *)(&DAT_08007944)[i])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "i"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *destination,undefined value,int count)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + count;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "reorder_list_080061f0",
            "code": "\nvoid reorderList_080061f0(undefined4 *result,int n,undefined4 param3,undefined4 param4)\n\n{\n  int **pointer;\n  int **ptr1;\n  int **ptr2;\n  int *ptr3;\n  int **ptr4;\n  int **ptr5;\n  \n  if (n == 0) {\n    return;\n  }\n  ptr5 = (int **)(n + -4);\n  if (*(int *)(n + -4) < 0) {\n    ptr5 = (int **)((int)ptr5 + *(int *)(n + -4));\n  }\n  FUNC_08006eac();\n  ptr2 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    ptr5[1] = (int *)0x0;\n    ptr1 = pointer;\n    DAT_200005f8 = ptr5;\n  }\n  else {\n    ptr2 = DAT_200005f8;\n    if (ptr5 < DAT_200005f8) {\n      ptr1 = (int **)*ptr5;\n      ptr2 = (int **)((int)ptr5 + (int)ptr1);\n      if (DAT_200005f8 == ptr2) {\n        ptr3 = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        ptr2 = (int **)((int)ptr3 + (int)ptr1);\n        *ptr5 = (int *)ptr2;\n      }\n      ptr5[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = ptr5;\n    }\n    else {\n      do {\n        ptr4 = ptr2;\n        ptr2 = (int **)ptr4[1];\n        if (ptr2 == (int **)0x0) break;\n      } while (ptr2 <= ptr5);\n      ptr1 = (int **)*ptr4;\n      if ((int **)((int)ptr4 + (int)ptr1) == ptr5) {\n        ptr1 = (int **)((int)ptr1 + (int)*ptr5);\n        *ptr4 = (int *)ptr1;\n        if (ptr2 == (int **)((int)ptr4 + (int)ptr1)) {\n          ptr3 = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          ptr1 = (int **)((int)ptr1 + (int)ptr3);\n          *ptr4 = (int *)ptr1;\n          ptr4[1] = (int *)ptr2;\n        }\n      }\n      else if (ptr5 < (int **)((int)ptr4 + (int)ptr1)) {\n        *result = 0xc;\n      }\n      else {\n        ptr1 = (int **)((int)ptr5 + (int)*ptr5);\n        if (ptr2 == ptr1) {\n          ptr3 = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          ptr1 = (int **)((int)ptr3 + (int)*ptr5);\n          *ptr5 = (int *)ptr1;\n        }\n        ptr5[1] = (int *)ptr2;\n        ptr4[1] = (int *)ptr5;\n      }\n    }\n  }\n  FUNC_08006eae(result,ptr1,ptr2,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "reorder_list_080061f0",
                "param_1": "result",
                "param_2": "n",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "pointer",
                "ppiVar1": "ptr1",
                "ppiVar2": "ptr2",
                "piVar3": "ptr3",
                "ppiVar4": "ptr4",
                "ppiVar5": "ptr5"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_and_store_memory_08006288",
            "code": "\nuint allocate_and_store_memory_08006288(undefined4 *result,uint size)\n\n{\n  uint *currentPtr;\n  int offset;\n  uint *nextPtr;\n  uint difference;\n  uint *previousPtr;\n  uint newSize;\n  \n  newSize = (size + 3 & 0xfffffffc) + 8;\n  if (newSize < 0xc) {\n    newSize = 0xc;\n  }\n  if (((int)newSize < 0) || (newSize < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    currentPtr = DAT_200005f8;\n    previousPtr = DAT_200005f8;\n    while (nextPtr = currentPtr, nextPtr != (uint *)0x0) {\n      difference = *nextPtr - newSize;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previousPtr == nextPtr) {\n            currentPtr = (uint *)previousPtr[1];\n            DAT_200005f8 = currentPtr;\n          }\n          else {\n            currentPtr = (uint *)nextPtr[1];\n          }\n          if (previousPtr != nextPtr) {\n            previousPtr[1] = (uint)currentPtr;\n            previousPtr = nextPtr;\n          }\n        }\n        else {\n          *nextPtr = difference;\n          *(uint *)((int)nextPtr + difference) = newSize;\n          previousPtr = (uint *)((int)nextPtr + difference);\n        }\n        goto LAB_080062ec;\n      }\n      previousPtr = nextPtr;\n      currentPtr = (uint *)nextPtr[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = allocate_memory_and_store_result_08006920(result);\n    }\n    currentPtr = (uint *)allocate_memory_and_store_result_08006920(result,newSize);\n    if ((currentPtr != (uint *)0xffffffff) &&\n       ((previousPtr = (uint *)((int)currentPtr + 3U & 0xfffffffc), currentPtr == previousPtr ||\n        (offset = allocate_memory_and_store_result_08006920(result,(int)previousPtr - (int)currentPtr), offset != -1)))) {\n      *previousPtr = newSize;\nLAB_080062ec:\n      FUNC_08006eae(result);\n      newSize = (int)previousPtr + 0xbU & 0xfffffff8;\n      offset = newSize - (int)(previousPtr + 1);\n      if (offset != 0) {\n        *(int *)((int)previousPtr + offset) = -offset;\n        return newSize;\n      }\n      return newSize;\n    }\n    *result = 0xc;\n    FUNC_08006eae(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_and_store_memory_08006288",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "currentPtr",
                "iVar2": "offset",
                "puVar3": "nextPtr",
                "uVar4": "difference",
                "puVar5": "previousPtr",
                "uVar6": "newSize"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_data_08006344",
            "code": "\nuint process_data_08006344(int input_param,byte byte_value,byte **byte_ptr_ptr)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = byte_ptr_ptr[2] + -1;\n  byte_ptr_ptr[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)byte_ptr_ptr[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *byte_ptr_ptr;\n    *byte_ptr_ptr = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (byte_ptr_ptr == (byte **)&DAT_08007904) {\n    byte_ptr_ptr = *(byte ***)(input_param + 4);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_08007924) {\n    byte_ptr_ptr = *(byte ***)(input_param + 8);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_080078e4) {\n    byte_ptr_ptr = *(byte ***)(input_param + 0xc);\n  }\n  byte_ptr_ptr[2] = byte_ptr_ptr[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(byte_ptr_ptr + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = byte_ptr_ptr[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = process_data_08006344_helper(input_param,byte_ptr_ptr,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    result = (uint)byte_value;\n    temp_var1 = (int)*byte_ptr_ptr - (int)byte_ptr_ptr[4];\n    if ((temp_var1 < (int)byte_ptr_ptr[5]) || (temp_var1 = process_data_08006344_helper_2(input_param,byte_ptr_ptr), temp_var1 == 0)) {\n      byte_ptr_ptr[2] = byte_ptr_ptr[2] + -1;\n      temp_var2 = *byte_ptr_ptr;\n      *byte_ptr_ptr = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var1 + 1) != byte_ptr_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byte_ptr_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_data_08006344_helper_2(input_param,byte_ptr_ptr);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_data_08006344",
                "param_1": "input_param",
                "param_2": "byte_value",
                "param_3": "byte_ptr_ptr",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "initialize_data_08006cb4": "initialize_data",
                "process_data_080069e4": "process_data_helper",
                "process_data_08006be0": "process_data_helper_2"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_data_08006370",
            "code": "\nint processData_08006370(undefined4 input1,undefined4 input2,undefined *data,int length)\n\n{\n  int result;\n  undefined *end;\n  int current;\n  \n  end = data + length;\n  current = length;\n  do {\n    if (data == end) {\n      return 0;\n    }\n    result = process_data_08006344(input1,*data,input2,length,current);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "current"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_data_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint processData_08006394(int inputData,undefined4 *formatSpecifier,byte *inputString,int *counter)\n\n{\n  int errorCode;\n  int *ptr;\n  bool isNumeric;\n  byte *currentChar;\n  byte *nextChar;\n  int updatedData;\n  int tempVar;\n  int *counterPtr;\n  uint options;\n  int precision;\n  undefined4 dataType;\n  int width;\n  int numChars;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined hashFlag;\n  undefined4 zeroFlag;\n  \n  counterPtr = counter;\n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (formatSpecifier == &DAT_08007904) {\n    formatSpecifier = *(undefined4 **)(inputData + 4);\n  }\n  else if (formatSpecifier == (undefined4 *)&DAT_08007924) {\n    formatSpecifier = *(undefined4 **)(inputData + 8);\n  }\n  else if (formatSpecifier == (undefined4 *)&DAT_080078e4) {\n    formatSpecifier = *(undefined4 **)(inputData + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(formatSpecifier + 3) << 0x1c)) || (formatSpecifier[4] == 0)) &&\n     (tempVar = process_data_080069e4(inputData,formatSpecifier), tempVar != 0)) {\n    return -1;\n  }\n  numChars = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = inputString;\nLAB_080063d6:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  tempVar = (int)nextChar - (int)inputString;\n  if (tempVar != 0) {\n    errorCode = process_data_08006370(inputData,formatSpecifier,inputString,tempVar);\n    if (errorCode == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(formatSpecifier + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return numChars;\n    }\n    numChars = numChars + tempVar;\n  }\n  if (*nextChar == 0) goto LAB_08006580;\n  options = 0;\n  width = 0;\n  precision = -1;\n  dataType = 0;\n  hashFlag = 0;\n  zeroFlag = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    tempVar = find_character_in_string_08006e90(\"#-0+ \",*currentChar);\n    inputString = currentChar + 1;\n    if (tempVar == 0) break;\n    options = 1 << (tempVar + 0xf7ff8750U & 0xff) | options;\n    currentChar = inputString;\n  }\n  if ((int)(options << 0x1b) < 0) {\n    hashFlag = 0x20;\n  }\n  if ((int)(options << 0x1c) < 0) {\n    hashFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    ptr = counterPtr + 1;\n    tempVar = *counterPtr;\n    counterPtr = ptr;\n    if (tempVar < 0) {\n      width = -tempVar;\n      options = options | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    isNumeric = false;\n    tempVar = width;\n    inputString = currentChar;\n    while( true ) {\n      if (9 < *inputString - 0x30) break;\n      tempVar = tempVar * 10 + (*inputString - 0x30);\n      isNumeric = true;\n      inputString = inputString + 1;\n    }\n    if (!isNumeric) goto LAB_080064be;\n  }\n  width = tempVar;\nLAB_080064be:\n  if (*inputString == 0x2e) {\n    if (inputString[1] == 0x2a) {\n      inputString = inputString + 2;\n      ptr = counterPtr + 1;\n      precision = *counterPtr;\n      counterPtr = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      isNumeric = false;\n      tempVar = 0;\n      precision = 0;\n      while( true ) {\n        inputString = inputString + 1;\n        if (9 < *inputString - 0x30) break;\n        tempVar = tempVar * 10 + (*inputString - 0x30);\n        isNumeric = true;\n      }\n      if (isNumeric) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = find_character_in_string_08006e90(&DAT_080078b6,*inputString,3);\n  if (tempVar != 0) {\n    inputString = inputString + 1;\n    options = options | 0x40 << (tempVar + 0xf7ff874aU & 0xff);\n  }\n  conversionSpecifier = *inputString;\n  inputString = inputString + 1;\n  tempVar = find_character_in_string_08006e90(\"efgEFG\",conversionSpecifier,6);\n  if (tempVar == 0) {\n    updatedData = process_and_update_data_080066b0(inputData,&options,formatSpecifier,0x8006371,&counterPtr);\n    if (updatedData == -1) goto LAB_08006580;\n  }\n  else {\n    counterPtr = (int *)(((int)counterPtr + 7U & 0xfffffff8) + 8);\n  }\n  numChars = numChars + updatedData;\n  currentChar = inputString;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_data_08006394",
                "param_1": "inputData",
                "param_2": "formatSpecifier",
                "param_3": "inputString",
                "param_4": "counter",
                "iVar1": "errorCode",
                "piVar2": "ptr",
                "bVar3": "isNumeric",
                "pbVar4": "currentChar",
                "pbVar5": "nextChar",
                "unaff_r9": "updatedData",
                "iVar6": "tempVar",
                "local_8c": "counterPtr",
                "local_88": "options",
                "local_84": "precision",
                "local_80": "dataType",
                "local_7c": "width",
                "local_74": "numChars",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "hashFlag",
                "local_30": "zeroFlag"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocess_data_080065c0(undefined4 input,uint *data_array,uint *max_size,undefined4 param4,code *callback)\n\n{\n  int loop_counter1;\n  int callback_result;\n  uint temp_size;\n  uint temp_variable;\n  bool check_variable;\n  \n  temp_size = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    temp_size = data_array[2];\n  }\n  *max_size = temp_size;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *max_size = temp_size + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *max_size = *max_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (loop_counter1 = 0; loop_counter1 < (int)(data_array[3] - *max_size); loop_counter1 = loop_counter1 + 1) {\n      callback_result = (*callback)(input,param4,(int)data_array + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  temp_size = (uint)*(byte *)((int)data_array + 0x43);\n  if (temp_size != 0) {\n    temp_size = 1;\n  }\n  temp_variable = temp_size;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + temp_size + 0x43) = 0x30;\n    temp_variable = temp_size + 2;\n    *(undefined *)((int)data_array + temp_size + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  loop_counter1 = (*callback)(input,param4,(int)data_array + 0x43,temp_variable);\n  if (loop_counter1 != -1) {\n    temp_size = data_array[3];\n    check_variable = (*data_array & 6) != 4;\n    if (check_variable) {\n      temp_size = 0;\n    }\n    temp_variable = 0;\n    if (!check_variable) {\n      temp_size = temp_size - *max_size;\n    }\n    if (!check_variable) {\n      temp_size = temp_size & ~((int)temp_size >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      temp_size = temp_size + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (temp_size == temp_variable) {\n        return 0;\n      }\n      loop_counter1 = (*callback)(input,param4,(int)data_array + 0x1a,1);\n      if (loop_counter1 == -1) break;\n      temp_variable = temp_variable + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input",
                "param_2": "data_array",
                "param_3": "max_size",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "loop_counter1",
                "iVar2": "callback_result",
                "uVar3": "temp_size",
                "uVar4": "temp_variable",
                "bVar5": "check_variable"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "process_and_update_data_080066b0",
            "code": "\nuint process_and_update_data_080066b0(undefined4 param1,uint *param2,undefined4 param3,code *param4,uint **param5)\n\n{\n  byte byteVar;\n  int intVar;\n  uint *ptrVar;\n  int intVar2;\n  char *charVar;\n  uint uintVar;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint uintVar2;\n  uint uintVar3;\n  char *charVar2;\n  char *charVar3;\n  uint localArray [2];\n  \n  byteVar = *(byte *)(param2 + 6);\n  charVar3 = (char *)((int)param2 + 0x43);\n  if (byteVar != 0x6e) {\n    if (byteVar < 0x6f) {\n      if (byteVar != 99) {\n        if (byteVar < 100) {\n          if (byteVar == 0) goto LAB_0800686a;\n          if (byteVar != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param2 + 0x45) = 0x58;\n          charVar = \"0123456789ABCDEF\";\nLAB_080067fa:\n          uintVar = *param2;\n          ptrVar = *param5;\n          *param5 = ptrVar + 1;\n          if (((uintVar & 0x80) == 0) && ((int)(uintVar << 0x19) < 0)) {\n            uintVar2 = (uint)*(ushort *)ptrVar;\n          }\n          else {\n            uintVar2 = *ptrVar;\n          }\n          if ((int)(uintVar << 0x1f) < 0) {\n            *param2 = uintVar | 0x20;\n          }\n          if (uintVar2 == 0) {\n            *param2 = *param2 & 0xffffffdf;\n          }\n          uintVar = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param2 + 0x43) = 0;\n        }\n        else {\n          if ((byteVar != 100) && (byteVar != 0x69)) goto LAB_080066e0;\n          uintVar2 = *param2;\n          ptrVar = *param5;\n          if ((uintVar2 & 0x80) == 0) {\n            *param5 = ptrVar + 1;\n            if ((uintVar2 & 0x40) == 0) goto LAB_08006700;\n            uintVar2 = (uint)(short)*(ushort *)ptrVar;\n          }\n          else {\n            *param5 = ptrVar + 1;\nLAB_08006700:\n            uintVar2 = *ptrVar;\n          }\n          if ((int)uintVar2 < 0) {\n            uintVar2 = -uintVar2;\n            *(undefined *)((int)param2 + 0x43) = 0x2d;\n          }\n          charVar = \"0123456789ABCDEF\";\n          uintVar = 10;\n        }\n        uintVar3 = param2[1];\n        param2[2] = uintVar3;\n        charVar2 = charVar3;\n        if ((int)uintVar3 < 0) {\n          if (uintVar2 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)param2 + 0x42) = *charVar;\n          charVar2 = (char *)((int)param2 + 0x42);\n        }\n        else {\n          *param2 = *param2 & 0xfffffffb;\n          if (uintVar2 == 0) {\n            if (uintVar3 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uintVar3 = uintVar2 / uintVar;\n              charVar2 = charVar2 + -1;\n              *charVar2 = charVar[uintVar2 - uintVar * uintVar3];\n              uintVar2 = uintVar3;\n            } while (uintVar3 != 0);\n          }\n        }\n        if (((uintVar == 8) && ((int)(*param2 << 0x1f) < 0)) && ((int)param2[1] <= (int)param2[4]))\n        {\n          charVar2[-1] = '0';\n          charVar2 = charVar2 + -1;\n        }\n        param2[4] = (int)charVar3 - (int)charVar2;\n        charVar3 = charVar2;\n        goto LAB_080067d6;\n      }\n      ptrVar = *param5;\n      *param5 = ptrVar + 1;\n      *(char *)((int)param2 + 0x42) = (char)*ptrVar;\nLAB_08006740:\n      charVar3 = (char *)((int)param2 + 0x42);\n      uintVar2 = 1;\n    }\n    else {\n      if (byteVar != 0x73) {\n        if (byteVar < 0x74) {\n          if (byteVar == 0x6f) {\nLAB_08006766:\n            uintVar2 = *param2;\n            ptrVar = *param5;\n            if ((uintVar2 & 0x80) == 0) {\n              *param5 = ptrVar + 1;\n              if ((uintVar2 & 0x40) == 0) goto LAB_08006774;\n              uintVar2 = (uint)*(ushort *)ptrVar;\n            }\n            else {\n              *param5 = ptrVar + 1;\nLAB_08006774:\n              uintVar2 = *ptrVar;\n            }\n            if (byteVar == 0x6f) {\n              uintVar = 8;\n            }\n            else {\n              uintVar = 10;\n            }\n            charVar = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byteVar == 0x70) {\n            *param2 = *param2 | 0x20;\nLAB_08006726:\n            charVar = \"0123456789abcdef\";\n            *(undefined *)((int)param2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byteVar == 0x75) goto LAB_08006766;\n          if (byteVar == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param2 + 0x42) = byteVar;\n        goto LAB_08006740;\n      }\n      ppcVar8 = (char **)*param5;\n      *param5 = (uint *)(ppcVar8 + 1);\n      charVar3 = *ppcVar8;\n      intVar = find_character_in_string_08006e90(charVar3,0,param2[1]);\n      if (intVar != 0) {\n        param2[1] = intVar - (int)charVar3;\n      }\n      uintVar2 = param2[1];\n    }\n    param2[4] = uintVar2;\n    *(undefined *)((int)param2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uintVar2 = *param2;\n  ppuVar7 = (uint **)*param5;\n  uintVar = param2[5];\n  if ((uintVar2 & 0x80) == 0) {\n    *param5 = (uint *)(ppuVar7 + 1);\n    ptrVar = *ppuVar7;\n    if ((uintVar2 & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptrVar = (short)uintVar;\n  }\n  else {\n    *param5 = (uint *)(ppuVar7 + 1);\n    ptrVar = *ppuVar7;\nLAB_08006856:\n    *ptrVar = uintVar;\n  }\nLAB_0800686a:\n  param2[4] = 0;\nLAB_080067d6:\n  intVar = process_data_080065c0(param1,param2,localArray,param3,param4);\n  if ((intVar == -1) || (intVar = (*param4)(param1,param3,charVar3,param2[4]), intVar == -1)) {\nLAB_080067ea:\n    uintVar2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param2 << 0x1e) < 0) {\n      for (intVar = 0; intVar < (int)(param2[3] - localArray[0]); intVar = intVar + 1) {\n        intVar2 = (*param4)(param1,param3,(int)param2 + 0x19,1);\n        if (intVar2 == -1) goto LAB_080067ea;\n      }\n    }\n    uintVar2 = param2[3];\n    if ((int)param2[3] < (int)localArray[0]) {\n      uintVar2 = localArray[0];\n    }\n  }\n  return uintVar2;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "process_and_update_data_080066b0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "bVar1": "byteVar",
                "iVar2": "intVar",
                "puVar3": "ptrVar",
                "iVar4": "intVar2",
                "pcVar5": "charVar",
                "uVar6": "uintVar",
                "uVar9": "uintVar2",
                "uVar10": "uintVar3",
                "pcVar11": "charVar2",
                "pcVar12": "charVar3",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "initialize_and_process_data_080068f0",
            "code": "\nvoid initializeAndProcessData_080068f0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int dataPtr;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  dataPtr = DAT_200000f8;\n  param1Copy = input1;\n  param2Copy = input2;\n  param3Copy = input3;\n  param4Copy = input4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_08006cb4(DAT_200000f8);\n  }\n  process_data_08006394(dataPtr,*(undefined4 *)(dataPtr + 8),input1,&param2Copy,param1Copy,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "initialize_and_process_data_080068f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "dataPtr",
                "uVar2": "param1Copy",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "allocate_memory_and_store_result_08006920",
            "code": "\nvoid allocate_memory_and_store_result_08006920(int *result_ptr,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_200006a4 = 0;\n  allocation_result = allocate_memory_080056d8(size);\n  if ((allocation_result == -1) && (DAT_200006a4 != 0)) {\n    *result_ptr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "allocate_memory_and_store_result_08006920",
                "param_1": "result_ptr",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint process_data_080069e4(undefined4 *output_buffer,undefined4 *input_buffer)\n\n{\n  int data_ptr;\n  uint result;\n  ushort flags;\n  \n  data_ptr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_08006cb4(DAT_200000f8);\n  }\n  if (input_buffer == &DAT_08007904) {\n    input_buffer = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_buffer == (undefined4 *)&DAT_08007924) {\n    input_buffer = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_buffer == (undefined4 *)&DAT_080078e4) {\n    input_buffer = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input_buffer + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_buffer = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_buffer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_buffer[0xd] != input_buffer + 0x11) {\n          reorder_list_080061f0(output_buffer);\n        }\n        input_buffer[0xd] = 0;\n      }\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xffdb;\n      input_buffer[1] = 0;\n      *input_buffer = input_buffer[4];\n    }\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 8;\n  }\n  if ((input_buffer[4] == 0) && ((*(ushort *)(input_buffer + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08006e10(output_buffer,input_buffer);\n  }\n  flags = *(ushort *)(input_buffer + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input_buffer[5];\n    }\n    input_buffer[2] = result;\n  }\n  else {\n    input_buffer[2] = 0;\n    input_buffer[6] = -input_buffer[5];\n  }\n  if (input_buffer[4] == 0) {\n    flags = *(ushort *)(input_buffer + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input_buffer + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          reorder_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "process_and_handle_data_08006ac0",
            "code": "\nvoid processAndHandleData_08006ac0(void)\n\n{\n  uint *dataPointer;\n  int tempVariable;\n  int *dataArray;\n  int *tempArray;\n  uint ushortValue;\n  ushort ushortFlag;\n  int loopCounter;\n  code *functionPointer;\n  int iteration;\n  uint originalValue;\n  code *jumpTable_00;\n  bool conditionalFlag;\n  undefined8 loopReturnValue;\n  \n  process_parameter_08006f00(6);\n  jumpTable_00 = (code *)0x8006acf;\n  loopReturnValue = infinite_loop_0800573c(1);\n  dataArray = (int *)((ulonglong)loopReturnValue >> 0x20);\n  dataPointer = (uint *)loopReturnValue;\n  ushortFlag = *(ushort *)(dataArray + 3);\n  ushortValue = (uint)ushortFlag;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    tempVariable = dataArray[4];\n    if (tempVariable != 0) {\n      loopCounter = ushortValue << 0x1e;\n      conditionalFlag = loopCounter != 0;\n      if (conditionalFlag) {\n        loopCounter = 0;\n      }\n      iteration = *dataArray;\n      if (!conditionalFlag) {\n        loopCounter = dataArray[5];\n      }\n      *dataArray = tempVariable;\n      dataArray[2] = loopCounter;\n      for (iteration = iteration - tempVariable; 0 < iteration; iteration = iteration - loopCounter) {\n        loopCounter = (*(code *)dataArray[10])(dataPointer,dataArray[8],tempVariable,iteration);\n        if (loopCounter < 1) {\n          ushortFlag = *(ushort *)(dataArray + 3);\n          goto LAB_08006bc6;\n        }\n        tempVariable = tempVariable + loopCounter;\n      }\n    }\n  }\n  else if (((0 < dataArray[1]) || (0 < dataArray[0x10])) &&\n          (functionPointer = (code *)dataArray[0xb], functionPointer != (code *)0x0)) {\n    originalValue = *dataPointer;\n    *dataPointer = 0;\n    if ((ushortFlag & 0x1000) == 0) {\n      tempVariable = (*functionPointer)(dataPointer,dataArray[8],ushortValue & 0x1000,1);\n      if ((tempVariable == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable_00)();\n          return;\n        }\n        *dataPointer = originalValue;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      tempVariable = dataArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(dataArray + 3) << 0x1d) < 0) &&\n       (tempVariable = tempVariable - dataArray[1], dataArray[0xd] != 0)) {\n      tempVariable = tempVariable - dataArray[0x10];\n    }\n    tempVariable = (*(code *)dataArray[0xb])(dataPointer,dataArray[8],tempVariable,0);\n    ushortFlag = *(ushort *)(dataArray + 3);\n    if ((tempVariable == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(dataArray + 3) = ushortFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable_00)(0xffffffff);\n      return;\n    }\n    dataArray[1] = 0;\n    *dataArray = dataArray[4];\n    if (((int)((uint)ushortFlag << 0x13) < 0) && ((tempVariable != -1 || (*dataPointer == 0)))) {\n      dataArray[0x15] = tempVariable;\n    }\n    tempArray = (int *)dataArray[0xd];\n    *dataPointer = originalValue;\n    if (tempArray != (int *)0x0) {\n      if (tempArray != dataArray + 0x11) {\n        reorder_list_080061f0(dataPointer);\n      }\n      dataArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable_00)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable_00)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "process_and_handle_data_08006ac0",
                "puVar1": "dataPointer",
                "iVar2": "tempVariable",
                "piVar3": "dataArray",
                "piVar4": "tempArray",
                "uVar5": "ushortValue",
                "uVar6": "ushortFlag",
                "iVar7": "loopCounter",
                "pcVar8": "functionPointer",
                "iVar9": "iteration",
                "uVar10": "originalValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable_00",
                "bVar11": "conditionalFlag",
                "uVar12": "loopReturnValue"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *dataPointer,int *infoPointer)\n\n{\n  undefined4 returnValue;\n  int count;\n  int *listPointer;\n  uint tempVar;\n  ushort currentState;\n  int tempVar2;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  code *callbackFunction;\n  int tempVar3;\n  uint tempVar4;\n  code *jumpTable;\n  bool flag;\n  \n  if (infoPointer[4] != 0) {\n    if ((dataPointer != (uint *)0x0) && (dataPointer[6] == 0)) {\n      initialize_data_08006cb4();\n    }\n    if (infoPointer == &DAT_08007904) {\n      infoPointer = (int *)dataPointer[1];\n    }\n    else if (infoPointer == (int *)&DAT_08007924) {\n      infoPointer = (int *)dataPointer[2];\n    }\n    else if (infoPointer == (int *)&DAT_080078e4) {\n      infoPointer = (int *)dataPointer[3];\n    }\n    if (*(short *)(infoPointer + 3) != 0) {\n      currentState = *(ushort *)(infoPointer + 3);\n      tempVar = (uint)currentState;\n      if ((int)(tempVar << 0x1c) < 0) {\n        count = infoPointer[4];\n        if (count != 0) {\n          tempVar2 = tempVar << 0x1e;\n          flag = tempVar2 != 0;\n          if (flag) {\n            tempVar2 = 0;\n          }\n          tempVar3 = *infoPointer;\n          if (!flag) {\n            tempVar2 = infoPointer[5];\n          }\n          *infoPointer = count;\n          infoPointer[2] = tempVar2;\n          for (tempVar3 = tempVar3 - count; 0 < tempVar3; tempVar3 = tempVar3 - tempVar2) {\n            tempVar2 = (*(code *)infoPointer[10])(dataPointer,infoPointer[8],count,tempVar3,unusedVar1,unusedVar2);\n            if (tempVar2 < 1) {\n              currentState = *(ushort *)(infoPointer + 3);\n              goto LAB_08006bc6;\n            }\n            count = count + tempVar2;\n          }\n        }\n      }\n      else if (((0 < infoPointer[1]) || (0 < infoPointer[0x10])) &&\n              (callbackFunction = (code *)infoPointer[0xb], callbackFunction != (code *)0x0)) {\n        tempVar4 = *dataPointer;\n        *dataPointer = 0;\n        if ((currentState & 0x1000) == 0) {\n          count = (*callbackFunction)(dataPointer,infoPointer[8],tempVar & 0x1000,1);\n          if ((count == -1) && (tempVar = *dataPointer, tempVar != 0)) {\n            if ((tempVar != 0x1d) && (tempVar != 0x16)) {\n              *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataPointer = tempVar4;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          count = infoPointer[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoPointer + 3) << 0x1d) < 0) &&\n           (count = count - infoPointer[1], infoPointer[0xd] != 0)) {\n          count = count - infoPointer[0x10];\n        }\n        count = (*(code *)infoPointer[0xb])(dataPointer,infoPointer[8],count,0);\n        currentState = *(ushort *)(infoPointer + 3);\n        if ((count == -1) &&\n           ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(infoPointer + 3) = currentState | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        infoPointer[1] = 0;\n        *infoPointer = infoPointer[4];\n        if (((int)((uint)currentState << 0x13) < 0) && ((count != -1 || (*dataPointer == 0)))) {\n          infoPointer[0x15] = count;\n        }\n        listPointer = (int *)infoPointer[0xd];\n        *dataPointer = tempVar4;\n        if (listPointer != (int *)0x0) {\n          if (listPointer != infoPointer + 0x11) {\n            reorder_list_080061f0(dataPointer);\n          }\n          infoPointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "uVar1": "returnValue",
                "iVar2": "count",
                "piVar3": "listPointer",
                "uVar4": "tempVar",
                "uVar5": "currentState",
                "iVar6": "tempVar2",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "pcVar7": "callbackFunction",
                "iVar8": "tempVar3",
                "uVar9": "tempVar4",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar10": "flag"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            reorder_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_data_08006c40",
            "code": "\nvoid initializeData_08006c40(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  fillMemory(data + 0x17,0,8);\n  data[8] = data;\n  data[9] = 0x8006f39;\n  data[10] = 0x8006f5b;\n  data[0xb] = 0x8006f93;\n  data[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_data_08006c40",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_080061e0": "fillMemory",
                "LAB_08006fb6_1": "label"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_and_initialize_memory_08006c88",
            "code": "\nundefined4 * allocate_and_initialize_memory_08006c88(undefined4 mem_size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_and_store_memory_08006288(mem_size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_080061e0(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_08006c88",
                "param_1": "mem_size",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "total_size"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_08006cb4",
            "code": "\nvoid initializeData_08006cb4(undefined4 *dataPointer)\n\n{\n  undefined4 result;\n  undefined4 *auxPtr;\n  \n  if (dataPointer[6] == 0) {\n    dataPointer[0x12] = 0;\n    dataPointer[0x13] = 0;\n    dataPointer[0x14] = 0;\n    auxPtr = &DAT_200000fc;\n    dataPointer[10] = &LAB_08006c34_1;\n    if (dataPointer == &DAT_200000fc) {\n      auxPtr = (undefined4 *)0x1;\n    }\n    if (dataPointer == &DAT_200000fc) {\n      dataPointer[6] = auxPtr;\n    }\n    result = extract_and_initialize_data_08006d14();\n    dataPointer[1] = result;\n    result = extract_and_initialize_data_08006d14(dataPointer);\n    dataPointer[2] = result;\n    result = extract_and_initialize_data_08006d14(dataPointer);\n    dataPointer[3] = result;\n    initialize_data_08006c40(dataPointer[1],4,0);\n    initialize_data_08006c40(dataPointer[2],9,1);\n    initialize_data_08006c40(dataPointer[3],0x12,2);\n    dataPointer[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "dataPointer",
                "uVar1": "result",
                "puVar2": "auxPtr"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "extract_and_initialize_data_08006d14",
            "code": "\nint * extract_and_initialize_data_08006d14(undefined4 *output_ptr,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  int *current_ptr;\n  int *nested_ptr;\n  int **nested_ptr_array;\n  \n  if (DAT_20000114 == 0) {\n    initialize_data_08006cb4(&DAT_200000fc);\n  }\n  nested_ptr_array = (int **)&DAT_20000144;\n  do {\n    nested_ptr = nested_ptr_array[2];\n    current_ptr = nested_ptr_array[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short_type *)(nested_ptr + 3) == 0) {\n        *(undefined2 *)((int)nested_ptr + 0xe) = 0xffff;\n        nested_ptr[0x19] = 0;\n        *(undefined2 *)(nested_ptr + 3) = 1;\n        *nested_ptr = 0;\n        nested_ptr[2] = 0;\n        nested_ptr[1] = 0;\n        nested_ptr[4] = 0;\n        nested_ptr[5] = 0;\n        nested_ptr[6] = 0;\n        fillMemory(nested_ptr + 0x17,0,8,1,input_param_4);\n        nested_ptr[0xd] = 0;\n        nested_ptr[0xe] = 0;\n        nested_ptr[0x12] = 0;\n        nested_ptr[0x13] = 0;\n        return nested_ptr;\n      }\n      nested_ptr = nested_ptr + 0x1a;\n    }\n    if (*nested_ptr_array == (int *)0x0) {\n      current_ptr = (int *)allocate_and_initialize_memory_08006c88(output_ptr,4);\n      *nested_ptr_array = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *output_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    nested_ptr_array = (int **)*nested_ptr_array;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "extract_and_initialize_data_08006d14",
                "param_1": "output_ptr",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "piVar1": "current_ptr",
                "piVar2": "nested_ptr",
                "ppiVar3": "nested_ptr_array",
                "short": "short_type",
                "fill_memory_080061e0": "fillMemory"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_memory_and_assign_flags_08006dc8",
            "code": "\nundefined4 checkMemoryAndAssignFlags_08006dc8(undefined4 result,int inputData,undefined4 *outputFlags,uint *outputValue)\n\n{\n  int resultValue;\n  undefined4 flagValue;\n  undefined stackArray [4];\n  uint localValue;\n  \n  if ((*(short *)(inputData + 0xe) < 0) ||\n     (resultValue = initialize_memory_and_assign_result_08007004(result,(int)*(short *)(inputData + 0xe),stackArray), resultValue < 0)) {\n    *outputValue = 0;\n    if ((int)((uint)*(ushort *)(inputData + 0xc) << 0x18) < 0) {\n      flagValue = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *outputValue = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  flagValue = 0x400;\nLAB_08006e08:\n  *outputFlags = flagValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_memory_and_assign_flags_08006dc8",
                "param_1": "result",
                "param_2": "inputData",
                "param_3": "outputFlags",
                "param_4": "outputValue",
                "iVar1": "resultValue",
                "uVar2": "flagValue",
                "auStack_4c": "stackArray",
                "local_48": "localValue"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "allocate_and_initialize_memory_08006e10",
            "code": "\nvoid allocateAndInitializeMemory_08006e10(int memoryBuffer,int *bufferInfo)\n\n{\n  ushort flags;\n  int allocatedMem;\n  int size;\n  int *tempBuffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(bufferInfo + 3) << 0x1e)) {\n    size = memoryBuffer;\n    tempBuffer = bufferInfo;\n    flags = check_memory_and_assign_flags_08006dc8(memoryBuffer,bufferInfo,&size,&tempBuffer);\n    allocatedMem = allocate_and_store_memory_08006288(memoryBuffer,size);\n    if (allocatedMem != 0) {\n      *(undefined **)(memoryBuffer + 0x28) = &LAB_08006c34_1;\n      *bufferInfo = allocatedMem;\n      *(ushort *)(bufferInfo + 3) = *(ushort *)(bufferInfo + 3) | 0x80;\n      bufferInfo[4] = allocatedMem;\n      bufferInfo[5] = size;\n      if ((tempBuffer != (int *)0x0) &&\n         (allocatedMem = initialize_and_check_08007028(memoryBuffer,(int)*(short *)((int)bufferInfo + 0xe)), allocatedMem != 0)) {\n        *(ushort *)(bufferInfo + 3) = *(ushort *)(bufferInfo + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(bufferInfo + 3) = flags | *(ushort *)(bufferInfo + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(bufferInfo + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(bufferInfo + 3) = *(ushort *)(bufferInfo + 3) & 0xfffc | 2;\n  }\n  *bufferInfo = (int)bufferInfo + 0x47;\n  bufferInfo[4] = (int)bufferInfo + 0x47;\n  bufferInfo[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "allocate_and_initialize_memory_08006e10",
                "param_1": "memoryBuffer",
                "param_2": "bufferInfo",
                "uVar1": "flags",
                "iVar2": "allocatedMem",
                "local_18": "size",
                "local_14": "tempBuffer"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_in_string_08006e90",
            "code": "\nchar * find_character_in_string_08006e90(char *string,char character,int string_length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + string_length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_parameter_08006f00",
            "code": "\nint processParameter_08006f00(uint inputValue)\n\n{\n  int *ptrVar1;\n  undefined4 thunkResult;\n  int value;\n  code *functionPtr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 returnAddress;\n  undefined4 *ptrVar5;\n  \n  ptrVar1 = DAT_200000f8;\n  ptrVar5 = &DAT_200000f8;\n  if (0x1f < inputValue) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  value = DAT_200000f8[0x11];\n  if ((value != 0) && (functionPtr = *(code **)(value + inputValue * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + inputValue * 4) = 0;\n      (*functionPtr)(inputValue);\n    }\n    return 0;\n  }\n  thunkResult = get_one_thunk_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  value = set_default_value_08005740(thunkResult,inputValue,inputValue,0,ptrVar5,unaff_r4,unaff_r5,returnAddress);\n  if ((value == -1) && (DAT_200006a4 != 0)) {\n    *ptrVar1 = DAT_200006a4;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_parameter_08006f00",
                "param_1": "inputValue",
                "piVar1": "ptrVar1",
                "uVar2": "thunkResult",
                "iVar3": "value",
                "pcVar4": "functionPtr",
                "in_lr": "returnAddress",
                "puVar5": "ptrVar5"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "get_one_thunk_08005750",
            "code": "\nundefined4 get_one_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "get_one_thunk_08005750"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_data_08006f38",
            "code": "\nvoid updateData_08006f38(undefined4 programData,int dataPointer)\n\n{\n  int programResult;\n  uint updatedValue;\n  bool isInitialized;\n  \n  programResult = initialize_program_0800706c(programData,(int)*(short *)(dataPointer + 0xe));\n  isInitialized = -1 < programResult;\n  if (isInitialized) {\n    updatedValue = *(int *)(dataPointer + 0x54) + programResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataPointer + 0xc) & 0xffffefff;\n  }\n  if (isInitialized) {\n    *(uint *)(dataPointer + 0x54) = updatedValue;\n  }\n  if (!isInitialized) {\n    *(short *)(dataPointer + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_data_08006f38",
                "param_1": "programData",
                "param_2": "dataPointer",
                "iVar1": "programResult",
                "uVar2": "updatedValue",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "initialize_and_check_program_08006f5a",
            "code": "\nvoid initializeAndCheckProgram_08006f5a(int *outputList,int structAddress,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  undefined4 constantA;\n  undefined4 constantB;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(structAddress + 0xc) << 0x17) < 0) {\n    initialize_and_check_program_08007048(outputList,(int)*(short *)(structAddress + 0xe),0,2);\n  }\n  *(ushort *)(structAddress + 0xc) = *(ushort *)(structAddress + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  result = process_and_validate_data_08005730((int)*(short *)(structAddress + 0xe),paramA,paramB,paramB,paramB,constantA,\n                       constantB,linkRegister);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *outputList = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "initialize_and_check_program_08006f5a",
                "param_1": "outputList",
                "param_2": "structAddress",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "unaff_r4": "constantA",
                "unaff_r5": "constantB",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "initialize_and_check_program_08006f92",
            "code": "\nvoid initializeAndCheckProgram_08006f92(undefined4 param1,int param2)\n\n{\n  int programStatus;\n  ushort updatedValue;\n  bool isError;\n  \n  programStatus = initialize_and_check_program_08007048(param1,(int)*(short *)(param2 + 0xe));\n  isError = programStatus == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = programStatus;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "initialize_and_check_program_08006f92",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "programStatus",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "initialize_memory_and_assign_result_08007004",
            "code": "\nvoid initialize_memory_and_assign_result_08007004(int *output_pointer,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_memory_0800571a(param_2,param_3,param_3,0,param_4);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output_pointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "initialize_memory_and_assign_result_08007004",
                "param_1": "output_pointer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "initialize_and_check_08007028",
            "code": "\nvoid initializeAndCheck_08007028(int *resultPointer,undefined4 inputValue)\n\n{\n  int initResult;\n  \n  DAT_200006a4 = 0;\n  initResult = initialize_08005724(inputValue);\n  if ((initResult == -1) && (DAT_200006a4 != 0)) {\n    *resultPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "initialize_and_check_08007028",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "initialize_and_check_program_08007048",
            "code": "\nvoid initialize_and_check_program_08007048(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_200006a4 = 0;\n  init_result = initialize_program_08005728(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "initialize_and_check_program_08007048",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "initialize_program_0800706c",
            "code": "\nvoid initialize_program_0800706c(int *output_value,undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_program_0800706c_0800572c(input_value_1,input_value_2,input_value_3,input_value_3,input_value_3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output_value = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "initialize_program_0800706c",
                "param_1": "output_value",
                "param_2": "input_value_1",
                "param_3": "input_value_2",
                "param_4": "input_value_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "handle_data_08007090",
            "code": "\nvoid handle_data_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_data_08007090;\n  process_and_handle_data_08007090_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "handle_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 176543,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}