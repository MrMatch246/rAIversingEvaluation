{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_value_at_address_08002470",
                "param_1": "input_value",
                "DAT_08002490": "address_data"
            },
            "code": "void set_value_at_address_08002470(uint input_value) {\n    uint* address_ptr = (uint*)(DAT_08002490 + 0xc);\n    uint current_value = *address_ptr;\n    uint new_value = (input_value & 7) << 8 | (current_value & 0xf8ff) | 0x5fa0000;\n    *address_ptr = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "set_value_at_address_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "set_memory_permissions_08007004",
                "param_1": "target_address",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "saved_address",
                "iVar2": "result"
            },
            "code": "void set_memory_permissions_08007004(int *target_address, unsigned int start_address, unsigned int size, unsigned int permissions, unsigned int page_size) {\n  undefined *saved_address = PTR_saved_address;\n  *(unsigned int *)PTR_saved_address = 0;\n  int result = set_memory_permissions_08007004_0800571a(start_address, size, size, permissions, page_size);\n  if ((result == -1) && (*(int *)saved_address != 0)) {\n    *target_address = *(int *)saved_address;\n  }\n  return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_arrays_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_char_in_string_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_char_in_string_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_char_in_string_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006e90",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_value_to_22_08005740",
                "PTR_DAT_0800574c": "data_pointer"
            },
            "code": "int set_value_to_22_08005740(void)\n{\n  int* PTR_DAT_0800574c = (int*) PTR_DAT_0800574c;\n  *PTR_DAT_0800574c = 22;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_value_to_22_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_or_shift_left_08006158",
                "param_1": "input_value",
                "param_2": "concat_result",
                "DAT_08006170": "some_constant",
                "CONCAT44": "concatenate_values"
            },
            "code": "longlong calculate_result_or_shift_left_08006158(uint32_t input_value, uint64_t concat_result) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(input_value, 2);\n  }\n  return (uint64_t)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_result_or_shift_left_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      calculate_and_decrement_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = get_value_from_pointer_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_value_from_pointer_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_value_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_value_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "execute_function_with_flags_08004ec4",
                "param_1": "param",
                "subtract_four_from_value_08004e70": "subtract_four_from_value",
                "iVar1": "function_address",
                "code": "code_pointer",
                "flag1": "flag_one",
                "flag2": "flag_two",
                "set_flags_08002c10": "set_flags"
            },
            "code": "void execute_function_with_flags_08004ec4(int param)\n{\n  int function_address = subtract_four_from_value();\n  code* function_pointer = *(code**)(function_address + 0x60);\n  char flag1 = *(char*)(function_address + 0x5c);\n  char flag2 = *(char*)(function_address + 0x2c);\n  \n  if (function_pointer != (code*)0x0 && flag1 == '\\x01' && flag2 != ' ')\n  {\n    (*function_pointer)(function_address + 0x68);\n  }\n  \n  set_flags(param);\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "execute_function_with_flags_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_string_end_08000178",
                "param_1": "string",
                "pcVar2": "current_position",
                "pcVar3": "current_position",
                "cVar1": "current_char"
            },
            "code": "char * get_string_end_08000178(char *string) {\n  char current_char;\n  char *current_position = string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "imported": false,
            "current_name": "get_string_end_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_block_08006c88",
                "param_1": "starting_address",
                "param_2": "num_blocks",
                "puVar1": "memory_block_address",
                "iVar2": "memory_block_size"
            },
            "code": "undefined4* allocate_and_initialize_memory_block_08006c88(undefined4 starting_address, int num_blocks){\n    undefined4* memory_block_address;\n    int memory_block_size = (num_blocks - 1) * 0x68;\n    memory_block_address = (undefined4*)allocate_memory_block_08006288(starting_address, memory_block_size + 0x74);\n    if (memory_block_address != (undefined4*)0x0){\n        *memory_block_address = 0;\n        memory_block_address[1] = num_blocks;\n        memory_block_address[2] = memory_block_address + 3;\n        fill_array_with_value_080061e0(memory_block_address + 3, 0, memory_block_size + 0x68);\n    }\n    return memory_block_address;\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "execute_function_if_bit_set_080060e4",
                "iVar1": "num_bits_set",
                "PTR_DAT_08006100": "ptr_dat",
                "execute_function_080060d4": "execute_function",
                "count_bits_set_08005f8c": "count_bits_set"
            },
            "code": "void execute_function_if_bit_set_080060e4() {\n  int num_bits_set = count_bits_set();\n  int* ptr = PTR_DAT_08006100 + num_bits_set * 0x14 + 0xc;\n  if (*ptr != 0) {\n    execute_function_080060d4();\n  }\n  return;\n}",
            "called": [
                "FUN_080060d4",
                "FUN_08005f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "execute_function_if_bit_set_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_uVar1_from_param_0800258c",
                "param_1": "param",
                "uVar1": "uVar1",
                "puVar2": "puVar2",
                "PTR_DAT_0800261c": "PTR_DAT_0800261c",
                "PTR_DAT_08002620": "PTR_DAT_08002620"
            },
            "code": "uint get_uVar1_from_param_0800258c(uint **param) {\n  uint uVar1;\n  uint *puVar2;\n  \n  if (*(char *)((int)param + 0x21) != '\\x02') {\n    param[14] = (uint *)0x4;\n    return 1;\n  }\n  **param &= 0xfffffff1;\n  **param &= 0xfffffffe;\n  puVar2 = *param;\n  if (puVar2 == PTR_DAT_0800261c) {\n    uVar1 = 1;\n  }\n  else if (puVar2 == PTR_DAT_0800261c + 5) {\n    uVar1 = 0x10;\n  }\n  else if (puVar2 == PTR_DAT_0800261c + 10) {\n    uVar1 = 0x100;\n  }\n  else if (puVar2 == PTR_DAT_0800261c + 0xf) {\n    uVar1 = 0x1000;\n  }\n  else if (puVar2 == PTR_DAT_0800261c + 0x14) {\n    uVar1 = 0x10000;\n  }\n  else if (puVar2 == PTR_DAT_0800261c + 0x19) {\n    uVar1 = 0x100000;\n  }\n  else {\n    uVar1 = 0x1000000;\n  }\n  *(uint *)(PTR_DAT_08002620 + 4) = uVar1;\n  *(char *)((int)param + 0x21) = 1;\n  *(uint *)(param + 8) = 0;\n  if (param[13] != (uint *)0x0) {\n    (*(code *)param[13])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_080046b8",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "get_uVar1_from_param_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "check_ptr_dat_if_not_null_08004e20",
                "PTR_DAT_08004e30": "ptr_dat",
                "check_flags_08003f18": "check_flags"
            },
            "code": "void check_ptr_dat_if_not_null_08004e20(void)\n{\n  int* PTR_DAT_08004e30 = *(int *)PTR_DAT_08004e30;\n  if (PTR_DAT_08004e30 != 0) {\n    check_flags();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "check_ptr_dat_if_not_null_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_input_080032b4",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_1",
                "puVar3": "ptr_2"
            },
            "code": "uint32_t process_input_080032b4(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    (*input)[1] &= 0xfffff8ff;\n    **input |= 1;\n    **input &= 0xfffffbff;\n    uint32_t *ptr_1 = *input;\n    if ((ptr_1[1] & 0x800) != 0)\n    {\n        if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*'))\n        {\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n        }\n        else\n        {\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n        }\n    }\n    if (*(int16_t *)((int)input + 0x2a) != 0)\n    {\n        if ((ptr_1[5] & 4) != 0)\n        {\n            uint32_t *ptr_2 = input[9];\n            input[9] = (uint32_t *)((int)ptr_2 + 1);\n            *(char *)ptr_2 = (char)ptr_1[4];\n            *(int16_t *)((int)input + 0x2a) -= 1;\n        }\n        if (((*input)[5] & 0x40) != 0)\n        {\n            ptr_1 = input[9];\n            input[9] = (uint32_t *)((int)ptr_1 + 1);\n            *(char *)ptr_1 = (char)(*input)[4];\n            *(int16_t *)((int)input + 0x2a) -= 1;\n        }\n        input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n    }\n    if (input[0x10] == (uint32_t *)0x0)\n    {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')'))\n        {\n            input[0xb] = PTR_DAT_080033b4;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            execute_function_with_flags_08004ec4();\n        }\n        else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"'))\n        {\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            do_nothing_08002ca4();\n        }\n    }\n    else\n    {\n        process_input_080032b4_0800316c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4",
                "FUN_08004ec4",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_08004d06",
                "param_1": "first_num",
                "param_2": "second_num"
            },
            "code": "int compare_and_return_08004d06(int first_num, int second_num) {\n    if (first_num != second_num) {\n        if (first_num == 0) {\n            return second_num;\n        }\n        if (second_num == 0) {\n            return first_num;\n        }\n        first_num = 0;\n    }\n    return first_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "find_offset_080056d8",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "stack_pointer"
            },
            "code": "int find_offset_080056d8(int offset)\n{\n  int current_offset;\n  undefined *stack_pointer;\n  if (*(int *)PTR_DAT_08005708 == 0) {\n    *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n  }\n  current_offset = *(int *)PTR_DAT_08005708;\n  stack_pointer = (undefined *)(offset + current_offset);\n  if (stack_pointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = stack_pointer;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "find_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "process_string_080019f6",
                "param_1": "string_address",
                "iVar1": "end_of_string",
                "uVar2": "string_ending",
                "uVar3": "string_info[0]",
                "uVar4": "string_info[1]",
                "uVar5": "string_terminating",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void process_string_080019f6(int string_address) {\n  int end_of_string;\n  int string_terminated;\n  int *string_info = *(int **)(string_address + 0x3c);\n  int *string_data = *(int **)(string_address + 0x38);\n  int string_length = *(int *)(string_address + 0x68);\n  int string_ending = *(int *)(string_address + 0x6c);\n\n  end_of_string = is_end_of_string(string_info[0], string_info[1], string_length, string_ending);\n\n  if (end_of_string == 0) {\n    string_terminated = is_string_terminated(string_info[0], string_info[1], string_length, string_ending);\n    if (string_terminated != 0) {\n      *(int *)(string_address + 0x48) = string_data[1];\n      *(int *)(string_address + 0x4c) = *(int *)(string_address + 100);\n    }\n  } else {\n    *(int *)(string_address + 0x48) = string_info[0];\n    *(int *)(string_address + 0x4c) = string_info[1];\n  }\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "process_string_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_string_08002f9c",
                "param_1": "input_string",
                "puVar1": "string_pointer",
                "current_char": "current_char",
                "string_length": "string_length",
                "flag_pointer": "flag_pointer",
                "PTR_DAT_080040b4": "do_nothing_08002f9a",
                "PTR_DAT_080040b8": "do_nothing_08002c50"
            },
            "code": "int process_string_08002f9c(uint **input_string)\n{\n  uint *string_pointer;\n  char current_char;\n  short string_length;\n  uint *flag_pointer;\n  \n  current_char = *(char *)((int)input_string + 0x3d);\n  string_length = *(short *)((int)input_string + 0x2a);\n  string_pointer = *input_string;\n  flag_pointer = input_string[0xb];\n  \n  if (current_char == '\"') {\n    if (string_length < 4) {\n      if (string_length - 2 < 2) {\n        if (flag_pointer == (uint *)0x2) {\n          *string_pointer = *string_pointer | 0x400;\n        }\n        else {\n          *string_pointer = *string_pointer & 0xfffffbff;\n          *string_pointer = *string_pointer | 0x800;\n        }\n        string_pointer[1] = string_pointer[1] & 0xfffffbff;\n      }\n      else {\n        if (flag_pointer == (uint *)0x2) {\n          *string_pointer = *string_pointer | 0x400;\n        }\n        else {\n          *string_pointer = *string_pointer & 0xfffffbff;\n        }\n        string_pointer[1] = string_pointer[1] & 0xfffff8ff;\n        *input_string[9] = (uint)((char)string_pointer[4]);\n        input_string[9] = (uint *)((int)input_string[9] + 1);\n        string_length = string_length - 1;\n        *(char *)((int)input_string + 0x3d) = 0x20;\n        input_string[0xc] = (uint *)0x0;\n        current_char = *(char *)((int)input_string + 0x3e);\n        *(undefined *)((int)input_string + 0x3e) = 0;\n        if (current_char == '@') {\n          PTR_DAT_080040b4();\n        }\n        else {\n          PTR_DAT_080040b8();\n        }\n      }\n    }\n    else {\n      *input_string[9] = (uint)((char)string_pointer[4]);\n      input_string[9] = (uint *)((int)input_string[9] + 1);\n      string_length = string_length - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_string_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "param_1": "data_address",
                "param_2": "new_data",
                "param_3": "bit_position",
                "param_4": "bit_value",
                "iVar1": "is_valid",
                "uVar2": "data_index"
            },
            "code": "void update_data_08005510(int data_address, int new_data, int bit_position, int bit_value) {\n  if (data_address != 0) {\n    int is_valid = is_data_valid();\n    if (is_valid == 0) {\n      uint data_index = (uint)*(byte *)(data_address + 0x44);\n      *(int *)(data_indexes + data_index * 4) = data_address;\n      *(int *)(data_values + data_index * 4) = new_data;\n      set_bits_in_memory((int)*(char *)(data_address + 0x5a), bit_position, 1, data_index, bit_value);\n      set_bit_at_position((int)*(char *)(data_address + 0x5a));\n      validate_data(*(int *)(data_checksums + data_index * 4), data_address + 0x45, 1);\n    }\n  }\n}\n",
            "called": [
                "FUN_08002494",
                "FUN_080024f8",
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "update_data_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_one_08005750"
            },
            "code": "int get_one_08005750() {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "get_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_params_08002cf2",
                "param_1": "param_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "var1",
                "uVar2": "var2",
                "flag": "flag"
            },
            "code": "int process_params_08002cf2(int *param_array, int param_2, int param_3, int param_4)\n{\n  int flag = *(int *)(*param_array + 0x18);\n  int uVar1;\n  if ((flag & 0x80) == 0) {\n    uVar1 = *(int *)(param_array + 3);\n  }\n  else {\n    uVar1 = *(int *)(param_array + 6);\n  }\n  process_params_08002cf2_helper(param_array, (*(int *)(*param_array + 0x18) & 4) == 0, uVar1, flag, param_4);\n  return 0;\n}\n",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_params_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "block_start_address",
                "param_2": "block_size",
                "puVar1": "previous_block_address",
                "uVar2": "new_block_size",
                "puVar3": "current_block_address",
                "iVar4": "remaining_block_size",
                "puVar5": "temporary_block_address",
                "uVar6": "remaining_block_size",
                "puVar7": "previous_block_address",
                "uVar8": "new_block_size",
                "PTR_DAT_08006340": "block_list_start_address",
                "PTR_DAT_0800633c": "block_list_head_address",
                "do_nothing_08006eac": "do_nothing_1",
                "do_nothing_08006eae": "do_nothing_2",
                "block_header_size": "header_size",
                "block_footer_size": "footer_size",
                "block_size_with_overhead": "block_size_with_overhead",
                "remaining_block_size": "remaining_block_size",
                "new_block_size": "new_block_size"
            },
            "code": "uint allocate_memory_block_08006288(uint *block_start_address, uint block_size)\n{\n  uint *previous_block_address;\n  uint *current_block_address;\n  uint block_header_size;\n  uint block_footer_size;\n  uint block_size_with_overhead;\n  uint remaining_block_size;\n  uint new_block_size;\n\n  block_header_size = 8;\n  block_footer_size = 4;\n  block_size_with_overhead = (block_size + 3 & 0xfffffffc) + block_header_size + block_footer_size;\n  if (block_size_with_overhead < 0xc) {\n    block_size_with_overhead = 0xc;\n  }\n  if (((int)block_size_with_overhead < 0) || (block_size_with_overhead < block_size)) {\n    *block_start_address = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    previous_block_address = PTR_DAT_08006340;\n    current_block_address = *(uint **)PTR_DAT_0800633c;\n    while (current_block_address != (uint *)0x0) {\n      remaining_block_size = *current_block_address - block_size_with_overhead;\n      if (-1 < (int)remaining_block_size) {\n        if (remaining_block_size < 0xc) {\n          if (previous_block_address == current_block_address) {\n            new_block_size = previous_block_address[1];\n            *(uint *)PTR_DAT_0800633c = new_block_size;\n          }\n          else {\n            new_block_size = current_block_address[1];\n          }\n          if (previous_block_address != current_block_address) {\n            previous_block_address[1] = new_block_size;\n            previous_block_address = current_block_address;\n          }\n        }\n        else {\n          *current_block_address = remaining_block_size;\n          *(uint *)((int)current_block_address + remaining_block_size) = block_size_with_overhead;\n          previous_block_address = (uint *)((int)current_block_address + remaining_block_size);\n        }\n        do_nothing_08006eae(block_start_address);\n        new_block_size = (int)previous_block_address + 0xbU & 0xfffffff8;\n        remaining_block_size = new_block_size - (int)(previous_block_address + 1);\n        if (remaining_block_size != 0) {\n          *(int *)((int)previous_block_address + remaining_block_size) = -remaining_block_size;\n          return new_block_size;\n        }\n        return new_block_size;\n      }\n      previous_block_address = current_block_address;\n      current_block_address = (uint *)current_block_address[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      new_block_size = find_and_set_offset_08006920(block_start_address);\n      *(undefined4 *)previous_block_address = new_block_size;\n    }\n    current_block_address = (uint *)find_and_set_offset_08006920(block_start_address,block_size_with_overhead);\n    if ((current_block_address != (uint *)0xffffffff) &&\n       ((previous_block_address = (uint *)((int)current_block_address + 3U & 0xfffffffc), current_block_address == previous_block_address ||\n        (remaining_block_size = find_and_set_offset_08006920(block_start_address,(int)previous_block_address - (int)current_block_address), remaining_block_size != -1)))) {\n      *previous_block_address = block_size_with_overhead;\n      do_nothing_08006eae(block_start_address);\n      new_block_size = (int)previous_block_address + 0xbU & 0xfffffff8;\n      remaining_block_size = new_block_size - (int)(previous_block_address + 1);\n      if (remaining_block_size != 0) {\n        *(int *)((int)previous_block_address + remaining_block_size) = -remaining_block_size;\n        return new_block_size;\n      }\n      return new_block_size;\n    }\n    *block_start_address = 0xc;\n    do_nothing_08006eae(block_start_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae",
                "FUN_08006920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "set_value_if_not_set_08001f84_if_flag_not_set_08002004",
                "param_1": "param_array",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_080020e8": "PTR_DAT_080020e8",
                "DAT_080020ec": "PTR_DAT_080020ec"
            },
            "code": "int set_value_if_not_set_08001f84_if_flag_not_set_08002004(undefined4 *param_array)\n{\n  int result = 0;\n  char *flag = (char *)(param_array + 9);\n  if (*flag != '\\x01') {\n    *flag = 1;\n    result = set_value_if_not_set_08001f84();\n    if (result == 0) {\n      int *param_10 = param_array + 10;\n      *param_10 = (*param_10 & 0xfffffcfe) | 0x100;\n      undefined4 *ptr = (undefined4 *)*param_array;\n      if ((ptr == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        *param_10 |= 0x100000;\n        if ((*(uint *)(DAT_080020ec + 4) & 0x400) != 0) {\n          *param_10 = (*param_10 & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        *param_10 &= 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          *param_10 = (*param_10 & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((*param_10 & 0x1000) == 0) {\n        param_array[0xb] = 0;\n      }\n      else {\n        param_array[0xb] &= 0xfffffff9;\n      }\n      *flag = 0;\n      *ptr = 0xfffffffd;\n      param_array = (undefined4 *)*param_array;\n      if (((param_array[2] & 0xe0000) == 0xe0000) && ((param_array != DAT_080020e8) || ((DAT_080020e8[-0xff] & 0xf0000) == 0))) {\n        param_array[2] |= 0x500000;\n      }\n      else {\n        param_array[2] |= 0x100000;\n      }\n    }\n    else {\n      *flag = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "set_value_if_not_set_08001f84_if_flag_not_set_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "decode_value_08005754",
                "param_1": "value",
                "bVar1": "is_valid_range",
                "cVar2": "character",
                "uVar3": "decoded_value",
                "uVar4": "bits_to_shift"
            },
            "code": "uint decode_value_08005754(uint value)\n{\n  bool is_valid_range;\n  char character;\n  uint decoded_value;\n  uint bits_to_shift;\n  \n  if (value < 14) {\n    if (value + 46 < 60) {\n      is_valid_range = true;\n    }\n    else {\n      is_valid_range = false;\n    }\n  }\n  else {\n    is_valid_range = value < 60;\n  }\n  \n  if (is_valid_range) {\n    if (value < 14) {\n      value += 46;\n    }\n    character = PTR_DAT_080057ac[value];\n  }\n  else {\n    character = -1;\n  }\n  \n  if (character == -1) {\n    decoded_value = 0;\n  }\n  else {\n    decoded_value = find_and_decode_value_08005754_08004a4c();\n    bits_to_shift = *(uint *)PTR_DAT_080057b0;\n    if (bits_to_shift != 12) {\n      if (bits_to_shift < 12) {\n        return decoded_value >> (12 - bits_to_shift & 0xff);\n      }\n      return decoded_value << (bits_to_shift - 12 & 0xff);\n    }\n  }\n  return decoded_value;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "count",
                "param_2": "value",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_08005fc8(int count, int value, undefined4 param_3, undefined4 param_4)\n{\n  // Check if count is 1\n  if (count != 1) {\n    return;\n  }\n  // If value is 0xffff, initialize data\n  if (value == 0xffff) {\n    // Initialize values\n    undefined *data_ptr = PTR_DAT_08006068;\n    *data_ptr = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    // Call calculate_result_or_shift_left_08006112 with appropriate parameters\n    calculate_result_or_shift_left_08006112(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, data_ptr, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_and_store_byte_at_address_08002ab8",
                "param_1": "param_array",
                "pbVar1": "byte_ptr",
                "short": "short_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*short_ptr",
                "*(uint *)(*param_1 + 0x10)": "*uint_ptr"
            },
            "code": "int increment_and_store_byte_at_address_08002ab8(int *param_array)\n{\n  short *short_ptr = (short *)(param_array + 0x2a);\n  if (*short_ptr != 0)\n  {\n    byte *byte_ptr = (byte *)param_array[9];\n    param_array[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*param_array + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_and_store_byte_at_address_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "execute_function_080068f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "ptr1",
                "uVar2": "var1",
                "uStack_c": "var2",
                "uStack_8": "var3",
                "uStack_4": "var4",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c",
                "FUNC_08006cb4": "cleanup",
                "FUNC_08006394": "call_function"
            },
            "code": "void execute_function_080068f0(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  int ptr1 = *(int *)PTR_PTR_DAT_0800691c;\n  undefined4 var1 = arg1;\n  undefined4 var2 = arg2;\n  undefined4 var3 = arg3;\n  undefined4 var4 = arg4;\n  if ((ptr1 != 0) && (*(int *)(ptr1 + 0x18) == 0)) {\n    cleanup(ptr1);\n  }\n  call_function(ptr1, *(undefined4 *)(ptr1 + 8), arg1, &var2, var1, &var2);\n  return;\n}",
            "called": [
                "FUN_08006394",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "execute_function_080068f0",
            "code_backup": "\nvoid FUN_080068f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_0800691c;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar1);\n  }\n  FUNC_08006394(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_char_in_string_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = calculate_length_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "update_params_0800138e",
                "param_1": "address",
                "param_2": "flags",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "current_flags",
                "readAndUpdateParams_08001310": "read_and_update_params"
            },
            "code": "void update_params_0800138e(int address, unsigned int flags, unsigned int param_3, unsigned int param_4)\n{\n  unsigned char current_flags = *(unsigned char *)(address + 0x14);\n  *(unsigned char *)(address + 0x14) = current_flags | 0x04;\n  read_and_update_params_0800138e(address, current_flags | 0x0c, 0, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "update_params_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "validate_and_update_input_0800598a",
                "param_1": "input",
                "iVar1": "validation_result",
                "uVar2": "input_index",
                "local_9": "input_character"
            },
            "code": "void validate_and_update_input_0800598a(int input){\n                          int validation_result;\n                          ushort input_index;\n                          undefined input_character;\n                          \n                          validation_result = validate_input(input, &input_character);\n                          if ((validation_result == 0) && (input_index = *(short *)(input + 0x60) + 1U & 0x3f, input_index != *(ushort *)(input + 0x62))) {\n                            *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = input_character;\n                            *(ushort *)(input + 0x60) = input_index;\n                          }\n                          return;\n                        }",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_update_input_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_values_08001c88",
                "DAT_08001ca8": "flag_ptr"
            },
            "code": "int set_flag_and_values_08001c88(void)\n{\n  int* DAT_08001ca8 = DAT_08001ca8;\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  set_value_at_address_08002470(3);\n  check_and_set_address_08001c3c(0xf);\n  do_nothing_08001c3a();\n  return 0;\n}",
            "called": [
                "FUN_08001c3a",
                "FUN_08001c3c",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_values_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "check_and_set_flag_08001a44",
                "param_1": "address",
                "param_2": "flag",
                "uVar1": "is_flag_set",
                "*(char *)(param_1 + 0x70)": "*(char *)(address + 0x70)",
                "process_string_080019f6()": "process_string()",
                "*(undefined *)(param_1 + 0x70)": "*(bool *)(address + 0x70)"
            },
            "code": "void check_and_set_flag_08001a44(int address, int flag)\\n{\\n  bool is_flag_set;\\n  if (flag == 1) {\\n    is_flag_set = true;\\n    if (*(char *)(address + 0x70) == \"\\0\") {\\n      process_string();\\n    }\\n  }\\n  else {\\n    is_flag_set = false;\\n  }\\n  *(bool *)(address + 0x70) = is_flag_set;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "process_input_08002c54",
                "param_1": "input_array",
                "pbVar2": "input_byte",
                "cVar1": "input_char"
            },
            "code": "int process_input_08002c54(int *input_array){\n  char input_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *input_byte = (byte *)input_array[9];\n    input_array[9] = (int)(input_byte + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*input_byte;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (input_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_params_080043b4",
                "param_1": "params",
                "param_2": "param_count",
                "param_3": "expected_result",
                "param_4": "memory_location",
                "param_5": "max_value",
                "iVar1": "current_value",
                "*param_1": "**params",
                "bitwise_operation": "bitwise_result"
            },
            "code": "uint check_params_080043b4(uint **params, uint param_count, uint expected_result, int memory_location, uint max_value) {\n  int current_value;\n  do {\n    uint bitwise_operation = param_count & ~**params;\n    if ((bitwise_operation == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_value == 0xffffffff) || ((max_value != 0) && (current_value = get_value_from_pointer_08001cc4(), (uint)(current_value - memory_location) <= max_value)));\n  (*params)[3] &= 0xfffffe5f;\n  (*params)[5] &= 0xfffffffe;\n  *(undefined *)((int)params + 0x39) = 0x20;\n  *(undefined *)((int)params + 0x3a) = 0x20;\n  *(undefined *)(params + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_params_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_device_0800441a",
                "param_1": "device_ptr",
                "do_nothing_08004418": "do_nothing",
                "PTR_": "device_ptr",
                "DAT_": "data_"
            },
            "code": "int initialize_device_0800441a(int *PTR_)\n{\n    if (PTR_ != NULL) {\n        if (*(char *)((int)PTR_ + 0x39) == '\\0') {\n            *(undefined *)(PTR_ + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)PTR_ + 0x39) = 0x24;\n        *(uint *)(*PTR_ + 0xc) &= 0xffffdfff;\n        calculate_values(PTR_);\n        *(uint *)(*PTR_ + 0x10) &= 0xffffb7ff;\n        *(uint *)(*PTR_ + 0x14) &= 0xffffffd5;\n        *(uint *)(*PTR_ + 0xc) |= 0x2000;\n        PTR_[0xf] = 0;\n        *(undefined *)((int)PTR_ + 0x39) = 0x20;\n        *(undefined *)((int)PTR_ + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "initialize_device_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_pointer_08004d18",
                "PTR_DAT_08004d28": "function_pointer_data",
                "PTR_DAT_08004d2c": "argument_data"
            },
            "code": "void execute_function_if_not_null_pointer_08004d18() {\n  code **function_pointer = *(code **)PTR_DAT_08004d28;\n  if (function_pointer != (code *)0x0) {\n    (*function_pointer)(*(undefined4 *)PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_pointer_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_080006d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "msb",
                "unaff_r4": "temp1",
                "uVar2": "temp3",
                "uVar3": "result1",
                "in_r12": "mask",
                "bVar4": "check1",
                "bitMask": "bitMask",
                "uVar4": "result2",
                "carry": "carry",
                "shift": "shift",
                "mask": "mask",
                "shiftValue": "shiftValue"
            },
            "code": "ulonglong calculate_080006d4(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1, temp2, temp3, temp4;\n  bool check1, check2;\n  temp1 = input1;\n  temp2 = input2;\n  temp3 = input3;\n  temp4 = input4;\n  uint mask = 0x80000000;\n  uint bitMask = 0x100000;\n  uint result1, result2;\n  uint shiftValue = 0x14;\n  if (temp4 >> shiftValue != input4 && input2 != input1 && temp4 >> shiftValue != input1) {\n    check1 = (input1 | (input2 << 1)) == 0;\n    if (!check1) {\n      check1 = (input3 | (input4 << 1)) == 0;\n    }\n    if (check1) {\n      return ((input2 ^ input4) & mask) << 0x20;\n    }\n    if (input4 == 0) {\n      uint carry = 0;\n      uint shift = 0;\n      do {\n        uint msb = input1 & mask;\n        input1 = input1 << 1;\n        temp2 = (temp2 * 2) + (uint)(msb != 0) + carry;\n        carry = temp2 >> 0x20;\n        shift++;\n      } while ((temp2 & bitMask) == 0);\n      temp2 = temp2 | (input2 & mask);\n      if (temp4 >> shiftValue != 0) {\n        return ((ulonglong)(temp2) << 0x20) | input1;\n      }\n    }\n    uint carry = 0;\n    uint shift = 0;\n    do {\n      uint msb = input3 & mask;\n      input3 = input3 << 1;\n      temp4 = (temp4 * 2) + (uint)(msb != 0) + carry;\n      carry = temp4 >> 0x20;\n      shift++;\n    } while ((temp4 & bitMask) == 0);\n    result1 = temp2;\n    result2 = input1;\n    return ((ulonglong)(result1) << 0x20) | result2;\n  }\n  check1 = (input1 | (input2 << 1)) == 0;\n  if (check1) {\n    temp2 = input4;\n    temp1 = input3;\n  }\n  if (!check1) {\n    check2 = (input3 | (input4 << 1)) == 0;\n  }\n  result1 = temp2;\n  result2 = temp1;\n  if (((!check2) && ((input2 != input1 || ((input1 | (input2 << 0xc)) == 0)))) && ((temp4 >> shiftValue != input4 || (temp1 = input3, result1 = input4, (input3 | (input4 << 0xc)) == 0)))) {\n    return ((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n  }\n  return ((ulonglong)(result1) << 0x20) | result2 | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_with_params_08006174",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "function_param_3_ptr",
                "param_4": "function_param_4",
                "uStack_8": "local_param_3",
                "uStack_4": "local_param_5"
            },
            "code": "void execute_function_with_params_08006174(undefined4 function_ptr, undefined4 param_1, undefined4 param_2, undefined4* param_3_ptr, undefined4 param_4) {\n    undefined4 local_param_3 = *param_3_ptr;\n    undefined4 local_param_5 = param_1;\n    FUNC_08006394(*(undefined4 *)PTR_PTR_DAT_08006194, param_1, param_2, &local_param_3, local_param_5, &local_param_3);\n    return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "read_integer_from_input_08007028",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "pointer_to_data",
                "iVar2": "integer_from_input"
            },
            "code": "void read_integer_from_input_08007028(int *output, undefined4 input){\n  undefined *pointer_to_data = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int integer_from_input = get_one_08005724(input);\n  if ((integer_from_input == -1) && (*(int *)pointer_to_data != 0)) {\n    *output = *(int *)pointer_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "read_integer_from_input_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_bits_in_memory_08002494",
                "param_1": "offset",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "bits_to_set",
                "DAT_080024f0": "constant_data_1",
                "DAT_080024f4": "constant_data_2"
            },
            "code": "void set_bits_in_memory_08002494(uint offset, uint mask, uint value) {\n  uint shift_amount = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint bits_to_set = 7 - shift_amount;\n  if (bits_to_set > 3) {\n    bits_to_set = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint bits_to_keep = (1 << (shift_amount & 0xff)) - 1U;\n  uint bits_to_shift = (mask & ((1 << (bits_to_set & 0xff)) - 1U)) << (shift_amount & 0xff);\n  uint bits_to_write = (value & ((1 << (shift_amount & 0xff)) - 1U));\n  uint bits_to_set_and_keep = bits_to_shift | bits_to_keep;\n  uint bits_to_write_and_keep = bits_to_write & bits_to_keep;\n  uint bits_to_write_and_set = bits_to_write & bits_to_set_and_keep;\n  uint result = bits_to_write_and_set | bits_to_write_and_keep;\n  if ((int)offset < 0) {\n    *(char *)(DAT_080024f4 + (offset & 0xf)) = (char)(result << 4);\n  }\n  else {\n    *(char *)(offset + 0xe000e400) = (char)(result << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = find_value_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      execute_function_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        execute_function_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_value_or_return_negative_one_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        update_bits_08002624(uVar5,&local_20);\n        uVar5 = set_flag_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_value_or_return_negative_one_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        update_bits_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08004884",
                "FUN_08002624",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_080068f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005384",
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_in_array_080055bc",
                "param_1": "search_value",
                "uVar1": "index"
            },
            "code": "uint find_index_in_array_080055bc(int search_value)\n{\n  uint index;\n  if (search_value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (search_value == *(int *)(PTR_DAT_080055dc + index * 4)) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "imported": false,
            "current_name": "find_index_in_array_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "validate_and_store_params_08001960",
                "param_1": "obj",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "iVar1": "result",
                "puVar2": "ptr",
                "uVar3": "ptrVal1",
                "uVar4": "ptrVal2",
                "uVar5": "ptrVal3",
                "uVar6": "ptrVal4",
                "isTerminated": "isTerminated",
                "isEndOfString": "isEndOfString",
                "*puVar2": "*ptr",
                "puVar2[1]": "ptr[1]"
            },
            "code": "void validate_and_store_params_08001960(int obj, int param1, int param2, int param3, int param4, int param5) {\\n  int result = check_params_and_return_result(param3, param4, param5, param4, param4);\\n  if (result == 0) {\\n    *(int *)(obj + 0x60) = param3;\\n    *(int *)(obj + 100) = param4;\\n    *(int *)(obj + 0x68) = param5;\\n    *(int *)(obj + 0x6c) = param4;\\n    if (*(char *)(obj + 0x70) != \"\\0\") {\\n      int *ptr = *(int **)(obj + 0x3c);\\n      int ptrVal1 = *ptr;\\n      int ptrVal2 = ptr[1];\\n      int isTerminated = is_string_terminated(param5, param4, ptrVal1, ptrVal2);\\n      if (isTerminated == 0) {\\n        int isEndOfString = is_end_of_string(param3, param4, ptrVal1, ptrVal2);\\n        if (isEndOfString != 0) {\\n          *ptr = param3;\\n          ptr[1] = param4;\\n        }\\n      }\\n      else {\\n        *ptr = param5;\\n        ptr[1] = param4;\\n      }\\n      int ptrVal3 = *(int *)(obj + 0x48);\\n      int ptrVal4 = *(int *)(obj + 0x4c);\\n      int ptrVal5 = *(int *)(obj + 0x68);\\n      int ptrVal6 = *(int *)(obj + 0x6c);\\n      int isEndOfString = is_end_of_string(ptrVal3, ptrVal4, ptrVal5, ptrVal6);\\n      if (isEndOfString != 0) {\\n        *(int *)(obj + 0x48) = ptrVal5;\\n        *(int *)(obj + 0x4c) = ptrVal6;\\n        return;\\n      }\\n      int isTerminated2 = is_string_terminated(ptrVal3, ptrVal4, *(int *)(obj + 0x60), *(int *)(obj + 100));\\n      if (isTerminated2 != 0) {\\n        *(int *)(obj + 0x48) = *(int *)(obj + 0x60);\\n        *(int *)(obj + 0x4c) = *(int *)(obj + 100);\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_08000a04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "validate_and_store_params_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "getValueForKey_08004ca2",
                "param_1": "key",
                "uVar1": "value",
                "find_value_by_key_08004c8a": "findValueByKey"
            },
            "code": "int getValueForKey_08004ca2(int key)\n{\n    int value = -1;\n    if (key != 0) {\n        value = findValueByKey();\n    }\n    return value;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "getValueForKey_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_bit_set_at_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2_mask",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int is_param2_bit_set_at_param1_08002810(uint32_t* PTR_param1, uint32_t param2_mask) {\n  uint32_t* PTR_param1_offset = PTR_param1 + 2; // PTR_param1 + 8 / sizeof(uint32_t) = PTR_param1 + 2\n  if ((*PTR_param1_offset & param2_mask) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_at_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "check_and_update_permission_0800224c",
                "param_1": "permission_array",
                "iVar1": "result"
            },
            "code": "int check_and_update_permission_0800224c(int *permission_array)\n{\n  int result;\n  if (permission_array == NULL) {\n    result = 1;\n  }\n  else {\n    permission_array[10] |= 2;\n    result = check_and_update_value();\n    if (result == 0) {\n      *(int *)*permission_array = -32;\n      *(unsigned int *)(*permission_array + 4) &= DAT_08002340;\n      *(unsigned int *)(*permission_array + 8) &= DAT_08002344;\n      *(unsigned int *)(*permission_array + 12) &= 0xff000000;\n      *(unsigned int *)(*permission_array + 16) &= 0xc0000000;\n      *(unsigned int *)(*permission_array + 20) &= 0xfffff000;\n      *(unsigned int *)(*permission_array + 24) &= 0xfffff000;\n      *(unsigned int *)(*permission_array + 28) &= 0xfffff000;\n      *(unsigned int *)(*permission_array + 32) &= 0xfffff000;\n      *(unsigned int *)(*permission_array + 36) &= 0xfffff000;\n      *(unsigned int *)(*permission_array + 40) &= 0xfffff000;\n      *(unsigned int *)(*permission_array + 44) &= 0xff000000;\n      *(unsigned int *)(*permission_array + 48) &= 0xff000000;\n      *(unsigned int *)(*permission_array + 52) &= 0xc0000000;\n      *(unsigned int *)(*permission_array + 56) &= 0xc0000000;\n      *(unsigned int *)(*permission_array + 60) &= 0xffc00000;\n      *(unsigned int *)(*permission_array + 64) &= 0xffc00000;\n      check_flag(permission_array);\n      permission_array[11] = 0;\n      permission_array[10] = 0;\n    }\n    *(char *)(permission_array + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_permission_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_valid_input_080054b0",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054d0": "input_data",
                "byte": "byte_value",
                "combine_bytes_at_offsets_080047e8": "combine_bytes_at_offsets"
            },
            "code": "bool is_valid_input_080054b0(int input_index) {\n    uint16_t offset = *(uint8_t *)(PTR_DAT_080054d0 + (uint8_t)*(byte *)(input_index + 0x44) * 4);\n    uint16_t combined_bytes = combine_bytes_at_offsets_080047e8(offset);\n    return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_input_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "execute_function_08006f00",
                "param_1": "function_index",
                "puVar1": "undefined_pointer_1",
                "uVar2": "result",
                "piVar3": "function_list",
                "iVar4": "function_address",
                "pcVar5": "function_ptr",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "function_list_ptr_copy",
                "PTR_PTR_DAT_08006f0c": "function_list_ptr",
                "PTR_DAT_08006f30": "value_ptr"
            },
            "code": "int execute_function_08006f00(uint function_index) {\n  int *function_list = *(int **)PTR_PTR_DAT_08006f0c;\n  if (function_index > 31) {\n    *function_list = 0x16;\n    return -1;\n  }\n  int function_address = function_list[0x11];\n  if (function_address != 0) {\n    code *function_ptr = *(code **)(function_address + function_index * 4);\n    if (function_ptr != (code *)0x0) {\n      if (function_ptr != (code *)0x1) {\n        if (function_ptr == (code *)0xffffffff) {\n          *function_list = 0x16;\n          return 1;\n        }\n        *(undefined4 *)(function_address + function_index * 4) = 0;\n        (*function_ptr)(function_index);\n      }\n      return 0;\n    }\n    undefined *PTR_PTR_DAT_08006f0c_copy = PTR_PTR_DAT_08006f0c;\n    undefined4 result = get_one(function_list);\n    undefined *PTR_DAT_08006f30 = PTR_DAT_08006f30;\n    *(undefined4 *)PTR_DAT_08006f30 = 0;\n    int set_value_result = set_value_to_22(result, function_index, function_index, 0, PTR_PTR_DAT_08006f0c_copy, unaff_r4, unaff_r5, in_lr);\n    if ((set_value_result == -1) && (*(int *)PTR_DAT_08006f30 != 0)) {\n      *function_list = *(int *)PTR_DAT_08006f30;\n    }\n    return set_value_result;\n  }\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "execute_function_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "check_and_update_string_080016b4",
                "param_1": "string_info",
                "cVar1": "result",
                "iVar2": "value",
                "iVar3": "is_end",
                "uVar4": "result1_low",
                "uVar5": "ptr1_value",
                "uVar6": "ptr3_value",
                "uVar7": "ptr5_value",
                "uVar8": "ptr1_value_1",
                "uVar9": "ptr3_value_1",
                "uVar10": "ptr5_value_1",
                "uVar11": "result1_high",
                "uVar12": "stored_value",
                "uVar13": "stored_value_1",
                "uVar14": "param1_high",
                "uVar15": "param1",
                "uVar16": "param2",
                "uVar17": "result1",
                "uVar18": "result2",
                "local_38": "local_result",
                "uStack_34": "local_result_high"
            },
            "code": "char check_and_update_string_080016b4(int string_info)\n{\n    char result = *(char *)(string_info + 0x70);\n    if (result != '\\0') {\n        int value = get_value_and_return_080058e0();\n        int stored_value = *(int *)(string_info + 0x44);\n        uint stored_value_diff = (uint)(value - stored_value);\n        uint max_diff = *(uint *)(string_info + 0x58);\n        if (stored_value_diff >= max_diff) {\n            undefined4 *ptr1 = *(undefined4 **)(string_info + 0x38);\n            undefined4 *ptr2 = *(undefined4 **)(string_info + 0x40);\n            undefined8 param1 = FUNC_08000190(*ptr2, ptr2[1]);\n            undefined8 param2 = FUNC_08000190(*ptr1, ptr1[1], *(undefined4 *)(string_info + 0x50), *(undefined4 *)(string_info + 0x54));\n            undefined8 result1 = FUNC_080004f8((int)param1, (int)((ulonglong)param1 >> 0x20), *(undefined4 *)(string_info + 0x20), *(undefined4 *)(string_info + 0x24));\n            result1 = FUNC_08000194((int)result1, (int)((ulonglong)result1 >> 0x20), *(undefined4 *)(string_info + 0x48), *(undefined4 *)(string_info + 0x4c));\n            *(undefined8 *)(string_info + 0x48) = result1;\n            if (*(char *)(string_info + 0x71) == '\\0') {\n                undefined8 result2 = FUNC_080004f8((int)param2, (int)((ulonglong)param2 >> 0x20), *(undefined4 *)(string_info + 0x18), *(undefined4 *)(string_info + 0x1c));\n                result1 = FUNC_08000190((int)result1, (int)((ulonglong)result1 >> 0x20), (int)result2, (int)((ulonglong)result2 >> 0x20));\n                *(undefined8 *)(string_info + 0x48) = result1;\n            }\n            undefined4 *ptr3 = *(undefined4 **)(string_info + 0x48);\n            undefined8 *ptr4 = (undefined8 *)(string_info + 0x68);\n            int is_end = is_end_of_string_08000a18(*ptr3, ptr3[1], *(undefined4 *)(ptr4), *(undefined4 *)(ptr4 + 1));\n            if (is_end == 0) {\n                undefined4 *ptr5 = *(undefined4 **)(string_info + 0x60);\n                undefined4 *ptr6 = (undefined4 *)(string_info + 100);\n                int is_terminated = is_string_terminated_080009dc(*ptr3, ptr3[1]);\n                if (is_terminated != 0) {\n                    *(undefined4 *)(string_info + 0x48) = *ptr5;\n                    *(undefined4 *)(string_info + 0x4c) = *ptr6;\n                }\n            }\n            else {\n                *(undefined4 *)(string_info + 0x48) = *(undefined4 *)(ptr4);\n                *(undefined4 *)(string_info + 0x4c) = *(undefined4 *)(ptr4 + 1);\n            }\n            if (*(char *)(string_info + 0x71) == '\\0') {\n                undefined8 result3 = FUNC_080004f8((int)param1, (int)((ulonglong)param1 >> 0x20), *(undefined4 *)(string_info + 0x18), *(undefined4 *)(string_info + 0x1c));\n                undefined8 result4 = FUNC_08000190((int)result1, (int)((ulonglong)result1 >> 0x20), (int)result3, (int)((ulonglong)result3 >> 0x20));\n                result1 = (result4 == 0) ? 0 : result4;\n            }\n            *(undefined8 **)(string_info + 0x3c) = result1;\n            *(undefined4 *)(string_info + 0x50) = *ptr1;\n            *(undefined4 *)(string_info + 0x54) = ptr1[1];\n            *(int *)(string_info + 0x44) = value;\n        }\n        else {\n            result = '\\0';\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_080009dc",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_and_update_string_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "parse_input_and_return_080018f8",
                "parse_input_string_08001814": "parse_input_string"
            },
            "code": "void parse_input_and_return_080018f8(void)\n{\n  parse_input_string();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "parse_input_and_return_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "is_data_valid_and_bit_set_at_index_08005890",
                "param_1": "index",
                "cVar1": "is_bit_set",
                "iVar2": "bit_index",
                "uVar3": "data",
                "uVar4": "data_index"
            },
            "code": "bool is_data_valid_and_bit_set_at_index_08005890(uint data, uint index) {\n    return (data & index) != 0;\n}\n\nbool is_valid_index(uint index) {\n    return index < 0x3c;\n}\n\nuint get_data_index(uint index) {\n    return (uint)PTR_DAT_080058d8[index];\n}\n\nbool is_valid_data(uint data) {\n    return data != 0xffffffff;\n}\n\nbool is_bit_set(uint data, uint *bit_array) {\n    return get_bit_from_uint_array_080047f4(data, bit_array) != 0;\n}\n\nuint get_data_by_index(uint index) {\n    return get_data_by_param_08004848((index << 0x18) >> 0x1c);\n}\n\nbool check_bit_at_data_index(uint index) {\n    if (!is_valid_index(index)) {\n        return false;\n    }\n    uint data_index = get_data_index(index);\n    if (!is_valid_data(data_index)) {\n        return false;\n    }\n    return is_bit_set(data_index, PTR_DAT_080058dc) && is_data_valid_and_bit_set_at_index_08005890(get_data_by_index(data_index), 1 << (index & 0xf) & 0xffff);\n}\n\nbool is_bit_set_at_data_index(uint index) {\n    return check_bit_at_data_index(index) ? true : false;\n}\n\nbool is_data_valid_and_bit_set_at_index_08005890(uint index) {\n    return is_bit_set_at_data_index(index) ? true : false;\n}\n\n",
            "called": [
                "FUN_08004848",
                "FUN_08004c48",
                "FUN_080047f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_data_valid_and_bit_set_at_index_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "execute_base_conversion_08005da0",
                "convert_base_or_execute_08005d8a": "convert_base_or_execute"
            },
            "code": "void execute_base_conversion_08005da0(void)\n{\n  convert_base_or_execute();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "execute_base_conversion_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "undefined4": "uint32_t",
                "0xffffffff": "UINT32_MAX"
            },
            "code": "uint32_t find_value_in_array_08004cb2(int value, char* array)\n{\n    while (true) {\n        if (*array == -1) {\n            return UINT32_MAX;\n        }\n        if (*array == value) {\n            break;\n        }\n        array += 12;\n    }\n    return *(uint32_t *)(array + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_set_flag_for_value_08004ef4",
                "param_1": "value",
                "iVar1": "value_to_check",
                "subtract_four_from_value_08004e70": "subtract_four_from_value",
                "set_flags_08002c10": "set_flags"
            },
            "code": "void check_and_set_flag_for_value_08004ef4(int value) {\n  int value_to_check = subtract_four_from_value();\n  if (*(char *)(value_to_check + 0x5d) == '\\0') {\n    set_flags(value);\n  }\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_for_value_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_parameters_at_offset_08001294",
                "param_1": "base_address",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void set_parameters_at_offset_08001294(int base_address, unsigned char param_2, unsigned char param_3, unsigned char param_4, unsigned char param_5) {\n  *(unsigned char *)(base_address + 0x18) = param_2;\n  *(unsigned char *)(base_address + 0x19) = param_3;\n  *(unsigned char *)(base_address + 0x1a) = param_4;\n  *(unsigned char *)(base_address + 0x1b) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_parameters_at_offset_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "checkAndUpdate_08002384",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "quotient",
                "iVar3": "lastValue",
                "iVar4": "currentValue",
                "uVar5": "divisor",
                "local_14": "i"
            },
            "code": "int checkAndUpdate_08002384(int *param) {\n  int result;\n  uint uVar1;\n  int lastValue = get_value_from_pointer_08001cc4();\n  if (*(char *)(param + 9) == 1) {\n    return 2;\n  }\n  *(undefined *)(param + 9) = 1;\n  result = check_and_update_value_080020f0();\n  if (result == 0) {\n    param[10] = (param[10] & 0xffffeefd) | 2;\n    uint divisor = *(uint *)PTR_DAT_0800246c;\n    uint quotient = calculate_value_08003da4(2);\n    for (int i = divisor / quotient << 1; i != 0; i--) {\n    }\n    set_value_if_not_set_08001f84(param);\n    *(uint *)(*param + 8) |= 8;\n    while ((*(uint *)(*param + 8) & 8) != 0) {\n      int currentValue = get_value_from_pointer_08001cc4();\n      if (10 < (uint)(currentValue - lastValue)) {\n        param[10] = (param[10] & 0xffffffed) | 0x10;\n        *(undefined *)(param + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(get_value_from_pointer_08001cc4() + 8) |= 4;\n    int secondLastValue = lastValue;\n    lastValue = get_value_from_pointer_08001cc4();\n    while ((*(uint *)(*param + 8) & 4) != 0) {\n      int currentValue = get_value_from_pointer_08001cc4();\n      if (10 < (uint)(currentValue - lastValue)) {\n        param[10] = (param[10] & 0xffffffed) | 0x10;\n        *(undefined *)(param + 9) = 0;\n        return 1;\n      }\n      secondLastValue = lastValue;\n      lastValue = currentValue;\n    }\n    param[10] = (param[10] & 0xfffffffc) | 1;\n  }\n  *(undefined *)(param + 9) = 0;\n  return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "checkAndUpdate_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "writeToBuffer_08002ad8",
                "param_1": "buffer",
                "puVar1": "currentChar",
                "PTR_00000009": "currentCharIndex",
                "DAT_08004010": "dataToWrite",
                "bufferIndex": "bufferIndex"
            },
            "code": "int writeToBuffer_08002ad8(int* buffer)\n{\n    short* bufferIndex = (short*)((int)buffer + 0x2a);\n    if (*bufferIndex != 0) {\n        char* currentChar = (char*)buffer[9];\n        buffer[9] = (int)(currentChar + 1);\n        *currentChar = (char)*(int*)(*buffer + 0x10);\n        *bufferIndex -= 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "writeToBuffer_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_values_08004204",
                "*param_1": "values",
                "uVar1": "factor5",
                "uVar2": "ptr_val",
                "iVar3": "val1",
                "iVar4": "val4",
                "iVar5": "val5",
                "iVar6": "val6",
                "iVar7": "val7",
                "iVar8": "val2",
                "iVar9": "val9",
                "iVar10": "val10",
                "iVar11": "val11",
                "iVar12": "ptr",
                "DAT_080043ac": "DAT_PTR_080043ac",
                "DAT_080043b0": "DAT_PTR_080043b0"
            },
            "code": "void calculate_values_08004204(int *values)\n{\n    uint mask1 = 0xffffcfff;\n    uint mask2 = 0xffffe9f3;\n    uint mask3 = 0xfffffcff;\n    uint shift1 = 0x19;\n    uint shift2 = 0x25;\n    uint factor1 = 0x10;\n    uint factor2 = -100;\n    uint factor3 = 0x32;\n    uint factor4 = 0xf0;\n    uint factor5 = 0x17;\n    uint val1 = values[3];\n    uint val2 = values[2] | values[4] | values[5];\n    uint val3 = values[6];\n    uint ptr = *values;\n    uint ptr_val = (ptr != DAT_080043ac) ? get_pointer_value_shifted_by_dat_08003c6c_index_08003c50() : get_shifted_pointer_value_08003c70();\n    uint val4 = get_shifted_pointer_value_08003c70();\n    uint val5 = get_shifted_pointer_value_08003c70();\n    uint val6 = get_shifted_pointer_value_08003c70();\n    uint val7 = get_shifted_pointer_value_08003c70();\n    uint val8 = get_shifted_pointer_value_08003c70();\n    uint val9 = get_shifted_pointer_value_08003c70();\n    uint val10 = get_shifted_pointer_value_08003c70();\n    uint val11 = get_shifted_pointer_value_08003c70();\n    uint val12 = get_shifted_pointer_value_08003c70();\n    uint result = ((ptr_val * ((val12 * shift1) / (val11 << 2) + ((ptr_val * ((val7 * shift1) / (values[1] << 2)) >> shift2) * factor2 + factor3)) >> 0x20) << factor5) >> 0x1c) + (((ptr_val * ((val10 * shift1) / (values[1] << 2) + ((ptr_val * ((val5 * shift1) / (val9 << 2)) >> shift2) * factor2 + factor3)) >> shift2) & factor4) + (ptr_val * ((val3 * shift1) / (values[1] << 2)) >> shift2) * factor1;\n    *(uint *)(ptr + 8) = result;\n}\n",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_values_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "validate_input_and_convert_to_string_08005da8",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "max_input_length",
                "param_4": "data",
                "param_5": "max_input_length_suffix",
                "iVar1": "is_valid_input",
                "iVar3": "call_result",
                "bVar4": "i",
                "lVar5": "shift_value",
                "uVar2": "shifted_value",
                "uVar6": "converted_value",
                "uVar7": "reversed_bits",
                "is_valid_input2": "is_valid_input_2",
                "string_length": "suffix_string_length",
                "is_string_terminated": "is_string_terminated_result",
                "is_CY_false_or_ZR_true": "is_CY_false_or_ZR_true_result",
                "base_conversion_result": "base_conversion_result",
                "total_length": "total_string_length",
                "suffix_length": "max_input_length_suffix_length",
                "conversion_result": "conversion_result",
                "signed_int": "signed_int",
                "calculated_value": "calculated_value",
                "concatenated_value": "concatenated_value"
            },
            "code": "int validate_input_and_convert_to_string_08005da8(int input_length, int input_value, int max_input_length, uint32_t data) {\n  int is_valid_input = is_valid_input_08000a2c(input_length, input_value, input_length, input_value);\n  if (is_valid_input != 0) {\n    return get_string_length_08005c96(input_length, PTR_DAT_08005f1c);\n  }\n  int is_valid_input2 = is_valid_input_08000a2c(input_length, input_value & 0x7fffffff, 0xffffffff, DAT_08005f08);\n  if (is_valid_input2 != 0) {\n    int string_length = is_end_of_string_08000a18(input_length, input_value, 0xe0000000, DAT_08005f0c);\n    if (string_length == 0) {\n      int is_string_terminated = is_string_terminated_080009dc(input_length, input_value, 0, 0);\n      if (is_string_terminated == 0) {\n        return 0;\n      }\n      else {\n        int call_result = call_function_pointer_08005cb6(input_length, 0x2d);\n        input_value += 0x80000000;\n        uint64_t shift_value = (uint64_t)DAT_08005f14 << 0x20;\n        for (int i = 0; i < max_input_length; i++) {\n          shift_value = FUNC_0800074c((int)shift_value, (undefined4)((uint64_t)shift_value >> 0x20), 0, DAT_08005f18);\n        }\n        uint32_t shifted_value = calculate_shifted_value_08000aa8();\n        uint32_t reversed_bits = reverseBits_0800040c();\n        uint32_t converted_value = FUNC_08000194(input_length, input_value, (int)shift_value, (undefined4)((uint64_t)shift_value >> 0x20));\n        uint32_t concatenated_value = FUNC_08000190((int)converted_value, (int)((uint64_t)converted_value >> 0x20), (int)reversed_bits, (int)((uint64_t)reversed_bits >> 0x20));\n        int base_conversion_result = convert_base_or_execute_08005d8a(input_length, shifted_value, 10);\n        int total_length = base_conversion_result;\n        if (max_input_length != 0) {\n          int suffix_length = get_string_length_08005c96(input_length, PTR_DAT_08005f28);\n          total_length += suffix_length;\n        }\n        while (max_input_length != 0) {\n          concatenated_value = FUNC_080004f8((int)concatenated_value, (int)((uint64_t)concatenated_value >> 0x20), 0, DAT_08005f18);\n          int signed_int = convert_to_signed_int_08000a58();\n          int conversion_result = convert_base_or_call_function_pointer_08005d82(input_length, signed_int, 10);\n          total_length += conversion_result;\n          uint32_t calculated_value = calculate_0800042c(signed_int);\n          concatenated_value = FUNC_08000190((int)concatenated_value, (int)((uint64_t)concatenated_value >> 0x20), (int)calculated_value, (int)((uint64_t)calculated_value >> 0x20));\n          max_input_length--;\n        }\n        return total_length;\n      }\n    }\n    else {\n      return get_string_length_08005c96(input_length, PTR_DAT_08005f24);\n    }\n  }\n  else {\n    int is_CY_false_or_ZR_true = is_CY_false_or_ZR_true_080009f0(input_length, input_value & 0x7fffffff, 0xffffffff, DAT_08005f08);\n    if (is_CY_false_or_ZR_true == 0) {\n      return get_string_length_08005c96(input_length, PTR_DAT_08005f1c);\n    }\n    else {\n      int string_length = get_string_length_08005c96(input_length, PTR_DAT_08005f20);\n      return string_length;\n    }\n  }\n}\n",
            "called": [
                "FUN_0800074c",
                "FUN_08005d8a",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08005cb6",
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_08005d82",
                "FUN_08000190",
                "FUN_0800042c",
                "FUN_08000a58",
                "FUN_08000aa8",
                "FUN_08005c96",
                "FUN_08000194",
                "FUN_08000a2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "validate_input_and_convert_to_string_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_param_and_update_080045fe",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "PTR_": "",
                "DAT_": "",
                "uint": "uint32_t",
                "undefined": "char",
                "update_params_if_valid_08005604": "update_params_if_valid"
            },
            "code": "int set_param_and_update_080045fe(int *param_array)\n{\n    uint32_t *param_ptr = (uint32_t *)(param_array[0] + 0xc);\n    *param_ptr &= 0xffffffbf;\n    char *param_char_ptr = (char *)(param_array + 0x39);\n    *param_char_ptr = 0x20;\n    update_params_if_valid();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_param_and_update_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "validate_and_convert_string_input_08005f2c",
                "validate_input_and_convert_to_string_08005da8": "validate_input_and_convert_to_string"
            },
            "code": "void validate_and_convert_string_input_08005f2c(void)\n{\n  //Code for validating input and converting to string\n}\n\nvoid validate_and_convert_string_input_08005f2c(void)\n{\n  validate_and_convert_string_input_08005f2c();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_convert_string_input_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_function_from_array_080055e0",
                "uVar1": "index",
                "PTR_DAT_080055fc": "function_array",
                "PTR_DAT_08005600": "parameter_array",
                "find_index_in_array_080055bc": "find_index_in_array",
                "code": "function_pointer",
                "undefined4": "parameter_pointer"
            },
            "code": "void execute_function_from_array_080055e0(void)\n{\n  uint index;\n  index = find_index_in_array();\n  if (index < 5) {\n    (**(code **)(PTR_DAT_080055fc + index * 4))(*(undefined4 *)(PTR_DAT_08005600 + index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_function_from_array_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "calculate_sum_of_input_and_result_08005f40",
                "param_1": "user_input",
                "iVar1": "converted_input",
                "iVar2": "function_result",
                "validate_and_convert_string_input_08005f2c": "validate_and_convert_user_input",
                "execute_function_with_params_08005cc0": "execute_function_with_params"
            },
            "code": "int calculate_sum_of_input_and_result_08005f40(int user_input) {\n  int converted_input = validate_and_convert_user_input();\n  int function_result = execute_function_with_params(user_input);\n  return function_result + converted_input;\n}",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_input_and_result_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "checkAndUpdateValue_0800213c",
                "param_1": "values",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value10Flag",
                "DAT_08002244": "DAT_08002244",
                "DAT_08002248": "DAT_08002248"
            },
            "code": "int checkAndUpdateValue_0800213c(int *values) {\n    int isNull = (values == NULL);\n    if (isNull) {\n        return 1;\n    }\n    int value10 = values[10];\n    if (value10 == 0) {\n        values[11] = 0;\n        *(char *)(values + 9) = 0;\n        updateFlagAndBits();\n    }\n    int result = checkAndUpdateValue_0800213c_080020f0(values);\n    uint value10Flag = value10 & 0x10;\n    if ((value10Flag == 0) && (result == 0)) {\n        values[10] = value10 & 0xffffeefdU | 2;\n        uint value1 = values[1];\n        uint value7 = values[7];\n        uint value3Shifted = values[3] << 1;\n        uint value2 = values[2];\n        uint value5 = values[5];\n        uint value6 = values[6];\n        uint value4 = values[4];\n        uint value8 = values[8];\n        uint value9 = values[9];\n        uint newValue3;\n        uint newValue2;\n        if (value2 == 0x100 || value2 == 1) {\n            newValue3 = (value4 - 1) * 0x100000;\n            newValue2 = 0x100;\n        } else {\n            newValue3 = 0;\n            newValue2 = value2;\n        }\n        uint newValue1 = newValue2 | value7 | value3Shifted;\n        if (value5 == 1) {\n            if (values[3] == 0) {\n                newValue1 |= (value6 - 1) * 0x2000 | 0x800;\n            } else {\n                values[10] |= 0x20;\n                values[11] |= 1;\n            }\n        }\n        *(uint *)(*values + 4) = newValue3 | *(uint *)(*values + 4) & 0xffff16ff;\n        *(uint *)(*values + 8) = DAT_08002244 & *(uint *)(*values + 8) | newValue1;\n        uint newValue4 = (value8 != (DAT_08002248 & value9)) ? (values[10] & 0xffffffedU | 0x10, values[11] |= 1, 1) : 0;\n        if (newValue4 == 0) {\n            values[11] = 0;\n            values[10] = values[10] & 0xfffffffcU | 1;\n            return 0;\n        }\n        return 1;\n    }\n    values[10] |= 0x10;\n    return 1;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "checkAndUpdateValue_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_and_update_params_0800455a",
                "param_1": "param_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x39)": "param_array[9]",
                "*(char *)(param_1 + 0xe)": "param_array[14]",
                "param_1[8]": "param_array[8]",
                "*(short *)(param_1 + 9)": "param_array[9]",
                "*(short *)((int)param_1 + 0x26)": "param_array[10]",
                "param_1[0xf]": "param_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "param_array[9]",
                "*(undefined *)(param_1 + 0xe)": "param_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*param_array + 0xc)"
            },
            "code": "int check_and_update_params_0800455a(int *param_array, int param_2, int param_3) {\n    if (param_array[9] != ' ') {\n        return 2;\n    }\n    if (param_2 == 0 || param_3 == 0) {\n        return 1;\n    }\n    if (param_array[14] != 1) {\n        param_array[8] = param_2;\n        param_array[9] = (short)param_3;\n        param_array[10] = (short)param_3;\n        param_array[15] = 0;\n        param_array[9] = '!';\n        param_array[14] = 0;\n        *(uint *)(*param_array + 0xc) |= 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "check_and_update_params_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_data_08001a66",
                "param_1": "data_address",
                "param_2": "new_data",
                "uVar1": "new_value_1",
                "undefined4": "value_type",
                "param_3": "value_type_1",
                "param_4": "value_type_2"
            },
            "code": "void update_data_08001a66(int data_address, int new_data, undefined4 param_3, undefined4 param_4) {\\n    if (*(char *)(data_address + 0x70) != \"\\0\" && *(int *)(data_address + 0x30) != new_data) {\\n        undefined8 new_value_1 = FUNC_08000190(0, 0, *(undefined4 *)(data_address + 0x18), *(undefined4 *)(data_address + 0x1c), param_4);\\n        *(undefined8 *)(data_address + 0x18) = new_value_1;\\n        undefined8 new_value_2 = FUNC_08000190(0, 0, *(undefined4 *)(data_address + 0x20), *(undefined4 *)(data_address + 0x24));\\n        *(undefined8 *)(data_address + 0x20) = new_value_2;\\n        undefined8 new_value_3 = FUNC_08000190(0, 0, *(undefined4 *)(data_address + 0x28), *(undefined4 *)(data_address + 0x2c));\\n        *(undefined8 *)(data_address + 0x28) = new_value_3;\\n    }\\n    *(int *)(data_address + 0x30) = new_data;\\n    return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_data_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_pointer_value_08003c44",
                "PTR_DAT_08003c4c": "pointer_to_value"
            },
            "code": "int get_pointer_value_08003c44(void)\n{\n  int *PTR_DAT_08003c4c = PTR_DAT_08003c4c;\n  return *PTR_DAT_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08001b48",
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_pointer_value_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_value_from_param_080028d2",
                "param_1": "value_array",
                "*param_1": "value_array",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(value_array + 0x10)",
                "param_1[0x11]": "value_array[0x11]",
                "value_to_set": "value_to_set"
            },
            "code": "int set_value_from_param_080028d2(int *value_array)\n{\n    int value_to_set = value_array[0x11] & 0xff;\n    *(unsigned int *)(value_array + 0x10) = value_to_set;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_value_from_param_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08000a18(void)\n{\n  char current_char;\n  check_and_return_params();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "set_value_08005384",
                "cVar1": "key",
                "puVar2": "data_ptr",
                "uVar3": "value",
                "iVar4": "key_index",
                "uVar5": "value_ptr",
                "PTR_DAT_080053c4": "key_data",
                "PTR_DAT_080053c8": "key_index_data",
                "PTR_DAT_080053cc": "value_data"
            },
            "code": "void set_value_08005384(void)\n{\n  char key;\n  int key_index;\n  undefined *value_ptr;\n  undefined value;\n  undefined *data_ptr = PTR_DAT_080053d0;\n\n  key = PTR_DAT_080053c4[1];\n  key_index = find_key_index((int)key, PTR_DAT_080053c8);\n\n  if (key_index != 0) {\n    value_ptr = PTR_DAT_080053cc + key_index * 4;\n    value = get_value_from_key(*value_ptr);\n    data_ptr[0x59] = value;\n    data_ptr[0x58] = key;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    set_data(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08004c78",
                "FUN_08004f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "set_value_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "get_byte_from_array_08005b3c",
                "param_1": "index",
                "param_2": "array_size",
                "uVar1": "byte_value"
            },
            "code": "void get_byte_from_array_08005b3c(int index, uint array_size)\n{\n  undefined byte_value;\n  if (array_size < 0x3c) {\n    byte_value = PTR_DAT_08005b50[array_size];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(undefined *)(index + 300) = byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "get_byte_from_array_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "iVar1": "uVar1",
                "uVar2": "flag_2",
                "puVar3": "data_ptr",
                "uVar4": "flag_4",
                "uVar5": "flag_1"
            },
            "code": "void process_data_080046b8(uint **data)\n{\n    uint *data_ptr = *data;\n    uint flag_1 = *data_ptr;\n    uint flag_2 = data_ptr[3];\n\n    if ((flag_1 & 0xf) == 0 && (flag_1 & 0x20) && (flag_2 & 0x20)) {\n        process_data_080046b8_08004618(data);\n        return;\n    }\n\n    if ((flag_1 & 0xf) == 0 || ((data_ptr[5] & 1) == 0 && (flag_2 & 0x120) == 0)) {\n        if ((flag_1 & 0x80) && (flag_2 & 0x80)) {\n            process_data_080046b8_08004198(data);\n            return;\n        }\n\n        if ((flag_1 & 0x40) && (flag_2 & 0x40)) {\n            set_param_and_update_080045fe(data);\n        }\n    }\n    else {\n        if ((flag_1 & 1) && (flag_2 & 0x100)) {\n            (*data)[0xf] |= 1;\n        }\n\n        if ((flag_1 & 4) && (data_ptr[5] & 1)) {\n            (*data)[0xf] |= 2;\n        }\n\n        if ((flag_1 & 2) && (data_ptr[5] & 1)) {\n            (*data)[0xf] |= 4;\n        }\n\n        if ((flag_1 & 8) && (data_ptr[5] & 1)) {\n            (*data)[0xf] |= 8;\n        }\n\n        if ((*data)[0xf]) {\n            if ((flag_1 & 0x20) && (flag_2 & 0x20)) {\n                process_data_080046b8_08004618(data);\n            }\n\n            if (((*data)[0xf] & 8) == 0 && ((data_ptr[5] & 0x40) == 0)) {\n                do_nothing_08005650(data);\n                (*data)[0xf] = 0;\n                return;\n            }\n\n            set_flags_and_values_0800417c(data);\n            data_ptr = *data;\n\n            if ((data_ptr[5] & 0x40) == 0) {\n                do_nothing_08005650(data);\n                return;\n            }\n\n            data_ptr[5] &= 0xffffffbf;\n\n            if ((*data)[0xd]) {\n                (*data)[0xd][0xd] = (uint)PTR_LAB_080047d8_1_080047d4;\n                int uVar1 = get_uVar1_from_param_0800258c((*data)[0xd]);\n\n                if (uVar1) {\n                    (*(code *)(*data)[0xd][0xd])();\n                    return;\n                }\n            }\n        }\n    }\n}",
            "called": [
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_08004198",
                "FUN_0800258c",
                "FUN_08004618",
                "FUN_0800417c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_value_by_key_08004c8a",
                "param_1": "key",
                "param_2": "data_array",
                "*param_2": "*data_array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_value_by_key_08004c8a(int key, char *data_array)\n{\n  while(1) {\n    if (*(int *)(data_array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(data_array + 4) == key) break;\n    data_array = data_array + 0xc;\n  }\n  return (int)*data_array;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "imported": false,
            "current_name": "find_value_by_key_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_08001cd0",
                "param_1": "values",
                "param_2": "num_values",
                "iVar1": "start_time",
                "uVar2": "value",
                "iVar3": "local_counter",
                "uVar4": "return_value",
                "puVar5": "current_value",
                "uVar6": "divisor",
                "local_1c": "unused_counter"
            },
            "code": "int calculate_08001cd0(uint **values, uint num_values)\n{\n  int start_time = get_time();\n  uint *current_value = *values;\n  uint local_counter = 0;\n  if ((current_value[2] & 0x100) == 0)\n  {\n    if (((current_value[1] & 0x100) == 0) && ((current_value[0xb] & 0xf00000) == 0))\n    {\n      while ((**values & 2) == 0)\n      {\n        if ((num_values != 0xffffffff) && ((num_values != 0) && (get_time() - start_time > num_values)))\n        {\n          values[10] = (uint *)((uint)values[10] | 4);\n          *(undefined *)(values + 9) = 0;\n          return 3;\n        }\n      }\n      values[10] = (uint *)((uint)values[10] | 4);\n      *(undefined *)(values + 9) = 0;\n      return 3;\n    }\n    else\n    {\n      uint divisor = *(uint *)PTR_DAT_08001e2c;\n      uint value = calculate_08001cd0_value_08003da4(2);\n      current_value = *values;\n      if (((current_value[4] & DAT_08001e30) == 0) && ((current_value[3] & DAT_08001e30 + 0xdc000000) == 0))\n      {\n        if ((current_value[4] & DAT_08001e34) == 0)\n        {\n          if ((current_value[3] & DAT_08001e38) == 0)\n          {\n            local_counter = 0x14;\n          }\n          else\n          {\n            local_counter = 0x29;\n          }\n        }\n        else\n        {\n          local_counter = 0x29;\n        }\n      }\n      else if (((current_value[4] & DAT_08001e34) == 0) && ((current_value[3] & DAT_08001e34 + 0xee000000) == 0))\n      {\n        local_counter = 0x54;\n      }\n      else if ((DAT_08001e3c & current_value[4]) == 0)\n      {\n        if ((DAT_08001e3c & current_value[3]) == 0)\n        {\n          local_counter = 0x54;\n        }\n        else\n        {\n          local_counter = 0xfc;\n        }\n      }\n      else\n      {\n        local_counter = 0xfc;\n      }\n      local_counter = (divisor / value) * local_counter;\n      while ((local_counter > 0) && (value != 0))\n      {\n        if ((num_values != 0xffffffff) && ((num_values != 0) && (get_time() - start_time > num_values)))\n        {\n          values[10] = (uint *)((uint)values[10] | 4);\n          *(undefined *)(values + 9) = 0;\n          return 3;\n        }\n        local_counter--;\n      }\n      **values = 0xffffffed;\n      values[10] = (uint *)((uint)values[10] | 0x200);\n      if (((*values)[2] & 0xe0000) == 0xe0000)\n      {\n        if (values[3] == (uint *)0x0)\n        {\n          values[10] = (uint *)((uint)values[10] & 0xfffffeff);\n          if (((uint)values[10] & 0x1000) == 0)\n          {\n            values[10] = (uint *)((uint)values[10] | 1);\n            return 0;\n          }\n          else\n          {\n            return 0;\n          }\n        }\n        else\n        {\n          return 0;\n        }\n      }\n      else\n      {\n        return 0;\n      }\n    }\n  }\n  else\n  {\n    values[10] = (uint *)((uint)values[10] | 0x20);\n    *(undefined *)(values + 9) = 0;\n    return 1;\n  }\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "find_and_decode_value_08004a4c",
                "param_1": "value_to_find",
                "local_46": "found_value",
                "local_44": "array_index",
                "local_40": "first_flag",
                "local_3c": "second_flag",
                "local_38": "array",
                "local_34": "unused_value",
                "local_30": "unused_value",
                "local_2c": "unused_value",
                "local_28": "unused_value",
                "local_24": "unused_value",
                "local_20": "unused_value",
                "local_1c": "calculate_value",
                "local_10": "unused_value"
            },
            "code": "int find_and_decode_value_08004a4c(int value_to_find)\n{\n    int found_value = 0;\n    int value_to_check = find_value(value_to_find);\n\n    if (value_to_check != 0)\n    {\n        int decode_result = decode_and_update(&value_to_check);\n        if (decode_result == 0)\n        {\n            int update_result = update_value_if_not_set(&value_to_check);\n            if (update_result == 0)\n            {\n                int calculate_result = calculate(&value_to_check, 10);\n                if (calculate_result == 0)\n                {\n                    uint32_t offset_value = get_value_at_offset(&value_to_check);\n                    if ((offset_value & 0x200) != 0)\n                    {\n                        found_value = get_value_at_offset_0x4c_from_ptr(&value_to_check);\n                    }\n\n                    int permission_result = check_and_update_permission(&value_to_check);\n                    if (permission_result != 0)\n                    {\n                        found_value = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    return found_value;\n}",
            "called": [
                "FUN_08002348",
                "FUN_080061e0",
                "FUN_0800213c",
                "FUN_08001cd0",
                "FUN_08001e40",
                "FUN_08002004",
                "FUN_0800224c",
                "FUN_08001e48",
                "FUN_08004c78",
                "FUN_08001f80",
                "FUN_0800492c",
                "FUN_08002384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "find_and_decode_value_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "calculate_result_or_shift_left_08006112",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2"
            },
            "code": "void calculate_result_or_shift_left_08006112(int32_t* ptr_param_1, int32_t* ptr_param_2) {\n    calculate_result_or_shift_left_08006112_08006158(ptr_param_2, ptr_param_1);\n    return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "calculate_result_or_shift_left_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "update_flag_and_bits_08004974",
                "param_1": "flag",
                "param_2": "param",
                "puVar1": "ptr",
                "iVar2": "mask_address",
                "uVar3": "set_flag",
                "uVar4": "mask",
                "uVar5": "flag_value",
                "local_18": "bit_mask",
                "local_14": "local_14",
                "local_10": "local_10"
            },
            "code": "void update_flag_and_bits_08004974(uint *flag, uint bit, uint param) {\n  uint flag_value = *flag;\n  uint mask = 0;\n  uint local_bit = 0;\n  if (flag_value == 0x080049e0) {\n    mask = *(uint *)(0x080049ec + 0x18) | 0x200;\n    *(uint *)(0x080049ec + 0x18) = mask;\n    local_bit = *(uint *)(0x080049ec + 0x18) & 0x200;\n  }\n  else {\n    if (flag_value == 0x080049e4) {\n      mask = *(uint *)(0x080049ec + 0x18) | 0x400;\n      *(uint *)(0x080049ec + 0x18) = mask;\n      local_bit = *(uint *)(0x080049ec + 0x18) & 0x400;\n    }\n  }\n  uint8_t *ptr = (uint8_t *)0x080049e8;\n  uint8_t value = *ptr;\n  uint shifted_value = (uint)value << 0x18;\n  uint shifted_value2 = shifted_value >> 0x1c;\n  uint set_flag = set_flag_08004884(shifted_value2, param, mask, local_bit);\n  uint bit_mask = 1 << (value & 0xf);\n  uint local_mask = bit_mask & 0xffff;\n  uint local_14 = 3;\n  uint local_10 = 0;\n  update_bits_08002624(set_flag, &local_mask);\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "update_flag_and_bits_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "process_input_if_flag_set_08003520",
                "param_1": "input",
                "cVar1": "c",
                "puVar2": "input_ptr",
                "uVar3": "flag_mask",
                "uVar4": "flag_value"
            },
            "code": "void process_input_if_flag_set_08003520(uint **input)\n{\n  uint *input_ptr = *input;\n  uint flag_mask = input_ptr[5];\n  uint flag_value = input_ptr[1];\n  if (((flag_mask & FLAG_MASK_1) != 0) && ((flag_value & 0x100) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 1);\n    input_ptr[5] = 0xfffffeff;\n    **input = **input | 0x8000;\n  }\n  if (((flag_mask & FLAG_MASK_2) != 0) && ((flag_value & 0x100) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 2);\n    (*input)[5] = 0xfffffdff;\n  }\n  if (((flag_mask & FLAG_MASK_3) != 0) && ((flag_value & 0x100) != 0)) {\n    char c = *(char *)((int)input + 0x3d);\n    if (((*(char *)((int)input + 0x3e) == ' ') && (*(short *)((int)input + 0x2a) == 0)) &&\n       (((c == '!' || (c == ')')) || ((c == '(' && (input[12] == (uint *)0x21)))))) {\n      execute_command(input);\n    }\n    else {\n      input[16] = (uint *)((uint)input[16] | 4);\n      if (*(char *)((int)input + 0x3e) == '\\x10') {\n        **input = **input | 0x200;\n      }\n      (*input)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag_mask & FLAG_MASK_4) != 0) && ((flag_value & 0x100) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 8);\n    (*input)[5] = 0xfffff7ff;\n  }\n  if (input[16] != (uint *)0x0) {\n    process_input(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "process_input_if_flag_set_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "input_array",
                "cVar1": "current_char",
                "puVar2": "memory_location"
            },
            "code": "int process_input_08002ca6(int *input_array) {\n    char current_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        undefined *memory_location = (undefined *)input_array[9];\n        input_array[9] = (int)(memory_location + 1);\n        *memory_location = (char)*(undefined4 *)(*input_array + 0x10);\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x22;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_08002ca4();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_data_structures_08005b54",
                "param_1": "data_structure",
                "param_2": "key",
                "param_3": "value1",
                "param_4": "value2",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "data_structure_ptr",
                "PTR_DAT_08005ba4": "data_structure_end_ptr",
                "PTR_DAT_08005ba8": "data_structure_key1_ptr",
                "PTR_DAT_08005bac": "data_structure_key2_ptr",
                "set_value_at_offset_08005b24": "set_value_at_offset",
                "get_byte_from_array_08005b3c": "get_byte_from_array",
                "initialize_data_structures_08005a44": "initialize_data_structures_helper"
            },
            "code": "undefined4* initialize_data_structures_08005b54(undefined4 *data_structure, undefined4 key, undefined4 value1, undefined4 value2)\n{\n  data_structure[1] = 0;\n  data_structure[2] = 1000;\n  *data_structure = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (data_structure == PTR_DAT_08005ba4) {\n    set_value_at_offset(data_structure, 0, value1, PTR_DAT_08005ba4, value2);\n    get_byte_from_array(data_structure, 1);\n  }\n  else {\n    undefined value = get_value_for_key(key, PTR_DAT_08005ba8);\n    *(undefined *)((int)data_structure + 0x12d) = value;\n    value = get_value_for_key(key, PTR_DAT_08005bac);\n    *(undefined *)(data_structure + 0x4b) = value;\n  }\n  initialize_data_structures_08005b54_helper(data_structure);\n  return data_structure;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "char_ptr_3",
                "puVar3": "char_ptr_2",
                "sVar2": "short_ptr",
                "int_ptr": "int_ptr",
                "char_ptr": "char_ptr"
            },
            "code": "int process_data_08004618(int *data)\n{\n    char *char_ptr = (char *)(data + 0x3a);\n    if (*char_ptr != '\"') {\n        return 2;\n    }\n    int *int_ptr = (int *)*data;\n    short *short_ptr = (short *)(data + 0x2e);\n    if (data[2] == 0x1000) {\n        if (data[4] == 0) {\n            *(unsigned short *)data[10] = (unsigned short)((*(int *)(int_ptr + 1) << 0x17) >> 0x17);\n            data[10] += 2;\n        }\n        else {\n            *(unsigned short *)data[10] = (unsigned short)*(unsigned int *)(int_ptr + 1) & 0xff;\n            data[10]++;\n        }\n    }\n    else if (data[4] == 0) {\n        char *char_ptr_2 = (char *)data[10];\n        data[10] = (int)(char_ptr_2 + 1);\n        *char_ptr_2 = (char)*(unsigned int *)(int_ptr + 1);\n    }\n    else {\n        char *char_ptr_3 = (char *)data[10];\n        data[10] = (int)(char_ptr_3 + 1);\n        *char_ptr_3 = (char)*(unsigned int *)(int_ptr + 1) & 0x7f;\n    }\n    (*short_ptr)--;\n    if (*short_ptr != 0) {\n        return 0;\n    }\n    *(unsigned int *)(*data + 0xc) &= 0xffffffdf;\n    *(unsigned int *)(*data + 0xc) &= 0xfffffeff;\n    *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n    *char_ptr = ' ';\n    execute_function_from_array_080055e0();\n    return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_data_08006c40",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "code": "void initialize_data_08006c40(undefined4 *data, undefined2 value1, undefined2 value2)\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[25] = 0;\n  *(undefined2 *)((int)data + 14) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  fill_array_with_value_080061e0(data + 23, 0, 8);\n  data[8] = data;\n  data[9] = DAT_08006c78;\n  data[10] = PTR_process_input_08006f5a_1_08006c7c;\n  data[11] = PTR_process_data_and_update_status_08006f92_1_08006c80;\n  data[12] = PTR_LAB_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_data_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_params_0800157c",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "*param_1": "*params",
                "decode_and_update_flags_080057b4": "decode_and_update_flags",
                "read_and_update_param_08005848": "read_and_update_param"
            },
            "code": "char* update_params_0800157c(char* params, int param1, char param2, char param3) {\n  *params = (char)param1;\n  params[1] = param2;\n  params[2] = param3;\n  decode_and_update_flags(param1, 0);\n  decode_and_update_flags(params[1], 1);\n  decode_and_update_flags(params[2], 1);\n  read_and_update_param(params[1], 1);\n  read_and_update_param(params[2], 0);\n  return params;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "update_params_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "validate_data_080045a2",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "data_type",
                "*(char *)((int)param_1 + 0x3a)": "data[15]",
                "*(char *)(param_1 + 0xe)": "data[14]",
                "param_1[10]": "data[10]",
                "*(short *)(param_1 + 0xb)": "data[11]",
                "*(short *)((int)param_1 + 0x2e)": "data[14]",
                "param_1[0xf]": "data[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "data[4]",
                "*(undefined *)(param_1 + 0xe)": "data[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data + 12)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*data + 20)"
            },
            "code": "int validate_data_080045a2(int *data, int data_length, int data_type) {\n  if (data[15] != ' ') {\n    return 2;\n  }\n  if (data_length == 0) {\n    return 1;\n  }\n  if (data_type == 0) {\n    return 1;\n  }\n  if (data[14] != 1) {\n    data[10] = data_length;\n    data[11] = (short)data_type;\n    data[14] = (short)data_type;\n    data[15] = 0;\n    data[4] = 34;\n    data[14] = 0;\n    *(uint *)(*data + 12) |= 256;\n    *(uint *)(*data + 20) |= 1;\n    *(uint *)(*data + 12) |= 32;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "validate_data_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "main_08001c32",
                "initialize_system_and_set_flag_values_08004c52": "initialize_system_and_set_flag_values",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void main_08001c32() {\n    initialize_system();\n    set_flag_values();\n}\n\nvoid main_08001c32() {\n    main_08001c32();\n    return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "main_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_bytes_at_offsets_080047e8",
                "param_1": "data_address",
                "*(byte *)(param_1 + 0x3a)": "byte_at_offset_3a",
                "*(byte *)(param_1 + 0x39)": "byte_at_offset_39"
            },
            "code": "byte combine_bytes_at_offsets_080047e8(int data_address)\n{\n  byte byte_at_offset_3a = *(byte *)(data_address + 0x3a);\n  byte byte_at_offset_39 = *(byte *)(data_address + 0x39);\n  return byte_at_offset_3a | byte_at_offset_39;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "imported": false,
            "current_name": "combine_bytes_at_offsets_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "decode_and_update_flags_080057b4",
                "param_1": "index",
                "param_2": "operation_type",
                "param_3": "length",
                "param_4": "data",
                "iVar1": "bit_index",
                "puVar2": "data_ptr",
                "iVar3": "index_value"
            },
            "code": "void decode_and_update_flags_080057b4(uint8_t index, uint8_t operation_type, uint8_t length, uint8_t *data){\n  int8_t index_value;\n  uint8_t *data_ptr;\n  int8_t bit_index;\n  if (index < 0x3c) {\n    index_value = (int8_t)PTR_DAT_08005838[index];\n    data_ptr = PTR_DAT_08005838;\n  }\n  else {\n    index_value = -1;\n    data_ptr = data;\n  }\n  if (index_value != -1) {\n    bit_index = get_bit_index(index_value, PTR_DAT_0800583c, length, data_ptr, data);\n    if (bit_index != 0) {\n      int8_t integer_value = find_integer_in_string_08004ce2(index_value, PTR_DAT_08005840);\n      if (integer_value != 0) {\n        check_and_set_bit_in_array_08004b3c(index_value);\n      }\n      set_bit_to_zero_08004828(index_value, PTR_DAT_0800583c);\n    }\n    set_operation_flags(index_value, operation_type);\n    set_bit_0800480a(index_value, PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004bb0",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004b3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_and_update_flags_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "initialize_and_return_08001b18",
                "param_1": "input_value",
                "initialize_params_08001ab0": "initialize_parameters"
            },
            "code": "int initialize_and_return_08001b18(int input_value){\n  initialize_parameters();\n  return input_value;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "initialize_and_return_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "always_returns_true_thunk_08005750"
            },
            "code": "int always_returns_true_thunk_08005750(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "always_returns_true_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_first_param_zero",
                "bVar3": "is_fourth_param_less_than_or_equal_second_param"
            },
            "code": "uint check_parameters_0800092c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_first_param_zero = (first_param | second_param << 1) == 0;\n  bool is_third_param_zero = (third_param | fourth_param << 1) == 0;\n  bool are_second_and_fourth_params_equal = second_param == fourth_param;\n  bool are_first_and_third_params_equal = first_param == third_param;\n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) && ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) || (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  if (!is_first_param_zero && !is_third_param_zero && !are_second_and_fourth_params_equal && !are_first_and_third_params_equal) {\n    uint xor_result = second_param ^ fourth_param;\n    bool is_xor_result_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_xor_result_zero = second_param == fourth_param;\n    }\n    bool is_fourth_param_less_than_or_equal_second_param = -1 < (int)xor_result && fourth_param <= second_param;\n    if (is_xor_result_zero) {\n      is_fourth_param_less_than_or_equal_second_param = third_param <= first_param;\n    }\n    result = (int)fourth_param >> 0x1f;\n    if (!is_fourth_param_less_than_or_equal_second_param) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_parameters_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "convert_base_or_execute_08005d8a",
                "param_1": "data",
                "param_2": "value",
                "param_3": "base",
                "param_4": "arg",
                "convert_base_08005ce8": "convert_base"
            },
            "code": "void convert_base_or_execute_08005d8a(void (*execute)(void *, uint8_t, uint8_t, void *, void *), void *data, uint32_t value, uint32_t base, void *arg){\n  if (base != 0) {\n    convert_base(data, value, base & 0xff);\n    return;\n  }\n  (*execute)(data, value & 0xff, 0, execute, arg);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": false,
            "current_name": "convert_base_or_execute_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "update_flag_08002560",
                "param_1": "flag_value",
                "*DAT_0800257c": "*data_flag"
            },
            "code": "void update_flag_08002560(int flag_value){\n                        if (flag_value != 4) {\n                            *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n                            return;\n                        }\n                        *DAT_0800257c = *DAT_0800257c | 4;\n                        return;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_char_in_string_08006e90",
                "param_1": "str",
                "param_2": "ch",
                "param_3": "str_len",
                "pcVar1": "current_char",
                "pcVar2": "current_char",
                "*pcVar2": "*current_char"
            },
            "code": "char* find_char_in_string_08006e90(char* str, char ch, int str_len) {\n  char* current_char = str;\n  while (current_char < str + str_len) {\n    if (*current_char == ch) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "find_and_set_offset_08006920",
                "param_1": "result",
                "param_2": "input_value",
                "puVar1": "ptr",
                "iVar2": "offset",
                "PTR_DAT_0800693c": "ptr",
                "find_offset_080056d8": "find_offset"
            },
            "code": "void find_and_set_offset_08006920(int *result, undefined4 input_value) {\n  undefined *PTR_DAT_0800693c = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  int offset = find_offset_080056d8(input_value);\n  if ((offset == -1) && (*(int *)PTR_DAT_0800693c != 0)) {\n    *result = *(int *)PTR_DAT_0800693c;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "find_and_set_offset_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp3",
                "unaff_r4": "temp4",
                "uVar2": "mask",
                "uVar3": "temp2",
                "bVar4": "is_input1_zero"
            },
            "code": "ulonglong calculate_result_080008ba(uint input1,uint input2,uint input3,uint input4)\n{\n  uint mask = 0xffc00000;\n  uint temp1 = input4 & mask;\n  uint temp2 = input2;\n  if (input3 != input4 || temp1 != input4) {\n    if (input3 == input4) {\n      if (((input1 | input2 << 12) == 0) && (input1 = input3, temp2 = input4, temp1 != input4)) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp1 == input4) {\n      input1 = input3;\n      temp2 = input4;\n      if ((input3 | input4 << 12) == 0) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool is_input1_zero = (input1 | input2 << 1) == 0;\n      bool is_input3_zero = (input3 | input4 << 1) == 0;\n      if (!is_input1_zero && !is_input3_zero) {\n        if (input3 == 0) {\n          temp2 = input2 & 0x80000000;\n          do {\n            uint temp3 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp3 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp2;\n          if (temp1 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if (is_input1_zero && is_input3_zero) {\n        return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n      }\n      if (is_input1_zero) {\n        goto LABEL_0800072c;\n      }\n      if (is_input3_zero) {\n        goto LABEL_080006f0;\n      }\n    }\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "execute_command_08002d1c",
                "param_1": "command",
                "PTR_DAT_08002dac_4": "COMMAND_TYPE_A",
                "PTR_DAT_08002dac_8": "COMMAND_TYPE_B",
                "PTR_DAT_08002dac": "DEFAULT_COMMAND_TYPE",
                "PTR_DAT_00000000": "NO_COMMAND_TYPE",
                "PTR_DAT_00000021": "NON_DEFAULT_COMMAND_TYPE"
            },
            "code": "uint execute_command_08002d1c(uint **command) {\n    uint *command_type = command[0xb];\n    char command_char = *(char *)((int)command + 0x3d);\n    if ((command_type == PTR_DAT_08002dac_4 || command_type == PTR_DAT_08002dac_8) && command_char == '(') {\n        command[0xb] = PTR_DAT_08002dac;\n        (*command)[1] &= 0xfffff8ff;\n        (*command)[5] = 0xfffffbff;\n        **command &= 0xfffffbff;\n        command[0xc] = PTR_DAT_00000000;\n        *(undefined *)((int)command + 0x3d) = ' ';\n        *(undefined *)((int)command + 0x3e) = 0;\n        execute_function_with_flags_08004ec4();\n    }\n    else if (command_char == '!') {\n        command[0xb] = PTR_DAT_08002dac;\n        command[0xc] = PTR_DAT_00000021;\n        *(undefined *)((int)command + 0x3d) = ' ';\n        *(undefined *)((int)command + 0x3e) = 0;\n        (*command)[1] &= 0xfffff8ff;\n        (*command)[5] = 0xfffffbff;\n        **command &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*command)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "execute_command_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_max_int_08005714",
                "undefined4": "int32_t",
                "0xffffffff": "INT32_MAX"
            },
            "code": "int32_t return_max_int_08005714(void)\n{\n  return INT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "return_max_int_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input_param",
                "uVar1": "result",
                "local_24": "local_var_1",
                "abStack_20": "byte_array",
                "uStack_1c": "var_1",
                "uStack_18": "var_2",
                "uStack_14": "var_3"
            },
            "code": "uint calculate_value_08003da4(int input_param) {\n  uint result;\n  undefined2 local_var_1;\n  byte byte_array[4];\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  var_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  var_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  var_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_var_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input_param == 2) {\n    result = get_shifted_pointer_value_08003c70();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_param == 16) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_var_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * byte_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input_param == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_data_structures_08005a44",
                "param_1": "data_structure_address",
                "PTR_": "start_pointer",
                "DAT_": "zero_shorts_pointer",
                "end_pointer": "end_pointer"
            },
            "code": "void initialize_data_structures_08005a44(int data_structure_address) {\n  int* PTR_ = (int*)(data_structure_address + 0x130);\n  *PTR_ = data_structure_address + 0x11;\n  \n  short* DAT_ = (short*)(data_structure_address + 0x134);\n  *DAT_ = 0;\n  \n  DAT_ = (short*)(data_structure_address + 0x136);\n  *DAT_ = 0;\n  \n  int* end_pointer = (int*)(data_structure_address + 0x138);\n  *end_pointer = data_structure_address + 0x51;\n  \n  DAT_ = (short*)(data_structure_address + 0x13c);\n  *DAT_ = 0;\n  \n  DAT_ = (short*)(data_structure_address + 0x13e);\n  *DAT_ = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_string_terminated_080009dc",
                "in_CY": "current_char"
            },
            "code": "bool is_string_terminated_080009dc(void)\n{\n  char current_char;\n  check_and_return_param();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_string_terminated_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "set_flags_and_values_0800417c",
                "param_1": "data",
                "*param_1": "*data",
                "uint": "unsigned int",
                "undefined": "unsigned char",
                "*flag1": "flag1",
                "*flag2": "flag2",
                "*value": "value"
            },
            "code": "void set_flags_and_values_0800417c(int* data)\n{\n    uint* flag1 = (uint*)(*data + 0xc);\n    *flag1 &= 0xfffffedf;\n    uint* flag2 = (uint*)(*data + 0x14);\n    *flag2 &= 0xfffffffe;\n    undefined* value = (undefined*)((int)data + 0x3a);\n    *value = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_value_and_return_08004b94",
                "get_value_from_pointer_08001cc4": "get_value_from_pointer"
            },
            "code": "void get_value_and_return_08004b94(void)\n{\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_value_and_return_080058e0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void get_value_and_return_080058e0() {\n  get_value_and_return_080058e0_08004b94();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_080016b4",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_value_and_return_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "reverse_bits_and_update_08001918",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "processed_data_upper",
                "uVar2": "calculated_data_size",
                "uVar3": "reversed_bits_data",
                "calculate_0800042c": "calculate_data_size",
                "reverseBits_0800040c": "reverse_bits",
                "FUNC_0800074c": "process_data",
                "FUNC_080004f8": "update_data"
            },
            "code": "void reverse_bits_and_update_08001918(int data_address, int data_size, undefined4 arg3, undefined4 arg4)\n{\n  if(data_size > 0)\n  {\n    undefined8 calculated_data_size = calculate_data_size(data_size);\n    undefined8 reversed_bits_data = reverse_bits(*(undefined4 *)(data_address + 0x58));\n    undefined8 processed_data = process_data(calculated_data_size, reversed_bits_data, arg3, arg4);\n    undefined4 processed_data_upper = (undefined4)((ulonglong)processed_data >> 0x20);\n    undefined8 updated_data = update_data(processed_data, processed_data_upper, *(undefined4 *)(data_address + 0x20), *(undefined4 *)(data_address + 0x24));\n    *(undefined8 *)(data_address + 0x20) = updated_data;\n    undefined8 processed_data2 = process_data(*(undefined4 *)(data_address + 0x28), *(undefined4 *)(data_address + 0x2c), processed_data, processed_data_upper);\n    *(undefined8 *)(data_address + 0x28) = processed_data2;\n    *(int *)(data_address + 0x58) = data_size;\n  }\n  return;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_0800042c",
                "FUN_0800040c",
                "FUN_080004f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "reverse_bits_and_update_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "execute_assertion_and_wait_0800611c",
                "param_1": "file_descriptor",
                "param_2": "line_number",
                "param_3": "assertion_message",
                "param_4": "param_4",
                "uVar1": "socket_fd",
                "puVar2": "function_name",
                "uVar3": "result",
                "uVar4": "param_4"
            },
            "code": "void execute_assertion_and_wait_0800611c(int file_descriptor, int line_number, char *assertion_message, int param_4) {\n  int socket_fd = *(int *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  char *function_name = PTR_s___function__0800614c;\n  if (assertion_message == NULL) {\n    assertion_message = PTR_s__08006154;\n  }\n  while (true) {\n    execute_function_with_params_08006174(socket_fd, PTR_s_assertion___s__failed__file___s__08006150, param_4, file_descriptor, line_number, function_name, assertion_message, param_4);\n    long long result = execute_and_wait_08006ac0();\n    line_number = (int)(result >> 32);\n    socket_fd = (int)result;\n  }\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "execute_assertion_and_wait_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_from_uint_array_080047f4",
                "param_1": "index",
                "param_2": "array",
                "PTR_": "array",
                "DAT_": "element",
                "*": "times",
                "&": "",
                "<<": "",
                ">>": "",
                "uint": "",
                "return": "",
                "()": "",
                "+": "plus",
                "array_index": "index_in_array",
                "element": "array_element",
                "bit_mask": "mask",
                "bit_offset": "offset"
            },
            "code": "uint get_bit_from_uint_array_080047f4(uint* PTR_, uint index, uint bit_offset) {\n    uint PTR__index = (index << 0x18) >> 0x1c;\n    uint DAT_ = *(PTR_ + PTR__index);\n    uint bit_mask = 1 << (bit_offset & 0xf);\n    return (DAT_ & bit_mask) >> (bit_offset & 0xf);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "get_bit_from_uint_array_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_CY_false_or_ZR_true_080009f0",
                "in_ZR": "in_ZR",
                "in_CY": "in_CY",
                "check_and_return_param_080009b8_080009b8": "check_and_return_param_080009b8_080009b8",
                "!": "not",
                "(bool)": "cast_to_bool",
                "||": "or"
            },
            "code": "bool is_CY_false_or_ZR_true_080009f0(void)\n{\n    bool is_CY_false = !check_and_return_param_080009b8_080009b8();\n    bool is_ZR_true = (bool)in_ZR;\n    return is_CY_false || is_ZR_true;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "update_params_and_return_one_0800134e",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "readAndUpdateParams_08001310": "read_and_update_params"
            },
            "code": "int update_params_and_return_one_0800134e(int param_1, int param_2, int param_3, int param_4)\n{\n  read_and_update_params(param_1, param_2, 1, param_4, param_4);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "update_params_and_return_one_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_flags_08002c10",
                "param_1": "pointer_to_pointer",
                "puVar1": "pointer"
            },
            "code": "int set_flags_08002c10(uint **pointer_to_pointer) {\n  uint *pointer = *pointer_to_pointer;\n  if (*(char *)((int)pointer_to_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)pointer_to_pointer + 0x3d) = 0x28;\n  if ((*pointer & 1) == 0) {\n    *pointer |= 1;\n  }\n  **pointer_to_pointer |= 0x400;\n  (*pointer_to_pointer)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_flags_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "current_param_offset",
                "piVar3": "current_param_function",
                "uVar4": "current_param_value",
                "uVar5": "current_param_flags",
                "iVar6": "current_param_increment",
                "unaff_r4": "unused_variable",
                "unaff_r5": "unused_variable",
                "pcVar7": "unused_variable",
                "iVar8": "temp_result",
                "uVar9": "current_param_limit",
                "UNRECOVERED_JUMPTABLE_00": "unused_variable",
                "bVar10": "is_param_valid"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int32_t *params) {\n  uint32_t result;\n  int32_t *current_params;\n  uint32_t current_param_value;\n  uint32_t current_param_flags;\n  uint32_t current_param_offset;\n  uint32_t current_param_increment;\n  uint32_t current_param_limit;\n  uint32_t current_param_function;\n  bool is_param_valid;\n  uint32_t temp_result;\n\n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      initialize_data();\n    }\n    if (params == (int32_t *)PARAM_1) {\n      current_params = (int32_t *)data[1];\n    }\n    else if (params == (int32_t *)PARAM_2) {\n      current_params = (int32_t *)data[2];\n    }\n    else if (params == (int32_t *)PARAM_3) {\n      current_params = (int32_t *)data[3];\n    }\n    if (*(uint16_t *)(current_params + 3) != 0) {\n      current_param_flags = *(uint16_t *)(current_params + 3);\n      current_param_value = (uint32_t)current_param_flags;\n      if ((int32_t)(current_param_value << 0x1c) < 0) {\n        current_param_offset = params[4];\n        if (current_param_offset != 0) {\n          current_param_increment = current_param_value << 0x1e;\n          is_param_valid = current_param_increment == 0;\n          if (is_param_valid) {\n            current_param_increment = 0;\n          }\n          current_param_function = current_params[10];\n          if (!is_param_valid) {\n            current_param_increment = current_params[5];\n          }\n          current_params[0] = current_param_offset;\n          current_params[2] = current_param_increment;\n          for (temp_result = current_params[0] - current_param_offset; temp_result > 0; temp_result -= current_param_increment) {\n            result = (*(code *)current_params[10])(data, current_params[8], current_param_offset, temp_result, 0, 0);\n            if (result < 1) {\n              current_param_flags = *(uint16_t *)(current_params + 3);\n              goto LAB_08006bc6;\n            }\n            current_param_offset += result;\n          }\n        }\n      }\n      else if (((current_params[1] > 0) || (current_params[0x10] > 0)) && (current_params[0xb] != NULL)) {\n        current_param_limit = *data;\n        *data = 0;\n        if ((current_param_value & 0x1000) == 0) {\n          temp_result = (*(code *)current_params[0xb])(data, current_params[8], current_param_value & 0x1000, 1);\n          if ((temp_result == -1) && (*data != 0)) {\n            if ((*data != 0x1d) && (*data != 0x16)) {\n              current_param_flags = *(uint16_t *)(current_params + 3);\n              current_param_function = current_params[0];\n              result = (*(code *)current_param_function)();\n              return result;\n            }\n            *data = current_param_limit;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          temp_result = current_params[0x15];\n        }\n        if (((int32_t)((uint32_t)current_param_flags << 0x1d) < 0) && ((temp_result = temp_result - current_params[1]), (current_params[0xd] != NULL))) {\n          temp_result = temp_result - current_params[0x10];\n        }\n        temp_result = (*(code *)current_params[0xb])(data, current_params[8], temp_result, 0);\n        current_param_flags = *(uint16_t *)(current_params + 3);\n        if ((temp_result == -1) && ((*data > 0x1d) || (DAT_08006bdc >> (*data & 0xff) < 0))) {\n          current_param_flags = *(uint16_t *)(current_params + 3);\n          goto LAB_08006bc6;\n        }\n        current_params[1] = 0;\n        current_params[0] = current_params[4];\n        if (((int32_t)((uint32_t)current_param_flags << 0x13) < 0) && ((temp_result != -1) || (*data == 0))) {\n          current_params[0x15] = temp_result;\n        }\n        if (current_params[0xd] != NULL) {\n          if (current_params[0xd] != current_params + 0x11) {\n            add_to_linked_list(data);\n          }\n          current_params[0xd] = NULL;\n          current_param_function = current_params[0];\n          result = (*(code *)current_param_function)();\n          return result;\n        }\n      }\nLAB_08006aea:\n      current_param_function = current_params[0];\n      result = (*(code *)current_param_function)();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == (int *)PTR_DAT_08006c28) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c2c) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c30) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08006bdc >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_to_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "readAndUpdateParams_080012e8",
                "param_1": "baseAddress",
                "param_2": "param2",
                "uVar1": "bitMask",
                "read_and_update_param_08005848": "readAndUpdateParam",
                "read_and_update_params_080012a2": "readAndUpdateParams_080012a2",
                "uint": "uint8_t",
                "*(undefined *)": "*(uint8_t *)",
                "currentByteAddress": "byte",
                "currentBitValue": "bit"
            },
            "code": "void readAndUpdateParams_080012e8(int baseAddress, int param2){\n    uint8_t bitMask = 1;\n    for (uint8_t i = 0; i < 8; i++) {\n        uint8_t currentByteAddress = *(uint8_t *)(baseAddress + i + 0xb);\n        uint8_t currentBitValue = param2 >> (i & 0xff) & bitMask;\n        readAndUpdateParam(currentByteAddress,currentBitValue);\n    }\n    readAndUpdateParams_080012e8_080012a2(baseAddress);\n    return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "readAndUpdateParams_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "param_1": "input_param",
                "param_2": "input_val",
                "param_3": "input_str",
                "param_4": "input_len",
                "iVar1": "result",
                "puVar2": "end_of_str",
                "iVar3": "current_len"
            },
            "code": "int process_input_08006370(int input_param, int input_val, char *input_str, int input_len)\n{\n  int result = 0;\n  char *end_of_str = input_str + input_len;\n  int current_len = input_len;\n  do {\n    if (input_str == end_of_str) {\n      return 0;\n    }\n    result = process_input_08006370_08006344(input_param, *input_str, input_val, input_len, current_len);\n    input_len = result + 1;\n    input_str = input_str + 1;\n  } while (input_len != 0);\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_input_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_at_position_080024f8",
                "param_1": "bit_position",
                "DAT_08002510": "bit_array_start"
            },
            "code": "void set_bit_at_position_080024f8(uint bit_position)\n{\n  if (bit_position >= 0) {\n    uint32_t* bit_array = (uint32_t*)(DAT_08002510 + (bit_position >> 5) * 4);\n    uint bit_offset = bit_position & 0x1f;\n    *bit_array = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005568",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "initialize_params_08001ab0",
                "param_1": "param_address",
                "param_2": "param1",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "iVar1": "value",
                "extraout_r1": "param_address2"
            },
            "code": "int initialize_params_08001ab0(int param_address, int param1, int param2, int param3, int param4, int param5, int param6, int param7, int param8, int param9, int param10, int param11)\n{\n  int value;\n  *(int *)(param_address + 60) = param3;\n  *(int *)(param_address + 56) = param1;\n  *(int *)(param_address + 64) = param4;\n  *(char *)(param_address + 112) = 0;\n  validate_and_store_params(param_address,param1,0,0,param10,param11);\n  *(int *)(param_address + 88) = 100;\n  update_data(param_address,param12);\n  parse_input_string(param_address,param5,param6,param7,param8,param9,param10,param11);\n  value = get_value_and_return();\n  *(int *)(param_address + 68) = value - *(int *)(param_address + 88);\n  return param_address;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "initialize_params_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "execute_and_wait_08006ac0",
                "puVar1": "result_ptr",
                "iVar2": "function_size",
                "piVar3": "function_info_ptr",
                "piVar4": "execution_info_ptr",
                "uVar5": "execution_flags",
                "uVar6": "function_flags",
                "iVar7": "execution_size",
                "iVar9": "current_size",
                "pcVar8": "function_ptr",
                "uVar10": "execution_size",
                "bVar11": "flag1",
                "uVar12": "wait_result",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "code": "void execute_and_wait_08006ac0() {\n    uint *result_ptr;\n    int *function_info_ptr;\n    int *execution_info_ptr;\n    uint execution_flags;\n    ushort function_flags;\n    int function_size;\n    int execution_size;\n    int remaining_size;\n    int current_size;\n    code *function_ptr;\n    code *UNRECOVERED_JUMPTABLE_00;\n    bool flag1;\n    undefined8 wait_result;\n    execute_function_08006f00(6);\n    UNRECOVERED_JUMPTABLE_00 = (code *)0x8006acf;\n    wait_result = wait_forever_0800573c(1);\n    function_info_ptr = (int *)((ulonglong)wait_result >> 0x20);\n    result_ptr = (uint *)wait_result;\n    function_flags = *(ushort *)(function_info_ptr + 3);\n    execution_flags = (uint)function_flags;\n    if ((int)(execution_flags << 0x1c) < 0) {\n        function_size = function_info_ptr[4];\n        if (function_size != 0) {\n            execution_size = execution_flags << 0x1e;\n            flag1 = execution_size == 0;\n            if (flag1) {\n                execution_size = 0;\n            }\n            current_size = *function_info_ptr;\n            if (!flag1) {\n                execution_size = function_info_ptr[5];\n            }\n            *function_info_ptr = function_size;\n            function_info_ptr[2] = execution_size;\n            for (remaining_size = current_size - function_size; remaining_size > 0; remaining_size -= execution_size) {\n                current_size = (*(code *)function_info_ptr[10])(result_ptr, function_info_ptr[8], function_size, remaining_size);\n                if (current_size < 1) {\n                    function_flags = *(ushort *)(function_info_ptr + 3);\n                    goto LAB_08006bc6;\n                }\n                function_size += current_size;\n            }\n        }\n    }\n    else if (((0 < function_info_ptr[1]) || (0 < function_info_ptr[0x10])) && ((function_ptr = (code *)function_info_ptr[0xb]) != (code *)0x0)) {\n        execution_size = *result_ptr;\n        *result_ptr = 0;\n        if ((function_flags & 0x1000) == 0) {\n            current_size = (*function_ptr)(result_ptr, function_info_ptr[8], execution_flags & 0x1000, 1);\n            if ((current_size == -1) && ((execution_flags = *result_ptr, execution_flags != 0))) {\n                if ((execution_flags != 0x1d) && (execution_flags != 0x16)) {\n                    *(ushort *)(function_info_ptr + 3) = *(ushort *)(function_info_ptr + 3) | 0x40;\n                    (*UNRECOVERED_JUMPTABLE_00)();\n                    return;\n                }\n                *result_ptr = execution_size;\n                goto LAB_08006aea;\n            }\n        }\n        else {\n            current_size = function_info_ptr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(function_info_ptr + 3) << 0x1d) < 0) && ((current_size = current_size - function_info_ptr[1], function_info_ptr[0xd] != 0))) {\n            current_size = current_size - function_info_ptr[0x10];\n        }\n        current_size = (*(code *)function_info_ptr[0xb])(result_ptr, function_info_ptr[8], current_size, 0);\n        function_flags = *(ushort *)(function_info_ptr + 3);\n        if ((current_size == -1) && ((0x1d < *result_ptr || (-1 < (int)((DAT_08006bdc >> (*result_ptr & 0xff)) << 0x1f)))) {\n            goto LAB_08006bc6;\n        }\n        function_info_ptr[1] = 0;\n        *function_info_ptr = function_info_ptr[4];\n        if (((int)((uint)function_flags << 0x13) < 0) && ((current_size != -1 || (*result_ptr == 0)))) {\n            function_info_ptr[0x15] = current_size;\n        }\n        execution_info_ptr = (int *)function_info_ptr[0xd];\n        *result_ptr = execution_size;\n        if (execution_info_ptr != (int *)0x0) {\n            if (execution_info_ptr != function_info_ptr + 0x11) {\n                add_to_linked_list_080061f0(result_ptr);\n            }\n            function_info_ptr[0xd] = 0;\n            (*UNRECOVERED_JUMPTABLE_00)();\n            return;\n        }\n    }\nLAB_08006aea:\n    (*UNRECOVERED_JUMPTABLE_00)(0);\n    return;\n}\n",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_and_wait_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "sVar1": "counter",
                "pbVar2": "source",
                "first_char": "first_char",
                "mode": "mode",
                "destination": "destination",
                "counter": "counter",
                "source": "source",
                "status": "status"
            },
            "code": "int process_data_08004198(int *data)\n{\n    char first_char = *(char *)((int)data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    int mode = data[2];\n    uint *destination = (uint *)*data + 4;\n    if (mode == 0x1000) {\n        *destination = *(ushort *)data[8] & 0x1ff;\n        if (data[4] == 0) {\n            data[8] = data[8] + 2;\n        }\n        else {\n            data[8] = data[8] + 1;\n        }\n    }\n    else {\n        byte *source = (byte *)data[8];\n        data[8] = (int)(source + 1);\n        *destination = (uint)*source;\n    }\n    short counter = *(short *)((int)data + 0x26) + -1;\n    *(short *)((int)data + 0x26) = counter;\n    if (counter == 0) {\n        uint *status = (uint *)(*data + 0xc);\n        *status = *status & 0xffffff7f;\n        *status = *status | 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_and_set_address_08001c3c",
                "param_1": "address",
                "iVar1": "is_valid_address"
            },
            "code": "int check_and_set_address_08001c3c(uint address)\n{\n    int is_valid_address = check_if_valid_address(*(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c));\n    if (is_valid_address) {\n        return 1;\n    }\n    if (address > 0xf) {\n        return 1;\n    }\n    set_bits_in_memory(0xffffffff, address, 0);\n    *(uint *)PTR_DAT_08001c84 = address;\n    return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_and_set_address_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input1, int input2, uint32_t input3, int input4) {\n    int is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    int is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n    if (is_input2_valid && is_input4_valid) {\n        return 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "readAndUpdateParams_08001366",
                "param_1": "data",
                "param_2": "character",
                "param_3": "length",
                "param_4": "param_4",
                "cVar1": "current_char"
            },
            "code": "void readAndUpdateParams_08001366(int data, char character, uint length, undefined4 param_4) {\n  char current_char;\n  if (length > 3) {\n    length = 3;\n  }\n  if ((int)(uint)*(byte *)(data + 0x17) <= (int)length) {\n    length = *(byte *)(data + 0x17) - 1 & 0xff;\n  }\n  current_char = *(char *)(length + data + 0x18);\n  readAndUpdateParams_08001366_08001310(data, character + current_char | 0x80, 0, current_char, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "readAndUpdateParams_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "read_and_update_param_08005848",
                "param_1": "current_param",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "data_ptr",
                "uVar4": "bit_mask",
                "puVar3": "data_ptr_2",
                "iVar1": "bit_value",
                "uVar2": "data"
            },
            "code": "void read_and_update_param_08005848(uint current_param, undefined4 value_1, undefined4 value_2, undefined* data_ptr)\n{\n    uint bit_mask;\n    undefined* data_ptr_2;\n    int bit_value;\n\n    if (current_param < 0x3c) {\n        bit_mask = (uint)(char)PTR_DAT_08005888[current_param];\n        data_ptr_2 = PTR_DAT_08005888;\n    }\n    else {\n        bit_mask = 0xffffffff;\n        data_ptr_2 = data_ptr;\n    }\n    if ((bit_mask != 0xffffffff) && (bit_value = get_bit_from_uint_array_080047f4(bit_mask, PTR_DAT_0800588c, value_2, data_ptr_2, data_ptr), bit_value != 0)) {\n        undefined4 data = get_data_by_param_08004848((bit_mask << 0x18) >> 0x1c);\n        set_param_value_based_on_condition_08004c30(data, 1 << (bit_mask & 0xf) & 0xffff, value_1);\n    }\n    return;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080015b2",
                "FUN_08001310",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "read_and_update_param_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "send_interrupt_request_08000ae8"
            },
            "code": "void send_interrupt_request_08000ae8(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "send_interrupt_request_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_flags_and_reset_08003ed8",
                "param_1": "input",
                "puVar1": "input_ptr"
            },
            "code": "void set_flags_and_reset_08003ed8(uint **input)\n{\n  uint *input_ptr;\n  input[0][61] = 2;\n  input_ptr = *input;\n  if ((input_ptr[8] & 0x1111) == 0) {\n    if ((input_ptr[8] & 0x444) == 0) {\n      *input_ptr = *input_ptr & 0xfffffffe;\n    }\n  }\n  set_flag_bits_08004b34(input);\n  input[0][61] = 0;\n  input[0][15] = 0;\n  return;\n}\n",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_reset_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_array_with_value_080061e0",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end"
            },
            "code": "void fill_array_with_value_080061e0(char *array, char value, int length) {\n  char *end = array + length;\n  for (; array != end; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08006c88"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "update_params_if_valid_08005604",
                "uVar1": "array_index",
                "iVar2": "function_return_value",
                "iVar3": "array_value"
            },
            "code": "void update_params_if_valid_08005604() {\n  uint array_index = find_index_in_array();\n  int array_value = *(int *)(PTR_DAT_08005644 + array_index * 4);\n  if ((array_index < 5) && (array_value = (**(code **)(PTR_DAT_08005648 + array_index * 4))(array_value), array_value != -1)) {\n    check_and_update_params_0800455a(*(undefined4 *)(PTR_DAT_0800564c + (uint)*(byte *)(array_value + 0x44) * 4), *(int *)(array_value + 100) + (uint)*(ushort *)(array_value + 0x6a), 1);\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "update_params_if_valid_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "get_one_08005724"
            },
            "code": "int get_one_08005724() {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "get_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "readAndSetParams_0800135a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "readAndUpdateParams_08001310": "readAndUpdateParams"
            },
            "code": "void readAndSetParams_0800135a(void* param1, int param2, int param3, void* param4, void* param5)\n{\n  readAndUpdateParams(param1, 1, 0, param4, param5);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "readAndSetParams_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "get_string_length_08005c96",
                "param_1": "string_pointer",
                "param_2": "string_length",
                "uVar1": "string_end",
                "result": "result"
            },
            "code": "int get_string_length_08005c96(int *string_pointer, int string_length, undefined4 param_3, undefined4 param_4) {\n  if (string_length != 0) {\n    int string_end = get_string_end_08000178(string_length);\n    int result = (**(code **)(*string_pointer + 4))(string_pointer, string_length, string_end, *(code **)(*string_pointer + 4), param_4);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_string_length_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_memory_permissions_0800571a",
                "param_1": "address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(address + 4)"
            },
            "code": "int set_memory_permissions_0800571a(int* address, int permissions) {\n\t*(int *)(address + 4) = permissions;\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_input_08002efc",
                "param_1": "input",
                "puVar1": "temp_ptr",
                "flag_ptr": "flag_ptr",
                "DAT_0800043d": "flag_char",
                "counter_val": "counter_val",
                "DAT_080002a": "counter_val",
                "mode_ptr": "mode_ptr",
                "status_ptr": "status_ptr",
                "data_ptr": "data_ptr",
                "temp_ptr": "temp_ptr",
                "do_nothing_08002db0": "do_nothing_1",
                "do_nothing_08002c4e": "do_nothing_2"
            },
            "code": "uint32_t process_input_08002efc(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *counter_ptr;\n  uint32_t *status_ptr;\n  uint32_t *data_ptr;\n  uint32_t *mode_ptr;\n  uint32_t *temp_ptr;\n  uint8_t DAT_0800043d;\n  uint16_t DAT_080002a;\n\n  flag_ptr = input[0xb];\n  DAT_0800043d = *(char *)((int)input + 0x3d);\n\n  if (DAT_0800043d == '!') {\n    DAT_080002a = *(short *)((int)input + 0x2a);\n\n    if (DAT_080002a == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*input)[1] &= 0xfffff8ff;\n        **input |= 0x200;\n        input[0xc] = (uint32_t *)0x0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(undefined *)((int)input + 0x3e) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(undefined *)((int)input + 0x3e) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*input)[1] &= 0xfffff8ff;\n        input[0xc] = (uint32_t *)0x11;\n        *(undefined *)((int)input + 0x3e) = 0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      temp_ptr = input[9];\n      input[9] = (uint32_t *)((int)temp_ptr + 1);\n      (*input)[4] = (uint32_t)*(uint8_t *)temp_ptr;\n      DAT_080002a--;\n      *(short *)((int)input + 0x2a) = DAT_080002a;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "calculate_and_decrement_0800365c",
                "param_1": "input_num",
                "local_4": "calculated_num"
            },
            "code": "void calculate_and_decrement_0800365c(int input_num){\n    int calculated_num = input_num * (uint)((ulonglong)constant_val * (ulonglong)*(uint *)pointer_val >> 0x29);\n    do {\n        calculated_num--;\n    } while (calculated_num != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "process_input_080033b8",
                "param_1": "input",
                "iVar1": "value_ptr",
                "uVar2": "flags1",
                "uVar3": "value1",
                "uVar4": "flags3",
                "DAT_08003518": "flags2_1",
                "DAT_08003504": "flags3_1",
                "DAT_0800350c": "flags3_2",
                "DAT_0800351c": "flags2_2",
                "DAT_08003514": "flags1_2"
            },
            "code": "void process_input_080033b8(uint32_t *input)\n{\n  uint32_t iVar1;\n  uint32_t flags1;\n  uint32_t flags2;\n  uint32_t flags3;\n  uint32_t value1;\n  uint32_t value2;\n  uint32_t value3;\n  \n  iVar1 = *input;\n  flags3 = *(uint32_t *)(iVar1 + 0x18);\n  flags1 = *(uint32_t *)(iVar1 + 0x14);\n  value1 = *(uint32_t *)(iVar1 + 4);\n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((flags1 & 0x10001) == 0) || ((value1 & 0x200) == 0)) {\n      if (((flags2 & flags1) == 0) || ((value1 & 0x200) == 0)) {\n        if (((flags3 & flags1) != 0) && ((value1 & 0x200) != 0)) {\n          set_flags_based_on_params(input);\n        }\n      }\n      else {\n        set_value_from_param(input);\n      }\n    }\n    else {\n      set_flag(input);\n    }\n    if ((flags3 & 0x4) == 0) {\n      if ((((flags1 & 0x20000) != 0) && ((value1 & 0x400) != 0)) && ((flags2 & 0x10000) == 0)) {\n        process_string(input);\n        return;\n      }\n      if (((flags2 & 0x10000) != 0) && ((value1 & 0x200) != 0)) {\n        process_data(input);\n        return;\n      }\n    }\n    else {\n      if ((((flags1 & 0x40000) != 0) && ((value1 & 0x400) != 0)) && ((flags2 & 0x10000) == 0)) {\n        process_data(input);\n        return;\n      }\n      if (((flags2 & 0x10000) != 0) && ((value1 & 0x200) != 0)) {\n        process_input_080033b8(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags3 & flags1) != 0) && ((value1 & 0x200) != 0)) {\n      process_params();\n      return;\n    }\n    if ((((flags1 & 0x8000) != 0) && ((value1 & 0x200) != 0)) && ((flags2 & 0x10000) == 0)) {\n      process_input_080033b8(input);\n      return;\n    }\n    if ((flags3 & 0x4) == 0) {\n      if ((((flags1 & 0x20000) != 0) && ((value1 & 0x400) != 0)) && ((flags2 & 0x10000) == 0)) {\n        process_input_080033b8(input);\n        return;\n      }\n      if (((flags2 & 0x10000) != 0) && ((value1 & 0x200) != 0)) {\n        writeToBuffer(input);\n      }\n    }\n    else {\n      if ((((flags1 & 0x40000) != 0) && ((value1 & 0x400) != 0)) && ((flags2 & 0x10000) == 0)) {\n        process_input_080033b8(input);\n        return;\n      }\n      if (((flags2 & 0x10000) != 0) && ((value1 & 0x200) != 0)) {\n        increment_and_store_byte_at_address(input);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ad8",
                "FUN_08002ab8",
                "FUN_08002db2",
                "FUN_08002c54",
                "FUN_08002f9c",
                "FUN_0800306c",
                "FUN_08002cf2",
                "FUN_08002ca6",
                "FUN_08002efc",
                "FUN_080028d2",
                "FUN_080032b4",
                "FUN_080028de",
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "result",
                "param_2": "data",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "ptr_value"
            },
            "code": "uint process_data_080069e4(uint *result, uint *data)\n{\n    uint value1;\n    ushort value2;\n    int ptr_value;\n\n    ptr_value = *(int *)PTR_PTR_DAT_08006ab0;\n    if (ptr_value != 0 && *(int *)(ptr_value + 0x18) == 0)\n    {\n        free(ptr_value);\n    }\n    if (data == (uint *)PTR_DAT_08006ab4)\n    {\n        data = *(uint **)(ptr_value + 4);\n    }\n    else if (data == (uint *)PTR_DAT_08006ab8)\n    {\n        data = *(uint **)(ptr_value + 8);\n    }\n    else if (data == (uint *)PTR_DAT_08006abc)\n    {\n        data = *(uint **)(ptr_value + 0xc);\n    }\n    value2 = *(ushort *)(data + 3);\n    value1 = (uint)value2;\n    if ((int)(value1 << 0x1c) >= 0)\n    {\n        if ((int)(value1 << 0x1b) >= 0)\n        {\n            *result = 9;\n            goto LAB_08006a14;\n        }\n        if ((int)(value1 << 0x1d) < 0)\n        {\n            if ((uint *)data[0xd] != (uint *)0x0 && (uint *)data[0xd] != data + 0x11)\n            {\n                add_to_linked_list(result);\n            }\n            data[0xd] = 0;\n            *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xffdb;\n            data[1] = 0;\n            *data = data[4];\n        }\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 8;\n    }\n    if (data[4] == 0 && (*(ushort *)(data + 3) & 0x280) != 0x200)\n    {\n        allocate_and_initialize_memory(result, data);\n    }\n    value2 = *(ushort *)(data + 3);\n    value1 = value2 & 1;\n    if ((value2 & 1) == 0)\n    {\n        if ((int)((uint)value2 << 0x1e) >= 0)\n        {\n            value1 = data[5];\n        }\n        data[2] = value1;\n    }\n    else\n    {\n        data[2] = 0;\n        data[6] = -data[5];\n    }\n    if (data[4] == 0)\n    {\n        value2 = *(ushort *)(data + 3);\n        value1 = (int)(short)value2 & 0x80;\n        if (value1 != 0)\n        {\n            *(ushort *)(data + 3) = value2 | 0x40;\n            return 0xffffffff;\n        }\n    }\n    else\n    {\n        value1 = 0;\n    }\n    return value1;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006e10",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_080069e4",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08006ab4) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006ab8) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006abc) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_to_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08006e10(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "update_memory_and_do_nothingness_08004b9e",
                "PTR_08001cac": "memory_value_pointer",
                "FUN_08002582": "perform_nothingness",
                "FUN_08004b9c": "do_nothing"
            },
            "code": "void update_memory_and_do_nothingness_08004b9e(void)\n{\n  update_value_in_memory_08001cac();\n  perform_nothingness_08002582();\n  do_nothing_08004b9c();\n  return;\n}",
            "called": [
                "FUN_08004b9c",
                "FUN_08002582",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "update_memory_and_do_nothingness_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_input_wrapper_08005730",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "void process_input_wrapper_08005730(undefined4 input_1, undefined4 input_2, undefined4 input_3, undefined4 input_4)\n{\n    process_input_080053d4(input_2, input_3, input_3, input_4, input_4);\n    return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "perform_nothingness_08002582",
                "do_nothing_08002580": "do_nothing"
            },
            "code": "void perform_nothingness_08002582(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "perform_nothingness_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag_index",
                "uVar1": "return_value",
                "DAT_08004914": "data_ptr",
                "DAT_08004918": "flag_0",
                "DAT_0800491c": "flag_1",
                "DAT_08004920": "flag_2",
                "DAT_08004924": "flag_3",
                "DAT_08004928": "flag_4"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag_index) {\n    uint32_t* DAT_08004914 = (uint32_t*)DAT_08004914;\n    switch(flag_index) {\n        case 0:\n            DAT_08004914[6] |= 0x4;\n            return DAT_08004918;\n        case 1:\n            DAT_08004914[6] |= 0x8;\n            return DAT_0800491c;\n        case 2:\n            DAT_08004914[6] |= 0x10;\n            return DAT_08004920;\n        case 3:\n            DAT_08004914[6] |= 0x20;\n            return DAT_08004924;\n        case 4:\n            DAT_08004914[6] |= 0x40;\n            return DAT_08004928;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_data_and_clear_memory_08001be8",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "set_flags_08004d44": "set_flags",
                "execute_functions_08006198": "execute_functions",
                "controlReflowOven_08005f6c": "control_reflow_oven"
            },
            "code": "void copy_data_and_clear_memory_08001be8(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08001c28; data_ptr < PTR_DAT_08001c2c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_flags();\n  execute_functions();\n  jump_table = (code *)0x8001c1a;\n  control_reflow_oven();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08006198",
                "FUN_08004d44",
                "FUN_08005f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "param_1": "head",
                "param_2": "size",
                "param_3": "unused",
                "param_4": "error_code",
                "puVar1": "pointer_to_head",
                "extraout_r1": "unused",
                "ppiVar2": "next_node",
                "ppiVar3": "prev_node",
                "piVar4": "data",
                "ppiVar5": "curr",
                "ppiVar6": "tail",
                "ppiVar7": "node"
            },
            "code": "void add_to_linked_list_080061f0(int **head, int *node, int size, int *error_code) {\n  if (size == 0) {\n    return;\n  }\n  int **tail = head;\n  if (*head < 0) {\n    tail = (int **)((int)tail + **head);\n  }\n  do_nothing_08006eac();\n  int **curr = *head;\n  if (curr == (int **)0x0) {\n    tail[1] = (int *)0x0;\n    *head = node;\n  }\n  else if (tail < curr) {\n    int **next = (int **)*tail;\n    int **prev = (int **)((int)tail + (int)next);\n    if (curr == prev) {\n      int *data = *curr;\n      curr = (int **)curr[1];\n      prev = (int **)((int)data + (int)next);\n      *tail = (int *)prev;\n    }\n    tail[1] = (int *)curr;\n    *head = node;\n  }\n  else {\n    while (curr != (int **)0x0 && curr <= tail) {\n      int **next = curr[1];\n      if (next == (int **)0x0) break;\n      curr = next;\n    }\n    int **next = (int **)*curr;\n    if ((int **)((int)curr + (int)next) == tail) {\n      next = (int **)((int)next + (int)*tail);\n      *curr = (int *)next;\n      if (next == (int **)((int)curr + (int)next[1])) {\n        int *data = *next;\n        next = (int **)next[1];\n        next = (int **)((int)next + (int)data);\n        *curr = (int *)next;\n        curr[1] = (int *)next;\n      }\n    }\n    else if (tail < (int **)((int)curr + (int)next)) {\n      *error_code = 0xc;\n    }\n    else {\n      next = (int **)((int)tail + (int)*tail);\n      if (next == (int **)tail[1]) {\n        int *data = *next;\n        next = (int **)next[1];\n        next = (int **)((int)data + (int)*tail);\n        *tail = (int *)next;\n      }\n      tail[1] = (int *)next;\n      curr[1] = (int *)tail;\n    }\n  }\n  do_nothing_08006eae(error_code, curr, tail, node);\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "check_and_update_value_08002348",
                "param_1": "value",
                "iVar1": "result"
            },
            "code": "int check_and_update_value_08002348(int value){\n    int result;\n    if (*(char *)(value + 0x24) == '\\x01') {\n        return 2;\n    }\n    *(undefined *)(value + 0x24) = 1;\n    result = check_and_update_value_08002348_080020f0();\n    if (result == 0) {\n        *(uint *)(value + 0x28) = *(uint *)(value + 0x28) & 0xffffeefe | 1;\n    }\n    *(undefined *)(value + 0x24) = 0;\n    return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_value_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "execute_function_080060d4",
                "param_1": "input_param",
                "iVar1": "bits_set",
                "execute_function_and_wait_08007090": "execute_function_and_wait",
                "count_bits_set_08005f8c": "count_bits_set"
            },
            "code": "void execute_function_080060d4(int input_param)\n{\n  int bits_set;\n  if (*(int *)(input_param + 8) != 0) {\n    (**(code **)(input_param + 0xc))();\n    return;\n  }\n  execute_function_080060d4_and_wait();\n  bits_set = count_bits_set();\n  if (*(int *)(PTR_DAT_08006100 + bits_set * 0x14 + 0xc) != 0) {\n    execute_function_080060d4(input_param);\n  }\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "execute_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "set_data_08005a68",
                "param_1": "data_index",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "flag_bits",
                "iVar2": "num_bits_set",
                "pbVar3": "data_pointer",
                "unaff_r4": "data_type",
                "unaff_r6": "data_mask",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "execute_assertion_and_wait_0800611c": "execute_assertion_and_wait",
                "update_data_08005510": "set_data_value",
                "uRam08005b14": "value",
                "iRam08005b1c": "assertion_result",
                "uRam08005b20": "assertion_data",
                "uRam08005b18": "assertion_mask",
                "PTR_DAT_08005b38": "data_values"
            },
            "code": "void set_data_08005a68(int data_index, int value, byte flags) {\n  int num_bits_set = 0;\n  int data_offset = 0;\n  int data_size = 0;\n  int data_type = 0;\n  int data_flags = 0;\n  int data_mask = 0;\n  int data_value = 0;\n  if (flags & 0x30) {\n    data_offset = 0x600;\n    num_bits_set++;\n  }\n  else if ((flags & 0x20) == 0) {\n    data_offset = 0;\n  }\n  else {\n    data_offset = 0x400;\n    num_bits_set++;\n  }\n  if (flags & 8) {\n    data_flags |= 0x2000;\n  }\n  if (flags & 7) {\n    if (flags & 4) {\n      data_type = 7;\n    }\n    else if (flags & 2) {\n      data_type = 6;\n    }\n    else {\n      data_type = 0;\n    }\n    num_bits_set++;\n  }\n  if (num_bits_set == 8) {\n    data_flags |= 0x1000;\n  }\n  else if (num_bits_set == 9) {\n    data_flags |= 0x1000;\n    data_type = 0;\n  }\n  if (num_bits_set > 0) {\n    set_data_08005a68_value(data_index, value);\n  }\n  else {\n    int assertion_result = execute_assertion_and_wait(299);\n    byte* data_pointer = *(byte**)(assertion_result + data_mask);\n    *data_pointer = 0;\n    if (assertion_result < 0x3c) {\n      data_value = PTR_DAT_08005b38[assertion_result];\n    }\n    else {\n      data_value = 0xff;\n    }\n    UNRECOVERED_JUMPTABLE = (code*)0x8005b12;\n    execute_assertion_and_wait_0800611c(uRam08005b20, 299, iRam08005b1c, uRam08005b18);\n    (*UNRECOVERED_JUMPTABLE)();\n  }\n}\n",
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "set_data_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "parse_input_string_08001814",
                "param_1": "output_buffer",
                "param_2": "input_string_1",
                "param_3": "input_string_2",
                "param_4": "input_string_3",
                "param_5": "input_string_4",
                "param_6": "input_string_5",
                "param_7": "input_string_6",
                "param_8": "input_string_7",
                "param_9": "input_string_8",
                "iVar1": "is_terminated",
                "uVar2": "hash_2",
                "uVar3": "input_flag_char",
                "bVar4": "is_flag_not_1",
                "uVar5": "reversed_bits",
                "uVar6": "hash_3",
                "uVar7": "hash_4"
            },
            "code": "void parse_input_string_08001814(unsigned int *output_buffer, unsigned int input_string_1, unsigned int input_string_2, unsigned int input_string_3, unsigned int input_string_4, unsigned int input_string_5, unsigned int input_string_6, unsigned int input_string_7, unsigned int input_string_8, int input_flag)\n{\n    int is_terminated;\n    unsigned int reversed_bits;\n    unsigned int hash_1;\n    unsigned int hash_2;\n    unsigned long long hash_3;\n    unsigned long long hash_4;\n    unsigned long long hash_5;\n\n    is_terminated = is_string_terminated(input_string_1, input_string_2, 0, 0) && is_string_terminated(input_string_3, input_string_4, 0, 0) && is_string_terminated(input_string_5, input_string_6, 0, 0) && is_string_terminated(input_string_7, input_string_8, 0, 0);\n    if (is_terminated)\n    {\n        output_buffer[13] = input_flag;\n        if (input_flag != 1)\n        {\n            input_flag = 0;\n        }\n        *(char *)((int)output_buffer + 113) = input_flag;\n        output_buffer[0] = input_string_1;\n        output_buffer[1] = input_string_2;\n        output_buffer[2] = input_string_3;\n        output_buffer[3] = input_string_4;\n        output_buffer[4] = input_string_5;\n        output_buffer[5] = input_string_6;\n        reversed_bits = reverse_bits(output_buffer[22]);\n        hash_1 = hash_string(reversed_bits, reversed_bits >> 32, 0, HASH_CONSTANT_1);\n        output_buffer[6] = input_string_1;\n        output_buffer[7] = input_string_2;\n        hash_2 = hash_string(input_string_3, input_string_4, hash_1, reversed_bits >> 32);\n        hash_3 = compute_hash(input_string_5, input_string_6, hash_2, reversed_bits);\n        *(unsigned long long *)(output_buffer + 8) = hash_3;\n        hash_4 = compute_hash(input_string_7, input_string_8, hash_1, reversed_bits >> 32);\n        *(unsigned long long *)(output_buffer + 10) = hash_4;\n        if (output_buffer[12] == 1)\n        {\n            hash_5 = compute_hash(0, 0, input_string_1, input_string_2);\n            *(unsigned long long *)(output_buffer + 6) = hash_5;\n            hash_3 = compute_hash(0, 0, hash_3, hash_3 >> 32);\n            *(unsigned long long *)(output_buffer + 8) = hash_3;\n            hash_4 = compute_hash(0, 0, hash_4, hash_4 >> 32);\n            *(unsigned long long *)(output_buffer + 10) = hash_4;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_08000190",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "parse_input_string_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "send_interrupt_if_not_sent_08000aec",
                "param_1": "param1",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "param4",
                "uVar1": "interrupt_response",
                "PTR_DAT_08000b04": "interrupt_sent"
            },
            "code": "int send_interrupt_if_not_sent_08000aec(int interrupt_type, int param1, int unused1, int unused2, int param4) {\n  int PTR_DAT_08000b04 = *(int *)PTR_DAT_08000b04;\n  if (PTR_DAT_08000b04 != 0) {\n    return 0;\n  }\n  int interrupt_response = send_interrupt_request_08000ae8(interrupt_type, param1, unused1, unused2, param4);\n  return interrupt_response;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "send_interrupt_if_not_sent_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "returnZero_0800572c"
            },
            "code": "int returnZero_0800572c() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "returnZero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_function_if_not_null_08004e12",
                "iVar1": "decrement_result",
                "decrement_by_four_08004df4": "get_decrement_result",
                "*(code **)(iVar1 + 0x48)": "*(code**)(decrement_result + 0x48)",
                "code": "code_pointer",
                "function_ptr": "code_pointer"
            },
            "code": "void execute_function_if_not_null_08004e12(void)\n{\n  int decrement_result = get_decrement_result();\n  code* function_ptr = *(code**)(decrement_result + 0x48);\n  if (function_ptr != NULL) {\n    (*function_ptr)();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_signed_int_08000a58",
                "param_1": "unsigned_input",
                "param_2": "shift_value",
                "uVar1": "signed_output",
                "iVar2": "shifted_value",
                "uVar3": "shifted_value_abs"
            },
            "code": "uint convert_to_signed_int_08000a58(uint unsigned_input, uint shift_value)\n{\n  uint signed_output;\n  int shifted_value = shift_value * 2 + 0x200000;\n  if (shift_value * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    uint shifted_value_abs = -shifted_value - 0x3e1;\n    if (shifted_value >> 0x15 < 0xfffffc20 && shifted_value_abs != 0) {\n      signed_output = (unsigned_input << 0xb | 0x80000000 | shifted_value >> 0x15) >> (shifted_value_abs & 0xff);\n      if ((shift_value & 0x80000000) != 0) {\n        signed_output = -signed_output;\n      }\n      return signed_output;\n    }\n  }\n  else if ((unsigned_input | shift_value << 0xc) != 0) {\n    return 0;\n  }\n  shift_value = shift_value & 0x80000000;\n  if (shift_value == 0) {\n    shift_value = 0x7fffffff;\n  }\n  return shift_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_to_signed_int_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_system_08001b48",
                "local_54": "update_bits_parameters",
                "local_4c": "update_bits_parameter",
                "local_44": "bitmask",
                "local_40": "operation_parameter",
                "local_3c": "set_bits_parameter",
                "local_38": "bitmask_parameter",
                "local_34": "set_bits_value",
                "local_30": "initialize_parameter",
                "local_20": "initialize_parameter_1",
                "local_1c": "initialize_parameter_2",
                "local_14": "initialize_parameter_3",
                "local_10": "initialize_parameter_4",
                "local_c": "check_address",
                "iVar1": "result",
                "uVar2": "pointer_value",
                "PTR_s__home_bo__arduino15_packages_STM_08001be4": "wait_forever_parameter"
            },
            "code": "void initialize_system_08001b48(void)\n{\n  int result;\n  uint pointer_value;\n  int wait_time = 0x88;\n  int perform_operation = 0x95;\n  int update_bits = 0x9c;\n  int bitmask = 0xf;\n  int operation_parameter = 2;\n  int update_bits_parameter = 0x8000;\n  int bitmask_parameter = 0x400;\n  int update_flag_value = 4;\n  int set_bits_value = 0xffffffff;\n  int set_bits_parameter = 0;\n  int initialize_parameter[4] = {2, 1, 0x10, 2};\n  int check_address = (int)(0x380000);\n  result = initialize_system_08001b48_08003688(initialize_parameter);\n  if (result != 0) {\n    wait_forever_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4, wait_time);\n  }\n  int operation_parameters[4] = {bitmask, operation_parameter, set_bits_parameter, bitmask_parameter};\n  result = perform_operation_08003ad4(operation_parameters);\n  if (result != 0) {\n    wait_forever_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4, perform_operation);\n  }\n  int update_bits_parameters[2] = {operation_parameter, update_bits_parameter};\n  result = update_bits_08003c90(update_bits_parameters);\n  if (result != 0) {\n    wait_forever_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4, update_bits);\n  }\n  pointer_value = get_pointer_value_08003c44();\n  check_if_valid_address_08002514((unsigned int)((long long)check_address * (long long)pointer_value >> 0x26));\n  update_flag_08002560(update_flag_value);\n  set_bits_in_memory_08002494(set_bits_value, set_bits_parameter);\n  return;\n}",
            "called": [
                "FUN_08002560",
                "FUN_08003c90",
                "FUN_08003688",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_system_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "set_bit_in_uint_array_08004092",
                "param_1": "array",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*target_word",
                "1 << (param_2 & 0xff)": "1 << bit_shift",
                "~(1 << (param_2 & 0xff))": "~(1 << bit_shift)",
                "param_1 + 0x20": "array + (bit_position >> 5)",
                "(param_2 & 0xff)": "bit_position & 0x1F"
            },
            "code": "void set_bit_in_uint_array_08004092(uint32_t* array, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t* target_word = array + (bit_position >> 5);\n    uint8_t bit_shift = bit_position & 0x1F;\n    *target_word = (*target_word & ~(1 << bit_shift)) | (bit_value << bit_shift);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "get_string_length_plus_param_08005cd4",
                "param_1": "param",
                "iVar1": "string_length",
                "iVar2": "function_result",
                "get_string_length_08005c96": "get_string_length",
                "execute_function_with_params_08005cc0": "execute_function_with_params"
            },
            "code": "int get_string_length_plus_param_08005cd4(int param)\n{\n  int string_length = get_string_length();\n  int function_result = execute_function_with_params(param);\n  return function_result + string_length;\n}",
            "called": [
                "FUN_08005c96",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_string_length_plus_param_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_data_structures_if_param2_equals_0xffff_08005bb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void initialize_data_structures_if_param2_equals_0xffff_08005bb0(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_data_structures_08005b54(PTR_DAT_08005bd0, DAT_08005bcc, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_if_param2_equals_0xffff_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "update_parameters_080014ba",
                "param_1": "parameter_address",
                "param_2": "is_param2_zero",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "param_6": "parameter_6",
                "param_7": "parameter_7",
                "param_8": "parameter_8",
                "param_9": "parameter_9",
                "param_10": "parameter_10",
                "param_11": "parameter_11",
                "param_12": "parameter_12",
                "param_13": "parameter_13"
            },
            "code": "void update_parameters_080014ba(int parameter_address, int is_param2_zero, undefined parameter_3, undefined4 parameter_4, undefined parameter_5, undefined parameter_6, undefined parameter_7, undefined parameter_8, undefined parameter_9, undefined parameter_10, undefined parameter_11, undefined parameter_12, undefined parameter_13) {\n  *(undefined *)(parameter_address + 8) = parameter_3;\n  *(char *)(parameter_address + 9) = (char)parameter_4;\n  *(undefined *)(parameter_address + 10) = parameter_5;\n  *(undefined *)(parameter_address + 0xb) = parameter_6;\n  *(undefined *)(parameter_address + 0xc) = parameter_7;\n  *(undefined *)(parameter_address + 0xd) = parameter_8;\n  *(undefined *)(parameter_address + 0xe) = parameter_9;\n  *(undefined *)(parameter_address + 0xf) = parameter_10;\n  *(undefined *)(parameter_address + 0x10) = parameter_11;\n  *(undefined *)(parameter_address + 0x11) = parameter_12;\n  *(undefined *)(parameter_address + 0x12) = parameter_13;\n  if (is_param2_zero == 0) {\n    *(undefined *)(parameter_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(parameter_address + 0x13) = 0;\n  }\n  update_parameters_080014ba_080013a4(parameter_address,0x10,1,0,parameter_4);\n  return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "update_parameters_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "update_bits_08003c90",
                "param_1": "bits_to_update",
                "puVar1": "pointer_to_bits",
                "iVar2": "pointer_to_data",
                "iVar3": "current_value",
                "uVar4": "bits_value",
                "bVar5": "is_bit_cleared",
                "DAT_08003d98": "PTR_DAT_08003d98",
                "DAT_08003d9c": "PTR_DAT_08003d9c",
                "DAT_08003da0": "PTR_DAT_08003da0",
                "get_value_from_pointer_08001cc4": "get_initial_value_08001cc4"
            },
            "code": "int update_bits_08003c90(uint *bits_to_update)\n{\n    bool is_bit_set = (*bits_to_update & 1) != 0;\n    if (is_bit_set) {\n        bool is_bit_cleared = (*(uint *)(DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n        if (is_bit_cleared) {\n            *(uint *)(DAT_08003d98 + 0x1c) |= 0x10000000;\n        }\n        if ((*DAT_08003d9c & 0x100) == 0) {\n            *DAT_08003d9c |= 0x100;\n            int initial_value = get_initial_value_08001cc4();\n            while ((*DAT_08003d9c & 0x100) == 0) {\n                int current_value = get_initial_value_08001cc4();\n                if (100 < (uint)(current_value - initial_value)) {\n                    return 3;\n                }\n            }\n        }\n        uint *pointer_to_bits = DAT_08003da0;\n        int pointer_to_data = DAT_08003d98;\n        uint bits_value = *(uint *)(DAT_08003d98 + 0x20) & 0x300;\n        if ((bits_value != 0) && (bits_value != (bits_to_update[1] & 0x300))) {\n            bits_value = *(uint *)(DAT_08003d98 + 0x20);\n            *pointer_to_bits = 1;\n            *pointer_to_data = 0;\n            *(uint *)(pointer_to_data + 0x20) = bits_value & 0xfffffcff;\n            if ((bits_value & 1) != 0) {\n                int initial_value = get_initial_value_08001cc4();\n                while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n                    int current_value = get_initial_value_08001cc4();\n                    if (5000 < (uint)(current_value - initial_value)) {\n                        return 3;\n                    }\n                }\n            }\n        }\n        int pointer_to_data = DAT_08003d98;\n        *(uint *)(DAT_08003d98 + 0x20) = *(uint *)(DAT_08003d98 + 0x20) & 0xfffffcff | bits_to_update[1];\n        if (is_bit_cleared) {\n            *(uint *)(pointer_to_data + 0x1c) &= 0xefffffff;\n        }\n    }\n    if ((*bits_to_update & 2) != 0) {\n        *(uint *)(DAT_08003d98 + 4) &= 0xffff3fff | bits_to_update[2];\n    }\n    if ((*bits_to_update & 0x10) != 0) {\n        *(uint *)(DAT_08003d98 + 4) &= 0xffbfffff | bits_to_update[3];\n    }\n    return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_bits_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "check_if_valid_address_08002514",
                "param_1": "address",
                "puVar1": "address_pointer"
            },
            "code": "int check_if_valid_address_08002514(unsigned int address)\n{\n  unsigned int* address_pointer = PTR_DAT_08002538;\n  if (address - 1U < 0x1000000) {\n    PTR_DAT_08002538[1] = address - 1U;\n    *(unsigned char*)(PTR_DAT_0800253c + 0x23) = 0xf0;\n    address_pointer[2] = 0;\n    *address_pointer = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "check_if_valid_address_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void initialize_data_08005c1c(undefined4 *data, undefined value1, undefined value2, undefined value3, undefined value4) {\n  *data = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(undefined *)(data + 1) = value1;\n  *(undefined *)((int)data + 5) = value2;\n  *(undefined *)((int)data + 6) = value3;\n  *(undefined *)((int)data + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "initialize_data_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_memory_permissions_08006dc8",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "permission",
                "param_4": "result",
                "iVar1": "error_code",
                "uVar2": "permission_flags",
                "auStack_4c": "page_size",
                "local_48": "flags"
            },
            "code": "int check_memory_permissions_08006dc8(uint32_t base_address, int16_t size, uint32_t *permission, uint32_t *result){\n  int error_code;\n  uint32_t flags;\n  uint32_t page_size = 0x1000;\n  if (size < 0 || (error_code = set_memory_permissions(base_address, size, &flags)) < 0){\n    *result = 0;\n    if ((int32_t)(size << 0x18) < 0){\n      *permission = 0x40;\n      return 0;\n    }\n  }\n  else{\n    *result = (flags & 0xf000) == 0x2000;\n  }\n  *permission = 0x400;\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_memory_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "clear_bit_and_check_mask_0800412c",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "array_ptr"
            },
            "code": "int clear_bit_and_check_mask_0800412c(uint **bit_array, uint bit_position) {\n    uint *array_ptr = *bit_array;\n    set_bit_in_uint_at_offset_08004110(array_ptr, bit_position, 0);\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n        array_ptr[17] &= 0xffff7fff;\n    }\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n        *array_ptr &= 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_bit_and_check_mask_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "execute_function_and_wait_08007090",
                "UNRECOVERED_JUMPTABLE": "function_pointer"
            },
            "code": "void execute_function_and_wait_08007090(void)\n{\n  code *function_pointer;\n  function_pointer = execute_function_and_wait_08007090;\n  if (-1 < *(int *)PTR_DAT_0800712c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800712c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007130 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007130 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007134 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007134 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007138 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007138 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800713c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800713c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007140 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007140 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007144 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007144 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007148 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007148 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800714c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800714c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007150 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007150 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007154 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007154 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007158 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007158 = 1;\n  }\n  (*function_pointer)();\n  return;\n}\n",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "execute_function_and_wait_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "find_value_or_return_negative_one_0800492c",
                "param_1": "value",
                "param_2": "ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "found_index",
                "uVar2": "shifted_value"
            },
            "code": "uint find_value_or_return_negative_one_0800492c(uint value, uint *ptr, uint param_3, uint param_4)\n{\n  int found_index = find_value_or_return_negative_one_0800492c_08004cce(value, ptr, param_3, param_4, param_4);\n  uint shifted_value = (uint)(found_index << 12) >> 27;\n  if (shifted_value > 17) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "find_value_or_return_negative_one_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_0800480a",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_index",
                "*(uint *)(param_2 + uVar1 * 4) | 1 << (param_1 & 0xf)": "*array_index | mask"
            },
            "code": "void set_bit_0800480a(uint bit_position, int* array) {\n  uint index = (bit_position << 0x18) >> 0x1c;\n  uint* array_index = array + index * 4;\n  uint mask = 1 << (bit_position & 0xf);\n  *array_index = *array_index | mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "decode_080015f8",
                "param_1": "bits",
                "param_2": "mode",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "bits",
                "uVar2": "num2",
                "uVar3": "output",
                "DAT_0800169c": "high_bits",
                "DAT_08001698": "low_bits",
                "read_and_update_bits_080015b2": "read_and_update_bits",
                "reverseBits_0800040c": "reverseBits",
                "FUNC_08000194": "func1",
                "FUNC_080004f8": "func2, func3",
                "FUNC_0800074c": "func4",
                "DAT_080016a0": "param_4",
                "DAT_080016a4": "unknown_value",
                "DAT_080016a8": "unknown_value",
                "DAT_080016ac": "unknown_value",
                "DAT_080016b0": "unknown_value"
            },
            "code": "uint32_t decode_080015f8();\nuint64_t reverseBits(uint32_t num);\nuint64_t func1(uint32_t num, uint32_t DAT_080016a0);\nuint64_t func2(uint64_t num);\nuint64_t func3(uint64_t num);\nuint64_t func4(uint64_t num);\n\nuint64_t decode_080015f8(uint32_t param_1, int param_2, uint32_t param_3, uint32_t DAT_080016a0)\n{\n  uint32_t bits = decode_080015f8();\n  uint64_t output = ((uint64_t)DAT_0800169c << 32) | DAT_08001698;\n  if ((bits & 0x10000) == 0) {\n    uint32_t mask = 0x1fff;\n    uint32_t num1 = bits >> 0x12 & mask;\n    uint64_t num2 = reverseBits(num1);\n    if ((bits & 0x2000) != 0) {\n      uint32_t num3 = reverseBits(~num1 & mask);\n      num2 = func1(num3, DAT_080016a0);\n      num2 = ((num2 & 0xffffffff) | ((uint64_t)((int)(num2 >> 32) + 0x80000000) << 32));\n    }\n    output = func2(num2);\n    if (param_2 == 1) {\n      output = func3(output);\n      output = func4(output);\n      output = func1(output, DAT_080016b0);\n      return output;\n    }\n  }\n  else {\n    uint32_t mask = 7;\n    uint32_t num1 = bits & mask;\n    if (num1 == 2) {\n      return ((uint64_t)DAT_0800168c << 32) | DAT_08001688;\n    }\n    if (num1 == 4) {\n      return ((uint64_t)DAT_08001694 << 32) | DAT_08001690;\n    }\n    if (num1 != 1) {\n      return 0;\n    }\n  }\n  return output;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_080015b2",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initialize_data_if_first_run_08005c38",
                "param_1": "is_first_run",
                "param_2": "max_value",
                "initialize_data_08005c1c": "initialize_data",
                "PTR_DAT_08005c60": "PTR_DATA"
            },
            "code": "void initialize_data_if_first_run_08005c38(int is_first_run, int max_value)\n{\n    if (is_first_run && max_value == 0xffff)\n    {\n        initialize_data(PTR_DAT_08005c60, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_first_run_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "num",
                "cVar1": "count"
            },
            "code": "uint32_t count_bits_set_08005f8c(uint32_t num) {\n  uint32_t count = 0;\n  while (num != 1) {\n    count++;\n    num = num >> 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_input_08006f5a",
                "param_1": "output_data",
                "param_2": "input_data",
                "param_3": "constant1",
                "param_4": "constant2",
                "sVar1": "input_short",
                "puVar2": "PTR_DAT_08006fe0",
                "iVar3": "result"
            },
            "code": "void process_input_08006f5a(int *output_data, int input_data, int constant1, int constant2) {\n  short input_short = *(short *)(input_data + 0xe);\n  *(ushort *)(input_data + 0xc) &= 0xefff;\n  if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x17) < 0) {\n    process_data(output_data, (int)input_short, 0, 2);\n  }\n  else {\n    *(int *)PTR_DAT_08006fe0 = 0;\n    int result = process_input_08006f5a_wrapper_08005730((int)input_short, constant1, constant2, constant2, constant2, unaff_r4, unaff_r5, in_lr);\n    if ((result == -1) && (*(int *)PTR_DAT_08006fe0 != 0)) {\n      *output_data = *(int *)PTR_DAT_08006fe0;\n    }\n  }\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initialize_params_and_update_08000b08",
                "param_1": "num1",
                "param_2": "num2",
                "initialize_and_return_08001b18": "initialize_and_return",
                "initialize_params_08001510": "initialize_params",
                "update_params_0800157c": "update_params"
            },
            "code": "void initialize_params_and_update_08000b08(int num1, int num2)\n{\n  if ((num1 == 1) && (num2 == 0xffff)) {\n    initialize_and_return(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90,\n                 *(undefined4 *)PTR_DAT_08000b8c, *(undefined4 *)(PTR_DAT_08000b8c + 4),\n                 *(undefined4 *)PTR_DAT_08000b88, *(undefined4 *)(PTR_DAT_08000b88 + 4),\n                 *(undefined4 *)PTR_DAT_08000b84, *(undefined4 *)(PTR_DAT_08000b84 + 4), 0);\n    initialize_params(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8,\n                 *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n    update_params(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "initialize_params_and_update_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_arrays_08006cb4",
                "param_1": "array_ptr",
                "uVar1": "array_value",
                "iVar2": "ptr",
                "bVar3": "is_ptr_equal"
            },
            "code": "void initialize_arrays_08006cb4(int array_ptr) {\n    if (*(int *)(array_ptr + 0x18) == 0) {\n        *(int *)(array_ptr + 0x48) = 0;\n        *(int *)(array_ptr + 0x4c) = 0;\n        *(int *)(array_ptr + 0x50) = 0;\n        int ptr = *(int *)PTR_PTR_DAT_08006d0c;\n        *(undefined **)(array_ptr + 0x28) = PTR_LAB_08006c34_1_08006d10;\n        bool is_ptr_equal = array_ptr == ptr;\n        if (is_ptr_equal) {\n            ptr = 1;\n        }\n        if (is_ptr_equal) {\n            *(int *)(array_ptr + 0x18) = ptr;\n        }\n        int array1 = initialize_array_08006d14();\n        *(int *)(array_ptr + 4) = array1;\n        int array2 = initialize_array_08006d14(array_ptr);\n        *(int *)(array_ptr + 8) = array2;\n        int array3 = initialize_array_08006d14(array_ptr);\n        *(int *)(array_ptr + 0xc) = array3;\n        initialize_data_08006c40(*(int *)(array_ptr + 4), 4, 0);\n        initialize_data_08006c40(*(int *)(array_ptr + 8), 9, 1);\n        initialize_data_08006c40(*(int *)(array_ptr + 0xc), 0x12, 2);\n        *(int *)(array_ptr + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "initialize_arrays_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_08004c5e(int value, char *array)\n{\n    while (*array != -1)\n    {\n        if (*array == value)\n        {\n            return *(int *)(array + 4);\n        }\n        array += 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "check_and_set_bit_in_array_08004b3c",
                "param_1": "input_value",
                "local_50": "value_from_array",
                "find_value_08004c78": "find_index_of_value",
                "PTR_DAT_08004b90": "ARRAY_PTR",
                "get_value_from_data_08004948": "value_from_data",
                "find_value_or_return_negative_one_08004cce": "find_value_or_return_negative_one",
                "set_bit_in_uint_array_080040b0": "set_bit_in_array",
                "clear_bit_and_check_mask_0800412c": "clear_bit_and_check_mask",
                "set_flags_and_reset_08003ed8": "set_flags_and_reset"
            },
            "code": "void check_and_set_bit_in_array_08004b3c(int input_value)\n{\n  int index;\n  uint value_from_array[17];\n  index = find_index_of_value(input_value, PTR_DAT_08004b90);\n  if ((index != 0) && (((value_from_data(input_value) == 0) || (value_from_data(input_value) == 4)) || ((value_from_data(input_value) == 8) || ((value_from_data(input_value) == 12) || (value_from_data(input_value) == 24))))){\n    uint value = find_value_or_return_negative_one(input_value, PTR_DAT_08004b90);\n    if ((value & 0x100000) == 0) {\n      set_bit_in_array(value_from_array, index);\n    }\n    else {\n      clear_bit_and_check_mask(value_from_array, index);\n    }\n    set_flags_and_reset(value_from_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003ed8",
                "FUN_08004cce",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08004c78",
                "FUN_0800412c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "check_and_set_bit_in_array_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "read_and_update_params_08001550",
                "param_1": "params",
                "param_2": "mask",
                "param_3": "data_addr",
                "iVar1": "i"
            },
            "code": "void read_and_update_params_08001550(uint32_t *params, uint32_t mask, uint32_t data_addr) {\n  read_and_update_params_08001550_helper(params, (mask & 7) << 3 | 0x40, 0);\n  for (int i = 0; i < 8; i++) {\n    (**(function_ptr **)*params)(params, *(uint8_t *)(data_addr + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "read_and_update_params_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = get_value_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = decode_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = check_input(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = check_input(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = check_input(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = get_value_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = is_data_valid_and_bit_set_at_index_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      read_and_update_param_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      convert_base_or_call_function_pointer_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      get_string_length_08005c96(puVar2,PTR_DAT_08000f80);\n      validate_and_convert_string_input_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      get_string_length_08005c96(puVar2,puVar3);\n      validate_and_convert_string_input_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      get_string_length_08005c96(puVar2,puVar3);\n      calculate_sum_of_input_and_result_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      read_and_update_param_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    readAndSetParams_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    get_string_length_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    readAndUpdateParams_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      get_string_length_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      validate_and_convert_string_input_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      update_params_and_return_one_0800134e(puVar3,0);\n      get_string_length_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = decode_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = get_value_and_return_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = decode_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = get_value_and_return_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = decode_value_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = get_value_and_return_080058e0();\n    check_and_update_string_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = reverseBits_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = is_string_terminated_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      read_and_update_param_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      read_and_update_param_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    read_and_update_param_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08005cd4",
                "FUN_080018f8",
                "FUN_080058e0",
                "FUN_08005f2c",
                "FUN_08001a44",
                "FUN_080009c8",
                "FUN_08005d82",
                "FUN_080015f8",
                "FUN_08005848",
                "FUN_0800042c",
                "FUN_08001366",
                "FUN_08005f40",
                "FUN_08000a18",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_08005754",
                "FUN_08000a04",
                "FUN_080009dc",
                "FUN_08001918",
                "FUN_080009f0",
                "FUN_08005890",
                "FUN_080016b4",
                "FUN_08001960",
                "FUN_08005c96",
                "FUN_08000194"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "readAndUpdateParams_08001310",
                "param_1": "paramIndex",
                "param_2": "paramValue",
                "param_3": "param3",
                "param_4": "param4",
                "read_and_update_param_08005848": "readAndUpdateParam",
                "readAndUpdateParams_080012c0": "readAndUpdateParams",
                "readAndUpdateParams_080012e8": "readAndUpdateParams2"
            },
            "code": "void readAndUpdateParams_08001310(int paramIndex, uint32_t paramValue, uint32_t param3, uint32_t param4) {\n  readAndUpdateParam(*(uint8_t *)(paramIndex + 8), param3, param3, param4, param4);\n  if (*(int8_t *)(paramIndex + 9) != -1) {\n    readAndUpdateParam(*(int8_t *)(paramIndex + 9), 0, 0, 0, 0);\n  }\n  if ((*(uint8_t *)(paramIndex + 0x13) & 0x10) == 0) {\n    readAndUpdateParams_08001310(paramIndex, paramValue >> 4);\n    readAndUpdateParams_08001310(paramIndex, paramValue);\n    return;\n  }\n  readAndUpdateParams_080013102(paramIndex, paramValue);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_0800138e"
            ],
            "imported": false,
            "current_name": "readAndUpdateParams_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "check_and_return_params_080009a8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void check_and_return_params_080009a8(int first_param, int second_param, int third_param, int fourth_param)\n{\n    check_and_return_param_080009b8_080009b8(third_param, fourth_param, first_param, second_param);\n    return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": false,
            "current_name": "check_and_return_params_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_flag_bits_08004d90",
                "param_1": "flag_value",
                "DAT_08004de4": "FLAG_1",
                "DAT_08004df0": "FLAG_DATA_PTR",
                "DAT_08004de8": "FLAG_3",
                "DAT_08004dec": "FLAG_4"
            },
            "code": "void set_flag_bits_08004d90(int *flag_value)\n{\n    if (*flag_value == DAT_08004de4)\n    {\n        *(uint *)(DAT_08004df0 + 0x18) &= 0xfffff7ff;\n    }\n    if (*flag_value == FLAG_2)\n    {\n        *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffe;\n    }\n    if (*flag_value == DAT_08004de8)\n    {\n        *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffd;\n    }\n    if (*flag_value == DAT_08004dec)\n    {\n        *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_flag_bits_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "ptr_input_num",
                "param_2": "input_num_length",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "ptr_output_num",
                "local_15": "output_num",
                "cVar1": "c"
            },
            "code": "undefined4 convert_base_08005ce8(int *ptr_input_num, uint input_num_length, uint base) {\n  char c;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char *ptr_output_num;\n  char output_num[9];\n  output_num[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  ptr_output_num = output_num + 1;\n  do {\n    quotient = input_num_length / base;\n    remainder = (input_num_length & 0xff) - (quotient * base & 0xff) & 0xff;\n    ptr_output_num = ptr_output_num + -1;\n    c = (char)remainder;\n    if (remainder < 10) {\n      c = c + '0';\n    }\n    else {\n      c = c + '7';\n    }\n    *ptr_output_num = c;\n    input_num_length = quotient;\n  } while (quotient != 0);\n  if (ptr_output_num == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = get_string_end_08000178(ptr_output_num);\n    result = (**(code **)(*ptr_input_num + 4))(ptr_input_num,ptr_output_num,result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_input_0800316c",
                "param_1": "input",
                "iVar1": "uVar1",
                "puVar2": "ptr5",
                "puVar3": "ptr3",
                "ptr1": "input[0]",
                "ptr2": "input[0xc]",
                "ptr3": "input[0xd]",
                "ptr4": "input[0xe]",
                "do_nothing_0800316a": "do_nothing",
                "check_and_set_flag_for_value_08004ef4": "check_and_set_flag",
                "execute_function_with_flags_08004ec4": "execute_function_with_flags",
                "PTR_LAB_080035fc_1_080032ac": "PTR_LAB_080035fc_1_080032ac",
                "DAT_080032b0": "DAT_080032b0"
            },
            "code": "void process_input_0800316c(uint **input)\n{\n  int flag = *(byte *)((int)input + 0x3d) - 0x29;\n  uint *ptr1 = *input;\n  uint *ptr2 = input[0xc];\n  uint *ptr3 = input[0xd];\n  uint *ptr4 = input[0xe];\n  \n  if (flag < 2) {\n    ptr2 = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if (*(char *)((int)input + 0x3d) != '`' && ((ptr1)[1] & 0x800) == 0) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    ptr2 = (uint *)0x0;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  \n  **input = **input & 0xfffff7ff;\n  \n  if ((ptr1[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = (uint *)0x0;\n      if ((ptr1[5] & 0x40) != 0) {\n        uint *ptr5 = input[9];\n        input[9] = (uint *)((int)ptr5 + 1);\n        *(char *)ptr5 = (char)ptr1[4];\n      }\n      **input = **input & 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((ptr1[5] & 0x40) != 0) {\n        uint *ptr5 = input[9];\n        input[9] = (uint *)((int)ptr5 + 1);\n        *(char *)ptr5 = (char)ptr1[4];\n      }\n      check_and_set_flag(input);\n    }\n  }\n  else {\n    ptr1[1] = ptr1[1] & 0xfffff7ff;\n    if (*(char *)((int)ptr2 + 0x21) == '\\x01') {\n      ptr4[0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      int uVar1 = get_uVar1_from_param(ptr4);\n      if (uVar1 != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          uint *ptr5 = input[9];\n          input[9] = (uint *)((int)ptr5 + 1);\n          *(char *)ptr5 = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)ptr4[0xd])();\n      }\n    }\n    else {\n      ptr3[0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      int uVar1 = get_uVar1_from_param(ptr3);\n      if (uVar1 != 0) {\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)ptr3[0xd])();\n      }\n    }\n  }\n  \n  if (*(char *)((int)input + 0x3d) == '(' && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = DAT_080032b0;\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    execute_function_with_flags(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_input_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "set_bit_to_zero_08004828",
                "param_1": "bit",
                "param_2": "array",
                "uVar1": "index",
                "PTR_": "ptr",
                "DAT_": ""
            },
            "code": "void set_bit_to_zero_08004828(uint8_t bit, int* array) {\n    uint8_t index = (bit << 0x18) >> 0x1c;\n    uint32_t* PTR_ = (uint32_t*)(array + index * 4);\n    *PTR_ = *PTR_ & ~(1 << (bit & 0xf));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "check_and_set_value_08003afa",
                "param_1": "value_flags",
                "param_2": "value",
                "puVar1": "data_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "value_type"
            },
            "code": "uint32_t check_and_set_value_08003afa(uint32_t *value_flags, uint32_t value) {\n  uint32_t *data = (uint32_t *) DAT_08003c38;\n  if ((*value_flags & 2) != 0) {\n    data[1] = (data[1] & 0xffffff0f) | value_flags[2];\n  }\n  if ((*value_flags & 1) != 0) {\n    uint32_t value_type = value_flags[1];\n    if (value_type == 1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((value_type != 2) && ((*DAT_08003c38 & 2) == 0)) {\n      return 1;\n    }\n    data[1] = value_type | (data[1] & 0xfffffffc);\n    uint32_t start_time = get_current_time();\n    if (value_type == 1) {\n      while ((data[1] & 0xc) != 4) {\n        uint32_t current_time = get_current_time();\n        if (5000 < (current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (value_type == 2) {\n      while ((data[1] & 0xc) != 8) {\n        uint32_t current_time = get_current_time();\n        if (5000 < (current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((data[1] & 0xc) != 0) {\n        uint32_t current_time = get_current_time();\n        if (5000 < (current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  uint32_t *data_ptr = (uint32_t *) DAT_08003c34;\n  if ((value < (*DAT_08003c34 & 7)) &&\n     (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | value, value != (*data_ptr & 7))) {\n    return 1;\n  }\n  if ((*value_flags & 4) != 0) {\n    data[1] = (data[1] & 0xfffff8ff) | value_flags[3];\n  }\n  if ((*value_flags & 8) != 0) {\n    data[1] = (data[1] & 0xffffc7ff) | (value_flags[4] << 3);\n  }\n  uint32_t calculated_value = calculate_value();\n  *(uint32_t *) PTR_DAT_08003c40 = calculated_value >> PTR_DAT_08003c3c[(data[1] << 0x18) >> 0x1c];\n  check_and_set_address(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08001c3c",
                "FUN_08001cc4",
                "FUN_08003a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "check_and_set_value_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_value_from_data_08004948",
                "param_1": "data",
                "param_2": "data_array",
                "param_3": "array_size",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "code": "int get_value_from_data_08004948(uint data, uint* data_array, uint array_size, uint param_4, uint param_5){\n  int index = find_value_or_return_negative_one(data, data_array, array_size, param_4, param_5);\n  uint shifted_value = (uint)(index << 12) >> 27;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "get_value_from_data_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_value_at_offset_08005b24",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void set_value_at_offset_08005b24(int offset, uint value)\n{\n  undefined value_to_set;\n  code *jumptable;\n  if (value < 0x3c) {\n    value_to_set = PTR_DAT_08005b38[value];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(offset + 0x12d) = value_to_set;\n  (*jumptable)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "check_flag_080049f0",
                "param_1": "flag",
                "iVar1": "flag_address"
            },
            "code": "void check_flag_080049f0(int *flag){\n  int flag_address = DAT_08004a48;\n  if (*flag != DAT_08004a40) {\n    if (*flag == DAT_08004a44) {\n      *(uint *)(flag_address + 0xc) |= 0x400;\n      *(uint *)(flag_address + 0xc) &= 0xfffffbff;\n      *(uint *)(flag_address + 0x18) &= 0xfffffbff;\n      *(uint *)(flag_address + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(flag_address + 0xc) |= 0x200;\n  *(uint *)(flag_address + 0xc) &= 0xfffffdff;\n  *(uint *)(flag_address + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "check_flag_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_0x4c_from_ptr_08001e40",
                "param_1": "ptr_to_value",
                "*param_1": "*ptr_to_value"
            },
            "code": "int get_value_at_offset_0x4c_from_ptr_08001e40(int *ptr_to_value) {\n    int *ptr_to_offset_0x4c = (int *)(*ptr_to_value + 0x4c);\n    return *ptr_to_offset_0x4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x4c_from_ptr_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "value",
                "uVar2": "stack_value",
                "local_1c": "local_value",
                "abStack_18": "stack_byte_array",
                "uStack_14": "stack_u4_1",
                "uStack_10": "stack_u4_2",
                "uStack_c": "stack_u4_3"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint value;\n  uint stack_value;\n  undefined2 local_value;\n  byte stack_byte_array[4];\n  undefined4 stack_u4_1;\n  undefined4 stack_u4_2;\n  undefined4 stack_u4_3;\n  \n  stack_u4_3 = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  stack_u4_2 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  stack_u4_1 = *(undefined4 *)PTR_DAT_08003ac4;\n  local_value = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  stack_value = *(uint *)(DAT_08003ac8 + 4);\n  value = DAT_08003ad0;\n  if ((stack_value & 0xc) == 8) {\n    if ((stack_value & 0x10000) == 0) {\n      value = DAT_08003acc * (uint)stack_byte_array[(stack_value << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_08003ad0 * stack_byte_array[(stack_value << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "read_and_update_params_080012a2",
                "param_1": "param_ptr",
                "PTR_08005848": "read_and_update_param_08005848",
                "DAT_0800584e": "undefined",
                "offset": "offset"
            },
            "code": "void read_and_update_params_080012a2(int *param_ptr){\n    int offset = 10;\n    PTR_08005848(*(DAT_0800584e *)(param_ptr + offset),0);\n    PTR_08005848(*(DAT_0800584e *)(param_ptr + offset),1);\n    PTR_08005848(*(DAT_0800584e *)(param_ptr + offset),0);\n    return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "read_and_update_params_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_value_08004c78",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_08004c5e": "search_array"
            },
            "code": "int find_value_08004c78(int value_to_find) {\n  int found_value = 0;\n  if (value_to_find != -1) {\n    found_value = search_array();\n  }\n  return found_value;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004a4c",
                "FUN_08005384",
                "FUN_080053d4",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_value_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "decode_and_update_08001e48",
                "param_1": "param_array",
                "param_2": "data_array",
                "uVar1": "return_value",
                "uVar2": "data_index",
                "iVar3": "temp_var",
                "local_c": "loop_counter"
            },
            "code": "int decode_and_update_08001e48(int *param_array, uint *data_array)\n{\n    int return_value;\n    uint data_index, shift_amount, temp_data;\n    if (*(char *)(param_array + 9) == 1)\n    {\n        return_value = 2;\n    }\n    else\n    {\n        *(undefined *)(param_array + 9) = 1;\n        data_index = data_array[1];\n        if (data_index < 7)\n        {\n            shift_amount = data_index * 5 - 5;\n            temp_data = *(uint *)(*param_array + 52) & ~(0x1f << (shift_amount & 0xff));\n            *(uint *)(*param_array + 52) = data_array[0] << (shift_amount & 0xff) | temp_data;\n        }\n        else if (data_index < 0xd)\n        {\n            shift_amount = data_index * 5 - 35;\n            temp_data = *(uint *)(*param_array + 48) & ~(0x1f << (shift_amount & 0xff));\n            *(uint *)(*param_array + 48) = data_array[0] << (shift_amount & 0xff) | temp_data;\n        }\n        else\n        {\n            shift_amount = data_index * 5 - 65;\n            temp_data = *(uint *)(*param_array + 44) & ~(0x1f << (shift_amount & 0xff));\n            *(uint *)(*param_array + 44) = data_array[0] << (shift_amount & 0xff) | temp_data;\n        }\n        data_index = data_array[0];\n        if (data_index < 10)\n        {\n            shift_amount = data_array[0] * 3;\n            temp_data = *(uint *)(*param_array + 16) & ~(7 << (shift_amount & 0xff));\n            *(uint *)(*param_array + 16) = data_array[2] << (shift_amount & 0xff) | temp_data;\n        }\n        else\n        {\n            shift_amount = data_array[0] * 3 - 30;\n            temp_data = *(uint *)(*param_array + 12) & ~(7 << (shift_amount & 0xff));\n            *(uint *)(*param_array + 12) = data_array[2] << (shift_amount & 0xff) | temp_data;\n        }\n        if (data_array[0] - 16 < 2)\n        {\n            if (*param_array == DAT_08001f74)\n            {\n                if ((*(uint *)(*param_array + 8) & 0x800000) == 0)\n                {\n                    *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) | 0x800000;\n                    if (data_array[0] == 16)\n                    {\n                        for (temp_data = (uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_DAT_08001f78 >> 0x32) * 10; temp_data != 0; temp_data = temp_data + -1)\n                        {\n                        }\n                        return_value = 0;\n                    }\n                    else\n                    {\n                        return_value = 0;\n                    }\n                }\n                else\n                {\n                    return_value = 0;\n                }\n            }\n            else\n            {\n                param_array[10] = param_array[10] | 0x20;\n                return_value = 1;\n            }\n        }\n        else\n        {\n            return_value = 0;\n        }\n        *(undefined *)(param_array + 9) = 0;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "decode_and_update_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "check_and_return_param_080009b8_080009b8",
                "param_1": "user_param",
                "check_parameters_0800092c": "check_user_parameters_0800092c"
            },
            "code": "undefined4 check_and_return_param_080009b8_080009b8(undefined4 user_param)\n{\n  check_user_parameters_0800092c();\n  return user_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009a8",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_080009c8"
            ],
            "imported": false,
            "current_name": "check_and_return_param_080009b8_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "value",
                "param_2": "shift_amount",
                "iVar1": "intermediate_value",
                "uVar2": "shifted_value"
            },
            "code": "uint calculate_shifted_value_08000aa8(uint value, uint shift_amount) {\n  int intermediate_value;\n  uint shifted_value;\n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    shifted_value = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shifted_value) {\n      return (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (shifted_value & 0xff);\n    }\n  }\n  else if ((value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "check_params_and_return_result_08000a04",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "code": "bool check_params_and_return_result_08000a04(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  check_and_return_params();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_params_and_return_result_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_and_return_value_if_not_null_0800010c",
                "param_1": "value",
                "*PTR_DAT_08000124": "*PTR_FLAG",
                "DAT_08000128": "DAT_FLAG",
                "PTR_FUN_0800012c": "PTR_FUNCTION"
            },
            "code": "undefined *check_and_return_value_if_not_null_0800010c(undefined *value)\\n{\\n    if (*PTR_DAT_08000124 == \"\\0\") {\\n        if (DAT_08000128 != 0) {\\n            value = PTR_FUN_0800012c;\\n        }\\n        *PTR_DAT_08000124 = 1;\\n    }\\n    return value;\\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_value_if_not_null_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "update_value_in_memory_08001cac",
                "PTR_DAT_08001cbc": "PTR_DATA_SEGMENT_1",
                "PTR_DAT_08001cc0": "PTR_DATA_SEGMENT_2"
            },
            "code": "void update_value_in_memory_08001cac(void)\n{\n  uint8_t* ptr_to_data = (uint8_t*) PTR_DAT_08001cbc;\n  uint8_t value_to_add = *PTR_DAT_08001cc0;\n  uint32_t* ptr_to_memory_location = (uint32_t*) PTR_DAT_08001cbc;\n  *ptr_to_memory_location = (uint32_t)value_to_add + *ptr_to_memory_location;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "update_value_in_memory_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "calculate_offset_if_initialized_08005a18",
                "DAT_08005a3c": "initialized_offset",
                "PTR_DAT_08005a40": "calculate_offset_pointer"
            },
            "code": "void calculate_offset_if_initialized_08005a18()\n{\n  if (DAT_08005a3c != 0) {\n    calculate_offset(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "calculate_offset_if_initialized_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "check_flags_08003f18",
                "param_1": "params",
                "iVar1": "ptr",
                "execute_if_flag_set_08004df8": "execute_if_flag_set",
                "do_nothing_08003f14": "do_nothing",
                "execute_if_flag_set_08004df8(param_1)": "execute_if_flag_set(params)",
                "do_nothing_08003f12": "do_nothing_08003f12",
                "*(undefined *)(param_1 + 7)": "*(uint8_t *)(params + 7)",
                "*(undefined4 *)(iVar1 + 0x10)": "*(uint32_t *)(ptr + 0x10)",
                "*(uint *)(iVar1 + 0x10)": "*(uint16_t *)(ptr + 0x10)",
                "*(uint *)(iVar1 + 0xc)": "*(uint16_t *)(ptr + 0xc)",
                "*(uint *)(*param_1 + 0x18)": "*(uint32_t *)(*params + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint32_t *)(*params + 0x1c)",
                "do_nothing_08003f14(param_1)": "do_nothing(params)",
                "do_nothing_08003f12(param_1)": "do_nothing_08003f12(params)",
                "execute_function_if_not_null_08004e12(param_1)": "execute_function_if_not_null(params)",
                "do_nothing_0800417a(param_1)": "do_nothing_0800417a(params)",
                "do_nothing_08003f16(param_1)": "do_nothing_08003f16(params)",
                "do_nothing_08004178(param_1)": "do_nothing_08004178(params)"
            },
            "code": "void check_flags_08003f18(int *params) {\n  int ptr = *params;\n  uint16_t flag1 = *(uint16_t *)(ptr + 0xc);\n  uint16_t flag2 = *(uint16_t *)(ptr + 0x10);\n  if ((flag2 & 2) && (flag1 & 2)) {\n    *(uint32_t *)(ptr + 0x10) = 0xfffffffd;\n    *(uint8_t *)(params + 7) = 1;\n    if ((*(uint32_t *)(*params + 0x18) & 3) == 0) {\n      execute_if_flag_set();\n      do_nothing(params);\n    }\n    else {\n      do_nothing(params);\n    }\n    *(uint8_t *)(params + 7) = 0;\n  }\n  if ((flag2 & 4) && (flag1 & 4)) {\n    *(uint32_t *)(ptr + 0x10) = 0xfffffffb;\n    *(uint8_t *)(params + 7) = 2;\n    if ((*(uint32_t *)(*params + 0x18) & 0x300) == 0) {\n      execute_if_flag_set(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing(params);\n    }\n    *(uint8_t *)(params + 7) = 0;\n  }\n  if ((flag2 & 8) && (flag1 & 8)) {\n    *(uint32_t *)(ptr + 0x10) = 0xfffffff7;\n    *(uint8_t *)(params + 7) = 4;\n    if ((*(uint32_t *)(*params + 0x1c) & 3) == 0) {\n      execute_if_flag_set(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing(params);\n    }\n    *(uint8_t *)(params + 7) = 0;\n  }\n  if ((flag2 & 0x10) && (flag1 & 0x10)) {\n    *(uint32_t *)(ptr + 0x10) = 0xffffffef;\n    *(uint8_t *)(params + 7) = 8;\n    if ((*(uint32_t *)(*params + 0x1c) & 0x300) == 0) {\n      execute_if_flag_set(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing(params);\n    }\n    *(uint8_t *)(params + 7) = 0;\n  }\n  if ((flag2 & 1) && (flag1 & 1)) {\n    *(uint32_t *)(ptr + 0x10) = 0xfffffffe;\n    execute_function_if_not_null(params);\n  }\n  if ((flag2 & 0x80) && (flag1 & 0x80)) {\n    *(uint32_t *)(ptr + 0x10) = 0xffffff7f;\n    do_nothing_0800417a(params);\n  }\n  if ((flag2 & 0x40) && (flag1 & 0x40)) {\n    *(uint32_t *)(ptr + 0x10) = 0xffffffbf;\n    do_nothing_08003f16(params);\n  }\n  if ((flag2 & 0x20) && (flag1 & 0x20)) {\n    *(uint32_t *)(ptr + 0x10) = 0xffffffdf;\n    do_nothing_08004178(params);\n  }\n}",
            "called": [
                "FUN_08003f12",
                "FUN_0800417a",
                "FUN_08004df8",
                "FUN_08003f14",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08003f16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "check_flags_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_offset_0800591e",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x134)": "offset1",
                "*(short *)(param_1 + 0x136)": "offset2",
                "result": "result"
            },
            "code": "ushort calculate_offset_0800591e(int base_address) {\n    short offset1 = *(short *)(base_address + 0x134);\n    short offset2 = *(short *)(base_address + 0x136);\n    ushort result = (ushort)(offset1 + 0x40) - offset2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "bit_index",
                "PTR_DAT_0800255c": "array_ptr",
                "DAT_0800255c": "array_start_address"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index) {\n  if (bit_index >= 0) {\n    int* PTR_DAT_0800255c = (int*)(DAT_0800255c + ((bit_index >> 5) + 0x60) * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *PTR_DAT_0800255c = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_array",
                "iVar1": "array_index",
                "pbVar2": "current_array",
                "pbVar3": "array_end",
                "uVar4": "input_value"
            },
            "code": "uint process_input_08006344(int input_length, byte input_byte, byte **input_array) {\n  int array_index;\n  byte *current_array;\n  byte *array_end;\n  uint input_value;\n  \n  array_end = input_array[2] + -1;\n  input_array[2] = array_end;\n  if ((-1 < (int)array_end) || (((int)input_array[6] <= (int)array_end && (array_end = (byte *)(uint)input_byte, array_end != (byte *)0xa)))) {\n    current_array = *input_array;\n    *input_array = current_array + 1;\n    *current_array = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_arrays_08006cb4();\n  }\n  if (input_array == (byte **)input_array[4]) {\n    input_array = *(byte ***)(input_length + 4);\n  }\n  else if (input_array == (byte **)input_array[5]) {\n    input_array = *(byte ***)(input_length + 8);\n  }\n  else if (input_array == (byte **)input_array[6]) {\n    input_array = *(byte ***)(input_length + 0xc);\n  }\n  input_array[2] = input_array[6];\n  current_array = (byte *)(uint)*(ushort *)(input_array + 3);\n  array_index = (int)current_array << 0x1c;\n  if (((array_index < 0) && (current_array = input_array[4], current_array != (byte *)0x0)) || (array_index = process_data(input_length, input_array, array_index, current_array, array_end), array_index == 0)) {\n    input_value = (uint)input_byte;\n    array_index = (int)*input_array - (int)input_array[4];\n    if ((array_index < (int)input_array[5]) || (array_index = process_data_08006be0(input_length, input_array), array_index == 0)) {\n      input_array[2] = input_array[2] + -1;\n      current_array = *input_array;\n      *input_array = current_array + 1;\n      *current_array = input_byte;\n      if ((byte *)(array_index + 1) != input_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1f)) {\n          return input_value;\n        }\n        if (input_value != 10) {\n          return input_value;\n        }\n      }\n      array_index = process_data_08006be0(input_length, input_array);\n      if (array_index == 0) {\n        return input_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "process_input_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "check_input": "check_input",
                "in_ZR": "input_char",
                "FUN_080009c8": "check_input_080009c8"
            },
            "code": "bool check_input_080009c8(void)\\n{\\n  char input_char;\\n  check_and_return_param_080009b8_080009b8();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_input_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "current_ptr"
            },
            "code": "uint32_t process_data_08002db2(uint32_t **data)\n{\n  char current_char;\n  uint32_t *current_ptr;\n\n  current_char = *(char *)((int)data + 0x3d);\n  current_ptr = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (current_char == '!')) {\n    if ((current_ptr == (uint32_t *)0x4) || ((current_ptr == (uint32_t *)0x8 || (current_ptr == (uint32_t *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        do_nothing_08002db0();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      do_nothing_08002c4e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)data + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint32_t *)0x0) {\n        if (data[0x13] == (uint32_t *)0x1) {\n          (*data)[4] = (uint32_t)data[0x12] & 0xff;\n          data[0x14] = (uint32_t *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint32_t)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint32_t *)0x1) {\n        (*data)[4] = (uint32_t)data[0x12] & 0xff;\n        data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          current_ptr = data[9];\n          data[9] = (uint32_t *)((int)current_ptr + 1);\n          (*data)[4] = (uint32_t)*(byte *)current_ptr;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      current_ptr = data[9];\n      data[9] = (uint32_t *)((int)current_ptr + 1);\n      (*data)[4] = (uint32_t)*(byte *)current_ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "PTR_DAT_08001ccc": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_08001cc4() {\n    int* value = (int*)PTR_DAT_08001ccc;\n    return *value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08003c90",
                "FUN_080053d4",
                "FUN_08004b94",
                "FUN_08003688",
                "FUN_08001cd0",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_08001f84",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "execute_function_if_both_pointers_have_bit_2_set_08003ea0",
                "param_1": "pointer_to_pointer_of_uintegers",
                "**param_1": "first_integer",
                "(*param_1)[1]": "second_integer",
                "execute_function_if_not_null_pointer_08004d18": "execute_function_if_not_null_pointer_08004d18",
                "DAT_08003ed4": "DAT_08003ed4"
            },
            "code": "void execute_function_if_both_pointers_have_bit_2_set_08003ea0(uint **pointer_to_pointer_of_uintegers)\n{\n  uint *pointer_to_uintegers = *pointer_to_pointer_of_uintegers;\n  uint first_integer = *pointer_to_uintegers;\n  uint second_integer = *(pointer_to_uintegers + 1);\n  \n  if ((first_integer & 2) && (second_integer & 2)) {\n    execute_function_if_not_null_pointer_08004d18();\n    *(pointer_to_uintegers + 1) = 0xfffffffd;\n  }\n  \n  uint *pointer_to_dat_08003ed4_plus_0x14 = (uint *)(DAT_08003ed4 + 0x14);\n  *pointer_to_dat_08003ed4_plus_0x14 = 0x20000;\n  \n  char *pointer_to_char = (char *)pointer_to_pointer_of_uintegers + 0x11;\n  *pointer_to_char = 1;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_both_pointers_have_bit_2_set_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "puVar1": "current_data",
                "param_1[0xb]": "data[0xb]",
                "*(short *)((int)param_1 + 0x2a)": "data_length",
                "(uint *)0x4": "(uint32_t *)0x4",
                "(uint *)0x8": "(uint32_t *)0x8",
                "(uint *)0xffff0000": "(uint32_t *)0xffff0000",
                "**param_1": "**data",
                "param_1[9]": "data[9]",
                "(int)puVar1 + 1": "(int)current_position + 1",
                "*(char *)puVar1": "*(char *)current_position",
                "*(short *)((int)param_1 + 0x2a) + -1": "data_length--",
                "(*param_1)[4]": "(*data)[4]",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)data + 0x3d)",
                "param_1[0xc]": "data[0xc]",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)data + 0x3e)",
                "@": "'@'",
                "do_nothing_08002f9a": "do_nothing_08002f9a",
                "do_nothing_08002c50": "do_nothing_08002c50"
            },
            "code": "uint32_t process_data_0800306c(uint32_t **data)\n{\n    uint32_t *current_data = data[0xb];\n    uint32_t data_length = *(short *)((int)data + 0x2a);\n\n    if (data_length == 3)\n    {\n        if ((current_data == (uint32_t *)0x4) || (current_data == (uint32_t *)0x8) || (current_data == (uint32_t *)0xffff0000))\n        {\n            **data = **data & 0xfffffbff;\n        }\n\n        uint32_t *current_position = data[9];\n        data[9] = (uint32_t *)((int)current_position + 1);\n        *(char *)current_position = (char)(*data)[4];\n        data_length--;\n    }\n    else if (data_length == 2)\n    {\n        if ((current_data == (uint32_t *)0x4) || (current_data == (uint32_t *)0x8) || (current_data == (uint32_t *)0xffff0000))\n        {\n            (*data)[1] = (*data)[1] & 0xfffffcff;\n            **data = **data | 0x200;\n        }\n        else if (current_data == (uint32_t *)0x2)\n        {\n            **data = **data | 0x400;\n        }\n        else\n        {\n            **data = **data & 0xfffffbff;\n        }\n\n        uint32_t *current_position = data[9];\n        data[9] = (uint32_t *)((int)current_position + 1);\n        *(char *)current_position = (char)(*data)[4];\n        data_length--;\n\n        current_position = data[9];\n        data[9] = (uint32_t *)((int)current_position + 1);\n        *(char *)current_position = (char)(*data)[4];\n        data_length--;\n\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint32_t *)0x0;\n\n        if (*(char *)((int)data + 0x3e) == '@')\n        {\n            *(undefined *)((int)data + 0x3e) = 0;\n            do_nothing_08002f9a();\n        }\n        else\n        {\n            *(undefined *)((int)data + 0x3e) = 0;\n            do_nothing_08002c50();\n        }\n    }\n    else\n    {\n        uint32_t *current_position = data[9];\n        data[9] = (uint32_t *)((int)current_position + 1);\n        *(char *)current_position = (char)(*data)[4];\n        data_length--;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_valid_0800548c",
                "param_1": "data",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054ac": "data_pointer",
                "byte": "byte_val",
                "combine_bytes_at_offsets_080047e8": "combine_bytes_at_offsets"
            },
            "code": "bool is_valid_0800548c(uint8_t* data) {\n  uint32_t offset = *(uint8_t*)(data + 0x44) * 4;\n  uint32_t combined_bytes = combine_bytes_at_offsets_080047e8(*(uint32_t*)(PTR_DAT_080054ac + offset));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_valid_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_by_param_08004848",
                "param_1": "param",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "unsigned int get_data_by_param_08004848(unsigned int param) {\n    switch(param) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_by_param_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "convert_base_or_call_function_pointer_08005d82",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void convert_base_or_call_function_pointer_08005d82() \\n\\\n{\\n\\\n  //call function to convert base or call function pointer\\n\\\n  convert_base_or_call_function_pointer_08005d82_08005d42();\\n\\\n  return;\\n\\\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "convert_base_or_call_function_pointer_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "process_data_and_update_status_08006f92",
                "param_1": "data",
                "param_2": "status_ptr",
                "iVar1": "result",
                "uVar2": "status_flags",
                "bVar3": "is_error"
            },
            "code": "void process_data_and_update_status_08006f92(undefined4 data, int status_ptr)\n{\n    int result = process_data(data, *(short *)(status_ptr + 0xe));\n    bool is_error = result == -1;\n    ushort status_flags = *(ushort *)(status_ptr + 0xc);\n    if (is_error) {\n        status_flags &= 0xefff;\n    }\n    else {\n        *(int *)(status_ptr + 0x54) = result;\n        status_flags |= 0x1000;\n    }\n    *(ushort *)(status_ptr + 0xc) = status_flags;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "process_data_and_update_status_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "readAndUpdateParams_080012c0",
                "param_1": "baseAddress",
                "param_2": "updatedValue",
                "uVar1": "index",
                "read_and_update_param_08005848": "readAndUpdateParam",
                "read_and_update_params_080012a2": "readAndUpdateParams_080012a2"
            },
            "code": "void readAndUpdateParams_080012c0(int baseAddress, int updatedValue) {\n\tuint index;\n\tfor (index = 0; (int)index < 4; index++) {\n\t\tuint8_t currentByte = *(uint8_t *)(baseAddress + index + 0xB);\n\t\tuint8_t bitValue = updatedValue >> (index & 0xFF) & 1;\n\t\treadAndUpdateParam(currentByte, bitValue);\n\t}\n\treadAndUpdateParams_080012c0_080012a2(baseAddress);\n\treturn;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "readAndUpdateParams_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x28)": "*(uint32_t *)(base_address + offset)"
            },
            "code": "uint32_t get_value_at_offset_08001f80(uint32_t base_address, uint32_t offset) {\n    return *(uint32_t *)(base_address + offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_value_if_not_set_08001f84",
                "param_1": "value_ptr",
                "param_2": "value",
                "iVar1": "new_value",
                "iVar3": "value_ptr_val",
                "local_14": "i",
                "PTR_DAT_08001ffc": "ptr_dat_08001ffc",
                "DAT_08002000": "dat_08002000"
            },
            "code": "int set_value_if_not_set_08001f84(int *value_ptr, int value){\n  int value_ptr_val = *value_ptr;\n  if((*(uint *)(value_ptr_val + 8) & 1) == 0){\n    *(uint *)(value_ptr_val + 8) = *(uint *)(value_ptr_val + 8) | 1;\n    for (uint i = (uint)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc >> 0x32); i != 0; i--) {\n    }\n    int value_ptr_val_new = get_value_from_pointer_08001cc4(value_ptr, value, (int)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint *)(*value_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      int new_value = get_value_from_pointer_08001cc4();\n    } while ((uint)(new_value - value_ptr_val_new) < 3);\n    value_ptr[10] = value_ptr[10] | 0x10;\n    value_ptr[0xb] = value_ptr[0xb] | 1;\n    *(undefined *)(value_ptr + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_value_if_not_set_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "reflowOvenControl_08000bcc",
                "PTR_DAT_08000c90": "temperatureSensor1Address",
                "read_and_update_param_08005848": "readAndUpdateTemperature",
                "decode_and_update_flags_080057b4": "decodeAndUpdateFlags",
                "PTR_DAT_08000c94": "temperatureSensor2Address",
                "PTR_DAT_08000c98": "ovenTemperatureSensorAddress",
                "read_and_update_params_08001550": "readAndSetTimerParameters",
                "PTR_DAT_08000c9c": "timerAddressPointer",
                "update_parameters_080013a4": "updateTimerParameters",
                "readAndSetParams_0800135a": "readAndSetTimerParameters",
                "get_string_length_08005c96": "getStringLength",
                "readAndUpdateParams_08001366": "readAndUpdateTimerParameters",
                "PTR_s_Reflow_08000ca4": "reflowProfileString",
                "PTR_s_Oven_1_2_08000ca8": "ovenProfileString",
                "do_nothing_080058e8": "wait",
                "PTR_DAT_08000cac": "ovenPowerAddress",
                "get_value_and_return_080058e0": "getValueFromSensor",
                "PTR_DAT_08000cb0": "ovenTemperatureSetPointAddress",
                "PTR_DAT_08000cb4": "ovenTemperatureActualAddress",
                "PTR_DAT_08000cb8": "ovenTemperatureErrorAddress",
                "send_interrupt_if_not_sent_08000aec": "sendInterruptIfNotSent",
                "undefined": "int"
            },
            "code": "void reflowOvenControl_08000bcc(void)\n{\n  int* temperatureSensor1 = PTR_DAT_08000c90;\n  readAndUpdateTemperature(temperatureSensor1, 0);\n  decodeAndUpdateFlags(temperatureSensor1, 1);\n  int* temperatureSensor2 = PTR_DAT_08000c94;\n  readAndUpdateTemperature(temperatureSensor2, 0);\n  decodeAndUpdateFlags(temperatureSensor2, 1);\n  int* ovenTemperatureSensor = PTR_DAT_08000c98;\n  readAndUpdateTemperature(ovenTemperatureSensor, 0);\n  decodeAndUpdateFlags(ovenTemperatureSensor, 1);\n  readAndUpdateTemperature(temperatureSensor2, 1);\n  int* timerAddress = PTR_DAT_08000c9c;\n  updateTimerParameters(timerAddress, 8, 2, 0);\n  readAndUpdateTimerParameters(timerAddress, 0, interruptAddress);\n  readAndSetTimerParameters(timerAddress);\n  int reflowProfileLength = getStringLength(timerAddress, PTR_s_Reflow_08000ca4);\n  readAndUpdateTimerParameters(timerAddress, 0, 1);\n  int ovenProfileLength = getStringLength(timerAddress, PTR_s_Oven_1_2_08000ca8);\n  readAndUpdateTemperature(temperatureSensor1, 0);\n  wait(0x9c4);\n  readAndSetTimerParameters(timerAddress);\n  setData(PTR_DAT_08000cac, 0xe100, 6);\n  readAndUpdateTemperature(ovenTemperatureSensor, 1);\n  *PTR_DAT_08000cb0 = 2000;\n  int ovenTemperature = getValueFromSensor();\n  *PTR_DAT_08000cb4 = ovenTemperature;\n  int ovenTemperatureError = getValueFromSensor();\n  *PTR_DAT_08000cb8 = ovenTemperatureError;\n  sendInterruptIfNotSent(interruptAddress);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_08001366",
                "FUN_08005a68",
                "FUN_0800135a",
                "FUN_080058e0",
                "FUN_080057b4",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "reflowOvenControl_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "param_address",
                "param_2": "value",
                "param_3": "shift",
                "*(int *)(param_1 + 0x10)": "*(int *)(param_address + 0x10)"
            },
            "code": "void set_param_value_0800281e(int param_address, int value, int shift) {\n  if (shift == 0) {\n    *(int *)(param_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(param_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_param_value_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198"
            },
            "code": "void execute_functions_08006198(void)\n{\n  void **function_ptrs = PTR_DAT_080061d0;\n  int num_functions = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(void (**)(void))(function_ptrs + i * 4))();\n  }\n  do_nothing_08007328();\n  function_ptrs = PTR_DAT_080061d8;\n  num_functions = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(void (**)(void))(function_ptrs + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "process_data_08007048",
                "param_1": "output_data",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_data_08007048(int *output_data, undefined4 input_1, undefined4 input_2, undefined4 input_3)\n{\n  undefined *data_ptr;\n  int result;\n  \n  data_ptr = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  result = calculate_data(input_1, input_2, input_3, input_3, input_3);\n  if ((result == -1) && (*(int *)data_ptr != 0)) {\n    *output_data = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": false,
            "current_name": "process_data_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_pointer_value_shifted_by_dat_08003c6c_index_08003c50",
                "uVar1": "pointer_value",
                "get_pointer_value_08003c44": "get_pointer_value",
                "PTR_DAT_08003c6c": "ptr_dat_index",
                "DAT_08003c68": "dat_08003c68"
            },
            "code": "uint get_pointer_value_shifted_by_dat_08003c6c_index_08003c50(void)\n{\n  uint pointer_value = get_pointer_value_08003c44();\n  uint index = (*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint shifted_value = pointer_value >> PTR_DAT_08003c6c[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_pointer_value_shifted_by_dat_08003c6c_index_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "calculate_length_080065c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "iterator",
                "uVar2": "input2Mod",
                "uVar3": "input2Addition",
                "bVar4": "isMod4",
                "isLengthOne": "isLengthOne"
            },
            "code": "int calculate_length_080065c0(uint input1, uint *input2, uint *output1, uint input4, code *input5) {\\n  int iterator;\\n  uint maxLength = input2[4];\\n  if ((int) input2[4] < (int) input2[2]) {\\n    maxLength = input2[2];\\n  }\\n  *output1 = maxLength;\\n  if (*(char *)((int) input2 + 0x43) != \"\\0\") {\\n    *output1 = maxLength + 1;\\n  }\\n  if ((int)(*input2 << 0x1a) < 0) {\\n    *output1 = *output1 + 2;\\n  }\\n  uint input2Mod = *input2 & 6;\\n  if (input2Mod == 0) {\\n    for (; (int) input2Mod < (int)(input2[3] - *output1); input2Mod = input2Mod + 1) {\\n      int result = (*input5)(input1, input4, (int) input2 + 0x19, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint isLengthOne = (uint)*(byte *)((int) input2 + 0x43);\\n  if (isLengthOne != 0) {\\n    isLengthOne = 1;\\n  }\\n  uint input2Addition = isLengthOne;\\n  if ((int)(*input2 << 0x1a) < 0) {\\n    *(undefined *)((int) input2 + isLengthOne + 0x43) = 0x30;\\n    input2Addition = isLengthOne + 2;\\n    *(undefined *)((int) input2 + isLengthOne + 0x44) = *(undefined *)((int) input2 + 0x45);\\n  }\\n  int result = (*input5)(input1, input4, (int) input2 + 0x43, input2Addition);\\n  if (result != -1) {\\n    uint maxLength2 = input2[3];\\n    bool isMod4 = (*input2 & 6) != 4;\\n    if (isMod4) {\\n      maxLength2 = 0;\\n    }\\n    uint lengthCounter = 0;\\n    if (!isMod4) {\\n      maxLength2 = maxLength2 - *output1;\\n    }\\n    if (!isMod4) {\\n      maxLength2 = maxLength2 & ~((int)maxLength2 >> 0x1f);\\n    }\\n    if ((int)input2[4] < (int)input2[2]) {\\n      maxLength2 = maxLength2 + (input2[2] - input2[4]);\\n    }\\n    while(true) {\\n      if (maxLength2 == lengthCounter) {\\n        return 0;\\n      }\\n      int result = (*input5)(input1, input4, (int) input2 + 0x1a, 1);\\n      if (result == -1) {\\n        break;\\n      }\\n      lengthCounter = lengthCounter + 1;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "calculate_length_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "validate_input_080054d4",
                "param_1": "input_length",
                "param_2": "input_buffer",
                "param_3": "output_value",
                "param_4": "output_buffer",
                "iVar1": "is_input_valid",
                "is_valid_0800548c": "is_valid_input",
                "*param_2": "*input_buffer",
                "*(undefined *)(param_1 + 0x45)": "*(char*)(input_length + 0x45)",
                "validate_data_080045a2": "validate_data",
                "PTR_DAT_0800550c": "data_array"
            },
            "code": "int validate_input_080054d4(int input_length, char* input_buffer, int output_value, int output_buffer) {\n  if (input_length == 0) {\n    return -1;\n  }\n  int is_input_valid = is_valid_input(input_buffer);\n  if (is_input_valid == 0) {\n    *output_buffer = *(char*)(input_length + 0x45);\n    validate_data(get_data_at_index((uint)*(byte*)(input_length + 0x44) * 4), input_length + 0x45, 1, output_value, output_buffer);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "validate_input_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_flags_08004d44",
                "DAT_08004d84": "flags",
                "DAT_08004d88": "flag_mask",
                "DAT_08004d8c": "undefined",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flags_08004d44(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  flag_ptr[1] = DAT_08004d88 & flag_ptr[1];\n  *flag_ptr &= 0xfef6ffff;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[1] &= 0xff80ffff;\n  flag_ptr[2] = 0x9f0000;\n  *(DAT_08004d8c4 *)(flag_ptr + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "execute_function_if_bit_set_0800282c",
                "param_1": "bit_mask",
                "DAT_08002844": "data_ptr",
                "PTR_080060e4": "execute_function_if_bit_set_080060e4"
            },
            "code": "void execute_function_if_bit_set_0800282c(uint bit_mask) {\n  uint* DAT_08002844 = (uint*)(DAT_08002844 + 0x14);\n  if ((*DAT_08002844 & bit_mask) != 0) {\n    *DAT_08002844 = bit_mask;\n    PTR_080060e4();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_bit_set_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "read_and_update_bits_080015b2",
                "param_1": "params",
                "iVar1": "is_valid",
                "uVar2": "bits",
                "uVar3": "i"
            },
            "code": "uint read_and_update_bits_080015b2(undefined *params)\n{\n  int is_valid;\n  uint bits = 0;\n  read_and_update_param_08005848(params[1], 0);\n  for (uint i = 31; i != -1; i--) {\n    read_and_update_param_08005848(params[2], 1);\n    is_valid = is_data_valid_and_bit_set_at_index_08005890(*params);\n    if (is_valid) {\n      bits |= 1 << (i & 0xff);\n    }\n    read_and_update_param_08005848(params[2], 0);\n  }\n  read_and_update_param_08005848(params[1], 1);\n  return bits;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "read_and_update_bits_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "reverseBits_0800040c",
                "param_1": "num",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "leadingZeroes",
                "uVar4": "temp",
                "in_r12": "in_r12",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "carry"
            },
            "code": "ulonglong reverseBits_0800040c(uint num)\n{\n  uint leadingZeroes = count_leading_zeroes(num);\n  uint shiftAmount = leadingZeroes + 0x15;\n  uint in_r12 = 0;\n  bool carry = shiftAmount < 0x20 ? SCARRY4(leadingZeroes - 0xb, 0xc) : SBORROW4(shiftAmount, 0x20);\n  if(shiftAmount < 0x20)\n  {\n    shiftAmount++;\n    carry = shiftAmount == 0 || shiftAmount < 0 ? carry : !carry;\n    ulonglong result = (ulonglong)(num << (shiftAmount & 0xff));\n    num = num >> ((0xcU - leadingZeroes + 1) & 0xff);\n    return result | num;\n  }\n  if(shiftAmount >= 0x20 || carry)\n  {\n    in_r12 = 0x20 - leadingZeroes;\n  }\n  num = num << (leadingZeroes - 0xb & 0xff);\n  if(shiftAmount >= 0x20 || carry)\n  {\n    num = num | 0U >> (in_r12 & 0xff);\n  }\n  ulonglong result = 0;\n  if(shiftAmount >= 0x20 || carry)\n  {\n    result = 0 << (leadingZeroes - 0xb & 0xff);\n  }\n  if(shiftAmount < 0x433)\n  {\n    result = (num + (0x432 - shiftAmount) * 0x100000);\n    return result << 32 | 0;\n  }\n  uint complement = ~(0x432 - shiftAmount);\n  if(complement > 0x1e)\n  {\n    return (ulonglong)(num >> (complement - 0x1f & 0xff));\n  }\n  int shift = complement - 0x13;\n  if(shift == 0 || (shift < 0) != SCARRY4(complement - 0x1f, 0xc))\n  {\n    complement++;\n    result = (num >> (complement & 0xff)) | result << (0x20 - complement & 0xff);\n  }\n  else\n  {\n    result = (ulonglong)(result >> (0x20 - (0xcU - shift) & 0xff) | num << (0xcU - shift & 0xff));\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "reverseBits_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "decrement_by_four_08004df4",
                "param_1": "num"
            },
            "code": "int decrement_by_four_08004df4(int num)\n{\n    return num - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "decrement_by_four_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "set_flags_and_update_bits_08004bb0",
                "param_1": "flag",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "flag_value",
                "local_20": "bit_mask",
                "local_1c": "param_2",
                "local_18": "param_3",
                "local_14": "update_value"
            },
            "code": "void set_flags_and_update_bits_08004bb0(uint32_t flag, uint32_t* param_2, uint32_t* param_3)\n{\n  uint32_t flag_value = set_flag_value(flag);\n  uint32_t bit_mask = 1 << (flag & 0xf) & 0xffff;\n  uint32_t update_value = 3;\n  *(uint32_t *)(DAT_08004c28 + 0x18) |= 1;\n  if ((flag - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) = *(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((flag == 0xf) || (flag == 0x13)) || (flag == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) = *(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x2000000;\n  }\n  *param_2 = *param_2 & ~bit_mask | flag_value;\n  *param_3 = update_value;\n  return;\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_flags_and_update_bits_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_if_flag_set_08004df8",
                "param_1": "flag_value",
                "iVar1": "decremented_value",
                "PTR_08004df4": "decrement_by_four",
                "DAT_08004df8": "0x4c",
                "code": "function_pointer"
            },
            "code": "void execute_if_flag_set_08004df8(int flag_value) {\n  int decremented_value = PTR_08004df4();\n  if ((*(code **)(decremented_value + DAT_08004df8) != (code *)0x0) && (*(char *)(flag_value + 0x1c) == '\\x01')) {\n    (**(code **)(decremented_value + DAT_08004df8))(decremented_value,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "initialize_params_08001510",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6"
            },
            "code": "int *initialize_params_08001510(int *params, int param1, int param2, int param3, unsigned char param4, unsigned char param5, unsigned char param6)\n{\n  params[1] = 0;\n  *params = PTR_PTR_update_params_and_return_one_0800134e_1_0800154c;\n  update_parameters_080014ba(params, 1, param1, 0xff, param2, param3, param4, param5, param6, 0, 0, 0, 0);\n  return params;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "initialize_params_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "check_for_parenthesis_08002af8",
                "param_1": "pointer_array",
                "param_2": "array_pointer",
                "param_3": "array_size",
                "param_4": "pointer_array_2",
                "uVar1": "return_value",
                "puVar2": "pointer_array_3"
            },
            "code": "int check_for_parenthesis_08002af8(uint **pointer_array, uint *array_pointer, int array_size, uint *pointer_array_2) {\n    int return_value;\n    uint *pointer_array_3;\n    \n    if (*(char *)((int)pointer_array + 0x3d) == '(') {\n        if (array_pointer == (uint *)0x0) {\n            return_value = 1;\n        }\n        else if (array_size == 0) {\n            return_value = 1;\n        }\n        else if (*(char *)(pointer_array + 0xf) == '\\x01') {\n            return_value = 2;\n        }\n        else {\n            *(undefined *)(pointer_array + 0xf) = 1;\n            pointer_array_3 = *pointer_array;\n            if ((*pointer_array_3 & 1) == 0) {\n                *pointer_array_3 = *pointer_array_3 | 1;\n            }\n            **pointer_array = **pointer_array & 0xfffff7ff;\n            *(undefined *)((int)pointer_array + 0x3d) = 0x29;\n            *(undefined *)((int)pointer_array + 0x3e) = 0x20;\n            return_value = 0;\n            pointer_array[0x10] = (uint *)0x0;\n            pointer_array[9] = array_pointer;\n            *(short *)((int)pointer_array + 0x2a) = (short)array_size;\n            pointer_array[0xb] = pointer_array_2;\n            *(undefined2 *)(pointer_array + 10) = *(undefined2 *)((int)pointer_array + 0x2a);\n            *(undefined *)(pointer_array + 0xf) = 0;\n            (*pointer_array)[1] = (*pointer_array)[1] | 0x700;\n        }\n    }\n    else {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_for_parenthesis_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "set_flags_based_on_params_080028de",
                "param_1": "params",
                "puVar1": "flag_ptr"
            },
            "code": "uint set_flags_based_on_params_080028de(uint **params)\n{\n  uint *flag_ptr;\n  flag_ptr = params[11];\n  if ((*(char *)((int)params + 0x3d) == '\"') && ((params[20] != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[20] == (uint *)0x0) && (params[4] == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      params[20] = (uint *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (flag_ptr == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (params[12] == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[11] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[20] = (uint *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_params_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_flag_08002848",
                "param_1": "data",
                "PTR_": "ptr",
                "DAT_": "data",
                "c1": "char1",
                "c2": "char2",
                "flag": "flag"
            },
            "code": "int set_flag_08002848(int *DAT_)\n{\n    int flag = DAT_[0x11];\n    int *PTR_ = (int *)*DAT_;\n    char c1 = *(char *)((int)DAT_ + 0x3e);\n    char c2 = *(char *)((int)DAT_ + 0x3d);\n\n    if (c1 == '@') {\n        if (DAT_[0x14] == 0) {\n            PTR_[4] = flag & 0xfe;\n        }\n        else {\n            PTR_[4] = flag & 0xff | 1;\n        }\n    }\n    else if (DAT_[4] == 0x4000) {\n        if (c2 == '!') {\n            PTR_[4] = flag & 0xfe;\n        }\n        else {\n            PTR_[4] = flag & 0xff | 1;\n        }\n    }\n    else if (DAT_[0x14] == 0) {\n        PTR_[4] = (flag << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (DAT_[0x14] == 1) {\n        PTR_[4] = (flag << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_flag_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "subtract_four_from_value_08004e70",
                "param_1": "value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_value_08004e70(int value)\n{\n  int result = value - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "subtract_four_from_value_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_value_080020f0",
                "param_1": "ptr_param",
                "iVar1": "value3",
                "iVar2": "value1"
            },
            "code": "int check_and_update_value_080020f0(int *ptr_param)\n{\n  int value1 = *ptr_param;\n  if ((*(unsigned int *)(value1 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(unsigned int *)(value1 + 8) &= 0xfffffffe;\n  int value2 = get_value_from_pointer_08001cc4();\n  do {\n    if ((*(unsigned int *)(*ptr_param + 8) & 1) == 0) {\n      return 0;\n    }\n    int value3 = get_value_from_pointer_08001cc4();\n  } while ((unsigned int)(value3 - value2) < 3);\n  ptr_param[10] |= 0x10;\n  ptr_param[0xb] |= 1;\n  return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_value_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "allocate_and_initialize_memory_08006e10",
                "param_1": "process_id",
                "param_2": "memory_block",
                "local_18": "initial_size",
                "local_14": "temp_memory_block",
                "uVar1": "memory_permissions",
                "iVar2": "allocated_size"
            },
            "code": "void allocate_and_initialize_memory_08006e10(int process_id, int *memory_block){\n  ushort memory_permissions;\n  int allocated_size;\n  int initial_size;\n  int *temp_memory_block;\n  \n  if ((uint)*(ushort *)(memory_block + 3) << 0x1e > 0xffffffff80000000){\n    initial_size = process_id;\n    temp_memory_block = memory_block;\n    memory_permissions = check_memory_permissions(initial_size,temp_memory_block,&initial_size,&temp_memory_block);\n    allocated_size = allocate_memory_block(process_id,initial_size);\n    if (allocated_size != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *memory_block = allocated_size;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_size;\n      memory_block[5] = initial_size;\n      if ((temp_memory_block != (int *)0x0) &&\n         (allocated_size = read_integer_from_input(process_id,(int)*(short *)((int)memory_block + 0xe)), allocated_size != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = memory_permissions | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006dc8",
                "FUN_08007028",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_params_08004e74",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "local_var1",
                "subtract_four_from_value_08004e70": "subtract_four_from_value",
                "check_for_parenthesis_08002af8": "check_for_parenthesis",
                "set_params_08002b84": "set_params"
            },
            "code": "void process_params_08004e74(int param1, int param2, int param3, undefined4 param4)\n{\n  int local_var1;\n  local_var1 = subtract_four_from_value();\n  if (param3 == *(int *)(param1 + 0xc)) {\n    if (param2 == 0) {\n      *(undefined *)(local_var1 + 0x88) = 0;\n      *(undefined *)(local_var1 + 0x5c) = 0;\n      if (*(code **)(local_var1 + 100) != (code *)0x0) {\n        (**(code **)(local_var1 + 100))();\n      }\n      check_for_parenthesis(param1, local_var1 + 0x68, *(undefined *)(local_var1 + 0x88), 8);\n      return;\n    }\n    *(undefined *)(local_var1 + 0x5c) = 1;\n    set_params(param1, local_var1 + 0x68, 0x20, 8, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08002af8",
                "FUN_08002b84",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_params_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_param_value_based_on_condition_08004c30",
                "param_1": "param_value1",
                "param_2": "param_value2",
                "param_3": "condition",
                "param_4": "param_value3",
                "set_param_value_0800281e": "set_param_value"
            },
            "code": "void set_param_value_based_on_condition_08004c30(undefined4 param_value1, undefined2 param_value2, int condition, undefined4 param_value3){\n    if(condition == 0){\n        set_param_value_0800281e(param_value1, param_value2, 0, param_value3, param_value3);\n        return;\n    }\n    set_param_value_0800281e(param_value1, param_value2, 1, param_value3, param_value3);\n    return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "set_param_value_based_on_condition_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "process_return_value_and_update_08006f38",
                "param_1": "process_id",
                "param_2": "ptr_data",
                "iVar1": "process_return_value",
                "uVar2": "updated_value",
                "bVar3": "is_process_return_value_valid"
            },
            "code": "void process_return_value_and_update_08006f38(uint32_t process_id, uint8_t* ptr_data) {\n  int32_t process_return_value = processReturnValue_0800706c(process_id, (int)*(short *)(ptr_data + 0xe));\n  bool is_process_return_value_valid = process_return_value >= 0;\n  uint32_t updated_value = is_process_return_value_valid ? *(uint32_t *)(ptr_data + 0x54) + process_return_value : *(uint16_t *)(ptr_data + 0xc) & 0xffffefff;\n  if (is_process_return_value_valid) {\n    *(uint32_t *)(ptr_data + 0x54) = updated_value;\n  }\n  else {\n    *(uint16_t *)(ptr_data + 0xc) = (uint16_t)updated_value;\n  }\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "process_return_value_and_update_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_value_or_return_negative_one_08004cce",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_08004cb2": "find_value_in_array"
            },
            "code": "int find_value_or_return_negative_one_08004cce(int value_to_find){\n    if (value_to_find == -1) {\n        return -1;\n    }\n    int found_value = find_value_in_array();\n    return found_value;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_value_or_return_negative_one_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "perform_operation_08003ad4",
                "param_1": "param_array",
                "param_2": "array_length",
                "puVar1": "data_segment_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result_value"
            },
            "code": "uint32_t perform_operation_08003ad4(uint32_t *param_array, uint32_t array_length)\n{\n  uint32_t *data_segment_ptr;\n  int32_t start_time;\n  int32_t current_time;\n  uint32_t result_value;\n  data_segment_ptr = initial_data_segment_ptr;\n  if (((*initial_data_segment_ptr & 7) < array_length) && (*initial_data_segment_ptr = *initial_data_segment_ptr & 0xfffffff8 | array_length, array_length != (*data_segment_ptr & 7))) {\n    return 1;\n  }\n  if ((*param_array & 2) != 0) {\n    data_segment_ptr[1] = data_segment_ptr[1] & 0xffffff0f | param_array[2];\n  }\n  if ((*param_array & 1) != 0) {\n    uint32_t operation_type = param_array[1];\n    if (operation_type == 1) {\n      if ((*data_segment_ptr & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((operation_type != 2) && ((*data_segment_ptr & 2) == 0)) {\n      return 1;\n    }\n    data_segment_ptr[1] = operation_type | data_segment_ptr[1] & 0xfffffffc;\n    start_time = get_current_time();\n    if (operation_type == 1) {\n      while ((data_segment_ptr[1] & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (operation_type == 2) {\n      while ((data_segment_ptr[1] & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((data_segment_ptr[1] & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  data_segment_ptr = initial_data_segment_ptr;\n  if ((array_length < (*initial_data_segment_ptr & 7)) && (*initial_data_segment_ptr = *initial_data_segment_ptr & 0xfffffff8 | array_length, array_length != (*data_segment_ptr & 7))) {\n    return 1;\n  }\n  if ((*param_array & 4) != 0) {\n    data_segment_ptr[1] = data_segment_ptr[1] & 0xfffff8ff | param_array[3];\n  }\n  if ((*param_array & 8) != 0) {\n    data_segment_ptr[1] = data_segment_ptr[1] & 0xffffc7ff | param_array[4] << 3;\n  }\n  result_value = calculate_result_value();\n  *(uint32_t *)initial_address_ptr = result_value >> initial_data_segment_ptr[(initial_data_segment_ptr[1] << 0x18) >> 0x1c];\n  check_and_set_address(0xf);\n  return 0;\n}\n",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "perform_operation_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_bit_in_uint_at_offset_08004110",
                "param_1": "ptr_data",
                "param_2": "bit_offset",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_in_uint_at_offset_08004110(uint32_t *PTR_data, uint8_t bit_offset, uint32_t bit_value){\n    uint32_t mask = ~(4 << (bit_offset & 0xff));\n    *PTR_data = (*PTR_data & mask) | (bit_value << (bit_offset & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_at_offset_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "find_integer_in_string_08004ce2",
                "param_1": "integer",
                "param_2": "string",
                "*param_2": "*string"
            },
            "code": "int find_integer_in_string_08004ce2(int integer, char *string)\n{\n    if (integer == -1) {\n        return 0;\n    }\n    while (*string != -1) {\n        if (integer == *string) {\n            return 1;\n        }\n        string += 12;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "find_integer_in_string_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "update_params_08005568",
                "param_1": "obj_ptr",
                "param_2": "param_value",
                "*(byte *)(param_1 + 0x44)": "obj_idx",
                "PTR_DAT_080055b0": "param_array",
                "PTR_DAT_080055b4": "obj_array",
                "*(char *)(param_1 + 0x5a)": "bits",
                "set_bits_in_memory_08002494": "set_bits_in_memory",
                "set_bit_at_position_080024f8": "set_bit_at_position",
                "check_and_update_params_0800455a": "check_and_update_params",
                "*(ushort *)(param_1 + 0x6a)": "ushort_val"
            },
            "code": "void update_params_08005568(int obj_ptr, int param_value){\n\tif (obj_ptr != 0) {\n\t\tint obj_idx = *(byte *)(obj_ptr + 0x44);\n\t\t*(undefined4 *)(PTR_DAT_080055b0 + obj_idx * 4) = param_value;\n\t\t*(int *)(PTR_DAT_080055b4 + obj_idx * 4) = obj_ptr;\n\t\tset_bits_in_memory((int)*(char *)(obj_ptr + 0x5a), 0, 2);\n\t\tset_bit_at_position((int)*(char *)(obj_ptr + 0x5a));\n\t\tcheck_and_update_params_08005568(PTR_DAT_080055b0[obj_idx], *(int *)(obj_ptr + 100) + (uint)*(ushort *)(obj_ptr + 0x6a), 1);\n\t}\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "update_params_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_input_08004478",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "data_length",
                "uVar1": "value_from_pointer",
                "iVar2": "return_value"
            },
            "code": "int process_input_08004478(int *input_ptr, ushort *data_ptr, int data_length, undefined4 param_4){\n    undefined4 uVar1;\n    int return_value;\n    if (*(char *)((int)input_ptr + 0x39) == ' ') {\n        if (data_ptr == (ushort *)0x0 || data_length == 0) {\n            return_value = 1;\n        }\n        else if (*(char *)(input_ptr + 0xe) == '\\x01') {\n            return_value = 2;\n        }\n        else {\n            *(undefined *)(input_ptr + 0xe) = 1;\n            input_ptr[0xf] = 0;\n            *(undefined *)((int)input_ptr + 0x39) = 0x21;\n            uVar1 = get_value_from_pointer_08001cc4();\n            *(short *)(input_ptr + 9) = (short)data_length;\n            *(short *)((int)input_ptr + 0x26) = (short)data_length;\n            while (*(short *)((int)input_ptr + 0x26) != 0) {\n                *(short *)((int)input_ptr + 0x26) = *(short *)((int)input_ptr + 0x26) + -1;\n                if (input_ptr[2] == 0x1000) {\n                    return_value = check_params(input_ptr, 0x80, 0, uVar1, param_4);\n                    if (return_value != 0) {\n                        return 3;\n                    }\n                    *(uint *)(*input_ptr + 4) = *data_ptr & 0x1ff;\n                    if (input_ptr[4] == 0) {\n                        data_ptr = data_ptr + 1;\n                    }\n                    else {\n                        data_ptr = (ushort *)((int)data_ptr + 1);\n                    }\n                }\n                else {\n                    return_value = check_params(input_ptr, 0x80, 0, uVar1, param_4);\n                    if (return_value != 0) {\n                        return 3;\n                    }\n                    *(uint *)(*input_ptr + 4) = (uint)*(byte *)data_ptr;\n                    data_ptr = (ushort *)((int)data_ptr + 1);\n                }\n            }\n            return_value = check_params(input_ptr, 0x40, 0, uVar1, param_4);\n            if (return_value == 0) {\n                *(undefined *)((int)input_ptr + 0x39) = 0x20;\n                *(undefined *)(input_ptr + 0xe) = 0;\n            }\n            else {\n                return_value = 3;\n            }\n        }\n    }\n    else {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_input_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "set_address_and_call_main_08005f5e",
                "main_08001c32": "call_main",
                "set_value_at_address_08002470": "set_value_at_address"
            },
            "code": "void set_address_and_call_main_08005f5e() {\n  set_value_at_address(3);\n  call_main();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "set_address_and_call_main_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "call_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_08005cb6(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_shifted_pointer_value_08003c70",
                "uVar1": "pointer_value",
                "get_pointer_value_08003c44": "get_pointer_value",
                "PTR_DAT_08003c8c": "ptr_array",
                "DAT_08003c88": "data_array"
            },
            "code": "uint get_shifted_pointer_value_08003c70(void)\n{\n  uint pointer_value = get_pointer_value();\n  uint shifted_value = *(int *)(DAT_08003c88 + 4) << 0x12;\n  uint index = shifted_value >> 0x1d;\n  uint shifted_pointer_value = pointer_value >> PTR_DAT_08003c8c[index];\n  return shifted_pointer_value;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "get_shifted_pointer_value_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "process_input_080053d4",
                "param_1": "input_value",
                "param_2": "param_limit",
                "iVar2": "pointer_value",
                "cVar1": "character_value",
                "iVar3": "found_value",
                "uVar4": "index"
            },
            "code": "uint process_input_080053d4(uint input_value, uint param_limit)\n{\n  int pointer_value = get_value_from_pointer();\n  char character_value = PTR_DAT_0800547c[1];\n  int found_value = find_value((int)character_value, PTR_DAT_08005480);\n  if (found_value == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 && ((*(int *)(PTR_DAT_08005484 + index * 4) == 0 || (found_value = find_value((int)character_value, PTR_DAT_08005480), **(int **)(PTR_DAT_08005484 + index * 4) != found_value))))) {\n    index = index + 1 & 0xff;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_08005488[0x44]) && (set_value(), 4 < (byte)PTR_DAT_08005488[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08005488[0x44];\n  }\n  do {\n    found_value = process_input_080053d4_08004478(*(undefined4 *)(PTR_DAT_08005484 + index * 4), input_value, param_limit & 0xffff, 1000);\n    if (found_value == 0) {\n      return param_limit;\n    }\n    found_value = get_value_from_pointer();\n  } while ((uint)(found_value - pointer_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08004c78",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "process_input_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "set_params_08002b84",
                "param_1": "param_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "ret_val",
                "puVar2": "ptr"
            },
            "code": "uint32_t set_params_08002b84(uint32_t **param_ptr, uint32_t *param1, uint32_t param2, uint32_t *param3) {\n  uint32_t ret_val;\n  uint32_t *ptr;\n  \n  if (*(char *)((int)param_ptr + 0x3d) == '(') {\n    if (param1 == (uint32_t *)0x0) {\n      ret_val = 1;\n    }\n    else if (param2 == 0) {\n      ret_val = 1;\n    }\n    else if (*(char *)(param_ptr + 0xf) == '\\x01') {\n      ret_val = 2;\n    }\n    else {\n      *(undefined *)(param_ptr + 0xf) = 1;\n      ptr = *param_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_ptr = **param_ptr & 0xfffff7ff;\n      *(undefined *)((int)param_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)param_ptr + 0x3e) = 0x20;\n      ret_val = 0;\n      param_ptr[0x10] = (uint32_t *)0x0;\n      param_ptr[9] = param1;\n      *(short *)((int)param_ptr + 0x2a) = (short)param2;\n      param_ptr[0xb] = param3;\n      *(undefined2 *)(param_ptr + 10) = *(undefined2 *)((int)param_ptr + 0x2a);\n      *(undefined *)(param_ptr + 0xf) = 0;\n      (*param_ptr)[1] = (*param_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    ret_val = 2;\n  }\n  return ret_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "set_params_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "check_bit_at_index_08004c48",
                "param_1": "index",
                "param_2": "bit_array",
                "param_3": "array_size",
                "param_4": "result",
                "is_param2_bit_set_at_param1_08002810": "is_bit_set_at_index"
            },
            "code": "void check_bit_at_index_08004c48(int index, unsigned short bit_array, int array_size, int* result)\n{\n  is_bit_set_at_index(index, bit_array, array_size, result);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "check_bit_at_index_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_0800042c",
                "param_1": "value",
                "uVar1": "shifted_remainder",
                "uVar2": "abs_value",
                "uVar3": "shift_amount",
                "iVar4": "count",
                "uVar5": "temp",
                "uVar6": "sign_bit",
                "bVar7": "negative_shift",
                "bVar8": "zero_shift",
                "bVar9": "overflow_shift"
            },
            "code": "uint64_t calculate_0800042c(uint32_t num);\n\nuint64_t calculate_0800042c_shifted_value(uint32_t value, uint32_t shift_amount, uint32_t sign_bit);\n\nuint64_t shift_and_combine(uint32_t value, uint32_t shift_amount, uint32_t sign_bit, uint32_t fill_value);\n\nuint64_t calculate_0800042c(uint32_t param_1)\n{\n  if (param_1 == 0) {\n    return 0;\n  }\n  uint32_t sign_bit = param_1 & 0x80000000;\n  uint32_t abs_value = param_1;\n  if ((int)sign_bit < 0) {\n    abs_value = -param_1;\n  }\n  uint64_t shift_amount = calculate_0800042c(abs_value) + 0x15;\n  if ((int)shift_amount < 0x20) {\n    shift_amount = (shift_amount + 1) & 0xff;\n    uint32_t shifted_value = abs_value << shift_amount;\n    uint32_t shifted_remainder = abs_value >> (0x20 - shift_amount);\n    return shift_and_combine(shifted_value, shift_amount, sign_bit, shifted_remainder);\n  }\n  else if ((int)shift_amount < 0x433) {\n    uint32_t shifted_value = abs_value << (shift_amount & 0xff);\n    return (shifted_value + (0x432 - shift_amount) * 0x100000 | sign_bit);\n  }\n  else {\n    uint32_t shift_amount = ~(0x432 - shift_amount);\n    if (0x1e < (int)shift_amount) {\n      return (param_1 | (abs_value >> (shift_amount - 0x1f & 0xff))) & 0x80000000ffffffff;\n    }\n    else {\n      int32_t shift_diff = shift_amount - 0x13;\n      if (shift_diff == 0 || shift_diff < 0 != ((shift_amount - 0x1f) < 0xc)) {\n        shift_amount = (shift_amount + 1) & 0xff;\n        uint32_t shifted_value = abs_value >> (0x20 - shift_amount & 0xff) | (abs_value << (shift_amount - 0x20 & 0xff));\n        return shift_and_combine(shifted_value, shift_amount, sign_bit, 0);\n      }\n      else {\n        uint32_t shifted_value = abs_value >> (0x20 - (0xc - shift_diff) & 0xff) | (abs_value << (shift_diff - 0xc & 0xff));\n        return (shifted_value | sign_bit) & 0x80000000ffffffff;\n      }\n    }\n  }\n}\n\nuint64_t calculate_0800042c(uint32_t num)\n{\n  uint64_t count = 0;\n  for (int i = 31; i >= 0; i--) {\n    if ((num >> i) & 1) {\n      return count;\n    }\n    count++;\n  }\n  return count;\n}\n\nuint64_t calculate_0800042c_shifted_value(uint32_t value, uint32_t shift_amount, uint32_t sign_bit)\n{\n  uint32_t shifted_value = value << (shift_amount & 0xff);\n  uint32_t shifted_remainder = value >> (0x20 - shift_amount & 0xff);\n  return shift_and_combine(shifted_value, shift_amount, sign_bit, shifted_remainder);\n}\n\nuint64_t shift_and_combine(uint32_t value, uint32_t shift_amount, uint32_t sign_bit, uint32_t fill_value)\n{\n  uint64_t shifted_value = (uint64_t)value;\n  uint64_t shifted_fill_value = (uint64_t)fill_value;\n  uint64_t shifted_sign_bit = (uint64_t)sign_bit << 0x20;\n  return (shifted_value | shifted_fill_value | shifted_sign_bit);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "calculate_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "controlReflowOven_08005f6c",
                "do_nothing_08005f5c": "do_nothing",
                "reflowOvenControl_08000bcc": "reflowOvenControl",
                "FUNC_08000cd0": "incrementCounter",
                "DAT_08005f88": "isOvenReady",
                "calculate_offset_if_initialized_08005a18": "calculateOffsetIfInitialized"
            },
            "code": "void controlReflowOven_08005f6c(void)\n{\n  do_nothing();\n  reflowOvenControl();\n  do {\n    do {\n      incrementCounter();\n    } while (DAT_08005f88 == 0);\n    calculateOffsetIfInitialized();\n  } while( true );\n}",
            "called": [
                "FUN_08005a18",
                "FUN_08005f5c",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "controlReflowOven_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_with_params_08005cc0",
                "param_1": "function_pointer",
                "param_2": "data_pointer",
                "param_3": "param1",
                "param_4": "function_pointer2",
                "PTR_DAT_08005cd0": "data_pointer"
            },
            "code": "void execute_function_with_params_08005cc0(int *function_pointer, int *PTR_DAT_08005cd0, int param1, int *function_pointer2, int param2) {\n  (**(function_pointer2 + 4))(function_pointer, PTR_DAT_08005cd0, param1, **(function_pointer2 + 4), param2);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "processReturnValue_0800706c",
                "param_1": "outputValue",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "dataPointer",
                "iVar2": "returnValue"
            },
            "code": "void processReturnValue_0800706c(int *outputValue, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n\tundefined *dataPointer;\n\tint returnValue;\n\tdataPointer = PTR_DAT_0800708c;\n\t*(undefined4 *)PTR_DAT_0800708c = 0;\n\treturnValue = returnZero_0800572c(arg1, arg2, arg3, arg3, arg3);\n\tif ((returnValue == -1) && (*(int *)dataPointer != 0)) {\n\t\t*outputValue = *(int *)dataPointer;\n\t}\n\treturn;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "processReturnValue_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bit_array",
                "param_2": "update_array",
                "puVar1": "bit_ptr",
                "uVar2": "update_value",
                "uVar3": "bit_value",
                "uVar4": "bit_offset",
                "uVar5": "bit_index",
                "uVar6": "update_type",
                "uVar7": "update_index",
                "iVar8": "bit_index_offset",
                "iVar10": "update_index"
            },
            "code": "void update_bits_08002624(uint *bit_array, uint *update_array)\n{\n    uint *bit_ptr;\n    uint update_value;\n    uint bit_value;\n    uint bit_offset;\n    uint update_type;\n    uint bit_index = 0;\n    uint update_index = 0;\n    while (bit_index <= 0xf)\n    {\n        bit_offset = bit_index & 0xff;\n        if (bit_offset > 0xf)\n        {\n            return;\n        }\n        bit_value = 1 << bit_offset;\n        update_type = *update_array & bit_value;\n        if (bit_value == update_type)\n        {\n            update_value = update_array[1];\n            if (update_value == 0x12)\n            {\n                bit_ptr = bit_array + 3;\n                update_type = *bit_ptr + 0xc;\n            }\n            else if (update_value < 0x13)\n            {\n                if (update_value == 2)\n                {\n                    bit_ptr = bit_array + 3;\n                    update_type = *bit_ptr + 8;\n                }\n                else if (update_value < 3)\n                {\n                    if (update_value == 0)\n                    {\n                        goto LAB_08002776;\n                    }\n                    if (update_value == 1)\n                    {\n                        bit_ptr = bit_array + 3;\n                        update_type = *bit_ptr;\n                    }\n                }\n                else if (update_value == 3)\n                {\n                    update_type = 0;\n                }\n                else if (update_value == 0x11)\n                {\n                    bit_ptr = bit_array + 3;\n                    update_type = *bit_ptr + 4;\n                }\n            }\n            else\n            {\n                if (update_value != PTR_DAT_08002804)\n                {\n                    if (PTR_DAT_08002804 < update_value)\n                    {\n                        if (update_value == PTR_DAT_08002808)\n                        {\n                            goto LAB_08002776;\n                        }\n                        uint upper_limit = PTR_DAT_08002808 + 0x10000;\n                        uint lower_limit = PTR_DAT_08002808;\n                        if (update_value != upper_limit && update_value != lower_limit - 0xf0000)\n                        {\n                            goto LAB_0800263a;\n                        }\n                    }\n                }\n                goto LAB_08002776;\n            }\n        LAB_0800263a:\n            bit_offset = bit_index;\n            bit_ptr = bit_array;\n            if (0xff < update_type)\n            {\n                bit_offset = bit_index - 8;\n                bit_ptr = bit_array + 1;\n            }\n            *bit_ptr = *bit_ptr & ~(0xf << (bit_offset << 2 & 0xff)) | update_type << (bit_offset << 2 & 0xff);\n            if ((*update_array & 0x10000000) != 0)\n            {\n                *(uint *)(PTR_DAT_080027f8 + 0x18) = *(uint *)(PTR_DAT_080027f8 + 0x18) | 1;\n                uint bit_index_offset = (bit_index & 3) << 2;\n                if (bit_array == PTR_DAT_0800280c)\n                {\n                    update_index = 0;\n                }\n                else if (bit_array == PTR_DAT_0800280c + 0x100)\n                {\n                    update_index = 1;\n                }\n                else if (bit_array == PTR_DAT_0800280c + 0x200)\n                {\n                    update_index = 2;\n                }\n                else if (bit_array == PTR_DAT_0800280c + 0x300)\n                {\n                    update_index = 3;\n                }\n                else\n                {\n                    update_index = 4;\n                }\n                *(uint *)(PTR_DAT_080027fc + ((bit_index >> 2) + 2) * 4) = *(uint *)(PTR_DAT_080027fc + ((bit_index >> 2) + 2) * 4) & ~(0xf << bit_index_offset) | update_index << bit_index_offset;\n                if ((*(update_array + 2) & 0x10000) == 0)\n                {\n                    *PTR_DAT_08002800 = *PTR_DAT_08002800 & ~bit_value;\n                }\n                else\n                {\n                    *PTR_DAT_08002800 = *PTR_DAT_08002800 | bit_value;\n                }\n                if ((*(update_array + 2) & 0x20000) == 0)\n                {\n                    PTR_DAT_08002800[1] = PTR_DAT_08002800[1] & ~bit_value;\n                }\n                else\n                {\n                    PTR_DAT_08002800[1] = PTR_DAT_08002800[1] | bit_value;\n                }\n                if ((*(update_array + 2) & 0x100000) == 0)\n                {\n                    PTR_DAT_08002800[2] = PTR_DAT_08002800[2] & ~bit_value;\n                }\n                else\n                {\n                    PTR_DAT_08002800[2] = PTR_DAT_08002800[2] | bit_value;\n                }\n                if ((*(update_array + 2) & 0x200000) == 0)\n                {\n                    PTR_DAT_08002800[3] = PTR_DAT_08002800[3] & ~bit_value;\n                }\n                else\n                {\n                    PTR_DAT_08002800[3] = bit_value | PTR_DAT_08002800[3];\n                }\n            }\n        }\n        bit_index++;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "update_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "set_bit_in_uint_array_080040b0",
                "param_1": "array",
                "param_2": "index",
                "puVar1": "current_array",
                "DAT_0800410c": "ptr_data"
            },
            "code": "uint set_bit_in_uint_array_080040b0(uint **array, uint index, uint value) {\n  set_bit_in_uint_array_080040b0(*array, index, value);\n  uint *current_array = *array;\n  if (((current_array == DAT_0800410c) && ((current_array[8] & 0x1111) == 0)) && ((current_array[8] & 0x444) == 0)) {\n    current_array[17] = current_array[17] & 0xffff7fff;\n  }\n  if (((current_array[8] & 0x1111) == 0) && ((current_array[8] & 0x444) == 0)) {\n    *current_array = *current_array & 0xfffffffe;\n  }\n  *(undefined *)((int)array + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "convert_base_or_call_function_pointer_08005d42",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "minus_sign"
            },
            "code": "int convert_base_or_call_function_pointer_08005d42(undefined4 *function_pointer, uint number, uint base) {\n    int result;\n    int sign = 1;\n    if (base == 0) {\n        result = (**(code **)*function_pointer)(function_pointer, number & 0xff);\n        return result;\n    }\n    if (base != 10) {\n        result = convert_base_08005ce8(function_pointer, number, base & 0xff);\n        return result;\n    }\n    if ((int)number < 0) {\n        sign = -1;\n        number = -number;\n    }\n    result = convert_base_08005ce8(function_pointer, number, 10);\n    if (sign == -1) {\n        int minus_sign = call_function_pointer_08005cb6(function_pointer, 0x2d);\n        result = minus_sign + result;\n    }\n    return result;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "convert_base_or_call_function_pointer_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "set_flag_bits_08004b34",
                "set_flag_bits_08004d90": "set_flag_bits_helper"
            },
            "code": "void set_flag_bits_08004b34(void)\n{\n  set_flag_bits_08004b34_helper();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "set_flag_bits_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_system_and_set_flag_values_08004c52",
                "set_flag_and_values_08001c88": "set_flag_and_values",
                "initialize_system_08001b48": "initialize_system"
            },
            "code": "void initialize_system_and_set_flag_values_08004c52(void)\n{\n  set_flag_and_values();\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "initialize_system_and_set_flag_values_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "update_parameters_080013a4",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "iVar1": "index1",
                "iVar2": "index2"
            },
            "code": "void update_parameters_080013a4(int parameter1, int parameter2, int parameter3, int parameter4) {\n  int index1;\n  int index2;\n  if (parameter3 > 1) {\n    *(byte *)(parameter1 + 0x13) = *(byte *)(parameter1 + 0x13) | 8;\n  }\n  *(char *)(parameter1 + 0x17) = (char)parameter3;\n  set_parameters_at_offset(parameter1, 0, 0x40, parameter2, parameter2 + 0x40);\n  if ((parameter4 != 0) && (parameter3 == 1)) {\n    *(byte *)(parameter1 + 0x13) = *(byte *)(parameter1 + 0x13) | 4;\n  }\n  decode_and_update_flags(*(undefined *)(parameter1 + 8), 1);\n  if (*(char *)(parameter1 + 9) != -1) {\n    decode_and_update_flags(*(char *)(parameter1 + 9), 1);\n  }\n  decode_and_update_flags(*(undefined *)(parameter1 + 10), 1);\n  index2 = 0;\n  while( true ) {\n    if ((*(byte *)(parameter1 + 0x13) & 0x10) == 0) {\n      index1 = 4;\n    }\n    else {\n      index1 = 8;\n    }\n    if (index1 <= index2) break;\n    decode_and_update_flags(*(undefined *)(parameter1 + index2 + 0xb), 1);\n    index2 = index2 + 1;\n  }\n  read_and_update_parameter(*(undefined *)(parameter1 + 8), 0);\n  read_and_update_parameter(*(undefined *)(parameter1 + 10), 0);\n  if (*(char *)(parameter1 + 9) != -1) {\n    read_and_update_parameter(*(char *)(parameter1 + 9), 0);\n  }\n  if ((*(byte *)(parameter1 + 0x13) & 0x10) == 0) {\n    read_and_update_parameters_080013a4(parameter1, 3);\n    read_and_update_parameters_080013a4(parameter1, 3);\n    read_and_update_parameters_080013a4(parameter1, 3);\n    read_and_update_parameters_080013a4(parameter1, 2);\n  }\n  else {\n    read_and_update_parameters_080013a4(parameter1, *(byte *)(parameter1 + 0x13) | 0x20, 0);\n    read_and_update_parameters_080013a4(parameter1, *(byte *)(parameter1 + 0x13) | 0x20, 0);\n    read_and_update_parameters_080013a4(parameter1, *(byte *)(parameter1 + 0x13) | 0x20, 0);\n  }\n  read_and_update_parameters_080013a4(parameter1, *(byte *)(parameter1 + 0x13) | 0x20, 0);\n  *(undefined *)(parameter1 + 0x14) = 4;\n  update_parameters_080013a4_0800138e(parameter1);\n  read_and_set_parameters(parameter1);\n  *(undefined *)(parameter1 + 0x15) = 2;\n  read_and_update_parameters_080013a4(parameter1, 6, 0);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001310",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_0800138e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "update_parameters_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "initialize_array_08006d14",
                "param_1": "status",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "current_ptr",
                "piVar2": "array_ptr",
                "iVar3": "mem_block",
                "ppiVar4": "next_ptr_ptr"
            },
            "code": "int *initialize_array_08006d14(undefined4 *status, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    int *current_ptr;\n    int *array_ptr;\n    int mem_block;\n    int **next_ptr_ptr;\n    mem_block = *(int *)PTR_PTR_DAT_08006d88;\n    if (*(int *)(mem_block + 0x18) == 0)\n    {\n        initialize_arrays_08006cb4(mem_block);\n    }\n    next_ptr_ptr = (int **)(mem_block + 0x48);\n    do\n    {\n        array_ptr = next_ptr_ptr[2];\n        current_ptr = next_ptr_ptr[1];\n        while (current_ptr = (int *)((int)current_ptr - 1), -1 < (int)current_ptr)\n        {\n            if (*(short *)(array_ptr + 3) == 0)\n            {\n                *(undefined2 *)((int)array_ptr + 0xe) = 0xffff;\n                array_ptr[0x19] = 0;\n                *(undefined2 *)(array_ptr + 3) = 1;\n                *array_ptr = 0;\n                array_ptr[2] = 0;\n                array_ptr[1] = 0;\n                array_ptr[4] = 0;\n                array_ptr[5] = 0;\n                array_ptr[6] = 0;\n                fill_array_with_value_080061e0(array_ptr + 0x17, 0, 8, 1, arg4);\n                array_ptr[0xd] = 0;\n                array_ptr[0xe] = 0;\n                array_ptr[0x12] = 0;\n                array_ptr[0x13] = 0;\n                return array_ptr;\n            }\n            array_ptr = array_ptr + 0x1a;\n        }\n        if (*next_ptr_ptr == (int *)0x0)\n        {\n            current_ptr = (int *)allocate_and_initialize_memory_block_08006c88(status, 4);\n            *next_ptr_ptr = current_ptr;\n            if (current_ptr == (int *)0x0)\n            {\n                *status = 0xc;\n                return (int *)0x0;\n            }\n        }\n        next_ptr_ptr = (int **)*next_ptr_ptr;\n    } while (true);\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006c88",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_array_08006d14",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08006c88(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 226079,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08000178",
            "FUN_0800258c",
            "FUN_0800573c",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_08002f9c",
            "FUN_08005750",
            "FUN_08002ab8",
            "FUN_08002c54",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08002810",
            "FUN_08004cb2",
            "FUN_08001294",
            "FUN_08002ad8",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08005b3c",
            "FUN_08004c8a",
            "FUN_08002ca6",
            "FUN_080045a2",
            "FUN_080047e8",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_080008ba",
            "FUN_08005714",
            "FUN_08005a44",
            "FUN_0800417c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080024f8",
            "FUN_08004198",
            "FUN_08000a2c",
            "FUN_08000ae8",
            "FUN_080061e0",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_080061f0",
            "FUN_0800572c",
            "FUN_08000a58",
            "FUN_08004092",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_0800480a",
            "FUN_08005f8c",
            "FUN_08004c5e",
            "FUN_08004d90",
            "FUN_08004828",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08000aa8",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_0800306c",
            "FUN_08004848",
            "FUN_08001f80",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_080065c0",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005cb6",
            "FUN_08002b84",
            "FUN_0800042c",
            "FUN_08005cc0",
            "FUN_08002624"
        ],
        [
            "FUN_08007004",
            "FUN_08004ec4",
            "FUN_080043b4",
            "FUN_08007028",
            "FUN_08004ca2",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_08004ef4",
            "FUN_080055e0",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08006c40",
            "FUN_08006920",
            "FUN_08004b94",
            "FUN_08001918",
            "FUN_08001c3c",
            "FUN_08005604",
            "FUN_08005c96",
            "FUN_08004b9e",
            "FUN_08000aec",
            "FUN_08004e12",
            "FUN_08003c90",
            "FUN_0800412c",
            "FUN_08005c38",
            "FUN_08005ce8",
            "FUN_08004c78",
            "FUN_080009b8",
            "FUN_08005a18",
            "FUN_08003ea0",
            "FUN_0800548c",
            "FUN_08001f84",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_080020f0",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08004cce",
            "FUN_08005568",
            "FUN_08003c70",
            "FUN_08004c48",
            "FUN_0800706c",
            "FUN_080040b0",
            "FUN_08004b34"
        ],
        [
            "FUN_08005510",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005fc8",
            "FUN_08001c88",
            "FUN_0800224c",
            "FUN_08005890",
            "FUN_08004204",
            "FUN_080045fe",
            "FUN_0800213c",
            "FUN_08005384",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08005d8a",
            "FUN_08002d1c",
            "FUN_08003da4",
            "FUN_080009dc",
            "FUN_080058e0",
            "FUN_080009f0",
            "FUN_08006ac0",
            "FUN_08005848",
            "FUN_08003ed8",
            "FUN_08002348",
            "FUN_08005cd4",
            "FUN_08006dc8",
            "FUN_0800492c",
            "FUN_080009a8",
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08003f18",
            "FUN_080009c8",
            "FUN_08006f92",
            "FUN_080054d4",
            "FUN_08006f38",
            "FUN_08003ad4",
            "FUN_08004478",
            "FUN_08005d42"
        ],
        [
            "FUN_08006c88",
            "FUN_08004e20",
            "FUN_080032b4",
            "FUN_0800598a",
            "FUN_0800441a",
            "FUN_08005da0",
            "FUN_08002384",
            "FUN_08000a18",
            "FUN_080046b8",
            "FUN_08001cd0",
            "FUN_08003520",
            "FUN_0800611c",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08005bb0",
            "FUN_08004b3c",
            "FUN_080012a2",
            "FUN_08000a04",
            "FUN_08005d82",
            "FUN_080015b2",
            "FUN_08006e10",
            "FUN_080053d4"
        ],
        [
            "FUN_080019f6",
            "FUN_08001960",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005da8",
            "FUN_08004a4c",
            "FUN_080057b4",
            "FUN_080012e8",
            "FUN_080033b8",
            "FUN_08005730",
            "FUN_08005a68",
            "FUN_080015f8",
            "FUN_080012c0",
            "FUN_08004c52"
        ],
        [
            "FUN_08005754",
            "FUN_08001a44",
            "FUN_08005f2c",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001ab0",
            "FUN_08006f5a",
            "FUN_08001310"
        ],
        [
            "FUN_0800138e",
            "FUN_08005f40",
            "FUN_08001b18",
            "FUN_0800134e",
            "FUN_08001366",
            "FUN_0800135a",
            "FUN_08001550",
            "FUN_08005f5e"
        ],
        [
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba",
            "FUN_08000bcc"
        ],
        [
            "FUN_08001510",
            "FUN_08005f6c"
        ],
        [
            "FUN_08001be8",
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080068f0",
            "FUN_08006be0",
            "FUN_080069e4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_080009c8"
        ]
    ],
    "locked_functions": []
}