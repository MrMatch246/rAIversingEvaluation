{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "update_value_08002470",
                "param_1": "input_value",
                "DAT_08002490": "dat_08002490",
                "PTR_0800249c": "ptr_0800249c",
                "PTR_080024a0": "ptr_080024a0"
            },
            "code": "void update_value_08002470(uint input_value) {\n\tuint* ptr_DAT_08002490 = (uint*)DAT_08002490;\n\tptr_DAT_08002490[3] = (input_value & 7) << 8 | (ptr_DAT_08002490[3] & 0xf8ff) | 0x5fa0000;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "update_value_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "initialize_param1_if_failed_08007004",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr_to_ptr_dat_08007024",
                "iVar2": "result_of_FUN_0800571a"
            },
            "code": "void initialize_param1_if_failed_08007004(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr_to_ptr_dat_08007024 = PTR_DAT_08007024;\n  *(undefined4 *)PTR_DAT_08007024 = 0;\n  int result_of_FUN_0800571a = FUN_0800571a(arg1, arg2, arg2, 0, arg3);\n  if ((result_of_FUN_0800571a == -1) && (*(int *)ptr_to_ptr_dat_08007024 != 0)) {\n    *result = *(int *)ptr_to_ptr_dat_08007024;\n  }\n  return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "initialize_param1_if_failed_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_pointer_to_22_08005740",
                "PTR_DAT_0800574c": "pointer_to_value"
            },
            "code": "void set_pointer_to_22_08005740(void)\n{\n  int* PTR_DAT_0800574c = (int*)PTR_DAT_0800574c;\n  *PTR_DAT_0800574c = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_pointer_to_22_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_08006158",
                "param_1": "input_value",
                "param_2": "input_mask"
            },
            "code": "longlong calculate_result_08006158(uint32_t input_value, uint64_t input_mask) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(input_value, 2);\n  }\n  return (uint64_t)input_mask << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_result_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = FUN_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "executeFunctionIfPossible_08004ec4",
                "param_1": "inputParam",
                "iVar1": "functionPointer",
                "FUN_08004e70": "getFunctionPointer",
                "*(code **)(iVar1 + 0x60)": "*(code **)(functionPointer + 0x60)",
                "*(char *)(iVar1 + 0x5c)": "*(char *)(functionPointer + 0x5c)",
                "*(char *)(iVar1 + 0x2c)": "*(char *)(functionPointer + 0x2c)",
                "' '": "' '",
                "(**(code **)(iVar1 + 0x60))(iVar1 + 0x68)": "(**(code **)(functionPointer + 0x60))(functionPointer + 0x68)",
                "FUN_08002c10": "executeAnotherFunction"
            },
            "code": "void executeFunctionIfPossible_08004ec4(undefined4 inputParam)\n{\n  int functionPointer = getFunctionPointer();\n  bool isFunctionNotNull = *(code **)(functionPointer + 0x60) != (code *)0x0;\n  bool isChar1EqualTo1 = *(char *)(functionPointer + 0x5c) == '\\x01';\n  bool isChar2NotEqualToSpace = *(char *)(functionPointer + 0x2c) != ' ';\n  if (isFunctionNotNull && isChar1EqualTo1 && isChar2NotEqualToSpace) {\n    (**(code **)(functionPointer + 0x60))(functionPointer + 0x68);\n  }\n  executeAnotherFunction(inputParam);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "executeFunctionIfPossible_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_string_end_08000178",
                "param_1": "str",
                "pcVar2": "current_ptr",
                "pcVar3": "current_ptr",
                "cVar1": "current_char"
            },
            "code": "char* find_string_end_08000178(char* str){\n    char current_char;\n    char* current_ptr = str;\n    do {\n        current_char = *current_ptr;\n        current_ptr++;\n    } while (current_char != \"\\0\");\n    return current_ptr - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "imported": false,
            "current_name": "find_string_end_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_array_of_structs_08006c88",
                "param_1": "starting_address",
                "param_2": "num_of_structs",
                "iVar2": "struct_size",
                "puVar1": "struct_array"
            },
            "code": "undefined4 * allocate_memory_for_array_of_structs_08006c88(undefined4 starting_address, int num_of_structs) {\n  int struct_size = (num_of_structs - 1) * 0x68;\n  undefined4 *struct_array = (undefined4 *)FUN_08006288(starting_address, struct_size + 0x74);\n  if (struct_array != (undefined4 *)0x0) {\n    *struct_array = 0;\n    struct_array[1] = num_of_structs;\n    struct_array[2] = struct_array + 3;\n    FUN_080061e0(struct_array + 3, 0, struct_size + 0x68);\n  }\n  return struct_array;\n}",
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_array_of_structs_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "check_if_valid_080060e4",
                "iVar1": "index",
                "FUN_08005f8c": "get_index",
                "PTR_DAT_08006100": "data_ptr",
                "ptr": "data_ptr_index",
                "*ptr": "data_ptr_value",
                "FUN_080060d4": "execute_failure"
            },
            "code": "void check_if_valid_080060e4() {\n    int index = get_index();\n    int* ptr = (int*)(PTR_DAT_08006100 + index * 0x14 + 0xc);\n    if (*ptr != 0) {\n        execute_failure();\n    }\n    return;\n}",
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "check_if_valid_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_uVar1_from_puVar2_0800258c",
                "param_1": "pp_u32",
                "uVar1": "u32_return",
                "puVar2": "p_u32",
                "PTR_DAT_0800261c": "p_DAT_0800261c",
                "PTR_DAT_08002620": "p_DAT_08002620"
            },
            "code": "uint32_t get_uVar1_from_puVar2_0800258c(uint32_t **param_1)\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    \n    if (*(char *)((int)param_1 + 0x21) != '\\x02') {\n        param_1[14] = (uint32_t *)0x4;\n        return 1;\n    }\n    **param_1 &= 0xfffffff1;\n    **param_1 &= 0xfffffffe;\n    puVar2 = *param_1;\n    if (puVar2 == PTR_DAT_0800261c) {\n        uVar1 = 1;\n    }\n    else if (puVar2 == PTR_DAT_0800261c + 5) {\n        uVar1 = 0x10;\n    }\n    else if (puVar2 == PTR_DAT_0800261c + 10) {\n        uVar1 = 0x100;\n    }\n    else if (puVar2 == PTR_DAT_0800261c + 15) {\n        uVar1 = 0x1000;\n    }\n    else if (puVar2 == PTR_DAT_0800261c + 20) {\n        uVar1 = 0x10000;\n    }\n    else if (puVar2 == PTR_DAT_0800261c + 25) {\n        uVar1 = 0x100000;\n    }\n    else {\n        uVar1 = 0x1000000;\n    }\n    *(uint32_t *)(PTR_DAT_08002620 + 4) = uVar1;\n    *(char *)((int)param_1 + 0x21) = 1;\n    *(uint32_t *)(param_1 + 8) = 0;\n    if (param_1[13] != (uint32_t *)0x0) {\n        (*(code *)param_1[13])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "get_uVar1_from_puVar2_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "checkPointerValidity_08004e20",
                "PTR_DAT_08004e30": "pointer",
                "FUN_08003f18": "callFunctionToHandleInvalidPointer"
            },
            "code": "void checkPointerValidity_08004e20(void)\n{\n  int* PTR_DAT_08004e30 = (int*)PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    callFunctionToHandleInvalidPointer();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "checkPointerValidity_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "loop_forever_0800573c"
            },
            "code": "void loop_forever_0800573c(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "loop_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_input_080032b4",
                "param_1": "input",
                "cVar1": "input_char",
                "puVar2": "ptr1",
                "puVar3": "ptr9"
            },
            "code": "uint32_t process_input_080032b4(uint32_t **input)\n{\n    char input_char = *(char *)((int)input + 0x3d);\n    uint32_t *ptr1 = *input;\n    uint32_t *ptr2 = (*input)[0xd];\n    uint32_t *ptr3 = (*input)[0xe];\n    \n    // Set the 10th bit of the second element of input to 0\n    ptr1[1] = ptr1[1] & 0xfffff8ff;\n    \n    // Set the first bit of the first element of input to 1\n    **input = **input | 1;\n    \n    // Set the 10th bit of the first element of input to 0\n    **input = **input & 0xfffffbff;\n    \n    // If the 11th bit of the second element of input is set\n    if ((ptr1[1] & 0x800) != 0) {\n        // If the input char is '\"' or '*'\n        if ((input_char == '\"') || (input_char == '*')) {\n            // Set the 2-byte value at offset 0x2a of input to the 4-byte value at the address pointed to by ptr3 + 4\n            *(uint16_t *)((int)input + 0x2a) = (uint16_t)*(uint32_t *)(ptr3 + 4);\n        }\n        else {\n            // Set the 2-byte value at offset 0x2a of input to the 4-byte value at the address pointed to by ptr2 + 4\n            *(uint16_t *)((int)input + 0x2a) = (uint16_t)*(uint32_t *)(ptr2 + 4);\n        }\n    }\n    \n    // If the 2-byte value at offset 0x2a of input is not 0\n    if (*(uint16_t *)((int)input + 0x2a) != 0) {\n        // If the 3rd bit of the 6th element of input is set\n        if ((ptr1[5] & 4) != 0) {\n            // Increment the value at the address pointed to by ptr9 and assign the value of the 5th element of input to it\n            uint8_t *ptr9 = (uint8_t *)input[9];\n            input[9] = (uint32_t *)((int)ptr9 + 1);\n            *(char *)ptr9 = (char)ptr1[4];\n            // Decrement the 2-byte value at offset 0x2a of input by 1\n            *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n        }\n        // If the 7th bit of the first element of input is set\n        if ((**input & 0x40) != 0) {\n            // Increment the value at the address pointed to by ptr9 and assign the value of the 4th element of input to it\n            uint8_t *ptr9 = (uint8_t *)input[9];\n            input[9] = (uint32_t *)((int)ptr9 + 1);\n            *(char *)ptr9 = (char)(*input)[4];\n            // Decrement the 2-byte value at offset 0x2a of input by 1\n            *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n        }\n        // Set the 3rd bit of the 17th element of input to 1\n        input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n    }\n    \n    // If the 17th element of input is 0\n    if (input[0x10] == (uint32_t *)0x0) {\n        // If the input char is '(' or '*' or ')'\n        if (((input_char == '(') || (input_char == '*')) || (input_char == ')')) {\n            // Assign the address of DAT_080033b4 to the 11th element of input\n            input[0xb] = DAT_080033b4;\n            // Assign 0 to the 12th element of input\n            input[0xc] = (uint32_t *)0x0;\n            // Set the input char to ' '\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            // Set the byte at offset 0x3e of input to 0\n            *(undefined *)((int)input + 0x3e) = 0;\n            // Call the function FUN_08004ec4\n            FUN_08004ec4();\n        }\n        // Else if the 12th element of input is 0x22 or the input char is '\"'\n        else if ((input[0xc] == (uint32_t *)0x22) || (input_char == '\"')) {\n            // Assign 0 to the 12th element of input\n            input[0xc] = (uint32_t *)0x0;\n            // Set the input char to ' '\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            // Set the byte at offset 0x3e of input to 0\n            *(undefined *)((int)input + 0x3e) = 0;\n            // Call the function do_nothing_08002ca4\n            do_nothing_08002ca4();\n        }\n    }\n    // Else call the function FUN_0800316c\n    else {\n        FUN_0800316c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002ca4",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_08004d06",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "int compare_08004d06(int a, int b)\n{\n    if (a != b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        a = 0;\n    }\n    return a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "calculate_offset_080056d8",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "address"
            },
            "code": "int calculate_offset_080056d8(int offset){\n                      int current_offset;\n                      undefined *address;\n                      \n                      if (*(int *)PTR_DAT_08005708 == 0) {\n                        *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n                      }\n                      \n                      current_offset = *(int *)PTR_DAT_08005708;\n                      address = (undefined *)(offset + current_offset);\n                      \n                      if (address <= &stack0x00000000) {\n                        *(undefined **)PTR_DAT_08005708 = address;\n                        return current_offset;\n                      }\n                      \n                      *(undefined4 *)PTR_DAT_08005710 = 0xc;\n                      return -1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "calculate_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "process_data_080019f6",
                "param_1": "data_ptr",
                "uVar2": "val3",
                "uVar3": "val1",
                "uVar4": "val2",
                "uVar5": "val4",
                "iVar1": "result"
            },
            "code": "void process_data_080019f6(int data_ptr)\n{\n  int val1;\n  int val2;\n  int val3;\n  int val4;\n  int result;\n  \n  val1 = **(int **)(data_ptr + 0x3c);\n  val2 = (*(int **)(data_ptr + 0x3c))[1];\n  *(int *)(data_ptr + 0x48) = val1;\n  *(int *)(data_ptr + 0x4c) = val2;\n  val3 = (*(int **)(data_ptr + 0x38))[1];\n  *(int *)(data_ptr + 0x50) = **(int **)(data_ptr + 0x38);\n  *(int *)(data_ptr + 0x54) = val3;\n  val3 = *(int *)(data_ptr + 0x68);\n  val4 = *(int *)(data_ptr + 0x6c);\n  result = FUN_08000a18(val1, val2, val3, val4);\n  if (result == 0) {\n    val3 = *(int *)(data_ptr + 0x60);\n    val4 = *(int *)(data_ptr + 100);\n    result = FUN_080009dc(val1, val2, val3, val4);\n    if (result != 0) {\n      *(int *)(data_ptr + 0x48) = val3;\n      *(int *)(data_ptr + 0x4c) = val4;\n    }\n    return;\n  }\n  *(int *)(data_ptr + 0x48) = val3;\n  *(int *)(data_ptr + 0x4c) = val4;\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "process_data_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_input_08002f9c",
                "param_1": "input",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_input_08002f9c(uint32_t **input)\n{\n    uint32_t *ptr1;\n    \n    if (*(char *)((int)input + 0x3d) == '\"') {\n        if (*(uint16_t *)((int)input + 0x2a) < 4) {\n            if (*(uint16_t *)((int)input + 0x2a) - 2 < 2) {\n                if (input[0xb] == (uint32_t *)0x2) {\n                    **input |= 0x400;\n                }\n                else {\n                    **input &= 0xfffffbff;\n                    **input |= 0x800;\n                }\n                (*input)[1] &= 0xfffffbff;\n            }\n            else {\n                if (input[0xb] == (uint32_t *)0x2) {\n                    **input |= 0x400;\n                }\n                else {\n                    **input &= 0xfffffbff;\n                }\n                (*input)[1] &= 0xfffff8ff;\n                ptr1 = input[9];\n                input[9] = (uint32_t *)((int)ptr1 + 1);\n                *(char *)ptr1 = (char)(*input)[4];\n                *(uint16_t *)((int)input + 0x2a) -= 1;\n                *(char *)((int)input + 0x3d) = 0x20;\n                input[0xc] = (uint32_t *)0x0;\n                if (*(char *)((int)input + 0x3e) == '@') {\n                    *(char *)((int)input + 0x3e) = 0;\n                    do_nothing_08002f9a();\n                }\n                else {\n                    *(char *)((int)input + 0x3e) = 0;\n                    do_nothing_08002c50();\n                }\n            }\n        }\n        else {\n            ptr1 = input[9];\n            input[9] = (uint32_t *)((int)ptr1 + 1);\n            *(char *)ptr1 = (char)(*input)[4];\n            *(uint16_t *)((int)input + 0x2a) -= 1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "add_to_list_08005510",
                "param_1": "item_address",
                "param_2": "item_value",
                "param_3": "list_index",
                "param_4": "list_length",
                "iVar1": "index",
                "uVar2": "item_index"
            },
            "code": "void add_to_list_08005510(int item_address, int item_value, int list_index, int list_length)\n{\n  int index;\n  uint item_index;\n  \n  if (item_address != 0) {\n    index = get_index();\n    if (index == 0) {\n      item_index = (uint)*(byte *)(item_address + 0x44);\n      *(int *)(list_item_addresses + item_index * 4) = item_address;\n      *(int *)(list_item_values + item_index * 4) = item_value;\n      set_item_flag((int)*(char *)(item_address + 0x5a),0,1,item_index,list_length);\n      set_item_status((int)*(char *)(item_address + 0x5a));\n      copy_item_data(*(int *)(list_item_flags + item_index * 4),\n                   item_address + 0x45,1);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_08002494",
                "FUN_0800548c",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "add_to_list_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "returnOne_08005750"
            },
            "code": "int returnOne_08005750(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "returnOne_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_data_08002cf2",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "data_val",
                "uVar2": "flag"
            },
            "code": "int process_data_08002cf2(int *data_ptr, int param_2, int param_3, int param_4) {\n  int flag = *(uint *)(*data_ptr + 0x18);\n  int data_val;\n  if ((flag & 0x80) == 0) {\n    data_val = *(int *)(data_ptr + 3);\n  }\n  else {\n    data_val = *(int *)(data_ptr + 6);\n  }\n  call_another_function(data_ptr, (flag & 4) == 0, data_val, flag, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "out_pointer",
                "param_2": "size",
                "puVar1": "unused_pointer",
                "uVar2": "result",
                "puVar3": "current_block_pointer",
                "iVar4": "remaining_size",
                "puVar5": "new_block_pointer",
                "uVar6": "difference",
                "puVar7": "previous_block_pointer",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08006288(uint *out_pointer, uint size)\n{\n  uint *current_block_pointer;\n  uint aligned_size;\n  uint *previous_block_pointer;\n  uint remaining_size;\n  uint *new_block_pointer;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out_pointer = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    previous_block_pointer = PTR_DAT_08006340;\n    current_block_pointer = *(uint **)PTR_DAT_0800633c;\n    while (current_block_pointer != (uint *)0x0) {\n      remaining_size = *current_block_pointer - aligned_size;\n      if (-1 < (int)remaining_size) {\n        if (remaining_size < 0xc) {\n          if (previous_block_pointer == current_block_pointer) {\n            new_block_pointer = current_block_pointer + 1;\n            *(uint *)PTR_DAT_0800633c = *new_block_pointer;\n          }\n          else {\n            new_block_pointer = current_block_pointer + 1;\n          }\n          if (previous_block_pointer != current_block_pointer) {\n            previous_block_pointer[1] = *new_block_pointer;\n            previous_block_pointer = current_block_pointer;\n          }\n        }\n        else {\n          *current_block_pointer = remaining_size;\n          *(uint *)((int)current_block_pointer + remaining_size) = aligned_size;\n          previous_block_pointer = (uint *)((int)current_block_pointer + remaining_size);\n        }\n        do_nothing_08006eae(out_pointer);\n        aligned_size = (int)previous_block_pointer + 0xbU & 0xfffffff8;\n        remaining_size = aligned_size - (int)(previous_block_pointer + 1);\n        if (remaining_size != 0) {\n          *(int *)((int)previous_block_pointer + remaining_size) = -remaining_size;\n          return aligned_size;\n        }\n        return aligned_size;\n      }\n      previous_block_pointer = current_block_pointer;\n      current_block_pointer = (uint *)current_block_pointer[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      new_block_pointer = FUN_08006920(out_pointer);\n      *(uint *)PTR_DAT_08006340 = new_block_pointer;\n    }\n    current_block_pointer = (uint *)FUN_08006920(out_pointer,aligned_size);\n    if ((current_block_pointer != (uint *)0xffffffff) && ((new_block_pointer = (uint *)((int)current_block_pointer + 3U & 0xfffffffc), current_block_pointer == new_block_pointer || (remaining_size = FUN_08006920(out_pointer,(int)new_block_pointer - (int)current_block_pointer), remaining_size != -1)))) {\n      *new_block_pointer = aligned_size;\n      do_nothing_08006eae(out_pointer);\n      aligned_size = (int)new_block_pointer + 0xbU & 0xfffffff8;\n      remaining_size = aligned_size - (int)(new_block_pointer + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)new_block_pointer + remaining_size) = -remaining_size;\n        return aligned_size;\n      }\n      return aligned_size;\n    }\n    *out_pointer = 0xc;\n    do_nothing_08006eae(out_pointer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006920",
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "check_if_initialized_08002004",
                "*param_1": "ptr_4",
                "iVar1": "result",
                "*puVar2": "ptr_1",
                "DAT_080020e8": "ptr_2",
                "DAT_080020ec": "ptr_3"
            },
            "code": "int check_if_initialized_08002004(undefined4 *param_1)\n{\n  int result;\n  undefined4 *ptr_1;\n  if (*(char *)(param_1 + 9) != '\\x01') {\n    *(undefined *)(param_1 + 9) = 1;\n    result = initialize_variables();\n    if (result == 0) {\n      param_1[10] = (param_1[10] & 0xfffffcfe) | 0x100;\n      ptr_1 = (undefined4 *)*param_1;\n      if ((ptr_1 == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        param_1[10] |= 0x100000;\n        if ((*(uint *)(DAT_080020ec + 4) & 0x400) != 0) {\n          param_1[10] = (param_1[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        param_1[10] &= 0xffefffff;\n        if ((ptr_1[1] & 0x400) != 0) {\n          param_1[10] = (param_1[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((param_1[10] & 0x1000) == 0) {\n        param_1[11] = 0;\n      }\n      else {\n        param_1[11] &= 0xfffffff9;\n      }\n      *(undefined *)(param_1 + 9) = 0;\n      *ptr_1 = 0xfffffffd;\n      param_1 = (undefined4 *)*param_1;\n      if (((param_1[2] & 0xe0000) == 0xe0000) && ((param_1 != DAT_080020e8) || ((DAT_080020e8[-0xff] & 0xf0000) == 0))) {\n        param_1[2] |= 0x500000;\n      }\n      else {\n        param_1[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(param_1 + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_if_initialized_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "get_value_08005754",
                "param_1": "input",
                "bVar1": "is_small",
                "cVar2": "c",
                "uVar3": "value",
                "uVar4": "shift_amount"
            },
            "code": "uint get_value_08005754(uint input)\n{\n  bool is_small = false;\n  char c = -1;\n  uint value = 0;\n  uint shift_amount = *(uint *)PTR_DAT_080057b0;\n  if (input < 0xe) {\n    is_small = (input + 0x2e < 0x3c);\n  }\n  else {\n    is_small = (input < 0x3c);\n  }\n  if (is_small) {\n    input = input + 0x2e;\n    c = PTR_DAT_080057ac[input];\n  }\n  if (c != -1) {\n    value = get_random_value();\n    if (shift_amount != 0xc) {\n      if (shift_amount < 0xc) {\n        value = value >> (0xc - shift_amount & 0xff);\n      }\n      else {\n        value = value << (shift_amount - 0xc & 0xff);\n      }\n    }\n  }\n  return value;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "input_flag",
                "param_2": "input_value",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "puVar1": "data_ptr",
                "PTR_DAT_08006068": "data_start_ptr",
                "PTR_LAB_08005fa0_1_08006070": "label_1",
                "PTR_DAT_0800606c": "data_end_ptr"
            },
            "code": "void initialize_data_08005fc8(int param_1,int param_2,undefined4 param_3,undefined4 param_4)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08006068;\n  if (param_1 != 1) {\n    return;\n  }\n  if (param_2 == 0xffff) {\n    data_ptr[0] = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    initialize_data_08005fc8_helper(0,PTR_LAB_08005fa0_1_08006070,data_ptr,PTR_DAT_0800606c,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_byte_at_pointer_08002ab8",
                "param_1": "pointer",
                "pbVar1": "byte_pointer",
                "*pbVar1": "*byte_pointer",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*pointer + 16)",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)(pointer + 10)"
            },
            "code": "int increment_byte_at_pointer_08002ab8(int *pointer)\n{\n  if (*(short *)(pointer + 10) != 0) {\n    byte *byte_pointer = (byte *)pointer[9];\n    pointer[9] = (int)(byte_pointer + 1);\n    *(uint *)(*pointer + 16) = (uint)*byte_pointer;\n    *(short *)(pointer + 10) = *(short *)(pointer + 10) - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_byte_at_pointer_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "data_ptr",
                "uVar2": "output_1",
                "uStack_c": "output_2",
                "uStack_8": "output_3",
                "uStack_4": "output_4",
                "PTR_PTR_DAT_0800691c": "data_ptr_ptr",
                "FUN_08006cb4": "free_data",
                "FUNC_08006394": "process_data_helper"
            },
            "code": "void process_data_080068f0(undefined4 input_1, undefined4 input_2, undefined4 input_3, undefined4 input_4) { \n    int data_ptr = *(int *)PTR_PTR_DAT_0800691c; \n    undefined4 output_1 = input_1; \n    undefined4 output_2 = input_2; \n    undefined4 output_3 = input_3; \n    undefined4 output_4 = input_4; \n    if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) { \n        free_data(data_ptr); \n    } \n    process_data_080068f0_helper(data_ptr, *(undefined4 *)(data_ptr + 8), output_1, &output_2, output_1, &output_2); \n    return; \n}",
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = FUN_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_flag_and_call_0800138e",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "current_flag"
            },
            "code": "void set_flag_and_call_0800138e(int data, int flag, int param_3, int param_4)\n{\n  int current_flag = *(int *)(data + 0x14);\n  *(int *)(data + 0x14) = current_flag | flag;\n  call_function(data, current_flag | 0xc, 0, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "data_ptr",
                "iVar1": "status",
                "uVar2": "index",
                "local_9": "data_byte"
            },
            "code": "void update_data_0800598a(int data_ptr)\n{\n  int status;\n  ushort index;\n  undefined data_byte;\n  \n  status = get_data(data_ptr, &data_byte);\n  if ((status == 0) && (index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x62))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = data_byte;\n    *(ushort *)(data_ptr + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "update_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_call_functions_08001c88",
                "FUN_08002470": "call_function_one",
                "FUN_08001c3c": "call_function_two",
                "do_nothing_08001c3a": "do_nothing",
                "*DAT_08001ca8": "*flag_ptr"
            },
            "code": "int set_flag_and_call_functions_08001c88() {\n    int flag = 0x10;\n    *DAT_08001ca8 |= flag;\n    call_function_one(3);\n    call_function_two(0xf);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c3a",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_flag_if_param2_is_1_08001a44",
                "param_1": "address",
                "param_2": "flag_value",
                "uVar1": "flag",
                "*(char *)(param_1 + 0x70)": "*(bool *)(address + 0x70)",
                "FUN_080019f6": "initialize_flag"
            },
            "code": "void set_flag_if_param2_is_1_08001a44(int address, int flag_value)\\n{\\n  bool flag;\\n  if (flag_value == 1) {\\n    flag = true;\\n    if (*(char *)(address + 0x70) == \"\\0\") {\\n      initialize_flag();\\n    }\\n  }\\n  else {\\n    flag = false;\\n  }\\n  *(bool *)(address + 0x70) = flag;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_flag_if_param2_is_1_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "process_input_08002c54",
                "param_1": "input_array",
                "pbVar2": "byte_array",
                "cVar1": "current_char"
            },
            "code": "int process_input_08002c54(int *input_array) {\n  char current_char;\n  byte *byte_array;\n  current_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte_array = (byte *)input_array[9];\n    input_array[9] = (int)(byte_array + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*byte_array;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_permissions_080043b4",
                "param_1": "permissions",
                "param_2": "perm_bits",
                "param_3": "expected_result",
                "param_4": "permission_level",
                "param_5": "max_time",
                "iVar1": "time_diff"
            },
            "code": "uint8_t check_permissions_080043b4(uint32_t **permissions, uint32_t perm_bits, bool expected_result, int permission_level, uint32_t max_time)\n{\n  int time_diff;\n  do {\n    if (((perm_bits & ~**permissions) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_time == 0xffffffff) || ((max_time != 0 && (time_diff = get_time_diff(), (uint32_t)(time_diff - permission_level) <= max_time))));\n  (*permissions)[3] &= 0xfffffe5f;\n  (*permissions)[5] &= 0xfffffffe;\n  *(uint8_t *)((int)permissions + 0x39) = 0x20;\n  *(uint8_t *)((int)permissions + 0x3a) = 0x20;\n  *(uint32_t *)(permissions + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_permissions_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "check_and_initialize_0800441a",
                "param_1": "ptr_param",
                "do_nothing_08004418": "do_nothing",
                "unsigned": "unsigned int",
                "undefined": "unsigned char",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int check_and_initialize_0800441a(int *PTR_param) {\n    if (PTR_param != NULL) {\n        if (*(char *)((int)PTR_param + 0x39) == '\\0') {\n            *(unsigned char *)(PTR_param + 0xe) = 0;\n            do_nothing();\n        }\n        *(unsigned char *)((int)PTR_param + 0x39) = 0x24;\n        *(unsigned int *)(*PTR_param + 0xc) &= 0xffffdfff;\n        initialize(PTR_param);\n        *(unsigned int *)(*PTR_param + 0x10) &= 0xffffb7ff;\n        *(unsigned int *)(*PTR_param + 0x14) &= 0xffffffd5;\n        *(unsigned int *)(*PTR_param + 0xc) |= 0x2000;\n        PTR_param[0xf] = 0;\n        *(unsigned char *)((int)PTR_param + 0x39) = 0x20;\n        *(unsigned char *)((int)PTR_param + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004418",
                "FUN_08004204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_and_initialize_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_code_if_present_08004d18",
                "PTR_DAT_08004d28": "code_ptr_data",
                "PTR_DAT_08004d2c": "code_arg_data"
            },
            "code": "void execute_code_if_present_08004d18(void)\n{\n  code* code_ptr = *(code**)PTR_DAT_08004d28;\n  if (code_ptr != NULL) {\n    (*code_ptr)(*(int*)PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_code_if_present_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_080006d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "mask",
                "uVar3": "temp3",
                "in_r12": "temp4",
                "bVar4": "isZero"
            },
            "code": "ulonglong calculate_080006d4(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool isZero;\n  uint mask = input4 >> 0x14;\n  if (input2 != input3 && mask != input3) {\n    isZero = (input1 | (input2 << 1)) == 0;\n    if (!isZero) {\n      isZero = (input3 | (input4 << 1)) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)(((input2 ^ input4) & 0x80000000) << 0x20);\n    }\n    if (input2 == 0) {\n      temp3 = input2 & 0x80000000;\n      do {\n        temp1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp3;\n      if (mask != 0) {\n        return CONCAT44(input2, input1);\n      }\n    }\n    do {\n      mask = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(mask != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2, input1);\n  }\n  isZero = (input1 | (input2 << 1)) == 0;\n  if (isZero) {\n    temp2 = input4;\n    temp1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | (input4 << 1)) == 0;\n  }\n  temp3 = input2;\n  if (((!isZero) && ((input2 != input3 || ((input1 | (input2 << 0xc)) == 0)))) && ((mask != input3 || (input1 = input3, temp3 = input4, (input3 | (input4 << 0xc)) == 0)))) {\n    return (ulonglong)(((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20);\n  }\n  return CONCAT44(temp3, input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_with_args_and_return_2_stack_values_08006174",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uStack_8": "stack_value_1",
                "uStack_4": "stack_value_2",
                "PTR_PTR_DAT_08006194": "PTR_PTR_DAT_08006194"
            },
            "code": "void execute_function_with_args_and_return_2_stack_values_08006174(int arg_1, int arg_2, int arg_3, int arg_4)\n{\n  int stack_value_1;\n  int stack_value_2;\n  stack_value_1 = arg_3;\n  stack_value_2 = arg_4;\n  call_function_with_args_and_store_2_stack_values(*(int *)PTR_PTR_DAT_08006194, arg_1, arg_2, &stack_value_1, arg_1, &stack_value_1);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_function_with_args_and_return_2_stack_values_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "process_integer_08007028",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "pointer_to_data",
                "iVar2": "result"
            },
            "code": "void process_integer_08007028(int *output, undefined4 input)\n{\n  undefined *pointer_to_data = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int result = calculate_integer(input);\n  if ((result == -1) && (*(int *)pointer_to_data != 0)) {\n    *output = *(int *)pointer_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "process_integer_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_bits_in_data_08002494",
                "param_1": "offset",
                "param_2": "data",
                "param_3": "bitmask",
                "uVar1": "num_bits_to_shift",
                "uVar2": "num_bits_to_keep",
                "shifted_data": "shifted_data",
                "masked_bits": "masked_bits",
                "uVar3": "final_data"
            },
            "code": "void set_bits_in_data_08002494(uint32_t offset, uint32_t data, uint32_t bitmask) {\n  uint32_t num_bits_to_shift = (uint32_t)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint32_t num_bits_to_keep = 7 - num_bits_to_shift;\n  if (num_bits_to_keep > 3) {\n    num_bits_to_keep = 4;\n  }\n  if (num_bits_to_shift + 4 < 7) {\n    num_bits_to_shift = 0;\n  }\n  else {\n    num_bits_to_shift -= 3;\n  }\n  uint32_t shifted_data = (data & ((1 << (num_bits_to_keep & 0xff)) - 1U)) << (num_bits_to_shift & 0xff);\n  uint32_t masked_bits = (1 << (num_bits_to_shift & 0xff)) - 1U & bitmask;\n  uint32_t final_data = shifted_data | masked_bits;\n  if ((int)offset < 0) {\n    *(char *)(DAT_080024f4 + (offset & 0xf)) = (char)(final_data << 4);\n  }\n  else {\n    *(char *)(offset + 0xe000e400) = (char)(final_data << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bits_in_data_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = FUN_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = FUN_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        FUN_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_08002624(uVar5,&local_20);\n        uVar5 = FUN_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800441a",
                "FUN_08004884",
                "FUN_08004d06",
                "FUN_080068f0",
                "FUN_08002624",
                "FUN_08004cce",
                "FUN_08004c78"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_080055bc",
                "param_1": "target",
                "uVar1": "index"
            },
            "code": "uint find_index_080055bc(int target) {\n  uint index;\n  if (target == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (true) {\n      if (index > 4) {\n        return index;\n      }\n      if (target == *(int *)(PTR_DAT_080055dc + index * 4)) {\n        break;\n      }\n      index = (index + 1) & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_080055e0",
                "FUN_08005604"
            ],
            "imported": false,
            "current_name": "find_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "set_params_08001960",
                "param_1": "obj_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "iVar1": "result",
                "puVar2": "ptr",
                "uVar3": "arg1",
                "uVar4": "arg3",
                "uVar5": "arg2",
                "uVar6": "arg4",
                "FUN_08000a04": "check_params",
                "FUN_080009dc": "check_args",
                "FUN_08000a18": "update_params",
                "*(undefined4 *)(param_1 + 0x60)": "obj_ptr->param_3",
                "*(undefined4 *)(param_1 + 100)": "obj_ptr->param_4",
                "*(undefined4 *)(param_1 + 0x68)": "obj_ptr->param_5",
                "*(undefined4 *)(param_1 + 0x6c)": "obj_ptr->param_6",
                "*(char *)(param_1 + 0x70)": "obj_ptr->flag",
                "*(undefined4 **)(param_1 + 0x3c)": "obj_ptr->ptr",
                "*(undefined4 *)(param_1 + 0x48)": "obj_ptr->arg1",
                "*(undefined4 *)(param_1 + 0x4c)": "obj_ptr->arg2",
                "*(undefined4 *)(obj_ptr + 0x60)": "obj_ptr->param_3",
                "*(undefined4 *)(obj_ptr + 100)": "obj_ptr->param_4",
                "*(undefined4 *)(obj_ptr + 0x68)": "obj_ptr->param_5",
                "*(undefined4 *)(obj_ptr + 0x6c)": "obj_ptr->param_6",
                "*(char *)(obj_ptr + 0x70)": "obj_ptr->flag",
                "*(undefined4 **)(obj_ptr + 0x3c)": "obj_ptr->ptr",
                "*(undefined4 *)(obj_ptr + 0x48)": "obj_ptr->arg1",
                "*(undefined4 *)(obj_ptr + 0x4c)": "obj_ptr->arg2"
            },
            "code": "void set_params_08001960(int obj_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6)\\n{\\n  int result = FUN_08000a04(param_3, param_4, param_5, param_6, param_4);\\n  if (result == 0) {\\n    *(undefined4 *)(obj_ptr + 0x60) = param_3;\\n    *(undefined4 *)(obj_ptr + 100) = param_4;\\n    *(undefined4 *)(obj_ptr + 0x68) = param_5;\\n    *(undefined4 *)(obj_ptr + 0x6c) = param_6;\\n    if (*(char *)(obj_ptr + 0x70) != \"\\0\") {\\n      undefined4 *ptr = *(undefined4 **)(obj_ptr + 0x3c);\\n      undefined4 arg1 = *ptr;\\n      undefined4 arg2 = ptr[1];\\n      int res1 = FUN_080009dc(param_5, param_6, arg1, arg2);\\n      if (res1 == 0) {\\n        int res2 = FUN_08000a18(param_3, param_4, arg1, arg2);\\n        if (res2 != 0) {\\n          *ptr = param_3;\\n          ptr[1] = param_4;\\n        }\\n      }\\n      else {\\n        *ptr = param_5;\\n        ptr[1] = param_6;\\n      }\\n      arg1 = *(undefined4 *)(obj_ptr + 0x48);\\n      arg2 = *(undefined4 *)(obj_ptr + 0x4c);\\n      undefined4 arg3 = *(undefined4 *)(obj_ptr + 0x68);\\n      undefined4 arg4 = *(undefined4 *)(obj_ptr + 0x6c);\\n      int res3 = FUN_08000a18(arg1, arg2, arg3, arg4);\\n      if (res3 != 0) {\\n        *(undefined4 *)(obj_ptr + 0x48) = arg3;\\n        *(undefined4 *)(obj_ptr + 0x4c) = arg4;\\n        return;\\n      }\\n      arg3 = *(undefined4 *)(obj_ptr + 0x60);\\n      arg4 = *(undefined4 *)(obj_ptr + 100);\\n      int res4 = FUN_080009dc(arg1, arg2, arg3, arg4);\\n      if (res4 != 0) {\\n        *(undefined4 *)(obj_ptr + 0x48) = arg3;\\n        *(undefined4 *)(obj_ptr + 0x4c) = arg4;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_params_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "check_parameter_08004ca2",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_08004c8a": "perform_check"
            },
            "code": "int check_parameter_08004ca2(int input_param)\n{\n  int result;\n  if (input_param != 0)\n  {\n    result = perform_check();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "check_parameter_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_included_in_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "*(uint *)(param_1 + 8)": "param1_offset_value"
            },
            "code": "int is_param2_included_in_param1_08002810(uint32_t* ptr_param1, uint32_t param2) {\n    uint32_t* ptr_param1_offset = ptr_param1 + 2;\n    uint32_t param1_offset_value = *ptr_param1_offset;\n    if ((param2 & param1_offset_value) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_included_in_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "clear_memory_0800224c",
                "param_1": "memory_block",
                "iVar1": "result"
            },
            "code": "int clear_memory_0800224c(int *memory_block)\n{\n    int result;\n    if (memory_block == NULL) {\n        result = 1;\n    }\n    else {\n        memory_block[10] |= 2;\n        result = clear_memory_0800224c_helper();\n        if (result == 0) {\n            *(int *)*memory_block = -32;\n            *(unsigned int *)(*memory_block + 4) &= DAT_08002340;\n            *(unsigned int *)(*memory_block + 8) &= DAT_08002344;\n            *(unsigned int *)(*memory_block + 12) &= 0xFF000000;\n            *(unsigned int *)(*memory_block + 16) &= 0xC0000000;\n            *(unsigned int *)(*memory_block + 20) &= 0xFFFFF000;\n            *(unsigned int *)(*memory_block + 24) &= 0xFFFFF000;\n            *(unsigned int *)(*memory_block + 28) &= 0xFFFFF000;\n            *(unsigned int *)(*memory_block + 32) &= 0xFFFFF000;\n            *(unsigned int *)(*memory_block + 36) &= 0xFFFFF000;\n            *(unsigned int *)(*memory_block + 40) &= 0xFFFFF000;\n            *(unsigned int *)(*memory_block + 44) &= 0xFF000000;\n            *(unsigned int *)(*memory_block + 48) &= 0xFF000000;\n            *(unsigned int *)(*memory_block + 52) &= 0xC0000000;\n            *(unsigned int *)(*memory_block + 56) &= 0xC0000000;\n            *(unsigned int *)(*memory_block + 60) &= 0xFFC00000;\n            *(unsigned int *)(*memory_block + 64) &= 0xFFC00000;\n            clear_memory_0800224c_helper(memory_block);\n            memory_block[11] = 0;\n            memory_block[10] = 0;\n        }\n        *(char *)(memory_block + 9) = 0;\n    }\n    return result;\n}\n",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "clear_memory_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "check_condition_080054b0",
                "param_1": "param",
                "uVar1": "result"
            },
            "code": "bool check_condition_080054b0(int param)\n{\n  uint32_t ptr = PTR_DAT_080054d0 + (uint32_t)*(byte *)(param + 0x44) * 4;\n  uint32_t uVar1 = FUN_080047e8(*(undefined4 *)(ptr));\n  bool result = (uVar1 & 0x21) == 0x21;\n  return result;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "check_condition_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_input_08006f00",
                "param_1": "input_size",
                "puVar1": "undefined_pointer",
                "uVar2": "temp_result",
                "piVar3": "function_pointers",
                "iVar4": "function_pointer",
                "pcVar5": "function_pointer_value",
                "unaff_r4": "undefined_register_4",
                "unaff_r5": "undefined_register_5",
                "in_lr": "undefined_register_lr",
                "puVar6": "temp_pointer",
                "PTR_PTR_DAT_08006f0c": "function_pointers_pointer",
                "PTR_DAT_08006f30": "temp_pointer2"
            },
            "code": "int process_input_08006f00(uint input_size) {\n  int* function_pointers = *(int**)PTR_PTR_DAT_08006f0c;\n  if (input_size > 31) {\n    *function_pointers = 22;\n    return -1;\n  }\n  int function_pointer = function_pointers[17];\n  if (function_pointer == 0 || *(code**)(function_pointer + input_size * 4) == NULL) {\n    undefined* temp_pointer = PTR_PTR_DAT_08006f0c;\n    undefined4 temp_result = thunk_FUN_08005750(function_pointers);\n    undefined* PTR_DAT_08006f30 = PTR_DAT_08006f30;\n    *(undefined4*)PTR_DAT_08006f30 = 0;\n    int result = FUN_08005740(temp_result, input_size, input_size, 0, temp_pointer, unaff_r4, unaff_r5, in_lr);\n    if (result == -1 && *(int*)PTR_DAT_08006f30 != 0) {\n      *function_pointers = *(int*)PTR_DAT_08006f30;\n    }\n    return result;\n  }\n  if (*(code**)(function_pointer + input_size * 4) == (code*)-1) {\n    *function_pointers = 22;\n    return 1;\n  }\n  *(undefined4*)(function_pointer + input_size * 4) = 0;\n  (*(code**)(function_pointer + input_size * 4))(input_size);\n  return 0;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_input_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "check_string_080016b4",
                "param_1": "input",
                "cVar1": "result",
                "iVar2": "var1",
                "iVar3": "var2",
                "uVar4": "var3",
                "uVar5": "ptr1",
                "uVar6": "var4",
                "uVar7": "var5",
                "uVar8": "var6",
                "uVar9": "var7",
                "uVar10": "var8",
                "cVar11": "var9",
                "uVar12": "var10",
                "uVar13": "var11",
                "uVar14": "var12",
                "uVar15": "var13",
                "uVar16": "var14",
                "uVar17": "var15",
                "uVar18": "var16",
                "local_38": "var17",
                "uStack_34": "var18"
            },
            "code": "char check_string_080016b4(int input) {\n    char result = *(char *)(input + 0x70);\n    if (result != '\\0') {\n        int var1 = get_var1();\n        int var2 = *(int *)(input + 0x44);\n        int var3 = *(int *)(input + 0x58);\n        if ((uint)(var1 - var2) < *(uint *)(input + 0x58)) {\n            result = '\\0';\n        }\n        else {\n            int* ptr1 = *(int **)(input + 0x38);\n            int var4 = ptr1[1];\n            int* ptr2 = *(int **)(input + 0x40);\n            int var5 = ptr2[1];\n            int var6 = *(int *)(input + 0x50);\n            int var7 = *(int *)(input + 0x54);\n            long long var8 = get_var8(var5, var4);\n            int var9 = (int)(var8 >> 32);\n            int var10 = (int)var8;\n            int var11 = get_var11(var5, var4, *(int *)(input + 0x20), *(int *)(input + 0x24));\n            int var12 = get_var12(var11, var9, *(int *)(input + 0x48), *(int *)(input + 0x4c));\n            *(long long *)(input + 0x48) = var12;\n            char var13 = *(char *)(input + 0x71);\n            if (var13 == '\\0') {\n                int var14 = get_var14(var10, var9, *(int *)(input + 0x18), *(int *)(input + 0x1c));\n                int var15 = get_var15(var12, *(int *)(input + 0x4c), var14, (int)((unsigned long long)var14 >> 32));\n                *(long long *)(input + 0x48) = var15;\n            }\n            int var16 = *(int *)(input + 0x48);\n            int var17 = *(int *)(input + 0x4c);\n            int var18 = *(int *)(input + 0x68);\n            int var19 = *(int *)(input + 0x6c);\n            long long var20 = get_var20(var16, var17, var18, var19);\n            if (var20 == 0) {\n                int var21 = *(int *)(input + 0x60);\n                int var22 = *(int *)(input + 100);\n                int var23 = get_var23(var16, var17);\n                if (var23 != 0) {\n                    *(int *)(input + 0x48) = var21;\n                    *(int *)(input + 0x4c) = var22;\n                }\n            }\n            else {\n                *(int *)(input + 0x48) = var18;\n                *(int *)(input + 0x4c) = var19;\n            }\n            if (var13 == '\\0') {\n                long long var24 = get_var24(var5, var4, *(int *)(input + 0x18), *(int *)(input + 0x1c));\n                int var25 = get_var25(var16, var17, (int)var24, (int)((unsigned long long)var24 >> 32));\n                *(long long *)(input + 0x48) = var25;\n            }\n            long long var26 = get_var26(var5, var4, *(int *)(input + 0x28), *(int *)(input + 0x2c));\n            int var27 = get_var27(var16, var17, (int)var26, (int)((unsigned long long)var26 >> 32));\n            int var28 = get_var28(*(int *)(input + 0x48), *(int *)(input + 0x4c), *(int *)(input + 0x18), (int)((unsigned long long)*(int *)(input + 0x18) >> 32));\n            long long var29 = get_var29(var27, var28, *(int *)(input + 0x60), *(int *)(input + 100));\n            *(long long **)(input + 0x3c) = var29;\n            *(int *)(input + 0x50) = var5;\n            *(int *)(input + 0x54) = var4;\n            *(int *)(input + 0x44) = var1;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08000194",
                "FUN_08000a18",
                "FUN_080004f8",
                "FUN_080058e0",
                "FUN_08000190",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_string_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "execute_main_function_080018f8",
                "FUN_08001814": "execute_helper_function"
            },
            "code": "void execute_main_function_080018f8(void)\n{\n  execute_helper_function();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "execute_main_function_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "get_character_08005890",
                "param_1": "index",
                "cVar1": "character",
                "iVar2": "position",
                "uVar3": "value",
                "uVar4": "data"
            },
            "code": "char get_character_08005890(uint index) {\n  char character;\n  int position;\n  uint data;\n  if (index < 0x3c) {\n    data = (uint)(char)PTR_DAT_080058d8[index];\n  }\n  else {\n    data = 0xffffffff;\n  }\n  if (data == 0xffffffff) {\n    character = '\\0';\n  }\n  else {\n    position = FUN_080047f4(data, PTR_DAT_080058dc);\n    if (position == 0) {\n      character = '\\0';\n    }\n    else {\n      uint mask = 1 << (data & 0xf) & 0xffff;\n      uint shifted_data = (data << 0x18) >> 0x1c;\n      uint value = FUN_08004848(shifted_data);\n      character = FUN_08004c48(value, mask);\n    }\n  }\n  if (character != '\\0') {\n    character = '\\x01';\n  }\n  return character;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "get_character_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "execute_function_08005da0",
                "FUN_08005d8a": "call_helper_function"
            },
            "code": "void execute_function_08005da0(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "search_value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "unsigned int find_value_in_array_08004cb2(int search_value, char* array) {\n    while (true) {\n        if (*array == -1) {\n            return 0xffffffff;\n        }\n        if (*array == search_value) {\n            break;\n        }\n        array += 12;\n    }\n    return *(unsigned int*)(array + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_call_function_08004ef4",
                "param_1": "input_param",
                "iVar1": "function_result",
                "FUN_08004e70": "get_function_result",
                "*(char *)(iVar1 + 0x5d)": "*(char *)(function_result + 0x5d)",
                "FUN_08002c10": "call_function"
            },
            "code": "void check_and_call_function_08004ef4(undefined4 input_param)\\n{\\n  int function_result;\\n  function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5d) == \"\\0\") {\\n    call_function(input_param);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_values_08001294",
                "param_1": "address",
                "param_2": "val1",
                "param_3": "val2",
                "param_4": "val3",
                "param_5": "val4"
            },
            "code": "void set_values_08001294(int address,undefined val1,undefined val2,undefined val3,undefined val4)\n{\n  *(undefined *)(address + 0x18) = val1;\n  *(undefined *)(address + 0x19) = val2;\n  *(undefined *)(address + 0x1a) = val3;\n  *(undefined *)(address + 0x1b) = val4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_values_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "check_if_valid_input_08002384",
                "param_1": "input_array",
                "iVar1": "status",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "end_time",
                "uVar5": "quotient",
                "local_14": "i"
            },
            "code": "int check_if_valid_input_08002384(int *input_array)\n{\n  int status = 0;\n  uint divisor = 0;\n  int start_time = 0;\n  int end_time = 0;\n  int current_time = 0;\n  \n  if (*(char *)(input_array + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(input_array + 9) = 1;\n  \n  status = check_device_status();\n  if (status == 0) {\n    input_array[10] = input_array[10] & 0xffffeefdU | 2;\n    divisor = *(uint *)PTR_DAT_0800246c;\n    uint quotient = FUN_08003da4(2);\n    for (int i = divisor / quotient << 1; i != 0; i = i + -1) {\n    }\n    initialize_input(input_array);\n    *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) | 8;\n    start_time = get_current_time();\n    end_time = start_time;\n    while ((current_time = get_current_time()) - start_time <= 10) {\n      if ((*(uint *)(*input_array + 8) & 8) != 0) {\n        *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) & 0xfffffff7U;\n        end_time = current_time;\n      }\n    }\n    if (end_time - start_time > 10) {\n      input_array[10] = input_array[10] & 0xffffffedU | 0x10;\n      *(undefined *)(input_array + 9) = 0;\n      return 1;\n    }\n    *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) | 4;\n    start_time = get_current_time();\n    end_time = start_time;\n    while ((*(uint *)(*input_array + 8) & 4) != 0) {\n      if ((current_time = get_current_time()) - start_time > 10) {\n        input_array[10] = input_array[10] & 0xffffffedU | 0x10;\n        *(undefined *)(input_array + 9) = 0;\n        return 1;\n      }\n      end_time = current_time;\n    }\n    input_array[10] = input_array[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(input_array + 9) = 0;\n  return status;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08003da4",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_if_valid_input_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_char_in_buffer_08002ad8",
                "param_1": "buffer_ptr",
                "puVar1": "char_buffer_ptr",
                "PTR_0000001c": "buffer_length_ptr",
                "DAT_08003010": "char_to_increment"
            },
            "code": "int increment_char_in_buffer_08002ad8(int *buffer_ptr)\n{\n    short *PTR_0000001c = (short *)((int)buffer_ptr + 0x2a);\n    if (*PTR_0000001c != 0)\n    {\n        char *char_buffer_ptr = (char *)buffer_ptr[9];\n        buffer_ptr[9] = (int)(char_buffer_ptr + 1);\n        *char_buffer_ptr = (char)*(int *)(*buffer_ptr + 0x10);\n        *PTR_0000001c = *PTR_0000001c - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_char_in_buffer_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_scores_08004204",
                "param_1": "score_data",
                "*param_1": "data_pointer",
                "iVar3": "value1",
                "DAT_080043b0": "multiplier",
                "iVar8": "score_divisor",
                "iVar4": "value2",
                "iVar9": "value4_divisor",
                "iVar5": "value3",
                "iVar10": "value5_divisor",
                "iVar6": "value4",
                "iVar11": "value6_divisor",
                "iVar7": "value5",
                "PTR_DAT_080043ac": "data_pointer_constant"
            },
            "code": "void calculate_scores_08004204(int *score_data)\n{\n    // Masking and OR operations\n    score_data[4] = score_data[2] | score_data[4] | score_data[5] | (score_data[3] & 0xffffe9f3);\n    score_data[6] = score_data[6] | (score_data[3] & 0xfffffcff);\n    score_data[5] = score_data[5] & 0xffffcfff | score_data[3];\n\n    int data_pointer = *score_data;\n    if (data_pointer != PTR_DAT_080043ac) {\n        // Calculation for non-DAT_080043ac case\n        int value1 = calculate_value(score_data[1], DAT_080043b0);\n        int value2 = calculate_value(score_data[1], DAT_080043b0);\n        int value3 = calculate_value(score_data[1], DAT_080043b0);\n        int value4 = calculate_value(score_data[1], DAT_080043b0);\n        int value5 = calculate_value(score_data[1], DAT_080043b0);\n        int value6 = calculate_value(score_data[1], DAT_080043b0);\n\n        // Calculating score\n        score_data[2] = ((DAT_080043b0 * ((value1 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value2 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value3 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value4 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value5 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value6 * 0x19) / (score_data[1] << 2)))))))))) + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((DAT_080043b0 * ((value2 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value3 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value4 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value5 * 0x19) / (score_data[1] << 2))))))) + 0x32) >> 0x25) & 0xf0) + (DAT_080043b0 * ((value1 * 0x19) / (score_data[1] << 2)) >> 0x25) * 0x10;\n    }\n    else {\n        // Calculation for DAT_080043ac case\n        int value1 = calculate_value(score_data[1], DAT_080043b0);\n        int value2 = calculate_value(score_data[1], DAT_080043b0);\n        int value3 = calculate_value(score_data[1], DAT_080043b0);\n        int value4 = calculate_value(score_data[1], DAT_080043b0);\n        int value5 = calculate_value(score_data[1], DAT_080043b0);\n        int value6 = calculate_value(score_data[1], DAT_080043b0);\n\n        // Calculating score\n        score_data[2] = ((DAT_080043b0 * ((value1 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value2 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value3 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value4 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value5 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value6 * 0x19) / (score_data[1] << 2)))))))))) + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((DAT_080043b0 * ((value2 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value3 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value4 * 0x19) / (score_data[1] << 2) + (DAT_080043b0 * ((value5 * 0x19) / (score_data[1] << 2))))))) + 0x32) >> 0x25) & 0xf0) + (DAT_080043b0 * ((value1 * 0x19) / (score_data[1] << 2)) >> 0x25) * 0x10;\n    }\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_scores_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "perform_operation_08005da8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "result",
                "iVar3": "temp_result",
                "uVar2": "temp_input4",
                "bVar4": "i",
                "lVar5": "temp_longlong",
                "uVar6": "temp_undefined8",
                "uVar7": "temp_undefined8_2"
            },
            "code": "int perform_operation_08005da8(int input1, int input2, int input3, uint32_t input4, byte input5) {\n  int result = 0;\n  int temp_result;\n  uint32_t temp_input4;\n  byte i;\n  longlong temp_longlong;\n  undefined8 temp_undefined8;\n  undefined8 temp_undefined8_2;\n\n  temp_result = FUN_08000a2c(input3, input4, input3, input4);\n  if (temp_result == 0) {\n    temp_input4 = input4 & 0x7fffffff;\n    temp_result = FUN_08000a2c(input3, temp_input4, 0xffffffff, DAT_08005f08);\n    if ((temp_result == 0) &&\n       (temp_result = FUN_080009f0(input3, temp_input4, 0xffffffff, DAT_08005f08), temp_result == 0)) {\n      result = FUN_08005c96(input1, PTR_DAT_08005f20);\n    }\n    else {\n      temp_result = FUN_08000a18(input3, input4, 0xe0000000, DAT_08005f0c);\n      if (temp_result == 0) {\n        temp_result = FUN_080009dc(input3, input4, 0xe0000000, DAT_08005f10);\n        if (temp_result == 0) {\n          temp_result = FUN_080009dc(input3, input4, 0, 0);\n          if (temp_result == 0) {\n            result = 0;\n          }\n          else {\n            result = FUN_08005cb6(input1, 0x2d);\n            input4 = input4 + 0x80000000;\n          }\n          temp_longlong = (ulonglong)DAT_08005f14 << 0x20;\n          for (i = 0; temp_input4 = (uint32_t)((ulonglong)temp_longlong >> 0x20), i < input5; i = i + 1) {\n            temp_longlong = FUNC_0800074c((int)temp_longlong, temp_input4, 0, DAT_08005f18);\n          }\n          temp_undefined8 = FUNC_08000194(input3, input4, (int)temp_longlong, temp_input4);\n          temp_input4 = FUN_08000aa8();\n          temp_undefined8_2 = FUN_0800040c();\n          temp_undefined8 = FUNC_08000190((int)temp_undefined8, (int)((ulonglong)temp_undefined8 >> 0x20), (int)temp_undefined8_2,\n                               (int)((ulonglong)temp_undefined8_2 >> 0x20));\n          temp_result = FUN_08005d8a(input1, temp_input4, 10);\n          result = result + temp_result;\n          if (input5 != 0) {\n            temp_result = FUN_08005c96(input1, PTR_DAT_08005f28);\n            result = result + temp_result;\n          }\n          while (input5 != 0) {\n            temp_undefined8 = FUNC_080004f8((int)temp_undefined8, (int)((ulonglong)temp_undefined8 >> 0x20), 0, DAT_08005f18);\n            temp_input4 = FUN_08000a58();\n            temp_result = FUN_08005d82(input1, temp_input4, 10);\n            result = result + temp_result;\n            temp_undefined8_2 = FUN_0800042c(temp_input4);\n            temp_undefined8 = FUNC_08000190((int)temp_undefined8, (int)((ulonglong)temp_undefined8 >> 0x20), (int)temp_undefined8_2,\n                                 (int)((ulonglong)temp_undefined8_2 >> 0x20));\n            input5 = input5 - 1;\n          }\n        }\n        else {\n          result = FUN_08005c96(input1, PTR_DAT_08005f24);\n        }\n      }\n      else {\n        result = FUN_08005c96(input1, PTR_DAT_08005f24);\n      }\n    }\n  }\n  else {\n    result = FUN_08005c96(input1, PTR_DAT_08005f1c);\n  }\n  return result;\n}\n",
            "called": [
                "FUN_080009f0",
                "FUN_08000a18",
                "FUN_08000a58",
                "FUN_08000a2c",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005cb6",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005d82",
                "FUN_0800042c",
                "FUN_08000aa8",
                "FUN_08005d8a",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "perform_operation_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "unsetFlagAndSetSpace_080045fe",
                "param_1": "flagPtr",
                "*(uint *)(*param_1 + 0xc)": "flag",
                "*(undefined *)((int)param_1 + 0x39)": "ptr",
                "FUN_08005604": "callAnotherFunction"
            },
            "code": "int unsetFlagAndSetSpace_080045fe(int *flagPtr) {\n    uint *flag = (uint *)(*flagPtr + 0xc);\n    *flag = *flag & 0xffffffbf;\n    undefined *ptr = (undefined *)((int)flagPtr + 0x39);\n    *ptr = 0x20;\n    callAnotherFunction();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "unsetFlagAndSetSpace_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "execute_fun_08005f2c",
                "FUN_08005da8": "call_fun"
            },
            "code": "void execute_fun_08005f2c(){\n  call_fun();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "execute_fun_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_function_based_on_input_value_080055e0",
                "uVar1": "input_value",
                "**(code **)(PTR_DAT_080055fc + uVar1 * 4)": "*(void (**)(int))(FUNCTION_POINTER_TABLE + input_value * 4)",
                "*(undefined4 *)(PTR_DAT_08005600 + uVar1 * 4)": "*(int *)(ARGUMENT_TABLE + input_value * 4)"
            },
            "code": "void execute_function_based_on_input_value_080055e0(void)\n{\n  uint input_value;\n  input_value = get_input_value();\n  if (input_value < 5) {\n    void (*function_pointer)(int) = **(code **)(PTR_DAT_080055fc + uVar1 * 4);\n    int arg = *(undefined4 *)(PTR_DAT_08005600 + uVar1 * 4);\n    function_pointer(arg);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_input_value_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "sum_of_functions_results_08005f40",
                "param_1": "input_param",
                "iVar1": "result_of_fun1",
                "iVar2": "result_of_fun2",
                "FUN_08005f2c": "get_result_of_fun1",
                "FUN_08005cc0": "get_result_of_fun2"
            },
            "code": "int sum_of_functions_results_08005f40(undefined4 input_param)\n{\n  int result_of_fun1;\n  int result_of_fun2;\n  \n  result_of_fun1 = get_result_of_fun1();\n  result_of_fun2 = get_result_of_fun2(input_param);\n  return result_of_fun2 + result_of_fun1;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "sum_of_functions_results_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "check_param_0800213c",
                "param_1": "param_array",
                "iVar1": "check_result",
                "uVar2": "array_sum",
                "uVar3": "flag"
            },
            "code": "int check_param_0800213c(int *param_array) {\n  int array_sum = param_array[1] | param_array[7] | param_array[3] << 1;\n  if (param_array == NULL) {\n    return 1;\n  }\n  if (param_array[10] == 0) {\n    param_array[11] = 0;\n    *(unsigned char *)(param_array + 9) = 0;\n    call_func();\n  }\n  int check_result = check_array(param_array);\n  uint flag = param_array[10] & 0x10;\n  if ((flag == 0) && (check_result == 0)) {\n    param_array[10] = param_array[10] & 0xffffeefdU | 2;\n    uint uVar2 = 0;\n    uint uVar3 = 0;\n    if (param_array[2] == 0x100 || param_array[2] == 1) {\n      uVar3 = (param_array[4] - 1) * 0x100000;\n    }\n    if (param_array[2] == 0x100) {\n      uVar3 = 0x100;\n    }\n    if (param_array[2] == 1) {\n      uVar3 = 0x100;\n    }\n    if (param_array[5] == 1) {\n      if (param_array[3] == 0) {\n        uVar3 = uVar3 | (param_array[6] - 1) * 0x2000 | 0x800;\n      }\n      else {\n        param_array[10] = param_array[10] | 0x20;\n        param_array[11] = param_array[11] | 1;\n      }\n    }\n    *(uint *)(*param_array + 4) = uVar3 | *(uint *)(*param_array + 4) & 0xffff16ff;\n    *(uint *)(*param_array + 8) = PTR_DAT_08002244 & *(uint *)(*param_array + 8) | array_sum;\n    *(uint *)(*param_array + 0x2c) = uVar3 | *(uint *)(*param_array + 0x2c) & 0xff0fffff;\n    if (array_sum != (PTR_DAT_08002248 & *(uint *)(*param_array + 8))) {\n      param_array[10] = param_array[10] & 0xffffffedU | 0x10;\n      param_array[11] = param_array[11] | 1;\n      return 1;\n    }\n    param_array[11] = 0;\n    param_array[10] = param_array[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  param_array[10] = param_array[10] | 0x10;\n  return 1;\n}\n",
            "called": [
                "FUN_08004974",
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_param_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "initialize_data_0800455a",
                "param_1": "data",
                "param_2": "size",
                "param_3": "value",
                "(char *)((int)param_1 + 0x39)": "(char *)((int)data + 0x39)",
                "(char *)(param_1 + 0xe)": "(char *)(data + 0xe)",
                "param_1[8]": "data[8]",
                "*(short *)(param_1 + 9)": "*(short *)(data + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)data + 0x26)",
                "param_1[0xf]": "data[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(char *)((int)data + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(data + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data + 0xc)"
            },
            "code": "int initialize_data_0800455a(int *data, int size, int value)\n{\n    if (*(char *)((int)data + 0x39) != ' ') {\n        return 2;\n    }\n    if (size == 0) {\n        return 1;\n    }\n    if (value == 0) {\n        return 1;\n    }\n    if (*(char *)(data + 0xe) != '\\x01') {\n        data[8] = size;\n        *(short *)(data + 9) = (short)value;\n        *(short *)((int)data + 0x26) = (short)value;\n        data[0xf] = 0;\n        *(char *)((int)data + 0x39) = '!';\n        *(char *)(data + 0xe) = 0;\n        *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "initialize_data_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_parameters_08001a66",
                "param_1": "ptr_to_param_1",
                "param_2": "new_param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void update_parameters_08001a66(int param_1, int new_param_2, undefined4 param_3, undefined4 param_4)\\n{\\n    if (*(char *)(param_1 + 0x70) != \"\\0\" && *(int *)(param_1 + 0x30) != new_param_2)\\n    {\\n        *(undefined8 *)(param_1 + 0x18) = FUNC_08000190(0, 0, *(undefined4 *)(param_1 + 0x18), *(undefined4 *)(param_1 + 0x1c), param_4);\\n        *(undefined8 *)(param_1 + 0x20) = FUNC_08000190(0, 0, *(undefined4 *)(param_1 + 0x20), *(undefined4 *)(param_1 + 0x24));\\n        *(undefined8 *)(param_1 + 0x28) = FUNC_08000190(0, 0, *(undefined4 *)(param_1 + 0x28), *(undefined4 *)(param_1 + 0x2c));\\n    }\\n    *(int *)(param_1 + 0x30) = new_param_2;\\n    return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_parameters_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "undefined4": "int",
                "PTR_DAT_08003c4c": "pointer",
                "*(undefined4 *)PTR_DAT_08003c4c": "*pointer",
                "return *(undefined4 *)PTR_DAT_08003c4c;": "return value;"
            },
            "code": "int get_value_from_pointer_08003c44() {\n    int* PTR_DAT_08003c4c = (int*)PTR_DAT_08003c4c;\n    int value = *(undefined4 *)PTR_DAT_08003c4c;\n    return *(undefined4 *)PTR_DAT_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08003c70",
                "FUN_08001b48",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_param_value_080028d2",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "*(uint *)(*param_1 + 0x10)": "*ptr",
                "param_1[0x11]": "value",
                "index": "index"
            },
            "code": "int set_param_value_080028d2(int *param_array)\n{\n    int index = 0x11;\n    int value = param_array[index] & 0xFF;\n    uint32_t* ptr = (uint32_t*)(param_array + 0x10);\n    *ptr = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_param_value_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_input_null_08000a18",
                "in_CY": "input_char",
                "FUN_080009a8": "call_some_function"
            },
            "code": "bool is_input_null_08000a18(void)\\n{\\n  char input_char;\\n  call_some_function();\\n  return input_char == \"\\0\";\\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_input_null_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "process_data_08005384",
                "cVar1": "input_char",
                "puVar2": "data_buffer",
                "uVar3": "data_byte",
                "iVar4": "result",
                "uVar5": "data_offset",
                "PTR_DAT_080053c4": "input_data",
                "PTR_DAT_080053c8": "data_lookup_table",
                "PTR_DAT_080053cc": "data_table",
                "PTR_DAT_080053d0": "output_buffer",
                "FUNC_08004f4c": "write_output",
                "FUN_08004c78": "search_data",
                "FUN_08004ca2": "get_data_byte"
            },
            "code": "void process_data_08005384(void)\n{\n  char input_char;\n  undefined *data_buffer;\n  undefined data_byte;\n  int result;\n  undefined4 data_offset;\n  \n  input_char = PTR_DAT_080053c4[1];\n  result = search_data(input_char, PTR_DAT_080053c8);\n  if (result != 0) {\n    data_offset = search_data(input_char, PTR_DAT_080053c8);\n    data_byte = get_data_byte(data_offset, PTR_DAT_080053cc);\n    data_buffer = PTR_DAT_080053d0;\n    PTR_DAT_080053d0[0x59] = data_byte;\n    data_buffer[0x58] = input_char;\n    *(undefined4 *)(data_buffer + 0x48) = 0x2580;\n    *(undefined4 *)(data_buffer + 0x54) = 0;\n    *(undefined4 *)(data_buffer + 0x4c) = 0;\n    *(undefined4 *)(data_buffer + 0x50) = 0;\n    write_output(data_buffer);\n  }\n  return;\n}",
            "called": [
                "FUN_08004f4c",
                "FUN_08004ca2",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_value_at_offset_08005b3c",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "new_value"
            },
            "code": "void set_value_at_offset_08005b3c(int offset, uint value) {\n  undefined new_value;\n  if (value < 0x3c) {\n    new_value = PTR_DAT_08005b50[value];\n  }\n  else {\n    new_value = 0xff;\n  }\n  *(undefined *)(offset + 300) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "third_val",
                "puVar3": "data_ptr",
                "uVar4": "flag",
                "uVar5": "first_val",
                "FUN_08004618": "execute_function_1",
                "FUN_08004198": "execute_function_2",
                "FUN_080045fe": "execute_function_3",
                "do_nothing_08005650": "do_nothing",
                "FUN_0800417c": "execute_function_4",
                "FUN_0800258c": "execute_function_5"
            },
            "code": "void process_data_080046b8(uint **data)\n{\n  uint *data_ptr = *data;\n  uint first_val = *data_ptr;\n  uint third_val = data_ptr[3];\n  if ((((first_val & 0xf) == 0) && ((first_val & 0x20) != 0)) && ((third_val & 0x20) != 0))) {\n    execute_function_1(data);\n    return;\n  }\n  if (((first_val & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((third_val & 0x120) == 0)))) {\n    if (((first_val & 0x80) != 0) && ((third_val & 0x80) != 0))) {\n      execute_function_2(data);\n      return;\n    }\n    if (((first_val & 0x40) != 0) && ((third_val & 0x40) != 0))) {\n      execute_function_3(data);\n    }\n  }\n  else {\n    if (((first_val & 1) != 0) && ((third_val & 0x100) != 0))) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((first_val & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((first_val & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((first_val & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((first_val & 0x20) != 0) && ((third_val & 0x20) != 0))) {\n        execute_function_1(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      execute_function_4(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)PTR_LAB_080047d8_1_080047d4;\n      int result = execute_function_5(data[13]);\n      if (result != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004198",
                "FUN_0800417c",
                "FUN_08004618",
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_value_by_key_08004c8a",
                "param_1": "key",
                "param_2": "data",
                "*param_2": "*data"
            },
            "code": "int find_value_by_key_08004c8a(int key, char *data)\n{\n    while(true)\n    {\n        if (*(int *)(data + 4) == 0)\n        {\n            return -1;\n        }\n        if (*(int *)(data + 4) == key)\n        {\n            break;\n        }\n        data = data + 0xc;\n    }\n    return (int)*data;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004c8a",
                "FUN_08004ca2"
            ],
            "imported": false,
            "current_name": "find_value_by_key_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "check_parameters_and_calculate_08001cd0",
                "param_1": "param_array",
                "param_2": "param_len",
                "iVar1": "start_time",
                "iVar3": "current_time",
                "uVar2": "val2",
                "uVar4": "result",
                "puVar5": "params",
                "uVar6": "val1",
                "local_1c": "local_counter",
                "DAT_08001e30": "flag3",
                "DAT_08001e34": "flag5",
                "DAT_08001e38": "flag7",
                "DAT_08001e3c": "flag9"
            },
            "code": "uint32_t check_parameters_and_calculate_08001cd0(uint32_t **param_array, uint32_t param_len)\n{\n    int start_time = get_current_time();\n    uint32_t *params = *param_array;\n    uint32_t result = 0;\n    uint32_t local_counter = 0;\n\n    uint32_t flag1 = 0x100;\n    uint32_t flag2 = 0x100;\n    uint32_t DAT_08001e30 = 0xf00000;\n    uint32_t flag4 = 0x100;\n    uint32_t DAT_08001e34 = 0x100;\n    uint32_t flag6 = 0xdc000000;\n    uint32_t DAT_08001e38 = 0x29;\n    uint32_t flag8 = 0xee000000;\n    uint32_t DAT_08001e3c = 0xfc;\n    uint32_t flag10 = 0x54;\n\n    if ((params[2] & flag1) == 0) {\n        if (((params[1] & flag2) == 0) && ((params[0xb] & DAT_08001e30) == 0)) {\n            do {\n                if ((**param_array & 2) != 0) goto end_of_function;\n            } while ((param_len == 0xffffffff) || ((param_len != 0 && (get_current_time() - start_time) <= param_len)));\n            param_array[10] = (uint32_t *)((uint32_t)param_array[10] | 4);\n            *(undefined *)(param_array + 9) = 0;\n            result = 3;\n        }\n        else {\n            uint32_t val1 = *(uint32_t *)PTR_DAT_08001e2c;\n            uint32_t val2 = FUN_08003da4(2);\n            uint32_t *params = *param_array;\n            if (((params[4] & flag4) == 0) && ((params[3] & flag4 + flag6) == 0)) {\n                if ((params[4] & DAT_08001e34) == 0) {\n                    if ((params[3] & DAT_08001e38) == 0) {\n                        local_counter = 0x14;\n                    }\n                    else {\n                        local_counter = DAT_08001e38;\n                    }\n                }\n                else {\n                    local_counter = DAT_08001e38;\n                }\n            }\n            else if (((params[4] & DAT_08001e34) == 0) && ((params[3] & DAT_08001e34 + flag8) == 0))\n            {\n                local_counter = flag10;\n            }\n            else if ((DAT_08001e3c & params[4]) == 0) {\n                if ((DAT_08001e3c & params[3]) == 0) {\n                    local_counter = flag10;\n                }\n                else {\n                    local_counter = 0xfc;\n                }\n            }\n            else {\n                local_counter = 0xfc;\n            }\n            local_counter = (val1 / val2) * local_counter;\n            for (; local_counter <= val1 && val1 - local_counter != 0; local_counter = local_counter + 1) {\n                if ((param_len != 0xffffffff) && ((param_len == 0 || (get_current_time() - start_time) > param_len)))) {\n                    param_array[10] = (uint32_t *)((uint32_t)param_array[10] | 4);\n                    *(undefined *)(param_array + 9) = 0;\n                    return 3;\n                }\n            }\n        end_of_function:\n            **param_array = 0xffffffed;\n            param_array[10] = (uint32_t *)((uint32_t)param_array[10] | 0x200);\n            if (((*param_array)[2] & 0xe0000) == 0xe0000) {\n                if (param_array[3] == (uint32_t *)0x0) {\n                    param_array[10] = (uint32_t *)((uint32_t)param_array[10] & 0xfffffeff);\n                    if (((uint32_t)param_array[10] & 0x1000) == 0) {\n                        param_array[10] = (uint32_t *)((uint32_t)param_array[10] | 1);\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                result = 0;\n            }\n        }\n    }\n    else {\n        param_array[10] = (uint32_t *)((uint32_t)param_array[10] | 0x20);\n        *(undefined *)(param_array + 9) = 0;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_parameters_and_calculate_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "check_input_and_return_flag_08004a4c",
                "param_1": "input",
                "local_46": "result",
                "local_44": "length",
                "local_40": "var_2",
                "local_3c": "var_3",
                "local_38": "buffer",
                "local_34": "var_1",
                "local_30": "var_4",
                "local_2c": "var_5",
                "local_28": "var_7",
                "local_24": "var_8",
                "local_20": "N/A",
                "local_1c": "N/A",
                "local_10": "N/A"
            },
            "code": "int check_input_and_return_flag_08004a4c(int input) {\n  int buffer[12];\n  memset(buffer, 0, sizeof(buffer));\n  int result = 0;\n  buffer[0] = check_input(input, &DAT_08004b2c);\n  if (buffer[0] == 0) {\n    result = 0;\n  }\n  else {\n    int var_1 = 0;\n    int var_2 = 0;\n    int var_3 = 0;\n    int var_4 = 0;\n    int var_5 = 0xe0000;\n    int var_6 = 0;\n    int var_7 = 1;\n    int var_8 = 0;\n    *(char*)PTR_DAT_08004b30 = (char)input;\n    if (check_input_with_param(&buffer[0]) == 0) {\n      int length = get_input_length(input);\n      if (length < 0x12) {\n        var_2 = 1;\n        var_3 = 2;\n        if (parse_input(&buffer[0], &length) == 0) {\n          if (check_input_length(&buffer[0]) == 0) {\n            if (check_input_format(&buffer[0]) == 0) {\n              if (skip_until_newline(&buffer[0]) == 0) {\n                uint flags = get_input_flags(&buffer[0]);\n                if ((flags & 0x200) != 0) {\n                  result = get_input_value(&buffer[0]);\n                }\n                else {\n                  result = 0;\n                }\n                if (check_input_ending(&buffer[0]) != 0) {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08001e40",
                "FUN_08001f80",
                "FUN_08001cd0",
                "FUN_0800492c",
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002004",
                "FUN_08002384",
                "FUN_08001e48",
                "FUN_080061e0",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "check_input_and_return_flag_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "copy_second_to_first_08006112",
                "param_1": "dst",
                "param_2": "src",
                "FUN_08006158": "memcpy"
            },
            "code": "void copy_second_to_first_08006112(void* dst, void* src)\n{\n  memcpy(dst, src, sizeof(void*));\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "copy_second_to_first_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "process_input_08004974",
                "param_1": "input",
                "param_2": "param_2",
                "iVar2": "data_ptr",
                "uVar3": "modified_input",
                "uVar4": "mask_value",
                "uVar5": "input_value",
                "local_18": "bit_mask",
                "local_14": "arg2",
                "local_10": "arg3",
                "puVar1": "ptr",
                "PTR_DAT_080049e8": "ptr",
                "DAT_080049ec": "data_ptr",
                "DAT_080049e0": "input_value_1",
                "DAT_080049e4": "input_value_2"
            },
            "code": "void process_input_08004974(uint *input, undefined4 param_2)\n{\n    uint *DAT_080049ec = (uint *)0x080049ec;\n    uint input_value = *input;\n    uint flag_value = 0;\n    uint mask_value = 0;\n    \n    if (input_value == 0x080049e0)\n    {\n        mask_value = *(uint *)(DAT_080049ec + 0x18) | 0x200;\n        *(uint *)(DAT_080049ec + 0x18) = mask_value;\n        flag_value = *(uint *)(DAT_080049ec + 0x18) & 0x200;\n    }\n    else\n    {\n        if (input_value == 0x080049e4)\n        {\n            mask_value = *(uint *)(DAT_080049ec + 0x18) | 0x400;\n            *(uint *)(DAT_080049ec + 0x18) = mask_value;\n            flag_value = *(uint *)(DAT_080049ec + 0x18) & 0x400;\n        }\n    }\n    \n    undefined *PTR_DAT_080049e8 = (undefined *)0x080049e8;\n    uint modified_input = FUN_08004884((uint)((int)(char)*PTR_DAT_080049e8 << 0x18) >> 0x1c, param_2, mask_value, flag_value);\n    uint bit_mask = 1 << ((byte)*PTR_DAT_080049e8 & 0xf) & 0xffff;\n    uint arg2 = 3;\n    uint arg3 = 0;\n    FUN_08002624(modified_input, &bit_mask);\n    return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "process_input_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "validate_permissions_08003520",
                "param_1": "permissions",
                "puVar2": "ptr_permissions",
                "uVar3": "permission_bits",
                "uVar4": "flags",
                "DAT_080035f8": "PERMISSION_FLAG_1",
                "0x100": "FLAG_1",
                "0x10200": "PERMISSION_FLAG_2",
                "0x10400": "PERMISSION_FLAG_3",
                "0x10800": "PERMISSION_FLAG_4",
                "FUN_08002d1c": "execute_function",
                "0xc": "index",
                "FUN_0800316c": "execute_validation",
                "0x10": "flags_index"
            },
            "code": "void validate_permissions_08003520(uint **permissions)\n{\n    uint *ptr_permissions = *permissions;\n    uint permission_bits = ptr_permissions[5];\n    uint flags = ptr_permissions[1];\n\n    if ((permission_bits & DAT_080035f8) && (flags & FLAG_1)) {\n        permissions[16] = (uint *)((uint)permissions[16] | 1);\n        ptr_permissions[5] = 0xfffffeff;\n        **permissions = **permissions | 0x8000;\n    }\n\n    if ((permission_bits & PERMISSION_FLAG_2) && (flags & FLAG_1)) {\n        permissions[16] = (uint *)((uint)permissions[16] | 2);\n        (*permissions)[5] = 0xfffffdff;\n    }\n\n    if ((permission_bits & PERMISSION_FLAG_3) && (flags & FLAG_1)) {\n        char c = *(char *)((int)permissions + 0x3d);\n        if ((*(char *)((int)permissions + 0x3e) == ' ') && (*(short *)((int)permissions + 0x2a) == 0) && (((c == '!' || (c == ')')) || ((c == '(' && (permissions[12] == (uint *)0x21)))))) {\n            execute_function(permissions);\n        }\n        else {\n            permissions[16] = (uint *)((uint)permissions[16] | 4);\n            if (*(char *)((int)permissions + 0x3e) == '\\x10') {\n                **permissions = **permissions | 0x200;\n            }\n            (*permissions)[5] = 0xfffffbff;\n        }\n    }\n\n    if ((permission_bits & PERMISSION_FLAG_4) && (flags & FLAG_1)) {\n        permissions[16] = (uint *)((uint)permissions[16] | 8);\n        (*permissions)[5] = 0xfffff7ff;\n    }\n\n    if (permissions[16] != (uint *)0x0) {\n        execute_validation(permissions);\n    }\n}\n",
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "validate_permissions_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_data_08002ca6",
                "param_1": "data",
                "cVar1": "last_char",
                "puVar2": "ptr"
            },
            "code": "int process_data_08002ca6(int *data)\n{\n  char last_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    undefined *ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) - 1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (last_char == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_param_values_and_call_functions_08005b54",
                "param_1": "param_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_PTR_LAB_080059c8_1_08005ba0",
                "PTR_DAT_08005ba4": "PTR_DAT_08005ba4",
                "FUN_08005b24": "initialize_param_values",
                "FUN_08005b3c": "set_param_array_value",
                "FUN_08004ca2": "get_param_value",
                "PTR_DAT_08005ba8": "PTR_DAT_08005ba8",
                "PTR_DAT_08005bac": "PTR_DAT_08005bac"
            },
            "code": "undefined4 *initialize_param_values_and_call_functions_08005b54(undefined4 *param_array, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined uVar1;\n  param_array[1] = 0;\n  param_array[2] = 1000;\n  *param_array = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (param_array == (undefined4 *)PTR_DAT_08005ba4) {\n    FUN_08005b24(param_array,0,param_3,PTR_DAT_08005ba4,param_4);\n    FUN_08005b3c(param_array,1);\n  }\n  else {\n    uVar1 = FUN_08004ca2(param_2,PTR_DAT_08005ba8);\n    *(undefined *)((int)param_array + 0x12d) = uVar1;\n    uVar1 = FUN_08004ca2(param_2,PTR_DAT_08005bac);\n    *(undefined *)(param_array + 0x4b) = uVar1;\n  }\n  FUN_08005a44(param_array);\n  return param_array;\n}",
            "called": [
                "FUN_08005b3c",
                "FUN_08005a44",
                "FUN_08005b24",
                "FUN_08004ca2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_param_values_and_call_functions_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "byte_pointer",
                "sVar2": "remaining_data_length",
                "puVar3": "char_pointer",
                "string_value": "string_value",
                "data_type": "data_type",
                "data_offset": "data_offset",
                "data_pointer": "data_pointer"
            },
            "code": "int process_data_08004618(int *data) {\n  char *string_value = (char *)((int)data + 0x3a);\n  if (*string_value != '\"') {\n    return 2;\n  }\n  int data_type = data[2];\n  int data_offset = data[4];\n  int *data_pointer = (int *)*data;\n  if (data_type == 0x1000) {\n    if (data_offset == 0) {\n      *(unsigned short *)(data[10]) = (unsigned short)((unsigned int)(*(int *)(data_pointer + 1) << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(unsigned short *)(data[10]) = (unsigned short)*(int *)(data_pointer + 1) & 0xff;\n      data[10]++;\n    }\n  }\n  else if (data_offset == 0) {\n    char *char_pointer = (char *)(data[10]);\n    *char_pointer = *(int *)(data_pointer + 1);\n    data[10]++;\n  }\n  else {\n    unsigned char *byte_pointer = (unsigned char *)(data[10]);\n    *byte_pointer = *(int *)(data_pointer + 1) & 0x7f;\n    data[10]++;\n  }\n  short remaining_data_length = *(short *)((int)data + 0x2e) - 1;\n  *(short *)((int)data + 0x2e) = remaining_data_length;\n  if (remaining_data_length != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data + 0xc) &= 0xffffffdf;\n  *(unsigned int *)(*data + 0xc) &= 0xfffffeff;\n  *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n  *string_value = 0x20;\n  call_cleanup_function();\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_data_buffer_08006c40",
                "param_1": "data_buffer",
                "param_2": "data_buffer_param_2",
                "param_3": "data_buffer_param_3",
                "uVar1": "unused_variable",
                "FUN_080061e0": "initialize_data_buffer_helper"
            },
            "code": "void initialize_data_buffer_08006c40(undefined4 *data_buffer, undefined2 data_buffer_param_2, undefined2 data_buffer_param_3) {\n    *data_buffer = 0;\n    data_buffer[1] = 0;\n    data_buffer[2] = 0;\n    *(undefined2 *)(data_buffer + 3) = data_buffer_param_2;\n    data_buffer[0x19] = 0;\n    *(undefined2 *)((int)data_buffer + 0xe) = data_buffer_param_3;\n    data_buffer[4] = 0;\n    data_buffer[5] = 0;\n    data_buffer[6] = 0;\n    initialize_data_buffer_08006c40_helper(data_buffer + 0x17, 0, 8);\n    data_buffer[8] = data_buffer;\n    data_buffer[9] = DAT_08006c78;\n    data_buffer[10] = PTR_FUN_08006f5a_1_08006c7c;\n    data_buffer[0xb] = PTR_FUN_08006f92_1_08006c80;\n    data_buffer[0xc] = PTR_LAB_08006fb6_1_08006c84;\n    return;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_data_buffer_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "write_data_to_buffer_0800157c",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "c1",
                "param_4": "c2",
                "FUN_080057b4": "write_data_to_device",
                "FUN_08005848": "set_flag"
            },
            "code": "char* write_data_to_buffer_0800157c(char* buffer, int data, char c1, char c2) {\n    *buffer = (char)data;\n    buffer[1] = c1;\n    buffer[2] = c2;\n    write_data_to_device(data, 0);\n    write_data_to_device(buffer[1], 1);\n    write_data_to_device(buffer[2], 1);\n    set_flag(buffer[1], 1);\n    set_flag(buffer[2], 0);\n    return buffer;\n}",
            "called": [
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "check_valid_input_080045a2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "input_value",
                "*(char *)((int)param_1 + 0x3a)": "*(char *)((int)input_array + 0x3a)",
                "*(char *)(param_1 + 0xe)": "*(char *)(input_array + 14)",
                "*(short *)(param_1 + 0xb)": "*(short *)(input_array + 11)",
                "*(short *)((int)param_1 + 0x2e)": "*(short *)((int)input_array + 0x2e)",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[14]",
                "*(undefined *)((int)param_1 + 0x3a)": "*(char *)((int)input_array + 0x3a)",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(input_array + 14)",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*input_array + 0xc)",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(*input_array + 0x14)"
            },
            "code": "int check_valid_input_080045a2(int *input_array, int array_size, int input_value) {\n  if (input_array[10] != ' ') {\n    return 2;\n  }\n  if (array_size == 0) {\n    return 1;\n  }\n  if (input_value == 0) {\n    return 1;\n  }\n  if (input_array[14] != 1) {\n    input_array[10] = array_size;\n    input_array[11] = (short)input_value;\n    input_array[14] = 0;\n    input_array[15] = 0;\n    input_array[16] = 0;\n    input_array[17] = 0;\n    input_array[18] = 0;\n    input_array[19] = 0;\n    *(char *)((int)input_array + 0x3a) = '\"';\n    *(char *)(input_array + 14) = 0;\n    *(unsigned int *)(*input_array + 0xc) |= 0x100;\n    *(unsigned int *)(*input_array + 0x14) |= 1;\n    *(unsigned int *)(*input_array + 0xc) |= 0x20;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "check_valid_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_program_08001c32",
                "FUN_08004c52": "call_startup_routine"
            },
            "code": "void initialize_program_08001c32(void)\n{\n  call_startup_routine();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "initialize_program_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_bytes_at_offsets_080047e8",
                "param_1": "base_address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_at_offsets_080047e8(int base_address)\n{\n    byte byte1 = *(byte *)(base_address + 0x3a);\n    byte byte2 = *(byte *)(base_address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "imported": false,
            "current_name": "combine_bytes_at_offsets_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "count",
                "param_4": "data",
                "iVar3": "char_index",
                "puVar2": "char_data",
                "iVar1": "result",
                "PTR_DAT_08005838": "char_data_array",
                "PTR_DAT_0800583c": "char_data_array_2",
                "PTR_DAT_08005840": "char_data_array_3",
                "PTR_DAT_08005844": "char_data_array_4",
                "FUN_080047f4": "process_char",
                "FUN_08004ce2": "cleanup_char",
                "FUN_08004b3c": "cleanup_char",
                "FUN_08004828": "process_char",
                "FUN_08004bb0": "set_char_mode",
                "FUN_0800480a": "process_char"
            },
            "code": "void process_data_080057b4(uint index, undefined4 mode, undefined4 count, undefined *data){\n  int char_index;\n  undefined *char_data;\n  int result;\n  if (index < 0x3c) {\n    char_index = (int)(char)PTR_DAT_08005838[index];\n    char_data = PTR_DAT_08005838;\n  }\n  else {\n    char_index = -1;\n    char_data = data;\n  }\n  if (char_index != -1) {\n    result = process_char(char_index, PTR_DAT_0800583c, count, char_data, data);\n    if (result != 0) {\n      result = process_char(char_index, PTR_DAT_08005840);\n      if (result != 0) {\n        cleanup_char(char_index);\n      }\n      process_char(char_index, PTR_DAT_0800583c);\n    }\n    switch(mode) {\n    case 0:\n      set_char_mode(char_index, 0);\n      break;\n    case 1:\n      set_char_mode(char_index, 1, 0);\n      break;\n    case 2:\n      set_char_mode(char_index, 0, 1);\n      break;\n    case 3:\n      set_char_mode(char_index, 0, 2);\n    }\n    process_char(char_index, PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_08004b3c",
                "FUN_080047f4",
                "FUN_08004bb0",
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004ce2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "execute_function_08001b18",
                "param_1": "argument",
                "FUN_08001ab0": "setup_environment"
            },
            "code": "undefined4 execute_function_08001b18(undefined4 argument)\n{\n  setup_environment();\n  return argument;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "execute_function_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "return_one_thunk_08005750"
            },
            "code": "int return_one_thunk_08005750() {\n  int result = 1;\n  return result;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "return_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_value",
                "bVar2": "is_negative",
                "bVar3": "is_greater_than",
                "uVar2": "is_same",
                "uVar3": "is_true"
            },
            "code": "uint check_parameters_0800092c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_negative;\n  bool is_same;\n  \n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_negative = (first_param | second_param << 1) == 0;\n  if (is_negative) {\n    is_negative = (third_param | fourth_param << 1) == 0;\n  }\n  if (!is_negative) {\n    is_same = (second_param == fourth_param);\n    if (is_same) {\n      is_same = (first_param == third_param);\n    }\n    if (!is_same) {\n      uint xor_value = second_param ^ fourth_param;\n      is_same = xor_value == 0;\n      if (-1 < (int)xor_value) {\n        is_same = second_param == fourth_param;\n      }\n      bool is_greater_than = -1 < (int)xor_value && fourth_param <= second_param;\n      if (is_same) {\n        is_greater_than = third_param <= first_param;\n      }\n      uint is_true = (int)fourth_param >> 0x1f;\n      if (!is_greater_than) {\n        is_true = ~is_true;\n      }\n      return is_true | 1;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_parameters_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "process_data_08005d8a",
                "param_1": "function_ptr",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "FUN_08005ce8": "call_function_with_3_args"
            },
            "code": "void process_data_08005d8a(undefined4 *function_ptr, uint32_t data1, uint32_t data2, undefined4 data3) {\n  if (data2 != 0) {\n    call_function_with_3_args(function_ptr, data1, data2 & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr, data1 & 0xff, 0, *(code **)*function_ptr, data3);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "process_data_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "update_data_access_08002560",
                "param_1": "access_type",
                "DAT_0800257c": "data_access_flags"
            },
            "code": "void update_data_access_08002560(int access_type) {\n  if (access_type != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_access_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "string",
                "param_2": "target_character",
                "param_3": "string_length",
                "pcVar1": "current_character",
                "pcVar2": "previous_character"
            },
            "code": "char* find_character_in_string_08006e90(char* string, char target_character, int string_length) {\n  char* current_character = string;\n  do {\n    if (current_character == string + string_length) {\n      return (char*) 0x0;\n    }\n    current_character++;\n  } while (*current_character != target_character);\n  return current_character;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "initialize_param_08006920",
                "param_1": "output_param",
                "param_2": "input_param",
                "puVar1": "data_pointer",
                "iVar2": "function_output"
            },
            "code": "void initialize_param_08006920(int *output_param, undefined4 input_param)\n{\n  undefined *data_pointer;\n  int function_output;\n  data_pointer = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  function_output = calculate_value(input_param);\n  if ((function_output == -1) && (*(int *)data_pointer != 0)) {\n    *output_param = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "initialize_param_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "condition_1",
                "mask_1": "mask_1",
                "mask_2": "mask_2",
                "mask_3": "mask_3",
                "mask_4": "mask_4"
            },
            "code": "ulonglong calculate_result_080008ba(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool condition_1;\n  bool condition_2;\n  uint mask_1 = 0x80000000;\n  uint mask_2 = 0x100000;\n  uint mask_3 = 0x7ff00000;\n  uint mask_4 = 0x7ff8000000000000;\n  \n  temp_1 = input_4 >> 0x14;\n  temp_2 = input_2;\n  \n  if (input_3 != input_4 || temp_1 != input_4) {\n    if (input_3 == input_4) {\n      condition_1 = ((input_1 | input_2 << 0xc) == 0);\n      if (condition_1 && temp_1 != input_4) {\n        return (ulonglong)((input_2 ^ input_4) & mask_1 | mask_3) << 0x20;\n      }\n    }\n    else if (temp_1 == input_4) {\n      condition_2 = ((input_3 | input_4 << 0xc) == 0);\n      if (condition_2) {\n        return (ulonglong)((input_2 ^ input_4) & mask_1) << 0x20;\n      }\n    }\n    else {\n      condition_1 = ((input_1 | input_2 << 1) == 0);\n      condition_2 = ((input_3 | input_4 << 1) == 0);\n      if (!condition_1 && !condition_2) {\n        if (input_3 == 0) {\n          temp_2 = input_2 & mask_1;\n          do {\n            temp_3 = input_1 & mask_1;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(temp_3 != 0);\n          } while ((input_2 & mask_2) == 0);\n          input_2 = input_2 | temp_2;\n          if (temp_1 != 0) {\n            return ((ulonglong)input_2 << 0x20) | input_1;\n          }\n        }\n        do {\n          temp_4 = input_3 & mask_1;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp_4 != 0);\n        } while ((input_4 & mask_2) == 0);\n        return ((ulonglong)input_2 << 0x20) | input_1;\n      }\n      if (condition_1) {\n        if ((input_3 | input_4 << 1) == 0) {\n          return (ulonglong)((input_2 ^ input_4) & mask_1) << 0x20;\n        }\n      }\n      else if ((input_1 | input_2 << 1) == 0) {\n        if ((input_3 | input_4 << 1) == 0) {\n          return (ulonglong)((input_2 ^ input_4) & mask_1 | mask_3) << 0x20;\n        }\n      }\n    }\n  }\n  return ((ulonglong)temp_2 << 0x20) | input_1 | mask_4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "process_input_08002d1c",
                "param_1": "input_ptr",
                "param_1[0xb]": "eleven",
                "param_1[0xc]": "PTR_0x0",
                "*(char *)((int)param_1 + 0x3d)": "char_ptr",
                "DAT_08002dac": "PTR_DAT_08002dac",
                "(*param_1)[1]": "input_ptr[1]",
                "(*param_1)[5]": "input_ptr[5]",
                "**param_1": "**input_ptr"
            },
            "code": "int process_input_08002d1c(uint **input_ptr){\n    uint *eleven = input_ptr[0xb];\n    char *char_ptr = (char *)((int)input_ptr + 0x3d);\n    if ((eleven == (uint *)0x4 || eleven == (uint *)0x8) && (*char_ptr == '(')){\n        eleven = DAT_08002dac;\n        (*input_ptr)[1] &= 0xfffff8ff;\n        (*input_ptr)[5] = 0xfffffbff;\n        **input_ptr &= 0xfffffbff;\n        input_ptr[0xc] = PTR_0x0;\n        *char_ptr = ' ';\n        *(char_ptr + 1) = 0;\n        FUN_08004ec4();\n    }\n    else if (*char_ptr == '!'){\n        eleven = DAT_08002dac;\n        input_ptr[0xc] = PTR_0x21;\n        *char_ptr = ' ';\n        *(char_ptr + 1) = 0;\n        (*input_ptr)[1] &= 0xfffff8ff;\n        (*input_ptr)[5] = 0xfffffbff;\n        **input_ptr &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else{\n        (*input_ptr)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "process_input_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "returnMaxValue_08005714"
            },
            "code": "uint32_t returnMaxValue_08005714(void)\n{\n    return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "returnMaxValue_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_stuff_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_variable_1",
                "uStack_18": "stack_variable_2",
                "uStack_14": "stack_variable_3"
            },
            "code": "uint calculate_stuff_08003da4(int input)\n{\n  uint result;\n  undefined2 local_variable;\n  byte stack_array[4];\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n  stack_variable_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  stack_variable_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  stack_variable_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_variable = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = calculate_division();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_variable - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_stuff_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_user_info_08005a44",
                "param_1": "user_info_ptr",
                "*(int *)(param_1 + 0x130)": "*user_id_ptr",
                "*(undefined2 *)(param_1 + 0x134)": "*user_info_flags_ptr",
                "*(undefined2 *)(param_1 + 0x136)": "*user_info_sub_flags_ptr",
                "*(int *)(param_1 + 0x138)": "*user_name_ptr",
                "*(undefined2 *)(param_1 + 0x13c)": "*user_name_length_ptr",
                "*(undefined2 *)(param_1 + 0x13e)": "*user_name_flags_ptr"
            },
            "code": "void initialize_user_info_08005a44(int user_info_ptr)\n{\n    int *user_id_ptr = (int *)(user_info_ptr + 0x130);\n    *user_id_ptr = user_info_ptr + 0x11;\n    \n    short *user_info_flags_ptr = (short *)(user_info_ptr + 0x134);\n    *user_info_flags_ptr = 0;\n    \n    short *user_info_sub_flags_ptr = (short *)(user_info_ptr + 0x136);\n    *user_info_sub_flags_ptr = 0;\n    \n    int *user_name_ptr = (int *)(user_info_ptr + 0x138);\n    *user_name_ptr = user_info_ptr + 0x51;\n    \n    short *user_name_length_ptr = (short *)(user_info_ptr + 0x13c);\n    *user_name_length_ptr = 0;\n    \n    short *user_name_flags_ptr = (short *)(user_info_ptr + 0x13e);\n    *user_name_flags_ptr = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_user_info_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_input_reached_080009dc",
                "in_CY": "current_char",
                "FUN_080009b8": "advance_to_next_char"
            },
            "code": "bool is_end_of_input_reached_080009dc(void)\n{\n  char current_char;\n  advance_to_next_char();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080019f6",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_end_of_input_reached_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "clear_flags_0800417c",
                "param_1": "ptr_param1",
                "*(uint *)(*param_1 + 0xc)": "*ptr_flag1",
                "*(uint *)(*param_1 + 0x14)": "*ptr_flag2",
                "*(undefined *)((int)param_1 + 0x3a)": "*ptr_char"
            },
            "code": "void clear_flags_0800417c(int *ptr_param1) {\n  uint *ptr_flag1 = (uint *)(*ptr_param1 + 0xc);\n  uint *ptr_flag2 = (uint *)(*ptr_param1 + 0x14);\n  *ptr_flag1 &= 0xfffffedf;\n  *ptr_flag2 &= 0xfffffffe;\n  char *ptr_char = (char *)(ptr_param1 + 0x3a);\n  *ptr_char = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "clear_flags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "execute_startup_routine_08004b94",
                "FUN_08001cc4": "initialize_system"
            },
            "code": "void execute_startup_routine_08004b94(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "execute_startup_routine_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "execute_application_080058e0",
                "FUN_08004b94": "initialize_application"
            },
            "code": "void execute_application_080058e0(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080016b4"
            ],
            "imported": false,
            "current_name": "execute_application_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "calculate_and_update_08001918",
                "param_1": "input_data",
                "param_2": "data_size",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "data_ptr": "data_pointer",
                "input_data_ptr": "input_data_pointer"
            },
            "code": "void calculate_and_update_08001918(int input_data, int data_size, undefined4 arg_3, undefined4 arg_4)\n{\n  undefined4 temp_var1;\n  undefined8 temp_var2;\n  undefined8 temp_var3;\n  \n  if (data_size > 0) {\n    undefined8 data_ptr = FUN_0800042c(data_size);\n    undefined8 input_data_ptr = FUN_0800040c(*(undefined4 *)(input_data + 0x58));\n    temp_var2 = FUNC_0800074c((int)data_ptr,(int)((ulonglong)data_ptr >> 0x20),(int)input_data_ptr,\n                         (int)((ulonglong)input_data_ptr >> 0x20),arg_4);\n    temp_var1 = (undefined4)((ulonglong)temp_var2 >> 0x20);\n    input_data_ptr = FUNC_080004f8((int)data_ptr,temp_var1,*(undefined4 *)(input_data + 0x20),\n                         *(undefined4 *)(input_data + 0x24));\n    *(undefined8 *)(input_data + 0x20) = input_data_ptr;\n    temp_var2 = FUNC_0800074c(*(undefined4 *)(input_data + 0x28),*(undefined4 *)(input_data + 0x2c),(int)data_ptr,\n                         temp_var1);\n    *(undefined8 *)(input_data + 0x28) = temp_var2;\n    *(int *)(input_data + 0x58) = data_size;\n  }\n  return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800042c",
                "FUN_0800074c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_and_update_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "verify_assertion_0800611c",
                "param_1": "assertion_value",
                "param_2": "line_number",
                "param_3": "file_name",
                "param_4": "error_code",
                "uVar1": "current_assertion",
                "puVar2": "assertion_failure_message",
                "uVar3": "current_time",
                "uVar4": "current_error_code"
            },
            "code": "void verify_assertion_0800611c(undefined4 assertion_value, undefined4 line_number, undefined *file_name, undefined4 error_code)\n{\n  undefined4 current_assertion = *(undefined4 *)(*(int *)assertion_pointer + 0xc);\n  undefined *assertion_failure_message = assertion_failure_message_pointer;\n  undefined4 current_error_code = error_code;\n  if (file_name == (undefined *)0x0) goto LAB_08006140;\n  do {\n    report_assertion_failure(current_assertion, assertion_failure_message, error_code, assertion_value, line_number, file_name, current_error_code);\n    undefined8 current_time = get_current_time();\n    line_number = (undefined4)((ulonglong)current_time >> 0x20);\n    current_assertion = (undefined4)current_time;\nLAB_08006140:\n    file_name = default_file_name;\n    assertion_failure_message = default_failure_message;\n  } while( true );\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "verify_assertion_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_at_index_080047f4",
                "param_1": "number",
                "param_2": "index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint get_bit_at_index_080047f4(uint number, int index) {\n    uint mask = 1 << index;\n    uint masked_number = number & mask;\n    return masked_number >> index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "check_conditions_080009f0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_080009b8": "set_flags"
            },
            "code": "bool check_conditions_080009f0(void)\n{\n  bool zero_flag;\n  bool carry_flag;\n  \n  set_flags();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "check_conditions_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "set_param_and_return_one_0800134e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "unused_param3",
                "param_4": "param4",
                "FUN_08001310": "set_param",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int set_param_and_return_one_0800134e(int param1, int param2, int param4)\n{\n    set_param(param1, param2, 1, param4, param4);\n    return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_param_and_return_one_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_flags_08002c10",
                "param_1": "pointer_to_pointer",
                "puVar1": "pointer"
            },
            "code": "int set_flags_08002c10(uint **pointer_to_pointer) {\n  uint *pointer = *pointer_to_pointer;\n  if (*(char *)((int)pointer_to_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(char *)((int)pointer_to_pointer + 0x3d) = '(';\n  if ((*pointer & 1) == 0) {\n    *pointer |= 1;\n  }\n  **pointer_to_pointer |= 0x400;\n  (*pointer_to_pointer)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_flags_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "num_iterations",
                "piVar3": "param_ptr",
                "uVar4": "current_iteration_size",
                "uVar5": "status_flags",
                "iVar6": "temp",
                "unaff_r4": "flags",
                "unaff_r5": "function_pointer",
                "pcVar7": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "is_negative_iteration_size",
                "is_negative_data_value": "is_negative_data_value"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int *params) {\n    uint32_t result = 0;\n    int *param_ptr;\n    uint32_t num_iterations;\n    uint32_t current_iteration_size;\n    uint32_t current_iteration_result;\n    uint32_t flags;\n    code *function_pointer;\n    uint32_t original_data_value;\n    uint16_t status_flags;\n    uint16_t iteration_size;\n    uint32_t temp;\n    bool is_negative_iteration_size;\n    bool is_negative_data_value;\n    \n    if (params[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            initialize_data();\n        }\n        if (params == (int *)PTR_DAT_08006c28) {\n            param_ptr = (int *)data[1];\n        }\n        else if (params == (int *)PTR_DAT_08006c2c) {\n            param_ptr = (int *)data[2];\n        }\n        else if (params == (int *)PTR_DAT_08006c30) {\n            param_ptr = (int *)data[3];\n        }\n        if (*(uint16_t *)(param_ptr + 3) != 0) {\n            iteration_size = *(uint16_t *)(param_ptr + 3);\n            num_iterations = (uint32_t)iteration_size;\n            if ((int)(num_iterations << 0x1c) < 0) {\n                if (params[4] != 0) {\n                    current_iteration_size = num_iterations << 0x1e;\n                    is_negative_iteration_size = (current_iteration_size == 0);\n                    if (is_negative_iteration_size) {\n                        current_iteration_size = 0;\n                    }\n                    current_iteration_result = *param_ptr;\n                    if (!is_negative_iteration_size) {\n                        current_iteration_size = param_ptr[5];\n                    }\n                    *param_ptr = params[4];\n                    param_ptr[2] = current_iteration_size;\n                    for (temp = current_iteration_result - params[4]; temp > 0; temp -= current_iteration_size) {\n                        current_iteration_result = (*(code *)param_ptr[10])(data, param_ptr[8], params[4], temp, unaff_r4, unaff_r5);\n                        if (current_iteration_result < 1) {\n                            status_flags = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_08006bc6;\n                        }\n                        params[4] += current_iteration_result;\n                    }\n                }\n            }\n            else {\n                if (((params[1] > 0) || (params[0x10] > 0)) && ((function_pointer = (code *)param_ptr[0xb]) != NULL)) {\n                    original_data_value = *data;\n                    *data = 0;\n                    if ((iteration_size & 0x1000) == 0) {\n                        current_iteration_result = (*function_pointer)(data, param_ptr[8], iteration_size & 0x1000, 1);\n                        if ((current_iteration_result == -1) && ((temp = *data) != 0)) {\n                            if ((temp != 0x1d) && (temp != 0x16)) {\n                                status_flags = *(uint16_t *)(param_ptr + 3);\n                                status_flags |= 0x40;\n                                goto LAB_08006bd0;\n                            }\n                            *data = original_data_value;\n                            goto LAB_08006aea;\n                        }\n                    }\n                    else {\n                        current_iteration_result = params[0x15];\n                    }\n                    if (((int)((uint)iteration_size << 0x1d) < 0) && ((current_iteration_result = current_iteration_result - params[1]), (params[0xd] != 0))) {\n                        current_iteration_result = current_iteration_result - params[0x10];\n                    }\n                    current_iteration_result = (*(code *)param_ptr[0xb])(data, param_ptr[8], current_iteration_result, 0);\n                    status_flags = *(uint16_t *)(param_ptr + 3);\n                    if ((current_iteration_result == -1) && ((temp = *data) > 0x1d || (-1 < (int)((DAT_08006bdc >> (*data & 0xff)) << 0x1f))))) {\n                        goto LAB_08006bc6;\n                    }\n                    params[1] = 0;\n                    params[4] = params[4];\n                    if (((int)((uint)status_flags << 0x13) < 0) && ((current_iteration_result != -1) || (*data == 0))) {\n                        params[0x15] = current_iteration_result;\n                    }\n                    if ((param_ptr[0xd] != NULL) && (param_ptr[0xd] != param_ptr + 0x11)) {\n                        free_memory(data);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "process_data_080012e8",
                "param_1": "data_ptr",
                "param_2": "bit_mask",
                "uVar1": "bit_index",
                "FUN_08005848": "apply_bit_mask",
                "FUN_080012a2": "finalize_data_processing"
            },
            "code": "void process_data_080012e8(int data_ptr,int bit_mask)\n{\n  uint8_t bit_index;\n  for (bit_index = 0; bit_index < 8; bit_index++) {\n    apply_bit_mask(*(uint8_t *)(data_ptr + bit_index + 0xb), bit_mask >> (bit_index & 0xff) & 1);\n  }\n  finalize_data_processing(data_ptr);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "process_data_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "data_length",
                "puVar2": "data_end",
                "iVar1": "processed_data",
                "iVar3": "index"
            },
            "code": "int process_data_08006370(undefined4 arg1, undefined4 arg2, undefined *data, int data_length) {\n  int result = 0;\n  undefined *data_end = data + data_length;\n  int index = 0;\n  do {\n    if (data == data_end) {\n      return 0;\n    }\n    int processed_data = process_byte(arg1, *data, arg2, data_length, index);\n    data_length = processed_data + 1;\n    data = data + 1;\n  } while (data_length != 0);\n  return processed_data;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "bit_position",
                "DAT_08002510": "array_start_address"
            },
            "code": "void set_bit_in_array_080024f8(uint bit_position) {\n  if (bit_position >= 0) {\n    uint array_index = bit_position >> 5;\n    uint bit_offset = bit_position & 0x1f;\n    *(int *)(DAT_08002510 + array_index * 4) = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_parameters_08001ab0",
                "param_1": "base_address",
                "param_2": "parameter1",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6",
                "param_7": "parameter7",
                "param_8": "parameter8",
                "param_9": "parameter9",
                "param_10": "parameter10",
                "param_11": "parameter11",
                "iVar1": "result",
                "extraout_r1": "result2",
                "PTR_DAT_08001b10": "ptr_data1",
                "PTR_DAT_08001b14": "ptr_data2",
                "FUN_08001960": "initialize",
                "FUN_08001a66": "set_parameter",
                "FUN_08001814": "set_other_parameters",
                "FUN_080058e0": "get_result"
            },
            "code": "int update_parameters_08001ab0(int base_address, int parameter1, int parameter2, int parameter3, int parameter4, int parameter5, int parameter6, int parameter7, int parameter8, int parameter9, int parameter10, int parameter11)\n{\n  int result;\n  *(int *)(base_address + 0x3c) = parameter3;\n  *(int *)(base_address + 0x38) = parameter2;\n  *(int *)(base_address + 0x40) = parameter4;\n  *(char *)(base_address + 0x70) = 0;\n  initialize(base_address, parameter2, 0, 0, PTR_DAT_08001b10, PTR_DAT_08001b14);\n  *(int *)(base_address + 0x58) = 100;\n  set_parameter(base_address, parameter11);\n  set_other_parameters(base_address, result, parameter5, parameter6, parameter7, parameter8, parameter9, parameter10);\n  result = get_result();\n  *(int *)(base_address + 0x44) = result - *(int *)(base_address + 0x58);\n  return base_address;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_parameters_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "decode_data_08006ac0",
                "puVar1": "data_pointer",
                "iVar2": "data_length",
                "piVar3": "data_info",
                "piVar4": "data_info_2",
                "uVar5": "data_info_3",
                "uVar6": "data_info_4",
                "iVar7": "data_info_5",
                "pcVar8": "function_pointer",
                "iVar9": "data_info_6",
                "uVar10": "data_info_7",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_1",
                "bVar11": "is_data_info_8_nonzero",
                "uVar12": "data_info_9"
            },
            "code": "void decode_data_08006ac0()\n{\n  uint *data_pointer;\n  int data_length;\n  int *data_info;\n  int *data_info_2;\n  uint data_info_3;\n  ushort data_info_4;\n  int data_info_5;\n  code *function_pointer;\n  int data_info_6;\n  uint data_info_7;\n  code *jumptable_1;\n  bool is_data_info_8_nonzero;\n  undefined8 data_info_9;\n  \n  initiate_decoder(6);\n  jumptable_1 = (code *)0x8006acf;\n  data_info_9 = get_data(1);\n  data_info = (int *)((ulonglong)data_info_9 >> 0x20);\n  data_pointer = (uint *)data_info_9;\n  data_info_4 = *(ushort *)(data_info + 3);\n  data_info_3 = (uint)data_info_4;\n  if ((int)(data_info_3 << 0x1c) < 0) {\n    data_length = data_info[4];\n    if (data_length != 0) {\n      data_info_6 = data_info_3 << 0x1e;\n      is_data_info_8_nonzero = data_info_6 != 0;\n      if (is_data_info_8_nonzero) {\n        data_info_6 = 0;\n      }\n      data_info_5 = *data_info;\n      if (!is_data_info_8_nonzero) {\n        data_info_6 = data_info[5];\n      }\n      *data_info = data_length;\n      data_info[2] = data_info_6;\n      for (data_info_5 = data_info_5 - data_length; 0 < data_info_5; data_info_5 = data_info_5 - data_info_6) {\n        data_info_6 = (*(code *)data_info[10])(data_pointer,data_info[8],data_length,data_info_5);\n        if (data_info_6 < 1) {\n          data_info_4 = *(ushort *)(data_info + 3);\n          goto LAB_08006bc6;\n        }\n        data_length = data_length + data_info_6;\n      }\n    }\n  }\n  else if (((0 < data_info[1]) || (0 < data_info[0x10])) && (function_pointer = (code *)data_info[0xb], function_pointer != (code *)0x0)) {\n    data_info_7 = *data_pointer;\n    *data_pointer = 0;\n    if ((data_info_4 & 0x1000) == 0) {\n      data_length = (*function_pointer)(data_pointer,data_info[8],data_info_3 & 0x1000,1);\n      if ((data_length == -1) && (data_info_3 = *data_pointer, data_info_3 != 0)) {\n        if ((data_info_3 != 0x1d) && (data_info_3 != 0x16)) {\n          *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x40;\n          (*jumptable_1)();\n          return;\n        }\n        *data_pointer = data_info_7;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      data_length = data_info[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_info + 3) << 0x1d) < 0) && (data_length = data_length - data_info[1], data_info[0xd] != 0)) {\n      data_length = data_length - data_info[0x10];\n    }\n    data_length = (*(code *)data_info[0xb])(data_pointer,data_info[8],data_length,0);\n    data_info_4 = *(ushort *)(data_info + 3);\n    if ((data_length == -1) && ((0x1d < *data_pointer || (-1 < (int)((DAT_08006bdc >> (*data_pointer & 0xff)) << 0x1f)))) {\n      *(ushort *)(data_info + 3) = data_info_4 | 0x40;\n      (*jumptable_1)(0xffffffff);\n      return;\n    }\n    data_info[1] = 0;\n    *data_info = data_info[4];\n    if (((int)((uint)data_info_4 << 0x13) < 0) && ((data_length != -1 || (*data_pointer == 0)))) {\n      data_info[0x15] = data_length;\n    }\n    data_info_2 = (int *)data_info[0xd];\n    *data_pointer = data_info_7;\n    if (data_info_2 != (int *)0x0) {\n      if (data_info_2 != data_info + 0x11) {\n        free_data(data_pointer);\n      }\n      data_info[0xd] = 0;\n      (*jumptable_1)();\n      return;\n    }\n  }\nLAB_08006aea:\n  (*jumptable_1)(0);\n  return;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "decode_data_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "decode_packet_08004198",
                "param_1": "packet_data",
                "pbVar2": "payload_byte_ptr",
                "sVar1": "remaining_packets",
                "first_char": "packet_type_indicator",
                "packet_type": "packet_type",
                "packet_header": "packet_header",
                "payload_length": "payload_length"
            },
            "code": "int decode_packet_08004198(int *packet_data)\n{\n    char first_char = *(char *)((int)packet_data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n\n    int packet_type = packet_data[2];\n    int *packet_header = (int *)*packet_data;\n\n    if (packet_type == 0x1000) {\n        uint16_t payload_length = *(uint16_t *)packet_data[8] & 0x1ff;\n        if (packet_data[4] == 0) {\n            packet_data[8] = packet_data[8] + 2;\n        }\n        else {\n            packet_data[8] = packet_data[8] + 1;\n        }\n\n        *(uint *)(packet_header + 1) = payload_length;\n    }\n    else {\n        uint8_t payload_byte = *(uint8_t *)packet_data[8];\n        packet_data[8] = packet_data[8] + 1;\n\n        *(uint *)(packet_header + 1) = payload_byte;\n    }\n\n    short remaining_packets = *(short *)((int)packet_data + 0x26) - 1;\n    *(short *)((int)packet_data + 0x26) = remaining_packets;\n\n    if (remaining_packets == 0) {\n        *(uint *)(packet_header + 3) &= 0xffffff7f;\n        *(uint *)(packet_header + 3) |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "decode_packet_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_and_set_param_08001c3c",
                "param_1": "param_value",
                "iVar1": "time_check",
                "PTR_DAT_08001c80": "time_data_pointer_1",
                "byte": "time_divisor_byte",
                "PTR_DAT_08001c7c": "time_data_pointer_2",
                "FUN_08002514": "check_time_divisor",
                "0xf": "max_param_value",
                "FUN_08002494": "set_param_value",
                "PTR_DAT_08001c84": "param_data_pointer"
            },
            "code": "int check_and_set_param_08001c3c(uint param_value) {\n  uint time_divisor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n  int time_check = FUN_08002514(time_divisor);\n  if (time_check != 0) {\n    return 1;\n  }\n  if (param_value > 0xf) {\n    return 1;\n  }\n  FUN_08002494(0xffffffff, param_value, 0);\n  *(uint *)PTR_DAT_08001c84 = param_value;\n  return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_and_set_param_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n  int is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  int is_input2_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n\n  if (is_input1_valid && is_input2_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "extract_and_print_character_08001366",
                "param_1": "address",
                "param_2": "base_char",
                "param_3": "length",
                "param_4": "param_4",
                "cVar1": "current_char",
                "FUN_08001310": "print_character"
            },
            "code": "void extract_and_print_character_08001366(int address, char base_char, uint length, undefined4 param_4)\n{\n  char current_char;\n  uint max_length = 3;\n  if (length > max_length) {\n    length = max_length;\n  }\n  if ((int)(uint)*(byte *)(address + 0x17) <= (int)length) {\n    length = *(byte *)(address + 0x17) - 1 & 0xff;\n  }\n  current_char = *(char *)(length + address + 0x18);\n  print_character(address, base_char + current_char | 0x80, 0, current_char, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "extract_and_print_character_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "decode_character_08005848",
                "param_1": "character_index",
                "param_2": "output_parameter",
                "param_3": "value_array_parameter",
                "param_4": "character_array_parameter",
                "iVar1": "result",
                "uVar2": "decoded_value",
                "puVar3": "character_array_pointer",
                "uVar4": "character_value",
                "PTR_DAT_08005888": "character_array",
                "PTR_DAT_0800588c": "value_array",
                "FUN_080047f4": "decode_value",
                "FUN_08004848": "decode_character_value",
                "FUN_08004c30": "set_bit"
            },
            "code": "void decode_character_08005848(uint character_index, undefined4 param_2, undefined4 param_3, undefined *param_4)\n{\n  int result;\n  uint character_value;\n  undefined *PTR_DAT_08005888_pointer;\n  \n  if (character_index < 0x3c) {\n    character_value = (uint)(char)PTR_DAT_08005888[character_index];\n    PTR_DAT_08005888_pointer = PTR_DAT_08005888;\n  }\n  else {\n    character_value = 0xffffffff;\n    PTR_DAT_08005888_pointer = param_4;\n  }\n  if ((character_value != 0xffffffff) && (result = decode_value(character_value, PTR_DAT_0800588c, param_3, PTR_DAT_08005888_pointer, param_4), result != 0)) {\n    uint decoded_value = decode_character_08005848_value((character_value << 0x18) >> 0x1c);\n    set_bit(decoded_value, 1 << (character_value & 0xf) & 0xffff, param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08004c30",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080012c0",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000cd0",
                "FUN_080012e8",
                "FUN_08001310",
                "FUN_08000bcc",
                "FUN_080013a4",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "decode_character_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "trigger_system_interrupt_08000ae8",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void trigger_system_interrupt_08000ae8(void)\n{\n  software_interrupt(SYSTEM_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "update_data_08003ed8",
                "param_1": "data",
                "puVar1": "data_ptr",
                "PTR_08003ed8_00": "*(undefined *)((int)data + 0x3d)",
                "PTR_08003ed8_08": "data_ptr[8]",
                "DAT_08004b34": "call_another_function",
                "PTR_08003ed8_3d": "*(undefined *)((int)data + 0x3d)",
                "PTR_08003ed8_3c": "*(undefined *)(data + 0xf)",
                "*PTR_08003ed8_00": "*data_ptr",
                "*PTR_08003ed8_00_00": "*data_ptr & 0xfffffffe"
            },
            "code": "void update_data_08003ed8(uint **data)\n{\n  uint *PTR_08003ed8_00;\n  PTR_08003ed8_00 = 2;\n  data_ptr = *data;\n  if ((PTR_08003ed8_08 & 0x1111) == 0) {\n    if ((PTR_08003ed8_08 & 0x444) == 0) {\n      *PTR_08003ed8_00 = *PTR_08003ed8_00_00;\n    }\n  }\n  DAT_08004b34(data);\n  PTR_08003ed8_00 = 0;\n  PTR_08003ed8_3c = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "update_data_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_value_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_memory"
            },
            "code": "void fill_memory_with_value_080061e0(char* memory, char value, int size) {\n  char* end_of_memory = memory + size;\n  for (; memory != end_of_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08006c88",
                "FUN_08006d14",
                "FUN_08006c40",
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "process_data_08005604",
                "uVar1": "random_num",
                "iVar2": "data_item_result",
                "iVar3": "data_ptr",
                "PTR_DAT_08005644": "data_ptr_table",
                "PTR_DAT_08005648": "data_item_func_table",
                "PTR_DAT_0800564c": "data_item_param_table"
            },
            "code": "void process_data_08005604(){\n  uint32_t random_num = generate_random_num();\n  int data_ptr = *(int *)(PTR_DAT_08005644 + random_num * 4);\n  if ((random_num < 5) && (data_ptr = (**(code **)(PTR_DAT_08005648 + random_num * 4))(data_ptr), data_ptr != -1)) {\n    process_data_08005604_item(*(undefined4 *)(PTR_DAT_0800564c + (uint32_t)*(byte *)(data_ptr + 0x44) * 4), *(int *)(data_ptr + 100) + (uint32_t)*(ushort *)(data_ptr + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "process_data_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "return_one_08005724",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_08005724(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "return_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "zero_return_08005728"
            },
            "code": "int zero_return_08005728() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "zero_return_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "perform_operation_on_item_0800135a",
                "param_1": "item",
                "param_2": "size",
                "param_3": "index",
                "param_4": "buffer",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void perform_operation_on_item_0800135a(void* item, int size, int index, void* buffer, void* buffer2){\n  process_item(item, 1, 0, buffer, buffer2);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "perform_operation_on_item_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "function_with_pointer_08005c96",
                "param_1": "pointer_to_int",
                "param_2": "size_of_array",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "temp_result"
            },
            "code": "int function_with_pointer_08005c96(int *pointer_to_int, int size_of_array, int arg3, int arg4)\n{\n  int result;\n  \n  if (size_of_array != 0) {\n    int temp_result = allocate_memory(size_of_array);\n    result = (**(code **)(*pointer_to_int + 4))(pointer_to_int, size_of_array, temp_result, *(code **)(*pointer_to_int + 4), arg4);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "function_with_pointer_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_flags_on_buffer_0800571a",
                "param_1": "buffer_address",
                "param_2": "flags",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_flags_on_buffer_0800571a(int buffer_address, int flags){\n                      *(int *)(buffer_address + 4) = flags;\n                      return;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_flags_on_buffer_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_input_08002efc",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "PTR_DAT_08002efc_0000000b": "input[11]",
                "DAT_08002efc_0000003d": "current_char",
                "PTR_DAT_08002efc_0000000a": "input[10]",
                "PTR_DAT_08002efc_00000009": "input[9]",
                "PTR_DAT_08002efc_00000004": "input[4]",
                "PTR_DAT_08002efc_0000000c": "input[12]",
                "do_nothing_08002db0": "do_nothing_1",
                "do_nothing_08002c4e": "do_nothing_2"
            },
            "code": "uint32_t process_input_08002efc(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *counter_ptr;\n  uint32_t *state_ptr;\n  uint8_t DAT_08002efc_0000003d;\n\n  flag_ptr = PTR_DAT_08002efc_0000000b;\n  DAT_08002efc_0000003d = *(char *)((int)input + 0x3d);\n  if (DAT_08002efc_0000003d == '!') {\n    counter_ptr = PTR_DAT_08002efc_00000009;\n    if (*(short *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*input)[1] &= 0xfffff8ff;\n        **input |= 0x200;\n        PTR_DAT_08002efc_0000000c = NULL;\n        *(char *)((int)input + 0x3d) = ' ';\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*input)[1] &= 0xfffff8ff;\n        PTR_DAT_08002efc_0000000c = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = ' ';\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      state_ptr = PTR_DAT_08002efc_00000004;\n      PTR_DAT_08002efc_00000009 = (uint32_t *)((int)counter_ptr + 1);\n      *state_ptr = (uint32_t)*(uint8_t *)counter_ptr;\n      *(short *)((int)input + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "reverse_countdown_0800365c",
                "param_1": "num",
                "local_4": "countdown"
            },
            "code": "void reverse_countdown_0800365c(int num) {\n  int countdown = num * ((unsigned long long)global_constant * (unsigned long long)*global_pointer >> 0x29);\n  do {\n    countdown--;\n  } while (countdown != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "reverse_countdown_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "check_permissions_080033b8",
                "param_1": "ptr_param",
                "iVar1": "var_i",
                "uVar2": "var_perm_1",
                "uVar3": "var_perm_2",
                "uVar4": "var_perm_3",
                "FUN_080028de": "execute_permission_1",
                "FUN_080028d2": "execute_permission_2",
                "FUN_08002848": "execute_permission_3",
                "DAT_0800350c": "DAT_perm_1",
                "DAT_08003518": "DAT_perm_2",
                "DAT_08003504": "DAT_perm_3",
                "FUN_08002f9c": "execute_permission_4",
                "DAT_0800351c": "DAT_perm_4",
                "DAT_08003514": "DAT_perm_5",
                "FUN_0800306c": "execute_permission_5",
                "FUN_08002db2": "execute_permission_6",
                "FUN_08002efc": "execute_permission_7",
                "FUN_08002cf2": "execute_permission_8",
                "DAT_08003508": "DAT_perm_6",
                "FUN_080032b4": "execute_permission_9",
                "FUN_08002ca6": "execute_permission_10",
                "FUN_08002ad8": "execute_permission_11",
                "FUN_08002c54": "execute_permission_12",
                "FUN_08002ab8": "execute_permission_13"
            },
            "code": "void check_permissions_080033b8(int *ptr_param)\n{\n    int var_i = *ptr_param;\n    uint var_perm_1 = *(uint *)(var_i + 0x18);\n    uint var_perm_2 = *(uint *)(var_i + 0x14);\n    uint var_perm_3 = *(uint *)(var_i + 4);\n\n    if ((*(char *)((int)ptr_param + 0x3e) == '\\x10') || (*(char *)((int)ptr_param + 0x3e) == '@')) {\n        if (((var_perm_2 & 0x10001) == 0) || ((var_perm_3 & 0x200) == 0)) {\n            if (((DAT_08003518 & var_perm_2) == 0) || ((var_perm_3 & 0x200) == 0)) {\n                if (((DAT_08003504 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n                    execute_permission_1(ptr_param);\n                }\n            }\n            else {\n                execute_permission_2(ptr_param);\n            }\n        }\n        else {\n            execute_permission_3(ptr_param);\n        }\n        if ((DAT_0800350c & var_perm_1) == 0) {\n            if ((((DAT_0800351c & var_perm_2) != 0) && ((var_perm_3 & 0x400) != 0)) && ((DAT_08003514 & var_perm_2) == 0)) {\n                execute_permission_4(ptr_param);\n                return;\n            }\n            if (((DAT_08003514 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n                execute_permission_5(ptr_param);\n                return;\n            }\n        }\n        else {\n            if ((((DAT_08003510 & var_perm_2) != 0) && ((var_perm_3 & 0x400) != 0)) && ((DAT_08003514 & var_perm_2) == 0)) {\n                execute_permission_6(ptr_param);\n                return;\n            }\n            if (((DAT_08003514 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n                execute_permission_7(ptr_param);\n                return;\n            }\n        }\n    }\n    else {\n        if (((DAT_08003504 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n            execute_permission_8();\n            return;\n        }\n        if (((DAT_08003508 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n            execute_permission_9(ptr_param);\n            return;\n        }\n        if ((DAT_0800350c & var_perm_1) == 0) {\n            if ((((DAT_0800351c & var_perm_2) != 0) && ((var_perm_3 & 0x400) != 0)) && ((DAT_08003514 & var_perm_2) == 0)) {\n                execute_permission_10(ptr_param);\n                return;\n            }\n            if (((DAT_08003514 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n                execute_permission_11(ptr_param);\n            }\n        }\n        else {\n            if ((((DAT_08003510 & var_perm_2) != 0) && ((var_perm_3 & 0x400) != 0)) && ((DAT_08003514 & var_perm_2) == 0)) {\n                execute_permission_12(ptr_param);\n                return;\n            }\n            if (((DAT_08003514 & var_perm_2) != 0) && ((var_perm_3 & 0x200) != 0)) {\n                execute_permission_13(ptr_param);\n                return;\n            }\n        }\n    }\n    return;\n}\n",
            "called": [
                "FUN_08002db2",
                "FUN_080028d2",
                "FUN_080028de",
                "FUN_08002ca6",
                "FUN_08002ab8",
                "FUN_0800306c",
                "FUN_080032b4",
                "FUN_08002f9c",
                "FUN_08002cf2",
                "FUN_08002ad8",
                "FUN_08002efc",
                "FUN_08002848",
                "FUN_08002c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "check_permissions_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "decode_packet_080069e4",
                "param_1": "result",
                "param_2": "packet",
                "iVar3": "ptr",
                "PTR_PTR_DAT_08006ab0": "ptr_ptr_data_a",
                "PTR_DAT_08006ab4": "ptr_data_a",
                "PTR_DAT_08006ab8": "ptr_data_b",
                "PTR_DAT_08006abc": "ptr_data_c",
                "uVar1": "length",
                "uVar2": "flags"
            },
            "code": "uint decode_packet_080069e4(undefined4 *result, undefined4 *packet){\n  uint length = *(ushort *)(packet + 3);\n  if (length >= 0x40000000) {\n    *result = 9;\n    return 0;\n  }\n  if (length >= 0x20000000) {\n    if ((undefined4 *)packet[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)packet[0xd] != packet + 0x11) {\n        FUN_080061f0(result);\n      }\n      packet[0xd] = 0;\n    }\n    *(ushort *)(packet + 3) = *(ushort *)(packet + 3) & 0xffdb;\n    packet[1] = 0;\n    *packet = packet[4];\n  }\n  *(ushort *)(packet + 3) = *(ushort *)(packet + 3) | 8;\n  if ((packet[4] == 0) && ((*(ushort *)(packet + 3) & 0x280) != 0x200)) {\n    FUN_08006e10(result, packet);\n  }\n  if ((length & 1) == 0) {\n    packet[2] = (uint)packet[5];\n  }\n  else {\n    packet[2] = 0;\n    packet[6] = -packet[5];\n  }\n  if (packet[4] == 0) {\n    if ((*(ushort *)(packet + 3) & 0x80) != 0) {\n      *result = 9;\n      return 0xffffffff;\n    }\n    return (uint)(ushort)length;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "decode_packet_080069e4"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "execute_program_08004b9e",
                "FUN_08001cac": "initialize_system",
                "FUN_08002582": "load_data",
                "do_nothing_08004b9c": "do_nothing"
            },
            "code": "void execute_program_08004b9e(void)\n{\n  initialize_system();\n  load_data();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002582",
                "FUN_08004b9c",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "execute_program_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "execute_function_with_params_08005730",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_080053d4": "execute_function"
            },
            "code": "void execute_function_with_params_08005730(undefined4 function_id, undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  execute_function(function_id, param_1, param_2, param_3, param_3);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582",
                "do_nothing_08002580": "do_nothing"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08004914": "data_ptr",
                "DAT_08004918": "return_value_0",
                "DAT_0800491c": "return_value_1",
                "DAT_08004920": "return_value_2",
                "DAT_08004924": "return_value_3",
                "DAT_08004928": "return_value_4"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag)\n{\n  uint32_t* DAT_08004914 = (uint32_t*)DAT_08004914;\n  switch(flag) {\n    case 0:\n      DAT_08004914[6] |= 0x04;\n      return DAT_08004918;\n    case 1:\n      DAT_08004914[6] |= 0x08;\n      return DAT_0800491c;\n    case 2:\n      DAT_08004914[6] |= 0x10;\n      return DAT_08004920;\n    case 3:\n      DAT_08004914[6] |= 0x20;\n      return DAT_08004924;\n    case 4:\n      DAT_08004914[6] |= 0x40;\n      return DAT_08004928;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_and_clear_memory_08001be8",
                "iVar1": "index",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void copy_and_clear_memory_08001be8(void)\n{\n  int index;\n  undefined4 *destination_ptr;\n  code *jump_table_ptr;\n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (destination_ptr = (undefined4 *)PTR_DAT_08001c28; destination_ptr < PTR_DAT_08001c2c; destination_ptr++) {\n    *destination_ptr = 0;\n  }\n  FUN_08004d44();\n  FUN_08006198();\n  jump_table_ptr = (code *)0x8001c1a;\n  FUN_08005f6c();\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_08004d44",
                "FUN_08005f6c",
                "FUN_08006198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "param_1": "head",
                "param_2": "new_node_value",
                "param_3": "node_size",
                "param_4": "error_code",
                "puVar1": "head_address",
                "extraout_r1": "next_node",
                "ppiVar2": "next_node",
                "ppiVar3": "next_node_address",
                "piVar4": "node_value",
                "ppiVar5": "head_node",
                "ppiVar6": "previous_node",
                "ppiVar7": "current_node"
            },
            "code": "void add_to_linked_list_080061f0(int **head, int *new_node_value, int node_size, int *error_code) {\n  if (node_size == 0) {\n    return;\n  }\n  int **current_node = (int **)(node_size - 4 + (char *)new_node_value);\n  if (*current_node < 0) {\n    current_node = (int **)((char *)current_node + **current_node);\n  }\n  do_nothing_08006eac();\n  int **head_address = (int **)PTR_DAT_08006284;\n  int **head_node = *(int ***)PTR_DAT_08006284;\n  if (head_node == NULL) {\n    current_node[1] = NULL;\n    *head_address = current_node;\n  }\n  else if (current_node < head_node) {\n    int **next_node = (int **)*current_node;\n    int **next_node_address = (int **)((char *)current_node + (char *)next_node);\n    if (head_node == next_node_address) {\n      int *node_value = *head_node;\n      head_node = (int **)head_node[1];\n      next_node_address = (int **)((char *)node_value + (char *)next_node);\n      *current_node = (int *)next_node_address;\n    }\n    current_node[1] = (int *)head_node;\n    *head_address = current_node;\n  }\n  else {\n    int **previous_node = head_node;\n    int **next_node = head_node[1];\n    while (next_node != NULL && next_node <= current_node) {\n      previous_node = next_node;\n      next_node = next_node[1];\n    }\n    int **previous_node_address = (int **)((char *)previous_node + (char *)*previous_node);\n    if (current_node == previous_node_address) {\n      int *node_value = *current_node;\n      int **next_node = (int **)current_node[1];\n      int **next_node_address = (int **)((char *)node_value + (char *)next_node);\n      *current_node = (int *)next_node_address;\n      if (next_node == (int **)((char *)current_node + (char *)next_node_address)) {\n        int *node_value = *next_node;\n        next_node = (int **)next_node[1];\n        next_node_address = (int **)((char *)node_value + (char *)next_node);\n        *previous_node = (int *)next_node_address;\n        previous_node[1] = (int *)next_node;\n      }\n    }\n    else if (current_node < (int **)((char *)previous_node + (char *)*previous_node)) {\n      *error_code = 0xc;\n    }\n    else {\n      current_node[1] = (int *)next_node;\n      previous_node[1] = (int *)current_node;\n    }\n  }\n  do_nothing_08006eae(error_code, current_node, current_node[1], NULL);\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "check_status_08002348",
                "param_1": "status",
                "iVar1": "result",
                "FUN_080020f0": "check_connection"
            },
            "code": "int check_status_08002348(int status)\n{\n  int result;\n  if (*(char *)(status + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 0x24) = 1;\n  result = check_connection();\n  if (result == 0) {\n    *(uint *)(status + 0x28) = *(uint *)(status + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(status + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_status_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "execute_function_080060d4",
                "param_1": "function_param",
                "iVar1": "var1",
                "FUN_08007090": "execute_helper_function",
                "FUN_08005f8c": "get_index"
            },
            "code": "void execute_function_080060d4(int function_param){\\n\\\n        int var1;\\n\\\n        if (*(int *)(function_param + 8) != 0) {\\n\\\n            (**(code **)(function_param + 0xc))();\\n\\\n            return;\\n\\\n        }\\n\\\n        execute_helper_function();\\n\\\n        var1 = get_index();\\n\\\n        if (*(int *)(PTR_DAT_08006100 + var1 * 0x14 + 0xc) != 0) {\\n\\\n            execute_function_080060d4();\\n\\\n        }\\n\\\n        return;\\n\\\n    }",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "execute_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "set_params_08005a68",
                "param_1": "obj",
                "param_2": "param1",
                "param_3": "param2",
                "bVar1": "mask",
                "iVar2": "count",
                "pbVar3": "byte_ptr",
                "unaff_r4": "undefined_var1",
                "unaff_r6": "undefined_var2",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "extraout_r1": "extra_out",
                "uRam08005b14": "ram_var1",
                "iRam08005b1c": "ram_var2",
                "uRam08005b20": "ram_var3",
                "uRam08005b18": "ram_var4",
                "uRam0000012d": "ram_var5",
                "PTR_DAT_08005b38": "ptr_dat"
            },
            "code": "void set_params_08005a68(int obj, int param1, byte param2) {\n  uint mask = param2 & 7;\n  int count = 0;\n  if (mask == 4) {\n    count = 7;\n  }\n  else if (mask == 6) {\n    count = 8;\n  }\n  else if (mask == 2) {\n    count = 6;\n  }\n  if ((param2 & 0x30) == 0x30) {\n    *(int *)(obj + 0x128) = 0x600;\n    count++;\n  }\n  else if ((param2 & 0x20) == 0) {\n    *(int *)(obj + 0x128) = 0;\n  }\n  else {\n    *(int *)(obj + 0x128) = 0x400;\n    count++;\n  }\n  if ((param2 & 8) == 0) {\n    *(int *)(obj + 0x124) = 0;\n  }\n  else {\n    *(int *)(obj + 0x124) = 0x2000;\n  }\n  if (count == 8) {\n    *(int *)(obj + 0x120) = 0;\n  }\n  else if (count == 9) {\n    *(int *)(obj + 0x120) = 0x1000;\n  }\n  else {\n    count = 0;\n  }\n  if (count != 0) {\n    FUNC_08004f4c(obj + 0xd4);\n    FUN_08005510(obj + 0xd4,uRam08005b14);\n    return;\n  }\n  code *jump_table = (code *)0x8005b12;\n  int iVar2 = iRam08005b1c;\n  FUN_0800611c(uRam08005b20,299,iRam08005b1c,uRam08005b18);\n  byte *pbVar3 = *(byte **)(extraout_r1 + unaff_r6);\n  *(undefined *)(iVar2 + 0x1e) = unaff_r4;\n  *(undefined *)(*pbVar3 + 0x1e) = 0;\n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_0800611c",
                "FUN_08004f4c",
                "FUN_08005510"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "set_params_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "parse_input_parameters_08001814",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_8": "param_8",
                "param_9": "param_9",
                "iVar1": "success",
                "uVar2": "function_result",
                "uVar3": "boolean_value",
                "bVar4": "param_9_is_not_1",
                "uVar5": "function_result_1",
                "uVar6": "function_result_2",
                "uVar7": "function_result_3"
            },
            "code": "void parse_input_parameters_08001814(undefined4 *params, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6, undefined4 param_7, undefined4 param_8, int param_9) {\n  int success;\n  undefined4 function_result;\n  undefined boolean_value;\n  bool param_9_is_not_1;\n  undefined8 function_result_1;\n  undefined8 function_result_2;\n  undefined8 function_result_3;\n  \n  success = FUN_080009dc(param_3, param_4, 0, 0);\n  if (((success == 0) && (success = FUN_080009dc(param_5, param_6, 0, 0), success == 0)) && (success = FUN_080009dc(param_7, param_8, 0, 0), success == 0)) {\n    params[13] = param_9;\n    param_9_is_not_1 = param_9 != 1;\n    if (param_9_is_not_1) {\n      param_9 = 0;\n    }\n    boolean_value = (undefined)param_9;\n    if (!param_9_is_not_1) {\n      boolean_value = 1;\n    }\n    *(undefined *)((int)params + 113) = boolean_value;\n    *params = param_3;\n    params[1] = param_4;\n    params[2] = param_5;\n    params[3] = param_6;\n    params[4] = param_7;\n    params[5] = param_8;\n    function_result_1 = FUN_0800040c(params[22]);\n    function_result_1 = FUNC_0800074c((int)function_result_1, (int)((ulonglong)function_result_1 >> 32), 0, DAT_080018f4);\n    function_result = (undefined4)((ulonglong)function_result_1 >> 32);\n    params[6] = param_3;\n    params[7] = param_4;\n    function_result_2 = FUNC_080004f8(param_5, param_6, (int)function_result_1, function_result);\n    *(undefined8 *)(params + 8) = function_result_2;\n    function_result_1 = FUNC_0800074c(param_7, param_8, (int)function_result_1, function_result);\n    *(undefined8 *)(params + 10) = function_result_1;\n    if (params[0xc] == 1) {\n      function_result_3 = FUNC_08000190(0, 0, param_3, param_4);\n      *(undefined8 *)(params + 6) = function_result_3;\n      function_result_2 = FUNC_08000190(0, 0, (int)function_result_2, (int)((ulonglong)function_result_2 >> 32));\n      *(undefined8 *)(params + 8) = function_result_2;\n      function_result_1 = FUNC_08000190(0, 0, (int)function_result_1, (int)((ulonglong)function_result_1 >> 32));\n      *(undefined8 *)(params + 10) = function_result_1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "imported": false,
            "current_name": "parse_input_parameters_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "check_and_call_function_08000aec",
                "param_1": "input_1",
                "param_4": "input_4",
                "uVar1": "return_value"
            },
            "code": "int check_and_call_function_08000aec(int input_1, int input_4) {\n    int return_value = 0;\n    if (*(int *)PTR_DAT_08000b04 != 0) {\n        return 0;\n    }\n    return_value = call_function(1, input_1, 0, 0, input_4);\n    return return_value;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "returnZero_0800572c"
            },
            "code": "int returnZero_0800572c(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "returnZero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_function_if_not_null_08004e12",
                "iVar1": "function_pointer_address",
                "FUN_08004df4": "get_function_pointer_address"
            },
            "code": "void execute_function_if_not_null_08004e12(void)\n{\n  int function_pointer_address = get_function_pointer_address();\n  if (*(code **)(function_pointer_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_pointer_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convertToUnsignedInt32_08000a58",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "outputValue",
                "iVar2": "intermediateValue",
                "uVar3": "shiftAmount"
            },
            "code": "uint convertToUnsignedInt32_08000a58(uint input1, uint input2)\n{\n  uint outputValue;\n  int intermediateValue;\n  uint shiftAmount;\n  \n  intermediateValue = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (intermediateValue >= 0) {\n      return 0;\n    }\n    shiftAmount = -intermediateValue - 0x3e1;\n    if (intermediateValue >> 0x15 < 0xfffffc20 && shiftAmount != 0) {\n      outputValue = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shiftAmount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        outputValue = -outputValue;\n      }\n      return outputValue;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convertToUnsignedInt32_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_08001b48",
                "iVar1": "status",
                "local_54": "delay",
                "local_4c": "delay_value",
                "local_44": "config",
                "local_40": "input_channel",
                "local_3c": "input_mode",
                "local_38": "input_range",
                "local_34": "input_alignment",
                "local_30": "constants",
                "local_20": "constants[1]",
                "local_1c": "constants[2]",
                "local_14": "constants[3]",
                "local_10": "constants[4]",
                "local_c": "constants[5]",
                "uVar2": "adc_value"
            },
            "code": "void initialize_08001b48() {\n  int status;\n  uint32_t adc_value;\n  uint32_t constants[2] = {2, 1};\n  uint32_t config[4] = {0xf, 2, 0, 0x400};\n  uint32_t delay[2] = {2, 0x8000};\n  status = FUNC_08003688(constants);\n  if (status != 0) {\n    FUN_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x88);\n  }\n  status = FUN_08003ad4(config);\n  if (status != 0) {\n    FUN_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x95);\n  }\n  status = FUN_08003c90(delay);\n  if (status != 0) {\n    FUN_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x9c);\n  }\n  adc_value = FUN_08003c44();\n  FUN_08002514((uint32_t)((uint64_t)DAT_08001be0 * (uint64_t)adc_value >> 0x26));\n  FUN_08002560(4);\n  FUN_08002494(0xffffffff,0);\n}\n",
            "called": [
                "FUN_08003688",
                "FUN_08003ad4",
                "FUN_08002560",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08002514",
                "FUN_08003c90",
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_bit_in_uint_array_08004092",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*array",
                "uint": "unsigned int",
                "mask": "bit_mask",
                "updated_value": "new_value"
            },
            "code": "void update_bit_in_uint_array_08004092(int* array, uint bit_index, int bit_value) {\n    uint mask = ~(1 << (bit_index & 0xff));\n    uint updated_value = (*array & mask) | (bit_value << (bit_index & 0xff));\n    *array = updated_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "update_bit_in_uint_array_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_sum_of_two_integers_08005cd4",
                "param_1": "param",
                "iVar1": "sum_of_first_integer",
                "iVar2": "sum_of_second_integer",
                "FUN_08005c96": "get_first_integer",
                "FUN_08005cc0": "calculate_sum_of_second_integer"
            },
            "code": "int calculate_sum_of_two_integers_08005cd4(int param){\n  int sum_of_first_integer = get_first_integer();\n  int sum_of_second_integer = calculate_sum_of_second_integer(param);\n  return sum_of_second_integer + sum_of_first_integer;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_two_integers_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "process_input_08005bb0",
                "param_1": "input_value",
                "param_2": "max_value",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "FUN_08005b54": "execute_function"
            },
            "code": "void process_input_08005bb0(int input_value, int max_value, undefined4 arg_3, undefined4 arg_4) {\n  if (input_value != 1) {\n    return;\n  }\n  if (max_value == 0xffff) {\n    execute_function(PTR_DAT_08005bd0, DAT_08005bcc, arg_3, 0xffff, arg_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "set_params_080014ba",
                "param_1": "base_addr",
                "param_2": "is_zero",
                "param_3": "param_3",
                "param_4": "num_param",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_8": "param_8",
                "param_9": "param_9",
                "param_10": "param_10",
                "param_11": "param_11",
                "param_12": "param_12",
                "param_13": "param_13"
            },
            "code": "void set_params_080014ba(int base_addr, int is_zero, undefined param_3, undefined4 num_param, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined param_9, undefined param_10, undefined param_11, undefined param_12, undefined param_13)\n{\n    *(undefined *)(base_addr + 8) = param_3;\n    *(char *)(base_addr + 9) = (char)num_param;\n    *(undefined *)(base_addr + 10) = param_5;\n    *(undefined *)(base_addr + 0xb) = param_6;\n    *(undefined *)(base_addr + 0xc) = param_7;\n    *(undefined *)(base_addr + 0xd) = param_8;\n    *(undefined *)(base_addr + 0xe) = param_9;\n    *(undefined *)(base_addr + 0xf) = param_10;\n    *(undefined *)(base_addr + 0x10) = param_11;\n    *(undefined *)(base_addr + 0x11) = param_12;\n    *(undefined *)(base_addr + 0x12) = param_13;\n    if (is_zero == 0) {\n        *(undefined *)(base_addr + 0x13) = 0x10;\n    }\n    else {\n        *(undefined *)(base_addr + 0x13) = 0;\n    }\n    set_params_080014ba_helper(base_addr, 0x10, 1, 0, num_param);\n    return;\n}\n",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "set_params_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "configure_device_08003c90",
                "param_1": "config",
                "puVar1": "device_error",
                "iVar2": "device_config",
                "iVar3": "current_time",
                "uVar4": "device_mode",
                "bVar5": "interrupts_disabled"
            },
            "code": "uint32_t configure_device_08003c90(uint32_t *config)\n{\n    uint32_t *device_config = (uint32_t *)DAT_08003d98;\n    uint32_t *device_status = (uint32_t *)DAT_08003d9c;\n    uint32_t *device_error = (uint32_t *)DAT_08003da0;\n\n    bool enable_interrupts = (*config & 1) != 0;\n    if (enable_interrupts) {\n        bool interrupts_disabled = (*device_config & 0x10000000) == 0;\n        if (interrupts_disabled) {\n            *device_config |= 0x10000000;\n        }\n        if ((*device_status & 0x100) == 0) {\n            *device_status |= 0x100;\n            uint32_t start_time = get_current_time();\n            while ((*device_status & 0x100) == 0) {\n                uint32_t current_time = get_current_time();\n                if (current_time - start_time > 100) {\n                    return 3;\n                }\n            }\n        }\n        uint32_t device_mode = *device_config & 0x300;\n        if (device_mode != 0 && device_mode != (config[1] & 0x300)) {\n            *device_error = 1;\n            *device_error = 0;\n            *device_config = (*device_config & 0xfffffcff) | (config[1] & 0x300);\n            if ((device_mode & 1) != 0) {\n                uint32_t start_time = get_current_time();\n                while ((*device_config & 2) == 0) {\n                    uint32_t current_time = get_current_time();\n                    if (current_time - start_time > 5000) {\n                        return 3;\n                    }\n                }\n            }\n        }\n        *device_config = (*device_config & 0xfffffcff) | config[1];\n        if (interrupts_disabled) {\n            *device_config &= 0xefffffff;\n        }\n    }\n    if ((*config & 2) != 0) {\n        *device_config = (*device_config & 0xffff3fff) | config[2];\n    }\n    if ((*config & 0x10) != 0) {\n        *device_config = (*device_config & 0xffbfffff) | config[3];\n    }\n    return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "configure_device_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "check_input_size_08002514",
                "param_1": "input_size",
                "puVar1": "size_ptr",
                "DAT_08002538": "size_ptr",
                "DAT_0800253c": "data_ptr"
            },
            "code": "int check_input_size_08002514(unsigned int input_size) {\n  unsigned int *DAT_08002538;\n  DAT_08002538 = DAT_08002538;\n  if (input_size - 1U < 0x1000000) {\n    DAT_08002538[1] = input_size - 1U;\n    *(unsigned char *)(DAT_0800253c + 0x23) = 0xf0;\n    DAT_08002538[2] = 0;\n    *DAT_08002538 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "check_input_size_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "set_params_08005c1c",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4"
            },
            "code": "void set_params_08005c1c(undefined4 *params, undefined param1, undefined param2, undefined param3, undefined param4)\n{\n  *params = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(undefined *)(params + 1) = param1;\n  *(undefined *)((int)params + 5) = param2;\n  *(undefined *)((int)params + 6) = param3;\n  *(undefined *)((int)params + 7) = param4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "set_params_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_path",
                "param_2": "file_path_length",
                "param_3": "permissions",
                "param_4": "result",
                "iVar1": "permission_check_result",
                "uVar2": "permission_flags",
                "auStack_4c": "file_extension",
                "local_48": "unused_variable"
            },
            "code": "int check_file_permissions_08006dc8(uint16_t* file_path, int file_path_length, uint32_t* permissions, uint32_t* result) {\n  int permission_check_result;\n  uint32_t permission_flags;\n  uint16_t* file_extension;\n\n  if (*(file_path + 7) < 0 || (permission_check_result = check_file_permission(file_path, *(file_path + 7), &permission_flags)) < 0) {\n    *result = 0;\n    if ((int)((uint)*(file_path + 6) << 0x18) < 0) {\n      permission_flags = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *result = (uint32_t)((permission_flags & 0xf000) == 0x2000);\n  }\n  permission_flags = 0x400;\n  LAB_08006e08:\n  *permissions = permission_flags;\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_file_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "clear_bits_0800412c",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "data_ptr"
            },
            "code": "int clear_bits_0800412c(uint **data, unsigned int flag)\n{\n    uint *data_ptr = *data;\n    if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n        data_ptr[17] = data_ptr[17] & 0xffff7fff;\n    }\n    data_ptr = *data;\n    if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n        *data_ptr = *data_ptr & 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_bits_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "set_data_pointers_and_call_function_08007090",
                "UNRECOVERED_JUMPTABLE": "function_pointer",
                "PTR_DAT_0800712c": "data_pointer_1",
                "PTR_DAT_08007130": "data_pointer_2",
                "PTR_DAT_08007134": "data_pointer_3",
                "PTR_DAT_08007138": "data_pointer_4",
                "PTR_DAT_0800713c": "data_pointer_5",
                "PTR_DAT_08007140": "data_pointer_6",
                "PTR_DAT_08007144": "data_pointer_7",
                "PTR_DAT_08007148": "data_pointer_8",
                "PTR_DAT_0800714c": "data_pointer_9",
                "PTR_DAT_08007150": "data_pointer_10",
                "PTR_DAT_08007154": "data_pointer_11",
                "PTR_DAT_08007158": "data_pointer_12",
                "FUN_08006ac0": "set_data_pointer_if_negative"
            },
            "code": "void set_data_pointers_and_call_function_08007090(void)\n{\n  code *function_pointer;\n  function_pointer = set_data_pointers_and_call_function_08007090;\n  set_data_pointer_if_negative(PTR_DAT_0800712c);\n  set_data_pointer_if_negative(PTR_DAT_08007130);\n  set_data_pointer_if_negative(PTR_DAT_08007134);\n  set_data_pointer_if_negative(PTR_DAT_08007138);\n  set_data_pointer_if_negative(PTR_DAT_0800713c);\n  set_data_pointer_if_negative(PTR_DAT_08007140);\n  set_data_pointer_if_negative(PTR_DAT_08007144);\n  set_data_pointer_if_negative(PTR_DAT_08007148);\n  set_data_pointer_if_negative(PTR_DAT_0800714c);\n  set_data_pointer_if_negative(PTR_DAT_08007150);\n  set_data_pointer_if_negative(PTR_DAT_08007154);\n  set_data_pointer_if_negative(PTR_DAT_08007158);\n  function_pointer();\n  return;\n}\n\nvoid set_data_pointer_if_negative(int* data_pointer)\n{\n  if (*data_pointer < 0)\n  {\n    *data_pointer = 1;\n  }\n}\n",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "set_data_pointers_and_call_function_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "calculate_value_from_input_0800492c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint calculate_value_from_input_0800492c(uint input1, uint input2, uint input3, uint input4) {\n  int result = perform_calculation(input1, PTR_DAT_08004944, input3, input4, input4);\n  uint shifted_result = (uint)(result << 12) >> 27;\n  if (shifted_result > 15) {\n    shifted_result = 0;\n  }\n  return shifted_result;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_value_from_input_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_at_index_0800480a",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shift_amount",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_at_index_0800480a(uint32_t index, int* array) {\n  uint32_t shift_amount = (index << 0x18) >> 0x1c;\n  uint32_t* target = (uint32_t*)(array + shift_amount);\n  *target |= 1 << (index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "get_value_080015f8",
                "param_1": "flag",
                "param_2": "is_last",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "flag",
                "uVar2": "masked_value",
                "uVar3": "value",
                "DAT_0800169c": "high_bits",
                "DAT_08001698": "low_bits",
                "DAT_0800168c": "val_1_high_bits",
                "DAT_08001688": "val_1_low_bits",
                "DAT_08001694": "val_2_high_bits",
                "DAT_08001690": "val_2_low_bits"
            },
            "code": "uint32_t get_value_080015f8(uint32_t param_1, int param_2, uint32_t param_3, uint32_t param_4) {\n  uint32_t flag = get_flag();\n  uint32_t value = (flag & 0x10000) ? ((flag & 7) == 2 ? CONCAT44(DAT_0800168c, DAT_08001688) : ((flag & 7) == 4 ? CONCAT44(DAT_08001694, DAT_08001690) : 0)) : 0;\n  if ((flag & 0x10000) == 0) {\n    uint32_t mask = flag >> 0x12 & 0x1fff;\n    uint64_t masked_value = FUN_0800040c(mask);\n    if ((flag & 0x2000) != 0) {\n      uint64_t inv_masked_value = FUN_0800040c(~mask & 0x1fff);\n      masked_value = FUNC_08000194((uint32_t)inv_masked_value, (uint32_t)(inv_masked_value >> 0x20), 0, DAT_080016a0, param_4);\n      masked_value = masked_value & 0xffffffff | (uint64_t)((int32_t)(masked_value >> 0x20) + 0x80000000) << 0x20;\n    }\n    value = FUNC_080004f8((uint32_t)masked_value, (uint32_t)(masked_value >> 0x20), 0, DAT_080016a4);\n    if (param_2 == 1) {\n      value = FUNC_080004f8((uint32_t)value, (uint32_t)(value >> 0x20), 0, DAT_080016a8);\n      value = FUNC_0800074c((uint32_t)value, (uint32_t)(value >> 0x20), 0, DAT_080016ac);\n      value = FUNC_08000194((uint32_t)value, (uint32_t)(value >> 0x20), 0, DAT_080016b0);\n      return value;\n    }\n  }\n  return value;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080015b2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_value_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "check_params_and_call_function_08005c38",
                "param_1": "num_params",
                "param_2": "param_value",
                "FUN_08005c1c": "call_function_with_args",
                "PTR_DAT_08005c60": "PTR_FUNCTION_ADDRESS"
            },
            "code": "void check_params_and_call_function_08005c38(int num_params, int param_value)\n{\n  if ((num_params == 1) && (param_value == 0xffff)) {\n    call_function_with_args(PTR_DAT_08005c60, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "check_params_and_call_function_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "number",
                "cVar1": "num_bits_set"
            },
            "code": "char count_bits_set_08005f8c(uint number) {\n  char num_bits_set = 0;\n  while(number != 1) {\n    num_bits_set++;\n    number = number >> 1;\n  }\n  return num_bits_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "output",
                "param_2": "data",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data_value",
                "puVar2": "ptr",
                "iVar3": "result"
            },
            "code": "void process_data_08006f5a(int *output, int data, undefined4 arg1, undefined4 arg2)\n{\n  short data_value;\n  undefined *ptr;\n  int result;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    send_data(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  ptr = PTR_DAT_08006fe0;\n  data_value = *(short *)(data + 0xe);\n  *(undefined4 *)PTR_DAT_08006fe0 = 0;\n  result = process_input((int)data_value, arg1, arg2, arg2, arg2, unaff_r4, unaff_r5, in_lr);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "process_data_08000b08",
                "param_1": "flag",
                "param_2": "value",
                "PTR_DAT_08000b9c": "data_ptr1",
                "PTR_DAT_08000b98": "data_ptr2",
                "PTR_DAT_08000b94": "data_ptr3",
                "PTR_DAT_08000b90": "data_ptr4",
                "*(undefined4 *)PTR_DAT_08000b8c": "*data_ptr5",
                "*(undefined4 *)(PTR_DAT_08000b8c + 4)": "*(data_ptr5 + 4)",
                "*(undefined4 *)PTR_DAT_08000b88": "*data_ptr6",
                "*(undefined4 *)(PTR_DAT_08000b88 + 4)": "*(data_ptr6 + 4)",
                "*(undefined4 *)PTR_DAT_08000b84": "*data_ptr7",
                "*(undefined4 *)(PTR_DAT_08000b84 + 4)": "*(data_ptr7 + 4)",
                "FUN_08001510": "process_data_type1",
                "PTR_DAT_08000bb8": "data_ptr8",
                "*PTR_DAT_08000ba0": "*data_ptr9",
                "*PTR_DAT_08000ba4": "*data_ptr10",
                "*PTR_DAT_08000ba8": "*data_ptr11",
                "*PTR_DAT_08000bac": "*data_ptr12",
                "*PTR_DAT_08000bb0": "*data_ptr13",
                "*PTR_DAT_08000bb4": "*data_ptr14",
                "FUN_0800157c": "process_data_type2",
                "PTR_DAT_08000bc8": "data_ptr15",
                "*PTR_DAT_08000bc4": "*data_ptr16",
                "*PTR_DAT_08000bc0": "*data_ptr17",
                "*PTR_DAT_08000bbc": "*data_ptr18"
            },
            "code": "void process_data_08000b08(int flag, int value) {\n  if ((flag == 1) && (value == 0xffff)) {\n    initialize_data(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90, *(undefined4 *)PTR_DAT_08000b8c, *(undefined4 *)(PTR_DAT_08000b8c + 4), *(undefined4 *)PTR_DAT_08000b88, *(undefined4 *)(PTR_DAT_08000b88 + 4), *(undefined4 *)PTR_DAT_08000b84, *(undefined4 *)(PTR_DAT_08000b84 + 4), 0);\n    process_data_08000b08_type1(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8, *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n    process_data_08000b08_type2(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data",
                "iVar2": "current_data",
                "bVar3": "is_current_data"
            },
            "code": "void initialize_data_08006cb4(int data)\n{\n  if (*(int *)(data + 0x18) == 0) {\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined4 *)(data + 0x4c) = 0;\n    *(undefined4 *)(data + 0x50) = 0;\n    int current_data = *(int *)PTR_PTR_DAT_08006d0c;\n    *(undefined **)(data + 0x28) = PTR_LAB_08006c34_1_08006d10;\n    bool is_current_data = data == current_data;\n    if (is_current_data) {\n      current_data = 1;\n    }\n    if (is_current_data) {\n      *(int *)(data + 0x18) = current_data;\n    }\n    undefined4 first_data = FUN_08006d14();\n    *(undefined4 *)(data + 4) = first_data;\n    undefined4 second_data = FUN_08006d14(data);\n    *(undefined4 *)(data + 8) = second_data;\n    undefined4 third_data = FUN_08006d14(data);\n    *(undefined4 *)(data + 0xc) = third_data;\n    FUN_08006c40(*(undefined4 *)(data + 4),4,0);\n    FUN_08006c40(*(undefined4 *)(data + 8),9,1);\n    FUN_08006c40(*(undefined4 *)(data + 0xc),0x12,2);\n    *(undefined4 *)(data + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006be0",
                "FUN_08006d14",
                "FUN_080069e4",
                "FUN_08006344",
                "FUN_080068f0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_param_value_08004c5e",
                "param_1": "param_to_find",
                "param_2": "param_list",
                "*param_2": "*param_list",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_param_value_08004c5e(int param_to_find, char *param_list) {\n\twhile(true) {\n\t\tif (*param_list == -1) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (*param_list == param_to_find) {\n\t\t\tbreak;\n\t\t}\n\t\tparam_list += 0xc;\n\t}\n\treturn *(int *)(param_list + 4);\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_param_value_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "data",
                "local_50": "buffer",
                "FUN_08004c78": "get_data",
                "PTR_DAT_08004b90": "DATA_PTR_1",
                "FUN_08004948": "get_status",
                "uVar2": "flags",
                "FUN_08004cce": "get_flags",
                "FUN_080040b0": "process_buffer",
                "FUN_0800412c": "process_alt_buffer",
                "FUN_08003ed8": "cleanup_buffer"
            },
            "code": "void process_data_08004b3c(int data)\n{\n  int result;\n  uint flags;\n  int buffer [17];\n  buffer[0] = get_data(data, PTR_DAT_08004b90);\n  if ((buffer[0] != 0) &&\n     ((((result = get_status(data), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flags = get_flags(data, PTR_DAT_08004b90);\n    if ((flags & 0x100000) == 0) {\n      process_buffer(buffer,result);\n    }\n    else {\n      process_alt_buffer(buffer,result);\n    }\n    cleanup_buffer(buffer);\n  }\n  return;\n}",
            "called": [
                "FUN_08004948",
                "FUN_0800412c",
                "FUN_080040b0",
                "FUN_08004cce",
                "FUN_08003ed8",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_data_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "copy_bytes_to_pointer_08001550",
                "param_1": "dest",
                "param_2": "num_bytes",
                "param_3": "src_offset",
                "iVar1": "i",
                "*(code **)*param_1": "function_pointer func_ptr",
                "*param_1": "uint8_t *src",
                "shift_amount": "uint8_t shift_amount"
            },
            "code": "void copy_bytes_to_pointer_08001550(uint8_t *dest, uint num_bytes, int src_offset)\n{\n  uint8_t *src = (uint8_t*)src_offset;\n  uint8_t shift_amount = (num_bytes & 7) << 3 | 0x40;\n  function_pointer func_ptr = (function_pointer)*dest;\n  \n  func_ptr(dest, shift_amount, 0);\n  \n  for (uint i = 0; i < 8; i++)\n  {\n    func_ptr(dest, *(src + i));\n  }\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_pointer_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = FUN_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = FUN_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      FUN_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      FUN_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      FUN_08005c96(puVar2,PTR_DAT_08000f80);\n      FUN_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    FUN_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    FUN_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    FUN_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      FUN_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      FUN_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_0800134e(puVar3,0);\n      FUN_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = FUN_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = FUN_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = FUN_080058e0();\n    FUN_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = FUN_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = FUN_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005f2c",
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_08005f40",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08005d82",
                "FUN_08001960",
                "FUN_0800042c",
                "FUN_080058e0",
                "FUN_08005cd4",
                "FUN_08001a44",
                "FUN_08001918",
                "FUN_080018f8",
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_08005754",
                "FUN_08001366",
                "FUN_080009dc",
                "FUN_080016b4",
                "FUN_08000194",
                "FUN_08005848"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08005848": "send_data",
                "PTR_": "data_ptr_",
                "DAT_": "data_"
            },
            "code": "void process_data_08001310(int DAT_ptr, uint32_t DAT_size, uint32_t param_3, uint32_t param_4)\n{\n  send_data(*(uint8_t *)(DAT_ptr + 8), param_3, param_3, param_4, param_4);\n  if (*(int8_t *)(DAT_ptr + 9) != -1) {\n    send_data(*(int8_t *)(DAT_ptr + 9), 0);\n  }\n  if ((*(uint8_t *)(DAT_ptr + 0x13) & 0x10) == 0) {\n    process_DAT_chunk(DAT_ptr, DAT_size >> 4);\n    process_DAT_chunk(DAT_ptr, DAT_size);\n    return;\n  }\n  process_large_DAT_chunk(DAT_ptr, DAT_size);\n  return;\n}",
            "called": [
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_0800138e",
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "swap_pointers_080009a8",
                "param_1": "first_ptr",
                "param_2": "second_ptr",
                "param_3": "third_ptr",
                "param_4": "fourth_ptr",
                "FUN_080009b8": "swap_two_pointers"
            },
            "code": "void swap_pointers_080009a8(void* first_ptr, void* second_ptr, void* third_ptr, void* fourth_ptr)\n{\n  swap_two_pointers(third_ptr, fourth_ptr, first_ptr, second_ptr);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "imported": false,
            "current_name": "swap_pointers_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "update_memory_permissions_08004d90",
                "*param_1": "*permission_code",
                "DAT_08004de4": "READ_WRITE_EXECUTE_PERMISSION",
                "DAT_08004df0": "MEMORY_BASE_ADDRESS",
                "0x18": "DATA_SECTION_OFFSET",
                "0xfffff7ff": "READ_WRITE_EXECUTE_MASK",
                "0x40000000": "READ_EXECUTE_PERMISSION",
                "0x1c": "TEXT_SECTION_OFFSET",
                "0xfffffffe": "READ_EXECUTE_MASK",
                "DAT_08004de8": "READ_WRITE_PERMISSION",
                "0xfffffffd": "READ_WRITE_MASK",
                "DAT_08004dec": "READ_PERMISSION",
                "0xfffffffb": "READ_MASK"
            },
            "code": "void update_memory_permissions_08004d90(int *permission_code)\n{\n  if (*permission_code == DAT_08004de4) {\n    *(uint *)(DAT_08004df0 + DATA_SECTION_OFFSET) = *(uint *)(DAT_08004df0 + DATA_SECTION_OFFSET) & READ_WRITE_EXECUTE_MASK;\n  }\n  if (*permission_code == READ_EXECUTE_PERMISSION) {\n    *(uint *)(DAT_08004df0 + TEXT_SECTION_OFFSET) = *(uint *)(DAT_08004df0 + TEXT_SECTION_OFFSET) & READ_EXECUTE_MASK;\n  }\n  if (*permission_code == DAT_08004de8) {\n    *(uint *)(DAT_08004df0 + DATA_SECTION_OFFSET) = *(uint *)(DAT_08004df0 + DATA_SECTION_OFFSET) & READ_WRITE_MASK;\n  }\n  if (*permission_code == DAT_08004dec) {\n    *(uint *)(DAT_08004df0 + DATA_SECTION_OFFSET) = *(uint *)(DAT_08004df0 + DATA_SECTION_OFFSET) & READ_MASK;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "update_memory_permissions_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_to_base_08005ce8",
                "param_1": "ptr_num_to_convert",
                "param_2": "num_to_convert",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_to_base_08005ce8(int *ptr_num_to_convert, uint num_to_convert, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits[9];\n  reversed_digits[0] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *current_digit = reversed_digits + 1;\n  do {\n    quotient = num_to_convert / base;\n    remainder = (num_to_convert & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit = current_digit - 1;\n    if (remainder < 10) {\n      digit = remainder + '0';\n    }\n    else {\n      digit = remainder + '7';\n    }\n    *current_digit = digit;\n    num_to_convert = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint num_of_digits = FUN_08000178(current_digit);\n    result = (**(code **)(*ptr_num_to_convert + 4))(ptr_num_to_convert,current_digit,num_of_digits);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_to_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_data_0800316c",
                "param_1": "data",
                "iVar1": "counter",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "do_nothing_0800316a": "do_nothing",
                "FUN_08004ef4": "process_data_2",
                "FUN_0800258c": "process_data_4",
                "PTR_LAB_080035fc_1_080032ac": "PTR_LAB_080035fc_1_080032ac",
                "DAT_080032b0": "DAT_080032b0"
            },
            "code": "void process_data_0800316c(uint **data)\n{\n  int counter;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      process_data_0800316c_2(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x21) == '\\x01') {\n      data[14][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      counter = FUN_0800258c(data[14]);\n      if (counter != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][0xd])();\n      }\n    }\n    else {\n      data[13][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      counter = FUN_0800258c(data[13]);\n      if (counter != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_080032b0;\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_data_0800316c_3(data);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004ef4",
                "FUN_0800316a",
                "FUN_0800258c",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_data_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "set_bit_to_zero_at_index_08004828",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shift_amount",
                "PTR_": "",
                "DAT_": "",
                "*": "ptr_to_",
                "mask": "mask"
            },
            "code": "void set_bit_to_zero_at_index_08004828(uint index, int *array) {\n    uint shift_amount = (index << 0x18) >> 0x1c;\n    uint *ptr_to_index = (uint *)(array + shift_amount * 4);\n    uint mask = ~(1 << (index & 0xf));\n    *ptr_to_index = *ptr_to_index & mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_at_index_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "perform_task_08003afa",
                "param_1": "task_params",
                "param_2": "task_param_count",
                "puVar1": "task_limit",
                "iVar2": "start_time",
                "iVar3": "wait_time",
                "uVar4": "result"
            },
            "code": "uint32_t perform_task_08003afa(uint32_t *task_params, uint32_t task_param_count)\n{\n  uint32_t *global_data = DAT_08003c38;\n  uint32_t wait_time;\n  uint32_t result = 0;\n  \n  if ((*task_params & 2) != 0) {\n    global_data[1] = (global_data[1] & 0xffffff0f) | task_params[2];\n  }\n  \n  if ((*task_params & 1) != 0) {\n    uint32_t task_type = task_params[1];\n    if (task_type == 1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((task_type != 2) && ((*global_data & 2) == 0)) {\n      return 1;\n    }\n    \n    global_data[1] = task_type | (global_data[1] & 0xfffffffc);\n    uint32_t start_time = FUN_08001cc4();\n    \n    if (task_type == 1) {\n      while ((global_data[1] & 0xc) != 4) {\n        wait_time = FUN_08001cc4();\n        if (5000 < (wait_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (task_type == 2) {\n      while ((global_data[1] & 0xc) != 8) {\n        wait_time = FUN_08001cc4();\n        if (5000 < (wait_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((global_data[1] & 0xc) != 0) {\n        wait_time = FUN_08001cc4();\n        if (5000 < (wait_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  \n  uint32_t *task_limit = DAT_08003c34;\n  if ((task_param_count < (*DAT_08003c34 & 7)) &&\n     (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | task_param_count, task_param_count != (*task_limit & 7))) {\n    return 1;\n  }\n  \n  if ((*task_params & 4) != 0) {\n    global_data[1] = (global_data[1] & 0xfffff8ff) | task_params[3];\n  }\n  \n  if ((*task_params & 8) != 0) {\n    global_data[1] = (global_data[1] & 0xffffc7ff) | (task_params[4] << 3);\n  }\n  \n  wait_time = FUN_08003a68();\n  *(uint32_t *)PTR_DAT_08003c40 = wait_time >> PTR_DAT_08003c3c[(global_data[1] << 0x18) >> 0x1c];\n  FUN_08001c3c(0xf);\n  return result;\n}",
            "called": [
                "FUN_08003a68",
                "FUN_08001c3c",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "perform_task_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "classify_input_08004948",
                "param_1": "input",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "shift_amount"
            },
            "code": "uint32_t classify_input_08004948(uint32_t input, uint32_t* data_ptr, uint32_t param_3, uint32_t param_4) {\n  int32_t result = FUN_08004cce(input, data_ptr, param_3, param_4, param_4);\n  uint32_t shift_amount = (uint32_t)(result << 12) >> 27;\n  if (shift_amount == 3) {\n    return 8;\n  }\n  if (shift_amount != 4) {\n    if (shift_amount != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "classify_input_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "update_value_08005b24",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "new_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void update_value_08005b24(int address, uint value){\n                    undefined new_value;\n                    code *jump_table;\n                    if (value < 0x3c) {\n                        new_value = PTR_DATA[value];\n                    }\n                    else {\n                        new_value = 0xff;\n                    }\n                    *(undefined *)(address + 0x12d) = new_value;\n                    (*jump_table)(); \n                    return;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "update_value_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "check_status_080049f0",
                "param_1": "status",
                "iVar1": "current_status"
            },
            "code": "void check_status_080049f0(int *status)\n{\n  int current_status = DAT_08004a48;\n  if (*status != DAT_08004a40) {\n    if (*status == DAT_08004a44) {\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(current_status + 0xc) &= 0xfffffbff;\n      *(uint *)(current_status + 0x18) &= 0xfffffbff;\n      *(uint *)(current_status + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(current_status + 0xc) &= 0xfffffdff;\n  *(uint *)(current_status + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "check_status_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_0x4c_08001e40",
                "param_1": "value_pointer",
                "*param_1": "value_address",
                "*(undefined4 *)(*param_1 + 0x4c)": "value_at_offset_0x4c"
            },
            "code": "int get_value_at_offset_0x4c_08001e40(int *value_pointer) {\n  int *value_address = *value_pointer;\n  int value_at_offset_0x4c = *(value_address + 0x4c);\n  return value_at_offset_0x4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x4c_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_result_08003a68",
                "uVar1": "result",
                "uVar2": "value",
                "local_1c": "offset",
                "abStack_18": "local",
                "uStack_14": "dividend",
                "uStack_10": "divisor",
                "uStack_c": "factor",
                "mask": "mask",
                "shift": "shift",
                "shift_dividend": "shift_dividend",
                "shift_mask": "shift_mask",
                "PTR_DAT_08003ac4": "ptr",
                "DAT_08003ac8": "dat",
                "DAT_08003acc": "acc",
                "DAT_08003ad0": "max"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result;\n  uint flag;\n  uint value;\n  uint factor;\n  uint divisor;\n  uint dividend;\n  uint offset;\n  uint mask = 0xc;\n  uint shift = 10;\n  uint shift_dividend = 0xe;\n  uint shift_mask = 0x1f;\n  uint* PTR_DAT_08003ac4 = (uint*) PTR_DAT_08003ac4;\n  uint* DAT_08003ac8 = (uint*) DAT_08003ac8;\n  uint DAT_08003acc = DAT_08003DAT_08003acc;\n  uint DAT_08003ad0 = DAT_08003ad0;\n  uint* local = (uint*) &offset;\n  value = DAT_08003ac8[1];\n  factor = DAT_08003ac8[0];\n  divisor = PTR_DAT_08003ac4[1];\n  dividend = PTR_DAT_08003ac4[0];\n  offset = PTR_DAT_08003ac4[4];\n  mask = mask & value;\n  flag = value & 0x10000;\n  if (mask == 8)\n  {\n    if (flag == 0)\n    {\n      result = DAT_08003acc * ((uint) local[mask << shift >> shift_mask]);\n    }\n    else\n    {\n      result = (DAT_08003ad0 * ((uint) local[mask << shift >> shift_mask])) / ((uint) ((byte*) &local[2])[0 - ((int) value << shift_dividend >> shift_mask)]);\n    }\n  }\n  else\n  {\n    result = DAT_08003ad0;\n  }\n  return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "print_twice_080012a2",
                "param_1": "str",
                "*(undefined *)(param_1 + 10)": "ptr",
                "FUN_08005848": "putchar"
            },
            "code": "void print_twice_080012a2(char* str)\n{\n    char* ptr = str;\n    while(*ptr != '\\0')\n    {\n        putchar(*ptr);\n        putchar(*ptr);\n        ptr++;\n    }\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "print_twice_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "check_valid_input_08004c78",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_08004c5e": "calculate_result"
            },
            "code": "int check_valid_input_08004c78(int input_value) {\n  int result;\n  if (input_value != -1) {\n    result = calculate_result();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004b3c",
                "FUN_080053d4",
                "FUN_08005384",
                "FUN_08004a4c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_valid_input_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "process_data_08001e48",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "uVar1": "result",
                "uVar2": "num1",
                "iVar3": "data",
                "local_c": "count"
            },
            "code": "int process_data_08001e48(int *data_ptr, uint *param_ptr) {\n    int result = 0;\n    uint num1 = param_ptr[1];\n    if (*(char *)(data_ptr + 9) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(undefined *)(data_ptr + 9) = 1;\n        if (num1 < 7) {\n            uint shift = num1 * 5 - 5;\n            *(uint *)(*data_ptr + 0x34) = (*param_ptr << (shift & 0xff)) | (*(uint *)(*data_ptr + 0x34) & ~(0x1f << (shift & 0xff)));\n        }\n        else if (num1 < 0xd) {\n            uint shift = num1 * 5 - 0x23;\n            *(uint *)(*data_ptr + 0x30) = (*param_ptr << (shift & 0xff)) | (*(uint *)(*data_ptr + 0x30) & ~(0x1f << (shift & 0xff)));\n        }\n        else {\n            uint shift = num1 * 5 - 0x41;\n            *(uint *)(*data_ptr + 0x2c) = (*param_ptr << (shift & 0xff)) | (*(uint *)(*data_ptr + 0x2c) & ~(0x1f << (shift & 0xff)));\n        }\n        uint num2 = *param_ptr;\n        if (num2 < 10) {\n            uint shift = num2 * 3 & 0xff;\n            *(uint *)(*data_ptr + 0x10) = (param_ptr[2] << shift) | (*(uint *)(*data_ptr + 0x10) & ~(7 << shift));\n        }\n        else {\n            uint shift = num2 * 3 - 0x1e;\n            *(uint *)(*data_ptr + 0xc) = (param_ptr[2] << (shift & 0xff)) | (*(uint *)(*data_ptr + 0xc) & ~(7 << (shift & 0xff)));\n        }\n        if (*param_ptr - 0x10 < 2) {\n            int data = *data_ptr;\n            if (data == DAT_08001f74) {\n                if ((*(uint *)(data + 8) & 0x800000) == 0) {\n                    *(uint *)(data + 8) |= 0x800000;\n                    if (*param_ptr == 0x10) {\n                        uint count = (uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_DAT_08001f78 >> 0x32) * 10;\n                        while (count != 0) {\n                            count--;\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                data_ptr[10] |= 0x20;\n                result = 1;\n            }\n        }\n        else {\n            result = 0;\n        }\n        *(undefined *)(data_ptr + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "process_data_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "do_something_080009b8",
                "param_1": "input_param",
                "FUN_0800092c": "call_some_other_function"
            },
            "code": "int do_something_080009b8(int input_param)\n{\n  call_some_other_function();\n  return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080009a8",
                "FUN_080009dc"
            ],
            "imported": false,
            "current_name": "do_something_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "convert_to_fixed_point_08000aa8",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "iVar1": "double_fraction",
                "uVar2": "shift_amount"
            },
            "code": "uint convert_to_fixed_point_08000aa8(uint integer_part, uint fraction_part) {\n  int double_fraction = fraction_part * 2 + 0x200000;\n  if ((fraction_part * 2 < 0xffe00000) && (-1 < double_fraction)) {\n    uint shift_amount = -(double_fraction >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (fraction_part << 0xb | 0x80000000 | integer_part >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((integer_part | fraction_part << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_to_fixed_point_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "check_if_CY_is_false_or_ZR_is_true_08000a04",
                "in_CY": "CY_is_true",
                "in_ZR": "ZR_is_true"
            },
            "code": "bool check_if_CY_is_false_or_ZR_is_true_08000a04(void)\n{\n  bool CY_is_true = FUN_080009a8();\n  bool ZR_is_true = false;\n  return !CY_is_true || ZR_is_true;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_if_CY_is_false_or_ZR_is_true_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_first_call_0800010c",
                "param_1": "param",
                "*PTR_DAT_08000124": "is_first_call",
                "DAT_08000128": "has_been_called_before",
                "PTR_FUN_0800012c": "function_pointer"
            },
            "code": "int* check_if_first_call_0800010c(int* param){\\n  if (**PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      param = PTR_FUN_0800012c;\\n    }\\n    **PTR_DAT_08000124 = 1;\\n  }\\n  return param;\\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_first_call_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculateSumAndUpdateMemory_08001cac",
                "PTR_DAT_08001cbc": "dataPointer2",
                "PTR_DAT_08001cc0": "dataPointer1"
            },
            "code": "void calculateSumAndUpdateMemory_08001cac(void)\n{\n  uint8_t byteValue = *PTR_DAT_08001cc0;\n  uint32_t* memoryPointer = (uint32_t*)PTR_DAT_08001cbc;\n  uint32_t memoryValue = *memoryPointer;\n  uint32_t sum = (uint32_t)byteValue + memoryValue;\n  *memoryPointer = sum;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "calculateSumAndUpdateMemory_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "check_and_call_function_08005a18",
                "DAT_08005a3c": "flag",
                "FUN_0800591e": "call_function",
                "PTR_DAT_08005a40": "pointer"
            },
            "code": "void check_and_call_function_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    call_function(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "param_1": "param_array",
                "iVar1": "param",
                "*(uint *)(iVar1 + 0x10)": "flag1",
                "*(uint *)(iVar1 + 0xc)": "flag2",
                "*(undefined4 *)(iVar1 + 0x10)": "*(uint32_t *)(param + 0x10)",
                "*(undefined *)(param_1 + 7)": "*(uint8_t *)(param_array + 7)",
                "*(uint *)(*param_1 + 0x18)": "*(uint32_t *)(*param_array + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint32_t *)(*param_array + 0x1c)",
                "FUN_08004df8": "perform_action1",
                "do_nothing_08003f14": "do_nothing",
                "do_nothing_08003f12": "do_nothing",
                "FUN_08004e12": "perform_action2",
                "do_nothing_0800417a": "do_nothing3",
                "do_nothing_08003f16": "do_nothing4",
                "do_nothing_08004178": "do_nothing5"
            },
            "code": "void process_flags_08003f18(int *param_array)\n{\n  int param = *param_array;\n  uint32_t flag1 = *(uint32_t *)(param + 0x10);\n  uint32_t flag2 = *(uint32_t *)(param + 0xc);\n  \n  if ((flag1 & 2) && (flag2 & 2)) {\n    *(uint32_t *)(param + 0x10) = 0xfffffffd;\n    *(uint8_t *)(param_array + 7) = 1;\n    if ((*(uint32_t *)(*param_array + 0x18) & 3) == 0) {\n      perform_action1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing(param_array);\n    }\n    *(uint8_t *)(param_array + 7) = 0;\n  }\n  \n  if ((flag1 & 4) && (flag2 & 4)) {\n    *(uint32_t *)(param + 0x10) = 0xfffffffb;\n    *(uint8_t *)(param_array + 7) = 2;\n    if ((*(uint32_t *)(*param_array + 0x18) & 0x300) == 0) {\n      perform_action1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing(param_array);\n    }\n    *(uint8_t *)(param_array + 7) = 0;\n  }\n  \n  if ((flag1 & 8) && (flag2 & 8)) {\n    *(uint32_t *)(param + 0x10) = 0xfffffff7;\n    *(uint8_t *)(param_array + 7) = 4;\n    if ((*(uint32_t *)(*param_array + 0x1c) & 3) == 0) {\n      perform_action1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing(param_array);\n    }\n    *(uint8_t *)(param_array + 7) = 0;\n  }\n  \n  if ((flag1 & 0x10) && (flag2 & 0x10)) {\n    *(uint32_t *)(param + 0x10) = 0xffffffef;\n    *(uint8_t *)(param_array + 7) = 8;\n    if ((*(uint32_t *)(*param_array + 0x1c) & 0x300) == 0) {\n      perform_action1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing(param_array);\n    }\n    *(uint8_t *)(param_array + 7) = 0;\n  }\n  \n  if ((flag1 & 1) && (flag2 & 1)) {\n    *(uint32_t *)(param + 0x10) = 0xfffffffe;\n    perform_action2(param_array);\n  }\n  \n  if ((flag1 & 0x80) && (flag2 & 0x80)) {\n    *(uint32_t *)(param + 0x10) = 0xffffff7f;\n    do_nothing3(param_array);\n  }\n  \n  if ((flag1 & 0x40) && (flag2 & 0x40)) {\n    *(uint32_t *)(param + 0x10) = 0xffffffbf;\n    do_nothing4(param_array);\n  }\n  \n  if ((flag1 & 0x20) && (flag2 & 0x20)) {\n    *(uint32_t *)(param + 0x10) = 0xffffffdf;\n    do_nothing5(param_array);\n  }\n}\n",
            "called": [
                "FUN_08003f12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08004e12",
                "FUN_08003f14",
                "FUN_08003f16",
                "FUN_0800417a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "process_flags_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_offset_0800591e",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x134)": "offset1",
                "*(short *)(param_1 + 0x136)": "offset2",
                "result": "result"
            },
            "code": "ushort calculate_offset_0800591e(int base_address)\n{\n    ushort offset1 = *(short *)(base_address + 0x134);\n    ushort offset2 = *(short *)(base_address + 0x136);\n    ushort result = (offset1 + 0x40) - offset2 & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "index",
                "DAT_0800255c": "array_ptr"
            },
            "code": "void set_bit_in_array_08002540(uint index){\n                        if (index >= 0) {\n                            uint array_index = (index >> 5) + 0x60;\n                            uint* DAT_0800255c = (uint*)DAT_0800255c;\n                            uint bit_mask = 1 << (index & 0x1f);\n                            DAT_0800255c[array_index] = bit_mask;\n                        }\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "decode_08006344",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "output_buffer",
                "iVar1": "buffer_index",
                "pbVar2": "buffer",
                "pbVar3": "pbVar3",
                "uVar4": "decoded_byte"
            },
            "code": "uint decode_08006344(int input_length, byte input_byte, byte **output_buffer){\n  int buffer_index = 0;\n  uint decode_08006344d_byte = (uint)input_byte;\n  byte *buffer = *output_buffer;\n  int buffer_size = (int)(*output_buffer)[5];\n\n  if(buffer_size <= buffer_index){\n    return 0xffffffff;\n  }\n\n  if(decode_08006344d_byte == '\\n'){\n    if(buffer_index > 0){\n      int result = FUN_08006be0(input_length, output_buffer);\n      if(result == 0){\n        return decode_08006344d_byte;\n      }\n    }\n    return decode_08006344d_byte;\n  }\n\n  if(decode_08006344d_byte == '\\r'){\n    return decode_08006344d_byte;\n  }\n\n  if(buffer_size <= buffer_index + 1){\n    return 0xffffffff;\n  }\n\n  buffer[buffer_index++] = decode_08006344d_byte;\n\n  if(decode_08006344d_byte == 0x1b){\n    int result = FUN_080069e4(input_length, output_buffer, (int)((uint)(*output_buffer)[3] << 0x1c), (*output_buffer)[4], buffer);\n    if(result == 0){\n      return decode_08006344d_byte;\n    }\n  }\n\n  if(buffer_index >= buffer_size){\n    int result = FUN_08006be0(input_length, output_buffer);\n    if(result == 0){\n      return decode_08006344d_byte;\n    }\n  }\n\n  return decode_08006344d_byte;\n}",
            "called": [
                "FUN_08006be0",
                "FUN_080069e4",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "decode_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "check_input_is_not_null_080009c8",
                "in_ZR": "input_char",
                "FUN_080009b8": "call_function_to_get_input"
            },
            "code": "bool check_input_is_not_null_080009c8(void)\\n{\\n  char input_char;\\n  call_function_to_get_input();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_input_is_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "c",
                "puVar2": "ptr"
            },
            "code": "uint32_t process_input_08002db2(uint32_t **input)\n{\n    char c;\n    uint32_t *ptr;\n\n    c = *(char *)((int)input + 0x3d);\n    ptr = input[0xb];\n    if ((*(short *)(input + 10) == 0) && (c == '!')) {\n        if ((ptr == (uint32_t *)0x4) || ((ptr == (uint32_t *)0x8 || (ptr == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08002db0();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08002c4e();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_08002c4e();\n        }\n    }\n    else if ((c == '!') || ((*(char *)((int)input + 0x3e) == '@' && (c == '\"')))) {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            if (input[0x14] == (uint32_t *)0x0) {\n                if (input[0x13] == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    ptr = input[9];\n                    input[9] = (uint32_t *)((int)ptr + 1);\n                    (*input)[4] = (uint32_t)*(byte *)ptr;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            ptr = input[9];\n            input[9] = (uint32_t *)((int)ptr + 1);\n            (*input)[4] = (uint32_t)*(byte *)ptr;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "PTR_DAT_08001ccc": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_08001cc4() {\n  int* value_pointer = (int*)PTR_DAT_08001ccc;\n  int value = *value_pointer;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08001cd0",
                "FUN_08003688",
                "FUN_08003afa",
                "FUN_080020f0",
                "FUN_08004b94",
                "FUN_08004478",
                "FUN_08002384",
                "FUN_08003c90",
                "FUN_08001f84"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "check_and_set_flag_08003ea0",
                "param_1": "flag_ptr",
                "**param_1": "flag_value",
                "(*param_1)[1]": "second_flag_value",
                "FUN_08004d18": "call_some_function",
                "DAT_08003ed4": "data_section_ptr",
                "*(undefined4 *)(DAT_08003ed4 + 0x14)": "*data_section_ptr",
                "(undefined *)((int)param_1 + 0x11)": "*param_ptr"
            },
            "code": "void check_and_set_flag_08003ea0(uint **flag_ptr)\n{\n  uint flag_value = **flag_ptr;\n  uint second_flag_value = (*flag_ptr)[1];\n  if ((flag_value & 2) && (second_flag_value & 2)) {\n    call_some_function();\n    (*flag_ptr)[1] = 0xfffffffd;\n  }\n  uint *(undefined4 *)(DAT_08003ed4 + 0x14) = (uint *)(DAT_08003ed4 + 0x14);\n  *(undefined4 *)(DAT_08003ed4 + 0x14) = 0x20000;\n  uint *param_ptr = (uint *)((int)flag_ptr + 0x11);\n  *param_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flag_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_input_0800306c",
                "param_1": "input",
                "puVar1": "current_value"
            },
            "code": "int process_input_0800306c(uint **input)\n{\n    uint *current_value;\n    current_value = input[11];\n    if (*(short *)((int)input + 42) == 3) {\n        if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n            **input = **input & 0xfffffbff;\n        }\n        current_value = input[9];\n        input[9] = (uint *)((int)current_value + 1);\n        *(char *)current_value = (char)(*input)[4];\n        *(short *)((int)input + 42) = *(short *)((int)input + 42) + -1;\n    }\n    else if (*(short *)((int)input + 42) == 2) {\n        if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n            (*input)[1] = (*input)[1] & 0xfffffcff;\n            **input = **input | 0x200;\n        }\n        else {\n            if (current_value == (uint *)0x2) {\n                **input = **input | 0x400;\n            }\n            else {\n                **input = **input & 0xfffffbff;\n            }\n            (*input)[1] = (*input)[1] & 0xfffffcff;\n        }\n        current_value = input[9];\n        input[9] = (uint *)((int)current_value + 1);\n        *(char *)current_value = (char)(*input)[4];\n        *(short *)((int)input + 42) = *(short *)((int)input + 42) + -1;\n        current_value = input[9];\n        input[9] = (uint *)((int)current_value + 1);\n        *(char *)current_value = (char)(*input)[4];\n        *(short *)((int)input + 42) = *(short *)((int)input + 42) + -1;\n        *(undefined *)((int)input + 61) = 0x20;\n        input[12] = (uint *)0x0;\n        if (*(char *)((int)input + 62) == '@') {\n            *(undefined *)((int)input + 62) = 0;\n            do_nothing_08002f9a();\n        }\n        else {\n            *(undefined *)((int)input + 62) = 0;\n            do_nothing_08002c50();\n        }\n    }\n    else {\n        current_value = input[9];\n        input[9] = (uint *)((int)current_value + 1);\n        *(char *)current_value = (char)(*input)[4];\n        *(short *)((int)input + 42) = *(short *)((int)input + 42) + -1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_flag_set_0800548c",
                "param_1": "flag_index",
                "uVar1": "flag_value",
                "PTR_DAT_080054ac": "flag_ptr"
            },
            "code": "bool is_flag_set_0800548c(int flag_index) {\n    uint32_t* PTR_DAT_080054ac = PTR_DAT_080054ac + (uint32_t)*(byte *)(flag_index + 0x44) * 4;\n    uint32_t flag_value = FUN_080047e8(*PTR_DAT_080054ac);\n    return (flag_value & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_flag_set_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_at_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "int get_data_at_index_08004848(int index) {\n    switch(index) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_at_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "execute_function_08005d82",
                "FUN_08005d42": "call_helper_function"
            },
            "code": "void execute_function_08005d82(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "check_and_update_status_08006f92",
                "param_1": "input_param",
                "param_2": "param_offset",
                "iVar1": "status",
                "uVar2": "status_flag",
                "bVar3": "is_status_invalid"
            },
            "code": "void check_and_update_status_08006f92(undefined4 input_param, int param_offset)\n{\n    int status = FUN_08007048(input_param, *(short *)(param_offset + 0xe));\n    bool is_status_invalid = status == -1;\n    ushort status_flag = *(ushort *)(param_offset + 0xc);\n    if (is_status_invalid) {\n        status_flag &= 0xefff;\n    }\n    else {\n        *(int *)(param_offset + 0x54) = status;\n        status_flag |= 0x1000;\n    }\n    *(ushort *)(param_offset + 0xc) = status_flag;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_status_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "process_bits_and_call_080012c0",
                "param_1": "data_address",
                "param_2": "bit_mask",
                "uVar1": "bit_index",
                "FUN_08005848": "call_function",
                "FUN_080012a2": "finalize_process"
            },
            "code": "void process_bits_and_call_080012c0(int data_address, int bit_mask) {\n  uint bit_index;\n  for (bit_index = 0; (int)bit_index < 4; bit_index++) {\n    call_function(*(undefined *)(data_address + bit_index + 0xb), bit_mask >> (bit_index & 0xff) & 1);\n  }\n  finalize_process(data_address);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_bits_and_call_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_from_offset_08001f80",
                "param_1": "base_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_offset_08001f80(int base_address)\n{\n    int value = *(int *)(base_address + 0x28);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_flag_if_not_set_08001f84",
                "param_1": "flag_ptr",
                "param_2": "flag_value",
                "iVar1": "loop_counter",
                "iVar3": "flag_data",
                "local_14": "i",
                "PTR_DAT_08001ffc": "PTR_CONSTANT",
                "DAT_08002000": "DATA_CONSTANT"
            },
            "code": "int set_flag_if_not_set_08001f84(int *flag_ptr, uint32_t flag_value)\n{\n  int flag_data = *flag_ptr;\n  if ((*(uint32_t *)(flag_data + 8) & 1) == 0) {\n    *(uint32_t *)(flag_data + 8) = *(uint32_t *)(flag_data + 8) | 1;\n    for (uint32_t i = (uint32_t)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc >> 0x32); i != 0; i--) {\n    }\n    flag_data = FUN_08001cc4(flag_ptr, flag_value, (int)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint32_t *)(*flag_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      flag_data = FUN_08001cc4();\n    } while ((uint32_t)(flag_data - flag_data) < 3);\n    flag_ptr[10] = flag_ptr[10] | 0x10;\n    flag_ptr[0xb] = flag_ptr[0xb] | 1;\n    *(undefined *)(flag_ptr + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "process_data_08000bcc",
                "PTR_DAT_08000c90": "ptr_data_1",
                "FUN_08005848": "initialize_data",
                "PTR_DAT_08000c94": "ptr_data_2",
                "FUN_080057b4": "initialize_data",
                "PTR_DAT_08000c98": "ptr_data_3",
                "FUN_080013a4": "memset",
                "PTR_DAT_08000c9c": "ptr_data_4",
                "FUN_08001550": "memcpy",
                "PTR_DAT_08000ca0": "ptr_data_5",
                "FUN_0800135a": "increment_data",
                "FUN_08005c96": "perform_operation",
                "PTR_s_Reflow_08000ca4": "ref_data",
                "FUN_08001366": "increment_data",
                "PTR_s_Oven_1_2_08000ca8": "ptr_string_1",
                "do_nothing_080058e8": "wait_for_time",
                "PTR_DAT_08000cac": "ptr_string_3",
                "FUN_08005a68": "perform_operation",
                "PTR_DAT_08000cb0": "ptr_data_6",
                "FUN_080058e0": "get_data",
                "PTR_DAT_08000cb4": "ptr_data_7",
                "PTR_DAT_08000cb8": "ptr_data_8",
                "FUN_08000aec": "initialize_data"
            },
            "code": "void process_data_08000bcc(void)\n{\n  uint8_t *data_ptr1;\n  uint8_t *data_ptr2;\n  uint8_t *data_ptr3;\n  uint32_t temp_val;\n\n  data_ptr1 = PTR_DAT_08000c90;\n  initialize_data(*((uint32_t *)PTR_DAT_08000c90), 0);\n  initialize_data(*((uint32_t *)data_ptr1), 1);\n  data_ptr1 = PTR_DAT_08000c94;\n  initialize_data(*((uint32_t *)PTR_DAT_08000c94), 0);\n  initialize_data(*((uint32_t *)data_ptr1), 1);\n  data_ptr2 = PTR_DAT_08000c98;\n  initialize_data(*((uint32_t *)PTR_DAT_08000c98), 0);\n  initialize_data(*((uint32_t *)data_ptr2), 1);\n  initialize_data(*((uint32_t *)data_ptr1), 1);\n  data_ptr3 = PTR_DAT_08000c9c;\n  memset(PTR_DAT_08000c9c, 0, 8);\n  memcpy(data_ptr3, 0, PTR_DAT_08000ca0);\n  data_ptr3 += 8;\n  perform_operation(data_ptr3, PTR_s_Reflow_08000ca4);\n  increment_data(data_ptr3, 0, 1);\n  perform_operation(data_ptr3, PTR_s_Oven_1_2_08000ca8);\n  increment_data(data_ptr3, 0, 1);\n  perform_operation(data_ptr3, ptr_string_2);\n  initialize_data(*((uint32_t *)data_ptr1), 0);\n  wait_for_time(0x9c4);\n  increment_data(data_ptr3, 0, 1);\n  perform_operation(PTR_DAT_08000cac, 0xe100, 6);\n  initialize_data(*((uint32_t *)data_ptr2), 1);\n  *(uint32_t *)PTR_DAT_08000cb0 = 2000;\n  temp_val = get_data();\n  *(uint32_t *)PTR_DAT_08000cb4 = temp_val;\n  temp_val = get_data();\n  *(uint32_t *)PTR_DAT_08000cb8 = temp_val;\n  initialize_data(0);\n  return;\n}\n",
            "called": [
                "FUN_08005c96",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_080057b4",
                "FUN_080058e0",
                "FUN_08001366",
                "FUN_08005848",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "process_data_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_param_0800281e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag",
                "*(int *)(param_1 + 0x10)": "*(int *)(base_address + 0x10)"
            },
            "code": "void set_param_0800281e(int base_address, int value, int flag) {\n  if (flag == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_param_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "puVar1": "pointer_to_other_functions",
                "iVar2": "num_other_functions_bytes",
                "iVar3": "i",
                "do_nothing_08007328": "do_nothing"
            },
            "code": "void execute_functions_08006198(void)\n{\n  int num_functions = (int)PTR_FUNCTIONS_END - (int)PTR_FUNCTIONS_START;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(code **)(PTR_FUNCTIONS_START + i * 4))();\n  }\n  do_nothing();\n  int num_other_functions = (int)PTR_OTHER_FUNCTIONS_END - (int)PTR_OTHER_FUNCTIONS_START;\n  for (int i = 0; i < num_other_functions >> 2; i++) {\n    (**(code **)(PTR_OTHER_FUNCTIONS_START + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "process_result_08007048",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "return_value"
            },
            "code": "void process_result_08007048(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *data_ptr;\n    int return_value;\n\n    data_ptr = PTR_DAT_08007068;\n    *(undefined4 *)PTR_DAT_08007068 = 0;\n    return_value = execute_task(arg1, arg2, arg3, arg3, arg3);\n    if ((return_value == -1) && (*(int *)data_ptr != 0)) {\n        *result = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_result_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "calculate_shift_amount_08003c50",
                "uVar1": "result",
                "FUN_08003c44": "get_function_result",
                "PTR_DAT_08003c6c": "shift_table",
                "DAT_08003c68": "data_pointer"
            },
            "code": "uint calculate_shift_amount_08003c50(void)\n{\n  uint result;\n  uint function_result = get_function_result();\n  uint shift_index = (*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint shift_amount = PTR_DAT_08003c6c[shift_index];\n  result = function_result >> shift_amount;\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input_data",
                "param_2": "output_length",
                "param_3": "output_data",
                "param_4": "param_4",
                "param_5": "callback_fn",
                "iVar1": "loop_index",
                "uVar2": "i",
                "uVar3": "output_data_length",
                "bVar4": "is_not_4_byte_aligned",
                "*param_2": "input_data",
                "*(char *)((int)param_2 + 0x43)": "is_output_data_length_padded",
                "*param_3": "max_output_length",
                "*(undefined *)((int)param_2 + uVar2 + 0x43)": "padded_output_data_length",
                "*(undefined *)((int)param_2 + uVar2 + 0x44)": "last_byte_of_padded_output_data_length",
                "param_2[2]": "output_data_length",
                "param_2[3]": "output_data_size",
                "param_2[4]": "input_data_size"
            },
            "code": "int process_data_080065c0(uint32_t input_data, uint32_t *output_length, uint32_t *output_data, uint32_t param_4, code *callback_fn)\\n{\\n  int ret_val = 0;\\n  uint32_t max_output_length = param_4;\\n\\n  if (input_data < output_length)\\n  {\\n    max_output_length = output_length;\\n  }\\n\\n  *output_data = max_output_length;\\n\\n  if (*(char *)((int)output_length + 0x43) != \"\\0\")\\n  {\\n    *output_data = max_output_length + 1;\\n  }\\n\\n  if ((int)(input_data << 0x1a) < 0)\\n  {\\n    *output_data = *output_data + 2;\\n    *(undefined *)((int)output_length + 0x44) = *(undefined *)((int)output_length + 0x45);\\n    *(undefined *)((int)output_length + 0x43) = 0x30;\\n  }\\n\\n  uint32_t i = *output_length & 6;\\n\\n  if (i == 0)\\n  {\\n    while (i < (int)(output_length[3] - *output_data))\\n    {\\n      int callback_ret_val = (*callback_fn)(input_data, param_4, (int)output_length + 0x19, 1);\\n      if (callback_ret_val == -1)\\n      {\\n        return 0xffffffff;\\n      }\\n      i++;\\n    }\\n  }\\n\\n  uint32_t output_data_length = 0;\\n\\n  if (*(byte *)((int)output_length + 0x43) != 0)\\n  {\\n    output_data_length = 1;\\n  }\\n\\n  int callback_ret_val = (*callback_fn)(input_data, param_4, (int)output_length + 0x43, output_data_length);\\n\\n  if (callback_ret_val != -1)\\n  {\\n    uint32_t output_length_diff = output_length[3];\\n    bool bVar1 = (input_data & 6) != 4;\\n\\n    if (bVar1)\\n    {\\n      output_length_diff = 0;\\n    }\\n\\n    if (!bVar1)\\n    {\\n      output_length_diff = output_length_diff - *output_data;\\n    }\\n\\n    output_length_diff = output_length_diff & ~((int)output_length_diff >> 0x1f);\\n\\n    if (max_output_length < output_length)\\n    {\\n      output_length_diff = output_length_diff + (output_length - max_output_length);\\n    }\\n\\n    while (output_length_diff > output_data_length)\\n    {\\n      int callback_ret_val = (*callback_fn)(input_data, param_4, (int)output_length + 0x1a, 1);\\n      if (callback_ret_val == -1)\\n      {\\n        return 0xffffffff;\\n      }\\n      output_data_length++;\\n    }\\n    ret_val = 0;\\n  }\\n  else\\n  {\\n    ret_val = 0xffffffff;\\n  }\\n\\n  return ret_val;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "get_value_at_offset_080054d4",
                "param_1": "offset",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "iVar1": "status",
                "PTR_DAT_0800550c": "BUFFER_PTR"
            },
            "code": "int get_value_at_offset_080054d4(int offset, char* buffer, int buffer_size, int default_value) {\n  if (offset == 0) {\n    return default_value;\n  }\n  int status = get_status();\n  if (status == 0) {\n    *buffer = *(char*)(offset + 0x45);\n    copy_bytes(*(int*)(PTR_DAT_0800550c + (uint)*(char*)(offset + 0x44) * 4), offset + 0x45, 1, PTR_DAT_0800550c, buffer_size);\n    return 0;\n  }\n  return default_value;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08001b48",
                "FUN_08004d40"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_bit_and_clear_mask_08004d44",
                "puVar1": "ptr",
                "*DAT_08004d84": "data[0]",
                "DAT_08004d84": "DAT_PTR",
                "DAT_08004d88": "DAT_MASK",
                "*puVar1": "*ptr",
                "puVar1[1]": "ptr[1]",
                "puVar1[2]": "ptr[2]",
                "DAT_08004d8c": "DAT_PTR_2"
            },
            "code": "void set_bit_and_clear_mask_08004d44(uint *data)\n{\n  uint *ptr = data;\n  *ptr |= 1;\n  ptr[1] &= DAT_08004d88 & ptr[1];\n  *ptr &= DATA_MASK_1;\n  *ptr &= DATA_MASK_2;\n  ptr[1] &= DATA_MASK_3;\n  ptr[2] = 0x9f0000;\n  *(uint *)(DAT_08004d84 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_mask_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_param_0800282c",
                "param_1": "new_param",
                "DAT_08002844": "data_start",
                "data_ptr": "data_pointer",
                "call_function": "call_function"
            },
            "code": "void update_param_0800282c(uint new_param)\n{\n  uint* data_ptr = (uint*)(DAT_08002844 + 0x14);\n  if ((*data_ptr & new_param) != 0)\n  {\n    *data_ptr = new_param;\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_param_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "count_bits_set_to_1_080015b2",
                "param_1": "data",
                "iVar1": "bit_value",
                "uVar2": "bit_index",
                "uVar3": "count"
            },
            "code": "uint count_bits_set_to_1_080015b2(uint8_t *data)\n{\n  int bit_index;\n  uint bit_mask;\n  uint count = 0;\n  set_bit(data[1],0);\n  for (bit_index = 31; bit_index >= 0; bit_index--) {\n    set_bit(data[2],1);\n    int bit_value = get_bit_value(*data);\n    if (bit_value != 0) {\n      count = count | 1 << (bit_index & 0xff);\n    }\n    set_bit(data[2],0);\n  }\n  set_bit(data[1],1);\n  return count;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_1_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "calculate_shifted_value_0800040c",
                "param_1": "input",
                "uVar1": "result_high",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "temp_shift_amount",
                "in_r12": "mask",
                "bVar5": "is_negative_shift_amount",
                "bVar6": "is_zero_shift_amount",
                "bVar7": "carry_flag",
                "LAB_08000318": "end_of_shift"
            },
            "code": "ulonglong calculate_shifted_value_0800040c(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 21;\n  bool is_negative_shift = shift_amount < 32;\n  uint shifted_input = input << (shift_amount & 0xff);\n  uint mask = is_negative_shift ? 0 : 0xffffffff << (32 - shift_amount);\n  shifted_input |= mask;\n  ulonglong result = shifted_input;\n  if (shift_amount < 1075) {\n    result |= (ulonglong)input << (1075 - shift_amount);\n  } else {\n    uint inverse_shift = ~(shift_amount - 1074);\n    if (inverse_shift > 30) {\n      result = (ulonglong)shifted_input >> (inverse_shift - 30);\n    } else {\n      int new_shift = inverse_shift - 19;\n      if (new_shift == 0 || (new_shift < 0) != ((inverse_shift - 30) < 12)) {\n        result |= (ulonglong)shifted_input >> (new_shift & 0xff);\n        result |= (ulonglong)input << (32 - new_shift & 0xff);\n      } else {\n        result = (ulonglong)shifted_input >> (12 - new_shift & 0xff);\n        result |= (ulonglong)input << (new_shift & 0xff);\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_from_input_08004df4",
                "param_1": "input_value",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08004df4(int input_value) {\n    int result = input_value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "process_input_08004bb0",
                "param_1": "input",
                "uVar1": "bit_shifted_input",
                "local_20": "bit_mask",
                "local_14": "constant",
                "DAT_08004c28": "global_variable_1",
                "DAT_08004c2c": "global_variable_2",
                "param_2": "param_2_new",
                "param_3": "param_3_new",
                "local_1c": "param_2_new",
                "local_18": "param_3_new"
            },
            "code": "void process_input_08004bb0(uint32_t input, undefined4 param_2, undefined4 param_3)\n{\n  uint32_t bit_shifted_input = (input << 24) >> 28;\n  uint16_t bit_mask = 1 << (input & 0xf) & 0xffff;\n  uint32_t constant = 3;\n  *(uint32_t *)(DAT_08004c28 + 0x18) = *(uint32_t *)(DAT_08004c28 + 0x18) | 1;\n  if ((input - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) = *(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((input == 0xf) || (input == 0x13)) || (input == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) = *(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x2000000;\n  }\n  undefined4 param_2_new = param_2;\n  undefined4 param_3_new = param_3;\n  process_data(bit_shifted_input, &bit_mask);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_input_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_callback_if_flag_set_08004df8",
                "param_1": "flag_value",
                "iVar1": "callback_ptr",
                "FUN_08004df4": "get_callback_ptr"
            },
            "code": "void execute_callback_if_flag_set_08004df8(int flag_value){\n  int callback_ptr = get_callback_ptr();\n  if ((*(code **)(callback_ptr + 0x4c) != (code *)0x0) && (*(char *)(flag_value + 0x1c) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x4c))(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "set_default_values_08001510",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "param_7": "value6",
                "FUN_080014ba": "set_values"
            },
            "code": "undefined4* set_default_values_08001510(undefined4* data, undefined4 value1, undefined4 value2, undefined4 value3, undefined value4, undefined value5, undefined value6)\n{\n    data[1] = 0;\n    *data = PTR_PTR_DEFAULT_FUNCTION;\n    set_values(data, 1, value1, 0xff, value2, value3, value4, value5, value6, 0, 0, 0, 0);\n    return data;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "set_default_values_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "process_data_08002af8",
                "param_1": "data_pointer",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "additional_data",
                "uVar1": "result",
                "puVar2": "pointer_to_data"
            },
            "code": "int process_data_08002af8(uint **data_pointer, uint *data, int data_size, uint *additional_data) {\n  int result;\n  uint *pointer_to_data;\n  if (*(char *)((int)data_pointer + 0x3d) == '(') {\n    if (data == NULL) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_pointer + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_pointer + 0xf) = 1;\n      pointer_to_data = *data_pointer;\n      if ((*pointer_to_data & 1) == 0) {\n        *pointer_to_data = *pointer_to_data | 1;\n      }\n      **data_pointer = **data_pointer & 0xfffff7ff;\n      *(undefined *)((int)data_pointer + 0x3d) = 0x29;\n      *(undefined *)((int)data_pointer + 0x3e) = 0x20;\n      result = 0;\n      data_pointer[0x10] = NULL;\n      data_pointer[9] = data;\n      *(short *)((int)data_pointer + 0x2a) = (short)data_size;\n      data_pointer[0xb] = additional_data;\n      *(undefined2 *)(data_pointer + 10) = *(undefined2 *)((int)data_pointer + 0x2a);\n      *(undefined *)(data_pointer + 0xf) = 0;\n      (*data_pointer)[1] = (*data_pointer)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "process_data_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "set_flags_080028de",
                "param_1": "params",
                "puVar1": "flag_ptr"
            },
            "code": "uint set_flags_080028de(uint **params)\n{\n  uint *flag_ptr = params[0xb];\n  if ((*(char *)((int)params + 0x3d) == '\"') &&\n     ((params[0x14] != NULL || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[0x14] == NULL) && (params[4] == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      params[0x14] = (uint *)((int)params[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (flag_ptr == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) ||\n                (params[0xc] == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[0x14] = NULL;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_flags_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_data_based_on_conditions_08002848",
                "param_1": "data",
                "*param_1": "data_index",
                "param_1[0x11]": "data_value",
                "param_1[0x14]": "data_14",
                "*(char *)((int)param_1 + 0x3e)": "condition_1",
                "*(char *)((int)param_1 + 0x3d)": "condition_2",
                "*(uint *)(*param_1 + 0x10)": "result"
            },
            "code": "int set_data_based_on_conditions_08002848(int *data)\n{\n    int condition_1 = *(char *)((int)data + 0x3e);\n    int condition_2 = *(char *)((int)data + 0x3d);\n    int data_index = *data;\n    int data_value = data[0x11];\n    int data_14 = data[0x14];\n    int result;\n    if (condition_1 == '@') {\n        if (data_14 == 0) {\n            *(uint *)(data_index + 0x10) = data_value & 0xfe;\n        }\n        else {\n            *(uint *)(data_index + 0x10) = data_value & 0xffU | 1;\n        }\n    }\n    else if (data[4] == 0x4000) {\n        if (condition_2 == '!') {\n            *(uint *)(data_index + 0x10) = data_value & 0xfe;\n        }\n        else {\n            *(uint *)(data_index + 0x10) = data_value & 0xffU | 1;\n        }\n    }\n    else if (data_14 == 0) {\n        *(uint *)(data_index + 0x10) = (uint)(data_value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (data_14 == 1) {\n        *(uint *)(data_index + 0x10) = (uint)(data_value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_data_based_on_conditions_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "decrement_by_four_08004e70",
                "param_1": "value",
                "return": "result"
            },
            "code": "int decrement_by_four_08004e70(int value)\n{\n    int result = value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "decrement_by_four_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_flags_080020f0",
                "param_1": "data",
                "iVar1": "updated_time",
                "iVar2": "current_data"
            },
            "code": "int check_and_update_flags_080020f0(int *data)\n{\n  int current_data = *data;\n  if ((*(uint *)(current_data + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(current_data + 8) = *(uint *)(current_data + 8) & 0xfffffffe;\n  int initial_time = FUN_08001cc4();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    int updated_time = FUN_08001cc4();\n  } while ((uint)(updated_time - initial_time) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "process_data_08006e10",
                "param_1": "data",
                "param_2": "data_array",
                "uVar1": "flag",
                "iVar2": "value1",
                "local_18": "value2",
                "local_14": "ptr1",
                "PTR_LAB_08006c34_1_08006e8c": "ptr2",
                "FUN_08006dc8": "calculate_flag",
                "FUN_08006288": "calculate_value",
                "FUN_08007028": "calculate_ptr"
            },
            "code": "void process_data_08006e10(int data, int *data_array) {\n  ushort flag;\n  int value1;\n  int value2;\n  int *ptr1;\n  int *PTR_LAB_08006c34_1_08006e8c;\n  \n  if ((int)((uint)*(ushort *)(data_array + 3) << 0x1e) >= 0) {\n    value1 = data;\n    ptr1 = data_array;\n    flag = calculate_flag(data, data_array, &value1, &ptr1);\n    value2 = calculate_value(data, value1);\n    if (value2 != 0) {\n      *(undefined **)(data + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *data_array = value2;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[4] = value2;\n      data_array[5] = value1;\n      PTR_LAB_08006c34_1_08006e8c = calculate_ptr(data, (int)*(short *)((int)data_array + 0xe));\n      if ((ptr1 != (int *)0x0) && (PTR_LAB_08006c34_1_08006e8c != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "process_data_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_data_08004e74",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "data_size",
                "param_4": "param_4",
                "iVar1": "data"
            },
            "code": "void process_data_08004e74(int data_ptr, int flag, int data_size, undefined4 param_4) {\n  int data = FUN_08004e70();\n  if (data_size == *(int *)(data_ptr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(data + 0x88) = 0;\n      *(undefined *)(data + 0x5c) = 0;\n      if (*(code **)(data + 100) != (code *)0x0) {\n        (**(code **)(data + 100))();\n      }\n      FUN_08002af8(data_ptr, data + 0x68, *(undefined *)(data + 0x88), 8);\n      return;\n    }\n    *(undefined *)(data + 0x5c) = 1;\n    FUN_08002b84(data_ptr, data + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08004e70",
                "FUN_08002af8",
                "FUN_08002b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_data_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "process_input_08004c30",
                "param_1": "address",
                "param_2": "input",
                "param_3": "input_length",
                "param_4": "parameter",
                "FUN_0800281e": "execute_function"
            },
            "code": "void process_input_08004c30(undefined4 address, undefined2 input, int input_length, undefined4 parameter) {\n  if (input_length == 0) {\n    execute_function(address, input, 0, parameter, parameter);\n    return;\n  }\n  execute_function(address, input, 1, parameter, parameter);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "process_input_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "update_counter_08006f38",
                "param_1": "value",
                "param_2": "counter_info",
                "iVar1": "result",
                "uVar2": "counter_value",
                "bVar3": "is_result_positive"
            },
            "code": "void update_counter_08006f38(int value, int* counter_info)\n{\n  int result = get_result(value, *(short *)(counter_info + 0xe));\n  bool is_result_positive = result >= 0;\n  uint counter_value;\n  if (is_result_positive) {\n    counter_value = *(int *)(counter_info + 0x54) + result;\n  }\n  else {\n    counter_value = *(ushort *)(counter_info + 0xc) & 0xffffefff;\n  }\n  if (is_result_positive) {\n    *(uint *)(counter_info + 0x54) = counter_value;\n  }\n  if (!is_result_positive) {\n    *(short *)(counter_info + 0xc) = (short)counter_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "update_counter_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "get_result_08004cce",
                "param_1": "input",
                "uVar1": "result",
                "FUN_08004cb2": "calculate_result"
            },
            "code": "int get_result_08004cce(int input){\n  int result;\n  if (input == -1) {\n    result = -1;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004b3c",
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "get_result_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "process_data_08003ad4",
                "param_1": "data",
                "param_2": "length",
                "puVar1": "data_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "DAT_08003c34": "data_length_ptr",
                "DAT_08003c38": "data_buffer_ptr",
                "data_value": "data_buffer_value",
                "data_1_value": "data_1_buffer_value"
            },
            "code": "uint32_t process_data_08003ad4(uint32_t* data, uint32_t length)\n{\n    uint32_t* data_ptr = data;\n    uint32_t* DAT_08003c34 = (uint32_t*)0x08003c34;\n    uint32_t* DAT_08003c38 = (uint32_t*)0x08003c38;\n    uint32_t data_value = *DAT_08003c38;\n    if (((data_value & 7) < length) && (data_value = (data_value & 0xfffffff8) | length, length != (data_value & 7))))\n    {\n        return 1;\n    }\n    if ((*data_ptr & 2) != 0)\n    {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffff0f) | data_ptr[2];\n    }\n    if ((*data_ptr & 1) != 0)\n    {\n        uint32_t data_1_value = data_ptr[1];\n        if (data_1_value == 1)\n        {\n            if ((DAT_08003c38[0] & 0x20000) == 0)\n            {\n                return 1;\n            }\n        }\n        else if ((data_1_value != 2) && ((DAT_08003c38[0] & 2) == 0))\n        {\n            return 1;\n        }\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xfffffffc) | data_1_value;\n        uint32_t start_time = get_time();\n        if (data_ptr[1] == 1)\n        {\n            while ((DAT_08003c38[1] & 0xc) != 4)\n            {\n                uint32_t current_time = get_time();\n                if (5000 < (current_time - start_time))\n                {\n                    return 3;\n                }\n            }\n        }\n        else if (data_ptr[1] == 2)\n        {\n            while ((DAT_08003c38[1] & 0xc) != 8)\n            {\n                uint32_t current_time = get_time();\n                if (5000 < (current_time - start_time))\n                {\n                    return 3;\n                }\n            }\n        }\n        else\n        {\n            while ((DAT_08003c38[1] & 0xc) != 0)\n            {\n                uint32_t current_time = get_time();\n                if (5000 < (current_time - start_time))\n                {\n                    return 3;\n                }\n            }\n        }\n    }\n    data_value = *DAT_08003c34;\n    if ((length < (data_value & 7)) && (data_value = (data_value & 0xfffffff8) | length, length != (data_value & 7))))\n    {\n        return 1;\n    }\n    if ((*data_ptr & 4) != 0)\n    {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xfffff8ff) | data_ptr[3];\n    }\n    if ((*data_ptr & 8) != 0)\n    {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffc7ff) | (data_ptr[4] << 3);\n    }\n    uint32_t result = process_data_08003ad4_2();\n    uint32_t* ptr = (uint32_t*)0x08003c40;\n    *ptr = result >> ((DAT_08003c38[1] << 0x18) >> 0x1c);\n    process_data_08003ad4_3(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_data_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_bit_08004110",
                "param_1": "data",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "uint": "uint32_t",
                "4": "1 << 2"
            },
            "code": "void set_bit_08004110(uint32_t *data, uint8_t bit_index, uint32_t bit_value) {\n    uint32_t mask = ~(4 << (bit_index & 0xff));\n    *data = (*data & mask) | (bit_value << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "set_bit_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_if_value_in_array_08004ce2",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int check_if_value_in_array_08004ce2(int value, char *array) {\n    if (value == -1) {\n        return 0;\n    }\n    while (true) {\n        if (*array == -1) {\n            return 0;\n        }\n        if (value == *array) {\n            break;\n        }\n        array += 12;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "check_if_value_in_array_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "process_data_08005568",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "bVar1": "data_index",
                "PTR_DAT_080055b0": "data_array_ptr",
                "PTR_DAT_080055b4": "data_ptr_array_ptr",
                "FUN_08002494": "call_function_1",
                "FUN_080024f8": "call_function_2",
                "FUN_0800455a": "call_function_3",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(data_ptr + 0x44)",
                "*(undefined4 *)(PTR_DAT_080055b0 + (uint)bVar1 * 4)": "*(undefined4 *)(data_array_ptr + (uint)data_index * 4)",
                "*(int *)(PTR_DAT_080055b4 + (uint)bVar1 * 4)": "*(int *)(data_ptr_array_ptr + (uint)data_index * 4)",
                "*(char *)(param_1 + 0x5a)": "*(char *)(data_ptr + 0x5a)",
                "*(undefined4 *)(PTR_DAT_080055b8 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(undefined4 *)(data_ptr_array_2_ptr + (uint)*(byte *)(data_ptr + 0x44) * 4)",
                "*(int *)(param_1 + 100)": "*(int *)(data_ptr + 100)",
                "*(ushort *)(param_1 + 0x6a)": "*(ushort *)(data_ptr + 0x6a)"
            },
            "code": "void process_data_08005568(int data_ptr, int new_data) {\n  if (data_ptr != 0) {\n    byte data_index = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_080055b0 + (uint)bVar1 * 4) = new_data;\n    *(int *)(PTR_DAT_080055b4 + (uint)bVar1 * 4) = data_ptr;\n    call_function_1((int)*(char *)(data_ptr + 0x5a), 0, 2);\n    call_function_2((int)*(char *)(data_ptr + 0x5a));\n    call_function_3(*(undefined4 *)(PTR_DAT_080055b8 + (uint)*(byte *)(param_1 + 0x44) * 4), *(int *)(data_ptr + 100) + (uint)*(ushort *)(data_ptr + 0x6a), 1);\n  }\n  return;\n}\n",
            "called": [
                "FUN_0800455a",
                "FUN_08002494",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "data_result",
                "iVar2": "result"
            },
            "code": "int process_data_08004478(int *data_ptr, ushort *data, int data_length, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int result;\n  if (*(char *)((int)data_ptr + 0x39) == ' ')\n  {\n    if (data == (ushort *)0x0)\n    {\n      result = 1;\n    }\n    else if (data_length == 0)\n    {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01')\n    {\n      result = 2;\n    }\n    else\n    {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(data_ptr + 9) = (short)data_length;\n      *(short *)((int)data_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0)\n      {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000)\n        {\n          result = process_data_08004478_part(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0)\n          {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data & 0x1ff;\n          if (data_ptr[4] == 0)\n          {\n            data = data + 1;\n          }\n          else\n          {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else\n        {\n          result = process_data_08004478_part(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0)\n          {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = process_data_08004478_part(data_ptr, 0x40, 0, uVar1, param_4);\n      if (result == 0)\n      {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else\n      {\n        result = 3;\n      }\n    }\n  }\n  else\n  {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_game_08005f5e",
                "FUN_08002470": "initialize_player",
                "FUN_08001c32": "initialize_board"
            },
            "code": "void initialize_game_08005f5e(void)\n{\n  initialize_player(3);\n  initialize_board();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_game_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08005cb6(void *function_pointer){ (**(void (**)(void))function_pointer)(); }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005d42",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "calculate_shifted_value_08003c70",
                "uVar1": "shifted_value",
                "FUN_08003c44": "get_value",
                "PTR_DAT_08003c8c": "data_array",
                "DAT_08003c88": "data_array"
            },
            "code": "uint calculate_shifted_value_08003c70(void)\n{\n  uint shifted_value;\n  shifted_value = get_value();\n  int index = *(int *)(PTR_DAT_08003c8c + 4) << 0x12;\n  uint shift_amount = index >> 0x1d;\n  uint result = shifted_value >> shift_amount;\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "find_value_in_data_080053d4",
                "param_1": "value",
                "param_2": "data_length",
                "cVar1": "target_char",
                "iVar2": "start_time",
                "iVar3": "target_index",
                "uVar4": "i"
            },
            "code": "uint find_value_in_data_080053d4(uint value, uint data_length)\n{\n  int start_time = get_current_time();\n  char target_char = DATA_ARRAY[1];\n  int target_index = find_index_of_char(target_char, DATA_ARRAY);\n  if (target_index == -1) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(DATA_ARRAY + 4*i) == 0 ||\n          (target_index = find_index_of_char(target_char, DATA_ARRAY),\n          **(int **)(DATA_ARRAY + 4*i) != target_index))))) {\n    i++;\n  }\n  if (4 < i) {\n    if ((4 < DATA_ARRAY[0x44]) && (do_something(), 4 < DATA_ARRAY[0x44])) {\n      return 0;\n    }\n    i = (uint)DATA_ARRAY[0x44];\n  }\n  do {\n    target_index = do_something_else(*(undefined4 *)(DATA_ARRAY + 4*i), value, data_length & 0xffff, 1000);\n    if (target_index == 0) {\n      return data_length;\n    }\n    target_index = get_current_time();\n  } while ((uint)(target_index - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "find_value_in_data_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "process_input_08002b84",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "data_len",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int process_input_08002b84(uint **input_ptr, uint *input_data, int data_len, uint *output_data){\n  int result = 0;\n  uint *ptr = *input_ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (data_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr |= 1;\n      }\n      **input_ptr &= 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = '*';\n      *(undefined *)((int)input_ptr + 0x3e) = ' ';\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)data_len;\n      input_ptr[0xb] = output_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "process_input_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "execute_function_with_params_08004c48",
                "param_1": "function_ptr",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "FUN_08002810": "execute_function"
            },
            "code": "void execute_function_with_params_08004c48(void* function_ptr, uint16_t param_1, void* param_2, void* param_3, void* param_4)\n{\n  execute_function(function_ptr, param_1, param_2, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_bits_0800042c",
                "param_1": "number",
                "uVar1": "result",
                "uVar2": "abs_number",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount",
                "uVar6": "sign_bit",
                "in_r12": "high_bits",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "carry"
            },
            "code": "ulonglong calculate_bits_0800042c(uint number)\n{\n    uint abs_number = number;\n    if (number == 0)\n    {\n        return 0;\n    }\n    uint sign_bit = number & 0x80000000;\n    if ((int)sign_bit < 0)\n    {\n        abs_number = -number;\n    }\n    uint leading_zeroes = count_leading_zeroes(abs_number);\n    uint shift_amount = leading_zeroes + 0x15;\n    bool carry = shift_amount < 0x20;\n    if (shift_amount < 0x20)\n    {\n        carry = SCARRY4(leading_zeroes, 0xc);\n        leading_zeroes++;\n        if (leading_zeroes == 0)\n        {\n            carry = !carry;\n        }\n        shift_amount = leading_zeroes;\n        uint result = abs_number << (shift_amount & 0xff);\n        abs_number = abs_number >> ((0xcU - leading_zeroes) & 0xff);\n        return CONCAT44(abs_number | (0x432 - shift_amount) * 0x100000 | sign_bit, result);\n    }\n    uint trailing_zeroes = 0x20 - shift_amount;\n    uint result = abs_number << (leading_zeroes & 0xff);\n    if (carry)\n    {\n        result |= 0U >> (trailing_zeroes & 0xff);\n    }\n    uint high_bits = 0;\n    if (carry)\n    {\n        high_bits = 0 << (leading_zeroes & 0xff);\n    }\n    if (shift_amount < 0x433)\n    {\n        return CONCAT44(result | sign_bit, high_bits);\n    }\n    uint excess_bits = ~(0x432 - shift_amount);\n    if (excess_bits > 0x1e)\n    {\n        return CONCAT44(number, result >> ((excess_bits - 0x1f) & 0xff)) & 0x80000000ffffffff;\n    }\n    int shift = excess_bits - 0x13;\n    if (shift == 0 || (shift < 0) != SCARRY4(excess_bits - 0x1f, 0xc))\n    {\n        excess_bits++;\n        return CONCAT44(sign_bit | result >> (excess_bits & 0xff), high_bits >> (excess_bits & 0xff) | result << ((0x20 - excess_bits) & 0xff));\n    }\n    return CONCAT44(number, high_bits >> ((0x20 - (0xcU - shift)) & 0xff) | result << ((0xcU - shift) & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_bits_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "run_program_08005f6c",
                "FUN_08000bcc": "initialize_data",
                "FUNC_08000cd0": "process_input",
                "FUN_08005a18": "process_output",
                "DAT_08005f88": "data_flag"
            },
            "code": "void run_program_08005f6c(void)\n{\n  do_nothing();\n  initialize_data();\n  do {\n    do {\n      process_input();\n    } while (DAT_08005f88 == 0);\n    process_output();\n  } while (true);\n}",
            "called": [
                "FUN_08005f5c",
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "run_program_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_pointer_08005cc0",
                "param_1": "function_pointer",
                "param_2": "data",
                "param_3": "size",
                "param_4": "callback",
                "PTR_DAT_08005cd0": "data",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void execute_function_pointer_08005cc0(int *function_pointer, unsigned char *PTR_DAT_08005cd0, int size, void *callback, undefined4 param_4) {\n  (**(code **)(*function_pointer + 4))(function_pointer, PTR_DAT_08005cd0, size, callback, param_4);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "processParam_0800706c",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "ptr",
                "iVar2": "funcResult"
            },
            "code": "void processParam_0800706c(int *result, undefined4 param1, undefined4 param2, undefined4 param3)\n{\n  undefined *ptr = PTR_DAT_0800708c;\n  *(undefined4 *)PTR_DAT_0800708c = 0;\n  int funcResult = FUN_0800572c(param1, param2, param3, param3, param3);\n  if ((funcResult == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "processParam_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "process_flags_08002624",
                "param_1": "flags",
                "param_2": "input_flags",
                "puVar1": "target",
                "uVar2": "flag_val",
                "uVar3": "i",
                "uVar4": "target_val",
                "uVar5": "i",
                "uVar6": "set_target_val",
                "uVar7": "set_flag_val",
                "iVar8": "set_target_index",
                "uVar9": "set_flag_index",
                "iVar10": "set_flag_index",
                "DAT_080027f8": "PTR_DAT_080027f8",
                "DAT_080027fc": "PTR_DAT_080027fc",
                "DAT_08002800": "PTR_DAT_08002800",
                "DAT_08002804": "PTR_DAT_08002804",
                "DAT_08002808": "PTR_DAT_08002808"
            },
            "code": "void process_flags_08002624(uint *flags, uint *input_flags)\n{\n    uint *target;\n    uint flag_bit;\n    uint flag_val;\n    uint i;\n    uint target_val;\n    uint set_target_val;\n    uint set_flag_val;\n    uint set_target_index;\n    uint set_flag_index;\n    uint *target_array;\n\n    target_val = 0;\n    flag_val = 0;\n    for (i = 0; i <= 0xf; i++) {\n        if (i > 0xf) {\n            return;\n        }\n\n        flag_bit = 1 << (i & 0xff);\n        flag_val = *input_flags & flag_bit;\n        if (flag_bit == flag_val) {\n            target = &flags[i >> 3];\n            target_val = *target;\n\n            switch (input_flags[1]) {\n                case 0:\n                    if (input_flags[1] == 0) {\n                        target_val = input_flags[3];\n                    }\n                    else if (input_flags[1] == 1) {\n                        target_array = &flags[4];\n                        set_target_index = 0;\n                        set_flag_index = i & 3;\n                        set_target_val = flag_bit;\n                        set_flag_val = set_flag_index;\n                        goto set_target_value;\n                    }\n                    break;\n                case 1:\n                    target_array = &flags[5];\n                    set_target_index = 1;\n                    set_flag_index = i & 3;\n                    set_target_val = flag_bit;\n                    set_flag_val = set_flag_index;\n                    goto set_target_value;\n                case 2:\n                    target_val = input_flags[3] + 8;\n                    break;\n                case 3:\n                    target_val = 0;\n                    break;\n                case 0x11:\n                    target_val = input_flags[3] + 4;\n                    break;\n                case 0x12:\n                    target_val = input_flags[3] + 0xc;\n                    break;\n                default:\n                    if (input_flags[1] < 0x13) {\n                        if (input_flags[1] == 2) {\n                            target_val = input_flags[3] + 8;\n                        }\n                        else if (input_flags[1] == 1) {\n                            target_val = input_flags[3];\n                        }\n                    }\n                    else {\n                        if (input_flags[1] == DAT_08002804) {\n                            goto set_target_value;\n                        }\n                        else if (input_flags[1] == DAT_08002808) {\n                            goto set_target_value;\n                        }\n                        else if ((input_flags[1] == (DAT_08002808 + 0x10000)) || (input_flags[1] == (DAT_08002804 - 0x100000)) || (input_flags[1] == DAT_08002804 - 0xf0000)) {\n                            goto set_target_value;\n                        }\n                    }\n                    break;\n            }\n\n            target_val &= ~(0xf << ((i & 0xff) << 2));\n            target_val |= target_val << ((i & 0xff) << 2);\n            *target = target_val;\n\n            if ((input_flags[1] & 0x10000000) != 0) {\n                *(uint *)(DAT_080027f8 + 0x18) |= 1;\n                set_target_index = (i & 3) << 2;\n                if (target == PTR_DAT_0800280c) {\n                    set_flag_index = 0;\n                }\n                else if (target == PTR_DAT_0800280c + 0x100) {\n                    set_flag_index = 1;\n                }\n                else if (target == PTR_DAT_0800280c + 0x200) {\n                    set_flag_index = 2;\n                }\n                else if (target == PTR_DAT_0800280c + 0x300) {\n                    set_flag_index = 3;\n                }\n                else {\n                    set_flag_index = 4;\n                }\n\n                target_array = (uint *)(DAT_080027fc + ((i >> 2) + 2) * 4);\n                set_target_val = flag_bit;\n                set_flag_val = set_flag_index;\n                goto set_target_value;\n            }\n        }\n    }\n\nset_target_value:\n    target_array = &target_array[set_target_index];\n    *target_array &= ~(0xf << set_target_val);\n    *target_array |= set_flag_val << set_target_val;\n\n    if ((input_flags[1] & 0x10000) == 0) {\n        *DAT_08002800 &= ~flag_val;\n    }\n    else {\n        *DAT_08002800 |= flag_val;\n    }\n\n    if ((input_flags[1] & 0x20000) == 0) {\n        DAT_08002800[1] &= ~flag_val;\n    }\n    else {\n        DAT_08002800[1] |= flag_val;\n    }\n\n    if ((input_flags[1] & 0x100000) == 0) {\n        DAT_08002800[2] &= ~flag_val;\n    }\n    else {\n        DAT_08002800[2] |= flag_val;\n    }\n\n    if ((input_flags[1] & 0x200000) == 0) {\n        DAT_08002800[3] &= ~flag_val;\n    }\n    else {\n        DAT_08002800[3] |= flag_val;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_flags_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "clear_bits_080040b0",
                "param_1": "data",
                "param_2": "length",
                "puVar1": "data_ptr",
                "DAT_0800410c": "PTR_DAT_0800410c",
                "flag_1": "flag_1",
                "flag_2": "flag_2"
            },
            "code": "int clear_bits_080040b0(uint **data, uint length) {\n    uint *data_ptr = *data;\n    uint flag_1 = data_ptr[8] & 0x1111;\n    uint flag_2 = data_ptr[8] & 0x444;\n\n    if (data_ptr == DAT_0800410c && flag_1 == 0 && flag_2 == 0) {\n        data_ptr[17] &= 0xffff7fff;\n    }\n\n    if (flag_1 == 0 && flag_2 == 0) {\n        *data_ptr &= 0xfffffffe;\n    }\n\n    *(char *)((int)data + 0x3d) = 1;\n    return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_bits_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "calculate_result_08005d42",
                "param_1": "function_ptr",
                "param_2": "input_value",
                "param_3": "calculation_type",
                "iVar1": "result",
                "iVar2": "negative_sign"
            },
            "code": "int calculate_result_08005d42(undefined4 *function_ptr, uint input_value, uint calculation_type) {\n  int result;\n  if (calculation_type == 0) {\n    result = (**(code **)*function_ptr)(function_ptr,input_value & 0xff);\n    return result;\n  }\n  if (calculation_type != 10) {\n    result = calculate_value(function_ptr, input_value, calculation_type & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_value) {\n    result = calculate_value(function_ptr, input_value, 10);\n    return result;\n  }\n  int negative_sign = calculate_value(function_ptr, 0x2d);\n  int absolute_value = calculate_value(function_ptr, -input_value, 10);\n  return absolute_value + negative_sign;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "calculate_result_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "run_application_08004b34",
                "FUN_08004d90": "initialize_application"
            },
            "code": "void run_application_08004b34(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "run_application_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_components_08004c52",
                "FUN_08001c88": "initialize_database",
                "FUN_08001b48": "initialize_user_interface"
            },
            "code": "void initialize_components_08004c52(void)\n{\n  initialize_database();\n  initialize_user_interface();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "initialize_components_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "print_data_080013a4",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "data_type",
                "param_4": "flag",
                "iVar1": "loop_counter",
                "iVar2": "i"
            },
            "code": "void print_data_080013a4(int data_address, int data_size, int data_type, int flag)\n{\n    int i = 0;\n    if (data_size > 1) {\n        *(byte *)(data_address + 0x13) = *(byte *)(data_address + 0x13) | 8;\n    }\n    *(char *)(data_address + 0x17) = (char)data_size;\n    print_data_080013a4_helper(data_address, 0, 0x40, data_type, data_type + 0x40);\n    if ((flag != 0) && (data_size == 1)) {\n        *(byte *)(data_address + 0x13) = *(byte *)(data_address + 0x13) | 4;\n    }\n    print_byte(*(undefined *)(data_address + 8), 1);\n    if (*(char *)(data_address + 9) != -1) {\n        print_byte(*(char *)(data_address + 9), 1);\n    }\n    print_byte(*(undefined *)(data_address + 10), 1);\n    while (i < 8) {\n        if ((*(byte *)(data_address + 0x13) & 0x10) == 0) {\n            print_byte(*(undefined *)(data_address + i + 0xb), 1);\n        }\n        else {\n            print_byte(*(undefined *)(data_address + i + 0xb), 1);\n            print_byte(*(undefined *)(data_address + i + 0xb), 1);\n        }\n        i++;\n    }\n    print_byte(*(undefined *)(data_address + 8), 0);\n    print_byte(*(undefined *)(data_address + 10), 0);\n    if (*(char *)(data_address + 9) != -1) {\n        print_byte(*(char *)(data_address + 9), 0);\n    }\n    if ((*(byte *)(data_address + 0x13) & 0x10) == 0) {\n        print_data_080013a4_helper(data_address, 3);\n        print_data_080013a4_helper(data_address, 3);\n        print_data_080013a4_helper(data_address, 3);\n        print_data_080013a4_helper(data_address, 2);\n    }\n    else {\n        print_data_080013a4_helper(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n        print_data_080013a4_helper(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n        print_data_080013a4_helper(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n    }\n    print_data_080013a4_helper(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n    *(undefined *)(data_address + 0x14) = 4;\n    print_data_080013a4_end(data_address);\n    print_data_080013a4_helper(data_address);\n    *(undefined *)(data_address + 0x15) = 2;\n    print_data_080013a4_helper(data_address, 6, 0);\n}\n",
            "called": [
                "FUN_0800138e",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_080057b4",
                "FUN_08001310",
                "FUN_0800135a",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "print_data_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "find_next_available_thing_08006d14",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "available_thing_ptr",
                "piVar2": "current_thing_ptr",
                "iVar3": "things_count",
                "ppiVar4": "things_list_ptr_ptr"
            },
            "code": "int *find_next_available_thing_08006d14(undefined4 *error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  int *available_thing_ptr;\n  int *current_thing_ptr;\n  int things_count;\n  int **things_list_ptr_ptr;\n  \n  things_count = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(things_count + 0x18) == 0) {\n    initialize_things(things_count);\n  }\n  things_list_ptr_ptr = (int **)(things_count + 0x48);\n  do {\n    current_thing_ptr = things_list_ptr_ptr[2];\n    available_thing_ptr = things_list_ptr_ptr[1];\n    while (available_thing_ptr = (int *)((int)available_thing_ptr + -1), -1 < (int)available_thing_ptr) {\n      if (*(short *)(current_thing_ptr + 3) == 0) {\n        *(undefined2 *)((int)current_thing_ptr + 0xe) = 0xffff;\n        current_thing_ptr[0x19] = 0;\n        *(undefined2 *)(current_thing_ptr + 3) = 1;\n        *current_thing_ptr = 0;\n        current_thing_ptr[2] = 0;\n        current_thing_ptr[1] = 0;\n        current_thing_ptr[4] = 0;\n        current_thing_ptr[5] = 0;\n        current_thing_ptr[6] = 0;\n        initialize_thing_data(current_thing_ptr + 0x17, 0, 8, 1, param_4);\n        current_thing_ptr[0xd] = 0;\n        current_thing_ptr[0xe] = 0;\n        current_thing_ptr[0x12] = 0;\n        current_thing_ptr[0x13] = 0;\n        return current_thing_ptr;\n      }\n      current_thing_ptr = current_thing_ptr + 0x1a;\n    }\n    if (*things_list_ptr_ptr == (int *)0x0) {\n      available_thing_ptr = (int *)create_new_thing(error_code, 4);\n      *things_list_ptr_ptr = available_thing_ptr;\n      if (available_thing_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    things_list_ptr_ptr = (int **)*things_list_ptr_ptr;\n  } while( true );\n}",
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "find_next_available_thing_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 223731,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_0800598a",
            "FUN_08001c88",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005890",
            "FUN_08005da0",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_08005f2c",
            "FUN_080055e0",
            "FUN_08005f40",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_080045a2",
            "FUN_08001c32",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_08001b18",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08005d8a",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_080047f4",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08002c10",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_08001ab0",
            "FUN_08006ac0",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_08004b9e",
            "FUN_08005730",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_080060d4",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08005cd4",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_08007090",
            "FUN_0800492c",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08001e48",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_0800548c",
            "FUN_08004848",
            "FUN_08005d82",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08001510",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_080040b0",
            "FUN_08005d42",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ]
    ],
    "locked_functions": []
}