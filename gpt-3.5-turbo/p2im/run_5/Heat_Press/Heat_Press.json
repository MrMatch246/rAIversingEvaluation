{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_parameters_00080164",
            "code": "\nvoid initializeParameters_00080164(int **parameterList)\n\n{\n  int returnValue;\n  \n  *parameterList = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)parameterList + 6)) {\n    updateParameter(*(byte *)((int)parameterList + 6),1);\n    updateParameterValue(*(undefined *)((int)parameterList + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**parameterList + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)parameterList + 0x49) = 0;\n  *(undefined *)((int)parameterList + 0x4a) = 0;\n  *(undefined2 *)(parameterList + 0x15) = 0;\n  *(undefined2 *)((int)parameterList + 0x52) = 0;\n  *(undefined2 *)(parameterList + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_parameters_00080164",
                "param_1": "parameterList",
                "iVar1": "returnValue",
                "update_parameter_00081210": "updateParameter",
                "update_param_value_00081318": "updateParameterValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isOverLimit;\n  undefined newValue;\n  char counter;\n  int returnValue;\n  byte tempByte;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    update_param_value_00081318(*(byte *)((int)data + 6),0);\n  }\n  isOverLimit = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      tempByte = *(byte *)((int)data + 0x49);\n      newValue = (**(code **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + tempByte + 9) = newValue;\n      tempByte = counter + 1;\n      *(byte *)((int)data + 0x49) = tempByte;\n      if (0x3f < tempByte) {\n        isOverLimit = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverLimit) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isOverLimit",
                "uVar2": "newValue",
                "cVar3": "counter",
                "iVar4": "returnValue",
                "bVar5": "tempByte"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int startAddress,uint length)\n\n{\n  int currentAddress;\n  uint checksum;\n  char bitCount;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (currentAddress = startAddress; (currentAddress - startAddress & 0xffU) < length; currentAddress = currentAddress + 1) {\n    checksum = checksum ^ *(byte *)(currentAddress + 9);\n    bitCount = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "startAddress",
                "param_2": "length",
                "iVar1": "currentAddress",
                "uVar2": "checksum",
                "cVar3": "bitCount",
                "uVar4": "bit"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_values_00080258",
            "code": "\nvoid updateChecksumAndValues_00080258(int **paramList,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVal;\n  undefined2 checksum;\n  int result;\n  uint byteVal2;\n  \n  byteVal = *(byte *)((int)paramList + 0x49);\n  byteVal2 = (uint)byteVal;\n  checksum = calculate_checksum_0008021c(paramList,byteVal2,param3,param4,param4);\n  *(char *)((int)paramList + byteVal2 + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)paramList + (byteVal2 + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)paramList + 0x49) = byteVal + 2;\n  if (1 < *(byte *)((int)paramList + 6)) {\n    update_param_value_00081318(*(byte *)((int)paramList + 6),1);\n  }\n  if (*(byte *)((int)paramList + 5) < 4) {\n    (**(code **)(**paramList + 4))(*paramList,(int)paramList + 9,*(undefined *)((int)paramList + 0x49));\n  }\n  if (1 < *(byte *)((int)paramList + 6)) {\n    update_param_value_00081318(*(byte *)((int)paramList + 6),0);\n  }\n  if (*(byte *)((int)paramList + 5) < 4) {\n    do {\n      result = (**(code **)(**paramList + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)paramList + 0x49) = 0;\n  result = get_global_variable_thunk_00081714();\n  paramList[0x17] = (int *)(result + (uint)*(ushort *)((int)paramList + 0x56));\n  *(short *)((int)paramList + 0x52) = *(short *)((int)paramList + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_values_00080258",
                "param_1": "paramList",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVal",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "byteVal2"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_and_initialize_parameters_000802da",
            "code": "\nint validateAndInitializeParameters_000802da(int paramPtr,uint input1,uint input2,ushort *dataPtr)\n\n{\n  char result;\n  byte byteVar;\n  undefined undefinedVar;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *ushortPtr;\n  undefined localVar1;\n  undefined localVar2;\n  ushort localVar3;\n  \n  localVar1 = (undefined)input1;\n  localVar2 = (undefined)(input1 >> 8);\n  localVar3 = (ushort)input2;\n  uintVar = input2 & 0xffff;\n  if (*(char *)(paramPtr + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(paramPtr + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((input1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(paramPtr + 9) = localVar1;\n  *(undefined *)(paramPtr + 10) = localVar2;\n  *(ushort **)(paramPtr + 0x4c) = dataPtr;\n  *(char *)(paramPtr + 0xb) = (char)(input1 >> 0x18);\n  *(char *)(paramPtr + 0xc) = (char)(input1 >> 0x10);\n  undefinedVar = (undefined)(input2 >> 8);\n  switch(localVar2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(paramPtr + 0xd) = undefinedVar;\n    break;\n  case 5:\n    ushortVar = *dataPtr;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(paramPtr + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(paramPtr + 0xd) = (char)(*dataPtr >> 8);\n    uintVar = (uint)*dataPtr;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(localVar3 >> 3) & 0xfe;\n    if ((input2 & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(paramPtr + 0xe) = (char)input2;\n    *(undefined *)(paramPtr + 0xd) = undefinedVar;\n    *(byte *)(paramPtr + 0xf) = byteVar;\n    undefinedVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(paramPtr + 0xd) = undefinedVar;\n    *(char *)(paramPtr + 0xe) = (char)input2;\n    dataPtr = dataPtr + -1;\n    *(char *)(paramPtr + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(paramPtr + 0x49) = 7;\n    ushortPtr = dataPtr + uintVar;\n    while (dataPtr != ushortPtr) {\n      byteVar = *(byte *)(paramPtr + 0x49);\n      *(char *)(paramPtr + (uint)byteVar + 9) = (char)(dataPtr[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(paramPtr + 0x49) = (char)uintVar;\n      dataPtr = dataPtr + 1;\n      *(char *)(uintVar + paramPtr + 9) = (char)*dataPtr;\n      *(byte *)(paramPtr + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(paramPtr + 0xe) = (char)uintVar;\n  undefinedVar = 6;\nLAB_0008034a:\n  *(undefined *)(paramPtr + 0x49) = undefinedVar;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_values_00080258(paramPtr);\n  *(undefined *)(paramPtr + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_and_initialize_parameters_000802da",
                "param_1": "paramPtr",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "dataPtr",
                "cVar1": "result",
                "bVar2": "byteVar",
                "uVar3": "undefinedVar",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "ushortPtr",
                "local_1c": "localVar1",
                "local_1b": "localVar2",
                "local_18": "localVar3"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int data)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(data + 10) << 0x18) < 0) {\n    *(short *)(data + 0x54) = *(short *)(data + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(data + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(data + 0x54) = *(short *)(data + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "data",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "combine_value_pairs_00080410",
            "code": "\nvoid combineValuePairs_00080410(int inputPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedValue;\n  int offset;\n  byte counter;\n  uint convertedCounter;\n  int outputPointer;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(inputPointer + 0xb) >> 1 <= convertedCounter) break;\n    offset = (convertedCounter * 2 + 3 & 0xff) + inputPointer;\n    outputPointer = *(int *)(inputPointer + 0x4c);\n    combinedValue = combine_values_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(inputPointer + 0xb),param4);\n    *(undefined2 *)(outputPointer + convertedCounter * 2) = combinedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "combine_value_pairs_00080410",
                "param_1": "inputPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedValue",
                "iVar2": "offset",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "outputPointer"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint processData_0008043e(int **data)\n\n{\n  char resultChar;\n  uint resultUInt;\n  int *globalVariable;\n  int checkValue;\n  uint unaffectedValue;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    resultUInt = (**(code **)(**data + 8))();\n    unaffectedValue = resultUInt & 0xff;\n  }\n  globalVariable = (int *)get_global_variable_thunk_00081714();\n  if (data[0x17] < globalVariable) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < unaffectedValue) {\n    process_data_000801b0(data);\n    checkValue = check_and_update_value_000803d4(data);\n    if (checkValue == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        combine_value_pairs_00080410(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      resultChar = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      resultChar = (char)checkValue;\n    }\n    goto LAB_000804a2;\n  }\n  resultChar = '\\0';\nLAB_000804a2:\n  return (int)resultChar;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data",
                "cVar1": "resultChar",
                "uVar2": "resultUInt",
                "piVar3": "globalVariable",
                "iVar4": "checkValue",
                "unaff_r6": "unaffectedValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int iVar1;\n  \n  update_parameter(1,0);\n  update_parameter(6,1);\n  update_parameter(0,1);\n  update_parameter(1,1);\n  update_param_value(0,0);\n  update_param_value(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_parameters(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_variable();\n  iVar1 = get_global_variable();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_global_variable();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_global_variable();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_global_variable();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "update_parameter_00081210": "update_parameter",
                "update_param_value_00081318": "update_param_value",
                "initialize_parameters_00080164": "initialize_parameters",
                "get_global_variable_thunk_00081714": "get_global_variable"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint *puVar7;\n  undefined4 *puVar8;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    uVar1 = get_global_variable_thunk_00081714();\n    if (DAT_200708c8 < uVar1) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_initialize_parameters_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_result_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_result_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = calculate_result_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_initialize_parameters_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      puVar8 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_and_initialize_parameters_000802da(&DAT_200709e4,*puVar8,puVar8[1],puVar8[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      puVar8 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_initialize_parameters_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    puVar7 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *puVar7 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (uVar1 = get_global_variable_thunk_00081714(), DAT_200708c0 < uVar1))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      iVar6 = get_global_variable_thunk_00081714();\n      DAT_200708c0 = iVar6 + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      uVar1 = get_global_variable_thunk_00081714();\n      if (DAT_200708c0 < uVar1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        iVar6 = get_global_variable_thunk_00081714();\n        DAT_200708c0 = iVar6 + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        puVar7 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      uVar1 = get_global_variable_thunk_00081714();\n      if (DAT_200708c0 < uVar1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        iVar6 = get_global_variable_thunk_00081714();\n        DAT_200708c0 = iVar6 + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar1 = get_global_variable_thunk_00081714();\n  if (DAT_200709e0 < uVar1) {\n    uVar2 = calculate_result_0008189c(DAT_20070940);\n    uVar3 = calculate_float_00081730(uVar2,DAT_200709c8);\n    uVar2 = DAT_200708c4;\n    DAT_20070930 = uVar3;\n    uVar4 = calculate_floating_point_00081734(uVar3,DAT_200708c4);\n    uVar4 = calculate_float_value_00081944(uVar4,DAT_2007094c);\n    uVar4 = calculate_floating_point_00081734(uVar4,DAT_20070914);\n    DAT_2007094c = uVar4;\n    uVar2 = calculate_float_00081730(uVar3,uVar2);\n    uVar2 = calculate_float_value_00081944(uVar2,DAT_200709c4);\n    uVar2 = calculate_float_00081730(uVar2,DAT_2007096c);\n    DAT_200709c4 = uVar2;\n    uVar5 = calculate_float_value_00081944(uVar3,DAT_20070a4c);\n    uVar5 = calculate_floating_point_00081734(uVar5,uVar4);\n    calculate_floating_point_00081734(uVar5,uVar2);\n    DAT_20070910 = convert_to_signed_int_00081cd0();\n    DAT_2007091c = calculate_result_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = uVar3;\n    DAT_20070914 = uVar4;\n    DAT_2007096c = uVar2;\n    iVar6 = get_global_variable_thunk_00081714();\n    DAT_200709e0 = iVar6 + DAT_20070970;\n  }\n  uVar2 = calculate_result_0008189c(DAT_20070970);\n  iVar6 = check_concatenation_results_00081ca8(DAT_2007091c,uVar2);\n  if (iVar6 != 0) {\n    DAT_2007091c = uVar2;\n  }\n  iVar6 = check_concatenation_result_00081c94(DAT_2007091c,0);\n  if (iVar6 != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = check_integer_range_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_application_00080a68",
            "code": "\nvoid initializeApplication_00080a68(void)\n\n{\n  initializeParameters(&DAT_20070954,\"\");\n  updateRelocationEntry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_application_00080a68",
                "initialize_param_00081682": "initializeParameters",
                "update_relocation_entry_00081d5c": "updateRelocationEntry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_and_configure_00080ae4",
            "code": "\n\n\nvoid initialize_and_configure_00080ae4(void)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = rel_array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_functions();\n  iVar1 = 0;\n  do {\n    iVar2 = iVar1 + 1;\n    update_param_value(iVar1,0);\n    iVar1 = iVar2;\n  } while (iVar2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter(0x400e0e00,1,0x300,0);\n  update_param_value(0,1);\n  update_parameter(0x400e0e00,1,0xc00,0);\n  update_parameter(0x400e0e00,1,0x3000,0);\n  update_parameter(0x400e1400,2,0x30,0);\n  update_parameter(0x400e1000,1,0xc00,0);\n  update_parameter(0x400e0e00,1,3,0);\n  update_parameter(0x400e1000,1,0xc000,0);\n  check_and_toggle_bit(0x25);\n  calculate_threshold(0x400c0000,rel_array[6].r_offset,20000000,0xc);\n  update_register(0x400c0000,0,0x300000,1);\n  update_parameters(0x400c0000,0,0);\n  set_param_at_offset(0x400c0000,0xffffffff);\n  set_default_value_to_parameter(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_and_configure_00080ae4",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "execute_functions_00081d7c": "execute_functions",
                "update_param_value_00081318": "update_param_value",
                "update_parameter_00080da0": "update_parameter",
                "check_and_toggle_bit_00080e18": "check_and_toggle_bit",
                "calculate_threshold_00080f9c": "calculate_threshold",
                "update_register_00081042": "update_register",
                "update_parameters_00081034": "update_parameters",
                "set_param_at_offset_0008106e": "set_param_at_offset",
                "set_default_value_to_parameter_00081066": "set_default_value_to_parameter"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_all_parameters_00080c0c",
            "code": "\nvoid initialize_all_parameters_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  clear_buffer_and_reset_values_000813a8(&DAT_20070b84);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070ad8);\n  initialize_parameters_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070de4);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070e6c);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070ef4);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070a50);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070c84);\n  clear_buffer_and_reset_values_000813a8(&DAT_20070d0c);\n  initialize_and_update_parameters_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_update_parameters_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_update_parameters_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_all_parameters_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "calculate_and_handle_differences_00080ce0",
            "code": "\nvoid calculate_and_handle_differences_00080ce0(void)\n\n{\n  int difference_result;\n  \n  difference_result = calculate_difference(&DAT_20070b60);\n  if (difference_result != 0) {\n    FUNC_00080aa8();\n  }\n  difference_result = calculate_difference(&DAT_20070c0c);\n  if (difference_result != 0) {\n    FUNC_00080ab8();\n  }\n  difference_result = calculate_difference(&DAT_20070c34);\n  if (difference_result != 0) {\n    FUNC_00080aba();\n  }\n  difference_result = calculate_difference(&DAT_20070c5c);\n  if (difference_result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "calculate_and_handle_differences_00080ce0",
                "iVar1": "difference_result",
                "calculate_difference_000813e4": "calculate_difference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_value_00080d2e",
            "code": "\nvoid updateParameterValue_00080d2e(int baseAddress,undefined4 operationType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(operationType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "operationType",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_parameters_00080d54",
            "code": "\nvoid updateParameters_00080d54(undefined4 *parameterList,undefined4 newValue,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  isNegativeFlag = (int)(flags << 0x1f) < 0;\n  parameterList[0x11] = newValue;\n  if (isNegativeFlag) {\n    parameterList[0x19] = newValue;\n  }\n  if (!isNegativeFlag) {\n    parameterList[0x18] = newValue;\n  }\n  isNegativeFlag = (flags & 10) != 0;\n  if (isNegativeFlag) {\n    parameterList[8] = newValue;\n  }\n  if (!isNegativeFlag) {\n    parameterList[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameterList[0x20] = newValue;\n  }\n  parameterList[5] = newValue;\n  *parameterList = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "parameterList",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegativeFlag"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_param_array_00080d7a",
            "code": "\nvoid updateParamArray_00080d7a(undefined4 *paramArray,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  paramArray[0x11] = newValue;\n  if (condition3 == 0) {\n    paramArray[0x18] = newValue;\n  }\n  else {\n    paramArray[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    paramArray[0x15] = newValue;\n  }\n  else {\n    paramArray[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    paramArray[0xd] = newValue;\n  }\n  else {\n    paramArray[0xc] = newValue;\n  }\n  paramArray[4] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_param_array_00080d7a",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_00080da0",
            "code": "\nundefined4 updateParameter_00080da0(int device,int parameterType,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(parameterType) {\n  case 1:\n  case 2:\n    updateParameter_00080da0Value(device,parameterType,newValue);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    updateParameter_00080da0s(device,newValue,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    updateParamArray(device,newValue,parameterType == 5,(flags << 0x1d) >> 0x1f,flags & 1,parameterType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_00080da0",
                "param_1": "device",
                "param_2": "parameterType",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_parameter_value_00080d2e": "updateParameterValue",
                "update_parameters_00080d54": "updateParameters",
                "update_param_array_00080d7a": "updateParamArray"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_intersection_00080e04",
            "code": "\nuint checkIntersection_00080e04(int object1,uint object2)\n\n{\n  uint result;\n  \n  result = *(uint *)(object1 + 8) & object2;\n  if (result != 0) {\n    if ((object2 & *(uint *)(object1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_intersection_00080e04",
                "param_1": "object1",
                "param_2": "object2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_toggle_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndToggleBit_00080e18(uint inputValue)\n\n{\n  uint bitMask;\n  \n  if (inputValue < 0x2d) {\n    if (inputValue < 0x20) {\n      bitMask = 1 << (inputValue & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (inputValue - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_toggle_bit_00080e18",
                "param_1": "inputValue",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_continuous_process_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *result,uint total_bytes,int block_size,int time_elapsed)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uVar1 = total_bytes / (uint)(block_size * 2);\n  if (total_bytes == block_size * 2 * uVar1) {\n    uVar1 = uVar1 - 1;\n  }\n  uVar2 = 0;\n  do {\n    if ((uint)(time_elapsed * (int)(((ulonglong)total_bytes / (ulonglong)((uVar1 + 1) * 2)) / 1000000)) <=\n        thresholds[uVar2]) {\n      result[1] = (uVar2 & 0xf) << 0x10 | (uVar1 & 0xff) << 8 | result[1];\n      return 0;\n    }\n    uVar2 = uVar2 + 1;\n  } while (uVar2 != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "result",
                "param_2": "total_bytes",
                "param_3": "block_size",
                "param_4": "time_elapsed",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_parameters_00081034",
            "code": "\nvoid updateParameters_00081034(int paramPtr,uint data1,uint data2)\n\n{\n  *(uint *)(paramPtr + 4) = data1 | *(uint *)(paramPtr + 4) | (data2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_parameters_00081034",
                "param_1": "paramPtr",
                "param_2": "data1",
                "param_3": "data2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_register_00081042",
            "code": "\nvoid updateRegister_00081042(int baseAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value2 | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_register_00081042",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_to_parameter_00081066",
            "code": "\nvoid setDefaultValueToParameter_00081066(int ptrToMemory)\n\n{\n  *(undefined4 *)(ptrToMemory + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_to_parameter_00081066",
                "param_1": "ptrToMemory"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_at_offset_0008106e",
            "code": "\nvoid setParamAtOffset_0008106e(int baseAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_at_offset_0008106e",
                "param_1": "baseAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_updated_value_0008118c",
            "code": "\nint calculateUpdatedValue_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_updated_value_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_return_value_000811ae",
            "code": "\nuint32_t getReturnValue_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_return_value_000811ae",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int pointerToMemory)\n\n{\n  *(undefined4 *)(pointerToMemory + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "pointerToMemory"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_program_000811be",
            "code": "\nvoid initializeProgram_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_program_000811be",
                "undefined4": "void"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nundefined4 initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "clear_data_000811c6",
            "code": "\nundefined4 clearData_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "clear_data_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param_1,int src_address,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src_address + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_2": "src_address",
                "param_3": "num_bytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nundefined4 getGlobalVariable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_parameter_00081210",
            "code": "\n\n\nint updateParameter_00081210(int deviceIndex,int mode)\n\n{\n  int result;\n  uint bitMask;\n  undefined4 updateType;\n  uint tempMask;\n  byte modeBits;\n  byte inputState;\n  int indexOffset;\n  int parameterPointer;\n  \n  result = deviceIndex;\n  if ((&DAT_00084d24)[deviceIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[deviceIndex] & 0xf) == 4) {\n      result = set_bit_0008105c(0x400c0000,(&DAT_00084d31)[deviceIndex * 0x1c]);\n    }\n    inputState = (&DAT_20070d94)[deviceIndex];\n    modeBits = inputState & 0xf;\n    if ((modeBits < 3) && (inputState != 0)) {\n      if (modeBits == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (modeBits == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (modeBits == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = deviceIndex * 0x1c;\n        check_and_toggle_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        inputState = (&DAT_20070d94)[deviceIndex] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = deviceIndex * 0x1c;\n        check_and_toggle_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        inputState = (&DAT_20070d94)[deviceIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[deviceIndex] = inputState;\n      return result;\n    }\n    indexOffset = deviceIndex * 0x1c;\n    parameterPointer = *(int *)(&DAT_00084d18 + indexOffset);\n    if (inputState >> 4 == 0) {\n      updateType = 4;\n    }\n    else {\n      updateType = 5;\n    }\n    result = update_parameter_00080da0(parameterPointer,updateType,*(undefined4 *)(&DAT_00084d1c + indexOffset),\n                         *(undefined4 *)(&DAT_00084d28 + indexOffset));\n    (&DAT_20070d94)[deviceIndex] = (&DAT_20070d94)[deviceIndex] & 0xf0 | 3;\n    if (*(int *)(parameterPointer + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084d20 + indexOffset);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        tempMask = _DAT_400e0618 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0614 = tempMask;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        tempMask = _DAT_400e0708 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0704 = tempMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_parameter_00081210",
                "param_1": "deviceIndex",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "bitMask",
                "uVar3": "updateType",
                "uVar4": "tempMask",
                "bVar5": "modeBits",
                "bVar6": "inputState",
                "iVar7": "indexOffset",
                "iVar8": "parameterPointer"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_param_value_00081318",
            "code": "\nvoid updateParamValue_00081318(int index,int value,undefined4 paramValue)\n\n{\n  int intersectionCheckResult;\n  undefined4 updatedValue;\n  int paramAddress;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_parameter_00081210(index,1,paramValue,5,index,value,paramValue);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    paramAddress = *(int *)(&DAT_00084d18 + index * 0x1c);\n    updatedValue = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    intersectionCheckResult = check_intersection_00080e04(paramAddress,updatedValue);\n    if (intersectionCheckResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(paramAddress + 100) = updatedValue;\n        return;\n      }\n      *(undefined4 *)(paramAddress + 0x60) = updatedValue;\n      return;\n    }\n    update_param_array_00080d7a(paramAddress,updatedValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_param_value_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "paramValue",
                "iVar1": "intersectionCheckResult",
                "uVar2": "updatedValue",
                "iVar3": "paramAddress"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_is_zero_00081388",
            "code": "\nvoid execute_if_r_info_is_zero_00081388(void)\n\n{\n  if ((relocation_table[6].relocation_info != 0xffffffff) &&\n     (relocation_table[6].relocation_info = relocation_table[6].relocation_info - 1,\n     relocation_table[6].relocation_info == 0)) {\n    (*(code *)((int)&relocation_table[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "clear_buffer_and_reset_values_000813a8",
            "code": "\nint clearBufferAndResetValues_000813a8(int buffer)\n\n{\n  fillBuffer(buffer,0,0x80);\n  *(undefined4 *)(buffer + 0x80) = 0;\n  *(undefined4 *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "clear_buffer_and_reset_values_000813a8",
                "param_1": "buffer",
                "fill_buffer_00082504": "fillBuffer"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_000813c2",
            "code": "\nvoid updateBuffer_000813c2(int buffer,undefined value)\n\n{\n  uint bufferIndex;\n  \n  bufferIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (bufferIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = value;\n    *(uint *)(buffer + 0x80) = bufferIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer",
                "param_2": "value",
                "uVar1": "bufferIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataAddress,undefined4 newDataValue)\n\n{\n  int ptrToStruct;\n  uint nextIndex;\n  \n  ptrToStruct = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrToStruct + 0x84) == *(int *)(ptrToStruct + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newDataValue;\n  }\n  else {\n    nextIndex = *(int *)(ptrToStruct + 0x80) + 1U & 0x8000007f;\n    if ((int)nextIndex < 0) {\n      nextIndex = (nextIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrToStruct + 0x84) == nextIndex);\n    *(char *)(ptrToStruct + *(int *)(ptrToStruct + 0x80)) = (char)newDataValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = nextIndex;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataAddress",
                "param_2": "newDataValue",
                "iVar1": "ptrToStruct",
                "uVar2": "nextIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *parameters,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value2;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value3;\n  parameters[4] = value5;\n  parameters[8] = value4;\n  parameters[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_data_00081508",
            "code": "\nvoid initializeData_00081508(int dataOffset,uint dataSize,undefined4 newValue)\n\n{\n  int offset;\n  undefined4 *dataPointer;\n  \n  check_and_toggle_bit_00080e18(*(undefined4 *)(dataOffset + 0x20));\n  dataPointer = *(undefined4 **)(dataOffset + 0x18);\n  dataPointer[0x48] = 0x202;\n  *dataPointer = 0xac;\n  dataPointer[1] = newValue;\n  dataPointer[8] = relArray[6].r_offset / dataSize >> 4;\n  dataPointer[3] = 0xffffffff;\n  dataPointer[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(dataOffset + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(dataOffset + 0x1c) & 0x1f);\n  offset = *(int *)(dataOffset + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(dataOffset + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *dataPointer = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_data_00081508",
                "param_1": "dataOffset",
                "param_2": "dataSize",
                "param_3": "newValue",
                "puVar2": "dataPointer",
                "iVar1": "offset",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_update_parameters_000815d4",
            "code": "\nundefined4 * initializeAndUpdateParameters_000815d4(undefined4 *output,undefined4 input)\n\n{\n  initialize_parameters_000814e4();\n  *output = &PTR_update_data_00081454_1_000857d8;\n  output[9] = input;\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_update_parameters_000815d4",
                "param_1": "output",
                "param_2": "input"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int byteValue,uint bitValue)\n\n{\n  return bitValue | byteValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "byteValue",
                "param_2": "bitValue"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "update_relocation_offset_000815fe",
            "code": "\nundefined4 * update_relocation_offset_000815fe(undefined4 *relocation_offset)\n\n{\n  update_relocation_offset_000815fe_00081e04(*relocation_offset);\n  return relocation_offset;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "update_relocation_offset_000815fe",
                "param_1": "relocation_offset"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_0008160c",
            "code": "\nvoid resetParam_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    updateRelocationOffset();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param",
                "update_relocation_offset_00081e04": "updateRelocationOffset",
                "param_1[2]": "param[2]",
                "param_1[1]": "param[1]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "allocate_and_initialize_memory_00081622",
            "code": "\nint allocateAndInitializeMemory_00081622(int *inputPointer,int inputSize,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  \n  result = allocate_and_initialize_memory_000825a0(*inputPointer,inputSize + 1,paramA,paramB,paramB);\n  if (result != 0) {\n    *inputPointer = result;\n    inputPointer[1] = inputSize;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "allocate_and_initialize_memory_00081622",
                "param_1": "inputPointer",
                "param_2": "inputSize",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_allocate_memory_0008163a",
            "code": "\nundefined4 check_and_allocate_memory_0008163a(int *ptr1,uint size)\n\n{\n  int result;\n  \n  if ((*ptr1 == 0) || ((uint)ptr1[1] < size)) {\n    result = allocate_and_initialize_memory_00081622(ptr1);\n    if (result == 0) {\n      return 0;\n    }\n    if (ptr1[2] == 0) {\n      *(undefined *)*ptr1 = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_allocate_memory_0008163a",
                "param_1": "ptr1",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_param_and_copy_string_0008165c",
            "code": "\nundefined4 * updateParamAndCopyString_0008165c(undefined4 *paramArray,undefined4 sourceString,undefined4 targetString)\n\n{\n  int allocationResult;\n  \n  allocationResult = check_and_allocate_memory_0008163a(paramArray,targetString);\n  if (allocationResult == 0) {\n    reset_param_0008160c(paramArray);\n  }\n  else {\n    paramArray[2] = targetString;\n    copy_string_with_alignment_check_00082994(*paramArray,sourceString);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_param_and_copy_string_0008165c",
                "param_1": "paramArray",
                "param_2": "sourceString",
                "param_3": "targetString",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_00081682",
            "code": "\nundefined4 * initializeParam_00081682(undefined4 *paramArray,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082a50(inputValue);\n    update_param_and_copy_string_0008165c(paramArray,inputValue,leadingZerosCount);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_00081682",
                "param_1": "paramArray",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_continuous_process_000816a8",
            "code": "\nvoid runContinuousProcess_000816a8(void)\n\n{\n  initializeMemory();\n  initializeAndConfigure();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeSystem();\n  do {\n    processData();\n    calculateAndHandleDifferences();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_continuous_process_000816a8",
                "initialize_memory_000816d4": "initializeMemory",
                "initialize_and_configure_00080ae4": "initializeAndConfigure",
                "initialize_system_000804a8": "initializeSystem",
                "process_data_000805d0": "processData",
                "calculate_and_handle_differences_00080ce0": "calculateAndHandleDifferences"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_from_global_variable_00081714",
            "code": "\nundefined4 get_data_from_global_variable_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_from_global_variable_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculateFloat_00081730(uint inputValue,uint exponent,undefined4 undefinedValue,uint result)\n\n{\n  int leftShiftedValue;\n  int shiftedValue;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  bool isEqual;\n  \n  uVar3 = exponent ^ 0x80000000;\n  uVar5 = inputValue << 1;\n  isEqual = uVar5 == 0;\n  if (!isEqual) {\n    result = exponent << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = uVar5 == result;\n  }\n  leftShiftedValue = (int)uVar5 >> 0x18;\n  if (!isEqual) {\n    isEqual = leftShiftedValue == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedValue = (int)(exponent << 1) >> 0x18;\n    if (leftShiftedValue == -1 || shiftedValue == -1) {\n      uVar5 = uVar3;\n      if (leftShiftedValue == -1) {\n        uVar5 = inputValue;\n      }\n      if (leftShiftedValue != -1 || shiftedValue != -1) {\n        uVar3 = uVar5;\n      }\n      isEqual = (uVar5 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (uVar3 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = uVar5 == uVar3;\n      }\n      if (!isEqual) {\n        uVar5 = uVar5 | 0x400000;\n      }\n      return uVar5;\n    }\n    if (((inputValue ^ uVar3) & 0x7fffffff) != 0) {\n      if (uVar5 == 0) {\n        inputValue = uVar3;\n      }\n      return inputValue;\n    }\n    if (inputValue != uVar3) {\n      return 0;\n    }\n    if ((uVar5 & 0xff000000) == 0) {\n      uVar3 = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar5 < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_0008186a:\n    return inputValue | 0x7f800000;\n  }\n  uVar5 = uVar5 >> 0x18;\n  result = result >> 0x18;\n  uVar7 = result - uVar5;\n  isEqual = uVar7 != 0;\n  uVar6 = uVar5;\n  if (isEqual && uVar5 <= result) {\n    uVar6 = uVar5 + uVar7;\n  }\n  if (isEqual && uVar5 <= result) {\n    uVar3 = uVar3 ^ inputValue;\n  }\n  if (isEqual && uVar5 <= result) {\n    inputValue = inputValue ^ uVar3;\n  }\n  if (isEqual && uVar5 <= result) {\n    uVar3 = uVar3 ^ inputValue;\n  }\n  if (result < uVar5) {\n    uVar7 = -uVar7;\n  }\n  if (0x19 < uVar7) {\n    return inputValue;\n  }\n  uVar5 = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    uVar5 = -uVar5;\n  }\n  uVar4 = uVar3 & 0xffffff | 0x800000;\n  if ((uVar3 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  if (uVar6 == uVar7) {\n    uVar4 = uVar4 ^ 0x800000;\n    if (uVar6 == 0) {\n      uVar5 = uVar5 ^ 0x800000;\n      uVar6 = 1;\n    }\n    else {\n      uVar7 = uVar7 - 1;\n    }\n  }\n  uVar5 = uVar5 + ((int)uVar4 >> (uVar7 & 0xff));\n  uVar4 = uVar4 << (0x20 - uVar7 & 0xff);\n  inputValue = uVar5 & 0x80000000;\n  if ((int)uVar5 < 0) {\n    isEqual = uVar4 != 0;\n    uVar4 = -uVar4;\n    uVar5 = -uVar5 - (uint)isEqual;\n  }\n  if (uVar5 < 0x800000) {\n    uVar3 = uVar4 & 0x80000000;\n    uVar4 = uVar4 << 1;\n    uVar5 = uVar5 * 2 + (uint)(uVar3 != 0);\n    uVar3 = uVar6 - 2;\n    if ((uVar5 & 0x800000) == 0) {\n      uVar7 = LZCOUNT(uVar5) - 8;\n      uVar5 = uVar5 << (uVar7 & 0xff);\n      if ((int)uVar3 < (int)uVar7) {\n        uVar5 = uVar5 >> (-(uVar3 - uVar7) & 0xff);\n      }\n      else {\n        uVar5 = uVar5 + (uVar3 - uVar7) * 0x800000;\n      }\n      return uVar5 | inputValue;\n    }\n  }\n  else {\n    uVar3 = uVar6 - 1;\n    if (0xffffff < uVar5) {\n      uVar3 = uVar5 & 1;\n      uVar5 = uVar5 >> 1;\n      uVar4 = (uint)(uVar3 != 0) << 0x1f | uVar4 >> 1;\n      uVar3 = uVar6;\n      if (0xfd < uVar6) goto LAB_0008186a;\n    }\n  }\n  uVar5 = uVar5 + uVar3 * 0x800000 + (uint)(0x7fffffff < uVar4);\n  if (uVar4 == 0x80000000) {\n    uVar5 = uVar5 & 0xfffffffe;\n  }\n  return uVar5 | inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "inputValue",
                "param_2": "exponent",
                "param_3": "undefinedValue",
                "param_4": "result",
                "iVar1": "leftShiftedValue",
                "iVar2": "shiftedValue",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint input1,uint input2,undefined4 unused,uint unused2)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint mantissa1;\n  uint mantissa2;\n  uint shiftCount;\n  uint difference;\n  bool isZero;\n  \n  mantissa2 = input1 << 1;\n  isZero = mantissa2 == 0;\n  if (!isZero) {\n    unused2 = input2 << 1;\n    isZero = unused2 == 0;\n  }\n  if (!isZero) {\n    isZero = mantissa2 == unused2;\n  }\n  shiftedInput1 = (int)mantissa2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)unused2 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      mantissa2 = input2;\n      if (shiftedInput1 == -1) {\n        mantissa2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = mantissa2;\n      }\n      isZero = (mantissa2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = mantissa2 == input2;\n      }\n      if (!isZero) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  unused2 = unused2 >> 0x18;\n  difference = unused2 - mantissa2;\n  isZero = difference != 0;\n  shiftCount = mantissa2;\n  if (isZero && mantissa2 <= unused2) {\n    shiftCount = mantissa2 + difference;\n  }\n  if (isZero && mantissa2 <= unused2) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && mantissa2 <= unused2) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && mantissa2 <= unused2) {\n    input2 = input2 ^ input1;\n  }\n  if (unused2 < mantissa2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  mantissa2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (shiftCount == difference) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (shiftCount == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      shiftCount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (difference & 0xff));\n  mantissa1 = mantissa1 << (0x20 - difference & 0xff);\n  input1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    isZero = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)isZero;\n  }\n  if (mantissa2 < 0x800000) {\n    difference = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(difference != 0);\n    difference = shiftCount - 2;\n    if ((mantissa2 & 0x800000) == 0) {\n      shiftCount = LZCOUNT(mantissa2) - 8;\n      mantissa2 = mantissa2 << (shiftCount & 0xff);\n      if ((int)difference < (int)shiftCount) {\n        mantissa2 = mantissa2 >> (-(difference - shiftCount) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (difference - shiftCount) * 0x800000;\n      }\n      return mantissa2 | input1;\n    }\n  }\n  else {\n    difference = shiftCount - 1;\n    if (0xffffff < mantissa2) {\n      difference = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(difference != 0) << 0x1f | mantissa1 >> 1;\n      difference = shiftCount;\n      if (0xfd < shiftCount) goto LAB_0008186a;\n    }\n  }\n  mantissa2 = mantissa2 + difference * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused",
                "param_4": "unused2",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "shiftCount",
                "uVar6": "difference",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_result_00081894",
            "code": "\nuint calculateResult_00081894(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constantValue;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = constantValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constantValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_result_0008189c",
            "code": "\nuint calculateResult_0008189c(uint inputNumber)\n\n{\n  uint leadingZeroes;\n  uint shiftValue;\n  uint signBit;\n  int result;\n  \n  signBit = inputNumber & 0x80000000;\n  if ((int)signBit < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeroes = countLeadingZeroes(inputNumber);\n  shiftValue = leadingZeroes - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftValue & 0xff);\n    signBit = result + (inputNumber << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftValue = inputNumber << leadingZeroes + 0x18;\n  signBit = result + ((inputNumber >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftValue >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_result_0008189c",
                "param_1": "inputNumber",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftValue",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeroes"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_value_00081944",
            "code": "\nuint calculateFloatValue_00081944(uint input1,uint input2,undefined4 input3,uint input2Shifted)\n\n{\n  longlong tempLong;\n  uint result;\n  uint input1Shifted;\n  int sumShifted;\n  int difference;\n  uint multiplicationResult;\n  int count;\n  uint tempResult;\n  bool isZero1;\n  bool overflowFlag;\n  \n  input1Shifted = input1 >> 0x17 & 0xff;\n  isZero1 = input1Shifted == 0;\n  if (!isZero1) {\n    input2Shifted = input2 >> 0x17 & 0xff;\n    isZero1 = input2Shifted == 0;\n  }\n  if (!isZero1) {\n    isZero1 = input1Shifted == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = input2Shifted == 0xff;\n  }\n  if (isZero1) {\n    input2Shifted = input2 >> 0x17 & 0xff;\n    if (input1Shifted == 0xff || input2Shifted == 0xff) {\n      isZero1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero1 = input2 == 0;\n        result = input1;\n      }\n      if (!isZero1) {\n        isZero1 = input2 == 0x80000000;\n      }\n      tempResult = result;\n      if (((isZero1) || ((input1Shifted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input2Shifted == 0xff && (tempResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return tempResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero1 = (input1 & 0x7fffffff) == 0;\n    if (!isZero1) {\n      isZero1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero1 = input1Shifted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input1 = input1 << 1;\n        isZero1 = (input1 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      input1Shifted = input1Shifted - 1;\n    }\n    input1 = input1 | result;\n    isZero1 = input2Shifted == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input2 = input2 << 1;\n        isZero1 = (input2 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      input2Shifted = input2Shifted - 1;\n    }\n    input2 = input2 | result;\n  }\n  sumShifted = input1Shifted + input2Shifted;\n  tempResult = input1 ^ input2;\n  input1Shifted = input1 << 9;\n  isZero1 = input1Shifted == 0;\n  if (!isZero1) {\n    input2 = input2 << 9;\n    isZero1 = input2 == 0;\n  }\n  if (isZero1) {\n    if (input1Shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result = tempResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    overflowFlag = SBORROW4(sumShifted,0x7f);\n    difference = sumShifted + -0x7f;\n    isZero1 = difference == 0;\n    count = difference;\n    if (!isZero1 && 0x7e < sumShifted) {\n      overflowFlag = SBORROW4(0xff,difference);\n      count = 0xff - difference;\n      isZero1 = difference == 0xff;\n    }\n    if (!isZero1 && count < 0 == overflowFlag) {\n      result = result | difference * 0x800000;\n    }\n    if (!isZero1 && count < 0 == overflowFlag) {\n      return result;\n    }\n    result = result | 0x800000;\n    multiplicationResult = 0;\n    overflowFlag = SBORROW4(difference,1);\n    tempResult = sumShifted - 0x80;\n    isZero1 = tempResult == 0;\n    input1Shifted = tempResult;\n  }\n  else {\n    tempLong = (ulonglong)(input1Shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    multiplicationResult = (uint)tempLong;\n    result = (uint)((ulonglong)tempLong >> 0x20);\n    isZero1 = result < 0x800000;\n    if (isZero1) {\n      result = result << 1;\n    }\n    if (isZero1) {\n      result = result | multiplicationResult >> 0x1f;\n      multiplicationResult = multiplicationResult << 1;\n    }\n    result = tempResult & 0x80000000 | result;\n    tempResult = (sumShifted + -0x7f) - (uint)isZero1;\n    overflowFlag = SBORROW4(tempResult,0xfd);\n    isZero1 = tempResult == 0xfd;\n    input1Shifted = tempResult - 0xfd;\n    if (tempResult < 0xfe) {\n      result = result + tempResult * 0x800000 + (uint)(0x7fffffff < multiplicationResult);\n      if (multiplicationResult == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero1 || (int)input1Shifted < 0 != overflowFlag) {\n    isZero1 = (int)(tempResult + 0x19) < 0;\n    if (tempResult == 0xffffffe7 || isZero1 != SCARRY4(tempResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempResult != 0xffffffe7 && isZero1 == SCARRY4(tempResult,0x19)) {\n      input1Shifted = (result << 1) >> (-tempResult & 0xff);\n      tempResult = result << (tempResult + 0x20 & 0xff);\n      input1Shifted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1Shifted >> 1) + (uint)((byte)input1Shifted & 1);\n      if ((multiplicationResult | tempResult << 1) == 0) {\n        input1Shifted = input1Shifted & ~(tempResult >> 0x1f);\n      }\n      return input1Shifted;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_value_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input2Shifted",
                "uVar3": "input1Shifted",
                "bVar9": "isZero1",
                "uVar2": "result",
                "bVar10": "overflowFlag",
                "iVar4": "sumShifted",
                "iVar5": "difference",
                "iVar7": "count",
                "uVar6": "multiplicationResult",
                "uVar8": "tempResult",
                "lVar1": "tempLong"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_conditions_00081bf4",
            "code": "\nuint check_overflow_conditions_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_input;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_conditions_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_parameters_00081c54",
            "code": "\nvoid concatenateParameters_00081c54(undefined4 destination,undefined4 source)\n\n{\n  concatenate_values_00081c5c(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_parameters_00081c54",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_values_00081c5c",
            "code": "\nundefined8 concatenateValues_00081c5c(undefined4 firstValue,undefined4 secondValue)\n\n{\n  check_overflow_conditions_00081bf4();\n  return CONCAT44(secondValue,firstValue);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_values_00081c5c",
                "param_1": "firstValue",
                "param_2": "secondValue"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_concatenation_result_00081c94",
            "code": "\nbool checkConcatenationResult_00081c94(void)\n\n{\n  undefined isZeroFlag;\n  undefined isCarryFlag;\n  \n  concatenate_values_00081c5c();\n  return !(bool)isCarryFlag || (bool)isZeroFlag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_concatenation_result_00081c94",
                "in_ZR": "isZeroFlag",
                "in_CY": "isCarryFlag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concatenation_results_00081ca8",
            "code": "\nbool check_concatenation_results_00081ca8(void)\n\n{\n  undefined concatenation_result_A;\n  undefined concatenation_result_B;\n  \n  concatenate_parameters_00081c54();\n  return !(bool)concatenation_result_B || (bool)concatenation_result_A;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concatenation_results_00081ca8",
                "in_ZR": "concatenation_result_A",
                "in_CY": "concatenation_result_B"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_signed_int_00081cd0",
            "code": "\nuint convertToSignedInt_00081cd0(uint value)\n\n{\n  uint shiftedValue;\n  uint subtractedValue;\n  \n  if (value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (value << 1) >> 0x18;\n  subtractedValue = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && subtractedValue != 0) {\n    shiftedValue = (value << 8 | 0x80000000) >> (subtractedValue & 0xff);\n    if ((value & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((subtractedValue == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  value = value & 0x80000000;\n  if (value == 0) {\n    value = 0x7fffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "value",
                "uVar1": "shiftedValue",
                "uVar2": "subtractedValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_integer_range_00081d1c",
            "code": "\nuint checkIntegerRange_00081d1c(uint value)\n\n{\n  uint shiftAmount;\n  \n  if (((value & 0x80000000) != 0) || (value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((value << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (value << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_integer_range_00081d1c",
                "param_1": "value",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newValue,dword anotherValue,dword additionalValue)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)initialize_memory_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = newValue;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[index + 0x42] = additionalValue;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = anotherValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newValue",
                "param_2": "anotherValue",
                "param_3": "additionalValue",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctions_00081d7c(void)\n\n{\n  int counter;\n  code **functionPointers;\n  \n  FUNC_00085858();\n  functionPointers = (code **)0x85860;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    functionPointers = functionPointers + 1;\n    (**functionPointers)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "counter",
                "ppcVar2": "functionPointers"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "initialize_memory_00081df4",
            "code": "\nvoid initializeMemory_00081df4(undefined4 parameter)\n\n{\n  allocate_and_initialize_memory_00081e14(relocationArray[140].relocationOffset,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "initialize_memory_00081df4",
                "param_1": "parameter",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "update_relocation_offset_00081e04",
            "code": "\nvoid updateRelocationOffset_00081e04(undefined4 input)\n\n{\n  update_relocation_00083d9c(relocationOffset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "update_relocation_offset_00081e04",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_and_initialize_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_00081e14(undefined4 *output_ptr,uint size)\n\n{\n  dword temp_dVar1;\n  int temp_iVar2;\n  uint temp_uVar3;\n  uint temp_uVar4;\n  int temp_iVar5;\n  uint temp_uVar6;\n  dword temp_dVar7;\n  uint temp_uVar8;\n  int temp_iVar9;\n  undefined *temp_puVar10;\n  dword temp_dVar11;\n  dword temp_dVar12;\n  int temp_iVar13;\n  dword *temp_pdVar14;\n  uint adjusted_size;\n  undefined *temp_puVar16;\n  dword *ptemp_dVar17;\n  uint temp_uVar18;\n  \n  if (size + 0xb < 0x17) {\n    adjusted_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    adjusted_size = size + 0xb & 0xfffffff8;\n    if (((int)adjusted_size < 0) || (adjusted_size < size)) {\nLAB_00081e7a:\n      *output_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_ptr);\n  temp_dVar1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (adjusted_size < 0x1f8) {\n    temp_iVar13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + adjusted_size);\n    if ((temp_iVar13 != adjusted_size + 0x20070464) ||\n       (temp_iVar2 = temp_iVar13 + 8, temp_iVar13 = *(int *)(temp_iVar13 + 0x14), temp_iVar2 != temp_iVar13)) {\n      temp_iVar5 = *(int *)(temp_iVar13 + 0xc);\n      temp_iVar9 = (*(uint *)(temp_iVar13 + 4) & 0xfffffffc) + temp_iVar13;\n      adjusted_size = *(uint *)(temp_iVar9 + 4);\n      temp_iVar2 = *(int *)(temp_iVar13 + 8);\n      *(int *)(temp_iVar2 + 0xc) = temp_iVar5;\n      *(int *)(temp_iVar5 + 8) = temp_iVar2;\n      *(uint *)(temp_iVar9 + 4) = adjusted_size | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(temp_iVar13 + 8);\n    }\n    temp_uVar18 = (adjusted_size >> 3) + 2;\n  }\n  else {\n    temp_uVar18 = adjusted_size >> 9;\n    if (temp_uVar18 == 0) {\n      temp_iVar2 = 0x7e;\n      temp_iVar13 = 0x3f;\n    }\n    else if (temp_uVar18 < 5) {\n      temp_iVar13 = (adjusted_size >> 6) + 0x38;\n      temp_iVar2 = temp_iVar13 * 2;\n    }\n    else if (temp_uVar18 < 0x15) {\n      temp_iVar13 = temp_uVar18 + 0x5b;\n      temp_iVar2 = temp_iVar13 * 2;\n    }\n    else if (temp_uVar18 < 0x55) {\n      temp_iVar13 = (adjusted_size >> 0xc) + 0x6e;\n      temp_iVar2 = temp_iVar13 * 2;\n    }\n    else if (temp_uVar18 < 0x155) {\n      temp_iVar13 = (adjusted_size >> 0xf) + 0x77;\n      temp_iVar2 = temp_iVar13 * 2;\n    }\n    else if (temp_uVar18 < 0x555) {\n      temp_iVar13 = (adjusted_size >> 0x12) + 0x7c;\n      temp_iVar2 = temp_iVar13 * 2;\n    }\n    else {\n      temp_iVar2 = 0xfc;\n      temp_iVar13 = 0x7e;\n    }\n    for (temp_dVar7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp_iVar2]; temp_iVar2 * 4 + 0x20070464U != temp_dVar7\n        ; temp_dVar7 = *(dword *)(temp_dVar7 + 0xc)) {\n      temp_uVar18 = *(uint *)(temp_dVar7 + 4) & 0xfffffffc;\n      temp_iVar5 = temp_uVar18 - adjusted_size;\n      if (0xf < temp_iVar5) {\n        temp_iVar13 = temp_iVar13 + -1;\n        break;\n      }\n      if (-1 < temp_iVar5) {\n        temp_iVar2 = temp_uVar18 + temp_dVar7;\n        adjusted_size = *(uint *)(temp_iVar2 + 4);\n        temp_iVar5 = *(int *)(temp_dVar7 + 0xc);\n        temp_iVar13 = *(int *)(temp_dVar7 + 8);\n        *(int *)(temp_iVar13 + 0xc) = temp_iVar5;\n        *(int *)(temp_iVar5 + 8) = temp_iVar13;\n        *(uint *)(temp_iVar2 + 4) = adjusted_size | 1;\n        FUNC_0008259c(output_ptr);\n        return (int *)(temp_dVar7 + 8);\n      }\n    }\n    temp_uVar18 = temp_iVar13 + 1;\n  }\n  temp_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp_uVar3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp_uVar4 = temp_uVar3 & 0xfffffffc;\n    temp_uVar6 = temp_uVar4 - adjusted_size;\n    if (0xf < (int)temp_uVar6) {\n      temp_dVar7 = adjusted_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = adjusted_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp_dVar7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp_dVar7;\n      *(undefined4 *)(temp_dVar7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp_dVar7 + 8) = 0x2007046c;\n      *(uint *)(temp_dVar7 + 4) = temp_uVar6 | 1;\n      *(uint *)(temp_dVar7 + temp_uVar6) = temp_uVar6;\n      FUNC_0008259c(output_ptr);\n      return (int *)(temp_dVar1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp_uVar6) {\n      *(uint *)(temp_uVar4 + temp_dVar1 + 4) = *(uint *)(temp_uVar4 + temp_dVar1 + 4) | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(temp_dVar1 + 8);\n    }\n    if (temp_uVar4 < 0x200) {\n      temp_uVar4 = temp_uVar3 & 0xfffffff8;\n      temp_iVar13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_uVar4);\n      temp_dVar7 = 1 << ((int)(temp_uVar3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(temp_dVar1 + 8) = temp_iVar13;\n      *(uint *)(temp_dVar1 + 0xc) = temp_uVar4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp_dVar7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_uVar4) = temp_dVar1;\n      *(dword *)(temp_iVar13 + 0xc) = temp_dVar1;\n    }\n    else {\n      temp_uVar6 = temp_uVar3 >> 9;\n      if (temp_uVar6 < 5) {\n        temp_iVar2 = (temp_uVar3 >> 6) + 0x38;\n        temp_iVar13 = temp_iVar2 * 2;\n      }\n      else if (temp_uVar6 < 0x15) {\n        temp_iVar2 = temp_uVar6 + 0x5b;\n        temp_iVar13 = temp_iVar2 * 2;\n      }\n      else if (temp_uVar6 < 0x55) {\n        temp_iVar2 = (temp_uVar3 >> 0xc) + 0x6e;\n        temp_iVar13 = temp_iVar2 * 2;\n      }\n      else if (temp_uVar6 < 0x155) {\n        temp_iVar2 = (temp_uVar3 >> 0xf) + 0x77;\n        temp_iVar13 = temp_iVar2 * 2;\n      }\n      else if (temp_uVar6 < 0x555) {\n        temp_iVar2 = (temp_uVar3 >> 0x12) + 0x7c;\n        temp_iVar13 = temp_iVar2 * 2;\n      }\n      else {\n        temp_iVar13 = 0xfc;\n        temp_iVar2 = 0x7e;\n      }\n      temp_dVar7 = temp_iVar13 * 4 + 0x20070464;\n      temp_dVar11 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp_iVar13];\n      if (temp_dVar11 == temp_dVar7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp_iVar2 >> 2 & 0xffU);\n        temp_dVar12 = temp_dVar11;\n      }\n      else {\n        do {\n          temp_dVar12 = temp_dVar11;\n          if ((*(uint *)(temp_dVar11 + 4) & 0xfffffffc) <= temp_uVar4) break;\n          temp_dVar11 = *(dword *)(temp_dVar11 + 8);\n          temp_dVar12 = temp_dVar11;\n        } while (temp_dVar7 != temp_dVar11);\n        temp_dVar11 = *(dword *)(temp_dVar12 + 0xc);\n      }\n      temp_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(temp_dVar1 + 0xc) = temp_dVar11;\n      *(dword *)(temp_dVar1 + 8) = temp_dVar12;\n      *(dword *)(temp_dVar11 + 8) = temp_dVar1;\n      *(dword *)(temp_dVar12 + 0xc) = temp_dVar1;\n    }\n  }\n  temp_dVar1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp_uVar3 = 1 << ((int)temp_uVar18 >> 2 & 0xffU);\n  if (temp_uVar3 <= temp_dVar7) {\n    if ((temp_dVar7 & temp_uVar3) == 0) {\n      temp_uVar18 = temp_uVar18 & 0xfffffffc;\n      do {\n        temp_uVar3 = temp_uVar3 << 1;\n        temp_uVar18 = temp_uVar18 + 4;\n      } while ((temp_dVar7 & temp_uVar3) == 0);\n    }\n    do {\n      ptemp_dVar17 = &Elf32_Rel_ARRAY_20070000[temp_uVar18 + 0x8c].r_info;\n      temp_pdVar14 = ptemp_dVar17;\n      temp_uVar4 = temp_uVar18;\n      do {\n        for (temp_puVar10 = (undefined *)temp_pdVar14[3]; temp_pdVar14 != (dword *)temp_puVar10;\n            temp_puVar10 = *(undefined **)(temp_puVar10 + 0xc)) {\n          temp_uVar6 = *(uint *)(temp_puVar10 + 4) & 0xfffffffc;\n          temp_uVar8 = temp_uVar6 - adjusted_size;\n          if (0xf < (int)temp_uVar8) {\n            temp_iVar2 = *(int *)(temp_puVar10 + 8);\n            temp_iVar13 = *(int *)(temp_puVar10 + 0xc);\n            temp_puVar16 = temp_puVar10 + adjusted_size;\n            *(uint *)(temp_puVar10 + 4) = adjusted_size | 1;\n            *(int *)(temp_iVar2 + 0xc) = temp_iVar13;\n            *(int *)(temp_iVar13 + 8) = temp_iVar2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp_puVar16;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp_puVar16;\n            *(undefined4 *)(temp_puVar16 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_puVar16 + 8) = 0x2007046c;\n            *(uint *)(temp_puVar16 + 4) = temp_uVar8 | 1;\n            *(uint *)(temp_puVar16 + temp_uVar8) = temp_uVar8;\n            FUNC_0008259c(output_ptr);\n            return (int *)(temp_puVar10 + 8);\n          }\n          if (-1 < (int)temp_uVar8) {\n            temp_iVar13 = *(int *)(temp_puVar10 + 8);\n            temp_iVar2 = *(int *)(temp_puVar10 + 0xc);\n            *(uint *)(temp_puVar10 + temp_uVar6 + 4) = *(uint *)(temp_puVar10 + temp_uVar6 + 4) | 1;\n            *(int *)(temp_iVar13 + 0xc) = temp_iVar2;\n            *(int *)(temp_iVar2 + 8) = temp_iVar13;\n            FUNC_0008259c(output_ptr);\n            return (int *)(temp_puVar10 + 8);\n          }\n        }\n        temp_uVar4 = temp_uVar4 + 1;\n        temp_pdVar14 = temp_pdVar14 + 2;\n      } while ((temp_uVar4 & 3) != 0);\n      do {\n        temp_uVar6 = temp_uVar18 & 3;\n        temp_puVar10 = (undefined *)(ptemp_dVar17 + -2);\n        temp_uVar18 = temp_uVar18 - 1;\n        if (temp_uVar6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp_uVar3;\n          break;\n        }\n        ptemp_dVar17 = (dword *)*ptemp_dVar17;\n      } while (ptemp_dVar17 == (dword *)temp_puVar10);\n      temp_uVar3 = temp_uVar3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp_uVar3 &&\n           temp_uVar3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp_uVar18 = temp_uVar4, temp_uVar3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp_uVar3) == 0; temp_uVar3 = temp_uVar3 << 1) {\n        temp_uVar18 = temp_uVar18 + 4;\n      }\n    } while( true );\n  }\n  temp_uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((adjusted_size <= temp_uVar18) &&\n     (temp_uVar3 = temp_uVar18 - adjusted_size, temp_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp_uVar3))\n  goto LAB_0008211e;\n  temp_uVar3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp_uVar18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp_uVar4 = adjusted_size + DAT_20071190 + 0x10;\n  }\n  else {\n    temp_uVar4 = adjusted_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  temp_dVar7 = update_parameter_if_needed_00082970(output_ptr,temp_uVar4);\n  if ((temp_dVar7 == 0xffffffff) || ((temp_dVar7 < temp_uVar3 && (temp_dVar1 != 0x20070464)))) {\n    temp_uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp_uVar6 = DAT_20071194 + temp_uVar4;\n    DAT_20071194 = temp_uVar6;\n    if ((temp_uVar3 == temp_dVar7) && ((temp_uVar3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_uVar4 + temp_uVar18 | 1;\n    }\n    else {\n      temp_dVar11 = temp_dVar7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp_dVar11 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = temp_uVar6 + (temp_dVar7 - temp_uVar3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp_dVar11;\n      temp_uVar3 = temp_dVar7 & 7;\n      if (temp_uVar3 == 0) {\n        temp_iVar13 = 0x1000;\n      }\n      else {\n        temp_dVar7 = temp_dVar7 + (8 - temp_uVar3);\n        temp_iVar13 = 0x1008 - temp_uVar3;\n      }\n      temp_iVar13 = temp_iVar13 - (temp_uVar4 + temp_dVar7 & 0xfff);\n      temp_iVar2 = update_parameter_if_needed_00082970(output_ptr,temp_iVar13);\n      if (temp_iVar2 == -1) {\n        temp_uVar3 = 1;\n        temp_iVar13 = 0;\n      }\n      else {\n        temp_uVar3 = (temp_iVar2 - temp_dVar7) + temp_iVar13 | 1;\n      }\n      temp_uVar6 = DAT_20071194 + temp_iVar13;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp_dVar7;\n      DAT_20071194 = temp_uVar6;\n      *(uint *)(temp_dVar7 + 4) = temp_uVar3;\n      if (temp_dVar1 != 0x20070464) {\n        if (temp_uVar18 < 0x10) {\n          *(undefined4 *)(temp_dVar7 + 4) = 1;\n          temp_uVar18 = 0;\n          goto LAB_00082108;\n        }\n        temp_uVar18 = temp_uVar18 - 0xc & 0xfffffff8;\n        *(uint *)(temp_dVar1 + 4) = temp_uVar18 | *(uint *)(temp_dVar1 + 4) & 1;\n        *(undefined4 *)(temp_dVar1 + temp_uVar18 + 4) = 5;\n        *(undefined4 *)(temp_dVar1 + temp_uVar18 + 8) = 5;\n        if (0xf < temp_uVar18) {\n          update_relocation_00083d9c(output_ptr,temp_dVar1 + 8);\n          temp_uVar6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp_uVar6) {\n      DAT_2007118c = temp_uVar6;\n    }\n    if (DAT_20071188 < temp_uVar6) {\n      DAT_20071188 = temp_uVar6;\n    }\n    temp_uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temp_uVar3 = temp_uVar18 - adjusted_size;\n  if ((temp_uVar18 < adjusted_size) || ((int)temp_uVar3 < 0x10)) {\n    FUNC_0008259c(output_ptr);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = adjusted_size + temp_dVar7;\n  *(uint *)(temp_dVar7 + 4) = adjusted_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_uVar3 | 1;\n  FUNC_0008259c(output_ptr);\n  return (int *)(temp_dVar7 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_and_initialize_memory_00081e14",
                "param_1": "output_ptr",
                "param_2": "size",
                "dVar1": "temp_dVar1",
                "iVar2": "temp_iVar2",
                "uVar3": "temp_uVar3",
                "uVar4": "temp_uVar4",
                "iVar5": "temp_iVar5",
                "uVar6": "temp_uVar6",
                "dVar7": "temp_dVar7",
                "uVar8": "temp_uVar8",
                "iVar9": "temp_iVar9",
                "puVar10": "temp_puVar10",
                "dVar11": "temp_dVar11",
                "dVar12": "temp_dVar12",
                "iVar13": "temp_iVar13",
                "pdVar14": "temp_pdVar14",
                "uVar15": "adjusted_size",
                "puVar16": "temp_puVar16",
                "uVar18": "temp_uVar18"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint copySize;\n  uint remainingSize;\n  bool isRemainingSizePositive;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      remainingSize = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          tempPtr = srcPtr;\n          isRemainingSizePositive = remainingSize != 0;\n          remainingSize = remainingSize - 1;\n          *(undefined *)tempPtr = *(undefined *)destPtr;\n          srcPtr = (undefined4 *)((int)tempPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemainingSizePositive);\n        *(undefined *)(undefined4 *)((int)tempPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)tempPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)tempPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingSize = 4 - ((uint)destination & 3);\n      length = length - remainingSize;\n      destPtr = destination;\n      tempPtr = source;\n      if (((uint)destination & 1) != 0) {\n        tempPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = destPtr;\n      source = tempPtr;\n      if ((remainingSize & 2) != 0) {\n        source = (undefined4 *)((int)tempPtr + 2);\n        srcPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *srcPtr = *source;\n    srcPtr[1] = source[1];\n    srcPtr[2] = source[2];\n    srcPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  copySize = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *srcPtr = *source;\n      srcPtr[1] = source[1];\n      srcPtr[2] = source[2];\n      srcPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      isRemainingSizePositive = 0xf < copySize;\n      copySize = copySize - 0x10;\n    } while (isRemainingSizePositive);\n  }\n  remainingSize = copySize + 0xc;\n  tempPtr = srcPtr;\n  destPtr = source;\n  if (0xfffffff3 < copySize) {\n    do {\n      source = destPtr + 1;\n      *tempPtr = *destPtr;\n      isRemainingSizePositive = 3 < remainingSize;\n      remainingSize = remainingSize - 4;\n      srcPtr = tempPtr + 1;\n      tempPtr = tempPtr + 1;\n      destPtr = source;\n    } while (isRemainingSizePositive);\n  }\nLAB_000823d0:\n  if (remainingSize + 4 != 0) {\n    destPtr = srcPtr;\n    tempPtr = source;\n    if ((remainingSize & 1) != 0) {\n      tempPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((remainingSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar3": "tempPtr",
                "uVar4": "copySize",
                "uVar5": "remainingSize",
                "bVar6": "isRemainingSizePositive"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint tempLength;\n  undefined *tempByte;\n  uint remainingBytes;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + length), dest < tempPtr)) {\n    tempByte = (undefined *)((int)dest + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        index = index + -1;\n        tempByte = tempByte + -1;\n        *tempByte = *(undefined *)tempPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    remainingBytes = length & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tempLength = remainingBytes;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainingBytes) {\n      do {\n        tempLength = tempLength - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempLength);\n      index = (remainingBytes - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainingBytes = length & 3;\n    }\n    length = remainingBytes;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempLength",
                "puVar6": "tempByte",
                "uVar7": "remainingBytes"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_buffer_00082504",
            "code": "\nvoid fillBuffer_00082504(undefined4 *buffer,undefined value,uint size)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  undefined4 pattern;\n  uint remaining;\n  bool isZero;\n  \n  if (((uint)buffer & 3) != 0) {\n    isZero = size == 0;\n    ptr1 = buffer;\n    size = size - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = value;\n      if (((uint)buffer & 3) == 0) break;\n      isZero = size == 0;\n      ptr1 = buffer;\n      size = size - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining = size;\n    ptr1 = buffer;\n    if (0xf < size) {\n      remaining = size - 0x10;\n      do {\n        *ptr1 = pattern;\n        ptr1[1] = pattern;\n        ptr1[2] = pattern;\n        ptr1[3] = pattern;\n        ptr1 = ptr1 + 4;\n      } while (ptr1 != (undefined4 *)((int)buffer + (remaining & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      buffer = buffer + ((remaining >> 4) + 1) * 4;\n      remaining = size;\n      ptr1 = buffer;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *buffer = pattern;\n      buffer = buffer + 1;\n    } while (3 < size);\n    buffer = (undefined4 *)((int)ptr1 + (remaining - 4 & 0xfffffffc) + 4);\n    size = remaining & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    ptr1 = buffer;\n    do {\n      ptr2 = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = value;\n      ptr1 = ptr2;\n    } while (ptr2 != (undefined4 *)(size + (int)buffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_buffer_00082504",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "pattern",
                "uVar4": "remaining",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "allocate_and_initialize_memory_000825a0",
            "code": "\nvoid allocateAndInitializeMemory_000825a0(undefined4 address,undefined4 size)\n\n{\n  allocate_and_initialize_memory_000825b0(relocationTable[140].r_offset,address,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "allocate_and_initialize_memory_000825a0",
                "param_1": "address",
                "param_2": "size",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_and_initialize_memory_000825b0",
            "code": "\nint * allocate_and_initialize_memory_000825b0(undefined4 *ptr_param,int *ptr_array,uint size)\n\n{\n  dword temp1;\n  int *result;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint temp7;\n  uint temp8;\n  int *temp_ptr;\n  \n  if (ptr_array == (int *)0x0) {\n    result = (int *)allocate_and_initialize_memory_000825b0_00081e14(ptr_param,size);\n    return result;\n  }\n  FUNC_00082598();\n  temp4 = ptr_array[-1];\n  temp7 = temp4 & 0xfffffffc;\n  result = ptr_array + -2;\n  if (size + 0xb < 0x17) {\n    temp8 = 0x10;\n  }\n  else {\n    temp8 = size + 0xb & 0xfffffff8;\n    if ((int)temp8 < 0) goto LAB_0008267c;\n  }\n  if (temp8 < size) {\nLAB_0008267c:\n    *ptr_param = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)temp8) {\n    temp1 = (int)result + temp7;\n    if (relocation_array[141].r_info == temp1) {\n      temp2 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n      temp1 = relocation_array[141].r_info;\n      if ((int)(temp8 + 0x10) <= (int)(temp2 + temp7)) {\n        relocation_array[141].r_info = (int)result + temp8;\n        *(uint *)(relocation_array[141].r_info + 4) = (temp2 + temp7) - temp8 | 1;\n        ptr_array[-1] = temp8 | ptr_array[-1] & 1U;\n        FUNC_0008259c(ptr_param);\n        return ptr_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)temp8 <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp_ptr = (int *)((int)result - ptr_array[-2]);\n      temp4 = (temp_ptr[1] & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == relocation_array[141].r_info) {\n          if ((int)(temp8 + 0x10) <= (int)(temp2 + temp4)) {\n            result = temp_ptr + 2;\n            temp3 = *result;\n            temp5 = temp_ptr[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp6 = result;\n              if (0x13 < temp7) {\n                temp_ptr[2] = *ptr_array;\n                temp_ptr[3] = ptr_array[1];\n                if (temp7 < 0x1c) {\n                  ptr_array = ptr_array + 2;\n                  temp6 = temp_ptr + 4;\n                }\n                else {\n                  temp_ptr[4] = ptr_array[2];\n                  temp_ptr[5] = ptr_array[3];\n                  if (temp7 == 0x24) {\n                    temp_ptr[6] = ptr_array[4];\n                    temp6 = ptr_array + 5;\n                    ptr_array = ptr_array + 6;\n                    temp_ptr[7] = *temp6;\n                    temp6 = temp_ptr + 8;\n                  }\n                  else {\n                    ptr_array = ptr_array + 4;\n                    temp6 = temp_ptr + 6;\n                  }\n                }\n              }\n              *temp6 = *ptr_array;\n              temp6[1] = ptr_array[1];\n              temp6[2] = ptr_array[2];\n            }\n            else {\n              copy_memory_00082438(result,ptr_array);\n            }\n            relocation_array[141].r_info = (int)temp_ptr + temp8;\n            *(uint *)(relocation_array[141].r_info + 4) = (temp2 + temp4) - temp8 | 1;\n            temp_ptr[1] = temp8 | temp_ptr[1] & 1U;\n            FUNC_0008259c(ptr_param);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)temp8 <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = temp_ptr + 2;\n            temp3 = *temp6;\n            temp5 = temp_ptr[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              result = temp6;\n              if (0x13 < temp4) {\n                temp_ptr[2] = *ptr_array;\n                temp_ptr[3] = ptr_array[1];\n                if (temp4 < 0x1c) {\n                  ptr_array = ptr_array + 2;\n                  result = temp_ptr + 4;\n                }\n                else {\n                  temp_ptr[4] = ptr_array[2];\n                  temp_ptr[5] = ptr_array[3];\n                  if (temp4 == 0x24) {\n                    temp_ptr[6] = ptr_array[4];\n                    result = ptr_array + 5;\n                    ptr_array = ptr_array + 6;\n                    temp_ptr[7] = *result;\n                    result = temp_ptr + 8;\n                  }\n                  else {\n                    ptr_array = ptr_array + 4;\n                    result = temp_ptr + 6;\n                  }\n                }\n              }\n              *result = *ptr_array;\n              result[1] = ptr_array[1];\n              result[2] = ptr_array[2];\n              temp4 = temp_ptr[1];\n              result = temp_ptr;\n              ptr_array = temp6;\n            }\n            else {\n              copy_memory_00082438(temp6,ptr_array);\n              temp4 = temp_ptr[1];\n              result = temp_ptr;\n              ptr_array = temp6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp8 <= (int)temp4) {\n        temp6 = temp_ptr + 2;\n        temp3 = *temp6;\n        temp5 = temp_ptr[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          result = temp6;\n          if (0x13 < temp2) {\n            temp_ptr[2] = *ptr_array;\n            temp_ptr[3] = ptr_array[1];\n            if (temp2 < 0x1c) {\n              ptr_array = ptr_array + 2;\n              result = temp_ptr + 4;\n            }\n            else {\n              temp_ptr[4] = ptr_array[2];\n              temp_ptr[5] = ptr_array[3];\n              if (temp2 == 0x24) {\n                temp_ptr[6] = ptr_array[4];\n                result = ptr_array + 5;\n                ptr_array = ptr_array + 6;\n                temp_ptr[7] = *result;\n                result = temp_ptr + 8;\n              }\n              else {\n                ptr_array = ptr_array + 4;\n                result = temp_ptr + 6;\n              }\n            }\n          }\n          *result = *ptr_array;\n          result[1] = ptr_array[1];\n          result[2] = ptr_array[2];\n          temp4 = temp_ptr[1];\n          result = temp_ptr;\n          ptr_array = temp6;\n        }\n        else {\n          copy_memory_00082438(temp6,ptr_array);\n          temp4 = temp_ptr[1];\n          result = temp_ptr;\n          ptr_array = temp6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr = (int *)allocate_and_initialize_memory_000825b0_00081e14(ptr_param,size);\n    if (temp_ptr == (int *)0x0) goto LAB_000826a4;\n    temp4 = ptr_array[-1];\n    if (temp_ptr + -2 != (int *)((temp4 & 0xfffffffe) + (int)result)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        result = ptr_array;\n        temp6 = temp_ptr;\n        if (0x13 < temp7) {\n          *temp_ptr = *ptr_array;\n          temp_ptr[1] = ptr_array[1];\n          if (temp7 < 0x1c) {\n            result = ptr_array + 2;\n            temp6 = temp_ptr + 2;\n          }\n          else {\n            temp_ptr[2] = ptr_array[2];\n            temp_ptr[3] = ptr_array[3];\n            if (temp7 == 0x24) {\n              temp_ptr[4] = ptr_array[4];\n              temp_ptr[5] = ptr_array[5];\n              result = ptr_array + 6;\n              temp6 = temp_ptr + 6;\n            }\n            else {\n              result = ptr_array + 4;\n              temp6 = temp_ptr + 4;\n            }\n          }\n        }\n        *temp6 = *result;\n        temp6[1] = result[1];\n        temp6[2] = result[2];\n      }\n      else {\n        copy_memory_00082438(temp_ptr,ptr_array);\n      }\n      update_relocation_00083d9c(ptr_param,ptr_array);\n      goto LAB_000826a4;\n    }\n    temp7 = temp7 + (temp_ptr[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = temp7 - temp8;\n  temp_ptr = ptr_array;\n  if (temp2 < 0x10) {\n    result[1] = temp4 & 1 | temp7;\n    *(uint *)((int)result + temp7 + 4) = *(uint *)((int)result + temp7 + 4) | 1;\n  }\n  else {\n    result[1] = temp4 & 1 | temp8;\n    *(uint *)((int)result + temp8 + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + temp8 + 4) = *(uint *)((int)result + temp2 + temp8 + 4) | 1;\n    update_relocation_00083d9c(ptr_param,(int)result + temp8 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(ptr_param);\n  return temp_ptr;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_and_initialize_memory_000825b0",
                "param_1": "ptr_param",
                "param_2": "ptr_array",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "result",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "piVar10": "temp_ptr",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "update_parameter_if_needed_00082970",
            "code": "\nvoid updateParameterIfNeeded_00082970(int *outputValue,undefined4 inputValue)\n\n{\n  int updatedValue;\n  \n  DAT_200711bc = 0;\n  updatedValue = calculate_updated_value_0008118c(inputValue);\n  if ((updatedValue == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "update_parameter_if_needed_00082970",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "updatedValue"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_check_00082994",
            "code": "\nvoid copyStringWithAlignmentCheck_00082994(uint *destination,uint *source)\n\n{\n  char sourceChar;\n  ushort sourceShort;\n  uint *nextSource;\n  uint *nextCharSource;\n  uint currentValue;\n  uint currentByte;\n  uint *nextDestination;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      sourceChar = *(char *)source;\n      *(char *)destination = sourceChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (sourceChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextCharSource = source;\n    if (((uint)source & 1) != 0) {\n      nextCharSource = (uint *)((int)source + 1);\n      sourceChar = *(char *)source;\n      *(char *)destination = sourceChar;\n      destination = (uint *)((int)destination + 1);\n      if (sourceChar == '\\0') {\n        return;\n      }\n    }\n    source = nextCharSource;\n    if (((uint)nextCharSource & 2) != 0) {\n      source = (uint *)((int)nextCharSource + 2);\n      sourceShort = *(ushort *)nextCharSource;\n      isZeroByte = (sourceShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)sourceShort;\n      }\n      else {\n        *(ushort *)destination = sourceShort;\n        isZeroByte = (sourceShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentValue = *source;\n  nextCharSource = source + 1;\n  nextDestination = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_000829f8;\n    nextDestination = destination + 1;\n    *destination = currentValue;\n    nextCharSource = source + 2;\n    currentValue = source[1];\n  }\n  while( true ) {\n    nextSource = nextCharSource + 1;\n    currentByte = *nextCharSource;\n    destination = nextDestination;\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) break;\n    destination = nextDestination + 1;\n    *nextDestination = currentValue;\n    currentValue = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    nextCharSource = nextCharSource + 2;\n    currentValue = *nextSource;\n    nextDestination = nextDestination + 2;\n    *destination = currentByte;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentValue;\n    currentByte = currentValue & 0xff;\n    currentValue = currentValue >> 8 | currentValue << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "sourceChar",
                "uVar2": "sourceShort",
                "puVar3": "nextSource",
                "puVar4": "nextCharSource",
                "uVar5": "currentValue",
                "uVar6": "currentByte",
                "puVar7": "nextDestination",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint num)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(num & 0xfffffffc);\n  leadingZeros = -(num & 3);\n  value = *ptr;\n  if ((num & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "num",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_binary_data_00082ac0",
            "code": "\nint processBinaryData_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *currentPtr;\n  int result;\n  int *nestedPtr;\n  uint iterationCount;\n  undefined4 *dataPointer;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = process_data_from_binary_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  nestedPtr = param3[2];\n  currentPtr = *param3;\n  while (nestedPtr != (int *)0x0) {\n    value1 = currentPtr[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      dataPointer = (undefined4 *)(*currentPtr + -4);\n      iterationCount = 0;\n      do {\n        dataPointer = dataPointer + 1;\n        result = process_data_00083c40(param1,*dataPointer,param2);\n        iterationCount = iterationCount + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != iterationCount);\n      nestedPtr = param3[2];\n    }\n    nestedPtr = (int *)((int)nestedPtr - (value1 & 0xfffffffc));\n    param3[2] = nestedPtr;\n    currentPtr = currentPtr + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_binary_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "currentPtr",
                "iVar2": "result",
                "piVar3": "nestedPtr",
                "uVar4": "iterationCount",
                "puVar5": "dataPointer",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_buffers_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = check_and_update_relocation_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = decode_and_process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_first_match_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_difference_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_difference_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_binary_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_binary_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "decode_and_process_data_0008378c",
            "code": "\nint decode_and_process_data_0008378c(undefined4 input_param,int binary_data)\n\n{\n  int result;\n  int processing_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort data_value;\n  undefined2 data_length;\n  undefined *buffer;\n  undefined4 buffer_size_1;\n  undefined4 buffer_size_2;\n  undefined4 buffer_size_3;\n  undefined4 buffer_size_4;\n  undefined4 temporary;\n  undefined data_buffer [1024];\n  \n  temporary = *(undefined4 *)(binary_data + 100);\n  buffer_size_3 = *(undefined4 *)(binary_data + 0x1c);\n  data_length = *(undefined2 *)(binary_data + 0xe);\n  buffer_size_4 = *(undefined4 *)(binary_data + 0x24);\n  buffer_array[0] = data_buffer;\n  data_value = *(ushort *)(binary_data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_1 = 0x400;\n  buffer_size_2 = 0;\n  buffer = buffer_array[0];\n  result = FUNC_00082b38(input_param,buffer_array);\n  if ((-1 < result) && (processing_result = process_data_00083adc(input_param,buffer_array), processing_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)data_value << 0x19) < 0) {\n    *(ushort *)(binary_data + 0xc) = *(ushort *)(binary_data + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "decode_and_process_data_0008378c",
                "param_1": "input_param",
                "param_2": "binary_data",
                "iVar1": "result",
                "iVar2": "processing_result",
                "local_488": "buffer_array",
                "local_478": "buffer",
                "local_480": "buffer_size",
                "local_47c": "data_value",
                "local_47a": "data_length",
                "local_474": "buffer_size_1",
                "local_470": "buffer_size_2",
                "local_46c": "buffer_size_3",
                "local_464": "buffer_size_4",
                "local_424": "temporary",
                "auStack_420": "data_buffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "check_and_update_relocation_00083808",
            "code": "\nundefined4 checkAndUpdateRelocation_00083808(undefined4 *result,int *inputParams)\n\n{\n  int value1;\n  int value2;\n  uint uValue1;\n  ushort uValue2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_buffers_00083b14();\n  }\n  uValue2 = *(ushort *)(inputParams + 3);\n  uValue1 = (uint)uValue2;\n  if ((int)(uValue1 << 0x1c) < 0) {\n    value2 = inputParams[4];\n  }\n  else {\n    if (-1 < (int)(uValue1 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(inputParams + 3) = uValue2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(uValue1 << 0x1d) < 0) {\n      if ((int *)inputParams[0xc] != (int *)0x0) {\n        if ((int *)inputParams[0xc] != inputParams + 0x10) {\n          update_relocation_00083d9c(result);\n          uValue2 = *(ushort *)(inputParams + 3);\n        }\n        inputParams[0xc] = 0;\n      }\n      value2 = inputParams[4];\n      uValue2 = uValue2 & 0xffdb;\n      *inputParams = value2;\n      inputParams[1] = 0;\n    }\n    else {\n      value2 = inputParams[4];\n    }\n    *(ushort *)(inputParams + 3) = uValue2 | 8;\n    uValue1 = (uint)(uValue2 | 8);\n  }\n  if ((value2 == 0) && ((uValue1 & 0x280) != 0x200)) {\n    initialize_memory_000842a4(result,inputParams);\n    uValue1 = (uint)*(ushort *)(inputParams + 3);\n    value2 = inputParams[4];\n  }\n  if ((uValue1 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(uValue1 << 0x1e)) {\n      value1 = inputParams[5];\n    }\n    inputParams[2] = value1;\n  }\n  else {\n    inputParams[6] = -inputParams[5];\n    inputParams[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(inputParams + 3) << 0x18) < 0)) {\n    *(ushort *)(inputParams + 3) = *(ushort *)(inputParams + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "check_and_update_relocation_00083808",
                "param_1": "result",
                "param_2": "inputParams",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "uValue1",
                "uVar4": "uValue2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 process_data_00083adc(int *data_buffer,int *control_buffer)\n\n{\n  int *ptr_var1;\n  int temp_var;\n  ushort flag;\n  uint flag2;\n  int temp_var2;\n  code *callback;\n  undefined4 result;\n  int temp_var3;\n  \n  if ((data_buffer != (int *)0x0) && (data_buffer[0xe] == 0)) {\n    initialize_buffers_00083b14();\n  }\n  if (*(short *)(control_buffer + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(control_buffer + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    temp_var3 = control_buffer[4];\n    if (temp_var3 == 0) {\n      return 0;\n    }\n    temp_var = *control_buffer;\n    if ((flag & 3) == 0) {\n      temp_var2 = control_buffer[5];\n    }\n    else {\n      temp_var2 = 0;\n    }\n    *control_buffer = temp_var3;\n    temp_var = temp_var - temp_var3;\n    control_buffer[2] = temp_var2;\n    do {\n      if (temp_var < 1) {\n        return 0;\n      }\n      temp_var2 = (*(code *)control_buffer[9])(data_buffer,control_buffer[7],temp_var3,temp_var,result);\n      temp_var = temp_var - temp_var2;\n      temp_var3 = temp_var3 + temp_var2;\n    } while (0 < temp_var2);\nLAB_00083a54:\n    *(ushort *)(control_buffer + 3) = *(ushort *)(control_buffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(control_buffer + 3) = flag | 0x800;\n  if ((control_buffer[1] < 1) && (control_buffer[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)control_buffer[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  flag2 = (uint)(flag | 0x800);\n  temp_var3 = *data_buffer;\n  *data_buffer = 0;\n  if ((flag & 0x1000) == 0) {\n    temp_var = (*callback)(data_buffer,control_buffer[7],flag2 & 0x1000,1);\n    if ((temp_var == -1) && (temp_var2 = *data_buffer, temp_var2 != 0)) {\n      if ((temp_var2 == 0x1d) || (temp_var2 == 0x16)) {\n        *data_buffer = temp_var3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    flag2 = (uint)*(ushort *)(control_buffer + 3);\n    callback = (code *)control_buffer[10];\n  }\n  else {\n    temp_var = control_buffer[0x14];\n  }\n  if (((int)(flag2 << 0x1d) < 0) && (temp_var = temp_var - control_buffer[1], control_buffer[0xc] != 0)) {\n    temp_var = temp_var - control_buffer[0xf];\n  }\n  temp_var = (*callback)(data_buffer,control_buffer[7],temp_var,0);\n  if (temp_var == -1) {\n    temp_var2 = *data_buffer;\n    if (temp_var2 != 0) {\n      if ((temp_var2 != 0x1d) && (temp_var2 != 0x16)) {\n        *(ushort *)(control_buffer + 3) = *(ushort *)(control_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(control_buffer + 3) = *(ushort *)(control_buffer + 3) & 0xf7ff;\n      *control_buffer = control_buffer[4];\n      control_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flag = *(ushort *)(control_buffer + 3) & 0xf7ff;\n    control_buffer[1] = 0;\n    *(ushort *)(control_buffer + 3) = flag;\n    *control_buffer = control_buffer[4];\n  }\n  else {\n    flag = *(ushort *)(control_buffer + 3) & 0xf7ff;\n    *control_buffer = control_buffer[4];\n    *(ushort *)(control_buffer + 3) = flag;\n    control_buffer[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    control_buffer[0x14] = temp_var;\n  }\nLAB_00083a00:\n  ptr_var1 = (int *)control_buffer[0xc];\n  *data_buffer = temp_var3;\n  if (ptr_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr_var1 != control_buffer + 0x10) {\n    update_relocation_00083d9c(data_buffer);\n  }\n  control_buffer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "data_buffer",
                "param_2": "control_buffer",
                "piVar1": "ptr_var1",
                "iVar2": "temp_var",
                "uVar3": "flag",
                "uVar4": "flag2",
                "iVar5": "temp_var2",
                "pcVar6": "callback",
                "unaff_r4": "result",
                "iVar7": "temp_var3"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_buffers_00083b14",
            "code": "\nvoid initializeBuffers_00083b14(int param)\n\n{\n  undefined4 *buffer1;\n  undefined4 *buffer2;\n  \n  if (*(int *)(param + 0x38) == 0) {\n    buffer1 = *(undefined4 **)(param + 4);\n    *(undefined **)(param + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(param + 0x2e4) = 3;\n    *(int *)(param + 0x2e8) = param + 0x2ec;\n    *(undefined4 *)(param + 0x2e0) = 0;\n    *(undefined2 *)(buffer1 + 3) = 4;\n    *buffer1 = 0;\n    buffer1[1] = 0;\n    buffer1[2] = 0;\n    buffer1[0x19] = 0;\n    *(undefined2 *)((int)buffer1 + 0xe) = 0;\n    buffer1[4] = 0;\n    buffer1[5] = 0;\n    buffer1[6] = 0;\n    fill_buffer_00082504(buffer1 + 0x17,0,8);\n    buffer2 = *(undefined4 **)(param + 8);\n    buffer1[7] = buffer1;\n    buffer1[8] = &LAB_00084440_1;\n    buffer1[9] = 0x84465;\n    buffer1[10] = 0x8449d;\n    buffer1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)buffer2 + 0xe) = 1;\n    *(undefined2 *)(buffer2 + 3) = 9;\n    *buffer2 = 0;\n    buffer2[1] = 0;\n    buffer2[2] = 0;\n    buffer2[0x19] = 0;\n    buffer2[4] = 0;\n    buffer2[5] = 0;\n    buffer2[6] = 0;\n    fill_buffer_00082504(buffer2 + 0x17,0,8);\n    buffer1 = *(undefined4 **)(param + 0xc);\n    buffer2[7] = buffer2;\n    buffer2[8] = &LAB_00084440_1;\n    buffer2[9] = 0x84465;\n    buffer2[10] = 0x8449d;\n    buffer2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(buffer1 + 3) = 0x12;\n    *(undefined2 *)((int)buffer1 + 0xe) = 2;\n    *buffer1 = 0;\n    buffer1[1] = 0;\n    buffer1[2] = 0;\n    buffer1[0x19] = 0;\n    buffer1[4] = 0;\n    buffer1[5] = 0;\n    buffer1[6] = 0;\n    fill_buffer_00082504(buffer1 + 0x17,0,8);\n    buffer1[7] = buffer1;\n    buffer1[8] = &LAB_00084440_1;\n    buffer1[9] = 0x84465;\n    buffer1[10] = 0x8449d;\n    buffer1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(param + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_buffers_00083b14",
                "param_1": "param",
                "puVar1": "buffer1",
                "puVar2": "buffer2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocationInfo;\n  uint result;\n  uint value;\n  byte *dataPtr;\n  uint index;\n  byte byteValue;\n  byte stackArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocationInfo = get_relocation_info_00084298();\n  if ((relocationInfo == 1) && (param2 - 1 < 0xff)) {\n    value = param2 & 0xff;\n    byteValue = (byte)value;\n    result = 1;\n  }\n  else {\n    result = process_data_0008456c(param1,&byteValue,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    value = (uint)byteValue;\n  }\n  index = 0;\n  do {\n    dataPtr = param3[2] + -1;\n    param3[2] = dataPtr;\n    if ((int)dataPtr < 0) {\n      if ((int)param3[6] <= (int)dataPtr) {\n        **param3 = (byte)value;\n        dataPtr = *param3;\n        value = (uint)*dataPtr;\n        if (value != 10) goto LAB_00083c90;\n      }\n      relocationInfo = process_and_update_data_000844c4(param1,value,param3);\n      if (relocationInfo == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)value;\n      dataPtr = *param3;\nLAB_00083c90:\n      *param3 = dataPtr + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    value = (uint)stackArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "relocationInfo",
                "uVar2": "result",
                "uVar3": "value",
                "pbVar4": "dataPtr",
                "uVar5": "index",
                "local_1c": "byteValue",
                "abStack_1b": "stackArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_memory_allocation_00083d00",
            "code": "\nundefined4 update_memory_allocation_00083d00(undefined4 param1,int param2)\n\n{\n  int returnValue1;\n  uint maskedValue;\n  int adjustedValue;\n  \n  FUNC_00082598();\n  maskedValue = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedValue = ((maskedValue - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedValue) {\n    returnValue1 = update_parameter_if_needed_00082970(param1,0);\n    if (returnValue1 == Elf32_Rel_ARRAY_20070000[141].r_info + maskedValue) {\n      returnValue1 = update_parameter_if_needed_00082970(param1,-adjustedValue);\n      if (returnValue1 != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedValue;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = maskedValue - adjustedValue | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      adjustedValue = update_parameter_if_needed_00082970(param1,0);\n      if (0xf < (int)(adjustedValue - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedValue - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedValue - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_memory_allocation_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "returnValue1",
                "uVar2": "maskedValue",
                "iVar3": "adjustedValue"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_00083d9c",
            "code": "\nvoid updateRelocation_00083d9c(undefined4 param,int relocationTable)\n\n{\n  int currentValue;\n  bool isSpecialCase;\n  uint alignment;\n  dword previousRelocation;\n  int previousValue;\n  uint offset;\n  dword relocation;\n  uint newOffset;\n  dword newRelocation;\n  \n  if (relocationTable == 0) {\n    return;\n  }\n  FUNC_00082598();\n  alignment = *(uint *)(relocationTable + -4);\n  relocation = relocationTable - 8;\n  offset = alignment & 0xfffffffe;\n  previousRelocation = relocation + offset;\n  newOffset = *(uint *)(previousRelocation + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == previousRelocation) {\n    newOffset = newOffset + offset;\n    if (-1 < (int)(alignment << 0x1f)) {\n      relocation = relocation - *(int *)(relocationTable + -8);\n      previousValue = *(int *)(relocation + 0xc);\n      currentValue = *(int *)(relocation + 8);\n      newOffset = newOffset + *(int *)(relocationTable + -8);\n      *(int *)(currentValue + 0xc) = previousValue;\n      *(int *)(previousValue + 8) = currentValue;\n    }\n    previousRelocation = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(relocation + 4) = newOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = relocation;\n    if (previousRelocation <= newOffset) {\n      update_memory_allocation_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(previousRelocation + 4) = newOffset;\n    if ((alignment & 1) == 0) {\n      relocation = relocation - *(int *)(relocationTable + -8);\n      currentValue = *(int *)(relocation + 8);\n      offset = offset + *(int *)(relocationTable + -8);\n      if (currentValue == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        previousValue = *(int *)(relocation + 0xc);\n        *(int *)(currentValue + 0xc) = previousValue;\n        *(int *)(previousValue + 8) = currentValue;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(previousRelocation + newOffset + 4) << 0x1f) {\n      offset = offset + newOffset;\n      currentValue = *(int *)(previousRelocation + 8);\n      if ((!isSpecialCase) && (currentValue == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = relocation;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = relocation;\n        *(undefined4 *)(relocation + 0xc) = 0x2007046c;\n        *(undefined4 *)(relocation + 8) = 0x2007046c;\n        *(uint *)(relocation + 4) = offset | 1;\n        *(uint *)(relocation + offset) = offset;\n        goto LAB_00083e30;\n      }\n      previousValue = *(int *)(previousRelocation + 0xc);\n      *(int *)(currentValue + 0xc) = previousValue;\n      *(int *)(previousValue + 8) = currentValue;\n    }\n    *(uint *)(relocation + 4) = offset | 1;\n    *(uint *)(relocation + offset) = offset;\n    if (!isSpecialCase) {\n      if (offset < 0x200) {\n        alignment = offset & 0xfffffff8;\n        currentValue = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignment);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(relocation + 8) = currentValue;\n        *(uint *)(relocation + 0xc) = alignment + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignment) = relocation;\n        *(dword *)(currentValue + 0xc) = relocation;\n        FUNC_0008259c(param);\n        return;\n      }\n      alignment = offset >> 9;\n      if (alignment < 5) {\n        currentValue = (offset >> 6) + 0x38;\n        previousValue = currentValue * 2;\n      }\n      else if (alignment < 0x15) {\n        currentValue = alignment + 0x5b;\n        previousValue = currentValue * 2;\n      }\n      else if (alignment < 0x55) {\n        currentValue = (offset >> 0xc) + 0x6e;\n        previousValue = currentValue * 2;\n      }\n      else if (alignment < 0x155) {\n        currentValue = (offset >> 0xf) + 0x77;\n        previousValue = currentValue * 2;\n      }\n      else if (alignment < 0x555) {\n        currentValue = (offset >> 0x12) + 0x7c;\n        previousValue = currentValue * 2;\n      }\n      else {\n        previousValue = 0xfc;\n        currentValue = 0x7e;\n      }\n      newRelocation = previousValue * 4 + 0x20070464;\n      previousRelocation = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[previousValue];\n      if (previousRelocation == newRelocation) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currentValue >> 2 & 0xffU);\n        newRelocation = previousRelocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(previousRelocation + 4) & 0xfffffffc) <= offset) break;\n          previousRelocation = *(dword *)(previousRelocation + 8);\n        } while (newRelocation != previousRelocation);\n        newRelocation = *(dword *)(previousRelocation + 0xc);\n      }\n      *(dword *)(relocation + 0xc) = newRelocation;\n      *(dword *)(relocation + 8) = previousRelocation;\n      *(dword *)(newRelocation + 8) = relocation;\n      *(dword *)(previousRelocation + 0xc) = relocation;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_00083d9c",
                "param_1": "param",
                "param_2": "relocationTable",
                "iVar1": "currentValue",
                "bVar2": "isSpecialCase",
                "uVar3": "alignment",
                "dVar4": "previousRelocation",
                "iVar5": "previousValue",
                "uVar6": "offset",
                "dVar7": "relocation",
                "uVar8": "newOffset",
                "dVar9": "newRelocation"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_from_binary_00083f34",
            "code": "\nundefined4 processDataFromBinary_00083f34(undefined4 *pBinaryData,uint *pHeader,uint **ppMemory)\n\n{\n  int result;\n  uint byteCount;\n  uint flag;\n  ushort headerFlag;\n  uint headerFlagValue;\n  uint *ptr1;\n  uint *ptr2;\n  uint counter;\n  uint variable1;\n  uint variable2;\n  uint variable3;\n  uint localVar;\n  \n  if (ppMemory[2] != (uint *)0x0) {\n    headerFlag = *(ushort *)(pHeader + 3);\n    headerFlagValue = (uint)headerFlag;\n    if (((int)(headerFlagValue << 0x1c) < 0) && (pHeader[4] != 0)) {\n      ptr2 = *ppMemory;\n    }\n    else {\n      result = checkAndUpdateRelocation(pBinaryData,pHeader);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      headerFlag = *(ushort *)(pHeader + 3);\n      headerFlagValue = (uint)headerFlag;\n      ptr2 = *ppMemory;\n    }\n    if ((headerFlag & 2) == 0) {\n      byteCount = headerFlagValue & 2;\n      variable2 = byteCount;\n      counter = byteCount;\n      localVar = byteCount;\n      if ((headerFlagValue & 1) == 0) {\n        byteCount = 0;\n        variable2 = 0;\n        while( true ) {\n          while (byteCount == 0) {\n            variable2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            byteCount = *ptr1;\n          }\n          counter = pHeader[2];\n          if ((int)(headerFlagValue << 0x16) < 0) {\n            if (byteCount < counter) {\n              headerFlagValue = *pHeader;\n              counter = byteCount;\n            }\n            else if ((headerFlagValue & 0x480) == 0) {\n              headerFlagValue = *pHeader;\n            }\n            else {\n              result = *pHeader - pHeader[4];\n              counter = result + 1 + byteCount;\n              variable1 = (int)(pHeader[5] * 3) / 2;\n              if (counter <= variable1) {\n                counter = variable1;\n              }\n              if ((int)(headerFlagValue << 0x15) < 0) {\n                variable1 = allocateAndInitializeMemory(pBinaryData,counter);\n                if (variable1 == 0) {\n                  *pBinaryData = 0xc;\n                  headerFlag = *(ushort *)(pHeader + 3);\n                  goto endLabel;\n                }\n                copyMemory1(variable1,pHeader[4],result);\n                *(ushort *)(pHeader + 3) = *(ushort *)(pHeader + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                variable1 = allocateAndInitializeMemory2(pBinaryData);\n                if (variable1 == 0) {\n                  updateRelocation(pBinaryData,pHeader[4]);\n                  headerFlag = *(ushort *)(pHeader + 3) & 0xff7f;\n                  *pBinaryData = 0xc;\n                  goto endLabel;\n                }\n              }\n              headerFlagValue = variable1 + result;\n              pHeader[4] = variable1;\n              pHeader[5] = counter;\n              *pHeader = headerFlagValue;\n              pHeader[2] = counter - result;\n              counter = byteCount;\n            }\n            copyMemory2(headerFlagValue,variable2,counter);\n            pHeader[2] = pHeader[2] - counter;\n            *pHeader = *pHeader + counter;\n            counter = byteCount;\n          }\n          else if ((pHeader[4] < *pHeader) || (headerFlagValue = pHeader[5], byteCount < headerFlagValue)) {\n            if (byteCount < counter) {\n              counter = byteCount;\n            }\n            copyMemory2(*pHeader,variable2,counter);\n            headerFlagValue = pHeader[2];\n            pHeader[2] = headerFlagValue - counter;\n            *pHeader = *pHeader + counter;\n            if ((headerFlagValue - counter == 0) && (result = processData(pBinaryData,pHeader), result != 0))\n            goto endLabel2;\n          }\n          else {\n            counter = 0x7fffffff;\n            if (byteCount < 0x7fffffff) {\n              counter = byteCount;\n            }\n            counter = (*(code *)pHeader[9])(pBinaryData,pHeader[7],variable2,(counter / headerFlagValue) * headerFlagValue);\n            if ((int)counter < 1) goto endLabel2;\n          }\n          ptr1 = ppMemory[2];\n          variable2 = variable2 + counter;\n          byteCount = byteCount - counter;\n          ppMemory[2] = (uint *)((int)ptr1 - counter);\n          if ((uint *)((int)ptr1 - counter) == (uint *)0x0) break;\n          headerFlagValue = (uint)*(ushort *)(pHeader + 3);\n        }\n      }\n      else {\n        do {\n          while (byteCount == 0) {\n            counter = *ptr2;\n            byteCount = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            result = findFirstMatch(counter,10,byteCount);\n            if (result == 0) {\n              variable2 = byteCount + 1;\n              localVar = 1;\n            }\n            else {\n              variable2 = (result + 1) - counter;\n              localVar = 1;\n            }\n          }\n          variable1 = *pHeader;\n          headerFlagValue = variable2;\n          if (byteCount <= variable2) {\n            headerFlagValue = byteCount;\n          }\n          flag = pHeader[5];\n          if ((pHeader[4] < variable1) && (variable3 = pHeader[2] + flag, (int)variable3 < (int)headerFlagValue)) {\n            copyMemory2(variable1,counter,variable3);\n            *pHeader = *pHeader + variable3;\n            result = processData(pBinaryData,pHeader);\n            if (result != 0) goto endLabel2;\n          }\n          else if ((int)headerFlagValue < (int)flag) {\n            copyMemory2(variable1,counter,headerFlagValue);\n            pHeader[2] = pHeader[2] - headerFlagValue;\n            *pHeader = headerFlagValue + *pHeader;\n            variable3 = headerFlagValue;\n          }\n          else {\n            variable3 = (*(code *)pHeader[9])(pBinaryData,pHeader[7],counter,flag);\n            if ((int)variable3 < 1) goto endLabel2;\n          }\n          variable2 = variable2 - variable3;\n          if (variable2 == 0) {\n            result = processData(pBinaryData,pHeader);\n            if (result != 0) goto endLabel2;\n            localVar = 0;\n          }\n          ptr1 = ppMemory[2];\n          counter = counter + variable3;\n          byteCount = byteCount - variable3;\n          ppMemory[2] = (uint *)((int)ptr1 - variable3);\n        } while ((uint *)((int)ptr1 - variable3) != (uint *)0x0);\n      }\n    }\n    else {\n      byteCount = 0;\n      headerFlagValue = 0;\n      do {\n        while( true ) {\n          variable2 = headerFlagValue;\n          if (0x7ffffbff < headerFlagValue) {\n            variable2 = 0x7ffffc00;\n          }\n          if (headerFlagValue != 0) break;\n          byteCount = *ptr2;\n          headerFlagValue = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)pHeader[9])(pBinaryData,pHeader[7],byteCount,variable2);\n        if (result < 1) {\nendLabel2:\n          headerFlag = *(ushort *)(pHeader + 3);\nendLabel:\n          *(ushort *)(pHeader + 3) = headerFlag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = ppMemory[2];\n        byteCount = byteCount + result;\n        headerFlagValue = headerFlagValue - result;\n        ppMemory[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_from_binary_00083f34",
                "param_1": "pBinaryData",
                "param_2": "pHeader",
                "param_3": "ppMemory",
                "iVar1": "result",
                "uVar2": "byteCount",
                "uVar3": "flag",
                "uVar4": "headerFlag",
                "uVar5": "headerFlagValue",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "counter",
                "uVar9": "variable1",
                "uVar10": "variable2",
                "uVar11": "variable3",
                "local_2c": "localVar",
                "check_and_update_relocation_00083808": "checkAndUpdateRelocation",
                "allocate_and_initialize_memory_00081e14": "allocateAndInitializeMemory",
                "copy_memory_0008234c": "copyMemory1",
                "copy_memory_00082438": "copyMemory2",
                "allocate_and_initialize_memory_000825b0": "allocateAndInitializeMemory2",
                "update_relocation_00083d9c": "updateRelocation",
                "process_data_00083adc": "processData",
                "find_first_match_00084384": "findFirstMatch",
                "LAB_00084030": "endLabel",
                "LAB_0008402e": "endLabel2"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_magic_number_00084290",
            "code": "\nundefined4 getMagicNumber_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_magic_number_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationArray[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_memory_000842a4",
            "code": "\nvoid initializeMemory_000842a4(int param,int *memory)\n\n{\n  ushort value;\n  int result;\n  int errorCode;\n  uint tempValue;\n  bool isInitialized;\n  undefined tempArray [4];\n  uint localValue;\n  \n  value = *(ushort *)(memory + 3);\n  tempValue = (uint)value;\n  if ((int)(tempValue << 0x1e) < 0) {\n    *memory = (int)memory + 0x43;\n    memory[4] = (int)memory + 0x43;\n    memory[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory + 0xe)) {\n    result = initialize_and_check_memory_000846b4(param,(int)*(short *)((int)memory + 0xe),tempArray);\n    if (-1 < result) {\n      isInitialized = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (memory[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(memory + 3) = *(ushort *)(memory + 3) | 0x400;\n        memory[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(memory + 3) = *(ushort *)(memory + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value = *(ushort *)(memory + 3);\n    tempValue = (uint)value;\n  }\n  *(ushort *)(memory + 3) = value | 0x800;\n  if ((tempValue & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isInitialized = false;\nLAB_00084300:\n  errorCode = allocate_and_initialize_memory_00081e14(param,result);\n  value = *(ushort *)(memory + 3);\n  if (errorCode == 0) {\n    if (-1 < (int)((uint)value << 0x16)) {\n      *(ushort *)(memory + 3) = value | 2;\n      *memory = (int)memory + 0x43;\n      memory[4] = (int)memory + 0x43;\n      memory[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(memory + 3) = value | 0x80;\n    *memory = errorCode;\n    memory[4] = errorCode;\n    memory[5] = result;\n    if ((isInitialized) && (result = initialize_and_check_program_000846dc(param,(int)*(short *)((int)memory + 0xe)), result != 0))\n    {\n      *(ushort *)(memory + 3) = *(ushort *)(memory + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_memory_000842a4",
                "param_1": "param",
                "param_2": "memory",
                "uVar1": "value",
                "iVar2": "result",
                "iVar3": "errorCode",
                "uVar4": "tempValue",
                "bVar5": "isInitialized",
                "auStack_54": "tempArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_match_00084384",
            "code": "\nuint * find_first_match_00084384(uint *data,char target,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *ptr;\n  bool is_last_byte;\n  \n  if (((uint)data & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = data;\n      do {\n        xor_result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        is_last_byte = index == length - 1;\n        index = index + 1;\n        if (is_last_byte) goto LAB_000843dc;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    ptr = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_match_00084384",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_byte"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "check_and_copy_data_00084464",
            "code": "\nvoid checkAndCopyData_00084464(int *outputArray,int dataStruct,undefined4 sourceAddress,undefined4 length)\n\n{\n  int copyResult;\n  ushort flags;\n  undefined4 unusedParam1;\n  undefined4 unusedParam2;\n  undefined4 unusedParam3;\n  undefined4 unusedParam4;\n  \n  flags = *(ushort *)(dataStruct + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    initialize_and_check_status_00084700(outputArray,(int)*(short *)(dataStruct + 0xe),0,2);\n    flags = *(ushort *)(dataStruct + 0xc);\n  }\n  *(ushort *)(dataStruct + 0xc) = flags & 0xefff;\n  DAT_200711bc = 0;\n  copyResult = copy_bytes_000811cc((int)*(short *)(dataStruct + 0xe),sourceAddress,length,length,unusedParam1,unusedParam2,\n                       unusedParam3,unusedParam4);\n  if ((copyResult == -1) && (DAT_200711bc != 0)) {\n    *outputArray = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "check_and_copy_data_00084464",
                "param_1": "outputArray",
                "param_2": "dataStruct",
                "param_3": "sourceAddress",
                "param_4": "length",
                "unaff_r4": "unusedParam1",
                "unaff_r5": "unusedParam2",
                "unaff_r6": "unusedParam3",
                "in_lr": "unusedParam4",
                "uVar2": "flags",
                "iVar1": "copyResult"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "initialize_status_0008449c",
            "code": "\nvoid initializeStatus_0008449c(undefined4 statusParameter,int binaryAddress)\n\n{\n  int result;\n  ushort modifiedValue;\n  \n  result = initialize_and_check_status_00084700(statusParameter,(int)*(short *)(binaryAddress + 0xe));\n  if (result == -1) {\n    modifiedValue = *(ushort *)(binaryAddress + 0xc) & 0xefff;\n  }\n  else {\n    modifiedValue = *(ushort *)(binaryAddress + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(binaryAddress + 0x50) = result;\n  }\n  *(ushort *)(binaryAddress + 0xc) = modifiedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "initialize_status_0008449c",
                "param_1": "statusParameter",
                "param_2": "binaryAddress",
                "iVar1": "result",
                "uVar2": "modifiedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_and_update_data_000844c4",
            "code": "\nuint process_and_update_data_000844c4(int input_ptr,uint input_value,undefined4 *buffer_ptr,undefined4 param_value)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *byte_ptr;\n  int index;\n  \n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x38) == 0)) {\n    initialize_buffers();\n  }\n  ushort_value = *(ushort *)(buffer_ptr + 3);\n  uint_value = (uint)ushort_value;\n  buffer_ptr[2] = buffer_ptr[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = buffer_ptr[4], index == 0)) {\n    index = check_and_update_relocation(input_ptr,buffer_ptr,ushort_value,uint_value,param_value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(buffer_ptr + 3);\n    index = buffer_ptr[4];\n    uint_value = (uint)ushort_value;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    byte_ptr = (undefined *)*buffer_ptr;\n    index = (int)byte_ptr - index;\n    if (index < (int)buffer_ptr[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer_ptr[0x19] = buffer_ptr[0x19] & 0xffffdfff;\n    byte_ptr = (undefined *)*buffer_ptr;\n    *(ushort *)(buffer_ptr + 3) = ushort_value | 0x2000;\n    index = (int)byte_ptr - index;\n    if (index < (int)buffer_ptr[5]) goto LAB_000844f6;\n  }\n  index = process_data(input_ptr,buffer_ptr);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  byte_ptr = (undefined *)*buffer_ptr;\n  index = 1;\nLAB_000844f8:\n  buffer_ptr[2] = buffer_ptr[2] + -1;\n  *buffer_ptr = byte_ptr + 1;\n  *byte_ptr = (char)input_value;\n  if (((buffer_ptr[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer_ptr + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (index = process_data(input_ptr,buffer_ptr), index != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_and_update_data_000844c4",
                "param_1": "input_ptr",
                "param_2": "input_value",
                "param_3": "buffer_ptr",
                "param_4": "param_value",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "byte_ptr",
                "iVar4": "index",
                "initialize_buffers_00083b14": "initialize_buffers",
                "check_and_update_relocation_00083808": "check_and_update_relocation",
                "process_data_00083adc": "process_data"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *output,int size,undefined4 input,undefined4 *status)\n\n{\n  code *functionPointer;\n  undefined4 magicNumber;\n  int result;\n  undefined buffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (size == 0) {\n    magicNumber = get_magic_number_00084290();\n    result = (*functionPointer)(output,buffer,0,magicNumber,status);\n  }\n  else {\n    magicNumber = get_magic_number_00084290();\n    result = (*functionPointer)(output,size,input,magicNumber,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "input",
                "param_4": "status",
                "pcVar1": "functionPointer",
                "uVar2": "magicNumber",
                "iVar3": "result",
                "auStack_24": "buffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_to_byte_000845bc",
            "code": "\nundefined4 convertToByte_000845bc(undefined4 *outputAddress,undefined *bytePointer,uint integerInput)\n\n{\n  if (bytePointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (integerInput < 0x100) {\n    *bytePointer = (char)integerInput;\n    return 1;\n  }\n  *outputAddress = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_to_byte_000845bc",
                "param_1": "outputAddress",
                "param_2": "bytePointer",
                "param_3": "integerInput"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_function_000846a4",
            "code": "\nundefined4 process_function_000846a4(int input_param)\n\n{\n  dword relocation_offset;\n  undefined4 result;\n  int execution_result;\n  \n  relocation_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_buffers_00083b14();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = process_data_00083adc(relocation_offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (execution_result = (**(code **)(input_param + 0x2c))(relocation_offset,*(undefined4 *)(input_param + 0x1c)), execution_result < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        update_relocation_00083d9c(relocation_offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          update_relocation_00083d9c(relocation_offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        update_relocation_00083d9c(relocation_offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_function_000846a4",
                "param_1": "input_param",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "iVar3": "execution_result"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_and_check_memory_000846b4",
            "code": "\nvoid initializeAndCheckMemory_000846b4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int status;\n  \n  DAT_200711bc = 0;\n  status = initialize_memory_000811b4(arg1,arg2,arg2,0,arg3);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_and_check_memory_000846b4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "status"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "initialize_and_check_program_000846dc",
            "code": "\nvoid initialize_and_check_program_000846dc(int *result,undefined4 input)\n\n{\n  int init_result;\n  \n  DAT_200711bc = 0;\n  init_result = initialize_program_000811be(input);\n  if ((init_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "initialize_and_check_program_000846dc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "initialize_and_check_status_00084700",
            "code": "\nvoid initializeAndCheckStatus_00084700(int *outputParam,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int status;\n  \n  DAT_200711bc = 0;\n  status = initialize_000811c2(arg2,arg3,arg4);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *outputParam = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "initialize_and_check_status_00084700",
                "param_1": "outputParam",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "status"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "clear_data_and_check_00084728",
            "code": "\nvoid clearDataAndCheck_00084728(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int errorCode;\n  \n  DAT_200711bc = 0;\n  errorCode = clear_data_000811c6(input1,input2,input3);\n  if ((errorCode == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "clear_data_and_check_00084728",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "errorCode"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_difference_00084750",
            "code": "\nint calculate_difference_00084750(int input_param_1,int input_param_2,int input_param_3,int input_param_4)\n\n{\n  int difference;\n  \n  if ((input_param_4 == 0) && (input_param_3 == 0)) {\n    if (input_param_2 != 0 || input_param_1 != 0) {\n      input_param_1 = -1;\n    }\n    return input_param_1;\n  }\n  difference = calculate_difference_00084750_000847ac();\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_difference_00084750",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "difference"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_adjust_values_0008477c",
            "code": "\nvoid subtract_and_adjust_values_0008477c(uint input_value,int offset_value,undefined4 lower_32_bits,undefined4 upper_32_bits,int *result_array)\n\n{\n  uint multiplied_result;\n  longlong divided_result;\n  \n  divided_result = divide_with_remainder_000847e0();\n  divided_result = divided_result * CONCAT44(upper_32_bits,lower_32_bits);\n  multiplied_result = (uint)divided_result;\n  *result_array = input_value - multiplied_result;\n  result_array[1] = (offset_value - (int)((ulonglong)divided_result >> 0x20)) - (uint)(input_value < multiplied_result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_adjust_values_0008477c",
                "param_1": "input_value",
                "param_2": "offset_value",
                "param_3": "lower_32_bits",
                "param_4": "upper_32_bits",
                "param_5": "result_array",
                "uVar1": "multiplied_result",
                "lVar2": "divided_result"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculate_difference_000847ac(uint base_value,int subtract_value,undefined4 lower_bits,undefined4 higher_bits,int *result_array)\n\n{\n  uint lower_bits_result;\n  longlong product;\n  \n  product = dividing_algorithm_00084a80();\n  product = product * CONCAT44(higher_bits,lower_bits);\n  lower_bits_result = (uint)product;\n  *result_array = base_value - lower_bits_result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(base_value < lower_bits_result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "base_value",
                "param_2": "subtract_value",
                "param_3": "lower_bits",
                "param_4": "higher_bits",
                "param_5": "result_array",
                "uVar1": "lower_bits_result",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_with_remainder_000847e0",
            "code": "\nundefined8 divideWithRemainder_000847e0(uint dividend,uint dividendUpper,uint divisor,uint divisorUpper)\n\n{\n  longlong tempLong;\n  uint quotientLower;\n  uint quotientUpper;\n  uint tempDivisor;\n  uint tempProduct;\n  int shiftCount;\n  uint remainderLower;\n  uint remainderUpper;\n  uint isNegativeDividend;\n  uint quotientLowerStep;\n  uint tempProductStep;\n  uint divisorUpperExt;\n  bool isNegativeDivisor;\n  \n  if ((int)dividendUpper < 0) {\n    isNegativeDivisor = dividend != 0;\n    dividend = -dividend;\n    dividendUpper = -dividendUpper - (uint)isNegativeDivisor;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorUpper < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    isNegativeDivisor = divisor != 0;\n    divisor = -divisor;\n    divisorUpper = -divisorUpper - (uint)isNegativeDivisor;\n  }\n  if (divisorUpper == 0) {\n    if (dividendUpper < divisor) {\n      shiftCount = LZCOUNT(divisor);\n      if (shiftCount != 0) {\n        quotientUpper = dividend >> (0x20U - shiftCount & 0xff);\n        divisor = divisor << shiftCount;\n        dividend = dividend << shiftCount;\n        dividendUpper = dividendUpper << shiftCount | quotientUpper;\n      }\n      quotientLower = divisor >> 0x10;\n      tempDivisor = dividendUpper / quotientLower;\n      remainderLower = (divisor & 0xffff) * tempDivisor;\n      quotientLowerStep = dividend >> 0x10 | (dividendUpper - quotientLower * tempDivisor) * 0x10000;\n      quotientUpper = tempDivisor;\n      if (quotientLowerStep <= remainderLower && remainderLower - quotientLowerStep != 0) {\n        isNegativeDivisor = CARRY4(quotientLowerStep,divisor);\n        quotientLowerStep = quotientLowerStep + divisor;\n        quotientUpper = tempDivisor - 1;\n        if ((isNegativeDivisor == false) && (quotientLowerStep <= remainderLower && remainderLower - quotientLowerStep != 0)) {\n          quotientUpper = tempDivisor - 2;\n          quotientLowerStep = quotientLowerStep + divisor;\n        }\n      }\n      remainderUpper = (quotientLowerStep - remainderLower) / quotientLower;\n      tempDivisor = (divisor & 0xffff) * remainderUpper;\n      remainderLower = dividend & 0xffff | ((quotientLowerStep - remainderLower) - quotientLower * remainderUpper) * 0x10000;\n      quotientLower = remainderUpper;\n      if (remainderLower <= tempDivisor && tempDivisor - remainderLower != 0) {\n        quotientLower = remainderUpper - 1;\n        if ((CARRY4(remainderLower,divisor) == false) &&\n           (remainderLower + divisor <= tempDivisor && tempDivisor - (remainderLower + divisor) != 0)) {\n          quotientLower = remainderUpper - 2;\n        }\n      }\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      quotientUpper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftCount = LZCOUNT(divisor);\n      if (shiftCount == 0) {\n        dividendUpper = dividendUpper - divisor;\n        tempDivisor = divisor >> 0x10;\n        divisorUpperExt = divisor & 0xffff;\n        quotientUpper = 1;\n      }\n      else {\n        divisor = divisor << shiftCount;\n        quotientUpper = dividendUpper >> (0x20U - shiftCount & 0xff);\n        tempDivisor = divisor >> 0x10;\n        quotientLowerStep = quotientUpper / tempDivisor;\n        divisorUpperExt = divisor & 0xffff;\n        remainderLower = divisorUpperExt * quotientLowerStep;\n        remainderUpper = dividend >> (0x20U - shiftCount & 0xff) | dividendUpper << shiftCount;\n        quotientUpper = remainderUpper >> 0x10 | (quotientUpper - tempDivisor * quotientLowerStep) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotientLower = quotientLowerStep;\n        if (quotientUpper <= remainderLower && remainderLower - quotientUpper != 0) {\n          isNegativeDivisor = CARRY4(quotientUpper,divisor);\n          quotientUpper = quotientUpper + divisor;\n          quotientLower = quotientLowerStep - 1;\n          if ((isNegativeDivisor == false) && (quotientUpper <= remainderLower && remainderLower - quotientUpper != 0)) {\n            quotientLower = quotientLowerStep - 2;\n            quotientUpper = quotientUpper + divisor;\n          }\n        }\n        tempProduct = (quotientUpper - remainderLower) / tempDivisor;\n        quotientLowerStep = divisorUpperExt * tempProduct;\n        dividendUpper = remainderUpper & 0xffff | ((quotientUpper - remainderLower) - tempDivisor * tempProduct) * 0x10000;\n        quotientUpper = tempProduct;\n        if (dividendUpper <= quotientLowerStep && quotientLowerStep - dividendUpper != 0) {\n          isNegativeDivisor = CARRY4(dividendUpper,divisor);\n          dividendUpper = dividendUpper + divisor;\n          quotientUpper = tempProduct - 1;\n          if ((isNegativeDivisor == false) && (dividendUpper <= quotientLowerStep && quotientLowerStep - dividendUpper != 0)) {\n            quotientUpper = tempProduct - 2;\n            dividendUpper = dividendUpper + divisor;\n          }\n        }\n        dividendUpper = dividendUpper - quotientLowerStep;\n        quotientUpper = quotientUpper | quotientLower << 0x10;\n      }\n      quotientLower = dividendUpper / tempDivisor;\n      quotientLowerStep = divisorUpperExt * quotientLower;\n      remainderUpper = dividend >> 0x10 | (dividendUpper - tempDivisor * quotientLower) * 0x10000;\n      remainderLower = quotientLower;\n      if (remainderUpper <= quotientLowerStep && quotientLowerStep - remainderUpper != 0) {\n        isNegativeDivisor = CARRY4(remainderUpper,divisor);\n        remainderUpper = remainderUpper + divisor;\n        remainderLower = quotientLower - 1;\n        if ((isNegativeDivisor == false) && (remainderUpper <= quotientLowerStep && quotientLowerStep - remainderUpper != 0)) {\n          remainderLower = quotientLower - 2;\n          remainderUpper = remainderUpper + divisor;\n        }\n      }\n      tempProduct = (remainderUpper - quotientLowerStep) / tempDivisor;\n      divisorUpperExt = divisorUpperExt * tempProduct;\n      tempDivisor = dividend & 0xffff | ((remainderUpper - quotientLowerStep) - tempDivisor * tempProduct) * 0x10000;\n      quotientLower = tempProduct;\n      if (tempDivisor <= divisorUpperExt && divisorUpperExt - tempDivisor != 0) {\n        quotientLower = tempProduct - 1;\n        if ((CARRY4(tempDivisor,divisor) == false) &&\n           (tempDivisor + divisor <= divisorUpperExt && divisorUpperExt - (tempDivisor + divisor) != 0)) {\n          quotientLower = tempProduct - 2;\n        }\n      }\n      quotientLower = quotientLower | remainderLower << 0x10;\n    }\n  }\n  else if (dividendUpper < divisorUpper) {\n    quotientUpper = 0;\n    quotientLower = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(divisorUpper);\n    if (shiftCount == 0) {\n      if ((divisorUpper < dividendUpper) || (divisor <= dividend)) {\n        quotientUpper = 0;\n        quotientLower = 1;\n      }\n      else {\n        quotientLower = 0;\n        quotientUpper = 0;\n      }\n    }\n    else {\n      quotientUpper = 0x20 - shiftCount;\n      tempDivisor = dividendUpper >> (quotientUpper & 0xff);\n      divisorUpperExt = divisor >> (quotientUpper & 0xff) | divisorUpper << shiftCount;\n      quotientLowerStep = divisorUpperExt >> 0x10;\n      quotientLower = tempDivisor / quotientLowerStep;\n      remainderUpper = (divisorUpperExt & 0xffff) * quotientLower;\n      remainderLower = dividendUpper << shiftCount | dividend >> (quotientUpper & 0xff);\n      tempDivisor = remainderLower >> 0x10 | (tempDivisor - quotientLowerStep * quotientLower) * 0x10000;\n      quotientUpper = quotientLower;\n      if (tempDivisor <= remainderUpper && remainderUpper - tempDivisor != 0) {\n        isNegativeDivisor = CARRY4(tempDivisor,divisorUpperExt);\n        tempDivisor = tempDivisor + divisorUpperExt;\n        quotientUpper = quotientLower - 1;\n        if ((isNegativeDivisor == false) && (tempDivisor <= remainderUpper && remainderUpper - tempDivisor != 0)) {\n          quotientUpper = quotientLower - 2;\n          tempDivisor = tempDivisor + divisorUpperExt;\n        }\n      }\n      tempProduct = (tempDivisor - remainderUpper) / quotientLowerStep;\n      tempProductStep = (divisorUpperExt & 0xffff) * tempProduct;\n      tempDivisor = remainderLower & 0xffff | ((tempDivisor - remainderUpper) - quotientLowerStep * tempProduct) * 0x10000;\n      quotientLower = tempProduct;\n      if (tempDivisor <= tempProductStep && tempProductStep - tempDivisor != 0) {\n        isNegativeDivisor = CARRY4(tempDivisor,divisorUpperExt);\n        tempDivisor = tempDivisor + divisorUpperExt;\n        quotientLower = tempProduct - 1;\n        if ((isNegativeDivisor == false) && (tempDivisor <= tempProductStep && tempProductStep - tempDivisor != 0)) {\n          quotientLower = tempProduct - 2;\n          tempDivisor = tempDivisor + divisorUpperExt;\n        }\n      }\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      tempLong = (ulonglong)quotientLower * (ulonglong)(divisor << shiftCount);\n      remainderLower = (uint)((ulonglong)tempLong >> 0x20);\n      quotientUpper = 0;\n      if ((tempDivisor - tempProductStep < remainderLower) ||\n         ((tempDivisor - tempProductStep == remainderLower && (dividend << shiftCount < (uint)tempLong)))) {\n        quotientLower = quotientLower - 1;\n        quotientUpper = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    isNegativeDivisor = quotientLower != 0;\n    quotientLower = -quotientLower;\n    quotientUpper = -quotientUpper - (uint)isNegativeDivisor;\n  }\n  return CONCAT44(quotientUpper,quotientLower);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividendUpper",
                "param_3": "divisor",
                "param_4": "divisorUpper",
                "lVar1": "tempLong",
                "uVar2": "quotientLower",
                "uVar3": "quotientUpper",
                "uVar4": "tempDivisor",
                "uVar5": "tempProduct",
                "iVar6": "shiftCount",
                "uVar7": "remainderLower",
                "uVar8": "remainderUpper",
                "uVar9": "isNegativeDividend",
                "uVar10": "quotientLowerStep",
                "uVar11": "tempProductStep",
                "uVar12": "divisorUpperExt",
                "bVar13": "isNegativeDivisor"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "dividing_algorithm_00084a80",
            "code": "\nulonglong dividingAlgorithm_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint bitShift;\n  uint quotient1;\n  uint remainder1;\n  uint quotient2;\n  uint remainder2;\n  uint quotient3;\n  uint remainder3;\n  uint quotient4;\n  int numBits;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      numBits = leadingZeros(quotient);\n      if (numBits == 0) {\n        divisor = divisor - quotient;\n        quotient1 = quotient >> 0x10;\n        quotient2 = quotient & 0xffff;\n        bitShift = 1;\n      }\n      else {\n        quotient = quotient << numBits;\n        remainder3 = divisor >> (0x20U - numBits & 0xff);\n        quotient1 = quotient >> 0x10;\n        quotient4 = remainder3 / quotient1;\n        quotient2 = quotient & 0xffff;\n        bitShift = quotient2 * quotient4;\n        remainder2 = dividend >> (0x20U - numBits & 0xff) | divisor << numBits;\n        remainder1 = remainder2 >> 0x10 | (remainder3 - quotient1 * quotient4) * 0x10000;\n        dividend = dividend << numBits;\n        remainder3 = quotient4;\n        if (remainder1 <= bitShift && bitShift - remainder1 != 0) {\n          carry = carry4(remainder1,quotient);\n          remainder1 = remainder1 + quotient;\n          remainder3 = quotient4 - 1;\n          if ((carry == false) && (remainder1 <= bitShift && bitShift - remainder1 != 0)) {\n            remainder3 = quotient4 - 2;\n            remainder1 = remainder1 + quotient;\n          }\n        }\n        quotient3 = (remainder1 - bitShift) / quotient1;\n        quotient4 = quotient2 * quotient3;\n        divisor = remainder2 & 0xffff | ((remainder1 - bitShift) - quotient1 * quotient3) * 0x10000;\n        bitShift = quotient3;\n        if (divisor <= quotient4 && quotient4 - divisor != 0) {\n          carry = carry4(divisor,quotient);\n          divisor = divisor + quotient;\n          bitShift = quotient3 - 1;\n          if ((carry == false) && (divisor <= quotient4 && quotient4 - divisor != 0)) {\n            bitShift = quotient3 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - quotient4;\n        bitShift = bitShift | remainder3 << 0x10;\n      }\n      quotient4 = divisor / quotient1;\n      remainder1 = quotient2 * quotient4;\n      remainder2 = dividend >> 0x10 | (divisor - quotient1 * quotient4) * 0x10000;\n      remainder3 = quotient4;\n      if (remainder2 <= remainder1 && remainder1 - remainder2 != 0) {\n        carry = carry4(remainder2,quotient);\n        remainder2 = remainder2 + quotient;\n        remainder3 = quotient4 - 1;\n        if ((carry == false) && (remainder2 <= remainder1 && remainder1 - remainder2 != 0)) {\n          remainder3 = quotient4 - 2;\n          remainder2 = remainder2 + quotient;\n        }\n      }\n      quotient4 = (remainder2 - remainder1) / quotient1;\n      quotient2 = quotient2 * quotient4;\n      remainder2 = dividend & 0xffff | ((remainder2 - remainder1) - quotient1 * quotient4) * 0x10000;\n      quotient1 = quotient4;\n      if (remainder2 <= quotient2 && quotient2 - remainder2 != 0) {\n        quotient1 = quotient4 - 1;\n        if ((carry4(remainder2,quotient) == false) &&\n           (remainder2 + quotient <= quotient2 && quotient2 - (remainder2 + quotient) != 0)) {\n          quotient1 = quotient4 - 2;\n        }\n      }\n      return CONCAT44(bitShift,quotient1 | remainder3 << 0x10);\n    }\n    numBits = leadingZeros(quotient);\n    if (numBits != 0) {\n      remainder3 = dividend >> (0x20U - numBits & 0xff);\n      quotient = quotient << numBits;\n      dividend = dividend << numBits;\n      divisor = remainder3 | divisor << numBits;\n    }\n    bitShift = quotient >> 0x10;\n    quotient1 = divisor / bitShift;\n    quotient2 = (quotient & 0xffff) * quotient1;\n    quotient4 = dividend >> 0x10 | (divisor - bitShift * quotient1) * 0x10000;\n    remainder3 = quotient1;\n    if (quotient4 <= quotient2 && quotient2 - quotient4 != 0) {\n      carry = carry4(quotient4,quotient);\n      quotient4 = quotient4 + quotient;\n      remainder3 = quotient1 - 1;\n      if ((carry == false) && (quotient4 <= quotient2 && quotient2 - quotient4 != 0)) {\n        remainder3 = quotient1 - 2;\n        quotient4 = quotient4 + quotient;\n      }\n    }\n    remainder2 = (quotient4 - quotient2) / bitShift;\n    quotient1 = (quotient & 0xffff) * remainder2;\n    quotient2 = dividend & 0xffff | ((quotient4 - quotient2) - bitShift * remainder2) * 0x10000;\n    bitShift = remainder2;\n    if (quotient2 <= quotient1 && quotient1 - quotient2 != 0) {\n      bitShift = remainder2 - 1;\n      if ((carry4(quotient2,quotient) == false) &&\n         (quotient2 + quotient <= quotient1 && quotient1 - (quotient2 + quotient) != 0)) {\n        bitShift = remainder2 - 2;\n      }\n    }\n    bitShift = bitShift | remainder3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    numBits = leadingZeros(remainder);\n    if (numBits == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      bitShift = 0;\n    }\n    else {\n      bitShift = 0x20 - numBits;\n      remainder3 = divisor >> (bitShift & 0xff);\n      quotient1 = remainder << numBits | quotient >> (bitShift & 0xff);\n      quotient2 = quotient1 >> 0x10;\n      remainder1 = remainder3 / quotient2;\n      quotient4 = (quotient1 & 0xffff) * remainder1;\n      remainder2 = dividend >> (bitShift & 0xff) | divisor << numBits;\n      bitShift = remainder2 >> 0x10 | (remainder3 - quotient2 * remainder1) * 0x10000;\n      remainder3 = remainder1;\n      if (bitShift <= quotient4 && quotient4 - bitShift != 0) {\n        carry = carry4(bitShift,quotient1);\n        bitShift = bitShift + quotient1;\n        remainder3 = remainder1 - 1;\n        if ((carry == false) && (bitShift <= quotient4 && quotient4 - bitShift != 0)) {\n          remainder3 = remainder1 - 2;\n          bitShift = bitShift + quotient1;\n        }\n      }\n      remainder1 = (bitShift - quotient4) / quotient2;\n      quotient3 = (quotient1 & 0xffff) * remainder1;\n      quotient2 = remainder2 & 0xffff | ((bitShift - quotient4) - quotient2 * remainder1) * 0x10000;\n      bitShift = remainder1;\n      if (quotient2 <= quotient3 && quotient3 - quotient2 != 0) {\n        carry = carry4(quotient2,quotient1);\n        quotient2 = quotient2 + quotient1;\n        bitShift = remainder1 - 1;\n        if ((carry == false) && (quotient2 <= quotient3 && quotient3 - quotient2 != 0)) {\n          bitShift = remainder1 - 2;\n          quotient2 = quotient2 + quotient1;\n        }\n      }\n      bitShift = bitShift | remainder3 << 0x10;\n      temp = (ulonglong)bitShift * (ulonglong)(quotient << numBits);\n      remainder3 = (uint)((ulonglong)temp >> 0x20);\n      if ((quotient2 - quotient3 < remainder3) || ((quotient2 - quotient3 == remainder3 && (dividend << numBits < (uint)temp)))\n         ) {\n        bitShift = bitShift - 1;\n      }\n    }\n  }\n  return (ulonglong)bitShift;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "dividing_algorithm_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "bitShift",
                "uVar3": "quotient1",
                "uVar4": "remainder1",
                "uVar5": "quotient2",
                "uVar6": "remainder2",
                "uVar7": "quotient3",
                "uVar8": "remainder3",
                "uVar9": "quotient4",
                "iVar10": "numBits",
                "bVar11": "carry",
                "CARRY4": "carry4",
                "LZCOUNT": "leadingZeros"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 87070,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}