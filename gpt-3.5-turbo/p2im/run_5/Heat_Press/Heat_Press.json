{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "execute_program_000816a8",
                "do_nothing_000816a6": "do_nothing",
                "process_and_initialize_000804a8": "process_and_initialize_data",
                "FUNC_000805d0": "execute_function",
                "do_nothing_0008120c": "set_flag",
                "check_differences_00080ce0": "check_for_differences",
                "DAT_000816d0": "data_flag",
                "set_default_value_of_pointer_000816d4": "set_default_pointer_value",
                "initialize_and_execute_00080ae4": "initialize_and_execute"
            },
            "code": "void execute_program_000816a8(void)\n{\n  set_default_value_of_pointer_000816d4();\n  initialize_and_execute();\n  do_nothing_000816a6();\n  do_nothing_0008120c(1);\n  process_and_initialize_data();\n  do {\n    do {\n      FUNC_000805d0();\n    } while (DAT_000816d0 == 0);\n    check_for_differences();\n  } while( true );\n}",
            "called": [
                "FUN_000816a6",
                "FUN_000816d4",
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000805d0",
                "FUN_00080ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": true,
            "current_name": "execute_program_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_data_00081042",
                "param_1": "data",
                "param_2": "value1",
                "PTR_": "ptr",
                "param_3": "value2",
                "param_4": "value3",
                "DAT_": "mask"
            },
            "code": "void update_data_00081042(uint32_t* data, uint32_t value1, uint32_t value2, uint32_t value3)\n{\n  uint32_t* PTR_ = data + 1;\n  uint32_t DAT_1 = 0xF000000u;\n  uint32_t DAT_2 = 0x30000000u;\n  *PTR_ = (*PTR_ | value1) | ((value2 & DAT_1) << 0x18) | ((value3 & DAT_2) << 0x1C);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_data_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "iVar2": "result",
                "FUN_00082ac0": "process_data_and_return_result_00082ac0",
                "param_1": "data",
                "piVar3": "end_ptr",
                "puVar5": "element_data",
                "piVar1": "current_ptr",
                "param_2": "size",
                "param_3": "ptrs_array",
                "uVar4": "total_size",
                "uVar7": "i",
                "uVar6": "element_size"
            },
            "code": "int process_data_and_return_result_00082ac0(void* data, int size, int **ptrs_array) {\n  int *current_ptr = *ptrs_array;\n  int *end_ptr = ptrs_array[2];\n  uint total_size = 0;\n  while (current_ptr != NULL) {\n    uint element_size = current_ptr[1] >> 2;\n    if (element_size != 0) {\n      int *element_data = (int *)(*current_ptr + -4);\n      for (uint i = 0; i < element_size; i++) {\n        int result = process_data(data, *element_data, size);\n        total_size++;\n        if (result == -1) {\n          ptrs_array[2] = NULL;\n          ptrs_array[1] = NULL;\n          return -1;\n        }\n        element_data++;\n      }\n    }\n    end_ptr = (int *)((int)end_ptr - (current_ptr[1] & 0xfffffffc));\n    ptrs_array[2] = end_ptr;\n    current_ptr += 2;\n  }\n  ptrs_array[2] = NULL;\n  ptrs_array[1] = NULL;\n  return total_size;\n}",
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_data_and_return_result_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "PTR_DAT_00080d20": "PTR_DAT_00080d20",
                "FUN_00080ce0": "check_differences_00080ce0",
                "PTR_DAT_00080d18": "PTR_DAT_00080d18",
                "PTR_DAT_00080d14": "PTR_DAT_00080d14",
                "do_nothing_00080abc": "do_nothing_4",
                "calculate_difference_000813e4": "calculate_difference",
                "do_nothing_00080aba": "do_nothing_3",
                "PTR_DAT_00080d1c": "PTR_DAT_00080d1c",
                "do_nothing_00080aa8": "do_nothing_1",
                "do_nothing_00080ab8": "do_nothing_2"
            },
            "code": "void check_differences_00080ce0(void)\n{\n  int difference;\n  difference = calculate_difference_000813e4(PTR_DAT_00080d14);\n  if (difference != 0) {\n    do_nothing_00080aa8();\n  }\n  difference = calculate_difference_000813e4(PTR_DAT_00080d18);\n  if (difference != 0) {\n    do_nothing_00080ab8();\n  }\n  difference = calculate_difference_000813e4(PTR_DAT_00080d1c);\n  if (difference != 0) {\n    do_nothing_00080aba();\n  }\n  difference = calculate_difference_000813e4(PTR_DAT_00080d20);\n  if (difference != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}",
            "called": [
                "FUN_00080ab8",
                "FUN_000813e4",
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "check_differences_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "uVar1": "bytes_until_null",
                "FUN_00081682": "initialize_command_status_00081682",
                "param_1": "command_status",
                "param_2": "command_length"
            },
            "code": "undefined4* initialize_command_status_00081682(undefined4* command_status, int command_length)\n{\n  command_status[0] = 0;\n  command_status[1] = 0;\n  command_status[2] = 0;\n  if (command_length != 0) {\n    int bytes_until_null = count_bytes_until_null(command_length);\n    execute_command_and_update_status(command_status, command_length, bytes_until_null);\n  }\n  return command_status;\n}",
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": true,
            "current_name": "initialize_command_status_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "allocateMemoryForData_00081e04": "allocate_memory_for_data",
                "FUN_000815fe": "allocate_and_return_data_pointer_000815fe",
                "param_1": "data_pointer"
            },
            "code": "undefined4 * allocate_and_return_data_pointer_000815fe(undefined4 *data_pointer)\n{\n  allocate_memory_for_data(*data_pointer);\n  return data_pointer;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": true,
            "current_name": "allocate_and_return_data_pointer_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "uVar1": "shift_amount",
                "param_1": "value",
                "FUN_00081d1c": "calculate_shifted_value_00081d1c"
            },
            "code": "uint calculate_shifted_value_00081d1c(uint value)\n{\n  uint shifted_value = value << 1;\n  if ((value & 0x80000000) || (shifted_value < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x9e - (shifted_value >> 0x18);\n  if (shift_amount >= 0) {\n    return (shifted_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "param_5[1]": "output[1]",
                "uVar1": "product",
                "param_1": "input1",
                "lVar2": "product_64bit",
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_2": "input2",
                "param_3": "factor1",
                "param_4": "factor2",
                "param_5": "output",
                "*param_5": "output[0]"
            },
            "code": "void calculate_difference_000847ac(uint input1, int input2, uint32_t factor1, uint32_t factor2, int *output) {\n  uint32_t product = FUNC_00084a80() * (uint64_t)factor1 * (uint64_t)factor2;\n  uint32_t difference1 = input1 - product;\n  uint32_t difference2 = input2 - ((int64_t)product >> 32) - (input1 < product);\n  output[0] = difference1;\n  output[1] = difference2;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": true,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "DAT_00080134": "function_pointer_exists",
                "PTR_DAT_0008013c": "function_pointer",
                "param_1": "function_exists",
                "FUN_00080118": "execute_function_if_exists_00080118",
                "param_2": "function_argument",
                "param_3": "arg1",
                "param_4": "arg2",
                "DAT_00080140": "function_pointer_address"
            },
            "code": "void execute_function_if_exists_00080118(bool function_exists, char* function_argument, int arg1, int arg2)\n{\n  if (function_exists) {\n    function_argument = PTR_DAT_0008013c;\n  }\n  if ((PTR_DAT_0008013c != NULL) && (DAT_00080140 != (code*)0x0)) {\n    (*DAT_00080140)(PTR_DAT_0008013c, function_argument, arg1, DAT_00080140, arg2);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "execute_function_if_exists_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag",
                "concatenate_32_and_64_bit_values_00081c5c": "concatenate32And64BitValues",
                "FUN_00081c94": "checkIfZeroOrCarryFlagSet_00081c94"
            },
            "code": "bool checkIfZeroOrCarryFlagSet_00081c94(void)\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  concatenate32And64BitValues();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "checkIfZeroOrCarryFlagSet_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "puVar3": "pointer2",
                "puVar4": "pointer3",
                "param_1": "data_structure_pointer",
                "puVar5": "first_array",
                "puVar6": "second_array",
                "puVar1": "pointer1",
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "uVar2": "variable"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *first_array = *(undefined4 **)(param_1 + 4);\n    undefined4 *second_array = *(undefined4 **)(param_1 + 8);\n    undefined4 *third_array = *(undefined4 **)(param_1 + 0xc);\n    *(undefined **)(param_1 + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(first_array + 3) = 4;\n    *first_array = 0;\n    first_array[1] = 0;\n    first_array[2] = 0;\n    first_array[0x19] = 0;\n    *(undefined2 *)((int)first_array + 0xe) = 0;\n    first_array[4] = 0;\n    first_array[5] = 0;\n    first_array[6] = 0;\n    fill_memory_with_byte_00082504(first_array + 0x17,0,8);\n    undefined *pointer1 = PTR_LAB_00084440_1_00083bf8;\n    undefined *pointer2 = PTR_find_first_non_zero_and_update_index_0008449c_1_00083c00;\n    undefined4 variable = DAT_00083bfc;\n    undefined *pointer3 = PTR_LAB_000844bc_1_00083c04;\n    second_array[7] = second_array;\n    second_array[8] = pointer1;\n    second_array[9] = variable;\n    second_array[10] = pointer2;\n    second_array[0xb] = pointer3;\n    *(undefined2 *)((int)second_array + 0xe) = 1;\n    *(undefined2 *)(second_array + 3) = 9;\n    *second_array = 0;\n    second_array[1] = 0;\n    second_array[2] = 0;\n    second_array[0x19] = 0;\n    second_array[4] = 0;\n    second_array[5] = 0;\n    second_array[6] = 0;\n    fill_memory_with_byte_00082504(second_array + 0x17,0,8);\n    third_array[7] = third_array;\n    third_array[8] = pointer1;\n    third_array[9] = variable;\n    third_array[10] = pointer2;\n    third_array[0xb] = pointer3;\n    *(undefined2 *)(third_array + 3) = 0x12;\n    *(undefined2 *)((int)third_array + 0xe) = 2;\n    *third_array = 0;\n    third_array[1] = 0;\n    third_array[2] = 0;\n    third_array[0x19] = 0;\n    third_array[4] = 0;\n    third_array[5] = 0;\n    third_array[6] = 0;\n    fill_memory_with_byte_00082504(third_array + 0x17,0,8);\n    first_array[7] = first_array;\n    first_array[8] = pointer1;\n    first_array[9] = variable;\n    first_array[10] = pointer2;\n    first_array[0xb] = pointer3;\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "iVar2": "set_permissions_res",
                "local_50": "permissions",
                "iVar3": "result",
                "uVar1": "file_mode",
                "param_1": "fd",
                "auStack_54": "stack_var",
                "param_2": "file_info",
                "FUN_000842a4": "set_permissions_and_check_for_default_000842a4",
                "uVar4": "mode_bits",
                "bVar5": "is_symlink"
            },
            "code": "void set_permissions_and_check_for_default_000842a4(int fd, int *file_info) {\n  ushort file_mode = *(ushort *)(file_info + 3);\n  uint mode_bits = (uint)file_mode;\n  bool is_symlink = false;\n  undefined stack_var[4];\n  uint permissions = 0x400;\n  if ((int)(mode_bits << 0x1e) < 0) {\n    *file_info = (int)file_info + 0x43;\n    file_info[4] = (int)file_info + 0x43;\n    file_info[5] = 1;\n    return;\n  }\n  if (*(short *)((int)file_info + 0xe) >= -1) {\n    int set_permissions_res = set_permissions(fd, (int)*(short *)((int)file_info + 0xe), stack_var);\n    if (set_permissions_res >= -1) {\n      is_symlink = (permissions & 0xf000) == 0x2000;\n      if (((permissions & 0xf000) == 0x8000) &&\n         ((undefined *)file_info[10] == PTR_find_first_non_zero_and_update_index_0008449c_1_00084380)) {\n        permissions |= 0x400;\n        *(ushort *)(file_info + 3) |= 0x400;\n        file_info[0x13] = 0x400;\n      }\n      else {\n        permissions |= 0x400;\n        *(ushort *)(file_info + 3) |= 0x800;\n      }\n    }\n    else {\n      mode_bits = (uint)file_mode;\n    }\n  }\n  *(ushort *)(file_info + 3) |= 0x800;\n  if ((mode_bits & 0x80) != 0) {\n    permissions = 0x40;\n  }\n  file_info[5] = permissions;\n  int result = check_permission(fd, permissions);\n  if (result != 0) {\n    *(undefined **)(fd + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(file_info + 3) |= 0x80;\n    *file_info = result;\n    file_info[4] = result;\n    file_info[5] = permissions;\n    if ((is_symlink) && (check_for_default(fd, (int)*(short *)((int)file_info + 0xe)) != 0))\n    {\n      *(ushort *)(file_info + 3) |= 1;\n    }\n  }\n  else if ((int)(mode_bits << 0x16) >= 0) {\n    *(ushort *)(file_info + 3) |= 2;\n    *file_info = (int)file_info + 0x43;\n    file_info[4] = (int)file_info + 0x43;\n    file_info[5] = 1;\n  }\n}\n",
            "called": [
                "FUN_000846b4",
                "FUN_000846dc",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": true,
            "current_name": "set_permissions_and_check_for_default_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "do_nothing_00083c0c": "do_nothing_2",
                "iVar2": "decode_result",
                "iVar3": "data_structure_ptr",
                "param_1": "input_param",
                "allocate_memory_00083d9c": "allocate_memory",
                "decode_data_00083adc": "decode_data",
                "do_nothing_00083c08": "do_nothing_1",
                "FUN_000846a4": "decode_and_execute_000846a4",
                "initialize_data_structures_00083b14": "initialize_data_structures"
            },
            "code": "int decode_and_execute_000846a4(int input_param)\n{\n  int data_structure_ptr = *DATA_STRUCTURE_PTR;\n  if (input_param != 0) {\n    if ((data_structure_ptr != 0) && (*(int *)(data_structure_ptr + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      int decode_result = decode_data(data_structure_ptr, input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) && (decode_result = (**(code **)(input_param + 0x2c))(data_structure_ptr,*(undefined4 *)(input_param + 0x1c))) < 0) {\n        decode_result = -1;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        allocate_memory(data_structure_ptr,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          allocate_memory(data_structure_ptr);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        allocate_memory(data_structure_ptr);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      do_nothing_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      do_nothing_00083c0c();\n      return decode_result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": true,
            "current_name": "decode_and_execute_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_00080f24",
                "PTR_DAT_00080f88": "end_dat_ptr",
                "iVar3": "i",
                "PTR_DAT_00080f84": "dat_ptr",
                "puVar2": "data",
                "puVar4": "dat_ptr",
                "DAT_00080f7c": "data",
                "uint": "unsigned int",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_array",
                "puVar1": "rel_array",
                "PTR_DAT_00080f90": "ptr",
                "DAT_00080f94": "end_dat_ptr",
                "DAT_00080f98": "function_pointer"
            },
            "code": "void initialize_memory_00080f24(void)\n{\n  undefined *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n  undefined *DAT_00080f7c = DAT_00080f7c;\n  int i = 0;\n  undefined4 *PTR_DAT_00080f84 = (undefined4 *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (; PTR_Elf32_Rel_ARRAY_00080f80 + i < PTR_DAT_00080f88; i += 4) {\n      *(undefined4 *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(undefined4 *)(DAT_00080f7c + i);\n    }\n  }\n  for (; PTR_DAT_00080f84 < DAT_00080f8c; PTR_DAT_00080f84++) {\n    *PTR_DAT_00080f84 = 0;\n  }\n  undefined *PTR_DAT_00080f90 = PTR_DAT_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\n  if (PTR_DAT_00080f90 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while (true) {}\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": true,
            "current_name": "initialize_memory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bits_set_in_memory_00080e04",
                "uVar1": "bits_set_in_memory",
                "param_1": "address",
                "param_2": "bits_to_check"
            },
            "code": "uint check_bits_set_in_memory_00080e04(int address, uint bits_to_check) {\n  uint bits_set_in_memory = *(uint *)(address + 8) & bits_to_check;\n  if (bits_set_in_memory != 0) {\n    if ((bits_to_check & *(uint *)(address + 0x18)) == 0) {\n      bits_set_in_memory = 0;\n    }\n    else {\n      bits_set_in_memory = 1;\n    }\n  }\n  return bits_set_in_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": true,
            "current_name": "check_bits_set_in_memory_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "PTR_DAT_000805b0": "ptr3",
                "PTR_DAT_000805c4": "value4",
                "FUN_000804a8": "process_and_initialize_000804a8",
                "PTR_DAT_000805c0": "value3",
                "PTR_DAT_000805a8": "ptr1",
                "PTR_DAT_000805b8": "value1",
                "process_input_00081210": "process_input",
                "process_input_and_set_params_00081318": "set_params",
                "process_data_00080164": "process_data",
                "PTR_DAT_000805b4": "ptr4",
                "PTR_DAT_000805c8": "value5",
                "PTR_DAT_000805bc": "value2",
                "PTR_DAT_000805cc": "flag1",
                "get_value_from_pointer_thunk_00081714": "get_value_from_pointer_thunk",
                "DAT_00080160": "flag2",
                "PTR_DAT_000805ac": "ptr2"
            },
            "code": "int process_and_initialize_000804a8(){\n  int PTR_DAT_000805cc, DAT_00080160;\n  int PTR_DAT_000805b8, PTR_DAT_000805bc, PTR_DAT_000805c0, PTR_DAT_000805c4, PTR_DAT_000805c8;\n  char *PTR_DAT_000805a8, *PTR_DAT_000805ac, *PTR_DAT_000805b0, *PTR_DAT_000805b4;\n  process_input(1,0);\n  process_input(6,1);\n  process_input(0,1);\n  process_input(1,1);\n  set_params(0,0);\n  set_params(1,0);\n  PTR_DAT_000805a8 = DAT_000805a8;\n  PTR_DAT_000805ac = DAT_000805ac;\n  *(short *)(DAT_000805a8 + 0xE) = 0x13;\n  *(short *)(PTR_DAT_000805a8 + 0x10) = 10;\n  *(char **)(PTR_DAT_000805a8 + 0x14) = PTR_DAT_000805ac + 0x26;\n  PTR_DAT_000805a8[1] = 3;\n  PTR_DAT_000805a8[0x19] = 3;\n  *(short *)(PTR_DAT_000805a8 + 0x1A) = 0x14;\n  *(short *)(PTR_DAT_000805a8 + 0x28) = 3;\n  *(short *)(PTR_DAT_000805a8 + 4) = 0x10;\n  *(char **)(PTR_DAT_000805a8 + 8) = PTR_DAT_000805ac;\n  PTR_DAT_000805a8[0xD] = 0x10;\n  *(short *)(PTR_DAT_000805a8 + 0x1C) = 0xC;\n  PTR_DAT_000805a8[0x25] = 0x10;\n  *(short *)(PTR_DAT_000805a8 + 0x34) = 8;\n  PTR_DAT_000805b0 = DAT_000805b0;\n  *(short *)(PTR_DAT_000805a8 + 0x26) = 0x1C;\n  *(char **)(PTR_DAT_000805a8 + 0x2C) = PTR_DAT_000805ac + 0x38;\n  PTR_DAT_000805b4 = DAT_000805b4;\n  PTR_DAT_000805a8[0x30] = 2;\n  PTR_DAT_000805a8[0x31] = 2;\n  *(char **)(PTR_DAT_000805a8 + 0x38) = PTR_DAT_000805b0;\n  PTR_DAT_000805a8[0x3C] = 2;\n  *PTR_DAT_000805a8 = 1;\n  PTR_DAT_000805a8[0xC] = 1;\n  PTR_DAT_000805a8[0x18] = 1;\n  PTR_DAT_000805a8[0x24] = 1;\n  *(short *)(PTR_DAT_000805a8 + 0x3E) = 1;\n  *(short *)(PTR_DAT_000805a8 + 0x40) = 1;\n  *(short *)(PTR_DAT_000805a8 + 2) = 0;\n  *(char **)(PTR_DAT_000805a8 + 0x20) = PTR_DAT_000805ac + 0x28;\n  *(short *)(PTR_DAT_000805a8 + 0x32) = 0;\n  PTR_DAT_000805a8[0x3D] = 5;\n  *(char **)(PTR_DAT_000805a8 + 0x44) = PTR_DAT_000805b0 + 2;\n  process_data(PTR_DAT_000805b4,0x4B00);\n  *(short *)(PTR_DAT_000805b4 + 0x56) = 2000;\n  PTR_DAT_000805b8 = get_value_from_pointer_thunk_00081714();\n  *(int *)DAT_000805b8 = PTR_DAT_000805b8;\n  PTR_DAT_000805bc = get_value_from_pointer_thunk_00081714();\n  *(int *)DAT_000805bc = PTR_DAT_000805bc + 1000;\n  PTR_DAT_000805c0 = get_value_from_pointer_thunk_00081714();\n  *(int *)DAT_000805c0 = PTR_DAT_000805c0 + 1000;\n  PTR_DAT_000805c4 = get_value_from_pointer_thunk_00081714();\n  *(int *)DAT_000805c4 = PTR_DAT_000805c4 + 1000;\n  PTR_DAT_000805c8 = get_value_from_pointer_thunk_00081714();\n  *(int *)DAT_000805c8 = PTR_DAT_000805c8 + 1000;\n  *DAT_000805cc = 0;\n  PTR_DAT_000805cc = *(int *)DAT_00080160;\n  if (PTR_DAT_000805cc == 0) {\n    software_interrupt(0x3F);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "process_and_initialize_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "bVar2": "byte_value",
                "FUN_000802da": "validate_data_000802da",
                "param_1": "data_address",
                "puVar6": "ushort_pointer",
                "local_1c": "local_char_value",
                "local_1b": "local_undefined_value",
                "local_1a": "local_ushort_value",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "cVar1": "error_code",
                "uVar3": "undefined_value",
                "uVar5": "uint_value",
                "uVar4": "ushort_value"
            },
            "code": "int validate_data_000802da(int data_address, unsigned short data_length, unsigned short *data_buffer)\n{\n  char error_code;\n  byte byte_value;\n  undefined undefined_value;\n  unsigned short ushort_value;\n  uint uint_value;\n  unsigned short *ushort_pointer;\n  char local_char_value;\n  undefined local_undefined_value;\n  unsigned short local_ushort_value;\n  \n  uint_value = (uint)data_length;\n  if (*(char *)(data_address + 4) != \"\\0\") {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data_address + 7) != \"\\0\") {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(local_char_value - 1U)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(data_address + 9) = local_char_value;\n  *(undefined *)(data_address + 10) = local_undefined_value;\n  *(unsigned short **)(data_address + 0x4c) = data_buffer;\n  *(char *)(data_address + 0xb) = (char)((uint)local_ushort_value >> 8);\n  *(char *)(data_address + 0xc) = (char)local_ushort_value;\n  error_code = (char)data_length;\n  undefined_value = (undefined)(uint_value >> 8);\n  switch(local_undefined_value) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data_address + 0xd) = undefined_value;\n    break;\n  case 5:\n    ushort_value = *data_buffer;\n    if (ushort_value != 0) {\n      ushort_value = 1;\n    }\n    *(char *)(data_address + 0xd) = -(char)ushort_value;\n    uint_value = 0;\n    break;\n  case 6:\n    *(char *)(data_address + 0xd) = (char)((uint)*data_buffer >> 8);\n    uint_value = (uint)*data_buffer;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(data_length >> 3) & 0xfe;\n    if ((data_length & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(data_address + 0xe) = error_code;\n    *(undefined *)(data_address + 0xd) = undefined_value;\n    *(byte *)(data_address + 0xf) = byte_value;\n    undefined_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data_address + 0xd) = undefined_value;\n    *(char *)(data_address + 0xe) = error_code;\n    data_buffer = data_buffer + -1;\n    *(char *)(data_address + 0xf) = error_code * \"\\x02\";\n    *(undefined *)(data_address + 0x49) = 7;\n    ushort_pointer = data_buffer + uint_value;\n    while (data_buffer != ushort_pointer) {\n      byte_value = *(byte *)(data_address + 0x49);\n      *(char *)(data_address + (uint)byte_value + 9) = (char)((uint)data_buffer[1] >> 8);\n      uint_value = byte_value + 1 & 0xff;\n      *(char *)(data_address + (uint)byte_value + 9) = (char)*data_buffer;\n      *(byte *)(data_address + 0x49) = byte_value + 2;\n      data_buffer = data_buffer + 1;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data_address + 0xe) = (char)uint_value;\n  undefined_value = 6;\nLAB_0008034a:\n  *(undefined *)(data_address + 0x49) = undefined_value;\nswitchD_0008031e_caseD_7:\n  calculate_and_set_checksum_00080258(data_address);\n  *(undefined *)(data_address + 7) = 1;\n  error_code = \"\\0\";\nLAB_000803cc:\n  return (int)error_code;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "validate_data_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "uVar1": "num_groups",
                "FUN_00080f9c": "find_index_of_max_value_00080f9c",
                "*param_1": "*result",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar2": "group_index",
                "local_58": "max_values"
            },
            "code": "uint32_t find_index_of_max_value_00080f9c(uint32_t *result, uint32_t input_size, int divisor, int multiplier)\n{\n  uint32_t max_values[16];\n  max_values[0] = *(uint32_t *)PTR_DAT_0008102c;\n  max_values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  max_values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  max_values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  max_values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  max_values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  max_values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  max_values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  max_values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  max_values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  max_values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  max_values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  max_values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  max_values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  max_values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  max_values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  result[0] = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uint32_t num_groups = input_size / (uint32_t)(divisor * 2);\n  if (input_size == divisor * 2 * num_groups) {\n    num_groups = num_groups - 1;\n  }\n  uint32_t group_index = 0;\n  do {\n    if ((uint32_t)(multiplier * (int)(((uint64_t)input_size / (uint64_t)((num_groups + 1) * 2)) / (uint64_t)DAT_00081030)) <= max_values[group_index]) {\n      result[1] = (group_index & 0xf) << 0x10 | (num_groups & 0xff) << 8 | result[1];\n      return 0;\n    }\n    group_index++;\n  } while (group_index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "find_index_of_max_value_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "iVar3": "result",
                "FUN_00081210": "process_input_00081210",
                "puVar2": "data_ptr_2",
                "param_1": "index",
                "iVar9": "input_index",
                "iVar10": "input_value",
                "param_2": "mode",
                "puVar1": "data_ptr_1",
                "uVar5": "bit_mask",
                "uVar4": "bit_mask",
                "uVar6": "input_value",
                "bVar8": "byte_2",
                "bVar7": "byte_1"
            },
            "code": "int process_input_00081210(int index, int mode){\\n    undefined *data_ptr_1;\\n    undefined *data_ptr_2;\\n    int result;\\n    uint bit_mask;\\n    byte byte_1;\\n    byte byte_2;\\n    int input_index;\\n    int input_value;\\n\\n    data_ptr_2 = PTR_DAT_00081310;\\n    data_ptr_1 = PTR_DAT_0008130c;\\n    result = index;\\n    if (PTR_DAT_0008130c[index * 0x1c + 0xc] != \"\\0\") {\\n        if ((PTR_DAT_00081310[index] & 0xf) == 4) {\\n            result = set_bit_at_position(DAT_00081314,PTR_DAT_0008130c[index * 0x1c + 0x19]);\\n        }\\n        byte_2 = data_ptr_2[index];\\n        byte_1 = byte_2 & 0xf;\\n        if ((byte_1 < 3) && (byte_2 != 0)) {\\n            if (byte_1 == 2) {\\n                if (mode == 0) {\\n                    return result;\\n                }\\n            }\\n            else if (byte_1 == 1) {\\n                if (mode == 2) {\\n                    return result;\\n                }\\n            }\\n            else if (byte_1 == 3) {\\n                if (mode == 1) {\\n                    return result;\\n                }\\n                goto LAB_0008126c;\\n            }\\n        }\\n        if (mode != 1) {\\nLAB_0008126c:\\n            if (mode == 0) {\\n                input_index = index * 0x1c;\\n                check_and_set_bit(*(undefined4 *)(data_ptr_1 + input_index + 8));\\n                result = process_input_00081210(*(undefined4 *)(data_ptr_1 + input_index), 3, *(undefined4 *)(data_ptr_1 + input_index + 4), 0);\\n                byte_2 = data_ptr_2[index] & 0xf0 | 2;\\n            }\\n            else {\\n                if (mode != 2) {\\n                    return result;\\n                }\\n                input_index = index * 0x1c;\\n                check_and_set_bit(*(undefined4 *)(data_ptr_1 + input_index + 8));\\n                result = process_input_00081210(*(undefined4 *)(data_ptr_1 + input_index), 3, *(undefined4 *)(data_ptr_1 + input_index + 4), 1);\\n                byte_2 = data_ptr_2[index] & 0xf0 | 1;\\n            }\\n            data_ptr_2[index] = byte_2;\\n            return result;\\n        }\\n        input_index = index * 0x1c;\\n        input_value = *(int *)(data_ptr_1 + input_index);\\n        if (byte_2 >> 4 == 0) {\\n            bit_mask = 4;\\n        }\\n        else {\\n            bit_mask = 5;\\n        }\\n        result = process_input_00081210(input_value, bit_mask, *(undefined4 *)(data_ptr_1 + input_index + 4), *(undefined4 *)(data_ptr_1 + input_index + 0x10));\\n        data_ptr_2[index] = data_ptr_2[index] & 0xf0 | 3;\\n        if (*(int *)(input_value + 0x18) == -1) {\\n            bit_mask = *(uint *)(data_ptr_1 + input_index + 8);\\n            if (0x2c < bit_mask) {\\n                return 1;\\n            }\\n            if (bit_mask < 0x20) {\\n                bit_mask = 1 << (bit_mask & 0xff);\\n                input_value = *(uint *)(DAT_00080e98 + 0x18) & bit_mask;\\n                if (input_value == bit_mask) {\\n                    *(uint *)(DAT_00080e98 + 0x14) = input_value;\\n                }\\n            }\\n            else {\\n                bit_mask = 1 << (bit_mask - 0x20 & 0xff);\\n                input_value = *(uint *)(DAT_00080e98 + 0x108) & bit_mask;\\n                if (input_value == bit_mask) {\\n                    *(uint *)(DAT_00080e98 + 0x104) = input_value;\\n                }\\n            }\\n            return 0;\\n        }\\n    }\\n    return result;\\n}",
            "called": [
                "FUN_0008105c",
                "FUN_00080da0",
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "imported": true,
            "current_name": "process_input_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "memory_block_size": "memory_block_size",
                "iVar1": "memory_block",
                "FUN_00081454": "write_to_memory_00081454",
                "param_1": "memory_address",
                "memory_block_data_size": "memory_block_data_size",
                "param_2": "value",
                "uVar2": "memory_block_data_offset",
                "memory_block_header": "memory_block_header"
            },
            "code": "int write_to_memory_00081454(int memory_address, int value) {\n  int memory_block = *(int *)(memory_address + 0x14);\n  int memory_block_header = *(int *)(memory_address + 0x18);\n  int memory_block_size = *(int *)(memory_block_header + 0x14);\n  int memory_block_data_size = *(int *)(memory_block + 0x80);\n  int memory_block_data_offset = *(int *)(memory_block + 0x84);\n  if (memory_block_data_offset == memory_block_data_size && memory_block_size << 0x1e >= 0) {\n    return 0;\n  }\n  *(char *)(memory_block + memory_block_data_offset) = (char)value;\n  *(int *)(memory_block + 0x84) = memory_block_data_offset + 1;\n  *(int *)(memory_block_header + 8) = 2;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": true,
            "current_name": "write_to_memory_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "iVar2": "returnVal",
                "param_1": "outputValue",
                "FUN_00084728": "processReturnValue_00084728",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "puVar1": "dataPointer"
            },
            "code": "void processReturnValue_00084728(int *outputValue, undefined4 inputParam1, undefined4 inputParam2, undefined4 inputParam3)\n{\n  undefined *dataPointer = PTR_DAT_0008474c;\n  *(undefined4 *)PTR_DAT_0008474c = 0;\n  int returnVal = returnZero_000811c6(inputParam1, inputParam2, inputParam3);\n  if ((returnVal == -1) && (*(int *)dataPointer != 0)) {\n    *outputValue = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": true,
            "current_name": "processReturnValue_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "iVar2": "index",
                "uVar1": "return_value",
                "param_1": "pointer",
                "abStack_1b": "stack_array",
                "local_1c": "current_byte",
                "pbVar4": "buffer_pointer",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "FUN_00083c40": "process_data_00083c40",
                "uVar3": "data",
                "uVar5": "buffer_index"
            },
            "code": "uint process_data_00083c40(uint32_t param_1, uint32_t data_length, byte **data_buffer){\n  uint32_t return_value;\n  int32_t index;\n  uint32_t data;\n  byte *buffer_pointer;\n  uint32_t buffer_index;\n  byte current_byte;\n  byte stack_array[3];\n  \n  if (-1 < (int32_t)((uint32_t)*(ushort *)(data_buffer + 3) << 0x12)) {\n    *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x2000;\n    data_buffer[0x19] = (byte *)((uint32_t)data_buffer[0x19] | 0x2000);\n  }\n  return_value = get_data_from_pointer();\n  if ((return_value == 1) && (data_length - 1 < 0xff)) {\n    data = data_length & 0xff;\n    current_byte = (byte)data;\n  }\n  else {\n    return_value = process_data_00083c40_0008456c(param_1,&current_byte,data_length,data_buffer + 0x17);\n    if (return_value == 0xffffffff) {\n      *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (return_value == 0) {\n      return data_length;\n    }\n    data = (uint32_t)current_byte;\n  }\n  buffer_index = 0;\n  do {\n    buffer_pointer = data_buffer[2] + -1;\n    data_buffer[2] = buffer_pointer;\n    if ((int32_t)buffer_pointer < 0) {\n      if ((int32_t)data_buffer[6] <= (int32_t)buffer_pointer) {\n        **data_buffer = (byte)data;\n        buffer_pointer = *data_buffer;\n        data = (uint32_t)*buffer_pointer;\n        if (data != 10) goto LAB_00083c90;\n      }\n      index = process_data_00083c40_000844c4(param_1,data,data_buffer);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data_buffer = (byte)data;\n      buffer_pointer = *data_buffer;\nLAB_00083c90:\n      *data_buffer = buffer_pointer + 1;\n    }\n    if (return_value <= buffer_index + 1) {\n      return data_length;\n    }\n    data = (uint32_t)stack_array[buffer_index];\n    buffer_index = buffer_index + 1;\n  } while( true );\n}",
            "called": [
                "FUN_00084298",
                "FUN_0008456c",
                "FUN_000844c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": true,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = get_value_from_pointer_thunk_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = calculate_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = convert_to_int_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = calculate_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = get_value_from_pointer_thunk_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = calculate_0008189c(*(undefined4 *)puVar2);\n  iVar15 = checkConcatenatedValuesAreNotZero_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = checkIfZeroOrCarryFlagSet_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = calculate_shifted_value_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_0008189c",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081c94",
                "FUN_00081d1c",
                "thunk_FUN_00081714",
                "FUN_0008043e",
                "FUN_000802da",
                "FUN_00081734",
                "FUN_00081944",
                "FUN_00081730",
                "FUN_00081ca8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "value_1",
                "param_1": "input_param",
                "PTR_": "ptr_",
                "DAT_": "value_",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "value_2",
                "FUN_000813e4": "calculate_difference_000813e4"
            },
            "code": "int calculate_difference_000813e4(int input_param)\n{\n    int* PTR_1 = *(int**)(input_param + 0x10);\n    int* PTR_2 = PTR_1 + 0x20;\n    int DAT_1 = *PTR_2;\n    int DAT_2 = *(PTR_2 + 1);\n    int result = DAT_1 - DAT_2;\n    return result & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "DAT_00084294": "data",
                "FUN_00084290": "get_data_00084290"
            },
            "code": "int get_data_00084290(void)\n{\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": true,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "iVar2": "set_mem_perm",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "permissions",
                "puVar1": "ptr_data",
                "FUN_000846b4": "set_permissions_000846b4"
            },
            "code": "void set_permissions_000846b4(int *result, undefined4 start_address, undefined4 end_address, undefined4 permissions, undefined4 size)\n{\n  undefined *ptr_data = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  int set_mem_perm = set_memory_permissions_000811b4(start_address, end_address, end_address, 0, size);\n  if ((set_mem_perm == -1) && (*(int *)ptr_data != 0)) {\n    *result = *(int *)ptr_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "set_permissions_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer_address",
                "0": "zero",
                "0x80": "buffer_size",
                "fill_memory_with_byte_00082504": "fill_memory_with_byte"
            },
            "code": "int initialize_buffer_000813a8(int buffer_address)\n{\n  int buffer_size = 128;\n  int zero = 0;\n  fill_memory_with_byte_00082504(buffer_address, zero, buffer_size);\n  *(int *)(buffer_address + buffer_size) = zero;\n  *(int *)(buffer_address + buffer_size + 4) = zero;\n  return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_00083d9c",
                "iVar1": "prev_block_data",
                "iVar3": "next_block_data",
                "PTR_DAT_00083f30": "unknown_data_pointer",
                "iVar5": "block_data",
                "iVar6": "size_index",
                "iVar7": "size_offset",
                "param_1": "allocator",
                "iVar9": "allocator_data",
                "iVar10": "block_end",
                "FUN_00082598": "do_nothing",
                "DAT_00083f2c": "unknown_data_pointer",
                "DAT_00083f28": "unknown_data",
                "param_2": "size",
                "do_nothing_0008259c": "do_nothing",
                "uVar2": "size_flags",
                "uVar4": "block_size",
                "DAT_00083f24": "allocator_data",
                "uVar8": "next_block_size"
            },
            "code": "void allocate_memory_00083d9c(void* allocator, int size) {\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  int DAT_00083f24 = DAT_00083f24;\n  uint size_flags = *(uint *)(size + -4);\n  int block_data = size + -8;\n  uint block_size = size_flags & 0xfffffffe;\n  int block_end = block_data + block_size;\n  uint next_block_size = *(uint *)(block_end + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == block_end) {\n    next_block_size += block_size;\n    if (-1 < (int)(size_flags << 0x1f)) {\n      block_data = block_data - *(int *)(size + -8);\n      int prev_block_data = *(int *)(block_data + 0xc);\n      int next_block_data = *(int *)(block_data + 8);\n      next_block_size += *(int *)(size + -8);\n      *(int *)(next_block_data + 0xc) = prev_block_data;\n      *(int *)(prev_block_data + 8) = next_block_data;\n    }\n    uint min_block_size = *DAT_00083f2c;\n    *(uint *)(block_data + 4) = next_block_size | 1;\n    *(int *)(DAT_00083f24 + 8) = block_data;\n    if (min_block_size <= next_block_size) {\n      allocate_memory_00083d9c_00083d00(allocator,*(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    size_flags = size_flags & 1;\n    *(uint *)(block_end + 4) = next_block_size;\n    if (size_flags == 0) {\n      block_data = block_data - *(int *)(size + -8);\n      int prev_block_data = *(int *)(block_data + 8);\n      block_size = block_size + *(int *)(size + -8);\n      if (prev_block_data == DAT_00083f24 + 8) {\n        size_flags = 1;\n      }\n      else {\n        int next_block_data = *(int *)(block_data + 0xc);\n        *(int *)(prev_block_data + 0xc) = next_block_data;\n        *(int *)(next_block_data + 8) = prev_block_data;\n      }\n    }\n    else {\n      size_flags = 0;\n    }\n    if (-1 < *(int *)(block_end + next_block_size + 4) << 0x1f) {\n      block_size = block_size + next_block_size;\n      int next_block_data = *(int *)(block_end + 8);\n      if ((size_flags == 0) && (next_block_data == DAT_00083f28)) {\n        *(int *)(DAT_00083f24 + 0x14) = block_data;\n        *(int *)(DAT_00083f24 + 0x10) = block_data;\n        *(int *)(block_data + 0xc) = next_block_data;\n        *(int *)(block_data + 8) = next_block_data;\n        *(uint *)(block_data + 4) = block_size | 1;\n        *(uint *)(block_data + block_size) = block_size;\n        goto LAB_00083e30;\n      }\n      int prev_block_data = *(int *)(block_end + 0xc);\n      *(int *)(next_block_data + 0xc) = prev_block_data;\n      *(int *)(prev_block_data + 8) = next_block_data;\n    }\n    *(uint *)(block_data + 4) = block_size | 1;\n    *(uint *)(block_data + block_size) = block_size;\n    if (size_flags == 0) {\n      if (block_size < 0x200) {\n        uint min_block_size = *(uint *)(DAT_00083f24 + 4);\n        int free_block_data = DAT_00083f24 + (block_size & 0xfffffff8);\n        int next_free_block_data = *(int *)(free_block_data + 8);\n        *(int *)(block_data + 8) = next_free_block_data;\n        *(int *)(block_data + 0xc) = free_block_data;\n        *(uint *)(DAT_00083f24 + 4) = min_block_size | 1 << ((int)(block_size >> 3) >> 2 & 0xffU);\n        *(int *)(free_block_data + 8) = block_data;\n        *(int *)(next_free_block_data + 0xc) = block_data;\n        do_nothing_0008259c(allocator);\n        return;\n      }\n      uint size_log2 = block_size >> 9;\n      if (size_log2 < 5) {\n        int size_index = (block_size >> 6) + 0x38;\n        int size_offset = size_index * 2;\n      }\n      else if (size_log2 < 0x15) {\n        int size_index = size_log2 + 0x5b;\n        int size_offset = size_index * 2;\n      }\n      else if (size_log2 < 0x55) {\n        int size_index = (block_size >> 0xc) + 0x6e;\n        int size_offset = size_index * 2;\n      }\n      else if (size_log2 < 0x155) {\n        int size_index = (block_size >> 0xf) + 0x77;\n        int size_offset = size_index * 2;\n      }\n      else if (size_log2 < 0x555) {\n        int size_index = (block_size >> 0x12) + 0x7c;\n        int size_offset = size_index * 2;\n      }\n      else {\n        int size_offset = 0xfc;\n        int size_index = 0x7e;\n      }\n      int free_block_data = DAT_00083f24 + size_offset * 4;\n      int next_free_block_data = *(int *)(free_block_data + 8);\n      if (next_free_block_data == free_block_data) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (size_index >> 2 & 0xffU);\n        next_free_block_data = free_block_data;\n      }\n      else {\n        do {\n          if ((*(uint *)(next_free_block_data + 4) & 0xfffffffc) <= block_size) break;\n          next_free_block_data = *(int *)(next_free_block_data + 8);\n        } while (free_block_data != next_free_block_data);\n      }\n      *(int *)(block_data + 0xc) = next_free_block_data;\n      *(int *)(block_data + 8) = *(int *)(next_free_block_data + 8);\n      *(int *)(next_free_block_data + 8) = block_data;\n      *(int *)(*(int *)(block_data + 8) + 0xc) = block_data;\n    }\n  }\nLAB_00083e30:\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_000846a4",
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "allocate_memory_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "bVar1": "is_overflow",
                "FUN_00081bf4": "check_overflow_and_return_result_00081bf4",
                "param_1": "a",
                "param_2": "b",
                "uVar3": "b_times_2",
                "uVar2": "a_times_2",
                "uVar4": "a_or_b_and_most_significant_bit_cleared",
                "bVar5": "is_zero"
            },
            "code": "uint check_overflow_and_return_result_00081bf4(uint a, uint b)\n{\n  bool is_overflow;\n  uint a_times_2 = a * 2;\n  uint b_times_2 = b * 2;\n  \n  if (((int)a_times_2 >> 0x18 == -1 || (int)b_times_2 >> 0x18 == -1) && ((((int)a_times_2 >> 0x18 == -1 && ((a & 0x7fffff) != 0)) || (((int)b_times_2 >> 0x18 == -1 && ((b & 0x7fffff) != 0)))))\n  {\n    return 1;\n  }\n  \n  uint a_or_b_and_most_significant_bit_cleared = a_times_2 | b & 0x7fffffff;\n  bool is_zero = a_or_b_and_most_significant_bit_cleared == 0;\n  \n  if (!is_zero)\n  {\n    uint a_xor_b = a ^ b;\n    is_zero = a_xor_b == 0;\n  }\n  \n  is_overflow = -1 < (int)a_xor_b;\n  \n  if (is_overflow)\n  {\n    a = a_times_2 + b * -2;\n    is_zero = a == 0;\n  }\n  \n  if (is_overflow && b_times_2 <= a_times_2 && !is_zero)\n  {\n    a = (int)b >> 0x1f;\n  }\n  \n  if (!is_overflow || b_times_2 > a_times_2)\n  {\n    a = ~((int)b >> 0x1f);\n  }\n  \n  if (!is_zero)\n  {\n    a = a | 1;\n  }\n  \n  return a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": true,
            "current_name": "check_overflow_and_return_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "PTR_DAT_00081dbc": "PTR_FUNCTIONS_END",
                "ppcVar4": "ptr",
                "iVar3": "i",
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar5": "num_ptrs",
                "puVar2": "end_ptr",
                "PTR_LAB_00081dc4": "PTR_START",
                "puVar1": "start_ptr",
                "PTR_DAT_00081dc0": "PTR_FUNCTIONS_START",
                "PTR_DAT_00081dc8": "PTR_END"
            },
            "code": "void execute_functions_00081d7c(void)\n{\n  int num_functions = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(PTR_DAT_00081dc0 - 4);\n    int i = 0;\n    while (i != num_functions) {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    }\n  }\n  undefined *end_ptr = PTR_DAT_00081dc8;\n  undefined *start_ptr = PTR_LAB_00081dc4;\n  do_nothing();\n  int num_ptrs = (int)start_ptr - (int)end_ptr >> 2;\n  if (num_ptrs != 0) {\n    code **ptr = (code **)(end_ptr - 4);\n    int i = 0;\n    while (i != num_ptrs) {\n      i++;\n      ptr++;\n      (**ptr)();\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00085858",
                "FUN_00083974",
                "FUN_00080118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "execute_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_32_and_64_bit_values_00081c5c",
                "param_1": "value1",
                "param_2": "value2",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "undefined8 concatenate_32_and_64_bit_values_00081c5c(uint32_t value1, uint64_t value2)\n{\n  check_for_overflow();\n  return CONCAT44(value2, value1);\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": true,
            "current_name": "concatenate_32_and_64_bit_values_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "iVar1": "count",
                "FUN_00081388": "decrement_and_call_if_zero_00081388"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *DAT_000813a0;\n  if (count != -1) \n  {\n    count--;\n    *DAT_000813a0 = count;\n    if (count == 0) \n    {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": true,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00"
            ],
            "imported": true,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "puVar3": "source_ptr",
                "puVar4": "destination_ptr",
                "FUN_00082994": "copy_and_null_terminate_string_00082994",
                "param_1": "source",
                "puVar7": "source_ptr",
                "param_2": "destination",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "bVar8": "is_null_terminated"
            },
            "code": "void copy_and_null_terminate_string_00082994(uint *source, uint *destination)\n{\n  char current_char;\n  ushort current_short;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_uint;\n  uint next_uint;\n  bool is_null_terminated;\n  \n  if ((((uint)source ^ (uint)destination) & 3) != 0) {\n    do {\n      current_char = *(char *)destination;\n      *(char *)source = current_char;\n      destination = (uint *)((int)destination + 1);\n      source = (uint *)((int)source + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)destination & 3) != 0) {\n    source_ptr = destination;\n    if (((uint)destination & 1) != 0) {\n      source_ptr = (uint *)((int)destination + 1);\n      current_char = *(char *)destination;\n      *(char *)source = current_char;\n      source = (uint *)((int)source + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    destination = source_ptr;\n    if (((uint)source_ptr & 2) != 0) {\n      destination = (uint *)((int)source_ptr + 2);\n      current_short = *(ushort *)source_ptr;\n      is_null_terminated = (current_short & 0xff) == 0;\n      if (is_null_terminated) {\n        *(char *)source = (char)current_short;\n      }\n      else {\n        *(ushort *)source = current_short;\n        is_null_terminated = (current_short & 0xff00) == 0;\n        source = (uint *)((int)source + 2);\n      }\n      if (is_null_terminated) {\n        return;\n      }\n    }\n  }\n  current_uint = *destination;\n  source_ptr = destination + 1;\n  destination_ptr = source;\n  if (((uint)destination & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    destination_ptr = source + 1;\n    *source = current_uint;\n    source_ptr = destination + 2;\n    current_uint = destination[1];\n  }\n  while( true ) {\n    next_uint = *source_ptr;\n    is_null_terminated = (current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0;\n    if (is_null_terminated) break;\n    *destination_ptr = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    source_ptr = source_ptr + 2;\n    destination_ptr = destination_ptr + 2;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination_ptr = (char)current_uint;\n    next_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    destination_ptr = (uint *)((int)destination_ptr + 1);\n  } while (next_uint != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "copy_and_null_terminate_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "puVar2": "buffer2_ptr",
                "puVar3": "buffer3_ptr",
                "puVar4": "buffer4_ptr",
                "param_1": "buffer1",
                "puVar5": "buffer5_ptr",
                "puVar6": "buffer6_ptr",
                "FUN_00080c0c": "initialize_system_buffers_and_timers_00080c0c",
                "param_2": "buffer2",
                "param_3": "timer_interval",
                "puVar1": "buffer1_ptr"
            },
            "code": "void initialize_system_buffers_and_timers_00080c0c(undefined4 buffer1, undefined4 buffer2, undefined4 timer_interval)\n{\n  undefined *buffer1_ptr;\n  undefined *buffer2_ptr;\n  undefined *buffer3_ptr;\n  undefined *buffer4_ptr;\n  undefined *buffer5_ptr;\n  undefined *buffer6_ptr;\n\n  buffer2_ptr = PTR_DAT_00080ca4;\n  buffer1_ptr = PTR_DAT_00080ca0;\n  initialize_buffer_000813a8(buffer1_ptr);\n  initialize_buffer_000813a8(buffer2_ptr);\n  buffer5_ptr = PTR_DAT_00080cd8;\n  buffer3_ptr = PTR_DAT_00080cac;\n  setup_timer_000814e4(PTR_DAT_00080cb0,DAT_00080ca8,8,8,buffer1_ptr,buffer2_ptr,timer_interval);\n  buffer1_ptr = PTR_DAT_00080cb4;\n  initialize_buffer_000813a8(buffer5_ptr);\n  buffer6_ptr = PTR_DAT_00080cdc;\n  initialize_buffer_000813a8(buffer3_ptr);\n  buffer2_ptr = PTR_DAT_00080cb8;\n  initialize_buffer_000813a8(buffer1_ptr);\n  buffer4_ptr = PTR_DAT_00080cbc;\n  initialize_buffer_000813a8(buffer6_ptr);\n  initialize_buffer_000813a8(buffer2_ptr);\n  initialize_buffer_000813a8(buffer4_ptr);\n  initialize_timer_and_set_callback_functions_000815d4(PTR_DAT_00080cc4,DAT_00080cc0,0x11,0x11,buffer5_ptr,buffer6_ptr);\n  initialize_timer_and_set_callback_functions_000815d4(PTR_DAT_00080ccc,DAT_00080cc8,0x12,0x12,buffer3_ptr,buffer2_ptr);\n  initialize_timer_and_set_callback_functions_000815d4(PTR_DAT_00080cd4,DAT_00080cd0,0x14,0x14,buffer1_ptr,buffer4_ptr);\n  return;\n}",
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_system_buffers_and_timers_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "uVar1": "new_value",
                "param_1": "config_address",
                "FUN_00080d2e": "update_config_00080d2e",
                "param_2": "config_mask",
                "param_3": "config_value"
            },
            "code": "void update_config_00080d2e(int config_address, uint32_t config_value, uint32_t config_mask)\n{\n  *(uint32_t *)(config_address + 0x44) = config_value;\n  switch(config_mask) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    uint32_t new_value = *(uint32_t *)(config_address + 0x70) & *(uint32_t *)(config_address + 0x70) & ~config_value;\n    *(uint32_t *)(config_address + 0x70) = new_value;\n    break;\n  case 2:\n    uint32_t new_value = *(uint32_t *)(config_address + 0x70) | config_value;\n    *(uint32_t *)(config_address + 0x70) = new_value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint32_t *)(config_address + 4) = config_value;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "update_config_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "uVar1": "data_val_ushort",
                "iVar4": "data_array_4",
                "puVar3": "data_ptr_undefined",
                "param_1": "data_ptr",
                "param_2": "data_val",
                "param_3": "data_array",
                "param_4": "data_array_val",
                "FUN_000844c4": "process_data_000844c4",
                "uVar2": "data_val_uint"
            },
            "code": "uint process_data_000844c4(int data_ptr, uint data_val, undefined4 *data_array, undefined4 data_array_val)\n{\n  ushort data_val_ushort;\n  uint data_val_uint;\n  undefined *data_ptr_undefined;\n  int data_array_4;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  data_val_ushort = *(ushort *)(data_array + 3);\n  data_val_uint = (uint)data_val_ushort;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(data_val_uint << 0x1c)) || (data_array_4 = data_array[4], data_array_4 == 0)) {\n    data_array_4 = process_data_000844c4_helper(data_ptr, data_array, data_val_ushort, data_val_uint, data_array_val);\n    if (data_array_4 != 0) {\n      return 0xffffffff;\n    }\n    data_val_ushort = *(ushort *)(data_array + 3);\n    data_array_4 = data_array[4];\n    data_val_uint = (uint)data_val_ushort;\n  }\n  data_val = data_val & 0xff;\n  if ((int)(data_val_uint << 0x12) < 0) {\n    data_ptr_undefined = (undefined *)*data_array;\n    data_array_4 = (int)data_ptr_undefined - data_array_4;\n    if (data_array_4 < (int)data_array[5]) {\nLAB_000844f6:\n      data_array_4 = data_array_4 + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    data_ptr_undefined = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = data_val_ushort | 0x2000;\n    data_array_4 = (int)data_ptr_undefined - data_array_4;\n    if (data_array_4 < (int)data_array[5]) goto LAB_000844f6;\n  }\n  data_array_4 = decode_data(data_ptr, data_array);\n  if (data_array_4 != 0) {\n    return 0xffffffff;\n  }\n  data_ptr_undefined = (undefined *)*data_array;\n  data_array_4 = 1;\nLAB_000844f8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = data_ptr_undefined + 1;\n  *data_ptr_undefined = (char)data_val;\n  if (((data_array[5] == data_array_4) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (data_val == 10)))) &&\n     (data_array_4 = decode_data(data_ptr, data_array), data_array_4 != 0)) {\n    return 0xffffffff;\n  }\n  return data_val;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "process_data_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "iVar1": "leading_zeroes",
                "iVar4": "result",
                "param_1": "input",
                "uVar3": "sign_bit",
                "FUN_0008189c": "calculate_0008189c",
                "uVar2": "shifted_input"
            },
            "code": "uint calculate_0008189c(uint input)\n{\n  int leading_zeroes;\n  uint sign_bit;\n  uint shifted_input;\n  uint result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input);\n  shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  if (leading_zeroes > 7) {\n    result = ((sign_bit | 0x4b000000) - 0x800000) + (leading_zeroes - 8) * -0x800000;\n    result += (shifted_input >> (0x20 - (leading_zeroes - 8) & 0xff)) + (uint)(0x7fffffff < (0 << (leading_zeroes - 8 & 0xff)));\n    if ((0 << (leading_zeroes - 8 & 0xff)) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n  }\n  else {\n    result = ((sign_bit | 0x4b000000) - 0x800000) + (leading_zeroes - 8) * -0x800000;\n    result += (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f);\n    if ((shifted_input & 0x7fffffff) == 0) {\n      result = result & ~(shifted_input >> 0x1f);\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "FUN_0008234c": "copy_memory_block_0008234c",
                "uVar5": "remaining_size",
                "uVar4": "i",
                "bVar6": "is_less_than_64"
            },
            "code": "undefined4 * copy_memory_block_0008234c(undefined4 *destination, undefined4 *source, uint size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint i;\n  bool is_less_than_64;\n  \n  dest_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remaining_size = size - 4;\n      if (3 < size) {\n        do {\n          src_ptr = source;\n          dest_ptr = dest_ptr;\n          is_less_than_64 = remaining_size != 0;\n          remaining_size = remaining_size - 1;\n          *(undefined *)dest_ptr = *(undefined *)src_ptr;\n          dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n          source = (undefined4 *)((int)src_ptr + 1);\n        } while (is_less_than_64);\n        *(undefined *)(undefined4 *)((int)dest_ptr + 1) = *(undefined *)(undefined4 *)((int)src_ptr + 1);\n        *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n        *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remaining_size = 4 - ((uint)destination & 3);\n      size = size - remaining_size;\n      src_ptr = source;\n      dest_ptr = destination;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_ptr = dest_ptr;\n      source = src_ptr;\n      if ((remaining_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    for (i = 0; i < 16; i++) {\n      dest_ptr[i] = source[i];\n    }\n    dest_ptr = dest_ptr + 16;\n    source = source + 16;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      for (i = 0; i < 4; i++) {\n        dest_ptr[i] = source[i];\n      }\n      dest_ptr = dest_ptr + 4;\n      source = source + 4;\n      is_less_than_64 = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_less_than_64);\n  }\n  size = remaining_size + 0xc;\n  src_ptr = source;\n  dest_ptr = dest_ptr;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = src_ptr + 1;\n      *dest_ptr = *src_ptr;\n      is_less_than_64 = 3 < size;\n      size = size - 4;\n      dest_ptr = dest_ptr + 1;\n      src_ptr = src_ptr + 1;\n    } while (is_less_than_64);\n  }\nLAB_000823d0:\n  if (size + 4 != 0) {\n    dest_ptr = dest_ptr;\n    src_ptr = source;\n    if ((size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = *(undefined *)source;\n    }\n    if ((size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "copy_memory_block_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "add_data_to_buffer_00081d5c": "add_data_to_buffer",
                "DAT_00080aa0": "data_to_add",
                "PTR_s__00080a98": "status_structure_pointer",
                "DAT_00080a9c": "size_of_data",
                "PTR_DAT_00080aa4": "data_buffer",
                "puVar1": "buffer_pointer",
                "*(undefined2 *)(puVar1 + 0x56)": "*(undefined2 *)(data_buffer + 0x56)",
                "FUN_00080a68": "initialize_command_status_and_add_data_to_buffer_00080a68",
                "PTR_DAT_00080a94": "command_status_buffer"
            },
            "code": "void initialize_command_status_and_add_data_to_buffer_00080a68(void)\n{\n  undefined *PTR_DAT_00080a94 = PTR_DAT_00080a94;\n  initialize_command_status_00081682(PTR_DAT_00080a94, PTR_s__00080a98);\n  add_data_to_buffer_00081d5c(PTR_DAT_00080a94, DAT_00080aa0, DAT_00080a9c);\n  undefined *PTR_DAT_00080aa4 = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  PTR_DAT_00080aa4[5] = 0;\n  PTR_DAT_00080aa4[6] = 6;\n  *(undefined2 *)(PTR_DAT_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": true,
            "current_name": "initialize_command_status_and_add_data_to_buffer_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "copy_and_null_terminate_string_00082994": "copy_and_null_terminate_string",
                "iVar1": "status",
                "param_1": "command_buffer",
                "execute_and_update_0008163a": "execute_and_update_status",
                "param_2": "command_length",
                "param_3": "new_status",
                "clear_memory_if_not_null_0008160c": "clear_memory_if_not_null",
                "FUN_0008165c": "execute_command_and_update_status_0008165c"
            },
            "code": "undefined4* execute_command_and_update_status_0008165c(undefined4* command_buffer, undefined4 command_length, undefined4 new_status)\n{\n  int status = execute_and_update_status(command_buffer, new_status);\n  if (status == 0) {\n    clear_memory_if_not_null(command_buffer);\n  }\n  else {\n    command_buffer[2] = new_status;\n    copy_and_null_terminate_string_00082994(command_buffer[0], command_length);\n  }\n  return command_buffer;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": true,
            "current_name": "execute_command_and_update_status_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "param_1": "value1",
                "param_2": "value2",
                "FUN_000815f8": "combine_values_000815f8"
            },
            "code": "uint combine_values_000815f8(int value1, uint value2) {\n  return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": true,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_array_00084384",
                "pcVar3": "current_char_ptr",
                "param_1": "array",
                "param_2": "target_char",
                "param_3": "array_size",
                "puVar1": "result_ptr",
                "uVar2": "current_value",
                "pcVar4": "last_char_ptr",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_char_in_array_00084384(uint *array, char target_char, uint *array_size)\n{\n  uint *result_ptr;\n  uint current_value;\n  char *current_char_ptr;\n  char *last_char_ptr;\n  bool found_target_char;\n  \n  if (((uint)array & 3) == 0) {\n    // If the address of the array is 4-byte aligned, start searching\n    result_ptr = array;\n    if ((uint *)0x3 < array_size) {\n      do {\n        current_value = *array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        result_ptr = array;\n        if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n        array_size = array_size + -1;\n        result_ptr = array + 1;\n        array = array + 1;\n      } while ((uint *)0x3 < array_size);\n    }\n    array = array_size;\n    last_char_ptr = (char *)((int)array + -1);\n    if ((array != (uint *)0x0) && (array = result_ptr, *(char *)result_ptr != target_char)) {\n      current_char_ptr = (char *)0x0;\n      do {\n        array = (uint *)((int)array + 1);\n        found_target_char = current_char_ptr == last_char_ptr;\n        current_char_ptr = current_char_ptr + 1;\n        if (found_target_char) goto LAB_000843dc;\n      } while (*(char *)array != target_char);\n    }\n  }\n  else if (array_size == (uint *)0x0) {\n    result_ptr = (uint *)0x0;\n  }\n  else if (*(char *)array != target_char) {\n    result_ptr = (uint *)((int)array + 1);\n    array_size = (uint *)((int)array_size + -1);\n    do {\n      array = result_ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (array_size == (uint *)0x0) goto LAB_000843dc;\n      result_ptr = (uint *)((int)array + 1);\n      array_size = (uint *)((int)array_size + -1);\n    } while (*(char *)array != target_char);\n  }\n  return result_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "find_char_in_array_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "flags_ptr",
                "param_2": "new_flag_val",
                "*(uint *)(param_1 + 4)": "flags",
                "param_3": "flag_mask",
                "(param_3 & 1) << 7": "flag_mask"
            },
            "code": "void update_flags_00081034(uint32_t* flags_ptr, uint32_t new_flag_val, uint32_t flag_mask) {\n  uint32_t* flags = (uint32_t*)(flags_ptr + 4);\n  *flags = (*flags & ~flag_mask) | (new_flag_val & flag_mask);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_flags_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "iVar3": "buffer_end",
                "iVar4": "buffer_start",
                "puVar2": "buffer_ptr",
                "FUN_00083974": "add_data_to_buffer_00083974",
                "param_1": "data",
                "puVar1": "data_ptr"
            },
            "code": "undefined4 add_data_to_buffer_00083974(undefined4 data)\n{\n  undefined *data_ptr;\n  undefined4 *buffer_ptr;\n  int buffer_start;\n  int buffer_end;\n  \n  data_ptr = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return data;\n  }\n  buffer_start = *(int *)PTR_DAT_0008396c;\n  buffer_ptr = *(undefined4 **)(buffer_start + 0x148);\n  if (buffer_ptr == (undefined4 *)0x0) {\n    buffer_ptr = (undefined4 *)(buffer_start + 0x14c);\n    *(undefined4 **)(buffer_start + 0x148) = buffer_ptr;\n  }\n  buffer_end = buffer_ptr[1];\n  if (0x1f < buffer_end) {\n    if ((DAT_00083970 == 0) ||\n       (buffer_ptr = (undefined4 *)execute_function_with_data_pointer_00081df4(400), buffer_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_ptr = *(undefined4 *)(buffer_start + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_end = 0;\n    *(undefined4 **)(buffer_start + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_ptr[1] = buffer_end + 1;\n  buffer_ptr[buffer_end + 2] = data_ptr;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "add_data_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "iVar2": "zeroCheckResult",
                "FUN_00084700": "findAndCopyFirstNonZero_00084700",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "firstNonZeroPtr"
            },
            "code": "void findAndCopyFirstNonZero_00084700(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *firstNonZeroPtr = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  int zeroCheckResult = returnZero_000811c2(param_2, param_3, param_4);\n  if ((zeroCheckResult == -1) && (*(int *)firstNonZeroPtr != 0)) {\n    *result = *(int *)firstNonZeroPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": true,
            "current_name": "findAndCopyFirstNonZero_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "undefined4": "int",
                "undefined4*": "int*",
                "PTR_DAT_0008171c": "value_ptr",
                "thunk_FUN_00081714": "get_value_from_pointer_thunk_00081714",
                "value": "value"
            },
            "code": "int get_value_from_pointer_thunk_00081714() {\n    int* PTR_DAT_0008171c = PTR_DAT_0008171c;\n    int value = *PTR_DAT_0008171c;\n    return value;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag",
                "FUN_00081ca8": "checkConcatenatedValuesAreNotZero_00081ca8",
                "concatenate_32_and_64_bit_values_00081c54": "concatenate32And64BitValues"
            },
            "code": "bool checkConcatenatedValuesAreNotZero_00081ca8(void)\n{\n  bool carryFlag;\n  bool zeroFlag;\n  concatenate32And64BitValues();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "checkConcatenatedValuesAreNotZero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "iVar3": "bits_set",
                "iVar5": "memory_address",
                "puVar2": "input_flags",
                "param_1": "input_index",
                "FUN_00081318": "process_input_and_set_params_00081318",
                "param_2": "input_value",
                "param_3": "param_3",
                "puVar1": "input_data",
                "uVar4": "current_value"
            },
            "code": "void process_input_and_set_params_00081318(int input_index, int input_value, undefined4 param_3)\n{\n  undefined *input_data = PTR_DAT_00081380;\n  undefined *input_flags = PTR_DAT_00081384;\n  if (input_data[input_index * 0x1c + 0xc] != '\\0') {\n    if ((input_flags[input_index] & 0xf) == 5) {\n      process_input_00081210(input_index,1,param_3,5,input_index,input_value,param_3);\n    }\n    input_flags[input_index] = input_flags[input_index] & 0xf | (byte)(input_value << 4);\n    int memory_address = *(int *)(input_data + input_index * 0x1c);\n    undefined4 current_value = *(undefined4 *)(input_data + input_index * 0x1c + 4);\n    int bits_set = check_bits_set_in_memory_00080e04(memory_address,current_value);\n    if (bits_set == 0) {\n      if (input_value != 0) {\n        *(undefined4 *)(memory_address + 100) = current_value;\n        return;\n      }\n      *(undefined4 *)(memory_address + 0x60) = current_value;\n      return;\n    }\n    set_params_00080d7a(memory_address,current_value,input_value,0,1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "imported": true,
            "current_name": "process_input_and_set_params_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_value_from_pointer_00081714",
                "*PTR_DAT_0008171c": "value_pointer"
            },
            "code": "get_value_from_pointer_00081714() {\n  int* *PTR_DAT_0008171c = PTR_DAT_0008171c;\n  int value = **PTR_DAT_0008171c;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "iVar1": "first_non_zero_index",
                "param_1": "array",
                "FUN_0008449c": "find_first_non_zero_and_update_index_0008449c",
                "param_2": "array_length",
                "uVar2": "updated_flag"
            },
            "code": "void find_first_non_zero_and_update_index_0008449c(int* array, int array_length, int* index)\n{\n  int first_non_zero_index = find_and_copy_first_non_zero(array, *(short*)(index + 0xe));\n  ushort updated_flag;\n  if (first_non_zero_index == -1) {\n    updated_flag = *(ushort*)(index + 0xc) & 0xefff;\n  }\n  else {\n    updated_flag = *(ushort*)(index + 0xc) | 0x1000;\n    *index = first_non_zero_index;\n  }\n  *(ushort*)(index + 0xc) = updated_flag;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": true,
            "current_name": "find_first_non_zero_and_update_index_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00"
            ],
            "imported": true,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "uVar1": "product",
                "param_1": "input_value",
                "lVar2": "shifted_product",
                "param_2": "input_int",
                "param_3": "param_3",
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_4": "param_4",
                "param_5": "result_array"
            },
            "code": "void calculate_difference_0008477c(uint input_value, int input_int, uint param_3, uint param_4, int *result_array)\n{\n  uint product = FUNC_000847e0() * ((uint64_t)param_4 << 32 | param_3);\n  uint subtracted_value = input_value - product;\n  uint shifted_product = (uint)(product >> 32);\n  uint subtracted_int = input_int - shifted_product - (input_value < product);\n  result_array[0] = subtracted_value;\n  result_array[1] = subtracted_int;\n  return;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": true,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "bVar1": "is_overflow",
                "iVar4": "result",
                "param_1": "data",
                "cVar3": "return_value",
                "FUN_000801b0": "process_data_000801b0",
                "uVar2": "byte_value",
                "bVar5": "index"
            },
            "code": "int process_data_000801b0(int **data)\n{\n  bool is_overflow = false;\n  int num_bytes = *(byte *)((int)data + 6);\n  if (num_bytes > 1) {\n    process_input_and_set_params_00081318(num_bytes, 0);\n  }\n  *(undefined *)((int)data + 73) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (true) {\n      int result = (**(code **)(**data + 8))();\n      if (result == 0) {\n        break;\n      }\n      byte index = *(byte *)((int)data + 73);\n      undefined byte_value = (**(code **)(**data + 12))();\n      *(undefined *)((int)data + index + 9) = byte_value;\n      index++;\n      *(byte *)((int)data + 73) = index;\n      if (index > 63) {\n        is_overflow = true;\n        break;\n      }\n    }\n  }\n  *(short *)(data + 20) = *(short *)(data + 20) + 1;\n  char return_value;\n  if (is_overflow) {\n    return_value = -3;\n    *(short *)(data + 21) = *(short *)(data + 21) + 1;\n  }\n  else {\n    return_value = *(char *)((int)data + 73);\n  }\n  return (int)return_value;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "uVar1": "new_buffer_index",
                "param_1": "buffer_address",
                "param_2": "value",
                "FUN_000813c2": "update_buffer_000813c2"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined value){\n  uint new_buffer_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_buffer_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = value;\n    *(uint *)(buffer_address + 0x80) = new_buffer_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": true,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "param_1": "timer_settings",
                "param_6": "callback_param2",
                "param_2": "interval",
                "param_3": "is_repeating",
                "param_4": "callback_function",
                "param_5": "callback_param1",
                "puVar1": "callback_function_ptr",
                "FUN_000814e4": "setup_timer_000814e4"
            },
            "code": "void setup_timer_000814e4(undefined4 *timer_settings, undefined4 interval, undefined is_repeating,\n                      undefined4 callback_function, undefined4 callback_param1, undefined4 callback_param2)\n{\n  undefined *callback_function_ptr;\n  \n  timer_settings[1] = 0;\n  timer_settings[2] = 1000;\n  callback_function_ptr = PTR_PTR_TIMER_CALLBACK_1_2;\n  timer_settings[6] = interval;\n  *timer_settings = callback_function_ptr;\n  *(undefined *)(timer_settings + 7) = is_repeating;\n  timer_settings[4] = callback_param1;\n  timer_settings[8] = callback_function;\n  timer_settings[5] = callback_param2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "setup_timer_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "bVar1": "is_first_flag_set",
                "PTR_DAT_00000018": "params[24]",
                "PTR_DAT_00000019": "params[25]",
                "PTR_DAT_00000008": "params[8]",
                "PTR_DAT_00000009": "params[9]",
                "param_1": "params",
                "PTR_DAT_00000020": "params[32]",
                "param_2": "value",
                "param_3": "flags",
                "PTR_DAT_00000005": "params[5]",
                "FUN_00080d54": "set_params_00080d54",
                "PTR_DAT_00000011": "params[17]"
            },
            "code": "void set_params_00080d54(uint32_t *params, uint32_t value, uint32_t flags) {\n  bool is_first_flag_set = (flags << 0x1f) < 0;\n  PTR_DAT_00000011 = value;\n  if (is_first_flag_set) {\n    PTR_DAT_00000019 = value;\n  }\n  if (!is_first_flag_set) {\n    PTR_DAT_00000018 = value;\n  }\n  bool is_second_flag_set = (flags & 10) != 0;\n  if (is_second_flag_set) {\n    PTR_DAT_00000008 = value;\n  }\n  if (!is_second_flag_set) {\n    PTR_DAT_00000009 = value;\n  }\n  if (((flags << 0x1e) < 0) || ((flags << 0x1c) < 0)) {\n    PTR_DAT_00000020 = value;\n  }\n  PTR_DAT_00000005 = value;\n  *params = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "set_params_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "iVar1": "current_index",
                "param_1": "data_start_index",
                "param_2": "data_length",
                "cVar3": "bit_index",
                "uVar2": "checksum",
                "uVar4": "lsb",
                "FUN_0008021c": "calculate_checksum_0008021c"
            },
            "code": "uint calculate_checksum_0008021c(int data_start_index, uint data_length)\n{\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = data_start_index; (current_index - data_start_index & 0xffU) < data_length; current_index++) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index--;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": true,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = process_data_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)decode_data_and_check_flag_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_array_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_result_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_result_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00082a50",
                "FUN_00083b14",
                "FUN_00082ac0",
                "FUN_00083808",
                "FUN_00084384",
                "FUN_0008378c",
                "FUN_00084750"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "allocateMemoryForData_00081e04",
                "param_1": "dataSize",
                "*DAT_00081e10": "data"
            },
            "code": "void allocateMemoryForData_00081e04(unsigned int *DAT_00081e10Size){\n\tallocateMemory(*DAT_00081e10, *DAT_00081e10Size);\n\treturn;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "imported": true,
            "current_name": "allocateMemoryForData_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "iVar1": "result",
                "calculate_difference_000847ac": "calculate_difference",
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "first_input",
                "param_2": "second_input",
                "param_3": "third_input",
                "param_4": "fourth_input"
            },
            "code": "int calculate_result_00084750(int first_input, int second_input, int third_input, int fourth_input)\n{\n  int result;\n  if ((fourth_input == 0) && (third_input == 0)) {\n    if (second_input != 0 || first_input != 0) {\n      first_input = -1;\n    }\n    return first_input;\n  }\n  result = calculate_difference_000847ac();\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "calculate_result_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "iVar3": "data_1",
                "iVar4": "data_2",
                "iVar5": "data_3",
                "FUN_00080ae4": "initialize_and_execute_00080ae4",
                "puVar2": "param_ptr",
                "iVar6": "data_4",
                "iVar7": "i",
                "iVar8": "num_iterations",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_and_execute_00080ae4(void)\n{\n  uint *data_ptr;\n  undefined4 *param_ptr;\n  int i;\n  int num_iterations = 0x4f;\n  int data_1;\n  int data_2;\n  int data_3;\n  int data_4;\n  int param_1;\n  initialize_data();\n  data_ptr = data_1_ptr;\n  data_2 = *data_ptr / 1000 - 1;\n  *(undefined *)(data_3 + 0x23) = 0xf0;\n  param_ptr = data_4_ptr;\n  param_ptr[2] = 0;\n  *param_ptr = 7;\n  execute_functions();\n  for(i = 0; i < num_iterations; i++) {\n    process_input_and_set_params(i,0);\n    data_1 = data_5;\n    data_2 = data_6;\n    data_3 = data_7;\n    data_4 = data_8;\n  }\n  *(undefined4 *)(data_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_2 + 0xa0) = 0xffffffff;\n  process_input(data_2,1,0x300,0);\n  process_input_and_set_params(0,1);\n  process_input(data_2,1,0xc00,0);\n  process_input(data_2,1,0x3000,0);\n  process_input(data_4,2,0x30,0);\n  process_input(data_3,1,0xc00,0);\n  process_input(data_2,1,3,0);\n  process_input(data_3,1,0xc000,0);\n  check_and_set_bit(0x25);\n  find_index_of_max_value(data_9,*data_ptr,data_10,0xc);\n  update_data(data_9,0,0x300000,1);\n  update_flags(data_9,0,0);\n  set_param_value_at_offset(data_9,0xffffffff);\n  set_parameter_to_maximum_value(data_9);\n  return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_00080e18",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_00080e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "initialize_and_execute_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "iVar3": "buffer_index",
                "FUN_00081d5c": "add_data_to_buffer_00081d5c",
                "param_1": "data",
                "param_2": "index",
                "param_3": "buffer",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_bitmask",
                "uVar4": "bitmask"
            },
            "code": "uint32_t add_data_to_buffer_00081d5c(uint32_t data, uint32_t index, uint32_t *buffer){\n    uint32_t *buffer_ptr;\n    uint32_t buffer_index;\n    uint32_t buffer_bitmask;\n  \n    buffer_index = *(int *)PTR_DAT_0008396c;\n    buffer_ptr = *(uint32_t **)(buffer_index + 0x148);\n    if (buffer_ptr == (uint32_t *)0x0) {\n        buffer_ptr = (uint32_t *)(buffer_index + 0x14c);\n        *(uint32_t **)(buffer_index + 0x148) = buffer_ptr;\n    }\n    buffer_bitmask = buffer_ptr[1];\n    if (0x1f < (int)buffer_bitmask) {\n        if ((DAT_00083970 == 0) || (buffer_ptr = (uint32_t *)FUN_00081df4(400), buffer_ptr == (uint32_t *)0x0)) {\n            return 0xffffffff;\n        }\n        *buffer_ptr = *(uint32_t *)(buffer_index + 0x148);\n        buffer_ptr[1] = 0;\n        buffer_bitmask = 0;\n        *(uint32_t **)(buffer_index + 0x148) = buffer_ptr;\n        buffer_ptr[0x62] = 0;\n        buffer_ptr[99] = 0;\n    }\n    uint32_t bitmask = 1 << (buffer_bitmask & 0xff);\n    buffer_ptr[buffer_bitmask + 0x22] = data;\n    buffer_ptr[0x62] = buffer_ptr[0x62] | bitmask;\n    buffer_ptr[buffer_bitmask + 0x42] = index;\n    buffer_ptr[99] = bitmask | buffer_ptr[99];\n    buffer_ptr[1] = buffer_bitmask + 1;\n    buffer_ptr[buffer_bitmask + 2] = index;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": true,
            "current_name": "add_data_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "iVar2": "accumulated_value",
                "FUN_00082970": "calculate_00082970",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_ptr"
            },
            "code": "void calculate_00082970(int *result, undefined4 input)\n{\n  undefined *data_ptr;\n  int accumulated_value;\n  data_ptr = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  accumulated_value = accumulate(input);\n  if ((accumulated_value == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "imported": true,
            "current_name": "calculate_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "returnOne_000811be"
            },
            "code": "int returnOne_000811be() {\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": true,
            "current_name": "returnOne_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "param_1": "ptr_value_1",
                "param_2": "ptr_value_2",
                "FUN_00081c54": "concatenate_32_and_64_bit_values_00081c54"
            },
            "code": "void concatenate_32_and_64_bit_values_00081c54(uint32_t* ptr_value_1, uint64_t* ptr_value_2)\n{\n  concatenate_32_and_64_bit_values_00081c54(ptr_value_2, ptr_value_1);\n  return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": true,
            "current_name": "concatenate_32_and_64_bit_values_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "iVar1": "result",
                "param_1": "params",
                "*param_1": "current_param_value",
                "param_2": "param_limit",
                "(uint)param_1[1]": "next_param_value",
                "FUN_0008163a": "execute_and_update_0008163a"
            },
            "code": "int execute_and_update_0008163a(int *params, uint param_limit)\n{\n  int result;\n  int current_param_value = *params;\n  uint next_param_value = (uint)params[1];\n  if ((current_param_value == 0) || (next_param_value < param_limit))\n  {\n    result = execute_function_and_update_params_00081622(params);\n    if (result == 0)\n    {\n      return 0;\n    }\n    if (params[2] == 0)\n    {\n      *(undefined *)*params = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "execute_and_update_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUNC_000825b0": "call_function",
                "param_1": "param_1",
                "DAT_000825ac": "function_pointer",
                "param_2": "param_2",
                "FUN_000825a0": "execute_function_with_params_000825a0"
            },
            "code": "void execute_function_with_params_000825a0(int* DAT_000825ac, int param_1, int param_2)\n{\n  call_function(DAT_000825ac, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": true,
            "current_name": "execute_function_with_params_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "setup_timer_000814e4": "setup_timer",
                "param_1": "memory_pointer",
                "PTR_PTR_write_to_memory_00081454_1_000815f4": "write_to_memory_callback_function",
                "param_2": "timer_callback_function",
                "FUN_000815d4": "initialize_timer_and_set_callback_functions_000815d4"
            },
            "code": "undefined4 initialize_timer_and_set_callback_functions_000815d4(undefined4 *memory_pointer, undefined4 timer_callback_function)\n{\n  setup_timer_000814e4();\n  *memory_pointer = PTR_PTR_write_to_memory_00081454_1_000815f4;\n  memory_pointer[9] = timer_callback_function;\n  return memory_pointer;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "initialize_timer_and_set_callback_functions_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculate_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculate_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970",
                "FUN_00083d9c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_000842a4",
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "iVar2": "loop_result",
                "FUN_00080164": "process_data_00080164",
                "param_1": "input_data",
                "process_input_00081210": "process_input",
                "process_input_and_set_params_00081318": "set_input_params",
                "puVar1": "data_pointer"
            },
            "code": "void process_data_00080164(int **input_data)\n{\n  undefined *data_pointer = PTR_DAT_000801ac;\n  *input_data = (int *)PTR_DAT_000801ac;\n  (**(code **)(*(int *)data_pointer + 0x18))(PTR_DAT_000801ac);\n  if (1 < *(byte *)((int)input_data + 6)) {\n    process_input(*(byte *)((int)input_data + 6),1);\n    set_input_params(*(undefined *)((int)input_data + 6),0);\n  }\n  int loop_result;\n  do {\n    loop_result = (**(code **)(**input_data + 0xc))();\n  } while (-1 < loop_result);\n  *(undefined *)((int)input_data + 0x49) = 0;\n  *(undefined *)((int)input_data + 0x4a) = 0;\n  *(undefined2 *)(input_data + 0x15) = 0;\n  *(undefined2 *)((int)input_data + 0x52) = 0;\n  *(undefined2 *)(input_data + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": true,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "iVar1": "i",
                "FUN_000811cc": "write_bytes_to_memory_000811cc",
                "param_1": "memory_address",
                "param_2": "bytes_to_write",
                "param_3": "num_bytes_to_write"
            },
            "code": "uint write_bytes_to_memory_000811cc(uint* memory_address, char* bytes_to_write, uint num_bytes_to_write)\n{\n  int i;\n  for (i = 0; i < (int)num_bytes_to_write; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(bytes_to_write + i);\n  }\n  return num_bytes_to_write & ~((int)num_bytes_to_write >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": true,
            "current_name": "write_bytes_to_memory_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "iVar2": "result",
                "FUN_000846dc": "returnDefaultIfOneNotFound_000846dc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "dataPointer"
            },
            "code": "void returnDefaultIfOneNotFound_000846dc(int* output, undefined4 input) {\n  undefined* dataPointer = PTR_DAT_000846fc;\n  *(undefined4*)dataPointer = 0;\n  int result = returnOne_000811be(input);\n  if (result == -1 && *(int*)dataPointer != 0) {\n    *output = *(int*)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "returnDefaultIfOneNotFound_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "iVar1": "leading_zeroes",
                "iVar3": "multiplier",
                "shifted_zero": "shifted_zero",
                "FUN_00081894": "calculate_00081894",
                "param_1": "input",
                "addend": "addend",
                "result": "result",
                "uVar2": "shift_amount",
                "uVar4": "mask",
                "shift_by": "shift_by",
                "shifted_input": "shifted_input"
            },
            "code": "uint calculate_00081894(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shift_by = shift_amount & 0xff;\n    uint shifted_input = input << shift_by;\n    uint shifted_zero = 0U >> (0x20 - shift_by & 0xff);\n    uint addend = (uint)(0x7fffffff < (0 << shift_by));\n    uint result = multiplier + shifted_input + shifted_zero + addend;\n    if ((0 << shift_by) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift_by = (leading_zeroes + 0x18U) & 0xff;\n  uint shifted_input = input << shift_by;\n  int shifted_multiplier = (int)(input >> (0x20 - shift_by & 0xff)) - ((int)shifted_input >> 0x1f);\n  uint mask = shifted_input & 0x7fffffff;\n  uint result = multiplier + shifted_multiplier;\n  if (mask == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "undefined4": "int",
                "0x0": "NULL",
                "FUN_000845bc": "convert_uint_to_char_array_000845bc",
                "param_1": "char_array",
                "uint": "unsigned int",
                "(char)": "(char)",
                "undefined": "void",
                "*param_1": "",
                "0x100": "256",
                "*param_2": "",
                "param_2": "num",
                "param_3": "num_length"
            },
            "code": "int convert_uint_to_char_array_000845bc(uint num, char* char_array){\n  if (char_array == NULL) {\n    return 0;\n  }\n  if (num < 256) {\n    *char_array = (char)num;\n    return 1;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": true,
            "current_name": "convert_uint_to_char_array_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "puVar2": "next_word",
                "param_1": "memory",
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "param_2": "byte",
                "param_3": "size",
                "puVar1": "current_word",
                "uVar3": "aligned_word",
                "uVar4": "word_count",
                "bVar5": "is_size_zero"
            },
            "code": "void fill_memory_with_byte_00082504(uint32_t *memory, uint8_t byte, uint32_t size)\n{\n  uint32_t *current_word = memory;\n  uint32_t remaining_size = size;\n\n  // Fill unaligned bytes\n  if (((uint32_t)memory & 3) != 0) {\n    bool is_size_zero = remaining_size == 0;\n    current_word = memory;\n    remaining_size = remaining_size - 1;\n    if (is_size_zero) {\n      return;\n    }\n    while (true) {\n      memory = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = byte;\n      if (((uint32_t)memory & 3) == 0) {\n        break;\n      }\n      is_size_zero = remaining_size == 0;\n      current_word = memory;\n      remaining_size = remaining_size - 1;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n\n  // Fill aligned words\n  if (remaining_size >= 16) {\n    uint32_t aligned_word = (byte << 24) | (byte << 16) | (byte << 8) | byte;\n    uint32_t word_count = remaining_size >> 4;\n    for (uint32_t i = 0; i < word_count; i++) {\n      *current_word++ = aligned_word;\n      *current_word++ = aligned_word;\n      *current_word++ = aligned_word;\n      *current_word++ = aligned_word;\n    }\n    remaining_size &= 0xf;\n  }\n\n  // Fill remaining unaligned bytes\n  if (remaining_size != 0) {\n    current_word = (uint32_t *)((int)current_word + (remaining_size - 1 & ~3) + 4);\n    remaining_size &= 3;\n    while (remaining_size--) {\n      *(uint8_t *)current_word++ = byte;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": true,
            "current_name": "fill_memory_with_byte_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "PTR_DAT_0008010c": "is_empty",
                "DAT_00080114": "value_to_use",
                "DAT_00080110": "is_not_zero",
                "param_1": "value_to_return",
                "FUN_000800f4": "check_and_return_value_000800f4"
            },
            "code": "int check_and_return_value_000800f4(int value_to_return) {\n  if (*PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      value_to_return = DAT_00080114;\n    }\n    *PTR_DAT_0008010c = 1;\n  }\n  return value_to_return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": true,
            "current_name": "check_and_return_value_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "local_47c": "flag_bits",
                "iVar1": "result",
                "local_46c": "data_3",
                "iVar2": "decode_result",
                "local_47a": "flag_bit_1",
                "param_1": "flag",
                "auStack_420": "buffer",
                "local_424": "unused_data",
                "local_488": "decode_buffer",
                "local_478": "buffer_ptr",
                "local_464": "data_4",
                "local_474": "data_1",
                "param_2": "data_ptr",
                "FUN_0008378c": "decode_data_and_check_flag_0008378c",
                "local_480": "data_2",
                "local_470": "unused_data"
            },
            "code": "int decode_data_and_check_flag_0008378c(undefined4 flag, int data_ptr)\n{\n  int result = 0;\n  int decode_result = 0;\n  undefined *decode_buffer[2];\n  undefined *buffer_ptr;\n  ushort flag_bits;\n  undefined2 flag_bit_1;\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_3;\n  undefined4 data_4;\n  undefined buffer[1024];\n\n  data_3 = *(undefined4 *)(data_ptr + 0x1c);\n  flag_bit_1 = *(undefined2 *)(data_ptr + 0xe);\n  data_4 = *(undefined4 *)(data_ptr + 0x24);\n  decode_buffer[0] = buffer;\n  flag_bits = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  data_1 = *(undefined4 *)(data_ptr + 100);\n  decode_buffer[1] = NULL;\n\n  buffer_ptr = decode_buffer[0];\n  decode_result = decode_data(flag, decode_buffer);\n  if (decode_result == 0 || decode_result == -1) {\n    result = -1;\n  }\n  if ((int)((uint)flag_bits << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "decode_data_and_check_flag_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "iVar2": "header_field_1",
                "iVar5": "bytes_remaining",
                "iVar7": "header_field_4",
                "param_1": "data_buffer",
                "piVar1": "data_ptr",
                "unaff_r4": "return_value",
                "param_2": "header_buffer",
                "FUN_00083adc": "decode_data_00083adc",
                "uVar3": "header_field_2",
                "pcVar6": "decoder_func_ptr",
                "uVar4": "header_field_3"
            },
            "code": "undefined4 decode_data_00083adc(int *data_buffer,int *header_buffer)\n{\n  int *data_ptr;\n  int header_field_1;\n  ushort header_field_2;\n  uint header_field_3;\n  int header_field_4;\n  code *decoder_func_ptr;\n  undefined4 return_value;\n  int bytes_remaining;\n\n  if ((data_buffer != (int *)0x0) && (data_buffer[0xe] == 0)) {\n    initialize_data_structures();\n  }\n\n  if (*(short *)(header_buffer + 3) == 0) {\n    return 0;\n  }\n\n  header_field_2 = *(ushort *)(header_buffer + 3);\n\n  if ((int)((uint)header_field_2 << 0x1c) < 0) {\n    header_field_4 = header_buffer[4];\n\n    if (header_field_4 == 0) {\n      return 0;\n    }\n\n    header_field_1 = *header_buffer;\n\n    if ((header_field_2 & 3) == 0) {\n      bytes_remaining = header_buffer[5];\n    }\n    else {\n      bytes_remaining = 0;\n    }\n\n    *header_buffer = header_field_4;\n    header_field_1 -= header_field_4;\n    header_buffer[2] = bytes_remaining;\n\n    do {\n      if (header_field_1 < 1) {\n        return 0;\n      }\n\n      bytes_remaining = (*(code *)header_buffer[9])(data_buffer,header_buffer[7],header_field_4,header_field_1,return_value);\n      header_field_1 -= bytes_remaining;\n      header_field_4 += bytes_remaining;\n    } while (0 < bytes_remaining);\n\n    *(ushort *)(header_buffer + 3) = *(ushort *)(header_buffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n\n  *(ushort *)(header_buffer + 3) = header_field_2 | 0x800;\n\n  if ((header_buffer[1] < 1) && (header_buffer[0xf] < 1)) {\n    return 0;\n  }\n\n  decoder_func_ptr = (code *)header_buffer[10];\n\n  if (decoder_func_ptr == (code *)0x0) {\n    return 0;\n  }\n\n  header_field_3 = (uint)(header_field_2 | 0x800);\n  header_field_1 = *data_buffer;\n  *data_buffer = 0;\n\n  if ((header_field_2 & 0x1000) == 0) {\n    bytes_remaining = (*decoder_func_ptr)(data_buffer,header_buffer[7],header_field_3 & 0x1000,1);\n\n    if ((bytes_remaining == -1) && (header_field_4 = *data_buffer, header_field_4 != 0)) {\n      if ((header_field_4 == 0x1d) || (header_field_4 == 0x16)) {\n        *data_buffer = header_field_1;\n        return 0;\n      }\n      *(ushort *)(header_buffer + 3) = *(ushort *)(header_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n\n    header_field_2 = *(ushort *)(header_buffer + 3);\n    decoder_func_ptr = (code *)header_buffer[10];\n  }\n  else {\n    bytes_remaining = header_buffer[0x14];\n  }\n\n  if (((int)(header_field_3 << 0x1d) < 0) && (bytes_remaining = bytes_remaining - header_buffer[1], header_buffer[0xc] != 0)) {\n    bytes_remaining = bytes_remaining - header_buffer[0xf];\n  }\n\n  bytes_remaining = (*decoder_func_ptr)(data_buffer,header_buffer[7],bytes_remaining,0);\n\n  if (bytes_remaining == -1) {\n    header_field_4 = *data_buffer;\n\n    if (header_field_4 != 0) {\n      if ((header_field_4 != 0x1d) && (header_field_4 != 0x16)) {\n        *(ushort *)(header_buffer + 3) = *(ushort *)(header_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(header_buffer + 3) = *(ushort *)(header_buffer + 3) & 0xf7ff;\n      *header_buffer = header_buffer[4];\n      header_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    header_field_2 = *(ushort *)(header_buffer + 3) & 0xf7ff;\n    header_buffer[1] = 0;\n    *(ushort *)(header_buffer + 3) = header_field_2;\n    *header_buffer = header_buffer[4];\n  }\n  else {\n    header_field_2 = *(ushort *)(header_buffer + 3) & 0xf7ff;\n    *header_buffer = header_buffer[4];\n    *(ushort *)(header_buffer + 3) = header_field_2;\n    header_buffer[1] = 0;\n  }\n\n  if ((int)((uint)header_field_2 << 0x13) < 0) {\n    header_buffer[0x14] = bytes_remaining;\n  }\n\n  data_ptr = (int *)header_buffer[0xc];\n  *data_buffer = header_field_1;\n\n  if (data_ptr == (int *)0x0) {\n    return 0;\n  }\n\n  if (data_ptr != header_buffer + 0x10) {\n    allocate_memory(data_buffer);\n  }\n\n  header_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_0008378c",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "decode_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00082438(piVar9,param_2);\n      }\n      allocate_memory_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00082598",
                "FUN_00081e14",
                "FUN_0008259c",
                "FUN_00083d9c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "*(byte *)(param_1 + 10)": "*(byte *)(value + 10)",
                "iVar1": "index",
                "threshold": "threshold",
                "param_1": "value",
                "*(short *)(param_1 + 0x54)": "*(short *)(value + 0x54)",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c",
                "max_index": "max_index",
                "0xfb": "0xfb",
                "FUN_000803d4": "check_value_000803d4"
            },
            "code": "int check_value_000803d4(int value){\n  int index = 0;\n  int max_index = 8;\n  int threshold = (int)((uint)*(byte *)(value + 10) << 0x18);\n  if (threshold < 0) {\n    *(short *)(value + 0x54) = *(short *)(value + 0x54) + 1;\n    return 0xfb;\n  }\n  while (index != max_index) {\n    if (PTR_DAT_0008040c[index] == *(byte *)(value + 10)) {\n      return 0;\n    }\n    index++;\n  }\n  *(short *)(value + 0x54) = *(short *)(value + 0x54) + 1;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "check_value_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "iVar4": "check_result",
                "param_1": "data",
                "piVar3": "value_ptr",
                "unaff_r6": "value",
                "cVar1": "result",
                "uVar2": "return_value",
                "FUN_0008043e": "process_data_0008043e"
            },
            "code": "int process_data_0008043e(int **data)\n{\n  char result = 0;\n  uint8_t value = 0;\n  int *value_ptr = NULL;\n  int check_result = 0;\n\n  if (*(data[0] + 5) < 4) {\n    uint8_t return_value = (**(code **)(**data + 8))() & 0xff;\n    value = return_value;\n  }\n\n  value_ptr = (int *)get_value_from_pointer_thunk_00081714();\n  if (data[0x17] < value_ptr) {\n    data[0][2] = 0xff;\n    data[0][7] = 0;\n    data[0][0x15]++;\n  }\n  else if (value > 7) {\n    process_data_0008043e_000801b0(data);\n    check_result = check_value_000803d4(data);\n    if (check_result == 0) {\n      if (*(data[0] + 10) - 3 < 2) {\n        process_values_00080410(data);\n      }\n      data[0][7] = 0;\n      result = *(char *)(data[0] + 0x49);\n    }\n    else {\n      data[0][7] = 0;\n      result = (char)check_result;\n    }\n  }\n\n  return (int)result;\n}",
            "called": [
                "FUN_000803d4",
                "FUN_000801b0",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "process_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "clear_memory_if_not_null_0008160c",
                "allocateMemoryForData_00081e04": "allocate_memory_for_data",
                "param_1[2]": "memory_ptr[2]",
                "param_1": "memory_ptr",
                "param_1[1]": "memory_ptr[1]",
                "*param_1": "*memory_ptr"
            },
            "code": "void clear_memory_if_not_null_0008160c(int *memory_ptr)\n{\n  if (*memory_ptr != 0) {\n    allocate_memory_for_data();\n  }\n  *memory_ptr = 0;\n  memory_ptr[2] = 0;\n  memory_ptr[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "clear_memory_if_not_null_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "uVar1": "bit_mask",
                "param_1": "bit_index"
            },
            "code": "int check_and_set_bit_00080e18(uint bit_index) {\n  uint bit_mask;\n  if (bit_index < 45) {\n    if (bit_index < 32) {\n      bit_mask = 1 << bit_index;\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_index - 32);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00081508",
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": true,
            "current_name": "check_and_set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "int32_t return_zero_00081184() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": true,
            "current_name": "return_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_data_from_pointer_00084298",
                "*DAT_000842a0": "data_pointer"
            },
            "code": "int get_data_from_pointer_00084298(void)\n{\n  int* *DAT_000842a0 = DAT_000842a0;\n  return **DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_parameter_to_maximum_value_00081066",
                "param_1": "parameter"
            },
            "code": "void set_parameter_to_maximum_value_00081066(int parameter)\n{\n  *(int *)(parameter + 0x14) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "set_parameter_to_maximum_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "uVar1": "shift_amount",
                "FUN_00081cd0": "convert_to_int_00081cd0",
                "param_1": "input_value",
                "uVar3": "shifted_value",
                "uVar2": "complement_shift_amount"
            },
            "code": "int32_t convert_to_int_00081cd0(uint32_t input_value) {\n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  int32_t shift_amount = (input_value << 1) >> 0x18;\n  int32_t complement_shift_amount = 0x9e - shift_amount;\n  if (shift_amount < 0x9f && complement_shift_amount != 0) {\n    int32_t shifted_value = (input_value << 8 | 0x80000000) >> (complement_shift_amount & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((complement_shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "convert_to_int_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "execute_function_with_data_pointer_00081df4",
                "param_1": "data_pointer",
                "FUNC_00081e14": "call_function_with_data",
                "*DAT_00081e00": "*DATA_POINTER"
            },
            "code": "void execute_function_with_data_pointer_00081df4(void* data_pointer){\n  call_function_with_data(*DAT_00081e00, data_pointer);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": true,
            "current_name": "execute_function_with_data_pointer_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "bVar3": "index",
                "iVar2": "array_index",
                "uVar1": "combined_value",
                "iVar5": "array_value",
                "FUN_00080410": "process_values_00080410",
                "param_1": "array_start",
                "param_2": "shift_amount",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar4": "temp_index"
            },
            "code": "void process_values_00080410(int array_start, uint8_t shift_amount, uint32_t value_1, uint32_t value_2)\n{\n  uint8_t index = 0;\n  while(index < (*(uint8_t *)(array_start + 0xb) >> 1)) {\n    uint32_t array_index = (index * 2 + 3 & 0xff) + array_start;\n    uint32_t array_value = *(uint32_t *)(array_start + 0x4c);\n    uint16_t combined_value = combine_values(*(uint8_t *)(array_index + 9), *(uint8_t *)(array_index + 10), array_index, shift_amount, value_2);\n    *(uint16_t *)(array_value + index * 2) = combined_value;\n    ++index;\n  }\n  return;\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "process_values_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "bVar1": "is_negative_flag",
                "FUN_00080da0": "process_input_00080da0",
                "param_1": "input_ptr",
                "DAT_00080df8": "PTR_FUNC_00080df8",
                "param_2": "input_type",
                "param_3": "input_value",
                "param_4": "input_flag",
                "DAT_00080dfc": "PTR_FUNC_00080dfc",
                "DAT_00080e00": "PTR_FUNC_00080e00"
            },
            "code": "int process_input_00080da0(int input_ptr, int input_type, int input_value, uint32_t input_flag) {\n  bool is_negative_flag = (int)(input_flag << 0x1f) < 0;\n  switch(input_type) {\n    case 1:\n    case 2:\n      (*DAT_00080df8)(input_ptr, input_type, input_value);\n      *(int *)(input_ptr + 0x44) = input_value;\n      if (is_negative_flag) {\n        *(int *)(input_ptr + 100) = input_value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(input_ptr + 0x60) = input_value;\n      }\n      break;\n    case 3:\n      (*DAT_00080dfc)(input_ptr, input_value, input_flag, DAT_00080dfc, input_ptr);\n      break;\n    case 4:\n    case 5:\n      bool is_bit_set = input_type == 5;\n      bool is_shifted_flag_set = (input_flag << 0x1d) >> 0x1f;\n      bool is_masked_flag_set = input_flag & 1;\n      (*DAT_00080e00)(input_ptr, input_value, is_bit_set, is_shifted_flag_set, is_masked_flag_set, input_type, input_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": true,
            "current_name": "process_input_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "bVar1": "checksum_index",
                "iVar3": "result",
                "param_1": "data_ptr",
                "FUN_00080258": "calculate_and_set_checksum_00080258",
                "param_2": "data_len",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "calculated_checksum",
                "uVar4": "checksum_value"
            },
            "code": "void calculate_and_set_checksum_00080258(int **data_ptr, int data_len, int param_3, int param_4) {\n  byte checksum_index = *(byte *)((int)data_ptr + 0x49);\n  uint checksum_value = (uint)checksum_index;\n  undefined2 calculated_checksum = calculate_checksum_0008021c(data_ptr, checksum_value, param_3, param_4, param_4);\n  *(char *)((int)data_ptr + checksum_value + 9) = (char)((ushort)calculated_checksum >> 8);\n  *(char *)((int)data_ptr + (checksum_value + 1 & 0xff) + 9) = (char)calculated_checksum;\n  *(byte *)((int)data_ptr + 0x49) = checksum_index + 2;\n  if (data_len > 1) {\n    process_input_and_set_params_00081318(*(byte *)((int)data_ptr + 6), 1);\n  }\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    (**(code **)(**data_ptr + 4))(*data_ptr, (int)data_ptr + 9, *(undefined *)((int)data_ptr + 0x49));\n  }\n  if (data_len > 1) {\n    process_input_and_set_params_00081318(*(byte *)((int)data_ptr + 6), 0);\n  }\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    do {\n      int result = (**(code **)(**data_ptr + 0xc))();\n    } while (result >= -1);\n  }\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  int value_from_pointer_thunk = get_value_from_pointer_thunk_00081714();\n  data_ptr[0x17] = (int *)(value_from_pointer_thunk + (uint)*(ushort *)((int)data_ptr + 0x56));\n  *(short *)((int)data_ptr + 0x52) = *(short *)((int)data_ptr + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": true,
            "current_name": "calculate_and_set_checksum_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "iVar1": "result",
                "param_1": "param_array",
                "FUN_00081622": "execute_function_and_update_params_00081622",
                "param_2": "param_count",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "int execute_function_and_update_params_00081622(int *param_array, int param_count, undefined4 param_3, undefined4 param_4)\n{\n  int result = execute_function_with_params_000825a0(*param_array, param_count + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *param_array = result;\n    param_array[1] = param_count;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": true,
            "current_name": "execute_function_and_update_params_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "iVar1": "temp_int",
                "puVar2": "dst_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "param_1": "src",
                "puVar6": "byte_ptr",
                "FUN_00082438": "reverse_copy_00082438",
                "param_2": "dst",
                "param_3": "size",
                "uVar5": "temp_size",
                "uVar7": "byte_size"
            },
            "code": "void reverse_copy_00082438(uint32_t *src, uint32_t *dst, uint32_t size) {\n  if (src < dst && dst < src + size) {\n    uint8_t *src_bytes = (uint8_t*)src + size;\n    uint8_t *dst_bytes = (uint8_t*)dst + size;\n    while (size--) {\n      *(--dst_bytes) = *(--src_bytes);\n    }\n  }\n  else if (size >= 16 && ((uintptr_t)src & 3) == ((uintptr_t)dst & 3)) {\n    uint32_t *src_end = src + (size / 4) - 4;\n    while (src <= src_end) {\n      dst[3] = src[3];\n      dst[2] = src[2];\n      dst[1] = src[1];\n      dst[0] = src[0];\n      src += 4;\n      dst += 4;\n    }\n    switch (size & 12) {\n      case 12:\n        dst[2] = src[2];\n      case 8:\n        dst[1] = src[1];\n      case 4:\n        dst[0] = src[0];\n    }\n    src = src_end + 4;\n    dst = dst + (size / 4);\n    size &= 3;\n  }\n  while (size--) {\n    *(uint8_t*)dst++ = *(uint8_t*)src++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "iVar2": "device_struct",
                "puVar3": "device_data",
                "param_1": "device_id",
                "FUN_00081508": "initialize_device_00081508",
                "param_2": "device_speed",
                "param_3": "device_config",
                "puVar1": "speed_divisor"
            },
            "code": "void initialize_device_00081508(uint device_id, uint device_speed, uint device_config){\n  uint *speed_divisor;\n  int device_struct;\n  undefined4 *device_data;\n  check_and_set_bit(0x00080e18);\n  device_data = *(undefined4 **)(device_id + 0x18);\n  device_data[0x48] = 0x202;\n  *device_data = 0xac;\n  speed_divisor = PTR_DAT_00081570;\n  device_data[1] = device_config;\n  device_data[8] = *speed_divisor / device_speed >> 4;\n  device_data[3] = 0xffffffff;\n  device_data[2] = 0x61;\n  *(int *)(PTR_DAT_00081574 + ((uint)(int)(char)*(byte *)(device_id + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(device_id + 0x1c) & 0x1f);\n  device_struct = *(int *)(device_id + 0x10);\n  *(undefined4 *)(device_struct + 0x84) = 0;\n  *(undefined4 *)(device_struct + 0x80) = 0;\n  device_struct = *(int *)(device_id + 0x14);\n  *(undefined4 *)(device_struct + 0x84) = 0;\n  *(undefined4 *)(device_struct + 0x80) = 0;\n  *device_data = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": true,
            "current_name": "initialize_device_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "iVar2": "ptr",
                "uVar1": "flags_and",
                "param_1": "data_array",
                "*DAT_000838c8": "*PTR_DAT_000838c8",
                "allocate_memory_00083d9c": "allocate_memory",
                "FUN_00083808": "process_data_00083808",
                "param_2": "param_array",
                "uVar3": "flags",
                "uVar4": "flags_short",
                "initialize_data_structures_00083b14": "initialize_data_structures"
            },
            "code": "int process_data_00083808(uint16_t *data_array, int *param_array) {\n  uint16_t flags = data_array[3];\n  uint32_t flags_shifted = (uint32_t)flags << 28;\n  int result = 0;\n  int *ptr = (int *)0x0;\n  \n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  \n  if ((int)(flags_shifted) < 0) {\n    ptr = &param_array[4];\n  }\n  else {\n    if (-1 < (int)(flags << 27)) {\n      result = 0xffffffff;\n      data_array[3] = flags | 0x40;\n      return result;\n    }\n    if ((int)(flags_shifted << 1) < 0) {\n      if ((int *)param_array[12] != (int *)0x0) {\n        if ((int *)param_array[12] != param_array + 0x10) {\n          allocate_memory(&result);\n          flags = data_array[3];\n        }\n        param_array[12] = 0;\n      }\n      ptr = &param_array[4];\n      flags = flags & 0xffdb;\n      data_array[0] = *ptr;\n      param_array[1] = 0;\n    }\n    else {\n      ptr = &param_array[4];\n    }\n    data_array[3] = flags | 8;\n    flags_shifted = (uint32_t)(flags | 8);\n  }\n  \n  if ((*ptr == 0) && ((flags_shifted & 0x280) != 0x200)) {\n    set_permissions_and_check_for_default(&result, param_array);\n    flags_shifted = (uint32_t)data_array[3];\n    ptr = &param_array[4];\n  }\n  \n  uint32_t flags_and = flags_shifted & 1;\n  if (flags_and == 0) {\n    if (-1 < (int)(flags_shifted << 30)) {\n      ptr = &param_array[5];\n    }\n    param_array[2] = (int)flags_and;\n  }\n  else {\n    param_array[6] = -param_array[5];\n    param_array[2] = 0;\n  }\n  \n  if ((*ptr == 0) && ((int)(flags_shifted << 24) < 0)) {\n    data_array[3] = flags | 0x40;\n    result = 0xffffffff;\n    return result;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_000842a4",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "param_1": "array_address",
                "1 << (param_2 & 0xff)": "bit_mask",
                "param_2": "position",
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "*(int *)(param_1 + 0x14)": "*array_pointer",
                "(param_1 + 0x14)": "array_pointer"
            },
            "code": "void set_bit_at_position_0008105c(int array_address, uint8_t position) {\n  int* array_pointer = (int*)(array_address + 0x14);\n  int bit_mask = 1 << (position & 0xff);\n  *array_pointer = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": true,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "iVar2": "result",
                "pcVar3": "processor_function",
                "uVar1": "data",
                "param_1": "data_buffer",
                "param_2": "buffer_length",
                "param_3": "data_type",
                "param_4": "result_buffer",
                "FUN_0008456c": "process_data_0008456c",
                "auStack_24": "auxiliary_buffer"
            },
            "code": "void process_data_0008456c(int *data_buffer, int buffer_length, int data_type, int *result_buffer)\n{\n  int result = -1;\n  code *processor_function = *(code **)PTR_DAT_000845b8;\n  int data = get_data_00084290();\n  if (buffer_length == 0) {\n    result = (*processor_function)(data_buffer, auStack_24, 0, data, result_buffer);\n  }\n  else {\n    result = (*processor_function)(data_buffer, buffer_length, data_type, data, result_buffer);\n  }\n  if (result == -1) {\n    *result_buffer = 0;\n    *data_buffer = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "param_1": "address",
                "param_2": "permissions",
                "FUN_000811b4": "set_memory_permissions_000811b4"
            },
            "code": "void set_memory_permissions_000811b4(int* address, int permissions) {\n  *(int*)(address + 4) = permissions;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": true,
            "current_name": "set_memory_permissions_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "DAT_000816dc": "data_block",
                "FUN_000816d4": "set_default_value_of_pointer_000816d4"
            },
            "code": "void set_default_value_of_pointer_000816d4(void)\n{\n  int* pointer = (int*)(DAT_000816dc + 4);\n  *pointer = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "set_default_value_of_pointer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = process_data_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_block_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = decode_data_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_char_in_array_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = decode_data_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = decode_data_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0008234c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438",
                "FUN_00084384",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083d9c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_params_00080d7a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "param_1_enabled",
                "param_4": "param_2_enabled",
                "param_5": "param_3_enabled"
            },
            "code": "void set_params_00080d7a(undefined4 *params, undefined4 value, int param_1_enabled, int param_2_enabled, int param_3_enabled, int default_param_enabled) {\n  params[0x11] = value;\n  if (default_param_enabled) {\n    params[0x18] = value;\n  } else {\n    params[0x19] = value;\n  }\n  if (param_2_enabled) {\n    params[0x14] = value;\n  } else {\n    params[0x15] = value;\n  }\n  if (param_1_enabled) {\n    params[0xc] = value;\n  } else {\n    params[0xd] = value;\n  }\n  params[4] = value;\n  *params = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "set_params_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "DAT_00080f0c": "DATA_PTR_2",
                "iVar2": "index",
                "FUN_00080e9c": "initialize_data_00080e9c",
                "DAT_00080f14": "DATA_PTR_3",
                "DAT_00080f18": "DATA_PTR_5",
                "DAT_00080f08": "DATA_PTR_1",
                "puVar1": "data_ptr",
                "DAT_00080f20": "DATA_PTR_6",
                "DAT_00080f10": "DATA_PTR_4"
            },
            "code": "void initialize_data_00080e9c(void)\n{\n  uint32_t *data_ptr;\n  int32_t index;\n  data_ptr = DAT_00080f08;\n  *DAT_00080f08 = 0x400;\n  data_ptr[0x80] = 0x400;\n  index = DAT_00080f0c;\n  if (-1 < *(int32_t *)(DAT_00080f0c + 0x20) << 7) {\n    *(uint32_t *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    do {\n    } while (-1 < *(int32_t *)(index + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(index + 0x20) = DAT_00080f10;\n  do {\n  } while (-1 < *(int32_t *)(index + 0x68) << 0xf);\n  *(uint32_t *)(DAT_00080f0c + 0x30) = *(uint32_t *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  do {\n  } while (-1 < *(int32_t *)(index + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  do {\n  } while (-1 < *(int32_t *)(index + 0x68) << 0x1e);\n  *(uint32_t *)(DAT_00080f0c + 0x30) = 0x11;\n  do {\n  } while (-1 < *(int32_t *)(index + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080f0c + 0x30) = 0x12;\n  do {\n  } while (-1 < *(int32_t *)(index + 0x68) << 0x1c);\n  *DAT_00080f14 = DAT_00080f20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "initialize_data_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "sVar1": "input_length",
                "iVar3": "write_result",
                "FUN_00084464": "copy_bytes_to_memory_00084464",
                "puVar2": "PTR_DAT_000845fc",
                "param_1": "output_address",
                "param_2": "input_address",
                "param_3": "num_bytes",
                "param_4": "byte_value",
                "uVar4": "input_flags"
            },
            "code": "void copy_bytes_to_memory_00084464(int *output_address, int input_address, int num_bytes, int byte_value) {\n  short input_length = *(short *)(input_address + 0xe);\n  ushort input_flags = *(ushort *)(input_address + 0xc);\n  \n  if ((int)((uint)input_flags << 0x17) < 0) {\n    find_and_copy_first_non_zero(output_address, (int)input_length, 0, 2);\n    input_flags = *(ushort *)(input_address + 0xc);\n  }\n  *(ushort *)(input_address + 0xc) = input_flags & 0xefff;\n  \n  int write_result = write_bytes_to_memory(input_length, num_bytes, byte_value);\n  \n  if ((write_result == -1) && (*PTR_DAT_000845fc != 0)) {\n    *output_address = *PTR_DAT_000845fc;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00084700",
                "FUN_000811cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": true,
            "current_name": "copy_bytes_to_memory_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae"
            },
            "code": "int32_t get_error_code_000811ae(void)\n{\n  return -1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": true,
            "current_name": "get_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "iVar2": "current_value",
                "param_1": "value",
                "FUN_0008118c": "accumulate_0008118c",
                "puVar1": "ptr"
            },
            "code": "int accumulate_0008118c(int value)\n{\n  undefined *ptr = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  int current_value = *(int *)ptr;\n  *(int *)ptr = value + current_value;\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": true,
            "current_name": "accumulate_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "bVar4": "isNullByte",
                "iVar1": "byteCount",
                "puVar2": "addressPtr",
                "param_1": "address",
                "FUN_00082a50": "count_bytes_until_null_00082a50",
                "uVar3": "value"
            },
            "code": "int count_bytes_until_null_00082a50(uint address) {\n  int byteCount = 0;\n  uint *addressPtr = (uint *)(address & 0xfffffffc);\n  int bytesUntilAligned = -(address & 3);\n  uint value = *addressPtr;\n  if ((address & 3) != 0) {\n    value |= 0xffffffffU >> ((bytesUntilAligned + 4U & 0x1f) << 3);\n  }\n  while (addressPtr++, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    byteCount += 4;\n    value = *addressPtr;\n  }\n  bool isNullByte = (value & 0xff) == 0;\n  if (!isNullByte) {\n    byteCount++;\n    isNullByte = (value & 0xff00) == 0;\n  }\n  if (!isNullByte) {\n    byteCount++;\n    isNullByte = (value & 0xff0000) == 0;\n  }\n  if (!isNullByte) {\n    byteCount++;\n  }\n  return byteCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": true,
            "current_name": "count_bytes_until_null_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "param_1": "base_address",
                "param_2": "value",
                "FUN_0008106e": "set_param_value_at_offset_0008106e"
            },
            "code": "void set_param_value_at_offset_0008106e(int base_address, int offset, int value) {\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "set_param_value_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "returnZero_000811c2"
            },
            "code": "int32_t returnZero_000811c2(void) {\n    int32_t result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": true,
            "current_name": "returnZero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "returnZero_000811c6"
            },
            "code": "int returnZero_000811c6(void)\n{\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": true,
            "current_name": "returnZero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "DAT_00083d90": "data_segment_base_address",
                "iVar1": "data_segment_base_address",
                "iVar3": "calculated_address",
                "iVar5": "allocated_address",
                "puVar2": "new_data_segment_base_address",
                "param_1": "base_address",
                "param_2": "size",
                "DAT_00083d98": "old_data_segment_base_address",
                "PTR_DAT_00083d94": "new_data_segment_base_address_2",
                "FUN_00083d00": "allocate_memory_00083d00",
                "uVar4": "aligned_size"
            },
            "code": "int allocate_memory_00083d00(uint32_t base_address, uint32_t size)\n{\n  int DAT_00083d90 = DAT_00083d90;\n  do_nothing_00082598();\n  uint32_t aligned_size = (*(uint32_t *)(*(int *)(DAT_00083d90 + 8) + 4) & 0xfffffffc);\n  int32_t allocated_address = ((aligned_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < allocated_address) {\n    int calculated_address = calculate_00082970(base_address,0);\n    if (calculated_address == *(int *)(DAT_00083d90 + 8) + aligned_size) {\n      calculated_address = calculate_00082970(base_address,-allocated_address);\n      undefined *new_DAT_00083d90 = PTR_DAT_00083d94;\n      if (calculated_address != -1) {\n        int32_t DAT_00083d98 = *(int *)PTR_DAT_00083d94;\n        *(uint32_t *)(*(int *)(DAT_00083d90 + 8) + 4) = aligned_size - allocated_address | 1;\n        *(int *)new_DAT_00083d90 = DAT_00083d98 - allocated_address;\n        do_nothing_0008259c(base_address);\n        return 1;\n      }\n      allocated_address = calculate_00082970(base_address,0);\n      undefined *PTR_DAT_00083d94 = PTR_DAT_00083d94;\n      uint32_t difference = allocated_address - *(int *)(DAT_00083d90 + 8);\n      if (0xf < (int)difference) {\n        int32_t DAT_00083d98_2 = *DAT_00083d98;\n        *(uint32_t *)(*(int *)(DAT_00083d90 + 8) + 4) = difference | 1;\n        *(int *)PTR_DAT_00083d94 = allocated_address - DAT_00083d98_2;\n      }\n    }\n  }\n  do_nothing_0008259c(base_address);\n  return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": true,
            "current_name": "allocate_memory_00083d00"
        }
    },
    "used_tokens": 86866,
    "layers": [
        [
            "FUN_00080ce0",
            "FUN_00083b14",
            "FUN_00081210",
            "FUN_00084728",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00081c5c",
            "FUN_00083974",
            "FUN_00084750",
            "FUN_00082970",
            "FUN_000815d4",
            "FUN_000846dc",
            "FUN_00080410",
            "FUN_00081622",
            "FUN_00081508",
            "FUN_0008456c",
            "FUN_000811c2"
        ],
        [
            "FUN_00081c94",
            "FUN_000842a4",
            "FUN_00080c0c",
            "FUN_00084700",
            "FUN_00081318",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00083d00"
        ],
        [
            "FUN_00083d9c",
            "FUN_00081ca8",
            "FUN_0008449c",
            "FUN_000801b0",
            "FUN_00080ae4",
            "FUN_00080164",
            "FUN_00080258",
            "FUN_00084464"
        ],
        [
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00081e04",
            "FUN_00083adc",
            "FUN_0008043e",
            "FUN_00083808"
        ],
        [
            "FUN_000816a8",
            "FUN_000815fe",
            "FUN_000846a4",
            "FUN_000844c4",
            "FUN_0008378c",
            "FUN_0008160c"
        ],
        [
            "FUN_00083c40",
            "FUN_0008165c"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ]
    ],
    "locked_functions": []
}