{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPointer)\n\n{\n  int result;\n  \n  *dataPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081210(*(byte *)((int)dataPointer + 6),1);\n    FUN_00081318(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    result = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isOverflow;\n  undefined tempVar;\n  char charVar;\n  int result;\n  byte byteVar;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (result = (**(code **)(**data + 8))(), result != 0) {\n      byteVar = *(byte *)((int)data + 0x49);\n      tempVar = (**(code **)(**data + 0xc))();\n      charVar = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + byteVar + 9) = tempVar;\n      byteVar = charVar + 1;\n      *(byte *)((int)data + 0x49) = byteVar;\n      if (0x3f < byteVar) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverflow) {\n    charVar = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    charVar = *(char *)((int)data + 0x49);\n  }\n  return (int)charVar;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isOverflow",
                "uVar2": "tempVar",
                "cVar3": "charVar",
                "iVar4": "result",
                "bVar5": "byteVar"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int startIndex,uint length)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitCounter;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (currentIndex = startIndex; (currentIndex - startIndex & 0xffU) < length; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitCounter = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCounter = bitCounter + -1;\n    } while (bitCounter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "startIndex",
                "param_2": "length",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitCounter",
                "uVar4": "bit"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "process_data_00080258",
            "code": "\nvoid processData_00080258(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVal;\n  undefined2 ushortVal;\n  int intVal;\n  uint uintVal;\n  \n  byteVal = *(byte *)((int)data + 0x49);\n  uintVal = (uint)byteVal;\n  ushortVal = FUN_0008021c(data,uintVal,param3,param4,param4);\n  *(char *)((int)data + uintVal + 9) = (char)((ushort)ushortVal >> 8);\n  *(char *)((int)data + (uintVal + 1 & 0xff) + 9) = (char)ushortVal;\n  *(byte *)((int)data + 0x49) = byteVal + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      intVal = (**(code **)(**data + 0xc))();\n    } while (-1 < intVal);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  intVal = thunk_FUN_00081714();\n  data[0x17] = (int *)(intVal + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "process_data_00080258",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVal",
                "uVar2": "ushortVal",
                "iVar3": "intVal",
                "uVar4": "uintVal"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_parameters_000802da",
            "code": "\nint validateParameters_000802da(int param1,uint flags,uint length,ushort *data)\n\n{\n  char errorCode;\n  byte byteVar;\n  undefined tempVar;\n  ushort tempShortVar;\n  uint tempIntVar;\n  ushort *tempPointer;\n  undefined byte1;\n  undefined byte2;\n  ushort ushortVar;\n  \n  byte1 = (undefined)flags;\n  byte2 = (undefined)(flags >> 8);\n  ushortVar = (ushort)length;\n  tempIntVar = length & 0xffff;\n  if (*(char *)(param1 + 4) != '\\0') {\n    errorCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(param1 + 7) != '\\0') {\n    errorCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    errorCode = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(param1 + 9) = byte1;\n  *(undefined *)(param1 + 10) = byte2;\n  *(ushort **)(param1 + 0x4c) = data;\n  *(char *)(param1 + 0xb) = (char)(flags >> 0x18);\n  *(char *)(param1 + 0xc) = (char)(flags >> 0x10);\n  tempVar = (undefined)(length >> 8);\n  switch(byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(param1 + 0xd) = tempVar;\n    break;\n  case 5:\n    tempShortVar = *data;\n    if (tempShortVar != 0) {\n      tempShortVar = 1;\n    }\n    *(char *)(param1 + 0xd) = -(char)tempShortVar;\n    tempIntVar = 0;\n    break;\n  case 6:\n    *(char *)(param1 + 0xd) = (char)(*data >> 8);\n    tempIntVar = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(ushortVar >> 3) & 0xfe;\n    if ((length & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(param1 + 0xe) = (char)length;\n    *(undefined *)(param1 + 0xd) = tempVar;\n    *(byte *)(param1 + 0xf) = byteVar;\n    tempVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(param1 + 0xd) = tempVar;\n    *(char *)(param1 + 0xe) = (char)length;\n    data = data + -1;\n    *(char *)(param1 + 0xf) = (char)tempIntVar * '\\x02';\n    *(undefined *)(param1 + 0x49) = 7;\n    tempPointer = data + tempIntVar;\n    while (data != tempPointer) {\n      byteVar = *(byte *)(param1 + 0x49);\n      *(char *)(param1 + (uint)byteVar + 9) = (char)(data[1] >> 8);\n      tempIntVar = byteVar + 1 & 0xff;\n      *(char *)(param1 + 0x49) = (char)tempIntVar;\n      data = data + 1;\n      *(char *)(tempIntVar + param1 + 9) = (char)*data;\n      *(byte *)(param1 + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(param1 + 0xe) = (char)tempIntVar;\n  tempVar = 6;\nLAB_0008034a:\n  *(undefined *)(param1 + 0x49) = tempVar;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(param1);\n  *(undefined *)(param1 + 7) = 1;\n  errorCode = '\\0';\nLAB_000803cc:\n  return (int)errorCode;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_parameters_000802da",
                "param_1": "param1",
                "param_2": "flags",
                "param_3": "length",
                "param_4": "data",
                "cVar1": "errorCode",
                "bVar2": "byteVar",
                "uVar3": "tempVar",
                "uVar4": "tempShortVar",
                "uVar5": "tempIntVar",
                "puVar6": "tempPointer",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "local_18": "ushortVar"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_value_000803d4",
            "code": "\nundefined4 check_value_000803d4(int input)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input + 10) << 0x18) < 0) {\n    *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_value_000803d4",
                "param_1": "input",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataAddr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int currentAddr;\n  byte counter;\n  uint uCounter;\n  int iVar;\n  \n  counter = 0;\n  while( true ) {\n    uCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataAddr + 0xb) >> 1 <= uCounter) break;\n    currentAddr = (uCounter * 2 + 3 & 0xff) + dataAddr;\n    iVar = *(int *)(dataAddr + 0x4c);\n    result = FUN_000815f8(*(undefined *)(currentAddr + 9),*(undefined *)(currentAddr + 10),currentAddr,\n                         *(byte *)(dataAddr + 0xb),param4);\n    *(undefined2 *)(iVar + uCounter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataAddr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "currentAddr",
                "bVar3": "counter",
                "uVar4": "uCounter",
                "iVar5": "iVar"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_process_data_0008043e",
            "code": "\nint checkAndProcessData_0008043e(int **data)\n\n{\n  char result;\n  uint status;\n  int *thunkResult;\n  int checkResult;\n  uint length;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    status = (**(code **)(**data + 8))();\n    length = status & 0xff;\n  }\n  thunkResult = (int *)thunk_FUN_00081714();\n  if (dataThreshold < thunkResult) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < length) {\n    FUN_000801b0(data);\n    checkResult = FUN_000803d4(data);\n    if (checkResult == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        FUN_00080410(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)checkResult;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_process_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "status",
                "piVar3": "thunkResult",
                "iVar4": "checkResult",
                "unaff_r6": "length",
                "param_1[0x17]": "dataThreshold"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_configuration_000804a8",
            "code": "\nundefined8 initialize_system_configuration_000804a8(void)\n\n{\n  int result;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  result = thunk_FUN_00081714();\n  DAT_200709e0 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070a48 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070934 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    perform_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_configuration_000804a8",
                "iVar1": "result",
                "software_interrupt": "perform_software_interrupt"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int index;\n  uint *ptr1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      index = thunk_FUN_00081714();\n      DAT_200708c0 = index + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    temp1 = FUN_0008189c(DAT_20070940);\n    temp2 = FUN_00081730(temp1,DAT_200709c8);\n    temp1 = DAT_200708c4;\n    DAT_20070930 = temp2;\n    temp3 = FUN_00081734(temp2,DAT_200708c4);\n    temp3 = FUN_00081944(temp3,DAT_2007094c);\n    temp3 = FUN_00081734(temp3,DAT_20070914);\n    DAT_2007094c = temp3;\n    temp1 = FUN_00081730(temp2,temp1);\n    temp1 = FUN_00081944(temp1,DAT_200709c4);\n    temp1 = FUN_00081730(temp1,DAT_2007096c);\n    DAT_200709c4 = temp1;\n    temp4 = FUN_00081944(temp2,DAT_20070a4c);\n    temp4 = FUN_00081734(temp4,temp3);\n    FUN_00081734(temp4,temp1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = temp2;\n    DAT_20070914 = temp3;\n    DAT_2007096c = temp1;\n    index = thunk_FUN_00081714();\n    DAT_200709e0 = index + DAT_20070970;\n  }\n  temp1 = FUN_0008189c(DAT_20070970);\n  index = FUN_00081ca8(DAT_2007091c,temp1);\n  if (index != 0) {\n    DAT_2007091c = temp1;\n  }\n  index = FUN_00081c94(DAT_2007091c,0);\n  if (index != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "index",
                "puVar7": "ptr1",
                "puVar8": "ptr2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_system_00080c0c",
            "code": "\nvoid initializeSystem_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_system_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "initialize_components_00080ce0",
            "code": "\nvoid initializeComponents_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "initialize_components_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_memory_00080d2e",
            "code": "\nvoid updateMemory_00080d2e(int baseAddress,undefined4 operation,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_memory_00080d2e",
                "param_1": "baseAddress",
                "param_2": "operation",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "assign_values_to_indices_00080d54",
            "code": "\nvoid assignValuesToIndices_00080d54(undefined4 *outputArray,undefined4 value,uint flag)\n\n{\n  bool isFlagNegative;\n  \n  isFlagNegative = (int)(flag << 0x1f) < 0;\n  outputArray[0x11] = value;\n  if (isFlagNegative) {\n    outputArray[0x19] = value;\n  }\n  if (!isFlagNegative) {\n    outputArray[0x18] = value;\n  }\n  isFlagNegative = (flag & 10) != 0;\n  if (isFlagNegative) {\n    outputArray[8] = value;\n  }\n  if (!isFlagNegative) {\n    outputArray[9] = value;\n  }\n  if (((int)(flag << 0x1e) < 0) || ((int)(flag << 0x1c) < 0)) {\n    outputArray[0x20] = value;\n  }\n  outputArray[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "assign_values_to_indices_00080d54",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "flag",
                "bVar1": "isFlagNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_values_00080d7a",
            "code": "\nvoid setValues_00080d7a(undefined4 *result,undefined4 newValue,int check1,int check2,int check3)\n\n{\n  result[0x11] = newValue;\n  if (check3 == 0) {\n    result[0x18] = newValue;\n  }\n  else {\n    result[0x19] = newValue;\n  }\n  if (check2 == 0) {\n    result[0x15] = newValue;\n  }\n  else {\n    result[0x14] = newValue;\n  }\n  if (check1 == 0) {\n    result[0xd] = newValue;\n  }\n  else {\n    result[0xc] = newValue;\n  }\n  result[4] = newValue;\n  *result = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_values_00080d7a",
                "param_1": "result",
                "param_2": "newValue",
                "param_3": "check1",
                "param_4": "check2",
                "param_5": "check3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_00080da0",
            "code": "\nundefined4 updateParameter_00080da0(int device,int type,undefined4 newValue,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    FUN_00080d2e(device,type,newValue);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_00080d54(device,newValue,flag,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(device,newValue,type == 5,(flag << 0x1d) >> 0x1f,flag & 1,type,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_00080da0",
                "param_1": "device",
                "param_2": "type",
                "param_3": "newValue",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint checkBitwiseIntersection_00080e04(int input,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "input",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "validate_param_00080e18",
            "code": "\n\n\nundefined4 validate_param_00080e18(uint param)\n\n{\n  uint mask;\n  \n  if (param < 0x2d) {\n    if (param < 0x20) {\n      mask = 1 << (param & 0xff);\n      if ((mask & _DAT_400e0618) != mask) {\n        _DAT_400e0610 = mask;\n      }\n    }\n    else {\n      mask = 1 << (param - 0x20 & 0xff);\n      if ((mask & _DAT_400e0708) != mask) {\n        _DAT_400e0700 = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "validate_param_00080e18",
                "param_1": "param",
                "uVar1": "mask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_data_00080e9c",
            "code": "\n\n\nvoid initializeData_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_data_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *result,uint total_size,int block_size,int threshold_multiplier)\n\n{\n  uint num_blocks;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  num_blocks = total_size / (uint)(block_size * 2);\n  if (total_size == block_size * 2 * num_blocks) {\n    num_blocks = num_blocks - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(threshold_multiplier * (int)(((ulonglong)total_size / (ulonglong)((num_blocks + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (num_blocks & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "result",
                "param_2": "total_size",
                "param_3": "block_size",
                "param_4": "threshold_multiplier",
                "uVar1": "num_blocks",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_bitwise_operation_00081034",
            "code": "\nvoid updateBitwiseOperation_00081034(int inputAddress,uint valueToSet,uint bitMask)\n\n{\n  *(uint *)(inputAddress + 4) = valueToSet | *(uint *)(inputAddress + 4) | (bitMask & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_bitwise_operation_00081034",
                "param_1": "inputAddress",
                "param_2": "valueToSet",
                "param_3": "bitMask"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_register_00081042",
            "code": "\nvoid updateRegister_00081042(int registerAddress,uint valueToSet,uint mask1,uint mask2)\n\n{\n  *(uint *)(registerAddress + 4) =\n       mask1 | *(uint *)(registerAddress + 4) | (valueToSet & 0xf) << 0x18 | (mask2 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_register_00081042",
                "param_1": "registerAddress",
                "param_2": "valueToSet",
                "param_3": "mask1",
                "param_4": "mask2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_00081066",
            "code": "\nvoid setDefaultValue_00081066(int objectAddress)\n\n{\n  *(undefined4 *)(objectAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "objectAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "get_return_value_00081184",
            "code": "\nundefined4 getReturnValue_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "get_return_value_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int input)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = input + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_return_value_000811ae",
            "code": "\nuint32 getReturnValue_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_return_value_000811ae",
                "undefined4": "uint32"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 reservedMemory,int memoryPointer)\n\n{\n  *(undefined4 *)(memoryPointer + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "reservedMemory",
                "param_2": "memoryPointer"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_one_000811be",
            "code": "\nint getOne_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_one_000811be",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_application_000811c2",
            "code": "\nundefined4 initialize_application_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_application_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_000811c6",
            "code": "\nundefined4 initialize_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_to_memory_000811cc",
            "code": "\n\n\nuint copyBytesToMemory_000811cc(undefined4 param1,int sourceAddress,uint numBytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)numBytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(sourceAddress + index);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_memory_000811cc",
                "param_1": "param1",
                "param_2": "sourceAddress",
                "param_3": "numBytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_data_thunk_00081714",
            "code": "\nundefined4 getGlobalData_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_data_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_data_00081210",
            "code": "\n\n\nint process_data_00081210(int input_param,int mode)\n\n{\n  int result;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  byte value1;\n  byte value2;\n  int temp4;\n  int temp5;\n  \n  result = input_param;\n  if ((&DAT_00084d24)[input_param * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input_param] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[input_param * 0x1c]);\n    }\n    value2 = (&DAT_20070d94)[input_param];\n    value1 = value2 & 0xf;\n    if ((value1 < 3) && (value2 != 0)) {\n      if (value1 == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (value1 == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (value1 == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = input_param * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        value2 = (&DAT_20070d94)[input_param] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = input_param * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        value2 = (&DAT_20070d94)[input_param] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input_param] = value2;\n      return result;\n    }\n    temp4 = input_param * 0x1c;\n    temp5 = *(int *)(&DAT_00084d18 + temp4);\n    if (value2 >> 4 == 0) {\n      temp2 = 4;\n    }\n    else {\n      temp2 = 5;\n    }\n    result = FUN_00080da0(temp5,temp2,*(undefined4 *)(&DAT_00084d1c + temp4),\n                         *(undefined4 *)(&DAT_00084d28 + temp4));\n    (&DAT_20070d94)[input_param] = (&DAT_20070d94)[input_param] & 0xf0 | 3;\n    if (*(int *)(temp5 + 0x18) == -1) {\n      temp1 = *(uint *)(&DAT_00084d20 + temp4);\n      if (0x2c < temp1) {\n        return 1;\n      }\n      if (temp1 < 0x20) {\n        temp1 = 1 << (temp1 & 0xff);\n        temp3 = _DAT_400e0618 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0614 = temp3;\n        }\n      }\n      else {\n        temp1 = 1 << (temp1 - 0x20 & 0xff);\n        temp3 = _DAT_400e0708 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0704 = temp3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "input_param",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "bVar5": "value1",
                "bVar6": "value2",
                "iVar7": "temp4",
                "iVar8": "temp5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_configuration_00081318",
            "code": "\nvoid updateConfiguration_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int config;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    config = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(config,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(config + 100) = data;\n        return;\n      }\n      *(undefined4 *)(config + 0x60) = data;\n      return;\n    }\n    FUN_00080d7a(config,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_configuration_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "config"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_zero_r_info_00081388",
            "code": "\nvoid execute_if_zero_r_info_00081388(void)\n\n{\n  if ((ELF32_Rel_ARRAY[6].relocation_info != 0xffffffff) &&\n     (ELF32_Rel_ARRAY[6].relocation_info = ELF32_Rel_ARRAY[6].relocation_info - 1,\n     ELF32_Rel_ARRAY[6].relocation_info == 0)) {\n    (*(code_function *)((int)&ELF32_Rel_ARRAY[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_zero_r_info_00081388",
                "Elf32_Rel_ARRAY_20070000": "ELF32_Rel_ARRAY",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset",
                "code": "code_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_param_000813a8",
            "code": "\nint initializeParam_000813a8(int param)\n\n{\n  FUN_00082504(param,0,0x80);\n  *(undefined4 *)(param + 0x80) = 0;\n  *(undefined4 *)(param + 0x84) = 0;\n  return param;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_param_000813a8",
                "param_1": "param"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_pointer_value_000813c2",
            "code": "\nvoid updatePointerValue_000813c2(int dataPointer,undefined newValue)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *(int *)(dataPointer + 0x80) + 1U & 0x7f;\n  if (updatedValue != *(uint *)(dataPointer + 0x84)) {\n    *(undefined *)(dataPointer + *(int *)(dataPointer + 0x80)) = newValue;\n    *(uint *)(dataPointer + 0x80) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_pointer_value_000813c2",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPtr,undefined4 newValue)\n\n{\n  int metadataPtr;\n  uint currentIndex;\n  \n  metadataPtr = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(metadataPtr + 0x84) == *(int *)(metadataPtr + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    currentIndex = *(int *)(metadataPtr + 0x80) + 1U & 0x8000007f;\n    if ((int)currentIndex < 0) {\n      currentIndex = (currentIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(metadataPtr + 0x84) == currentIndex);\n    *(char *)(metadataPtr + *(int *)(metadataPtr + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = currentIndex;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "metadataPtr",
                "uVar2": "currentIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *parameters,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value2;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value3;\n  parameters[4] = value5;\n  parameters[8] = value4;\n  parameters[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_function_00081508",
            "code": "\nvoid initializeFunction_00081508(int inputValue1,uint inputValue2,undefined4 inputValue3)\n\n{\n  int localVariable1;\n  undefined4 *pointerVariable1;\n  \n  FUN_00080e18(*(undefined4 *)(inputValue1 + 0x20));\n  pointerVariable1 = *(undefined4 **)(inputValue1 + 0x18);\n  pointerVariable1[0x48] = 0x202;\n  *pointerVariable1 = 0xac;\n  pointerVariable1[1] = inputValue3;\n  pointerVariable1[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / inputValue2 >> 4;\n  pointerVariable1[3] = 0xffffffff;\n  pointerVariable1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(inputValue1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(inputValue1 + 0x1c) & 0x1f);\n  localVariable1 = *(int *)(inputValue1 + 0x10);\n  *(undefined4 *)(localVariable1 + 0x84) = 0;\n  *(undefined4 *)(localVariable1 + 0x80) = 0;\n  localVariable1 = *(int *)(inputValue1 + 0x14);\n  *(undefined4 *)(localVariable1 + 0x84) = 0;\n  *(undefined4 *)(localVariable1 + 0x80) = 0;\n  *pointerVariable1 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_function_00081508",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "iVar1": "localVariable1",
                "puVar2": "pointerVariable1"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "assign_function_pointer_000815d4",
            "code": "\nundefined4 * assignFunctionPointer_000815d4(undefined4 *pointer,undefined4 value)\n\n{\n  FUN_000814e4();\n  *pointer = &PTR_FUN_00081454_1_000857d8;\n  pointer[9] = value;\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "assign_function_pointer_000815d4",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int inputValue,uint outputValue)\n\n{\n  return outputValue | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "inputValue",
                "param_2": "outputValue"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_function_000815fe",
            "code": "\nundefined4 * executeFunction_000815fe(undefined4 *input)\n\n{\n  FUN_00081e04(*input);\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_function_000815fe",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_and_clear_0008160c",
            "code": "\nvoid resetAndClear_0008160c(int *array)\n\n{\n  if (*array != 0) {\n    FUN_00081e04();\n  }\n  *array = 0;\n  array[2] = 0;\n  array[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_and_clear_0008160c",
                "param_1": "array"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_parameter_and_return_00081622",
            "code": "\nint updateParameterAndReturn_00081622(int *paramPointer,int paramValue,undefined4 firstValue,undefined4 secondValue)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_000825a0(*paramPointer,paramValue + 1,firstValue,secondValue,secondValue);\n  if (returnValue != 0) {\n    *paramPointer = returnValue;\n    paramPointer[1] = paramValue;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_parameter_and_return_00081622",
                "param_1": "paramPointer",
                "param_2": "paramValue",
                "param_3": "firstValue",
                "param_4": "secondValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_0008163a",
            "code": "\nundefined4 checkAndUpdate_0008163a(int *ptrArray,uint limit)\n\n{\n  int result;\n  \n  if ((*ptrArray == 0) || ((uint)ptrArray[1] < limit)) {\n    result = FUN_00081622(ptrArray);\n    if (result == 0) {\n      return 0;\n    }\n    if (ptrArray[2] == 0) {\n      *(undefined *)*ptrArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_0008163a",
                "param_1": "ptrArray",
                "param_2": "limit",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "check_and_update_param_0008165c",
            "code": "\nundefined4 * checkAndUpdateParam_0008165c(undefined4 *paramArray,undefined4 param2,undefined4 param3)\n\n{\n  int result;\n  \n  result = FUN_0008163a(paramArray,param3);\n  if (result == 0) {\n    FUN_0008160c(paramArray);\n  }\n  else {\n    paramArray[2] = param3;\n    FUN_00082994(*paramArray,param2);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "check_and_update_param_0008165c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_00081682",
            "code": "\nundefined4 * initializeParam_00081682(undefined4 *paramArray,int inputParam)\n\n{\n  undefined4 result;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputParam != 0) {\n    result = FUN_00082a50(inputParam);\n    FUN_0008165c(paramArray,inputParam,result);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_00081682",
                "param_1": "paramArray",
                "param_2": "inputParam",
                "uVar1": "result",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "start_infinite_loop_000816a8",
            "code": "\nvoid startInfiniteLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "start_infinite_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_flag_000816d4",
            "code": "\n\n\nvoid initializeFlag_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_flag_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_data_00081714",
            "code": "\nundefined4 getGlobalData_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_data_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculate_float_00081730(uint input_val,uint float_val,undefined4 unused_var,uint shift_val)\n\n{\n  int shifted_val;\n  int shifted_val2;\n  uint xor_val;\n  uint abs_val1;\n  uint abs_val2;\n  uint shift_sum;\n  uint compare_val;\n  bool is_equal;\n  \n  xor_val = float_val ^ 0x80000000;\n  abs_val2 = input_val << 1;\n  is_equal = abs_val2 == 0;\n  if (!is_equal) {\n    shift_val = float_val << 1;\n    is_equal = shift_val == 0;\n  }\n  if (!is_equal) {\n    is_equal = abs_val2 == shift_val;\n  }\n  shifted_val = (int)abs_val2 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_val == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)shift_val >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_val2 = (int)(float_val << 1) >> 0x18;\n    if (shifted_val == -1 || shifted_val2 == -1) {\n      abs_val2 = xor_val;\n      if (shifted_val == -1) {\n        abs_val2 = input_val;\n      }\n      if (shifted_val != -1 || shifted_val2 != -1) {\n        xor_val = abs_val2;\n      }\n      is_equal = (abs_val2 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (xor_val & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = abs_val2 == xor_val;\n      }\n      if (!is_equal) {\n        abs_val2 = abs_val2 | 0x400000;\n      }\n      return abs_val2;\n    }\n    if (((input_val ^ xor_val) & 0x7fffffff) != 0) {\n      if (abs_val2 == 0) {\n        input_val = xor_val;\n      }\n      return input_val;\n    }\n    if (input_val != xor_val) {\n      return 0;\n    }\n    if ((abs_val2 & 0xff000000) == 0) {\n      xor_val = input_val << 1;\n      if ((input_val & 0x80000000) != 0) {\n        xor_val = xor_val | 0x80000000;\n      }\n      return xor_val;\n    }\n    if (abs_val2 < 0xfe000000) {\n      return input_val + 0x800000;\n    }\n    input_val = input_val & 0x80000000;\nLAB_0008186a:\n    return input_val | 0x7f800000;\n  }\n  abs_val2 = abs_val2 >> 0x18;\n  shift_val = shift_val >> 0x18;\n  compare_val = shift_val - abs_val2;\n  is_equal = compare_val != 0;\n  shift_sum = abs_val2;\n  if (is_equal && abs_val2 <= shift_val) {\n    shift_sum = abs_val2 + compare_val;\n  }\n  if (is_equal && abs_val2 <= shift_val) {\n    xor_val = xor_val ^ input_val;\n  }\n  if (is_equal && abs_val2 <= shift_val) {\n    input_val = input_val ^ xor_val;\n  }\n  if (is_equal && abs_val2 <= shift_val) {\n    xor_val = xor_val ^ input_val;\n  }\n  if (shift_val < abs_val2) {\n    compare_val = -compare_val;\n  }\n  if (0x19 < compare_val) {\n    return input_val;\n  }\n  abs_val2 = input_val & 0xffffff | 0x800000;\n  if ((input_val & 0x80000000) != 0) {\n    abs_val2 = -abs_val2;\n  }\n  abs_val1 = xor_val & 0xffffff | 0x800000;\n  if ((xor_val & 0x80000000) != 0) {\n    abs_val1 = -abs_val1;\n  }\n  if (shift_sum == compare_val) {\n    abs_val1 = abs_val1 ^ 0x800000;\n    if (shift_sum == 0) {\n      abs_val2 = abs_val2 ^ 0x800000;\n      shift_sum = 1;\n    }\n    else {\n      compare_val = compare_val - 1;\n    }\n  }\n  abs_val2 = abs_val2 + ((int)abs_val1 >> (compare_val & 0xff));\n  abs_val1 = abs_val1 << (0x20 - compare_val & 0xff);\n  input_val = abs_val2 & 0x80000000;\n  if ((int)abs_val2 < 0) {\n    is_equal = abs_val1 != 0;\n    abs_val1 = -abs_val1;\n    abs_val2 = -abs_val2 - (uint)is_equal;\n  }\n  if (abs_val2 < 0x800000) {\n    xor_val = abs_val1 & 0x80000000;\n    abs_val1 = abs_val1 << 1;\n    abs_val2 = abs_val2 * 2 + (uint)(xor_val != 0);\n    xor_val = shift_sum - 2;\n    if ((abs_val2 & 0x800000) == 0) {\n      compare_val = LZCOUNT(abs_val2) - 8;\n      abs_val2 = abs_val2 << (compare_val & 0xff);\n      if ((int)xor_val < (int)compare_val) {\n        abs_val2 = abs_val2 >> (-(xor_val - compare_val) & 0xff);\n      }\n      else {\n        abs_val2 = abs_val2 + (xor_val - compare_val) * 0x800000;\n      }\n      return abs_val2 | input_val;\n    }\n  }\n  else {\n    xor_val = shift_sum - 1;\n    if (0xffffff < abs_val2) {\n      xor_val = abs_val2 & 1;\n      abs_val2 = abs_val2 >> 1;\n      abs_val1 = (uint)(xor_val != 0) << 0x1f | abs_val1 >> 1;\n      xor_val = shift_sum;\n      if (0xfd < shift_sum) goto LAB_0008186a;\n    }\n  }\n  abs_val2 = abs_val2 + xor_val * 0x800000 + (uint)(0x7fffffff < abs_val1);\n  if (abs_val1 == 0x80000000) {\n    abs_val2 = abs_val2 & 0xfffffffe;\n  }\n  return abs_val2 | input_val;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input_val",
                "param_2": "float_val",
                "param_3": "unused_var",
                "param_4": "shift_val",
                "iVar1": "shifted_val",
                "iVar2": "shifted_val2",
                "uVar3": "xor_val",
                "uVar4": "abs_val1",
                "uVar5": "abs_val2",
                "uVar6": "shift_sum",
                "uVar7": "compare_val",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint number1,uint number2,undefined4 flags,uint result)\n\n{\n  int shiftedNumber1;\n  int shiftedNumber2;\n  uint mantissa1;\n  uint mantissa2;\n  uint exponent1;\n  uint exponent2;\n  bool equalExponent;\n  \n  mantissa2 = number1 << 1;\n  equalExponent = mantissa2 == 0;\n  if (!equalExponent) {\n    result = number2 << 1;\n    equalExponent = result == 0;\n  }\n  if (!equalExponent) {\n    equalExponent = mantissa2 == result;\n  }\n  shiftedNumber1 = (int)mantissa2 >> 0x18;\n  if (!equalExponent) {\n    equalExponent = shiftedNumber1 == -1;\n  }\n  if (!equalExponent) {\n    equalExponent = (int)result >> 0x18 == -1;\n  }\n  if (equalExponent) {\n    shiftedNumber2 = (int)(number2 << 1) >> 0x18;\n    if (shiftedNumber1 == -1 || shiftedNumber2 == -1) {\n      mantissa2 = number2;\n      if (shiftedNumber1 == -1) {\n        mantissa2 = number1;\n      }\n      if (shiftedNumber1 != -1 || shiftedNumber2 != -1) {\n        number2 = mantissa2;\n      }\n      equalExponent = (mantissa2 & 0x7fffff) == 0;\n      if (equalExponent) {\n        equalExponent = (number2 & 0x7fffff) == 0;\n      }\n      if (equalExponent) {\n        equalExponent = mantissa2 == number2;\n      }\n      if (!equalExponent) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((number1 ^ number2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        number1 = number2;\n      }\n      return number1;\n    }\n    if (number1 != number2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = number1 << 1;\n      if ((number1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return number1 + 0x800000;\n    }\n    number1 = number1 & 0x80000000;\nLAB_0008186a:\n    return number1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  result = result >> 0x18;\n  exponent2 = result - mantissa2;\n  equalExponent = exponent2 != 0;\n  exponent1 = mantissa2;\n  if (equalExponent && mantissa2 <= result) {\n    exponent1 = mantissa2 + exponent2;\n  }\n  if (equalExponent && mantissa2 <= result) {\n    number2 = number2 ^ number1;\n  }\n  if (equalExponent && mantissa2 <= result) {\n    number1 = number1 ^ number2;\n  }\n  if (equalExponent && mantissa2 <= result) {\n    number2 = number2 ^ number1;\n  }\n  if (result < mantissa2) {\n    exponent2 = -exponent2;\n  }\n  if (0x19 < exponent2) {\n    return number1;\n  }\n  mantissa2 = number1 & 0xffffff | 0x800000;\n  if ((number1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = number2 & 0xffffff | 0x800000;\n  if ((number2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (exponent1 == exponent2) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (exponent1 == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      exponent1 = 1;\n    }\n    else {\n      exponent2 = exponent2 - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (exponent2 & 0xff));\n  mantissa1 = mantissa1 << (0x20 - exponent2 & 0xff);\n  number1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    equalExponent = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)equalExponent;\n  }\n  if (mantissa2 < 0x800000) {\n    exponent2 = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(exponent2 != 0);\n    exponent2 = exponent1 - 2;\n    if ((mantissa2 & 0x800000) == 0) {\n      exponent1 = LZCOUNT(mantissa2) - 8;\n      mantissa2 = mantissa2 << (exponent1 & 0xff);\n      if ((int)exponent2 < (int)exponent1) {\n        mantissa2 = mantissa2 >> (-(exponent2 - exponent1) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (exponent2 - exponent1) * 0x800000;\n      }\n      return mantissa2 | number1;\n    }\n  }\n  else {\n    exponent2 = exponent1 - 1;\n    if (0xffffff < mantissa2) {\n      exponent2 = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(exponent2 != 0) << 0x1f | mantissa1 >> 1;\n      exponent2 = exponent1;\n      if (0xfd < exponent1) goto LAB_0008186a;\n    }\n  }\n  mantissa2 = mantissa2 + exponent2 * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | number1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "flags",
                "param_4": "result",
                "iVar1": "shiftedNumber1",
                "iVar2": "shiftedNumber2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "exponent1",
                "uVar6": "exponent2",
                "bVar7": "equalExponent"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "count_bitwise_sum_00081894",
            "code": "\nuint countBitwiseSum_00081894(uint input)\n\n{\n  uint result;\n  uint shiftFactor;\n  int baseValue;\n  uint comparisonValue;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = LZCOUNT(input);\n  shiftFactor = result - 8;\n  baseValue = shiftFactor * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    comparisonValue = 0 << (shiftFactor & 0xff);\n    result = baseValue + (input << (shiftFactor & 0xff)) +\n            (0U >> (0x20 - shiftFactor & 0xff)) + (uint)(0x7fffffff < comparisonValue);\n    if (comparisonValue == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shiftFactor = input << result + 0x18;\n  result = baseValue + ((input >> (0x20 - (result + 0x18) & 0xff)) - ((int)shiftFactor >> 0x1f));\n  if ((shiftFactor & 0x7fffffff) == 0) {\n    result = result & ~(shiftFactor >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081894": "count_bitwise_sum_00081894",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shiftFactor",
                "iVar3": "baseValue",
                "uVar4": "comparisonValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "decode_unsigned_integer_0008189c",
            "code": "\nuint decode_unsigned_integer_0008189c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int adjusted_value;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_amount = leading_zeros - 8;\n  adjusted_value = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = adjusted_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_bit = adjusted_value + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "decode_unsigned_integer_0008189c",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "adjusted_value",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_value_00081944",
            "code": "\nuint calculateFloatingPointValue_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint shift1;\n  int sum;\n  int difference;\n  uint lower32Bits;\n  int remainingShift;\n  uint combinedInput;\n  bool isZero;\n  bool isCarry;\n  \n  shift1 = input1 >> 0x17 & 0xff;\n  isZero = shift1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = shift1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      combinedInput = result;\n      if (((isZero) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (combinedInput = input2, (input2 & 0x7fffff) != 0)))) {\n        return combinedInput | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = shift1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      shift1 = shift1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shift1 + param4;\n  combinedInput = input1 ^ input2;\n  shift1 = input1 << 9;\n  isZero = shift1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (shift1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = combinedInput & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isCarry = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    isZero = difference == 0;\n    remainingShift = difference;\n    if (!isZero && 0x7e < sum) {\n      isCarry = SBORROW4(0xff,difference);\n      remainingShift = 0xff - difference;\n      isZero = difference == 0xff;\n    }\n    if (!isZero && remainingShift < 0 == isCarry) {\n      result = result | difference * 0x800000;\n    }\n    if (!isZero && remainingShift < 0 == isCarry) {\n      return result;\n    }\n    result = result | 0x800000;\n    lower32Bits = 0;\n    isCarry = SBORROW4(difference,1);\n    combinedInput = sum - 0x80;\n    isZero = combinedInput == 0;\n    shift1 = combinedInput;\n  }\n  else {\n    product = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    lower32Bits = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | lower32Bits >> 0x1f;\n      lower32Bits = lower32Bits << 1;\n    }\n    result = combinedInput & 0x80000000 | result;\n    combinedInput = (sum + -0x7f) - (uint)isZero;\n    isCarry = SBORROW4(combinedInput,0xfd);\n    isZero = combinedInput == 0xfd;\n    shift1 = combinedInput - 0xfd;\n    if (combinedInput < 0xfe) {\n      result = result + combinedInput * 0x800000 + (uint)(0x7fffffff < lower32Bits);\n      if (lower32Bits == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)shift1 < 0 != isCarry) {\n    isZero = (int)(combinedInput + 0x19) < 0;\n    if (combinedInput == 0xffffffe7 || isZero != SCARRY4(combinedInput,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (combinedInput != 0xffffffe7 && isZero == SCARRY4(combinedInput,0x19)) {\n      shift1 = (result << 1) >> (-combinedInput & 0xff);\n      combinedInput = result << (combinedInput + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((lower32Bits | combinedInput << 1) == 0) {\n        shift1 = shift1 & ~(combinedInput >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_value_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shift1",
                "iVar4": "sum",
                "iVar5": "difference",
                "uVar6": "lower32Bits",
                "iVar7": "remainingShift",
                "uVar8": "combinedInput",
                "bVar9": "isZero",
                "bVar10": "isCarry"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculation_result_00081bf4",
            "code": "\nuint calculationResult_00081bf4(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint input1Twice;\n  uint input2Twice;\n  uint combinedInput;\n  bool isCombinedInputZero;\n  \n  input1Twice = input1 * 2;\n  input2Twice = input2 * 2;\n  if (((int)input1Twice >> 0x18 == -1 || (int)input2Twice >> 0x18 == -1) &&\n     ((((int)input1Twice >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2Twice >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedInput = input1Twice | input2 & 0x7fffffff;\n  isCombinedInputZero = combinedInput == 0;\n  if (!isCombinedInputZero) {\n    combinedInput = input1 ^ input2;\n    isCombinedInputZero = combinedInput == 0;\n  }\n  isNegative = -1 < combinedInputSign;\n  if (isNegative) {\n    input1 = input1Twice + input2 * -2;\n    isCombinedInputZero = input1 == 0;\n  }\n  if ((isNegative && input2Twice <= input1Twice) && !isCombinedInputZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || input2Twice > input1Twice) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isCombinedInputZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculation_result_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isNegative",
                "uVar2": "input1Twice",
                "uVar3": "input2Twice",
                "uVar4": "combinedInput",
                "bVar5": "isCombinedInputZero",
                "(int)uVar4": "combinedInputSign"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "execute_function_00081c54",
            "code": "\nvoid executeFunction_00081c54(undefined4 executionParams,undefined4 functionAddress)\n\n{\n  FUN_00081c5c(functionAddress,executionParams);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "execute_function_00081c54",
                "param_1": "executionParams",
                "param_2": "functionAddress"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_param_00081c5c",
            "code": "\nundefined8 concatenate_param_00081c5c(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_param_00081c5c",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_cy_zr_00081c94",
            "code": "\nbool check_CY_ZR_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_cy_zr_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "should_execute_00081ca8",
            "code": "\nbool shouldExecute_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  FUN_00081c54();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "should_execute_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "decode_and_scale_00081cd0",
            "code": "\nuint decode_and_scale_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "decode_and_scale_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "decode_unsigned_integer_00081d1c",
            "code": "\nuint decodeUnsignedInteger_00081d1c(uint inputValue)\n\n{\n  uint shiftCount;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftCount = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftCount) {\n    return (inputValue << 8 | 0x80000000) >> (shiftCount & 0xff);\n  }\n  if ((shiftCount == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "decode_unsigned_integer_00081d1c",
                "param_1": "inputValue",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword param_1,dword param_2,dword param_3)\n\n{\n  dword *ptrRelocationEntry;\n  uint index;\n  uint flag;\n  \n  if (relocationEntries[48].r_offset == 0) {\n    relocationEntries[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocationEntries[48].r_offset + 4);\n  ptrRelocationEntry = (dword *)relocationEntries[48].r_offset;\n  if (0x1f < (int)index) {\n    ptrRelocationEntry = (dword *)FUN_00081df4(400);\n    if (ptrRelocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *ptrRelocationEntry = relocationEntries[48].r_offset;\n    ptrRelocationEntry[1] = 0;\n    index = 0;\n    relocationEntries[48].r_offset = (dword)ptrRelocationEntry;\n    ptrRelocationEntry[0x62] = 0;\n    ptrRelocationEntry[99] = 0;\n  }\n  flag = 1 << (index & 0xff);\n  ptrRelocationEntry[index + 0x22] = param_1;\n  ptrRelocationEntry[0x62] = ptrRelocationEntry[0x62] | flag;\n  ptrRelocationEntry[index + 0x42] = param_3;\n  ptrRelocationEntry[99] = flag | ptrRelocationEntry[99];\n  ptrRelocationEntry[1] = index + 1;\n  ptrRelocationEntry[index + 2] = param_2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "Elf32_Rel_ARRAY_20070000": "relocationEntries",
                "pdVar1": "ptrRelocationEntry",
                "uVar2": "index",
                "uVar3": "flag"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctions_00081d7c(void)\n\n{\n  int counter;\n  code **functionArray;\n  \n  FUNC_00085858();\n  functionArray = (code **)0x85860;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    functionArray = functionArray + 1;\n    (**functionArray)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "counter",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "update_relocation_offset_00081df4",
            "code": "\nvoid updateRelocationOffset_00081df4(undefined4 offset)\n\n{\n  FUN_00081e14(relocationArray[140].r_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "update_relocation_offset_00081df4",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocation_00081e04",
            "code": "\nvoid executeRelocation_00081e04(undefined4 data)\n\n{\n  FUN_00083d9c(relocationTable[140].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocation_00081e04",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_chunk_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_chunk_00081e14(undefined4 *output_pointer,uint size)\n\n{\n  dword rel_entry;\n  int entry;\n  uint offset;\n  uint aligned_size;\n  int prev;\n  uint remaining_size;\n  dword next_entry;\n  uint entry_address;\n  int next;\n  undefined *entry_ptr;\n  dword prev_entry;\n  dword curr_entry;\n  int index;\n  dword *rel_entry_ptr;\n  uint aligned_size_or_constant;\n  undefined *new_entry_ptr;\n  dword *palignment_shift;\n  uint uVar18;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size_or_constant = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size_or_constant = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size_or_constant < 0) || (aligned_size_or_constant < size)) {\nLAB_00081e7a:\n      *output_pointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_pointer);\n  rel_entry = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size_or_constant < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size_or_constant);\n    if ((index != aligned_size_or_constant + 0x20070464) ||\n       (entry = index + 8, index = *(int *)(index + 0x14), entry != index)) {\n      prev = *(int *)(index + 0xc);\n      next = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size_or_constant = *(uint *)(next + 4);\n      entry = *(int *)(index + 8);\n      *(int *)(entry + 0xc) = prev;\n      *(int *)(prev + 8) = entry;\n      *(uint *)(next + 4) = aligned_size_or_constant | 1;\n      FUNC_0008259c(output_pointer);\n      return (int *)(index + 8);\n    }\n    uVar18 = (aligned_size_or_constant >> 3) + 2;\n  }\n  else {\n    uVar18 = aligned_size_or_constant >> 9;\n    if (uVar18 == 0) {\n      entry = 0x7e;\n      index = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      index = (aligned_size_or_constant >> 6) + 0x38;\n      entry = index * 2;\n    }\n    else if (uVar18 < 0x15) {\n      index = uVar18 + 0x5b;\n      entry = index * 2;\n    }\n    else if (uVar18 < 0x55) {\n      index = (aligned_size_or_constant >> 0xc) + 0x6e;\n      entry = index * 2;\n    }\n    else if (uVar18 < 0x155) {\n      index = (aligned_size_or_constant >> 0xf) + 0x77;\n      entry = index * 2;\n    }\n    else if (uVar18 < 0x555) {\n      index = (aligned_size_or_constant >> 0x12) + 0x7c;\n      entry = index * 2;\n    }\n    else {\n      entry = 0xfc;\n      index = 0x7e;\n    }\n    for (next_entry = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[entry]; entry * 4 + 0x20070464U != next_entry\n        ; next_entry = *(dword *)(next_entry + 0xc)) {\n      uVar18 = *(uint *)(next_entry + 4) & 0xfffffffc;\n      prev = uVar18 - aligned_size_or_constant;\n      if (0xf < prev) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < prev) {\n        entry = uVar18 + next_entry;\n        aligned_size_or_constant = *(uint *)(entry + 4);\n        prev = *(int *)(next_entry + 0xc);\n        index = *(int *)(next_entry + 8);\n        *(int *)(index + 0xc) = prev;\n        *(int *)(prev + 8) = index;\n        *(uint *)(entry + 4) = aligned_size_or_constant | 1;\n        FUNC_0008259c(output_pointer);\n        return (int *)(next_entry + 8);\n      }\n    }\n    uVar18 = index + 1;\n  }\n  next_entry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    offset = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    aligned_size = offset & 0xfffffffc;\n    remaining_size = aligned_size - aligned_size_or_constant;\n    if (0xf < (int)remaining_size) {\n      next_entry = aligned_size_or_constant + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size_or_constant | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = next_entry;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = next_entry;\n      *(undefined4 *)(next_entry + 0xc) = 0x2007046c;\n      *(undefined4 *)(next_entry + 8) = 0x2007046c;\n      *(uint *)(next_entry + 4) = remaining_size | 1;\n      *(uint *)(next_entry + remaining_size) = remaining_size;\n      FUNC_0008259c(output_pointer);\n      return (int *)(rel_entry + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)remaining_size) {\n      *(uint *)(aligned_size + rel_entry + 4) = *(uint *)(aligned_size + rel_entry + 4) | 1;\n      FUNC_0008259c(output_pointer);\n      return (int *)(rel_entry + 8);\n    }\n    if (aligned_size < 0x200) {\n      aligned_size = offset & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size);\n      next_entry = 1 << ((int)(offset >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_entry + 8) = index;\n      *(uint *)(rel_entry + 0xc) = aligned_size + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = next_entry;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size) = rel_entry;\n      *(dword *)(index + 0xc) = rel_entry;\n    }\n    else {\n      remaining_size = offset >> 9;\n      if (remaining_size < 5) {\n        entry = (offset >> 6) + 0x38;\n        index = entry * 2;\n      }\n      else if (remaining_size < 0x15) {\n        entry = remaining_size + 0x5b;\n        index = entry * 2;\n      }\n      else if (remaining_size < 0x55) {\n        entry = (offset >> 0xc) + 0x6e;\n        index = entry * 2;\n      }\n      else if (remaining_size < 0x155) {\n        entry = (offset >> 0xf) + 0x77;\n        index = entry * 2;\n      }\n      else if (remaining_size < 0x555) {\n        entry = (offset >> 0x12) + 0x7c;\n        index = entry * 2;\n      }\n      else {\n        index = 0xfc;\n        entry = 0x7e;\n      }\n      next_entry = index * 4 + 0x20070464;\n      prev_entry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (prev_entry == next_entry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (entry >> 2 & 0xffU);\n        curr_entry = prev_entry;\n      }\n      else {\n        do {\n          curr_entry = prev_entry;\n          if ((*(uint *)(prev_entry + 4) & 0xfffffffc) <= aligned_size) break;\n          prev_entry = *(dword *)(prev_entry + 8);\n          curr_entry = prev_entry;\n        } while (next_entry != prev_entry);\n        prev_entry = *(dword *)(curr_entry + 0xc);\n      }\n      next_entry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_entry + 0xc) = prev_entry;\n      *(dword *)(rel_entry + 8) = curr_entry;\n      *(dword *)(prev_entry + 8) = rel_entry;\n      *(dword *)(curr_entry + 0xc) = rel_entry;\n    }\n  }\n  rel_entry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  offset = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (offset <= next_entry) {\n    if ((next_entry & offset) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        offset = offset << 1;\n        uVar18 = uVar18 + 4;\n      } while ((next_entry & offset) == 0);\n    }\n    do {\n      palignment_shift = &Elf32_Rel_ARRAY_20070000[uVar18 + 0x8c].r_info;\n      rel_entry_ptr = palignment_shift;\n      aligned_size = uVar18;\n      do {\n        for (entry_ptr = (undefined *)rel_entry_ptr[3]; rel_entry_ptr != (dword *)entry_ptr;\n            entry_ptr = *(undefined **)(entry_ptr + 0xc)) {\n          remaining_size = *(uint *)(entry_ptr + 4) & 0xfffffffc;\n          entry_address = remaining_size - aligned_size_or_constant;\n          if (0xf < (int)entry_address) {\n            entry = *(int *)(entry_ptr + 8);\n            index = *(int *)(entry_ptr + 0xc);\n            new_entry_ptr = entry_ptr + aligned_size_or_constant;\n            *(uint *)(entry_ptr + 4) = aligned_size_or_constant | 1;\n            *(int *)(entry + 0xc) = index;\n            *(int *)(index + 8) = entry;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)new_entry_ptr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)new_entry_ptr;\n            *(undefined4 *)(new_entry_ptr + 0xc) = 0x2007046c;\n            *(undefined4 *)(new_entry_ptr + 8) = 0x2007046c;\n            *(uint *)(new_entry_ptr + 4) = entry_address | 1;\n            *(uint *)(new_entry_ptr + entry_address) = entry_address;\n            FUNC_0008259c(output_pointer);\n            return (int *)(entry_ptr + 8);\n          }\n          if (-1 < (int)entry_address) {\n            index = *(int *)(entry_ptr + 8);\n            entry = *(int *)(entry_ptr + 0xc);\n            *(uint *)(entry_ptr + remaining_size + 4) = *(uint *)(entry_ptr + remaining_size + 4) | 1;\n            *(int *)(index + 0xc) = entry;\n            *(int *)(entry + 8) = index;\n            FUNC_0008259c(output_pointer);\n            return (int *)(entry_ptr + 8);\n          }\n        }\n        aligned_size = aligned_size + 1;\n        rel_entry_ptr = rel_entry_ptr + 2;\n      } while ((aligned_size & 3) != 0);\n      do {\n        remaining_size = uVar18 & 3;\n        entry_ptr = (undefined *)(palignment_shift + -2);\n        uVar18 = uVar18 - 1;\n        if (remaining_size == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~offset;\n          break;\n        }\n        palignment_shift = (dword *)*palignment_shift;\n      } while (palignment_shift == (dword *)entry_ptr);\n      offset = offset * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= offset &&\n           offset - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (uVar18 = aligned_size, offset == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & offset) == 0; offset = offset << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size_or_constant <= uVar18) &&\n     (offset = uVar18 - aligned_size_or_constant, next_entry = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)offset))\n  goto LAB_0008211e;\n  offset = Elf32_Rel_ARRAY_20070000[141].r_info + uVar18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    aligned_size = aligned_size_or_constant + DAT_20071190 + 0x10;\n  }\n  else {\n    aligned_size = aligned_size_or_constant + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  next_entry = FUN_00082970(output_pointer,aligned_size);\n  if ((next_entry == 0xffffffff) || ((next_entry < offset && (rel_entry != 0x20070464)))) {\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    next_entry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    remaining_size = DAT_20071194 + aligned_size;\n    DAT_20071194 = remaining_size;\n    if ((offset == next_entry) && ((offset & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = aligned_size + uVar18 | 1;\n    }\n    else {\n      prev_entry = next_entry;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prev_entry = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = remaining_size + (next_entry - offset);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prev_entry;\n      offset = next_entry & 7;\n      if (offset == 0) {\n        index = 0x1000;\n      }\n      else {\n        next_entry = next_entry + (8 - offset);\n        index = 0x1008 - offset;\n      }\n      index = index - (aligned_size + next_entry & 0xfff);\n      entry = FUN_00082970(output_pointer,index);\n      if (entry == -1) {\n        offset = 1;\n        index = 0;\n      }\n      else {\n        offset = (entry - next_entry) + index | 1;\n      }\n      remaining_size = DAT_20071194 + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = next_entry;\n      DAT_20071194 = remaining_size;\n      *(uint *)(next_entry + 4) = offset;\n      if (rel_entry != 0x20070464) {\n        if (uVar18 < 0x10) {\n          *(undefined4 *)(next_entry + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar18 = uVar18 - 0xc & 0xfffffff8;\n        *(uint *)(rel_entry + 4) = uVar18 | *(uint *)(rel_entry + 4) & 1;\n        *(undefined4 *)(rel_entry + uVar18 + 4) = 5;\n        *(undefined4 *)(rel_entry + uVar18 + 8) = 5;\n        if (0xf < uVar18) {\n          FUN_00083d9c(output_pointer,rel_entry + 8);\n          remaining_size = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < remaining_size) {\n      DAT_2007118c = remaining_size;\n    }\n    if (DAT_20071188 < remaining_size) {\n      DAT_20071188 = remaining_size;\n    }\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    next_entry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  offset = uVar18 - aligned_size_or_constant;\n  if ((uVar18 < aligned_size_or_constant) || ((int)offset < 0x10)) {\n    FUNC_0008259c(output_pointer);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size_or_constant + next_entry;\n  *(uint *)(next_entry + 4) = aligned_size_or_constant | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = offset | 1;\n  FUNC_0008259c(output_pointer);\n  return (int *)(next_entry + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_chunk_00081e14",
                "param_1": "output_pointer",
                "param_2": "size",
                "dVar1": "rel_entry",
                "iVar2": "entry",
                "uVar3": "offset",
                "uVar4": "aligned_size",
                "iVar5": "prev",
                "uVar6": "remaining_size",
                "dVar7": "next_entry",
                "uVar8": "entry_address",
                "iVar9": "next",
                "puVar10": "entry_ptr",
                "dVar11": "prev_entry",
                "dVar12": "curr_entry",
                "iVar13": "index",
                "pdVar14": "rel_entry_ptr",
                "uVar15": "aligned_size_or_constant",
                "puVar16": "new_entry_ptr",
                "dVar17": "alignment_shift"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_and_expand_0008234c",
            "code": "\nundefined4 * copyAndExpand_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint remainingSize;\n  uint loopSize;\n  bool loopFlag;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      loopSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          tempPtr = srcPtr;\n          loopFlag = loopSize != 0;\n          loopSize = loopSize - 1;\n          *(undefined *)tempPtr = *(undefined *)destPtr;\n          srcPtr = (undefined4 *)((int)tempPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (loopFlag);\n        *(undefined *)(undefined4 *)((int)tempPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)tempPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)tempPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      loopSize = 4 - ((uint)destination & 3);\n      size = size - loopSize;\n      destPtr = destination;\n      tempPtr = source;\n      if (((uint)destination & 1) != 0) {\n        tempPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = destPtr;\n      source = tempPtr;\n      if ((loopSize & 2) != 0) {\n        source = (undefined4 *)((int)tempPtr + 2);\n        srcPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *srcPtr = *source;\n    srcPtr[1] = source[1];\n    srcPtr[2] = source[2];\n    srcPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *srcPtr = *source;\n      srcPtr[1] = source[1];\n      srcPtr[2] = source[2];\n      srcPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      loopFlag = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (loopFlag);\n  }\n  loopSize = remainingSize + 0xc;\n  tempPtr = srcPtr;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *tempPtr = *destPtr;\n      loopFlag = 3 < loopSize;\n      loopSize = loopSize - 4;\n      srcPtr = tempPtr + 1;\n      tempPtr = tempPtr + 1;\n      destPtr = source;\n    } while (loopFlag);\n  }\nLAB_000823d0:\n  if (loopSize + 4 != 0) {\n    destPtr = srcPtr;\n    tempPtr = source;\n    if ((loopSize & 1) != 0) {\n      tempPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((loopSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_and_expand_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar3": "tempPtr",
                "uVar4": "remainingSize",
                "uVar5": "loopSize",
                "bVar6": "loopFlag"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_and_copy_00082438",
            "code": "\nvoid reverseAndCopy_00082438(undefined4 *source,undefined4 *destination,uint size)\n\n{\n  int index;\n  undefined4 *nextSource;\n  undefined4 *nextDestination;\n  undefined4 *currentSource;\n  uint remainingSize;\n  undefined *temp;\n  uint count;\n  \n  if ((destination < source) && (currentSource = (undefined4 *)((int)destination + size), source < currentSource)) {\n    temp = (undefined *)((int)source + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        currentSource = (undefined4 *)((int)currentSource + -1);\n        index = index + -1;\n        temp = temp + -1;\n        *temp = *(undefined *)currentSource;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)source | (uint)destination) & 3) == 0) {\n    currentSource = source;\n    nextDestination = destination;\n    do {\n      nextSource = currentSource + 4;\n      *currentSource = *nextDestination;\n      currentSource[1] = nextDestination[1];\n      currentSource[2] = nextDestination[2];\n      currentSource[3] = nextDestination[3];\n      currentSource = nextSource;\n      nextDestination = nextDestination + 4;\n    } while (nextSource != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    count = size & 0xf;\n    destination = destination + index * 4;\n    source = source + index * 4;\n    remainingSize = count;\n    currentSource = source;\n    nextDestination = destination;\n    if (3 < count) {\n      do {\n        remainingSize = remainingSize - 4;\n        *currentSource = *nextDestination;\n        currentSource = currentSource + 1;\n        nextDestination = nextDestination + 1;\n      } while (3 < remainingSize);\n      index = (count - 4 & 0xfffffffc) + 4;\n      source = (undefined4 *)((int)source + index);\n      destination = (undefined4 *)((int)destination + index);\n      count = size & 3;\n    }\n    size = count;\n    if (size == 0) {\n      return;\n    }\n  }\n  currentSource = source;\n  do {\n    nextDestination = (undefined4 *)((int)currentSource + 1);\n    *(undefined *)currentSource = *(undefined *)destination;\n    destination = (undefined4 *)((int)destination + 1);\n    currentSource = nextDestination;\n  } while (nextDestination != (undefined4 *)(size + (int)source));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_and_copy_00082438",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "nextSource",
                "puVar3": "nextDestination",
                "puVar4": "currentSource",
                "puVar6": "temp",
                "uVar5": "remainingSize",
                "uVar7": "count"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "expand_and_fill_buffer_00082504",
            "code": "\nvoid expandAndFillBuffer_00082504(undefined4 *buffer,undefined fillValue,uint size)\n\n{\n  undefined4 *currentPtr;\n  undefined4 *nextPtr;\n  undefined4 fillValue32;\n  uint remainingSize;\n  bool isSizeZero;\n  \n  if (((uint)buffer & 3) != 0) {\n    isSizeZero = size == 0;\n    currentPtr = buffer;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)currentPtr + 1);\n      *(undefined *)currentPtr = fillValue;\n      if (((uint)buffer & 3) == 0) break;\n      isSizeZero = size == 0;\n      currentPtr = buffer;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fillValue32 = CONCAT22(CONCAT11(fillValue,fillValue),CONCAT11(fillValue,fillValue));\n    remainingSize = size;\n    currentPtr = buffer;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *currentPtr = fillValue32;\n        currentPtr[1] = fillValue32;\n        currentPtr[2] = fillValue32;\n        currentPtr[3] = fillValue32;\n        currentPtr = currentPtr + 4;\n      } while (currentPtr != (undefined4 *)((int)buffer + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      buffer = buffer + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      currentPtr = buffer;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *buffer = fillValue32;\n      buffer = buffer + 1;\n    } while (3 < size);\n    buffer = (undefined4 *)((int)currentPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    currentPtr = buffer;\n    do {\n      nextPtr = (undefined4 *)((int)currentPtr + 1);\n      *(undefined *)currentPtr = fillValue;\n      currentPtr = nextPtr;\n    } while (nextPtr != (undefined4 *)(size + (int)buffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "expand_and_fill_buffer_00082504",
                "param_1": "buffer",
                "param_2": "fillValue",
                "param_3": "size",
                "puVar1": "currentPtr",
                "puVar2": "nextPtr",
                "uVar3": "fillValue32",
                "uVar4": "remainingSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_elf32_relocation_000825a0",
            "code": "\nvoid processElf32Relocation_000825a0(undefined4 address,undefined4 param)\n\n{\n  FUN_000825b0(relocationArray[140].r_offset,address,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_elf32_relocation_000825a0",
                "param_1": "address",
                "param_2": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "resize_memory_block_000825b0",
            "code": "\nint * resizeMemoryBlock_000825b0(undefined4 *ptrToData,int *oldMemoryBlock,uint newSize)\n\n{\n  dword tempVar1;\n  int *newMemoryBlock;\n  uint tempVar2;\n  int tempVar3;\n  uint sizeFlag;\n  int tempVar4;\n  int *tempVar5;\n  uint oldSize;\n  uint alignedSize;\n  int *result;\n  \n  if (oldMemoryBlock == (int *)0x0) {\n    newMemoryBlock = (int *)FUN_00081e14(ptrToData,newSize);\n    return newMemoryBlock;\n  }\n  FUNC_00082598();\n  sizeFlag = oldMemoryBlock[-1];\n  oldSize = sizeFlag & 0xfffffffc;\n  newMemoryBlock = oldMemoryBlock + -2;\n  if (newSize + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = newSize + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto errorLabel_1;\n  }\n  if (alignedSize < newSize) {\nerrorLabel_1:\n    *ptrToData = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)oldSize < (int)alignedSize) {\n    tempVar1 = (int)newMemoryBlock + oldSize;\n    if (Elf32_Rel_ARRAY[141].r_info == tempVar1) {\n      tempVar2 = *(uint *)(Elf32_Rel_ARRAY[141].r_info + 4) & 0xfffffffc;\n      tempVar1 = Elf32_Rel_ARRAY[141].r_info;\n      if ((int)(alignedSize + 0x10) <= (int)(tempVar2 + oldSize)) {\n        Elf32_Rel_ARRAY[141].r_info = (int)newMemoryBlock + alignedSize;\n        *(uint *)(Elf32_Rel_ARRAY[141].r_info + 4) = (tempVar2 + oldSize) - alignedSize | 1;\n        oldMemoryBlock[-1] = alignedSize | oldMemoryBlock[-1] & 1U;\n        FUNC_0008259c(ptrToData);\n        return oldMemoryBlock;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(tempVar1 + 4) & 0xfffffffe) + tempVar1 + 4) & 1) == 0) {\n      tempVar2 = *(uint *)(tempVar1 + 4) & 0xfffffffc;\n      if ((int)alignedSize <= (int)(tempVar2 + oldSize)) {\n        tempVar4 = *(int *)(tempVar1 + 0xc);\n        tempVar3 = *(int *)(tempVar1 + 8);\n        *(int *)(tempVar3 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar3;\n        oldSize = tempVar2 + oldSize;\n        goto errorLabel_2;\n      }\n    }\n    else {\n      tempVar2 = 0;\n      tempVar1 = 0;\n    }\n    if (-1 < (int)(sizeFlag << 0x1f)) {\n      result = (int *)((int)newMemoryBlock - oldMemoryBlock[-2]);\n      sizeFlag = (result[1] & 0xfffffffcU) + oldSize;\n      if (tempVar1 != 0) {\n        if (tempVar1 == Elf32_Rel_ARRAY[141].r_info) {\n          if ((int)(alignedSize + 0x10) <= (int)(tempVar2 + sizeFlag)) {\n            newMemoryBlock = result + 2;\n            tempVar3 = *newMemoryBlock;\n            tempVar4 = result[3];\n            oldSize = oldSize - 4;\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            if (oldSize < 0x25) {\n              tempVar5 = newMemoryBlock;\n              if (0x13 < oldSize) {\n                result[2] = *oldMemoryBlock;\n                result[3] = oldMemoryBlock[1];\n                if (oldSize < 0x1c) {\n                  oldMemoryBlock = oldMemoryBlock + 2;\n                  tempVar5 = result + 4;\n                }\n                else {\n                  result[4] = oldMemoryBlock[2];\n                  result[5] = oldMemoryBlock[3];\n                  if (oldSize == 0x24) {\n                    result[6] = oldMemoryBlock[4];\n                    tempVar5 = oldMemoryBlock + 5;\n                    oldMemoryBlock = oldMemoryBlock + 6;\n                    result[7] = *tempVar5;\n                    tempVar5 = result + 8;\n                  }\n                  else {\n                    oldMemoryBlock = oldMemoryBlock + 4;\n                    tempVar5 = result + 6;\n                  }\n                }\n              }\n              *tempVar5 = *oldMemoryBlock;\n              tempVar5[1] = oldMemoryBlock[1];\n              tempVar5[2] = oldMemoryBlock[2];\n            }\n            else {\n              FUN_00082438(newMemoryBlock,oldMemoryBlock);\n            }\n            Elf32_Rel_ARRAY[141].r_info = (int)result + alignedSize;\n            *(uint *)(Elf32_Rel_ARRAY[141].r_info + 4) = (tempVar2 + sizeFlag) - alignedSize | 1;\n            result[1] = alignedSize | result[1] & 1U;\n            FUNC_0008259c(ptrToData);\n            return newMemoryBlock;\n          }\n        }\n        else {\n          tempVar2 = tempVar2 + sizeFlag;\n          if ((int)alignedSize <= (int)tempVar2) {\n            tempVar4 = *(int *)(tempVar1 + 0xc);\n            tempVar3 = *(int *)(tempVar1 + 8);\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            tempVar5 = result + 2;\n            tempVar3 = *tempVar5;\n            tempVar4 = result[3];\n            sizeFlag = oldSize - 4;\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            oldSize = tempVar2;\n            if (sizeFlag < 0x25) {\n              newMemoryBlock = tempVar5;\n              if (0x13 < sizeFlag) {\n                result[2] = *oldMemoryBlock;\n                result[3] = oldMemoryBlock[1];\n                if (sizeFlag < 0x1c) {\n                  oldMemoryBlock = oldMemoryBlock + 2;\n                  newMemoryBlock = result + 4;\n                }\n                else {\n                  result[4] = oldMemoryBlock[2];\n                  result[5] = oldMemoryBlock[3];\n                  if (sizeFlag == 0x24) {\n                    result[6] = oldMemoryBlock[4];\n                    newMemoryBlock = oldMemoryBlock + 5;\n                    oldMemoryBlock = oldMemoryBlock + 6;\n                    result[7] = *newMemoryBlock;\n                    newMemoryBlock = result + 8;\n                  }\n                  else {\n                    oldMemoryBlock = oldMemoryBlock + 4;\n                    newMemoryBlock = result + 6;\n                  }\n                }\n              }\n              *newMemoryBlock = *oldMemoryBlock;\n              newMemoryBlock[1] = oldMemoryBlock[1];\n              newMemoryBlock[2] = oldMemoryBlock[2];\n              sizeFlag = result[1];\n              newMemoryBlock = result;\n              oldMemoryBlock = tempVar5;\n            }\n            else {\n              FUN_00082438(tempVar5,oldMemoryBlock);\n              sizeFlag = result[1];\n              newMemoryBlock = result;\n              oldMemoryBlock = tempVar5;\n            }\n            goto errorLabel_2;\n          }\n        }\n      }\n      if ((int)alignedSize <= (int)sizeFlag) {\n        tempVar5 = result + 2;\n        tempVar3 = *tempVar5;\n        tempVar4 = result[3];\n        tempVar2 = oldSize - 4;\n        *(int *)(tempVar3 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar3;\n        oldSize = sizeFlag;\n        if (tempVar2 < 0x25) {\n          newMemoryBlock = tempVar5;\n          if (0x13 < tempVar2) {\n            result[2] = *oldMemoryBlock;\n            result[3] = oldMemoryBlock[1];\n            if (tempVar2 < 0x1c) {\n              oldMemoryBlock = oldMemoryBlock + 2;\n              newMemoryBlock = result + 4;\n            }\n            else {\n              result[4] = oldMemoryBlock[2];\n              result[5] = oldMemoryBlock[3];\n              if (tempVar2 == 0x24) {\n                result[6] = oldMemoryBlock[4];\n                newMemoryBlock = oldMemoryBlock + 5;\n                oldMemoryBlock = oldMemoryBlock + 6;\n                result[7] = *newMemoryBlock;\n                newMemoryBlock = result + 8;\n              }\n              else {\n                oldMemoryBlock = oldMemoryBlock + 4;\n                newMemoryBlock = result + 6;\n              }\n            }\n          }\n          *newMemoryBlock = *oldMemoryBlock;\n          newMemoryBlock[1] = oldMemoryBlock[1];\n          newMemoryBlock[2] = oldMemoryBlock[2];\n          sizeFlag = result[1];\n          newMemoryBlock = result;\n          oldMemoryBlock = tempVar5;\n        }\n        else {\n          FUN_00082438(tempVar5,oldMemoryBlock);\n          sizeFlag = result[1];\n          newMemoryBlock = result;\n          oldMemoryBlock = tempVar5;\n        }\n        goto errorLabel_2;\n      }\n    }\n    result = (int *)FUN_00081e14(ptrToData,newSize);\n    if (result == (int *)0x0) goto LAB_000826a4;\n    sizeFlag = oldMemoryBlock[-1];\n    if (result + -2 != (int *)((sizeFlag & 0xfffffffe) + (int)newMemoryBlock)) {\n      oldSize = oldSize - 4;\n      if (oldSize < 0x25) {\n        newMemoryBlock = oldMemoryBlock;\n        tempVar5 = result;\n        if (0x13 < oldSize) {\n          *result = *oldMemoryBlock;\n          result[1] = oldMemoryBlock[1];\n          if (oldSize < 0x1c) {\n            newMemoryBlock = oldMemoryBlock + 2;\n            tempVar5 = result + 2;\n          }\n          else {\n            result[2] = oldMemoryBlock[2];\n            result[3] = oldMemoryBlock[3];\n            if (oldSize == 0x24) {\n              result[4] = oldMemoryBlock[4];\n              result[5] = oldMemoryBlock[5];\n              newMemoryBlock = oldMemoryBlock + 6;\n              tempVar5 = result + 6;\n            }\n            else {\n              newMemoryBlock = oldMemoryBlock + 4;\n              tempVar5 = result + 4;\n            }\n          }\n        }\n        *tempVar5 = *newMemoryBlock;\n        tempVar5[1] = newMemoryBlock[1];\n        tempVar5[2] = newMemoryBlock[2];\n      }\n      else {\n        FUN_00082438(result,oldMemoryBlock);\n      }\n      FUN_00083d9c(ptrToData,oldMemoryBlock);\n      goto LAB_000826a4;\n    }\n    oldSize = oldSize + (result[-1] & 0xfffffffcU);\n  }\nerrorLabel_2:\n  tempVar2 = oldSize - alignedSize;\n  result = oldMemoryBlock;\n  if (tempVar2 < 0x10) {\n    newMemoryBlock[1] = sizeFlag & 1 | oldSize;\n    *(uint *)((int)newMemoryBlock + oldSize + 4) = *(uint *)((int)newMemoryBlock + oldSize + 4) | 1;\n  }\n  else {\n    newMemoryBlock[1] = sizeFlag & 1 | alignedSize;\n    *(uint *)((int)newMemoryBlock + alignedSize + 4) = tempVar2 | 1;\n    *(uint *)((int)newMemoryBlock + tempVar2 + alignedSize + 4) = *(uint *)((int)newMemoryBlock + tempVar2 + alignedSize + 4) | 1;\n    FUN_00083d9c(ptrToData,(int)newMemoryBlock + alignedSize + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(ptrToData);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "resize_memory_block_000825b0",
                "param_1": "ptrToData",
                "param_2": "oldMemoryBlock",
                "param_3": "newSize",
                "dVar1": "tempVar1",
                "piVar2": "newMemoryBlock",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "uVar5": "sizeFlag",
                "iVar6": "tempVar4",
                "piVar7": "tempVar5",
                "uVar8": "oldSize",
                "uVar9": "alignedSize",
                "piVar10": "result",
                "Elf32_Rel_ARRAY_20070000": "Elf32_Rel_ARRAY",
                "LAB_0008267c": "errorLabel_1",
                "LAB_0008268c": "errorLabel_2"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_return_value_and_update_00082970",
            "code": "\nvoid checkReturnValueAndUpdate_00082970(int *outputValue,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_0008118c(inputValue);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_return_value_and_update_00082970",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *nextSourcePointer;\n  uint currentWord;\n  uint currentByte;\n  uint *nextDestinationPointer;\n  bool isShortZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextSourcePointer = source;\n    if (((uint)source & 1) != 0) {\n      nextSourcePointer = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextSourcePointer;\n    if (((uint)nextSourcePointer & 2) != 0) {\n      source = (uint *)((int)nextSourcePointer + 2);\n      currentShort = *(ushort *)nextSourcePointer;\n      isShortZero = (currentShort & 0xff) == 0;\n      if (isShortZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isShortZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isShortZero) {\n        return;\n      }\n    }\n  }\n  currentWord = *source;\n  nextSourcePointer = source + 1;\n  nextDestinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_000829f8;\n    nextDestinationPointer = destination + 1;\n    *destination = currentWord;\n    nextSourcePointer = source + 2;\n    currentWord = source[1];\n  }\n  while( true ) {\n    nextPointer = nextSourcePointer + 1;\n    currentByte = *nextSourcePointer;\n    destination = nextDestinationPointer;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    destination = nextDestinationPointer + 1;\n    *nextDestinationPointer = currentWord;\n    currentWord = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    nextSourcePointer = nextSourcePointer + 2;\n    currentWord = *nextPointer;\n    nextDestinationPointer = nextDestinationPointer + 2;\n    *destination = currentByte;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentWord;\n    currentByte = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "nextSourcePointer",
                "uVar5": "currentWord",
                "uVar6": "currentByte",
                "puVar7": "nextDestinationPointer",
                "bVar8": "isShortZero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 inputValue,int arraySize,int **dataPointer)\n\n{\n  int *currentData;\n  int result;\n  int *currentPointer;\n  uint loopCounter;\n  undefined4 *currentValue;\n  uint tempValue;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(arraySize + 100) << 0x12) {\n    result = FUN_00083f34();\n    dataPointer[2] = (int *)0x0;\n    dataPointer[1] = (int *)0x0;\n    return result;\n  }\n  currentPointer = dataPointer[2];\n  currentData = *dataPointer;\n  while (currentPointer != (int *)0x0) {\n    tempValue = currentData[1];\n    shiftedValue = tempValue >> 2;\n    if (shiftedValue != 0) {\n      currentValue = (undefined4 *)(*currentData + -4);\n      loopCounter = 0;\n      do {\n        currentValue = currentValue + 1;\n        result = FUN_00083c40(inputValue,*currentValue,arraySize);\n        loopCounter = loopCounter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shiftedValue != loopCounter);\n      currentPointer = dataPointer[2];\n    }\n    currentPointer = (int *)((int)currentPointer - (tempValue & 0xfffffffc));\n    dataPointer[2] = currentPointer;\n    currentData = currentData + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  dataPointer[2] = (int *)0x0;\n  dataPointer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "inputValue",
                "param_2": "arraySize",
                "param_3": "dataPointer",
                "piVar1": "currentData",
                "iVar2": "result",
                "piVar3": "currentPointer",
                "uVar4": "loopCounter",
                "puVar5": "currentValue",
                "uVar6": "tempValue",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_and_format_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseAndFormat_00082b38(int inputBuffer,int formatBuffer,int *******format,int **args)\n\n{\n  bool isNegative;\n  bool hasPlusSign;\n  bool hasAlternateForm;\n  char conversionSpecifier;\n  bool isZeroPadded;\n  int ********formattedParam;\n  int *integerParam;\n  int result;\n  char charResult;\n  int *******currentFormatSpecifier;\n  uint digit;\n  int **paramPointer;\n  uint formatFlags;\n  uint nextChar;\n  int loopIndex;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******value;\n  uint width;\n  int *piVar22;\n  int *******tempValue;\n  undefined4 highPart;\n  int ********pnextFormatSpecifier;\n  bool isLong;\n  longlong combinedValue;\n  int *******totalParams;\n  int *******remainingParams;\n  int **argListPointer;\n  int numCharsWritten;\n  char *hexUpperCase;\n  char currentChar;\n  undefined paddingChar;\n  undefined nibbleValue;\n  int ********formattedParams;\n  int numParams;\n  int *******paramPointers;\n  undefined digitChar;\n  char tempChar;\n  undefined minusSign;\n  undefined tempBuffer [4];\n  int *******paramBuffers [16];\n  \n  if ((inputBuffer != 0) && (*(int *)(inputBuffer + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  formatFlags = (uint)*(ushort *)(formatBuffer + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatBuffer + 0xc) << 0x12)) {\n    formatFlags = formatFlags | 0x2000;\n    *(short *)(formatBuffer + 0xc) = (short)formatFlags;\n    *(uint *)(formatBuffer + 100) = *(uint *)(formatBuffer + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlags << 0x1c) < 0) && (*(int *)(formatBuffer + 0x10) != 0)) {\n    if ((formatFlags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(inputBuffer,formatBuffer);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatBuffer + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(formatBuffer + 0xe)) {\n    result = FUN_0008378c(inputBuffer,formatBuffer,format,args);\n    return result;\n  }\nLAB_00082b8a:\n  hexUpperCase = (char *)0x0;\n  paramPointers = (int *******)0x0;\n  numParams = 0;\n  numCharsWritten = 0;\n  formattedParam = (int ********)tempBuffer;\n  argListPointer = args;\n  formattedParams = (int ********)tempBuffer;\nLAB_00082b9e:\n  currentFormatSpecifier = format;\n  if ((*(char *)format != '\\0') && (*(char *)format != '%')) {\n    do {\n      currentFormatSpecifier = (int *******)((int)currentFormatSpecifier + 1);\n      if (*(char *)currentFormatSpecifier == '\\0') break;\n    } while (*(char *)currentFormatSpecifier != '%');\n    value = (int *******)((int)currentFormatSpecifier - (int)format);\n    if (value != (int *******)0x0) {\n      numParams = numParams + 1;\n      paramPointers = (int *******)((int)paramPointers + (int)value);\n      *formattedParam = format;\n      formattedParam[1] = value;\n      if (numParams < 8) {\n        formattedParam = formattedParam + 2;\n      }\n      else {\n        if (paramPointers == (int *******)0x0) {\n          numCharsWritten = numCharsWritten + (int)value;\n          numParams = 0;\n          formattedParam = (int ********)tempBuffer;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n        formattedParam = (int ********)tempBuffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      numCharsWritten = numCharsWritten + (int)value;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentFormatSpecifier != '\\0') {\n    currentChar = '\\0';\n    nextChar = (uint)*(byte *)((int)currentFormatSpecifier + 1);\n    formatFlags = 0;\n    isZeroPadded = false;\n    hasPlusSign = false;\n    isNegative = false;\n    hasAlternateForm = false;\n    isLong = false;\n    value = (int *******)0x0;\n    remainingParams = (int *******)0xffffffff;\n    format = (int *******)((int)currentFormatSpecifier + 1);\nLAB_00082c12:\n    format = (int *******)((int)format + 1);\nLAB_00082c16:\n    switch(nextChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (nextChar != 0) {\n        totalParams = (int *******)0x1;\n        remainingParams = (int *******)0x1;\n        pnextFormatSpecifier = (int ********)&digitChar;\n        digitChar = (char)nextChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasAlternateForm = true;\n      nextChar = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x2a:\n      value = (int *******)*argListPointer;\n      argListPointer = argListPointer + 1;\n      if ((int)value < 0) {\n        value = (int *******)-(int)value;\n        goto switchD_00082c20_caseD_2d;\n      }\n      nextChar = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x2b:\n      nextChar = (uint)*(byte *)format;\n      currentChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      formatFlags = formatFlags | 4;\n      nextChar = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x2e:\n      nextChar = (uint)*(byte *)format;\n      currentFormatSpecifier = (int *******)((int)format + 1);\n      if (nextChar == 0x2a) {\n        nextChar = (uint)*(byte *)((int)format + 1);\n        remainingParams = (int *******)*argListPointer;\n        argListPointer = argListPointer + 1;\n        format = currentFormatSpecifier;\n        if ((int)remainingParams < 0) {\n          remainingParams = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = nextChar - 0x30;\n      if (digit < 10) {\n        width = 0;\n        do {\n          format = (int *******)((int)currentFormatSpecifier + 1);\n          nextChar = (uint)*(byte *)currentFormatSpecifier;\n          width = digit + width * 10;\n          digit = nextChar - 0x30;\n          currentFormatSpecifier = format;\n        } while (digit < 10);\n        remainingParams = (int *******)(width | (int)width >> 0x1f);\n      }\n      else {\n        remainingParams = (int *******)0x0;\n        format = currentFormatSpecifier;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      formatFlags = formatFlags | 0x80;\n      nextChar = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      hasPlusSign = true;\n      if (isNegative == false) goto LAB_00083028;\nLAB_00082e98:\n      argListPointer = (int **)((int)argListPointer + 7U & 0xfffffff8);\n      piVar19 = *argListPointer;\n      piVar22 = argListPointer[1];\n      argListPointer = argListPointer + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      hasPlusSign = true;\n      if (isNegative != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)hasPlusSign << 4;\n      loopIndex = (uint)isNegative << 5;\n      if ((hasPlusSign == 0) && (loopIndex = (uint)isLong << 6, isLong != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)argListPointer;\n        argListPointer = argListPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        result = loopIndex;\n        piVar19 = *argListPointer;\n        argListPointer = argListPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasPlusSign = true;\n      if (isNegative != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((hasPlusSign) || (isLong == false)) {\n        result = 1;\n        piVar19 = *argListPointer;\n        argListPointer = argListPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)argListPointer;\n        argListPointer = argListPointer + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexUpperCase = \"0123456789ABCDEF\";\n      if (isNegative == false) goto LAB_00083196;\nLAB_00082fb6:\n      paramPointer = (int **)((int)argListPointer + 7U & 0xfffffff8);\n      argListPointer = paramPointer + 2;\n      piVar19 = *paramPointer;\n      piVar22 = paramPointer[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *argListPointer;\n      argListPointer = argListPointer + 1;\n      totalParams = (int *******)0x1;\n      digitChar = SUB41(piVar19,0);\n      remainingParams = (int *******)0x1;\n      pnextFormatSpecifier = (int ********)&digitChar;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isNegative != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((hasPlusSign == false) && (isLong != false)) {\n        piVar19 = (int *)(int)*(short *)argListPointer;\n        argListPointer = argListPointer + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *argListPointer;\n        argListPointer = argListPointer + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        isLong = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isLong);\n        currentChar = '-';\n        conversionSpecifier = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)remainingParams) {\n        formatFlags = formatFlags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      nextChar = (uint)piVar19 | (uint)piVar22;\n      result = 1;\n      conversionSpecifier = currentChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isLong = true;\n      nextChar = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x6c:\n      nextChar = (uint)*(byte *)format;\n      if (nextChar == 0x6c) {\n        isNegative = true;\n        nextChar = (uint)*(byte *)((int)format + 1);\n        format = (int *******)((int)format + 1);\n      }\n      else {\n        hasPlusSign = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isNegative == false) {\n        if (hasPlusSign == false) {\n          if (isLong) {\n            piVar19 = *argListPointer;\n            argListPointer = argListPointer + 1;\n            *(short *)piVar19 = (short)numCharsWritten;\n          }\n          else {\n            piVar19 = *argListPointer;\n            argListPointer = argListPointer + 1;\n            *piVar19 = numCharsWritten;\n          }\n        }\n        else {\n          piVar19 = *argListPointer;\n          argListPointer = argListPointer + 1;\n          *piVar19 = numCharsWritten;\n        }\n      }\n      else {\n        piVar19 = *argListPointer;\n        argListPointer = argListPointer + 1;\n        *piVar19 = numCharsWritten;\n        piVar19[1] = numCharsWritten >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isNegative == false) goto LAB_00082f2a;\nLAB_00082d42:\n      paramPointer = (int **)((int)argListPointer + 7U & 0xfffffff8);\n      argListPointer = paramPointer + 2;\n      piVar19 = *paramPointer;\n      piVar22 = paramPointer[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar19 = *argListPointer;\n      argListPointer = argListPointer + 1;\n      nibbleValue = 0x78;\n      isZeroPadded = true;\n      piVar22 = (int *)0x0;\n      paddingChar = 0x30;\n      hexUpperCase = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isNegative = true;\n      nextChar = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x73:\n      pnextFormatSpecifier = (int ********)*argListPointer;\n      currentChar = '\\0';\n      argListPointer = argListPointer + 1;\n      if (pnextFormatSpecifier != (int ********)0x0) {\n        if ((int)remainingParams < 0) {\n          remainingParams = (int *******)FUN_00082a50(pnextFormatSpecifier);\n          currentFormatSpecifier = (int *******)0x0;\n          conversionSpecifier = currentChar;\n        }\n        else {\n          result = FUN_00084384(pnextFormatSpecifier,0,remainingParams);\n          conversionSpecifier = currentChar;\n          if (result == 0) {\n            currentFormatSpecifier = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(result - (int)pnextFormatSpecifier);\n            if ((int)remainingParams <= (int)(int *******)(result - (int)pnextFormatSpecifier)) {\n              pppppppiVar18 = remainingParams;\n            }\n            currentFormatSpecifier = (int *******)0x0;\n            remainingParams = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < remainingParams) {\n        remainingParams = (int *******)0x6;\n      }\n      totalParams = (int *******)((uint)remainingParams & ~((int)remainingParams >> 0x1f));\n      pnextFormatSpecifier = (int ********)&UNK_00085840;\nLAB_00083012:\n      currentChar = '\\0';\n      currentFormatSpecifier = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isNegative) goto LAB_00082f7c;\nLAB_00082e62:\n      paramPointer = (int **)((int)argListPointer + 7U & 0xfffffff8);\n      argListPointer = paramPointer + 2;\n      piVar19 = *paramPointer;\n      piVar22 = paramPointer[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexUpperCase = \"0123456789abcdef\";\n      if (isNegative != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((hasPlusSign == false) && (isLong != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)argListPointer;\n        argListPointer = argListPointer + 1;\n      }\n      else {\n        piVar19 = *argListPointer;\n        argListPointer = argListPointer + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasAlternateForm) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        isZeroPadded = true;\n        paddingChar = 0x30;\n        result = 2;\n        nibbleValue = (char)nextChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    currentChar = '\\0';\n    conversionSpecifier = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)remainingParams) {\n      formatFlags = formatFlags & 0xffffff7f;\n    }\n    nextChar = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    combinedValue = CONCAT44(piVar22,piVar19);\n    currentFormatSpecifier = remainingParams;\n    if ((nextChar == 0) && (remainingParams == (int *******)0x0)) {\n      pnextFormatSpecifier = (int ********)tempBuffer;\n      if ((result != 0) || (!hasAlternateForm)) goto LAB_00082da0;\n      pnextFormatSpecifier = (int ********)(&tempChar + 1);\n      minusSign = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&tempChar + 1);\n        do {\n          pnextFormatSpecifier = ppppppppiVar16;\n          highPart = (undefined4)((ulonglong)combinedValue >> 0x20);\n          charResult = '\\n';\n          FUN_00084750((int)combinedValue,highPart,10,0);\n          *(char *)pnextFormatSpecifier = charResult + '0';\n          combinedValue = FUN_00084750((int)combinedValue,highPart,10,0);\n          ppppppppiVar16 = (int ********)((int)pnextFormatSpecifier + -1);\n        } while (combinedValue != 0);\n        remainingParams = (int *******)((int)tempBuffer - (int)pnextFormatSpecifier);\n        goto LAB_00082da0;\n      }\n      minusSign = (char)piVar19 + '0';\n      pnextFormatSpecifier = (int ********)(&tempChar + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&tempChar + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      pnextFormatSpecifier = ppppppppiVar16;\n      nextChar = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)pnextFormatSpecifier = hexUpperCase[nextChar];\n      ppppppppiVar16 = (int ********)((int)pnextFormatSpecifier + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    remainingParams = (int *******)((int)tempBuffer - (int)pnextFormatSpecifier);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (paramPointers != (int *******)0x0) {\n    FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(formatBuffer + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return numCharsWritten;\nLAB_0008337e:\n  do {\n    pnextFormatSpecifier = ppppppppiVar16;\n    integerParam = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    result = ((uint)piVar19 & 7) + 0x30;\n    *(char *)pnextFormatSpecifier = (char)result;\n    ppppppppiVar16 = (int ********)((int)pnextFormatSpecifier + -1);\n    piVar19 = integerParam;\n  } while (((uint)integerParam | (uint)piVar22) != 0);\n  if (hasAlternateForm) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      remainingParams = (int *******)((int)tempBuffer - (int)pnextFormatSpecifier);\n    }\n    else {\n      *(undefined *)((int)pnextFormatSpecifier + -1) = 0x30;\n      pnextFormatSpecifier = ppppppppiVar16;\n      remainingParams = (int *******)((int)tempBuffer - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    remainingParams = (int *******)((int)tempBuffer - (int)pnextFormatSpecifier);\n  }\nLAB_00082da0:\n  totalParams = remainingParams;\n  if ((int)remainingParams < (int)currentFormatSpecifier) {\n    totalParams = currentFormatSpecifier;\n  }\n  if (conversionSpecifier != '\\0') {\n    totalParams = (int *******)((int)totalParams + 1);\n  }\nLAB_00082dba:\n  if (isZeroPadded) {\n    totalParams = (int *******)((int)totalParams + 2);\n  }\n  if ((formatFlags == 0) &&\n     (pppppppiVar18 = (int *******)((int)value - (int)totalParams), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      numParams = numParams + 1;\n    }\n    else {\n      do {\n        tempValue = pppppppiVar18;\n        result = numParams + 1;\n        paramPointers = paramPointers + 4;\n        *formattedParam = (int *******)0x85808;\n        formattedParam[1] = (int *******)0x10;\n        if (result < 8) {\n          loopIndex = numParams + 2;\n          formattedParam = formattedParam + 2;\n          numParams = result;\n        }\n        else if (paramPointers == (int *******)0x0) {\n          loopIndex = 1;\n          formattedParam = (int ********)tempBuffer;\n          numParams = 0;\n        }\n        else {\n          numParams = result;\n          result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n          if (result != 0) goto LAB_000833de;\n          loopIndex = numParams + 1;\n          formattedParam = (int ********)tempBuffer;\n        }\n        pppppppiVar18 = tempValue + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = tempValue + -4;\n      numParams = loopIndex;\n    }\n    paramPointers = (int *******)((int)paramPointers + (int)pppppppiVar18);\n    *formattedParam = (int *******)0x85808;\n    formattedParam[1] = pppppppiVar18;\n    if (numParams < 8) {\n      result = numParams + 1;\n      formattedParam = formattedParam + 2;\n    }\n    else if (paramPointers == (int *******)0x0) {\n      result = 1;\n      numParams = 0;\n      formattedParam = (int ********)tempBuffer;\n    }\n    else {\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n      result = numParams + 1;\n      formattedParam = (int ********)tempBuffer;\n    }\n  }\n  else {\n    result = numParams + 1;\n  }\n  loopIndex = result;\n  if (currentChar != '\\0') {\n    paramPointers = (int *******)((int)paramPointers + 1);\n    loopIndex = 1;\n    *formattedParam = (int *******)&currentChar;\n    formattedParam[1] = (int *******)0x1;\n    numParams = result;\n    if (result < 8) {\n      loopIndex = result + 1;\n      formattedParam = formattedParam + 2;\n    }\n    else if (paramPointers == (int *******)0x0) {\n      numParams = 0;\n      formattedParam = (int ********)tempBuffer;\n    }\n    else {\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n      loopIndex = numParams + 1;\n      formattedParam = (int ********)tempBuffer;\n    }\n  }\n  result = loopIndex;\n  iVar17 = numParams;\n  if (isZeroPadded) {\n    paramPointers = (int *******)((int)paramPointers + 2);\n    *formattedParam = (int *******)&paddingChar;\n    formattedParam[1] = (int *******)0x2;\n    if (loopIndex < 8) {\n      result = loopIndex + 1;\n      iVar17 = loopIndex;\n      formattedParam = formattedParam + 2;\n    }\n    else if (paramPointers == (int *******)0x0) {\n      result = 1;\n      iVar17 = 0;\n      formattedParam = (int ********)tempBuffer;\n    }\n    else {\n      numParams = loopIndex;\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n      result = numParams + 1;\n      iVar17 = numParams;\n      formattedParam = (int ********)tempBuffer;\n    }\n  }\n  numParams = iVar17;\n  if ((formatFlags == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)value - (int)totalParams), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          tempValue = pppppppiVar18;\n          numParams = iVar17 + 1;\n          paramPointers = paramPointers + 4;\n          *formattedParam = (int *******)&DAT_00085848;\n          formattedParam[1] = (int *******)0x10;\n          if (7 < numParams) break;\n          result = iVar17 + 2;\n          formattedParam = formattedParam + 2;\nLAB_0008348e:\n          iVar17 = numParams;\n          pppppppiVar18 = tempValue + -4;\n          if ((int)(tempValue + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (paramPointers != (int *******)0x0) {\n          result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n          if (result == 0) {\n            result = numParams + 1;\n            formattedParam = (int ********)tempBuffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        iVar17 = 0;\n        pppppppiVar18 = tempValue + -4;\n        formattedParam = (int ********)tempBuffer;\n      } while (0x10 < (int)(tempValue + -4));\nLAB_000834b4:\n      pppppppiVar18 = tempValue + -4;\n    }\n    paramPointers = (int *******)((int)paramPointers + (int)pppppppiVar18);\n    *formattedParam = (int *******)&DAT_00085848;\n    formattedParam[1] = pppppppiVar18;\n    numParams = result;\n    if (result < 8) {\n      result = result + 1;\n      formattedParam = formattedParam + 2;\n    }\n    else if (paramPointers == (int *******)0x0) {\n      result = 1;\n      numParams = 0;\n      formattedParam = (int ********)tempBuffer;\n    }\n    else {\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n      result = numParams + 1;\n      formattedParam = (int ********)tempBuffer;\n    }\n  }\n  currentFormatSpecifier = (int *******)((int)currentFormatSpecifier - (int)remainingParams);\n  ppppppppiVar16 = (int ********)tempBuffer;\n  if ((int)currentFormatSpecifier < 1) {\nLAB_000832c6:\n    paramPointers = (int *******)((int)paramPointers + (int)remainingParams);\n    *formattedParam = (int *******)pnextFormatSpecifier;\n    formattedParam[1] = remainingParams;\n    remainingParams = paramPointers;\n    numParams = result;\n    if (result < 8) goto LAB_0008345a;\n    if (paramPointers == (int *******)0x0) {\n      numParams = 0;\n    }\n    else {\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    loopIndex = numParams;\n    if (0x10 < (int)currentFormatSpecifier) {\n      do {\n        while( true ) {\n          pppppppiVar18 = currentFormatSpecifier;\n          numParams = loopIndex + 1;\n          paramPointers = paramPointers + 4;\n          *formattedParam = (int *******)&DAT_00085848;\n          formattedParam[1] = (int *******)0x10;\n          if (7 < numParams) break;\n          result = loopIndex + 2;\n          formattedParam = formattedParam + 2;\nLAB_00083282:\n          loopIndex = numParams;\n          currentFormatSpecifier = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (paramPointers != (int *******)0x0) {\n          result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n          if (result == 0) {\n            result = numParams + 1;\n            formattedParam = (int ********)tempBuffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formattedParam = (int ********)tempBuffer;\n        loopIndex = 0;\n        currentFormatSpecifier = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      currentFormatSpecifier = pppppppiVar18 + -4;\n    }\n    paramPointers = (int *******)((int)paramPointers + (int)currentFormatSpecifier);\n    *formattedParam = (int *******)&DAT_00085848;\n    formattedParam[1] = currentFormatSpecifier;\n    if (result < 8) {\n      result = result + 1;\n      formattedParam = formattedParam + 2;\n      goto LAB_000832c6;\n    }\n    if (paramPointers != (int *******)0x0) {\n      numParams = result;\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n      result = numParams + 1;\n      formattedParam = (int ********)tempBuffer;\n      goto LAB_000832c6;\n    }\n    paramBuffers[0] = remainingParams;\n    numParams = 1;\n    formattedParam = (int ********)tempBuffer;\n    tempBuffer = (undefined  [4])pnextFormatSpecifier;\nLAB_0008345a:\n    ppppppppiVar16 = formattedParam + 2;\n    paramPointers = remainingParams;\n  }\n  if (((formatFlags & 4) != 0) &&\n     (currentFormatSpecifier = (int *******)((int)value - (int)totalParams), 0 < (int)currentFormatSpecifier)) {\n    result = numParams;\n    if ((int)currentFormatSpecifier < 0x11) {\n      loopIndex = numParams + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numParams = result + 1;\n          paramPointers = paramPointers + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < numParams) break;\n          loopIndex = result + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          currentFormatSpecifier = currentFormatSpecifier + -4;\n          result = numParams;\n          if ((int)currentFormatSpecifier < 0x11) goto LAB_0008333e;\n        }\n        if (paramPointers != (int *******)0x0) {\n          result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n          if (result == 0) {\n            loopIndex = numParams + 1;\n            ppppppppiVar16 = (int ********)tempBuffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentFormatSpecifier = currentFormatSpecifier + -4;\n        loopIndex = 1;\n        result = 0;\n        ppppppppiVar16 = (int ********)tempBuffer;\n      } while (0x10 < (int)currentFormatSpecifier);\n    }\nLAB_0008333e:\n    paramPointers = (int *******)((int)paramPointers + (int)currentFormatSpecifier);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = currentFormatSpecifier;\n    numParams = loopIndex;\n    if (7 < loopIndex) {\n      if (paramPointers == (int *******)0x0) {\n        if ((int)totalParams < (int)value) {\n          totalParams = value;\n        }\n        numCharsWritten = numCharsWritten + (int)totalParams;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)totalParams < (int)value) {\n    totalParams = value;\n  }\n  numCharsWritten = numCharsWritten + (int)totalParams;\n  if ((paramPointers != (int *******)0x0) &&\n     (result = FUN_00082ac0(inputBuffer,formatBuffer,&formattedParams), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  numParams = 0;\n  formattedParam = (int ********)tempBuffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = nextChar - 0x30;\n  value = (int *******)0x0;\n  currentFormatSpecifier = format;\n  do {\n    format = (int *******)((int)currentFormatSpecifier + 1);\n    nextChar = (uint)*(byte *)currentFormatSpecifier;\n    value = (int *******)(digit + (int)value * 10);\n    digit = nextChar - 0x30;\n    currentFormatSpecifier = format;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  nextChar = (uint)*(byte *)format;\n  if (currentChar == '\\0') {\n    currentChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_and_format_00082b38",
                "param_1": "inputBuffer",
                "param_2": "formatBuffer",
                "param_3": "format",
                "param_4": "args",
                "bVar1": "isNegative",
                "bVar2": "hasPlusSign",
                "bVar3": "hasAlternateForm",
                "cVar4": "conversionSpecifier",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "formattedParam",
                "piVar7": "integerParam",
                "iVar8": "result",
                "cVar9": "charResult",
                "uVar11": "digit",
                "ppiVar12": "paramPointer",
                "uVar13": "formatFlags",
                "uVar14": "nextChar",
                "iVar15": "loopIndex",
                "pppppppiVar10": "currentFormatSpecifier",
                "uVar21": "width",
                "pppppppiVar20": "value",
                "pppppppiVar23": "tempValue",
                "uVar24": "highPart",
                "pppppppiVar25": "nextFormatSpecifier",
                "bVar26": "isLong",
                "lVar27": "combinedValue",
                "local_dc": "totalParams",
                "local_d4": "remainingParams",
                "local_c8": "argListPointer",
                "local_c4": "numCharsWritten",
                "local_c0": "hexUpperCase",
                "local_a1": "currentChar",
                "local_a0": "paddingChar",
                "local_9f": "nibbleValue",
                "local_9c": "formattedParams",
                "local_98": "numParams",
                "local_94": "paramPointers",
                "local_90": "digitChar",
                "cStack_6a": "tempChar",
                "local_69": "minusSign",
                "local_68": "tempBuffer",
                "local_64": "paramBuffers"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 input,int dataOffset)\n\n{\n  int result1;\n  int result2;\n  undefined *buffer [2];\n  undefined4 bufferSize1;\n  ushort dataFlag;\n  undefined2 dataLength;\n  undefined *bufferPtr;\n  undefined4 bufferSize2;\n  undefined4 bufferSize3;\n  undefined4 bufferSize4;\n  undefined4 bufferSize5;\n  undefined4 bufferSize6;\n  undefined temporaryData [1024];\n  \n  bufferSize6 = *(undefined4 *)(dataOffset + 100);\n  bufferSize4 = *(undefined4 *)(dataOffset + 0x1c);\n  dataLength = *(undefined2 *)(dataOffset + 0xe);\n  bufferSize5 = *(undefined4 *)(dataOffset + 0x24);\n  buffer[0] = temporaryData;\n  dataFlag = *(ushort *)(dataOffset + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  bufferSize3 = 0;\n  bufferPtr = buffer[0];\n  result1 = FUN_00082b38(input,buffer);\n  if ((-1 < result1) && (result2 = FUN_00083adc(input,buffer), result2 != 0)) {\n    result1 = -1;\n  }\n  if ((int)((uint)dataFlag << 0x19) < 0) {\n    *(ushort *)(dataOffset + 0xc) = *(ushort *)(dataOffset + 0xc) | 0x40;\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "input",
                "param_2": "dataOffset",
                "iVar1": "result1",
                "iVar2": "result2",
                "local_488": "buffer",
                "local_480": "bufferSize1",
                "local_47c": "dataFlag",
                "local_47a": "dataLength",
                "local_478": "bufferPtr",
                "local_474": "bufferSize2",
                "local_470": "bufferSize3",
                "local_46c": "bufferSize4",
                "local_464": "bufferSize5",
                "local_424": "bufferSize6",
                "auStack_420": "temporaryData"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "handle_relocation_00083808",
            "code": "\nundefined4 handleRelocation_00083808(undefined4 *errorFlag,int *relocationEntry)\n\n{\n  int tmpValue;\n  int var1;\n  uint var2;\n  ushort var3;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  var3 = *(ushort *)(relocationEntry + 3);\n  var2 = (uint)var3;\n  if ((int)(var2 << 0x1c) < 0) {\n    var1 = relocationEntry[4];\n  }\n  else {\n    if (-1 < (int)(var2 << 0x1b)) {\n      *errorFlag = 9;\n      *(ushort *)(relocationEntry + 3) = var3 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(var2 << 0x1d) < 0) {\n      if ((int *)relocationEntry[0xc] != (int *)0x0) {\n        if ((int *)relocationEntry[0xc] != relocationEntry + 0x10) {\n          FUN_00083d9c(errorFlag);\n          var3 = *(ushort *)(relocationEntry + 3);\n        }\n        relocationEntry[0xc] = 0;\n      }\n      var1 = relocationEntry[4];\n      var3 = var3 & 0xffdb;\n      *relocationEntry = var1;\n      relocationEntry[1] = 0;\n    }\n    else {\n      var1 = relocationEntry[4];\n    }\n    *(ushort *)(relocationEntry + 3) = var3 | 8;\n    var2 = (uint)(var3 | 8);\n  }\n  if ((var1 == 0) && ((var2 & 0x280) != 0x200)) {\n    FUN_000842a4(errorFlag,relocationEntry);\n    var2 = (uint)*(ushort *)(relocationEntry + 3);\n    var1 = relocationEntry[4];\n  }\n  if ((var2 & 1) == 0) {\n    tmpValue = 0;\n    if (-1 < (int)(var2 << 0x1e)) {\n      tmpValue = relocationEntry[5];\n    }\n    relocationEntry[2] = tmpValue;\n  }\n  else {\n    relocationEntry[6] = -relocationEntry[5];\n    relocationEntry[2] = 0;\n  }\n  if ((var1 == 0) && ((int)((uint)*(ushort *)(relocationEntry + 3) << 0x18) < 0)) {\n    *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "handle_relocation_00083808",
                "param_1": "errorFlag",
                "param_2": "relocationEntry",
                "iVar1": "tmpValue",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "validate_and_process_data_00083adc",
            "code": "\nundefined4 validate_and_process_data_00083adc(int *data_ptr,int *info_ptr)\n\n{\n  int *temp_ptr;\n  int size_diff;\n  ushort flags;\n  uint flags_temp;\n  int temp;\n  code *callback_func;\n  undefined4 return_value;\n  int temp2;\n  \n  if ((data_ptr != (int *)0x0) && (data_ptr[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(info_ptr + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(info_ptr + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp2 = info_ptr[4];\n    if (temp2 == 0) {\n      return 0;\n    }\n    size_diff = *info_ptr;\n    if ((flags & 3) == 0) {\n      temp = info_ptr[5];\n    }\n    else {\n      temp = 0;\n    }\n    *info_ptr = temp2;\n    size_diff = size_diff - temp2;\n    info_ptr[2] = temp;\n    do {\n      if (size_diff < 1) {\n        return 0;\n      }\n      temp = (*(code *)info_ptr[9])(data_ptr,info_ptr[7],temp2,size_diff,return_value);\n      size_diff = size_diff - temp;\n      temp2 = temp2 + temp;\n    } while (0 < temp);\nLAB_00083a54:\n    *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info_ptr + 3) = flags | 0x800;\n  if ((info_ptr[1] < 1) && (info_ptr[0xf] < 1)) {\n    return 0;\n  }\n  callback_func = (code *)info_ptr[10];\n  if (callback_func == (code *)0x0) {\n    return 0;\n  }\n  flags_temp = (uint)(flags | 0x800);\n  temp2 = *data_ptr;\n  *data_ptr = 0;\n  if ((flags & 0x1000) == 0) {\n    size_diff = (*callback_func)(data_ptr,info_ptr[7],flags_temp & 0x1000,1);\n    if ((size_diff == -1) && (temp = *data_ptr, temp != 0)) {\n      if ((temp == 0x1d) || (temp == 0x16)) {\n        *data_ptr = temp2;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    flags_temp = (uint)*(ushort *)(info_ptr + 3);\n    callback_func = (code *)info_ptr[10];\n  }\n  else {\n    size_diff = info_ptr[0x14];\n  }\n  if (((int)(flags_temp << 0x1d) < 0) && (size_diff = size_diff - info_ptr[1], info_ptr[0xc] != 0)) {\n    size_diff = size_diff - info_ptr[0xf];\n  }\n  size_diff = (*callback_func)(data_ptr,info_ptr[7],size_diff,0);\n  if (size_diff == -1) {\n    temp = *data_ptr;\n    if (temp != 0) {\n      if ((temp != 0x1d) && (temp != 0x16)) {\n        *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) & 0xf7ff;\n      *info_ptr = info_ptr[4];\n      info_ptr[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(info_ptr + 3) & 0xf7ff;\n    info_ptr[1] = 0;\n    *(ushort *)(info_ptr + 3) = flags;\n    *info_ptr = info_ptr[4];\n  }\n  else {\n    flags = *(ushort *)(info_ptr + 3) & 0xf7ff;\n    *info_ptr = info_ptr[4];\n    *(ushort *)(info_ptr + 3) = flags;\n    info_ptr[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    info_ptr[0x14] = size_diff;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)info_ptr[0xc];\n  *data_ptr = temp2;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != info_ptr + 0x10) {\n    FUN_00083d9c(data_ptr);\n  }\n  info_ptr[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "validate_and_process_data_00083adc",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "piVar1": "temp_ptr",
                "iVar2": "size_diff",
                "uVar3": "flags",
                "uVar4": "flags_temp",
                "iVar5": "temp",
                "pcVar6": "callback_func",
                "unaff_r4": "return_value",
                "iVar7": "temp2"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int result;\n  uint count;\n  uint currentByte;\n  byte *tempPtr;\n  uint i;\n  byte byteValue;\n  byte byteStack [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  result = FUN_00084298();\n  if ((result == 1) && (param2 - 1 < 0xff)) {\n    currentByte = param2 & 0xff;\n    byteValue = (byte)currentByte;\n    count = 1;\n  }\n  else {\n    count = FUN_0008456c(param1,&byteValue,param2,param3 + 0x17);\n    if (count == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (count == 0) {\n      return param2;\n    }\n    currentByte = (uint)byteValue;\n  }\n  i = 0;\n  do {\n    tempPtr = param3[2] + -1;\n    param3[2] = tempPtr;\n    if ((int)tempPtr < 0) {\n      if ((int)param3[6] <= (int)tempPtr) {\n        **param3 = (byte)currentByte;\n        tempPtr = *param3;\n        currentByte = (uint)*tempPtr;\n        if (currentByte != 10) goto LAB_00083c90;\n      }\n      result = FUN_000844c4(param1,currentByte,param3);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentByte;\n      tempPtr = *param3;\nLAB_00083c90:\n      *param3 = tempPtr + 1;\n    }\n    if (count <= i + 1) {\n      return param2;\n    }\n    currentByte = (uint)byteStack[i];\n    i = i + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result",
                "uVar2": "count",
                "uVar3": "currentByte",
                "pbVar4": "tempPtr",
                "uVar5": "i",
                "local_1c": "byteValue",
                "abStack_1b": "byteStack"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_relocation_entry_00083d00",
            "code": "\nundefined4 updateRelocationEntry_00083d00(undefined4 param,int offset)\n\n{\n  int returnValue;\n  uint r_infoValue;\n  int newOffset;\n  \n  FUNC_00082598();\n  r_infoValue = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((r_infoValue - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    returnValue = FUN_00082970(param,0);\n    if (returnValue == Elf32_Rel_ARRAY_20070000[141].r_info + r_infoValue) {\n      returnValue = FUN_00082970(param,-newOffset);\n      if (returnValue != -1) {\n        DAT_20071194 = DAT_20071194 - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = r_infoValue - newOffset | 1;\n        FUNC_0008259c(param);\n        return 1;\n      }\n      newOffset = FUN_00082970(param,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_relocation_entry_00083d00",
                "param_1": "param",
                "param_2": "offset",
                "iVar1": "returnValue",
                "uVar2": "r_infoValue",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "extract_and_reorder_data_00083d9c",
            "code": "\nvoid extract_and_reorder_data_00083d9c(undefined4 output,int data_size)\n\n{\n  int temp_var1;\n  bool flag;\n  uint header_value;\n  dword header_address;\n  int temp_var2;\n  uint adjusted_data_size;\n  dword adjusted_header_address;\n  uint offset;\n  dword linked_header_address;\n  \n  if (data_size == 0) {\n    return;\n  }\n  FUNC_00082598();\n  header_value = *(uint *)(data_size + -4);\n  adjusted_header_address = data_size - 8;\n  adjusted_data_size = header_value & 0xfffffffe;\n  header_address = adjusted_header_address + adjusted_data_size;\n  offset = *(uint *)(header_address + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == header_address) {\n    offset = offset + adjusted_data_size;\n    if (-1 < (int)(header_value << 0x1f)) {\n      adjusted_header_address = adjusted_header_address - *(int *)(data_size + -8);\n      temp_var2 = *(int *)(adjusted_header_address + 0xc);\n      temp_var1 = *(int *)(adjusted_header_address + 8);\n      offset = offset + *(int *)(data_size + -8);\n      *(int *)(temp_var1 + 0xc) = temp_var2;\n      *(int *)(temp_var2 + 8) = temp_var1;\n    }\n    header_address = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(adjusted_header_address + 4) = offset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = adjusted_header_address;\n    if (header_address <= offset) {\n      FUN_00083d00(output,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(header_address + 4) = offset;\n    if ((header_value & 1) == 0) {\n      adjusted_header_address = adjusted_header_address - *(int *)(data_size + -8);\n      temp_var1 = *(int *)(adjusted_header_address + 8);\n      adjusted_data_size = adjusted_data_size + *(int *)(data_size + -8);\n      if (temp_var1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        temp_var2 = *(int *)(adjusted_header_address + 0xc);\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(header_address + offset + 4) << 0x1f) {\n      adjusted_data_size = adjusted_data_size + offset;\n      temp_var1 = *(int *)(header_address + 8);\n      if ((!flag) && (temp_var1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = adjusted_header_address;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = adjusted_header_address;\n        *(undefined4 *)(adjusted_header_address + 0xc) = 0x2007046c;\n        *(undefined4 *)(adjusted_header_address + 8) = 0x2007046c;\n        *(uint *)(adjusted_header_address + 4) = adjusted_data_size | 1;\n        *(uint *)(adjusted_header_address + adjusted_data_size) = adjusted_data_size;\n        goto LAB_00083e30;\n      }\n      temp_var2 = *(int *)(header_address + 0xc);\n      *(int *)(temp_var1 + 0xc) = temp_var2;\n      *(int *)(temp_var2 + 8) = temp_var1;\n    }\n    *(uint *)(adjusted_header_address + 4) = adjusted_data_size | 1;\n    *(uint *)(adjusted_header_address + adjusted_data_size) = adjusted_data_size;\n    if (!flag) {\n      if (adjusted_data_size < 0x200) {\n        header_value = adjusted_data_size & 0xfffffff8;\n        temp_var1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + header_value);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(adjusted_data_size >> 3) >> 2 & 0xffU);\n        *(int *)(adjusted_header_address + 8) = temp_var1;\n        *(uint *)(adjusted_header_address + 0xc) = header_value + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + header_value) = adjusted_header_address;\n        *(dword *)(temp_var1 + 0xc) = adjusted_header_address;\n        FUNC_0008259c(output);\n        return;\n      }\n      header_value = adjusted_data_size >> 9;\n      if (header_value < 5) {\n        temp_var1 = (adjusted_data_size >> 6) + 0x38;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (header_value < 0x15) {\n        temp_var1 = header_value + 0x5b;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (header_value < 0x55) {\n        temp_var1 = (adjusted_data_size >> 0xc) + 0x6e;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (header_value < 0x155) {\n        temp_var1 = (adjusted_data_size >> 0xf) + 0x77;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (header_value < 0x555) {\n        temp_var1 = (adjusted_data_size >> 0x12) + 0x7c;\n        temp_var2 = temp_var1 * 2;\n      }\n      else {\n        temp_var2 = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      linked_header_address = temp_var2 * 4 + 0x20070464;\n      header_address = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp_var2];\n      if (header_address == linked_header_address) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        linked_header_address = header_address;\n      }\n      else {\n        do {\n          if ((*(uint *)(header_address + 4) & 0xfffffffc) <= adjusted_data_size) break;\n          header_address = *(dword *)(header_address + 8);\n        } while (linked_header_address != header_address);\n        linked_header_address = *(dword *)(header_address + 0xc);\n      }\n      *(dword *)(adjusted_header_address + 0xc) = linked_header_address;\n      *(dword *)(adjusted_header_address + 8) = header_address;\n      *(dword *)(linked_header_address + 8) = adjusted_header_address;\n      *(dword *)(header_address + 0xc) = adjusted_header_address;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(output);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "extract_and_reorder_data_00083d9c",
                "param_1": "output",
                "param_2": "data_size",
                "iVar1": "temp_var1",
                "bVar2": "flag",
                "uVar3": "header_value",
                "dVar4": "header_address",
                "iVar5": "temp_var2",
                "uVar6": "adjusted_data_size",
                "dVar7": "adjusted_header_address",
                "uVar8": "offset",
                "dVar9": "linked_header_address"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *inputData,uint **additionalData)\n\n{\n  int result;\n  uint var1;\n  uint var2;\n  ushort var3;\n  uint var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint var5;\n  uint var6;\n  uint var7;\n  uint var8;\n  uint var9;\n  \n  if (additionalData[2] != (uint *)0x0) {\n    var3 = *(ushort *)(inputData + 3);\n    var4 = (uint)var3;\n    if (((int)(var4 << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *additionalData;\n    }\n    else {\n      result = FUN_00083808(output,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      var3 = *(ushort *)(inputData + 3);\n      var4 = (uint)var3;\n      ptr2 = *additionalData;\n    }\n    if ((var3 & 2) == 0) {\n      var1 = var4 & 2;\n      var7 = var1;\n      var5 = var1;\n      var9 = var1;\n      if ((var4 & 1) == 0) {\n        var1 = 0;\n        var7 = 0;\n        while( true ) {\n          while (var1 == 0) {\n            var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            var1 = *ptr1;\n          }\n          var5 = inputData[2];\n          if ((int)(var4 << 0x16) < 0) {\n            if (var1 < var5) {\n              var4 = *inputData;\n              var5 = var1;\n            }\n            else if ((var4 & 0x480) == 0) {\n              var4 = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              var5 = result + 1 + var1;\n              var6 = (int)(inputData[5] * 3) / 2;\n              if (var5 <= var6) {\n                var5 = var6;\n              }\n              if ((int)(var4 << 0x15) < 0) {\n                var6 = FUN_00081e14(output,var5);\n                if (var6 == 0) {\n                  *output = 0xc;\n                  var3 = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(var6,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                var6 = FUN_000825b0(output);\n                if (var6 == 0) {\n                  FUN_00083d9c(output,inputData[4]);\n                  var3 = *(ushort *)(inputData + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              var4 = var6 + result;\n              inputData[4] = var6;\n              inputData[5] = var5;\n              *inputData = var4;\n              inputData[2] = var5 - result;\n              var5 = var1;\n            }\n            FUN_00082438(var4,var7,var5);\n            inputData[2] = inputData[2] - var5;\n            *inputData = *inputData + var5;\n            var5 = var1;\n          }\n          else if ((inputData[4] < *inputData) || (var4 = inputData[5], var1 < var4)) {\n            if (var1 < var5) {\n              var5 = var1;\n            }\n            FUN_00082438(*inputData,var7,var5);\n            var4 = inputData[2];\n            inputData[2] = var4 - var5;\n            *inputData = *inputData + var5;\n            if ((var4 - var5 == 0) && (result = FUN_00083adc(output,inputData), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            var5 = 0x7fffffff;\n            if (var1 < 0x7fffffff) {\n              var5 = var1;\n            }\n            var5 = (*(code *)inputData[9])(output,inputData[7],var7,(var5 / var4) * var4);\n            if ((int)var5 < 1) goto LAB_0008402e;\n          }\n          ptr1 = additionalData[2];\n          var7 = var7 + var5;\n          var1 = var1 - var5;\n          additionalData[2] = (uint *)((int)ptr1 - var5);\n          if ((uint *)((int)ptr1 - var5) == (uint *)0x0) break;\n          var4 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (var1 == 0) {\n            var5 = *ptr2;\n            var1 = ptr2[1];\n            var9 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (var9 == 0) {\n            result = FUN_00084384(var5,10,var1);\n            if (result == 0) {\n              var7 = var1 + 1;\n              var9 = 1;\n            }\n            else {\n              var7 = (result + 1) - var5;\n              var9 = 1;\n            }\n          }\n          var6 = *inputData;\n          var4 = var7;\n          if (var1 <= var7) {\n            var4 = var1;\n          }\n          var2 = inputData[5];\n          if ((inputData[4] < var6) && (var8 = inputData[2] + var2, (int)var8 < (int)var4)) {\n            FUN_00082438(var6,var5,var8);\n            *inputData = *inputData + var8;\n            result = FUN_00083adc(output,inputData);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)var4 < (int)var2) {\n            FUN_00082438(var6,var5,var4);\n            inputData[2] = inputData[2] - var4;\n            *inputData = var4 + *inputData;\n            var8 = var4;\n          }\n          else {\n            var8 = (*(code *)inputData[9])(output,inputData[7],var5,var2);\n            if ((int)var8 < 1) goto LAB_0008402e;\n          }\n          var7 = var7 - var8;\n          if (var7 == 0) {\n            result = FUN_00083adc(output,inputData);\n            if (result != 0) goto LAB_0008402e;\n            var9 = 0;\n          }\n          ptr1 = additionalData[2];\n          var5 = var5 + var8;\n          var1 = var1 - var8;\n          additionalData[2] = (uint *)((int)ptr1 - var8);\n        } while ((uint *)((int)ptr1 - var8) != (uint *)0x0);\n      }\n    }\n    else {\n      var1 = 0;\n      var4 = 0;\n      do {\n        while( true ) {\n          var7 = var4;\n          if (0x7ffffbff < var4) {\n            var7 = 0x7ffffc00;\n          }\n          if (var4 != 0) break;\n          var1 = *ptr2;\n          var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(output,inputData[7],var1,var7);\n        if (result < 1) {\nLAB_0008402e:\n          var3 = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = var3 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = additionalData[2];\n        var1 = var1 + result;\n        var4 = var4 - result;\n        additionalData[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "inputData",
                "param_3": "additionalData",
                "iVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "var5",
                "uVar9": "var6",
                "uVar10": "var7",
                "uVar11": "var8",
                "local_2c": "var9"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_magic_number_00084290",
            "code": "\nuint32 getMagicNumber_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_magic_number_00084290",
                "undefined4": "uint32"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationArray[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nvoid processData_000842a4(int input,int *output)\n\n{\n  ushort value;\n  int result;\n  int errorCode;\n  uint temp;\n  bool flag;\n  undefined temporaryData [4];\n  uint localTemp;\n  \n  value = *(ushort *)(output + 3);\n  temp = (uint)value;\n  if ((int)(temp << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(input,(int)*(short *)((int)output + 0xe),temporaryData);\n    if (-1 < result) {\n      flag = (localTemp & 0xf000) == 0x2000;\n      if (((localTemp & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value = *(ushort *)(output + 3);\n    temp = (uint)value;\n  }\n  *(ushort *)(output + 3) = value | 0x800;\n  if ((temp & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  errorCode = FUN_00081e14(input,result);\n  value = *(ushort *)(output + 3);\n  if (errorCode == 0) {\n    if (-1 < (int)((uint)value << 0x16)) {\n      *(ushort *)(output + 3) = value | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = value | 0x80;\n    *output = errorCode;\n    output[4] = errorCode;\n    output[5] = result;\n    if ((flag) && (result = FUN_000846dc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "value",
                "iVar2": "result",
                "iVar3": "errorCode",
                "uVar4": "temp",
                "bVar5": "flag",
                "auStack_54": "temporaryData",
                "local_50": "localTemp"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_char_in_buffer_00084384",
            "code": "\nuint * find_char_in_buffer_00084384(uint *buffer,char target_char,uint buffer_size)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_match;\n  \n  if (((uint)buffer & 3) == 0) {\nLAB_000843b4:\n    if (3 < buffer_size) {\n      current_ptr = buffer;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        buffer = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        buffer_size = buffer_size - 4;\n        buffer = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < buffer_size);\n    }\n    if (buffer_size == 0) {\n      buffer = (uint *)0x0;\n    }\n    else if (*(char *)buffer != target_char) {\n      index = 0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        is_match = index == buffer_size - 1;\n        index = index + 1;\n        if (is_match) goto LAB_000843dc;\n      } while (*(char *)buffer != target_char);\n    }\n  }\n  else if (buffer_size == 0) {\nLAB_000843dc:\n    buffer = (uint *)0x0;\n  }\n  else if (*(char *)buffer != target_char) {\n    current_ptr = (uint *)((int)buffer + 1);\n    buffer_size = buffer_size - 1;\n    do {\n      buffer = current_ptr;\n      if (((uint)buffer & 3) == 0) goto LAB_000843b4;\n      if (buffer_size == 0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)buffer + 1);\n      buffer_size = buffer_size - 1;\n    } while (*(char *)buffer != target_char);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_size",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_match"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "clear_flags_and_check_error_00084464",
            "code": "\nvoid clearFlagsAndCheckError_00084464(int *data,int ptr,undefined4 val1,undefined4 val2)\n\n{\n  int result;\n  ushort flags;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  flags = *(ushort *)(ptr + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    FUN_00084700(data,(int)*(short *)(ptr + 0xe),0,2);\n    flags = *(ushort *)(ptr + 0xc);\n  }\n  *(ushort *)(ptr + 0xc) = flags & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(ptr + 0xe),val1,val2,val2,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *data = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "clear_flags_and_check_error_00084464",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "val1",
                "param_4": "val2",
                "iVar1": "result",
                "uVar2": "flags",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_status_0008449c",
            "code": "\nvoid updateStatus_0008449c(undefined4 param_1,int buf)\n\n{\n  int status;\n  ushort updatedFlag;\n  \n  status = FUN_00084700(param_1,(int)*(short *)(buf + 0xe));\n  if (status == -1) {\n    updatedFlag = *(ushort *)(buf + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(buf + 0xc) | 0x1000;\n  }\n  if (status != -1) {\n    *(int *)(buf + 0x50) = status;\n  }\n  *(ushort *)(buf + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_status_0008449c",
                "param_2": "buf",
                "iVar1": "status",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int input,uint value,undefined4 *buffer,undefined4 param)\n\n{\n  ushort ushortValue;\n  uint uintValue;\n  undefined *ptr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  ushortValue = *(ushort *)(buffer + 3);\n  uintValue = (uint)ushortValue;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(uintValue << 0x1c)) || (index = buffer[4], index == 0)) {\n    index = FUN_00083808(input,buffer,ushortValue,uintValue,param);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(buffer + 3);\n    index = buffer[4];\n    uintValue = (uint)ushortValue;\n  }\n  value = value & 0xff;\n  if ((int)(uintValue << 0x12) < 0) {\n    ptr = (undefined *)*buffer;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = ushortValue | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(input,buffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*buffer;\n  index = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = ptr + 1;\n  *ptr = (char)value;\n  if (((buffer[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (value == 10)))) &&\n     (index = FUN_00083adc(input,buffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "input",
                "param_2": "value",
                "param_3": "buffer",
                "param_4": "param",
                "uVar1": "ushortValue",
                "uVar2": "uintValue",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *dataPointer,int dataSize,undefined4 param3Value,undefined4 *resultPointer)\n\n{\n  code *functionPointer;\n  undefined4 returnValue;\n  int errorCode;\n  undefined temporaryBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (dataSize == 0) {\n    returnValue = FUN_00084290();\n    errorCode = (*functionPointer)(dataPointer,temporaryBuffer,0,returnValue,resultPointer);\n  }\n  else {\n    returnValue = FUN_00084290();\n    errorCode = (*functionPointer)(dataPointer,dataSize,param3Value,returnValue,resultPointer);\n  }\n  if (errorCode == -1) {\n    *resultPointer = 0;\n    *dataPointer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "param_3": "param3Value",
                "param_4": "resultPointer",
                "pcVar1": "functionPointer",
                "uVar2": "returnValue",
                "iVar3": "errorCode",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "write_byte_to_memory_000845bc",
            "code": "\nundefined4 write_byte_to_memory_000845bc(undefined4 *memory_address,undefined *buffer,uint value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *memory_address = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_000845bc",
                "param_1": "memory_address",
                "param_2": "buffer",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_input_000846a4",
            "code": "\nundefined4 processInput_000846a4(int inputParam)\n\n{\n  dword offset;\n  undefined4 returnValue;\n  int result;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (inputParam != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(inputParam + 0xc) != 0) {\n      returnValue = FUN_00083adc(offset,inputParam);\n      if ((*(code **)(inputParam + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(inputParam + 0x2c))(offset,*(undefined4 *)(inputParam + 0x1c)), result < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputParam + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(inputParam + 0x10));\n      }\n      if (*(int *)(inputParam + 0x30) != 0) {\n        if (*(int *)(inputParam + 0x30) != inputParam + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(inputParam + 0x30) = 0;\n      }\n      if (*(int *)(inputParam + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(inputParam + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(inputParam + 0xc) = 0;\n      FUNC_00083c0c();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_input_000846a4",
                "param_1": "inputParam",
                "dVar1": "offset",
                "uVar2": "returnValue",
                "iVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "find_and_assign_error_code_000846b4",
            "code": "\nvoid findAndAssignErrorCode_000846b4(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int errorCode;\n  \n  DAT_200711bc = 0;\n  errorCode = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((errorCode == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "find_and_assign_error_code_000846b4",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "update_parameter_if_valid_000846dc",
            "code": "\nvoid updateParameterIfValid_000846dc(int *outputParam,undefined4 inputParam)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(inputParam);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputParam = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "update_parameter_if_valid_000846dc",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_value_00084700",
            "code": "\nvoid checkAndAssignValue_00084700(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c2(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_value_00084700",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_error_and_assign_00084728",
            "code": "\nvoid checkErrorAndAssign_00084728(int *output,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(value1,value2,value3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_error_and_assign_00084728",
                "param_1": "output",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_params_00084750",
            "code": "\nint checkParams_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_params_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_values_and_update_0008477c",
            "code": "\nvoid subtractValuesAndUpdate_0008477c(uint inputValue,int secondParameter,undefined4 fourthByte,undefined4 thirdByte,int *outputArray)\n\n{\n  uint result;\n  longlong multipliedValue;\n  \n  multipliedValue = FUN_000847e0();\n  multipliedValue = multipliedValue * CONCAT44(thirdByte,fourthByte);\n  result = (uint)multipliedValue;\n  *outputArray = inputValue - result;\n  outputArray[1] = (secondParameter - (int)((ulonglong)multipliedValue >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_values_and_update_0008477c",
                "param_1": "inputValue",
                "param_2": "secondParameter",
                "param_3": "fourthByte",
                "param_4": "thirdByte",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "multipliedValue"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculateDifference_000847ac(uint input1,int input2,undefined4 multiplier1,undefined4 multiplier2,int *result)\n\n{\n  uint tempResult;\n  longlong product;\n  \n  product = FUN_00084a80();\n  product = product * CONCAT44(multiplier2,multiplier1);\n  tempResult = (uint)product;\n  *result = input1 - tempResult;\n  result[1] = (input2 - (int)((ulonglong)product >> 0x20)) - (uint)(input1 < tempResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "multiplier1",
                "param_4": "multiplier2",
                "param_5": "result",
                "uVar1": "tempResult",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_unsigned_integers_000847e0",
            "code": "\nundefined8 divideUnsignedIntegers_000847e0(uint dividend,uint dividendUpper,uint divisor,uint divisorUpper)\n\n{\n  longlong product;\n  uint quotientLower;\n  uint quotientUpper;\n  uint remainderLower;\n  uint remainderUpper;\n  int shiftCount;\n  uint temp1;\n  uint temp2;\n  uint isNegativeDividend;\n  uint isNegativeDivisor;\n  uint temp3;\n  uint temporary1;\n  bool carryFlag;\n  \n  if ((int)dividendUpper < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    dividendUpper = -dividendUpper - (uint)carryFlag;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorUpper < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    carryFlag = divisor != 0;\n    divisor = -divisor;\n    divisorUpper = -divisorUpper - (uint)carryFlag;\n  }\n  if (divisorUpper == 0) {\n    if (dividendUpper < divisor) {\n      shiftCount = LZCOUNT(divisor);\n      if (shiftCount != 0) {\n        quotientUpper = dividend >> (0x20U - shiftCount & 0xff);\n        divisor = divisor << shiftCount;\n        dividend = dividend << shiftCount;\n        dividendUpper = dividendUpper << shiftCount | quotientUpper;\n      }\n      quotientLower = divisor >> 0x10;\n      remainderLower = dividendUpper / quotientLower;\n      temp1 = (divisor & 0xffff) * remainderLower;\n      isNegativeDivisor = dividend >> 0x10 | (dividendUpper - quotientLower * remainderLower) * 0x10000;\n      quotientUpper = remainderLower;\n      if (isNegativeDivisor <= temp1 && temp1 - isNegativeDivisor != 0) {\n        carryFlag = CARRY4(isNegativeDivisor,divisor);\n        isNegativeDivisor = isNegativeDivisor + divisor;\n        quotientUpper = remainderLower - 1;\n        if ((carryFlag == false) && (isNegativeDivisor <= temp1 && temp1 - isNegativeDivisor != 0)) {\n          quotientUpper = remainderLower - 2;\n          isNegativeDivisor = isNegativeDivisor + divisor;\n        }\n      }\n      temp2 = (isNegativeDivisor - temp1) / quotientLower;\n      remainderLower = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((isNegativeDivisor - temp1) - quotientLower * temp2) * 0x10000;\n      quotientLower = temp2;\n      if (temp1 <= remainderLower && remainderLower - temp1 != 0) {\n        quotientLower = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= remainderLower && remainderLower - (temp1 + divisor) != 0)) {\n          quotientLower = temp2 - 2;\n        }\n      }\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      quotientUpper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftCount = LZCOUNT(divisor);\n      if (shiftCount == 0) {\n        dividendUpper = dividendUpper - divisor;\n        remainderLower = divisor >> 0x10;\n        temporary1 = divisor & 0xffff;\n        quotientUpper = 1;\n      }\n      else {\n        divisor = divisor << shiftCount;\n        quotientUpper = dividendUpper >> (0x20U - shiftCount & 0xff);\n        remainderLower = divisor >> 0x10;\n        isNegativeDivisor = quotientUpper / remainderLower;\n        temporary1 = divisor & 0xffff;\n        temp1 = temporary1 * isNegativeDivisor;\n        temp2 = dividend >> (0x20U - shiftCount & 0xff) | dividendUpper << shiftCount;\n        quotientUpper = temp2 >> 0x10 | (quotientUpper - remainderLower * isNegativeDivisor) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotientLower = isNegativeDivisor;\n        if (quotientUpper <= temp1 && temp1 - quotientUpper != 0) {\n          carryFlag = CARRY4(quotientUpper,divisor);\n          quotientUpper = quotientUpper + divisor;\n          quotientLower = isNegativeDivisor - 1;\n          if ((carryFlag == false) && (quotientUpper <= temp1 && temp1 - quotientUpper != 0)) {\n            quotientLower = isNegativeDivisor - 2;\n            quotientUpper = quotientUpper + divisor;\n          }\n        }\n        remainderUpper = (quotientUpper - temp1) / remainderLower;\n        isNegativeDivisor = temporary1 * remainderUpper;\n        dividendUpper = temp2 & 0xffff | ((quotientUpper - temp1) - remainderLower * remainderUpper) * 0x10000;\n        quotientUpper = remainderUpper;\n        if (dividendUpper <= isNegativeDivisor && isNegativeDivisor - dividendUpper != 0) {\n          carryFlag = CARRY4(dividendUpper,divisor);\n          dividendUpper = dividendUpper + divisor;\n          quotientUpper = remainderUpper - 1;\n          if ((carryFlag == false) && (dividendUpper <= isNegativeDivisor && isNegativeDivisor - dividendUpper != 0)) {\n            quotientUpper = remainderUpper - 2;\n            dividendUpper = dividendUpper + divisor;\n          }\n        }\n        dividendUpper = dividendUpper - isNegativeDivisor;\n        quotientUpper = quotientUpper | quotientLower << 0x10;\n      }\n      quotientLower = dividendUpper / remainderLower;\n      isNegativeDivisor = temporary1 * quotientLower;\n      temp2 = dividend >> 0x10 | (dividendUpper - remainderLower * quotientLower) * 0x10000;\n      temp1 = quotientLower;\n      if (temp2 <= isNegativeDivisor && isNegativeDivisor - temp2 != 0) {\n        carryFlag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotientLower - 1;\n        if ((carryFlag == false) && (temp2 <= isNegativeDivisor && isNegativeDivisor - temp2 != 0)) {\n          temp1 = quotientLower - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      remainderUpper = (temp2 - isNegativeDivisor) / remainderLower;\n      temporary1 = temporary1 * remainderUpper;\n      remainderLower = dividend & 0xffff | ((temp2 - isNegativeDivisor) - remainderLower * remainderUpper) * 0x10000;\n      quotientLower = remainderUpper;\n      if (remainderLower <= temporary1 && temporary1 - remainderLower != 0) {\n        quotientLower = remainderUpper - 1;\n        if ((CARRY4(remainderLower,divisor) == false) &&\n           (remainderLower + divisor <= temporary1 && temporary1 - (remainderLower + divisor) != 0)) {\n          quotientLower = remainderUpper - 2;\n        }\n      }\n      quotientLower = quotientLower | temp1 << 0x10;\n    }\n  }\n  else if (dividendUpper < divisorUpper) {\n    quotientUpper = 0;\n    quotientLower = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(divisorUpper);\n    if (shiftCount == 0) {\n      if ((divisorUpper < dividendUpper) || (divisor <= dividend)) {\n        quotientUpper = 0;\n        quotientLower = 1;\n      }\n      else {\n        quotientLower = 0;\n        quotientUpper = 0;\n      }\n    }\n    else {\n      quotientUpper = 0x20 - shiftCount;\n      remainderLower = dividendUpper >> (quotientUpper & 0xff);\n      temporary1 = divisor >> (quotientUpper & 0xff) | divisorUpper << shiftCount;\n      isNegativeDivisor = temporary1 >> 0x10;\n      quotientLower = remainderLower / isNegativeDivisor;\n      temp2 = (temporary1 & 0xffff) * quotientLower;\n      temp1 = dividendUpper << shiftCount | dividend >> (quotientUpper & 0xff);\n      remainderLower = temp1 >> 0x10 | (remainderLower - isNegativeDivisor * quotientLower) * 0x10000;\n      quotientUpper = quotientLower;\n      if (remainderLower <= temp2 && temp2 - remainderLower != 0) {\n        carryFlag = CARRY4(remainderLower,temporary1);\n        remainderLower = remainderLower + temporary1;\n        quotientUpper = quotientLower - 1;\n        if ((carryFlag == false) && (remainderLower <= temp2 && temp2 - remainderLower != 0)) {\n          quotientUpper = quotientLower - 2;\n          remainderLower = remainderLower + temporary1;\n        }\n      }\n      remainderUpper = (remainderLower - temp2) / isNegativeDivisor;\n      temp3 = (temporary1 & 0xffff) * remainderUpper;\n      remainderLower = temp1 & 0xffff | ((remainderLower - temp2) - isNegativeDivisor * remainderUpper) * 0x10000;\n      quotientLower = remainderUpper;\n      if (remainderLower <= temp3 && temp3 - remainderLower != 0) {\n        carryFlag = CARRY4(remainderLower,temporary1);\n        remainderLower = remainderLower + temporary1;\n        quotientLower = remainderUpper - 1;\n        if ((carryFlag == false) && (remainderLower <= temp3 && temp3 - remainderLower != 0)) {\n          quotientLower = remainderUpper - 2;\n          remainderLower = remainderLower + temporary1;\n        }\n      }\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      product = (ulonglong)quotientLower * (ulonglong)(divisor << shiftCount);\n      temp1 = (uint)((ulonglong)product >> 0x20);\n      quotientUpper = 0;\n      if ((remainderLower - temp3 < temp1) ||\n         ((remainderLower - temp3 == temp1 && (dividend << shiftCount < (uint)product)))) {\n        quotientLower = quotientLower - 1;\n        quotientUpper = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    carryFlag = quotientLower != 0;\n    quotientLower = -quotientLower;\n    quotientUpper = -quotientUpper - (uint)carryFlag;\n  }\n  return CONCAT44(quotientUpper,quotientLower);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_unsigned_integers_000847e0",
                "param_1": "dividend",
                "param_2": "dividendUpper",
                "param_3": "divisor",
                "param_4": "divisorUpper",
                "lVar1": "product",
                "uVar2": "quotientLower",
                "uVar3": "quotientUpper",
                "uVar4": "remainderLower",
                "uVar5": "remainderUpper",
                "iVar6": "shiftCount",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "isNegativeDividend",
                "uVar10": "isNegativeDivisor",
                "uVar11": "temp3",
                "uVar12": "temporary1",
                "bVar13": "carryFlag"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "division_with_remainder_00084a80",
            "code": "\nulonglong divisionWithRemainder_00084a80(uint dividend,uint divisor1,uint divisor2,uint divisor3)\n\n{\n  longlong result;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint quotient4;\n  uint remainder1;\n  uint remainder2;\n  uint remainder3;\n  uint remainder4;\n  int shift;\n  bool carry;\n  \n  if (divisor3 == 0) {\n    if (divisor2 <= divisor1) {\n      if (divisor2 == 0) {\n        divisor2 = 1 / 0;\n      }\n      shift = LZCOUNT(divisor2);\n      if (shift == 0) {\n        divisor1 = divisor1 - divisor2;\n        quotient2 = divisor2 >> 0x10;\n        quotient4 = divisor2 & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        divisor2 = divisor2 << shift;\n        remainder3 = divisor1 >> (0x20U - shift & 0xff);\n        quotient2 = divisor2 >> 0x10;\n        remainder4 = remainder3 / quotient2;\n        quotient4 = divisor2 & 0xffff;\n        quotient1 = quotient4 * remainder4;\n        remainder1 = dividend >> (0x20U - shift & 0xff) | divisor1 << shift;\n        quotient3 = remainder1 >> 0x10 | (remainder3 - quotient2 * remainder4) * 0x10000;\n        dividend = dividend << shift;\n        remainder3 = remainder4;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carry = carry4(quotient3,divisor2);\n          quotient3 = quotient3 + divisor2;\n          remainder3 = remainder4 - 1;\n          if ((carry == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            remainder3 = remainder4 - 2;\n            quotient3 = quotient3 + divisor2;\n          }\n        }\n        remainder2 = (quotient3 - quotient1) / quotient2;\n        remainder4 = quotient4 * remainder2;\n        divisor1 = remainder1 & 0xffff | ((quotient3 - quotient1) - quotient2 * remainder2) * 0x10000;\n        quotient1 = remainder2;\n        if (divisor1 <= remainder4 && remainder4 - divisor1 != 0) {\n          carry = carry4(divisor1,divisor2);\n          divisor1 = divisor1 + divisor2;\n          quotient1 = remainder2 - 1;\n          if ((carry == false) && (divisor1 <= remainder4 && remainder4 - divisor1 != 0)) {\n            quotient1 = remainder2 - 2;\n            divisor1 = divisor1 + divisor2;\n          }\n        }\n        divisor1 = divisor1 - remainder4;\n        quotient1 = quotient1 | remainder3 << 0x10;\n      }\n      remainder4 = divisor1 / quotient2;\n      quotient3 = quotient4 * remainder4;\n      remainder1 = dividend >> 0x10 | (divisor1 - quotient2 * remainder4) * 0x10000;\n      remainder3 = remainder4;\n      if (remainder1 <= quotient3 && quotient3 - remainder1 != 0) {\n        carry = carry4(remainder1,divisor2);\n        remainder1 = remainder1 + divisor2;\n        remainder3 = remainder4 - 1;\n        if ((carry == false) && (remainder1 <= quotient3 && quotient3 - remainder1 != 0)) {\n          remainder3 = remainder4 - 2;\n          remainder1 = remainder1 + divisor2;\n        }\n      }\n      remainder4 = (remainder1 - quotient3) / quotient2;\n      quotient4 = quotient4 * remainder4;\n      remainder1 = dividend & 0xffff | ((remainder1 - quotient3) - quotient2 * remainder4) * 0x10000;\n      quotient2 = remainder4;\n      if (remainder1 <= quotient4 && quotient4 - remainder1 != 0) {\n        quotient2 = remainder4 - 1;\n        if ((carry4(remainder1,divisor2) == false) &&\n           (remainder1 + divisor2 <= quotient4 && quotient4 - (remainder1 + divisor2) != 0)) {\n          quotient2 = remainder4 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | remainder3 << 0x10);\n    }\n    shift = LZCOUNT(divisor2);\n    if (shift != 0) {\n      remainder3 = dividend >> (0x20U - shift & 0xff);\n      divisor2 = divisor2 << shift;\n      dividend = dividend << shift;\n      divisor1 = remainder3 | divisor1 << shift;\n    }\n    quotient1 = divisor2 >> 0x10;\n    quotient2 = divisor1 / quotient1;\n    quotient4 = (divisor2 & 0xffff) * quotient2;\n    remainder4 = dividend >> 0x10 | (divisor1 - quotient1 * quotient2) * 0x10000;\n    remainder3 = quotient2;\n    if (remainder4 <= quotient4 && quotient4 - remainder4 != 0) {\n      carry = carry4(remainder4,divisor2);\n      remainder4 = remainder4 + divisor2;\n      remainder3 = quotient2 - 1;\n      if ((carry == false) && (remainder4 <= quotient4 && quotient4 - remainder4 != 0)) {\n        remainder3 = quotient2 - 2;\n        remainder4 = remainder4 + divisor2;\n      }\n    }\n    remainder1 = (remainder4 - quotient4) / quotient1;\n    quotient2 = (divisor2 & 0xffff) * remainder1;\n    quotient4 = dividend & 0xffff | ((remainder4 - quotient4) - quotient1 * remainder1) * 0x10000;\n    quotient1 = remainder1;\n    if (quotient4 <= quotient2 && quotient2 - quotient4 != 0) {\n      quotient1 = remainder1 - 1;\n      if ((carry4(quotient4,divisor2) == false) &&\n         (quotient4 + divisor2 <= quotient2 && quotient2 - (quotient4 + divisor2) != 0)) {\n        quotient1 = remainder1 - 2;\n      }\n    }\n    quotient1 = quotient1 | remainder3 << 0x10;\n  }\n  else {\n    if (divisor1 < divisor3) {\n      return 0;\n    }\n    shift = LZCOUNT(divisor3);\n    if (shift == 0) {\n      if ((divisor3 < divisor1) || (divisor2 <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift;\n      remainder3 = divisor1 >> (quotient1 & 0xff);\n      quotient2 = divisor3 << shift | divisor2 >> (quotient1 & 0xff);\n      quotient4 = quotient2 >> 0x10;\n      quotient3 = remainder3 / quotient4;\n      remainder4 = (quotient2 & 0xffff) * quotient3;\n      remainder1 = dividend >> (quotient1 & 0xff) | divisor1 << shift;\n      quotient1 = remainder1 >> 0x10 | (remainder3 - quotient4 * quotient3) * 0x10000;\n      remainder3 = quotient3;\n      if (quotient1 <= remainder4 && remainder4 - quotient1 != 0) {\n        carry = carry4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        remainder3 = quotient3 - 1;\n        if ((carry == false) && (quotient1 <= remainder4 && remainder4 - quotient1 != 0)) {\n          remainder3 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - remainder4) / quotient4;\n      remainder2 = (quotient2 & 0xffff) * quotient3;\n      quotient4 = remainder1 & 0xffff | ((quotient1 - remainder4) - quotient4 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (quotient4 <= remainder2 && remainder2 - quotient4 != 0) {\n        carry = carry4(quotient4,quotient2);\n        quotient4 = quotient4 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry == false) && (quotient4 <= remainder2 && remainder2 - quotient4 != 0)) {\n          quotient1 = quotient3 - 2;\n          quotient4 = quotient4 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | remainder3 << 0x10;\n      result = (ulonglong)quotient1 * (ulonglong)(divisor2 << shift);\n      remainder3 = (uint)((ulonglong)result >> 0x20);\n      if ((quotient4 - remainder2 < remainder3) || ((quotient4 - remainder2 == remainder3 && (dividend << shift < (uint)result)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "division_with_remainder_00084a80",
                "param_1": "dividend",
                "param_2": "divisor1",
                "param_3": "divisor2",
                "param_4": "divisor3",
                "lVar1": "result",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "quotient4",
                "uVar6": "remainder1",
                "uVar7": "remainder2",
                "uVar8": "remainder3",
                "uVar9": "remainder4",
                "iVar10": "shift",
                "bVar11": "carry",
                "CARRY4": "carry4"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 97678,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}