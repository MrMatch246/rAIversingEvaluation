{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000804a8": "start_timer",
                "FUN_000816a8": "run_application_000816a8",
                "do_nothing_000816a6": "do_nothing_1",
                "FUN_00080ce0": "process_data",
                "FUNC_000805d0": "check_inputs",
                "FUN_00080ae4": "setup_hardware",
                "do_nothing_0008120c": "set_mode",
                "DAT_000816d0": "data_received",
                "FUN_000816d4": "initialize_system"
            },
            "code": "void run_application_000816a8(void)\n{\n  initialize_system();\n  setup_hardware();\n  do_nothing_1();\n  set_mode(1);\n  start_timer();\n  do {\n    do {\n      check_inputs();\n    } while (DAT_000816d0 == 0);\n    process_data();\n  } while( true );\n}",
            "called": [
                "FUN_000805d0",
                "FUN_0008120c",
                "FUN_000804a8",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_00080ce0",
                "FUN_00080ae4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": true,
            "current_name": "run_application_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_uint_at_offset_00081042",
                "param_1": "data",
                "param_2": "bits_to_set",
                "PTR_": "",
                "param_3": "bit_mask",
                "param_4": "offset",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_bits_in_uint_at_offset_00081042(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_/DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_zDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "set_bits_in_uint_at_offset_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "iVar2": "result",
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "data",
                "piVar3": "current_data",
                "puVar5": "current_data_ptr",
                "piVar1": "current_ptr",
                "param_2": "length",
                "param_3": "ptr_array",
                "uVar4": "i",
                "uVar7": "current_length_in_bytes",
                "uVar6": "current_length"
            },
            "code": "int process_data_00082ac0(undefined4 data, int length, int **ptr_array) {\n  int *current_ptr = *ptr_array;\n  int total_length = *(int *)(length + 100) << 0x12;\n  if (total_length < -1) {\n    int result = FUNC_00083f34();\n    ptr_array[2] = NULL;\n    ptr_array[1] = NULL;\n    return result;\n  }\n  int *current_data = ptr_array[2];\n  while (current_data != NULL) {\n    uint current_length = current_ptr[1] >> 2;\n    if (current_length != 0) {\n      undefined4 *current_data_ptr = (undefined4 *)(*current_ptr + -4);\n      uint i = 0;\n      do {\n        current_data_ptr++;\n        int result = process_data_00082ac0(data, *current_data_ptr, length);\n        i++;\n        if (result == -1) goto exit;\n      } while (current_length != i);\n      current_data = ptr_array[2];\n    }\n    current_data = (int *)((int)current_data - (current_ptr[1] & 0xfffffffc));\n    ptr_array[2] = current_data;\n    current_ptr += 2;\n  }\n  return 0;\n  exit:\n  ptr_array[2] = NULL;\n  ptr_array[1] = NULL;\n  return -1;\n}",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "iVar1": "result",
                "PTR_DAT_00080d20": "PTR_DAT_00080d20",
                "FUN_00080ce0": "check_data_and_do_nothing_00080ce0",
                "PTR_DAT_00080d18": "PTR_DAT_00080d18",
                "PTR_DAT_00080d14": "PTR_DAT_00080d14",
                "do_nothing_00080abc": "do_nothing_00080abc",
                "do_nothing_00080aba": "do_nothing_00080aba",
                "PTR_DAT_00080d1c": "PTR_DAT_00080d1c",
                "do_nothing_00080aa8": "do_nothing_00080aa8",
                "FUN_000813e4": "check_data",
                "do_nothing_00080ab8": "do_nothing_00080ab8"
            },
            "code": "void check_data_and_do_nothing_00080ce0(void)\n{\n  int result;\n  result = check_data(PTR_DAT_00080d14);\n  if (result != 0) {\n    do_nothing_00080aa8();\n  }\n  result = check_data(PTR_DAT_00080d18);\n  if (result != 0) {\n    do_nothing_00080ab8();\n  }\n  result = check_data(PTR_DAT_00080d1c);\n  if (result != 0) {\n    do_nothing_00080aba();\n  }\n  result = check_data(PTR_DAT_00080d20);\n  if (result != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}",
            "called": [
                "FUN_00080aba",
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_000813e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "check_data_and_do_nothing_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "uVar1": "computed_value",
                "FUN_00081682": "initialize_array_with_zeroes_00081682",
                "param_1": "array_pointer",
                "param_2": "array_size"
            },
            "code": "undefined4* initialize_array_with_zeroes_00081682(undefined4* array_pointer, int array_size)\n{\n  undefined4 zero = 0;\n  array_pointer[0] = zero;\n  array_pointer[1] = zero;\n  array_pointer[2] = zero;\n  if (array_size != 0) {\n    undefined4 computed_value = FUN_00082a50(array_size);\n    FUN_0008165c(array_pointer, array_size, computed_value);\n  }\n  return array_pointer;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": true,
            "current_name": "initialize_array_with_zeroes_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_00081e04": "reverse_array",
                "FUN_000815fe": "reverse_and_return_pointer_000815fe",
                "param_1": "pointer_to_reverse"
            },
            "code": "undefined4 reverse_and_return_pointer_000815fe(undefined4 *pointer_to_reverse)\n{\n  reverse_array(*pointer_to_reverse);\n  return pointer_to_reverse;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": true,
            "current_name": "reverse_and_return_pointer_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "uVar1": "shift_amount",
                "param_1": "num",
                "FUN_00081d1c": "reverse_bits_00081d1c"
            },
            "code": "uint reverse_bits_00081d1c(uint num) {\n  uint shift_amount;\n  if (((num & 0x80000000) != 0) || (num << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((num << 1) >> 0x18);\n  if (shift_amount >= 0) {\n    return (num << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((num & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "reverse_bits_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "uVar1": "multiplication_result",
                "param_1": "input_value",
                "lVar2": "product_result",
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_2": "input_value2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "result_array"
            },
            "code": "void calculate_difference_000847ac(uint input_value, int input_value2, uint32_t param_3, uint32_t param_4, int *result_array)\n{\n  uint32_t multiplication_result;\n  longlong product_result;\n  product_result = get_current_time();\n  product_result = product_result * ((uint64_t)param_4 << 32 | param_3);\n  multiplication_result = (uint32_t)product_result;\n  *result_array = input_value - multiplication_result;\n  result_array[1] = (input_value2 - (int)(product_result >> 32)) - (uint)(input_value < multiplication_result);\n  return;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": true,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "DAT_00080134": "is_function_ptr_available",
                "DAT_00080144": "function_code_ptr",
                "PTR_DAT_0008013c": "data_ptr",
                "param_1": "is_data_available",
                "FUN_00080118": "execute_function_if_available_00080118",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "param_4": "function_param",
                "DAT_00080140": "function_ptr"
            },
            "code": "void execute_function_if_available_00080118(bool is_data_available, void* PTR_DAT_0008013c, int data_size, void* DAT_00080140, int function_param) {\n  if (is_data_available && DAT_00080140 != NULL) {\n    (*(code*)DAT_00080140)(PTR_DAT_0008013c, NULL, data_size, DAT_00080140, function_param);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "execute_function_if_available_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "in_ZR": "is_ZR_nonzero",
                "in_CY": "is_CY_zero",
                "FUN_00081c94": "check_for_zero_00081c94"
            },
            "code": "bool check_for_zero_00081c94(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  FUN_00081c5c();\n  return is_CY_zero || !is_ZR_nonzero;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "check_for_zero_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "puVar3": "undefined_ptr_2",
                "puVar4": "undefined_ptr_3",
                "param_1": "data_structure_ptr",
                "puVar5": "data_ptr",
                "puVar6": "offset_ptr",
                "puVar1": "undefined_ptr_1",
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "uVar2": "undefined_value"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    int* data_ptr = *(int **)(param_1 + 4);\n    int* offset_ptr = *(int **)(param_1 + 8);\n    int* label_ptr = PTR_LAB_00083b08_1_00083bf4;\n    int* function_ptr = PTR_FUN_0008449c_1_00083c00;\n    int* constant_ptr = PTR_LAB_00084440_1_00083bf8;\n    int constant_value = DAT_00083bfc;\n    \n    *(undefined **)(param_1 + 0x3c) = label_ptr;\n    *(int *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(int *)(param_1 + 0x2e0) = 0;\n    \n    // Initialize data structure 1\n    *(data_ptr) = 0;\n    *(data_ptr + 1) = 0;\n    *(data_ptr + 2) = 0;\n    *(data_ptr + 3) = data_ptr;\n    *(data_ptr + 4) = constant_value;\n    *(data_ptr + 5) = 0;\n    *(data_ptr + 6) = 0;\n    *(data_ptr + 7) = 0;\n    *(data_ptr + 8) = constant_ptr;\n    *(data_ptr + 9) = constant_value;\n    *(data_ptr + 10) = function_ptr;\n    *(data_ptr + 11) = label_ptr;\n    *(data_ptr + 25) = 0;\n    *(data_ptr + 7) = data_ptr;\n    \n    // Initialize data structure 2\n    *(offset_ptr) = 0;\n    *(offset_ptr + 1) = 0;\n    *(offset_ptr + 2) = 0;\n    *(offset_ptr + 3) = offset_ptr;\n    *(offset_ptr + 4) = constant_value;\n    *(offset_ptr + 5) = 0;\n    *(offset_ptr + 6) = 0;\n    *(offset_ptr + 7) = 0;\n    *(offset_ptr + 8) = constant_ptr;\n    *(offset_ptr + 9) = constant_value;\n    *(offset_ptr + 10) = function_ptr;\n    *(offset_ptr + 11) = label_ptr;\n    *(int *)(offset_ptr + 25) = 0;\n    *(offset_ptr + 7) = offset_ptr;\n    \n    // Initialize data structure 3\n    *(int **)(param_1 + 0xc) = offset_ptr + 0x17;\n    *(offset_ptr + 7) = offset_ptr + 0x17;\n    *(offset_ptr + 8) = constant_ptr;\n    *(offset_ptr + 9) = constant_value;\n    *(offset_ptr + 10) = function_ptr;\n    *(offset_ptr + 11) = label_ptr;\n    *(offset_ptr + 25) = 0;\n    *(offset_ptr + 4) = 0;\n    *(offset_ptr + 5) = 0;\n    *(offset_ptr + 6) = 0;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "param_2[4]": "param2_pointer_4",
                "PTR_FUN_0008449c_1_00084380": "original_function_pointer",
                "iVar2": "function_return_value",
                "local_50": "local_50",
                "iVar3": "function_return_value_2",
                "uVar1": "parameter_value",
                "param_2[5]": "param2_pointer_5",
                "param_1": "param1",
                "auStack_54": "undefined_stack",
                "*param_2": "param2_pointer",
                "param_2": "param2",
                "FUN_000842a4": "check_parameter_000842a4",
                "uVar4": "parameter_value_uint",
                "PTR_LAB_00083b08_1_0008437c": "new_function_pointer",
                "bVar5": "flag"
            },
            "code": "void check_parameter_000842a4(int param1, int *param2) {\n  ushort parameter_value = *(ushort *)(param2 + 3);\n  uint parameter_value_uint = (uint)parameter_value;\n  if ((int)(parameter_value_uint << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    int function_return_value = call_function(param1,(int)*(short *)((int)param2 + 0xe),undefined_stack);\n    if (-1 < function_return_value) {\n      bool flag = (local_50 & 0xf000) == 0x2000;\n      if (((local_50 & 0xf000) == 0x8000) && ((undefined *)param2[10] == PTR_FUN_0008449c_1_00084380)) {\n        function_return_value = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        function_return_value = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    parameter_value = *(ushort *)(param2 + 3);\n    parameter_value_uint = (uint)parameter_value;\n  }\n  *(ushort *)(param2 + 3) = parameter_value | 0x800;\n  int value = (parameter_value_uint & 0x80) == 0 ? 0x400 : 0x40;\n  bool flag = false;\nLAB_00084300:\n  int function_return_value_2 = call_function(param1, value);\n  parameter_value = *(ushort *)(param2 + 3);\n  if (function_return_value_2 == 0) {\n    if (-1 < (int)((uint)parameter_value << 0x16)) {\n      *(ushort *)(param2 + 3) = parameter_value | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(param2 + 3) = parameter_value | 0x80;\n    *param2 = function_return_value_2;\n    param2[4] = function_return_value_2;\n    param2[5] = value;\n    if ((flag) && (function_return_value_2 = call_function(param1,(int)*(short *)((int)param2 + 0xe)), function_return_value_2 != 0)) {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00081e14",
                "FUN_000846dc",
                "FUN_000846b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": true,
            "current_name": "check_parameter_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "iVar2": "func_result",
                "iVar3": "data_header",
                "uVar1": "result",
                "param_1": "data_ptr",
                "FUN_000846a4": "process_data_000846a4"
            },
            "code": "int process_data_000846a4(int data_ptr) {\n  int data_header = *DATA_HEADER_PTR;\n  if (data_ptr != 0) {\n    if ((data_header != 0) && (*(int *)(data_header + DATA_HEADER_STATUS_OFFSET) == 0)) {\n      initialize_data_header();\n    }\n    if (*(short *)(data_ptr + DATA_PTR_FIELD_C_OFFSET) != 0) {\n      int result = process_data_000846a4_field(data_header, data_ptr);\n      if ((*(code **)(data_ptr + DATA_PTR_FUNC_OFFSET) != (code *)0x0) && ((result = (**(code **)(data_ptr + DATA_PTR_FUNC_OFFSET))(data_header, *(int *)(data_ptr + DATA_PTR_FIELD_1C_OFFSET))) < 0)) {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + DATA_PTR_FIELD_C_OFFSET) << 0x18) < 0) {\n        handle_field_c_negative(data_header, *(int *)(data_ptr + DATA_PTR_FIELD_10_OFFSET));\n      }\n      if (*(int *)(data_ptr + DATA_PTR_FIELD_30_OFFSET) != 0) {\n        if (*(int *)(data_ptr + DATA_PTR_FIELD_30_OFFSET) != data_ptr + DATA_PTR_FIELD_40_OFFSET) {\n          handle_invalid_field_30(data_header);\n        }\n        *(int *)(data_ptr + DATA_PTR_FIELD_30_OFFSET) = 0;\n      }\n      if (*(int *)(data_ptr + DATA_PTR_FIELD_44_OFFSET) != 0) {\n        handle_invalid_field_44(data_header);\n        *(int *)(data_ptr + DATA_PTR_FIELD_44_OFFSET) = 0;\n      }\n      do_nothing_00083c08();\n      *(short *)(data_ptr + DATA_PTR_FIELD_C_OFFSET) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083c0c",
                "FUN_00083c08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": true,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initializeMemory_00080f24",
                "iVar3": "i",
                "puVar2": "data",
                "puVar4": "datArray",
                "puVar1": "relArray"
            },
            "code": "void initializeMemory_00080f24(void)\n{\n  uint32_t* relArray = PTR_Elf32_Rel_ARRAY_00080f80;\n  uint32_t* data = DAT_00080f7c;\n  uint32_t* datArray = (uint32_t*)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (int i = 0; relArray + i < PTR_DAT_00080f88; i += 4) {\n      *(uint32_t *)(relArray + i) = *(uint32_t *)(data + i);\n    }\n  }\n  for (; datArray < DAT_00080f8c; datArray++) {\n    *datArray = 0;\n  }\n  data = PTR_DAT_00080f90 + -0x20000000;\n  *(uint32_t *)(DAT_00080f94 + 8) = (uint32_t)PTR_DAT_00080f90 & 0x1fffff80;\n  if (data < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while(true);\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": true,
            "current_name": "initializeMemory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_param_00080e04",
                "uVar1": "result",
                "param_1": "ptr_param1",
                "param_2": "param2"
            },
            "code": "uint check_param_00080e04(uint ptr_param1, uint param2)\n{\n  uint result = *(uint *)(ptr_param1 + 8) & param2;\n  if (result != 0) {\n    if ((param2 & *(uint *)(ptr_param1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": true,
            "current_name": "check_param_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar2": "pointer_2",
                "iVar6": "return_value",
                "puVar3": "pointer_3",
                "puVar4": "pointer_4",
                "puVar1": "pointer_1",
                "uVar5": "function_return_value"
            },
            "code": "void initialize_system_000804a8(void)\n{\n  // Set up some initial values\n  set_up_initial_values(1, 0);\n  set_up_initial_values(6, 1);\n  set_up_initial_values(0, 1);\n  set_up_initial_values(1, 1);\n  set_up_additional_initial_values(0, 0);\n  set_up_additional_initial_values(1, 0);\n  \n  // Initialize some pointers and values\n  uint8_t *pointer_1 = PTR_DAT_000805a8;\n  uint8_t *pointer_2 = PTR_DAT_000805ac;\n  *(uint16_t *)(pointer_1 + 0xe) = 0x13;\n  *(uint16_t *)(pointer_1 + 0x10) = 10;\n  *(uint8_t **)(pointer_1 + 0x14) = pointer_2 + 0x26;\n  pointer_1[1] = 3;\n  pointer_1[0x19] = 3;\n  *(uint16_t *)(pointer_1 + 0x1a) = 0x14;\n  *(uint16_t *)(pointer_1 + 0x28) = 3;\n  *(uint16_t *)(pointer_1 + 4) = 0x10;\n  *(uint8_t **)(pointer_1 + 8) = pointer_2;\n  pointer_1[0xd] = 0x10;\n  *(uint16_t *)(pointer_1 + 0x1c) = 0xc;\n  pointer_1[0x25] = 0x10;\n  *(uint16_t *)(pointer_1 + 0x34) = 8;\n  uint8_t *pointer_3 = PTR_DAT_000805b0;\n  *(uint16_t *)(pointer_1 + 0x26) = 0x1c;\n  *(uint8_t **)(pointer_1 + 0x2c) = pointer_2 + 0x38;\n  uint8_t *pointer_4 = PTR_DAT_000805b4;\n  pointer_1[0x30] = 2;\n  pointer_1[0x31] = 2;\n  *(uint8_t **)(pointer_1 + 0x38) = pointer_3;\n  pointer_1[0x3c] = 2;\n  *pointer_1 = 1;\n  pointer_1[0xc] = 1;\n  pointer_1[0x18] = 1;\n  pointer_1[0x24] = 1;\n  *(uint16_t *)(pointer_1 + 0x3e) = 1;\n  *(uint16_t *)(pointer_1 + 0x40) = 1;\n  *(uint16_t *)(pointer_1 + 2) = 0;\n  *(uint8_t **)(pointer_1 + 0x20) = pointer_2 + 0x28;\n  *(uint16_t *)(pointer_1 + 0x32) = 0;\n  pointer_1[0x3d] = 5;\n  *(uint8_t **)(pointer_1 + 0x44) = pointer_3 + 2;\n  \n  // Set up some values using function calls\n  set_up_value_using_function_call(PTR_DAT_000805b4, 0x4b00);\n  *(uint16_t *)(pointer_4 + 0x56) = 2000;\n  *(uint32_t *)PTR_DAT_000805b8 = get_function_return_value();\n  *(int *)PTR_DAT_000805bc = get_function_return_value() + 1000;\n  *(int *)PTR_DAT_000805c0 = get_function_return_value() + 1000;\n  *(int *)PTR_DAT_000805c4 = get_function_return_value() + 1000;\n  *(int *)PTR_DAT_000805c8 = get_function_return_value() + 1000;\n  *PTR_DAT_000805cc = 0;\n  \n  // Check if a condition is true\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n  }\n}\n",
            "called": [
                "FUN_00081210",
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "bVar2": "byte_value",
                "FUN_000802da": "validate_input_000802da",
                "param_1": "input_address",
                "puVar6": "ushort_pointer",
                "local_1c": "local_char_value",
                "local_1b": "local_undefined_value",
                "local_1a": "local_ushort_value",
                "param_2": "input_length",
                "param_3": "input_data",
                "cVar1": "error_code",
                "uVar3": "undefined_value",
                "uVar5": "uint_value",
                "uVar4": "ushort_value"
            },
            "code": "int validate_input_000802da(int input_address, ushort input_length, ushort *input_data)\n{\n  char error_code;\n  byte byte_value;\n  undefined undefined_value;\n  ushort ushort_value;\n  uint uint_value;\n  ushort *ushort_pointer;\n  char local_char_value;\n  undefined local_undefined_value;\n  ushort local_ushort_value;\n  \n  uint_value = (uint)input_length;\n  if (*(char *)(input_address + 4) != '\\0') {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(input_address + 7) != '\\0') {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(local_char_value - 1U)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(input_address + 9) = local_char_value;\n  *(undefined *)(input_address + 10) = local_undefined_value;\n  *(ushort **)(input_address + 0x4c) = input_data;\n  *(char *)(input_address + 0xb) = (char)((uint)local_ushort_value >> 8);\n  *(char *)(input_address + 0xc) = (char)local_ushort_value;\n  error_code = (char)input_length;\n  undefined_value = (undefined)(uint_value >> 8);\n  switch(local_undefined_value) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(input_address + 0xd) = undefined_value;\n    break;\n  case 5:\n    ushort_value = *input_data;\n    if (ushort_value != 0) {\n      ushort_value = 1;\n    }\n    *(char *)(input_address + 0xd) = -(char)ushort_value;\n    uint_value = 0;\n    break;\n  case 6:\n    *(char *)(input_address + 0xd) = (char)((uint)*input_data >> 8);\n    uint_value = (uint)*input_data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(input_length >> 3) & 0xfe;\n    if ((input_length & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(input_address + 0xe) = error_code;\n    *(undefined *)(input_address + 0xd) = undefined_value;\n    *(byte *)(input_address + 0xf) = byte_value;\n    undefined_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(input_address + 0xd) = undefined_value;\n    *(char *)(input_address + 0xe) = error_code;\n    input_data = input_data + -1;\n    *(char *)(input_address + 0xf) = error_code * '\\x02';\n    *(undefined *)(input_address + 0x49) = 7;\n    ushort_pointer = input_data + uint_value;\n    while (input_data != ushort_pointer) {\n      byte_value = *(byte *)(input_address + 0x49);\n      *(char *)(input_address + (uint)byte_value + 9) = (char)((uint)input_data[1] >> 8);\n      uint_value = byte_value + 1 & 0xff;\n      *(char *)(input_address + 0x49) = (char)uint_value;\n      input_data = input_data + 1;\n      *(char *)(uint_value + input_address + 9) = (char)*input_data;\n      *(byte *)(input_address + 0x49) = byte_value + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(input_address + 0xe) = (char)uint_value;\n  undefined_value = 6;\nLAB_0008034a:\n  *(undefined *)(input_address + 0x49) = undefined_value;\nswitchD_0008031e_caseD_7:\n  validate_data(input_address);\n  *(undefined *)(input_address + 7) = 1;\n  error_code = '\\0';\nLAB_000803cc:\n  return (int)error_code;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "validate_input_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "param_1[0x48]": "*(index_ptr + 71)",
                "uVar1": "quotient",
                "FUN_00080f9c": "find_index_of_data_00080f9c",
                "param_1[0x41]": "*(index_ptr + 65)",
                "param_1": "data_array",
                "param_1[1]": "*(index_ptr + 1)",
                "param_1[0x45]": "*(index_ptr + 69)",
                "*param_1": "*index_ptr",
                "param_2": "data_array_length",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar2": "i",
                "local_58": "local_max_values"
            },
            "code": "int find_index_of_data_00080f9c(uint32_t *data_array, uint data_array_length, int divisor, int multiplier) {\n  uint32_t local_max_values[16];\n  local_max_values[0] = *(uint32_t *)PTR_DAT_0008102c;\n  local_max_values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  local_max_values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  local_max_values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  local_max_values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  local_max_values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  local_max_values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  local_max_values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  local_max_values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  local_max_values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  local_max_values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  local_max_values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  local_max_values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  local_max_values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  local_max_values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  local_max_values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  int index = 1;\n  uint32_t *index_ptr = data_array + 1;\n  *(index_ptr - 1) = 1;\n  *(index_ptr + 71) = 514;\n  *(index_ptr + 65) = 0;\n  *(index_ptr + 69) = 0;\n  uint quotient = data_array_length / (uint)(divisor * 2);\n  if (data_array_length == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  uint i = 0;\n  do {\n    if ((uint)(multiplier * (int)(((uint64_t)data_array_length / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_max_values[i]) {\n      *(index_ptr - 1) = ((i & 0xf) << 0x10) | ((quotient & 0xff) << 8) | *(index_ptr - 1);\n      return 0;\n    }\n    i++;\n  } while (i != 0x10);\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "find_index_of_data_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "iVar3": "result",
                "FUN_00081210": "process_data_00081210",
                "puVar2": "data_ptr_2",
                "param_1": "index",
                "iVar9": "data_index_1",
                "iVar10": "data_index_2",
                "param_2": "mode",
                "puVar1": "data_ptr_1",
                "uVar5": "bit_value",
                "uVar4": "bit_mask",
                "uVar6": "bit_value_2",
                "bVar8": "mode_value_2",
                "bVar7": "mode_value_1"
            },
            "code": "int process_data_00081210(int index, int mode)\n{\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  int result;\n  uint bit_mask;\n  uint bit_value;\n  byte mode_value_1;\n  byte mode_value_2;\n  int data_index_1;\n  int data_index_2;\n  \n  data_ptr_2 = PTR_DAT_00081310;\n  data_ptr_1 = PTR_DAT_0008130c;\n  result = index;\n  if (PTR_DAT_0008130c[index * 0x1c + 0xc] != \"\\0\") {\n    if ((PTR_DAT_00081310[index] & 0xf) == 4) {\n      result = FUN_0008105c(DAT_00081314,PTR_DAT_0008130c[index * 0x1c + 0x19]);\n    }\n    mode_value_1 = data_ptr_2[index];\n    mode_value_2 = mode_value_1 & 0xf;\n    if ((mode_value_2 < 3) && (mode_value_1 != 0)) {\n      if (mode_value_2 == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (mode_value_2 == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (mode_value_2 == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        data_index_1 = index * 0x1c;\n        FUN_00080e18(*(undefined4 *)(data_ptr_1 + data_index_1 + 8));\n        data_index_1 = FUN_00080da0(*(undefined4 *)(data_ptr_1 + data_index_1),3,*(undefined4 *)(data_ptr_1 + data_index_1 + 4),0\n                            );\n        mode_value_1 = data_ptr_2[index] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        data_index_1 = index * 0x1c;\n        FUN_00080e18(*(undefined4 *)(data_ptr_1 + data_index_1 + 8));\n        data_index_1 = FUN_00080da0(*(undefined4 *)(data_ptr_1 + data_index_1),3,*(undefined4 *)(data_ptr_1 + data_index_1 + 4),1\n                            );\n        mode_value_1 = data_ptr_2[index] & 0xf0 | 1;\n      }\n      data_ptr_2[index] = mode_value_1;\n      return data_index_1;\n    }\n    data_index_1 = index * 0x1c;\n    data_index_2 = *(int *)(data_ptr_1 + data_index_1);\n    if (mode_value_1 >> 4 == 0) {\n      bit_value = 4;\n    }\n    else {\n      bit_value = 5;\n    }\n    result = FUN_00080da0(data_index_2,bit_value,*(undefined4 *)(data_ptr_1 + data_index_1 + 4),\n                         *(undefined4 *)(data_ptr_1 + data_index_1 + 0x10));\n    data_ptr_2[index] = data_ptr_2[index] & 0xf0 | 3;\n    if (*(int *)(data_index_2 + 0x18) == -1) {\n      bit_mask = *(uint *)(data_ptr_1 + data_index_1 + 8);\n      if (0x2c < bit_mask) {\n        return 1;\n      }\n      if (bit_mask < 0x20) {\n        bit_mask = 1 << (bit_mask & 0xff);\n        bit_value = *(uint *)(DAT_00080e98 + 0x18) & bit_mask;\n        if (bit_value == bit_mask) {\n          *(uint *)(DAT_00080e98 + 0x14) = bit_value;\n        }\n      }\n      else {\n        bit_mask = 1 << (bit_mask - 0x20 & 0xff);\n        bit_value = *(uint *)(DAT_00080e98 + 0x108) & bit_mask;\n        if (bit_value == bit_mask) {\n          *(uint *)(DAT_00080e98 + 0x104) = bit_value;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_00081318"
            ],
            "imported": true,
            "current_name": "process_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": "buffer_size",
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 8)": "buffer_state",
                "iVar1": "buffer_header",
                "*(uint *)(*(int *)(param_1 + 0x14) + 0x80)": "buffer_head_address",
                "FUN_00081454": "write_to_buffer_00081454",
                "*(int *)(iVar1 + 0x80)": "buffer_head",
                "param_1": "buffer_address",
                "*(char *)(iVar1 + *(int *)(iVar1 + 0x80))": "buffer_head_address",
                "*(int *)(iVar1 + 0x84)": "buffer_tail",
                "DAT_000814a4": "BUFFER_MASK",
                "*(int *)(*(int *)(param_1 + 0x18) + 0x1c)": "buffer_tail_address",
                "param_2": "data",
                "uVar2": "new_tail",
                "*(int *)(param_1 + 0x14)": "buffer_header",
                "*(int *)(param_1 + 0x18)": "buffer_header_pointer"
            },
            "code": "int write_to_buffer_00081454(int buffer_address, int data) {\n  int buffer_header = *(int *)(buffer_address + BUFFER_HEADER_OFFSET);\n  if ((*(int *)(*(int *)(buffer_address + BUFFER_HEADER_POINTER_OFFSET) + BUFFER_HEADER_SIZE_OFFSET) << 0x1e < 0) && (*(int *)(buffer_header + BUFFER_TAIL_OFFSET) == *(int *)(buffer_header + BUFFER_HEAD_OFFSET))) {\n    *(int *)(*(int *)(buffer_address + BUFFER_HEADER_POINTER_OFFSET) + BUFFER_TAIL_OFFSET) = data;\n  }\n  else {\n    uint32_t new_tail = DAT_000814a4 & *(int *)(buffer_header + BUFFER_HEAD_OFFSET) + 1U;\n    if ((int)new_tail < 0) {\n      new_tail = (new_tail - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint32_t *)(buffer_header + BUFFER_TAIL_OFFSET) == new_tail);\n    *(char *)(buffer_header + *(int *)(buffer_header + BUFFER_HEAD_OFFSET)) = (char)data;\n    *(uint32_t *)(*(int *)(buffer_address + BUFFER_HEADER_OFFSET) + BUFFER_HEAD_OFFSET) = new_tail;\n    *(int *)(*(int *)(buffer_address + BUFFER_HEADER_POINTER_OFFSET) + BUFFER_STATE_OFFSET) = BUFFER_STATE_FULL;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": true,
            "current_name": "write_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "iVar2": "errorCode",
                "param_1": "result",
                "FUN_00084728": "findValue_00084728",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr"
            },
            "code": "void findValue_00084728(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *ptr = PTR_DAT_0008474c;\n  *(undefined4 *)PTR_DAT_0008474c = 0;\n  int errorCode = calculateValue(arg2, arg3, arg4);\n  if ((errorCode == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": true,
            "current_name": "findValue_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "iVar2": "error_code",
                "uVar1": "function_result",
                "param_1": "conversion_type",
                "abStack_1b": "temp_buffer",
                "local_1c": "temp_char_value",
                "pbVar4": "current_output_byte",
                "param_2": "data_length",
                "param_3": "output_buffer",
                "FUN_00083c40": "convert_data_to_string_00083c40",
                "uVar3": "current_char_value",
                "uVar5": "i"
            },
            "code": "uint convert_data_to_string_00083c40(undefined4 param_1, uint data_length, byte **output_buffer)\n{\n  uint i, temp_data_length, current_char_value;\n  byte *current_output_byte;\n  byte temp_char_value;\n  byte temp_buffer[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12))) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  i = FUN_00084298();\n  if ((i == 1) && (data_length - 1 < 0xff)) {\n    temp_data_length = data_length & 0xff;\n    temp_char_value = (byte)temp_data_length;\n  }\n  else {\n    i = FUN_0008456c(param_1,&temp_char_value,data_length,output_buffer + 0x17);\n    if (i == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (i == 0) {\n      return data_length;\n    }\n    temp_data_length = (uint)temp_char_value;\n  }\n  i = 0;\n  do {\n    current_output_byte = output_buffer[2] + -1;\n    output_buffer[2] = current_output_byte;\n    if ((int)current_output_byte < 0) {\n      if ((int)output_buffer[6] <= (int)current_output_byte) {\n        **output_buffer = (byte)temp_data_length;\n        current_output_byte = *output_buffer;\n        temp_data_length = (uint)*current_output_byte;\n        if (temp_data_length != 10) goto LAB_00083c90;\n      }\n      i = FUN_000844c4(param_1,temp_data_length,output_buffer);\n      if (i == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)temp_data_length;\n      current_output_byte = *output_buffer;\n      LAB_00083c90:\n      *output_buffer = current_output_byte + 1;\n    }\n    if (i <= i + 1) {\n      return data_length;\n    }\n    temp_data_length = (uint)temp_buffer[i];\n    i = i + 1;\n  } while( true );\n}",
            "called": [
                "FUN_00084298",
                "FUN_000844c4",
                "FUN_0008456c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": true,
            "current_name": "convert_data_to_string_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = thunk_FUN_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = thunk_FUN_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = thunk_FUN_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = thunk_FUN_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = FUN_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = thunk_FUN_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = FUN_0008189c(*(undefined4 *)puVar2);\n  iVar15 = FUN_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = FUN_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = FUN_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00081894",
                "FUN_00081cd0",
                "FUN_00081734",
                "FUN_00081ca8",
                "FUN_00081c94",
                "thunk_FUN_00081714",
                "FUN_0008189c",
                "FUN_0008043e",
                "FUN_00081d1c",
                "FUN_00081730",
                "FUN_000802da",
                "FUN_00081944"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "param_1": "input_value",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "FUN_000813e4": "calculate_difference_000813e4",
                "difference": "difference"
            },
            "code": "int calculate_difference_000813e4(int param_1) {\n    int* ptr_1 = (int*)(*(int*)(param_1 + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(param_1 + 0x10) + 0x84);\n    int difference = *ptr_1 - *ptr_2;\n    return difference & 0x7F;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "undefined4": "int",
                "DAT_00084294": "data_value",
                "PTR_": "",
                "FUN_00084290": "get_data_00084290"
            },
            "code": "PTR_iPTR_nPTR_tPTR_ get_data_00084290(PTR_vPTR_oPTR_iPTR_dPTR_)PTR_\nPTR_{PTR_\nPTR_ PTR_ PTR_iPTR_nPTR_tPTR_ PTR_dPTR_aPTR_tPTR_aPTR_ PTR_=PTR_ PTR_DPTR_APTR_TPTR__PTR_0PTR_0PTR_0PTR_8PTR_4PTR_2PTR_9PTR_4PTR_;PTR_\nPTR_ PTR_ PTR_rPTR_ePTR_tPTR_uPTR_rPTR_nPTR_ PTR_dPTR_aPTR_tPTR_aPTR_;PTR_\nPTR_}PTR_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": true,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "iVar2": "status",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "FUN_000846b4": "findValue_000846b4"
            },
            "code": "void findValue_000846b4(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  int status = FUN_000811b4(arg1, arg2, arg2, 0, arg3);\n  if ((status == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "findValue_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + BUFFER_SIZE)",
                "param_1": "buffer_address",
                "FUN_00082504": "set_buffer_to_zero",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + BUFFER_INDEX)"
            },
            "code": "int initialize_buffer_000813a8(int buffer_address)\n{\n  set_buffer_to_zero(buffer_address);\n  *(int *)(buffer_address + BUFFER_SIZE) = 0;\n  *(int *)(buffer_address + BUFFER_INDEX) = 0;\n  return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_00083d9c",
                "uVar10": "heap_index",
                "uVar11": "heap_index_shifted",
                "iVar1": "prev_block_next",
                "uVar12": "heap_entry",
                "uVar13": "heap_entry_next",
                "iVar3": "prev_block_start",
                "new_variable_name_2": "block_size",
                "new_variable_name_1": "size_aligned",
                "iVar5": "block_start",
                "iVar6": "prev_block_prev",
                "iVar8": "heap_start",
                "param_1": "heap",
                "param_2": "size",
                "uVar2": "size_flag",
                "uVar4": "prev_block_size",
                "uVar7": "block_size",
                "uVar9": "block_size_shifted",
                "uVar8": "max_size"
            },
            "code": "void allocate_memory_00083d9c(void* heap, size_t size) {\n  if (size == 0) {\n    return;\n  }\n  do_nothing_00082598();\n  int heap_start = DAT_00083f24;\n  uint size_aligned = *(uint *)(size - 4) & 0xfffffffe;\n  int block_start = size - 8 - size_aligned;\n  uint block_size = *(uint *)(block_start + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == block_start) {\n    block_size += size_aligned;\n    if (-1 < (int)(*(uint *)(size - 4) << 0x1f)) {\n      int prev_block_start = size - 8 - *(int *)(size - 8);\n      int prev_block_next = *(int *)(prev_block_start + 8);\n      int prev_block_prev = *(int *)(prev_block_start + 0xc);\n      block_size += *(int *)(size - 8);\n      *(int *)(prev_block_next + 0xc) = prev_block_prev;\n      *(int *)(prev_block_prev + 8) = prev_block_next;\n    }\n    uint max_size = *DAT_00083f2c;\n    *(uint *)(size - 8 - size_aligned + 4) = block_size | 1;\n    *(int *)(heap_start + 8) = size - 8 - size_aligned;\n    if (max_size <= block_size) {\n      FUN_00083d00(heap, *(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    uint size_flag = *(uint *)(size - 4) & 1;\n    *(uint *)(block_start + 4) = block_size;\n    if (size_flag == 0) {\n      int prev_block_start = size - 8 - *(int *)(size - 8);\n      int prev_block_next = *(int *)(prev_block_start + 8);\n      uint prev_block_size = *(uint *)(size - 8 - *(int *)(size - 8) + 4) & 0xfffffffc;\n      if (prev_block_next == heap_start + 8) {\n        size_flag = 1;\n      }\n      else {\n        int prev_block_prev = *(int *)(prev_block_start + 0xc);\n        *(int *)(prev_block_next + 0xc) = prev_block_prev;\n        *(int *)(prev_block_prev + 8) = prev_block_next;\n      }\n    }\n    else {\n      size_flag = 0;\n    }\n    if (-1 < *(int *)(block_start + block_size + 4) << 0x1f) {\n      uint new_block_size = block_size + *(uint *)(size - 8 - size_aligned + 4);\n      int next_block_start = *(int *)(block_start + 8);\n      if ((size_flag == 0) && (next_block_start == DAT_00083f28)) {\n        *(int *)(heap_start + 0x14) = block_start;\n        *(int *)(heap_start + 0x10) = block_start;\n        *(int *)(block_start + 0xc) = next_block_start;\n        *(int *)(block_start + 8) = next_block_start;\n        *(uint *)(block_start + 4) = new_block_size | 1;\n        *(uint *)(block_start + new_block_size) = new_block_size;\n        goto LAB_00083e30;\n      }\n      int next_block_prev = *(int *)(block_start + block_size + 0xc);\n      *(int *)(next_block_start + 0xc) = next_block_prev;\n      *(int *)(next_block_prev + 8) = next_block_start;\n    }\n    *(uint *)(size - 8 - size_aligned + 4) = block_size | 1;\n    *(uint *)(size - 8 - size_aligned + block_size) = block_size;\n    if (size_flag == 0) {\n      if (block_size < 0x200) {\n        uint heap_flags = *(uint *)(heap_start + 4);\n        int last_block_start = heap_start + (block_size & 0xfffffff8);\n        int last_block_next = *(int *)(last_block_start + 8);\n        int last_block_prev = *(int *)(last_block_start + 0xc);\n        *(uint *)(heap_start + 4) = heap_flags | 1 << ((int)(block_size >> 3) >> 2 & 0xffU);\n        *(int *)(last_block_start + 8) = size - 8 - size_aligned;\n        *(int *)(last_block_start + 0xc) = last_block_next;\n        *(int *)(size - 8 - size_aligned + 8) = last_block_start;\n        *(int *)(last_block_next + 0xc) = size - 8 - size_aligned;\n        do_nothing_0008259c(heap);\n        return;\n      }\n      uint block_size_shifted = block_size >> 9;\n      if (block_size_shifted < 5) {\n        int heap_index = (block_size >> 6) + 0x38;\n        int heap_index_shifted = heap_index * 2;\n      }\n      else if (block_size_shifted < 0x15) {\n        int heap_index = block_size_shifted + 0x5b;\n        int heap_index_shifted = heap_index * 2;\n      }\n      else if (block_size_shifted < 0x55) {\n        int heap_index = (block_size >> 0xc) + 0x6e;\n        int heap_index_shifted = heap_index * 2;\n      }\n      else if (block_size_shifted < 0x155) {\n        int heap_index = (block_size >> 0xf) + 0x77;\n        int heap_index_shifted = heap_index * 2;\n      }\n      else if (block_size_shifted < 0x555) {\n        int heap_index = (block_size >> 0x12) + 0x7c;\n        int heap_index_shifted = heap_index * 2;\n      }\n      else {\n        int heap_index_shifted = 0xfc;\n        int heap_index = 0x7e;\n      }\n      int heap_entry = heap_start + heap_index_shifted * 4;\n      int heap_entry_next = *(int *)(heap_entry + 8);\n      if (heap_entry_next == heap_entry) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (heap_index >> 2 & 0xffU);\n        heap_entry_next = heap_entry;\n      }\n      else {\n        do {\n          if ((*(uint *)(heap_entry_next + 4) & 0xfffffffc) <= block_size) break;\n          heap_entry_next = *(int *)(heap_entry_next + 8);\n        } while (heap_entry != heap_entry_next);\n        heap_entry_next = *(int *)(heap_entry_next + 0xc);\n      }\n      *(int *)(size - 8 - size_aligned + 0xc) = heap_entry_next;\n      *(int *)(size - 8 - size_aligned + 8) = heap_entry;\n      *(int *)(heap_entry_next + 8) = size - 8 - size_aligned;\n      *(int *)(heap_entry + 0xc) = size - 8 - size_aligned;\n    }\n  }\nLAB_00083e30:\n  do_nothing_0008259c(heap);\n  return;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083808",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_00083adc",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0"
            ],
            "imported": true,
            "current_name": "allocate_memory_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "bVar1": "is_negative",
                "FUN_00081bf4": "check_overflow_00081bf4",
                "uVar1": "is_negative",
                "param_1": "num1",
                "param_2": "num2",
                "uVar3": "doubled_num2",
                "uVar2": "doubled_num1",
                "uVar4": "combined_nums",
                "bVar5": "is_zero"
            },
            "code": "uint check_overflow_00081bf4(uint num1, uint num2)\n{\n  bool is_negative;\n  uint doubled_num1 = num1 * 2;\n  uint doubled_num2 = num2 * 2;\n  if (((int)doubled_num1 >> 0x18 == -1 || (int)doubled_num2 >> 0x18 == -1) && ((((int)doubled_num1 >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) || (((int)doubled_num2 >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint combined_nums = doubled_num1 | num2 & 0x7fffffff;\n  bool is_zero = combined_nums == 0;\n  if (!is_zero) {\n    combined_nums = num1 ^ num2;\n    is_zero = combined_nums == 0;\n  }\n  is_negative = -1 < (int)combined_nums;\n  if (is_negative) {\n    num1 = doubled_num1 + num2 * -2;\n    is_zero = num1 == 0;\n  }\n  if ((is_negative && doubled_num2 <= doubled_num1) && !is_zero) {\n    num1 = (int)num2 >> 0x1f;\n  }\n  if (!is_negative || doubled_num2 > doubled_num1) {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  if (!is_zero) {\n    num1 = num1 | 1;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": true,
            "current_name": "check_overflow_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "PTR_DAT_00081dbc": "function_pointers_end",
                "ppcVar4": "function_pointer",
                "iVar3": "i",
                "FUN_00081d7c": "execute_function_pointers_00081d7c",
                "iVar5": "num_elements",
                "puVar2": "end",
                "PTR_LAB_00081dc4": "start",
                "puVar1": "start",
                "PTR_DAT_00081dc0": "function_pointers_start",
                "PTR_DAT_00081dc8": "end"
            },
            "code": "void execute_function_pointers_00081d7c(void)\n{\n  code **PTR_DAT_00081dbc = (code **)PTR_DAT_00081dbc;\n  code **PTR_DAT_00081dc0 = (code **)PTR_DAT_00081dc0;\n  int num_function_pointers = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_function_pointers != 0) {\n    for (int i = 0; i < num_function_pointers; i++) {\n      (**(PTR_DAT_00081dc0 + i))();\n    }\n  }\n  undefined *PTR_DAT_00081dc8 = PTR_DAT_00081dc8;\n  undefined *PTR_LAB_00081dc4 = PTR_LAB_00081dc4;\n  do_nothing_00085858();\n  int num_elements = (int)PTR_LAB_00081dc4 - (int)PTR_DAT_00081dc8 >> 2;\n  if (num_elements != 0) {\n    code **element_pointers_PTR_DAT_00081dc8 = (code **)(PTR_DAT_00081dc8 + -4);\n    for (int i = 0; i < num_elements; i++) {\n      (**(element_pointers_PTR_DAT_00081dc8 + i + 1))();\n    }\n  }\n}",
            "called": [
                "FUN_00085858",
                "FUN_00083974",
                "FUN_00080118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "execute_function_pointers_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081bf4": "call_function_to_initialize",
                "FUN_00081c5c": "concatenate_32_bit_to_64_bit_00081c5c",
                "param_1": "lower_32_bits",
                "param_2": "higher_32_bits"
            },
            "code": "undefined8 concatenate_32_bit_to_64_bit_00081c5c(undefined4 lower_32_bits, undefined4 higher_32_bits)\n{\n  call_function_to_initialize();\n  return CONCAT44(higher_32_bits, lower_32_bits);\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "imported": true,
            "current_name": "concatenate_32_bit_to_64_bit_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "iVar1": "count",
                "FUN_00081388": "decrement_and_call_if_zero_00081388"
            },
            "code": "void decrement_and_call_if_zero_00081388() {\n  int count = *DAT_000813a0;\n  if (count != -1) {\n    count--;\n    *DAT_000813a0 = count;\n    if (count == 0) {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": true,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0"
            ],
            "imported": true,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "bVar8": "last_byte_zero"
            },
            "code": "void copy_string_00082994(uint *dest, uint *src) {\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_word;\n  uint next_word;\n  bool last_byte_zero;\n\n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr;\n    if (((uint)src_ptr & 2) != 0) {\n      src = (uint *)((int)src_ptr + 2);\n      current_short = *(ushort *)src_ptr;\n      last_byte_zero = (current_short & 0xff) == 0;\n      if (last_byte_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        last_byte_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (last_byte_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  src_ptr = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_000829f8;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    src_ptr = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    next_word = *src_ptr;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = next_word;\n    if ((next_word + 0xfefefeff & ~next_word & 0x80808080) != 0) break;\n    src_ptr = src_ptr + 2;\n    current_word = *src_ptr;\n    dest_ptr = dest + 1;\n    *dest = next_word;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)current_word;\n    next_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (next_word != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "puVar2": "second_pointer",
                "puVar3": "third_pointer",
                "puVar4": "fourth_pointer",
                "param_1": "first_parameter",
                "puVar5": "fifth_pointer",
                "puVar6": "sixth_pointer",
                "FUN_00080c0c": "initialize_pointers_and_call_functions_00080c0c",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "puVar1": "first_pointer"
            },
            "code": "void initialize_pointers_and_call_functions_00080c0c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *first_pointer = PTR_DAT_00080ca0;\n  undefined *second_pointer = PTR_DAT_00080ca4;\n  undefined *third_pointer = PTR_DAT_00080cac;\n  undefined *fourth_pointer = PTR_DAT_00080cb0;\n  undefined *fifth_pointer = PTR_DAT_00080cb4;\n  undefined *sixth_pointer = PTR_DAT_00080cb8;\n  undefined *seventh_pointer = PTR_DAT_00080cbc;\n  undefined *eighth_pointer = PTR_DAT_00080cd8;\n  undefined *ninth_pointer = PTR_DAT_00080cdc;\n  FUN_000813a8(first_pointer);\n  FUN_000813a8(second_pointer);\n  FUN_000814e4(fourth_pointer, DAT_00080ca8, 8, 8, first_pointer, second_pointer, param_3);\n  FUN_000813a8(eighth_pointer);\n  FUN_000813a8(third_pointer);\n  FUN_000813a8(fifth_pointer);\n  FUN_000813a8(ninth_pointer);\n  FUN_000813a8(sixth_pointer);\n  FUN_000813a8(seventh_pointer);\n  FUN_000815d4(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, eighth_pointer, ninth_pointer);\n  FUN_000815d4(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, third_pointer, sixth_pointer);\n  FUN_000815d4(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, fifth_pointer, seventh_pointer);\n  return;\n}",
            "called": [
                "FUN_000814e4",
                "FUN_000815d4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_pointers_and_call_functions_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "uVar1": "currentFlagsValue",
                "param_1": "flagsAddress",
                "FUN_00080d2e": "updateFlags_00080d2e",
                "param_2": "operationType",
                "param_3": "newFlagValue"
            },
            "code": "void updateFlags_00080d2e(int flagsAddress, uint32_t operationType, uint32_t newFlagValue) {\n  uint32_t currentFlagsValue;\n  *(uint32_t *)(flagsAddress + 0x44) = newFlagValue;\n  switch(operationType) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      currentFlagsValue = *(uint32_t *)(flagsAddress + 0x70) & *(uint32_t *)(flagsAddress + 0x70) & ~newFlagValue;\n      break;\n    case 2:\n      currentFlagsValue = *(uint32_t *)(flagsAddress + 0x70) | newFlagValue;\n      break;\n    default:\n      goto defaultCase;\n  }\n  *(uint32_t *)(flagsAddress + 0x70) = currentFlagsValue;\ndefaultCase:\n  *(uint32_t *)(flagsAddress + 4) = newFlagValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "updateFlags_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "uVar1": "first_value",
                "iVar4": "buffer_start",
                "puVar3": "buffer_pointer",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "buffer",
                "param_4": "buffer_length",
                "FUN_000844c4": "process_input_000844c4",
                "uVar2": "second_value"
            },
            "code": "uint process_input_000844c4(int input_length, uint input_value, undefined4 *buffer, undefined4 buffer_length)\n{\n  ushort first_value;\n  uint second_value;\n  undefined *buffer_pointer;\n  int buffer_start;\n  \n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_input();\n  }\n  first_value = *(ushort *)(buffer + 3);\n  second_value = (uint)first_value;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(second_value << 0x1c)) || (buffer_start = buffer[4], buffer_start == 0)) {\n    buffer_start = process_buffer(input_length, buffer, first_value, second_value, buffer_length);\n    if (buffer_start != 0) {\n      return 0xffffffff;\n    }\n    first_value = *(ushort *)(buffer + 3);\n    buffer_start = buffer[4];\n    second_value = (uint)first_value;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(second_value << 0x12) < 0) {\n    buffer_pointer = (undefined *)*buffer;\n    buffer_start = (int)buffer_pointer - buffer_start;\n    if (buffer_start < (int)buffer[5]) {\nLAB_000844f6:\n      buffer_start = buffer_start + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = first_value | 0x2000;\n    buffer_start = (int)buffer_pointer - buffer_start;\n    if (buffer_start < (int)buffer[5]) goto LAB_000844f6;\n  }\n  buffer_start = process_buffer(input_length, buffer, first_value, second_value, buffer_length);\n  if (buffer_start != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*buffer;\n  buffer_start = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)input_value;\n  if (((buffer[5] == buffer_start) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (buffer_start = process_buffer(input_length, buffer, first_value, second_value, buffer_length), buffer_start != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}",
            "called": [
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "process_input_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "iVar1": "leading_zeroes",
                "iVar4": "result",
                "param_1": "number",
                "uVar3": "shifted_0",
                "FUN_0008189c": "count_leading_zero_bits_0008189c",
                "uVar2": "shifted_number",
                "uVar5": "shifted_1"
            },
            "code": "uint count_leading_zero_bits_0008189c(uint number)\n{\n  int leading_zeroes = __builtin_clz(number);\n  uint shifted_number = number << leading_zeroes;\n  if (shifted_number == 0) {\n    return 0;\n  }\n  uint result = ((0x4b000000 | shifted_number) - 0x800000) + ((leading_zeroes - 8) * -0x800000);\n  if (leading_zeroes > 7) {\n    uint shifted_0 = 0 << (leading_zeroes - 8);\n    result += (shifted_number >> (32 - (leading_zeroes - 8))) + (shifted_0 >> (32 - (leading_zeroes - 8))) + (uint)(0x7fffffff < shifted_0);\n    if (shifted_0 == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shifted_number = shifted_number << (leading_zeroes + 24);\n  result += (shifted_number >> 31) - (shifted_number >> 32);\n  if ((shifted_number & 0x7fffffff) == 0) {\n    result = result & ~(shifted_number >> 31);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "count_leading_zero_bits_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "temp_dest_ptr",
                "FUN_0008234c": "copy_memory_block_0008234c",
                "uVar5": "temp_size",
                "uVar4": "remaining_size",
                "bVar6": "size_gt_63"
            },
            "code": "undefined4 * copy_memory_block_0008234c(undefined4 *dest, undefined4 *src, uint size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint temp_size;\n  bool size_gt_63;\n  \n  dest_ptr = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      temp_size = size - 4;\n      if (3 < size) {\n        do {\n          src_ptr = src;\n          remaining_size = temp_size != 0;\n          temp_size--;\n          *(undefined *)dest_ptr = *(undefined *)src_ptr;\n          dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n          src = (undefined4 *)((int)src_ptr + 1);\n        } while (remaining_size);\n        *(undefined *)(undefined4 *)((int)dest_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)src_ptr + 1);\n        *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n        *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      temp_size = 4 - ((uint)dest & 3);\n      size = size - temp_size;\n      src_ptr = src;\n      dest_ptr = dest;\n      if (((uint)dest & 1) != 0) {\n        src_ptr = (undefined4 *)((int)src + 1);\n        dest_ptr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      dest = dest_ptr;\n      src = src_ptr;\n      if ((temp_size & 2) != 0) {\n        src = (undefined4 *)((int)src_ptr + 2);\n        dest = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (size_gt_63 = 0x3f < size) {\n    *dest_ptr = *src;\n    dest_ptr[1] = src[1];\n    dest_ptr[2] = src[2];\n    dest_ptr[3] = src[3];\n    dest_ptr[4] = src[4];\n    dest_ptr[5] = src[5];\n    dest_ptr[6] = src[6];\n    dest_ptr[7] = src[7];\n    dest_ptr[8] = src[8];\n    dest_ptr[9] = src[9];\n    dest_ptr[10] = src[10];\n    dest_ptr[0xb] = src[0xb];\n    dest_ptr[0xc] = src[0xc];\n    dest_ptr[0xd] = src[0xd];\n    dest_ptr[0xe] = src[0xe];\n    dest_ptr[0xf] = src[0xf];\n    dest_ptr = dest_ptr + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_ptr = *src;\n      dest_ptr[1] = src[1];\n      dest_ptr[2] = src[2];\n      dest_ptr[3] = src[3];\n      dest_ptr = dest_ptr + 4;\n      src = src + 4;\n      size_gt_63 = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (size_gt_63);\n  }\n  temp_size = remaining_size + 0xc;\n  src_ptr = src;\n  dest_ptr = dest;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      src = src_ptr + 1;\n      *dest_ptr = *src_ptr;\n      size_gt_63 = 3 < temp_size;\n      temp_size = temp_size - 4;\n      dest_ptr = dest_ptr + 1;\n      src_ptr = src_ptr + 1;\n    } while (size_gt_63);\n  }\nLAB_000823d0:\n  if (temp_size + 4 != 0) {\n    src_ptr = src;\n    dest_ptr = dest;\n    if ((temp_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)src + 1);\n      dest_ptr = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)src;\n    }\n    if ((temp_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "copy_memory_block_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00081682": "initialize_network",
                "FUN_00081d5c": "set_device_parameters",
                "DAT_00080aa0": "device_ip_address",
                "PTR_s__00080a98": "device_name",
                "DAT_00080a9c": "device_port",
                "PTR_DAT_00080aa4": "device_status_array",
                "puVar1": "device_info_ptr",
                "FUN_00080a68": "initialize_device_00080a68",
                "PTR_DAT_00080a94": "device_info_array"
            },
            "code": "void initialize_device_00080a68(void)\n{\n  uint8_t* device_info_ptr;\n  device_info_ptr = PTR_DAT_00080a94;\n  initialize_network(PTR_DAT_00080a94,PTR_s__00080a98);\n  set_device_parameters(device_info_ptr,DAT_00080a9c,DAT_00080aa0);\n  device_info_ptr = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  device_info_ptr[5] = 0;\n  device_info_ptr[6] = 6;\n  *(uint16_t *)(device_info_ptr + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": true,
            "current_name": "initialize_device_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008160c": "execute_request",
                "iVar1": "validation_result",
                "param_1": "request_params",
                "FUN_00082994": "process_request",
                "param_2": "request_data",
                "param_3": "request_length",
                "FUN_0008165c": "validate_and_execute_request_0008165c",
                "FUN_0008163a": "validate_request"
            },
            "code": "undefined4* validate_and_execute_request_0008165c(undefined4* request_params, undefined4 request_data, undefined4 request_length)\n{\n  int validation_result = validate_request(request_params, request_length);\n  if (validation_result == 0) {\n    execute_request(request_params);\n  }\n  else {\n    request_params[2] = request_length;\n    process_request(request_params[0], request_data);\n  }\n  return request_params;\n}",
            "called": [
                "FUN_0008160c",
                "FUN_00082994",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": true,
            "current_name": "validate_and_execute_request_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "param_1": "value1",
                "param_2": "value2",
                "FUN_000815f8": "combine_values_000815f8"
            },
            "code": "uint combine_values_000815f8(int value1, uint value2) {\n    return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": true,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "pcVar3": "current_char_ptr",
                "param_1": "buffer_start",
                "param_2": "target_char",
                "param_3": "buffer_end",
                "puVar1": "current_ptr",
                "uVar2": "current_value",
                "pcVar4": "end_char_ptr",
                "bVar5": "is_end_reached"
            },
            "code": "uint* find_char_in_buffer_00084384(uint* buffer_start, char target_char, uint* buffer_end){\n    uint* current_ptr;\n    uint current_value;\n    char* current_char_ptr;\n    char* end_char_ptr;\n    bool is_end_reached;\n    \n    if (((uint)buffer_start & 3) == 0) {\n        while(buffer_end > (uint*)0x3) {\n            current_value = *buffer_start ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n            current_ptr = buffer_start;\n            if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n            buffer_end--;\n            buffer_start++;\n        }\n        current_ptr = buffer_end;\n        end_char_ptr = (char*)((int)current_ptr - 1);\n        if ((buffer_end != (uint*)0x0) && (*current_ptr != target_char)) {\n            current_char_ptr = (char*)0x0;\n            do {\n                current_ptr = (uint*)((int)current_ptr + 1);\n                is_end_reached = current_char_ptr == end_char_ptr;\n                current_char_ptr++;\n                if (is_end_reached) goto end_of_search;\n            } while (*current_ptr != target_char);\n        }\n    } else if (buffer_end == (uint*)0x0) {\n        current_ptr = (uint*)0x0;\n    } else if (*buffer_start != target_char) {\n        current_ptr = (uint*)((int)buffer_start + 1);\n        buffer_end = (uint*)((int)buffer_end - 1);\n        while(true) {\n            if (((uint)current_ptr & 3) == 0) goto aligned_start;\n            if (buffer_end == (uint*)0x0) goto end_of_search;\n            current_ptr = (uint*)((int)current_ptr + 1);\n            buffer_end = (uint*)((int)buffer_end - 1);\n            if (*current_ptr == target_char) break;\n        }\n    }\n    end_of_search:\n    return current_ptr;\n    \n    aligned_start:\n    goto while_loop_start;\n    \n    while_loop_start:\n    do {\n        current_value = *current_ptr ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        current_ptr = current_ptr;\n        if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n        buffer_end--;\n        current_ptr = current_ptr + 1;\n    } while (buffer_end > (uint*)0x3);\n    goto end_of_search;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "flags",
                "param_2": "new_flag_value",
                "*(uint *)(param_1 + 4)": "*(uint32_t*)(flags + 4)",
                "param_3": "bit_mask",
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": "new_flag_value | current_flags | ((bit_mask & 1) << 7)"
            },
            "code": "void update_flags_00081034(uint8_t* flags, uint32_t new_flag_value, uint32_t bit_mask) {\n  uint32_t current_flags = *(uint32_t*)(flags + 4);\n  uint32_t masked_new_flag = new_flag_value | current_flags | ((bit_mask & 1) << 7);\n  *(uint32_t*)(flags + 4) = masked_new_flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_flags_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "iVar3": "buffer_size",
                "iVar4": "buffer_start",
                "puVar2": "next_ptr",
                "FUN_00083974": "append_to_buffer_00083974",
                "param_1": "buffer_ptr",
                "puVar1": "data_ptr"
            },
            "code": "undefined4 append_to_buffer_00083974(undefined4 buffer_ptr)\n{\n  undefined *data_ptr;\n  undefined4 *next_ptr;\n  int buffer_size;\n  int buffer_start;\n  \n  data_ptr = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return buffer_ptr;\n  }\n  buffer_start = *(int *)PTR_DAT_0008396c;\n  next_ptr = *(undefined4 **)(buffer_start + 0x148);\n  if (next_ptr == (undefined4 *)0x0) {\n    next_ptr = (undefined4 *)(buffer_start + 0x14c);\n    *(undefined4 **)(buffer_start + 0x148) = next_ptr;\n  }\n  buffer_size = next_ptr[1];\n  if (0x1f < buffer_size) {\n    if ((DAT_00083970 == 0) ||\n       (next_ptr = (undefined4 *)FUN_00081df4(400), next_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *next_ptr = *(undefined4 *)(buffer_start + 0x148);\n    next_ptr[1] = 0;\n    buffer_size = 0;\n    *(undefined4 **)(buffer_start + 0x148) = next_ptr;\n    next_ptr[0x62] = 0;\n    next_ptr[99] = 0;\n  }\n  next_ptr[1] = buffer_size + 1;\n  next_ptr[buffer_size + 2] = data_ptr;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "append_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "iVar2": "functionResult",
                "FUN_00084700": "findResultingValue_00084700",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer"
            },
            "code": "void findResultingValue_00084700(int *result, undefined4 param2, undefined4 param3, undefined4 param4)\n{\n  undefined *pointer = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  int functionResult = callFunction(param2, param3, param4);\n  if ((functionResult == -1) && (*(int *)pointer != 0)) {\n    *result = *(int *)pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "imported": true,
            "current_name": "findResultingValue_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "undefined4": "int",
                "PTR_DAT_0008171c": "pointer",
                "thunk_FUN_00081714": "get_value_from_pointer_thunk_00081714"
            },
            "code": "int get_value_from_pointer_thunk_00081714() {\n  int* PTR_DAT_0008171c = (int*)PTR_DAT_0008171c;\n  int value = *PTR_DAT_0008171c;\n  return value;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000805d0",
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_00081ca8": "check_for_zero_or_carry_flag_00081ca8",
                "FUN_00081c54": "check_carry_flag"
            },
            "code": "bool check_for_zero_or_carry_flag_00081ca8(void)\n{\n  bool carry_flag = check_carry_flag();\n  bool zero_flag = check_zero_flag();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "check_for_zero_or_carry_flag_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "iVar3": "result",
                "iVar5": "data_index",
                "puVar2": "flag_ptr",
                "param_1": "index",
                "FUN_00081318": "update_data_00081318",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr",
                "uVar4": "data_value"
            },
            "code": "void update_data_00081318(int index, int value, undefined4 param_3)\\n{\\n  undefined *data_ptr = PTR_DAT_00081380;\\n  undefined *flag_ptr = PTR_DAT_00081384;\\n  if (data_ptr[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((flag_ptr[index] & 0xf) == 5) {\\n      FUN_00081210(index, 1, param_3, 5, index, value, param_3);\\n    }\\n    flag_ptr[index] = flag_ptr[index] & 0xf | (byte)(value << 4);\\n    int data_index = *(int *)(data_ptr + index * 0x1c);\\n    undefined4 data_value = *(undefined4 *)(data_ptr + index * 0x1c + 4);\\n    int result = FUN_00080e04(data_index, data_value);\\n    if (result == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(data_index + 100) = data_value;\\n        return;\\n      }\\n      *(undefined4 *)(data_index + 0x60) = data_value;\\n      return;\\n    }\\n    FUN_00080d7a(data_index, data_value, value, 0, 1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080d7a",
                "FUN_00080e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258",
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "PTR_DAT_0008171c": "pointer_to_data",
                "FUN_00081714": "get_value_from_pointer_00081714"
            },
            "code": "get_value_from_pointer_00081714() {\n  return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "iVar1": "result",
                "param_1": "data",
                "FUN_0008449c": "process_data_0008449c",
                "param_2": "data_info",
                "uVar2": "status_flags"
            },
            "code": "void process_data_0008449c(undefined4 data, int data_info)\n{\n  int result;\n  ushort status_flags;\n  result = get_data(data, (int)*(short *)(data_info + 0xe));\n  if (result == -1) {\n    status_flags = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    status_flags = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_info + 0x50) = result;\n  }\n  *(ushort *)(data_info + 0xc) = status_flags;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": true,
            "current_name": "process_data_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0"
            ],
            "imported": true,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "uVar1": "result_1",
                "param_1": "input_value",
                "lVar2": "result_2",
                "param_2": "input_int",
                "param_3": "input_param_1",
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_4": "input_param_2",
                "param_5": "output_array"
            },
            "code": "void calculate_difference_0008477c(uint input_value, int input_int, undefined4 input_param_1, undefined4 input_param_2, int *output_array){\n  uint result_1;\n  longlong result_2;\n  \n  result_2 = calculate_result();\n  result_2 = result_2 * CONCAT44(input_param_2, input_param_1);\n  result_1 = (uint)result_2;\n  *output_array = input_value - result_1;\n  output_array[1] = (input_int - (int)((ulonglong)result_2 >> 0x20)) - (uint)(input_value < result_1);\n  return;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": true,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "bVar1": "is_overflow",
                "iVar4": "return_value",
                "param_1": "data",
                "cVar3": "byte_count",
                "FUN_000801b0": "process_data_000801b0",
                "uVar2": "current_byte",
                "bVar5": "byte_count"
            },
            "code": "int process_data_000801b0(int **data) {\n  bool is_overflow = false;\n  undefined current_byte;\n  char byte_count;\n  int return_value;\n  \n  if (*(byte *)((int)data + 6) > 1) {\n    initialize_data(*(byte *)((int)data + 6), 0);\n  }\n  \n  *(undefined *)((int)data + 0x49) = 0;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    while (true) {\n      return_value = (**(code **)(**data + 8))();\n      if (return_value == 0) {\n        break;\n      }\n      current_byte = (**(code **)(**data + 0xc))();\n      byte_count = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + byte_count + 9) = current_byte;\n      byte_count++;\n      *(byte *)((int)data + 0x49) = byte_count;\n      if (byte_count > 63) {\n        is_overflow = true;\n        break;\n      }\n    }\n  }\n  \n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    byte_count = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    byte_count = *(char *)((int)data + 0x49);\n  }\n  \n  return (int)byte_count;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "uVar1": "new_buffer_index",
                "param_1": "buffer_address",
                "param_2": "data",
                "FUN_000813c2": "update_buffer_000813c2"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined data){\n  uint new_buffer_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_buffer_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = data;\n    *(uint *)(buffer_address + 0x80) = new_buffer_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": true,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "param_1": "params",
                "param_6": "param6",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "ptr_to_fun",
                "FUN_000814e4": "initialize_params_000814e4"
            },
            "code": "void initialize_params_000814e4(int *params, int param2, char param3, int param4, int param5, int param6)\n{\n  params[0] = (int)ptr_to_fun;\n  params[1] = 0;\n  params[2] = 1000;\n  params[3] = param2;\n  params[4] = param5;\n  params[5] = param6;\n  *(char *)(params + 6) = param3;\n  params[7] = param4;\n  params[8] = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": true,
            "current_name": "initialize_params_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "bVar1": "is_bit_set",
                "param_1": "values",
                "param_2": "value",
                "param_3": "bitmask",
                "FUN_00080d54": "set_values_based_on_bitmask_00080d54"
            },
            "code": "void set_values_based_on_bitmask_00080d54(uint32_t *values, uint32_t value, uint32_t bitmask) {\n  bool is_bit_set;\n  \n  is_bit_set = (int)(bitmask << 0x1f) < 0;\n  values[17] = value;\n  if (is_bit_set) {\n    values[25] = value;\n  }\n  if (!is_bit_set) {\n    values[24] = value;\n  }\n  is_bit_set = (bitmask & 10) != 0;\n  if (is_bit_set) {\n    values[8] = value;\n  }\n  if (!is_bit_set) {\n    values[9] = value;\n  }\n  if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n    values[32] = value;\n  }\n  values[5] = value;\n  *values = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "set_values_based_on_bitmask_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "iVar1": "current_index",
                "param_1": "starting_index",
                "param_2": "data_length",
                "cVar3": "bit_index",
                "uVar2": "checksum",
                "uVar4": "lsb",
                "FUN_0008021c": "calculate_checksum_0008021c"
            },
            "code": "uint calculate_checksum_0008021c(int starting_index, uint data_length)\n{\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = starting_index; (current_index - starting_index & 0xffU) < data_length; current_index++) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index--;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": true,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00082ac0",
                "FUN_00083808",
                "FUN_0008378c",
                "FUN_00084750",
                "FUN_00083b14",
                "FUN_00084384",
                "FUN_00082a50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_function_with_param_00081e04",
                "param_1": "param",
                "*DAT_00081e10": "function_ptr"
            },
            "code": "void call_function_with_param_00081e04(void* *DAT_00081e10, int param){\n  *DAT_00081e10(param);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "imported": true,
            "current_name": "call_function_with_param_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "iVar1": "result",
                "FUN_00084750": "check_if_params_are_zero_00084750",
                "param_1": "first_param",
                "FUN_000847ac": "calculate_result",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "int check_if_params_are_zero_00084750(int first_param, int second_param, int third_param, int fourth_param)\n{\n  int result = 0;\n\n  if ((fourth_param == 0) && (third_param == 0)) {\n    if (second_param != 0 || first_param != 0) {\n      result = -1;\n    }\n    return result;\n  }\n  result = calculate_result();\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "check_if_params_are_zero_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080e18": "set_device_mode",
                "iVar3": "i",
                "iVar4": "var_14",
                "FUN_00081d7c": "initialize_network",
                "iVar5": "var_18",
                "FUN_00080e9c": "initialize_time",
                "DAT_00080bfc": "var_18",
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar2": "system_info_ptr",
                "iVar6": "var_1C",
                "DAT_00080bf4": "i",
                "FUN_00080f9c": "set_device_time",
                "iVar7": "num_iterations",
                "iVar8": "var_20",
                "FUN_00080da0": "set_device_config",
                "DAT_00080bf8": "var_14",
                "DAT_00080be8": "time_in_ms_ptr",
                "FUN_00081318": "initialize_device",
                "DAT_00080c08": "device_config_ptr",
                "puVar1": "time_in_ms_ptr",
                "DAT_00080bec": "system_info_ptr",
                "DAT_00080c00": "var_1C",
                "DAT_00080c04": "device_config_size"
            },
            "code": "voDAT_00080bf4d initialize_system_00080ae4(voDAT_00080bf4d)\n{\n  uDAT_00080bf4nt *DAT_00080be8;\n  undefDAT_00080bf4ned4 *DAT_00080bec;\n  DAT_00080bf4nt DAT_00080bf4;\n  DAT_00080bf4nt num_DAT_00080bf4teratDAT_00080bf4ons;\n  DAT_00080bf4nt DAT_00080bf8;\n  DAT_00080bf4nt DAT_00080bfc;\n  DAT_00080bf4nt DAT_00080c00;\n  DAT_00080bf4nt var_20;\n  \n  DAT_00080be8 = PTR_DAT_00080be8;\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_tDAT_00080bf4me();\n  DAT_00080bec = PTR_DAT_00080bec;\n  DAT_00080bec[1] = *DAT_00080be8 / 1000 - 1;\n  *(undefDAT_00080bf4ned *)(PTR_DAT_00080bf0 + 0x23) = 0xf0;\n  DAT_00080bec[2] = 0;\n  *DAT_00080bec = 7;\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_network();\n  num_DAT_00080bf4teratDAT_00080bf4ons = 0;\n  do {\n    var_20 = num_DAT_00080bf4teratDAT_00080bf4ons + 1;\n    DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(num_DAT_00080bf4teratDAT_00080bf4ons, 0);\n    DAT_00080c00 = DAT_00080c00;\n    DAT_00080bfc = DAT_00080bfc;\n    DAT_00080bf8 = DAT_00080bf8;\n    DAT_00080bf4 = DAT_00080bf4;\n    num_DAT_00080bf4teratDAT_00080bf4ons = var_20;\n  } whDAT_00080bf4le (var_20 != 0x4f);\n  *(undefDAT_00080bf4ned4 *)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n  *(undefDAT_00080bf4ned4 *)(DAT_00080bf8 + 0xa0) = 0xffffffff;\n  *(undefDAT_00080bf4ned4 *)(DAT_00080c00 + 0xa0) = 0xffffffff;\n  *(undefDAT_00080bf4ned4 *)(DAT_00080bfc + 0xa0) = 0xffffffff;\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bf4, 1, 0x300, 0);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(0, 1);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bf4, 1, 0xc00, 0);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bf4, 1, 0x3000, 0);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bfc, 2, 0x30, 0);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bf8, 1, 0xc00, 0);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bf4, 1, 3, 0);\n  DAT_00080bf4nDAT_00080bf4tDAT_00080bf4alDAT_00080bf4ze_devDAT_00080bf4ce(DAT_00080bf8, 1, 0xc000, 0);\n  set_devDAT_00080bf4ce_mode(0x25);\n  set_devDAT_00080bf4ce_tDAT_00080bf4me(PTR_DAT_00080c08,*DAT_00080be8,PTR_DAT_00080c04,0xc);\n  set_devDAT_00080bf4ce_confDAT_00080bf4g(PTR_DAT_00080c08,0,0x300000,1);\n  set_devDAT_00080bf4ce_confDAT_00080bf4g(PTR_DAT_00080c08,0,0);\n  set_devDAT_00080bf4ce_confDAT_00080bf4g(PTR_DAT_00080c08,0xffffffff);\n  set_devDAT_00080bf4ce_confDAT_00080bf4g(PTR_DAT_00080c08);\n  return;\n}\n",
            "called": [
                "FUN_00080f9c",
                "FUN_00081d7c",
                "FUN_00081034",
                "FUN_00080e18",
                "FUN_00080e9c",
                "FUN_00081318",
                "FUN_00081042",
                "FUN_0008106e",
                "FUN_00080da0",
                "FUN_00081066"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "iVar3": "buffer_start_index",
                "FUN_00081d5c": "add_data_to_buffer_00081d5c",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "puVar1": "current_buffer",
                "uVar2": "current_index",
                "uVar4": "bit_mask"
            },
            "code": "uint32_t add_data_to_buffer_00081d5c(uint32_t data, uint32_t *buffer, uint32_t buffer_size)\n{\n  uint32_t *current_buffer;\n  uint32_t current_index;\n  uint32_t bit_mask;\n  int32_t buffer_start_index = *(int32_t*)PTR_DAT_0008396c;\n  current_buffer = *(uint32_t**)(buffer_start_index + 0x148);\n  if (current_buffer == (uint32_t*)0x0) {\n    current_buffer = (uint32_t*)(buffer_start_index + 0x14c);\n    *(uint32_t**)(buffer_start_index + 0x148) = current_buffer;\n  }\n  current_index = current_buffer[1];\n  if (buffer_size < current_index) {\n    if ((DAT_00083970 == 0) || (current_buffer = (uint32_t*)allocate_memory(400), current_buffer == (uint32_t*)0x0)) {\n      return 0xffffffff;\n    }\n    *current_buffer = *(uint32_t*)(buffer_start_index + 0x148);\n    current_buffer[1] = 0;\n    current_index = 0;\n    *(uint32_t**)(buffer_start_index + 0x148) = current_buffer;\n    current_buffer[0x62] = 0;\n    current_buffer[99] = 0;\n  }\n  bit_mask = 1 << (current_index & 0xff);\n  current_buffer[current_index + 0x22] = data;\n  current_buffer[0x62] = current_buffer[0x62] | bit_mask;\n  current_buffer[current_index + 0x42] = buffer_size;\n  current_buffer[99] = bit_mask | current_buffer[99];\n  current_buffer[1] = current_index + 1;\n  current_buffer[current_index + 2] = *buffer;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": true,
            "current_name": "add_data_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "iVar2": "search_result",
                "FUN_00082970": "get_value_from_data_00082970",
                "param_1": "result",
                "param_2": "input_value",
                "puVar1": "data_ptr"
            },
            "code": "void get_value_from_data_00082970(int *result, undefined4 input_value)\n{\n  undefined *data_ptr;\n  int search_result;\n  data_ptr = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  search_result = search_data(input_value);\n  if ((search_result == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": true,
            "current_name": "get_value_from_data_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "returnOne_000811be"
            },
            "code": "int returnOne_000811be(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": true,
            "current_name": "returnOne_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c5c": "copy_memory",
                "param_1": "destination",
                "param_2": "source",
                "FUN_00081c54": "copy_parameter_to_pointer_00081c54"
            },
            "code": "void copy_parameter_to_pointer_00081c54(void* destination, const void* source) {\n  copy_memory(destination, source);\n  return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": true,
            "current_name": "copy_parameter_to_pointer_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "iVar1": "check_result",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "FUN_0008163a": "check_if_valid_0008163a"
            },
            "code": "int check_if_valid_0008163a(int* ptr_param1, uint param2) {\n  int result;\n  if ((*ptr_param1 == 0) || ((uint)ptr_param1[1] < param2)) {\n    int check_result = check_ptr_param1(ptr_param1);\n    if (check_result == 0) {\n      return 0;\n    }\n    if (ptr_param1[2] == 0) {\n      *(undefined *)*ptr_param1 = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "check_if_valid_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "*DAT_000825ac": "function_pointer",
                "param_1": "param_1",
                "param_2": "param_2",
                "FUN_000825a0": "call_function_with_params_000825a0"
            },
            "code": "void call_function_with_params_000825a0(void* *DAT_000825ac, int param_1, int param_2)\n{\n  *DAT_000825ac(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": true,
            "current_name": "call_function_with_params_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "param_1[9]": "ptr_array[9]",
                "PTR_PTR_FUN_00081454_1_000815f4": "PTR_PTR_FUNC_1",
                "param_1": "ptr_array",
                "*param_1": "*ptr_array",
                "param_2": "value",
                "FUN_000814e4": "initialize_ptr",
                "FUN_000815d4": "set_ptr_and_value_000815d4"
            },
            "code": "undefined4* set_ptr_and_value_000815d4(undefined4* ptr_array, undefined4 value) {\n  initialize_ptr();\n  *ptr_array = PTR_PTR_FUN_00081454_1_000815f4;\n  ptr_array[9] = value;\n  return ptr_array;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "set_ptr_and_value_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970",
                "FUN_00083d9c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_000842a4",
                "FUN_00083f34",
                "FUN_00081df4",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "set_variable": "set_variable",
                "**param_1": "**function_pointer",
                "code": "function",
                "(int)param_1 + 0x49": "(int)function_pointer + OFFSET_4",
                "iVar2": "status",
                "*(undefined *)((int)param_1 + 6)": "*(undefined *)((int)function_pointer + OFFSET_2)",
                "(int)param_1 + 6": "(int)function_pointer + OFFSET_2",
                "byte": "byte",
                "FUN_00080164": "execute_function_00080164",
                "**(code **)(**param_1 + 0xc))()": "**(function **)(**function_pointer + OFFSET_3))()",
                "FUN_00081210": "set_variable",
                "param_1": "function_pointer",
                "(int)param_1 + 0x4a": "(int)function_pointer + OFFSET_5",
                "int": "int",
                "undefined": "undefined",
                "PTR_DAT_000801ac": "FUNCTION_POINTER",
                "FUN_00081318": "set_variable",
                "**(code **)(*(int *)puVar1 + 0x18)": "**(function **)(*(int *)function_name + OFFSET_1)",
                "param_1 + 0x15": "function_pointer + OFFSET_6",
                "param_1 + 0x14": "function_pointer + OFFSET_8",
                "puVar1": "function_name",
                "(int)param_1 + 0x52": "(int)function_pointer + OFFSET_7",
                "*(byte *)((int)param_1 + 6)": "*(byte *)((int)function_pointer + OFFSET_2)"
            },
            "code": "void execute_function_00080164(int **function_pointer)\n{\n  int status;\n  char *function_name;\n  function_name = FUNCTION_NAME;\n  *function_pointer = (int *)PTR_DAT_000801ac;\n  (**(function **)(*(int *)function_name + OFFSET_1))\n  (PTR_DAT_000801ac);\n  if (1 < *(byte *)((int)function_pointer + OFFSET_2)) {\n    set_variable(*(byte *)((int)function_pointer + OFFSET_2),1);\n    set_variable(*(undefined *)((int)function_pointer + OFFSET_2),0);\n  }\n  do {\n    status = (**(function **)(**function_pointer + OFFSET_3))();\n  } while (-1 < status);\n  set_variable((int)function_pointer + OFFSET_4, 0);\n  set_variable((int)function_pointer + OFFSET_5, 0);\n  set_variable((int)function_pointer + OFFSET_6, 0);\n  set_variable((int)function_pointer + OFFSET_7, 0);\n  set_variable((int)function_pointer + OFFSET_8, 0);\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": true,
            "current_name": "execute_function_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "iVar1": "i",
                "FUN_000811cc": "copy_bytes_to_memory_000811cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "num_bytes",
                "DAT_000811ec": "memory_address"
            },
            "code": "uint copy_bytes_to_memory_000811cc(uint destination, const uint source, uint num_bytes)\n{\n  int i;\n  uint mask = ~((int)num_bytes >> 0x1f);\n  for (i = 0; i < (int)num_bytes; i = i + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(source + i);\n  }\n  return num_bytes & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": true,
            "current_name": "copy_bytes_to_memory_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "iVar2": "result",
                "FUN_000846dc": "getParamValue_000846dc",
                "param_1": "returnValue",
                "param_2": "inputValue",
                "puVar1": "ptrData",
                "PTR_DAT_000846fc": "ptrData"
            },
            "code": "void getParamValue_000846dc(int *returnValue, undefined4 inputValue)\n{\n  undefined *PTR_DAT_000846fc = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  int result = getValue(inputValue);\n  if ((result == -1) && (*(int *)PTR_DAT_000846fc != 0)) {\n    *returnValue = *(int *)PTR_DAT_000846fc;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "getParamValue_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "iVar1": "leading_zeroes",
                "iVar3": "scaled_value",
                "shifted_zero": "shifted_zero",
                "FUN_00081894": "find_closest_power_of_two_00081894",
                "param_1": "input_num",
                "result": "result",
                "uVar2": "shift_amount",
                "uVar4": "carry",
                "shifted_input": "shifted_input"
            },
            "code": "uint find_closest_power_of_two_00081894(uint input_num)\n{\n  int leading_zeroes = count_leading_zeroes(input_num);\n  int shift_amount = leading_zeroes - 8;\n  int scaled_value = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input_num << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = scaled_value + shifted_input + shifted_zero + carry;\n    if ((input_num & 0x80000000) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input_num << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_zero = ((int)shifted_input >> 0x1f);\n  uint result = scaled_value + ((input_num >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - shifted_zero);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "find_closest_power_of_two_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_if_possible_000845bc",
                "param_1": "memory_address",
                "*param_1": "*memory_address",
                "*param_2": "*byte_to_write",
                "param_2": "byte_to_write",
                "param_3": "byte_value"
            },
            "code": "int write_byte_to_memory_if_possible_000845bc(int *memory_address, char *byte_to_write, uint byte_value) {\n  if (byte_to_write == NULL) {\n    return 0;\n  }\n  if (byte_value < 256) {\n    *byte_to_write = (char)byte_value;\n    return 1;\n  }\n  *memory_address = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": true,
            "current_name": "write_byte_to_memory_if_possible_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "puVar2": "last_word",
                "param_1": "memory",
                "FUN_00082504": "fill_memory_with_value_00082504",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "uVar3": "value_32bit",
                "uVar4": "remaining_size",
                "bVar5": "is_unaligned"
            },
            "code": "void fill_memory_with_value_00082504(uint32_t *memory, uint8_t value, uint32_t size) {\n  uint32_t *current_word;\n  uint32_t *last_word;\n  uint32_t value_32bit;\n  uint32_t remaining_size;\n  bool is_unaligned = ((uint32_t)memory & 3) != 0;\n  if (is_unaligned) {\n    if (size == 0) {\n      return;\n    }\n    current_word = memory;\n    size--;\n    while (true) {\n      *(uint8_t *)current_word = value;\n      current_word = (uint32_t *)((int)current_word + 1);\n      if (((uint32_t)current_word & 3) == 0) {\n        break;\n      }\n      size--;\n      if (size == 0) {\n        return;\n      }\n    }\n  }\n  if (size > 3) {\n    value_32bit = (value << 24) | (value << 16) | (value << 8) | value;\n    remaining_size = size;\n    current_word = memory;\n    if (size > 15) {\n      remaining_size = size - 16;\n      do {\n        *current_word = value_32bit;\n        current_word[1] = value_32bit;\n        current_word[2] = value_32bit;\n        current_word[3] = value_32bit;\n        current_word += 4;\n      } while (current_word != (uint32_t *)((int)memory + (remaining_size & 0xFFFFFFF0) + 16));\n      size = remaining_size & 0xF;\n      memory = (uint32_t *)((int)current_word + ((remaining_size >> 4) + 1) * 4);\n      remaining_size = size;\n      current_word = memory;\n      if (size < 4) {\n        goto LAB_00082580;\n      }\n    }\n    do {\n      remaining_size -= 4;\n      *current_word = value_32bit;\n      current_word++;\n    } while (remaining_size > 3);\n    memory = (uint32_t *)((int)current_word + (size - 4 & 0xFFFFFFFC) + 4);\n    remaining_size = size & 3;\n  }\nLAB_00082580:\n  if (remaining_size != 0) {\n    current_word = memory;\n    do {\n      last_word = current_word + 1;\n      *(uint8_t *)current_word = value;\n      current_word = last_word;\n    } while (last_word != (uint32_t *)(remaining_size + (int)memory));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": true,
            "current_name": "fill_memory_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "PTR_DAT_0008010c": "is_initialized_ptr",
                "DAT_00080114": "initialized_value",
                "DAT_00080110": "global_initialized_value",
                "param_1": "input_param",
                "FUN_000800f4": "check_and_set_initialized_000800f4"
            },
            "code": "int check_and_set_initialized_000800f4(int input_param) {\n  if (*PTR_DAT_0008010c == 0) {\n    if (DAT_00080110 != 0) {\n      input_param = DAT_00080114;\n    }\n    *PTR_DAT_0008010c = 1;\n  }\n  return input_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": true,
            "current_name": "check_and_set_initialized_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "local_47c": "flags",
                "iVar1": "result",
                "local_46c": "var_24",
                "iVar2": "func_result",
                "local_47a": "flag_mask",
                "param_1": "data",
                "auStack_420": "stack_array",
                "local_424": "var_18",
                "local_488": "stack_buffer",
                "local_478": "buffer_ptr",
                "local_464": "var_20",
                "local_474": "var_2C",
                "param_2": "size",
                "FUN_0008378c": "process_data_0008378c",
                "local_480": "buffer_size",
                "local_470": "var_28"
            },
            "code": "int process_data_0008378c(undefined4 data, int size) {\n  int result = 0;\n  int func_result;\n  undefined *stack_buffer [2];\n  undefined4 buffer_size = 0x400;\n  ushort flags;\n  undefined2 flag_mask = 0xfffd;\n  undefined *buffer_ptr;\n  undefined4 var_2C;\n  undefined4 var_28;\n  undefined4 var_24;\n  undefined4 var_20;\n  undefined4 var_18;\n  undefined stack_array [1024];\n  var_18 = *(undefined4 *)(size + 100);\n  var_20 = *(undefined4 *)(size + 0x1c);\n  flag_mask = *(undefined2 *)(size + 0xe);\n  var_24 = *(undefined4 *)(size + 0x24);\n  stack_buffer[0] = stack_array;\n  flags = *(ushort *)(size + 0xc) & flag_mask;\n  buffer_size = 0x400;\n  var_2C = 0;\n  buffer_ptr = stack_buffer[0];\n  func_result = FUNC_00082b38(data, stack_buffer);\n  if ((func_result >= 0) && (FUN_00083adc(data, stack_buffer) != 0)) {\n    result = -1;\n  }\n  if (((uint)flags << 0x19) < 0) {\n    *(ushort *)(size + 0xc) = *(ushort *)(size + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "data_size": "data_size",
                "iVar2": "header_offset",
                "iVar5": "temp_size",
                "iVar7": "data_offset",
                "param_1": "data_buffer",
                "piVar1": "data_ptr",
                "data_offset": "data_offset",
                "unaff_r4": "result",
                "param_2": "header_buffer",
                "FUN_00083adc": "extract_data_00083adc",
                "uVar3": "header_flags",
                "pcVar6": "decode_func",
                "uVar4": "header_size"
            },
            "code": "undefined4 extract_data_00083adc(int *data_buffer, int *header_buffer)\n{\n  int *data_ptr;\n  int data_size;\n  ushort header_flags;\n  uint header_size;\n  int header_offset;\n  code *decode_func;\n  undefined4 result;\n  int temp_size;\n  int data_offset;\n  \n  if ((data_buffer != (int *)0x0) && (data_buffer[0xe] == 0)) {\n    clear_data_buffer();\n  }\n  if (*(short *)(header_buffer + 3) == 0) {\n    return 0;\n  }\n  header_flags = *(ushort *)(header_buffer + 3);\n  if ((int)((uint)header_flags << 0x1c) < 0) {\n    header_offset = header_buffer[4];\n    if (header_offset == 0) {\n      return 0;\n    }\n    data_offset = *header_buffer;\n    if ((header_flags & 3) == 0) {\n      temp_size = header_buffer[5];\n    }\n    else {\n      temp_size = 0;\n    }\n    *header_buffer = header_offset;\n    data_size = data_offset - header_offset;\n    header_buffer[2] = temp_size;\n    do {\n      if (data_size < 1) {\n        return 0;\n      }\n      temp_size = (*(code *)header_buffer[9])(data_buffer,header_buffer[7],header_offset,data_size,result);\n      data_size = data_size - temp_size;\n      header_offset = header_offset + temp_size;\n    } while (0 < temp_size);\n    *(ushort *)(header_buffer + 3) = header_flags | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(header_buffer + 3) = header_flags | 0x800;\n  if ((header_buffer[1] < 1) && (header_buffer[0xf] < 1)) {\n    return 0;\n  }\n  decode_func = (code *)header_buffer[10];\n  if (decode_func == (code *)0x0) {\n    return 0;\n  }\n  header_size = (uint)(header_flags | 0x800);\n  data_offset = *data_buffer;\n  *data_buffer = 0;\n  if ((header_flags & 0x1000) == 0) {\n    temp_size = (*decode_func)(data_buffer,header_buffer[7],header_size & 0x1000,1);\n    if ((temp_size == -1) && (data_size = *data_buffer, data_size != 0)) {\n      if ((data_size == 0x1d) || (data_size == 0x16)) {\n        *data_buffer = data_offset;\n        return 0;\n      }\n      *(ushort *)(header_buffer + 3) = header_flags | 0x40;\n      return 0xffffffff;\n    }\n    header_flags = *(ushort *)(header_buffer + 3);\n    decode_func = (code *)header_buffer[10];\n  }\n  else {\n    temp_size = header_buffer[0x14];\n  }\n  if (((int)(header_flags << 0x1d) < 0) && (temp_size = temp_size - header_buffer[1], header_buffer[0xc] != 0)) {\n    temp_size = temp_size - header_buffer[0xf];\n  }\n  temp_size = (*decode_func)(data_buffer,header_buffer[7],temp_size,0);\n  if (temp_size == -1) {\n    data_size = *data_buffer;\n    if (data_size != 0) {\n      if ((data_size != 0x1d) && (data_size != 0x16)) {\n        *(ushort *)(header_buffer + 3) = header_flags | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(header_buffer + 3) = header_flags & 0xf7ff;\n      *header_buffer = header_buffer[4];\n      header_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    header_flags = *(ushort *)(header_buffer + 3) & 0xf7ff;\n    header_buffer[1] = 0;\n    *(ushort *)(header_buffer + 3) = header_flags;\n    *header_buffer = header_buffer[4];\n  }\n  else {\n    header_flags = *(ushort *)(header_buffer + 3) & 0xf7ff;\n    *header_buffer = header_buffer[4];\n    *(ushort *)(header_buffer + 3) = header_flags;\n    header_buffer[1] = 0;\n  }\n  if ((int)((uint)header_flags << 0x13) < 0) {\n    header_buffer[0x14] = temp_size;\n  }\nLAB_00083a00:\n  data_ptr = (int *)header_buffer[0xc];\n  *data_buffer = data_offset;\n  if (data_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (data_ptr != header_buffer + 0x10) {\n    free_data_buffer(data_buffer);\n  }\n  header_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "imported": true,
            "current_name": "extract_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00082438(piVar9,param_2);\n      }\n      FUN_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "*(byte *)(param_1 + 10)": "byte_to_check",
                "iVar1": "index",
                "param_1": "array_address",
                "*(short *)(param_1 + 0x54)": "counter",
                "PTR_DAT_0008040c": "byte_array",
                "FUN_000803d4": "check_for_byte_in_array_000803d4"
            },
            "code": "int check_for_byte_in_array_000803d4(int array_address, int byte_to_check) {\n  int index = 0;\n  while (index != 8) {\n    if (*(byte *)(array_address + index) == *(byte *)(byte_to_check + 10)) {\n      return 0;\n    }\n    index++;\n  }\n  *(short *)(byte_to_check + 0x54) += 1;\n  return ((uint)*(byte *)(byte_to_check + 10) << 0x18) < 0 ? 0xfb : 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "check_for_byte_in_array_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "iVar4": "status",
                "param_1": "data",
                "piVar3": "ptr",
                "unaff_r6": "num_bytes",
                "cVar1": "result",
                "uVar2": "value",
                "FUN_0008043e": "process_data_0008043e"
            },
            "code": "int process_data_0008043e(int **data) {\n  char result = 0;\n  uint8_t num_bytes = *(uint8_t *)((int)data + 5);\n  if (num_bytes < 4) {\n    uint8_t value = (*(code **)(**data + 8))();\n    num_bytes = value & 0xff;\n  }\n  int *ptr = (int *)thunk_get_data();\n  if (data[23] < ptr) {\n    *(uint8_t *)(data + 2) = 0xff;\n    *(uint8_t *)((int)data + 7) = 0;\n    *(short *)(data + 21) = *(short *)(data + 21) + 1;\n  }\n  else if (num_bytes > 7) {\n    process_data_0008043e(data);\n    int status = check_data(data);\n    if (status == 0) {\n      if (*(uint8_t *)((int)data + 10) - 3 < 2) {\n        update_data(data);\n      }\n      *(uint8_t *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 73);\n    }\n    else {\n      *(uint8_t *)((int)data + 7) = 0;\n      result = (char)status;\n    }\n  }\n  return (int)result;\n}",
            "called": [
                "FUN_000803d4",
                "FUN_000801b0",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "process_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_data_0008160c",
                "FUN_00081e04": "clear_data",
                "param_1": "data",
                "*param_1": "*data"
            },
            "code": "void reset_data_0008160c(int *data)\n{\n  if (*data != 0) {\n    clear_data();\n  }\n  *data = 0;\n  data[2] = 0;\n  data[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "reset_data_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "uVar1": "bit_mask",
                "param_1": "bit_num"
            },
            "code": "int check_and_set_bit_00080e18(uint bit_num) {\n  uint bit_mask;\n\n  if (bit_num < 45) {\n    if (bit_num < 32) {\n      bit_mask = 1 << bit_num;\n      if ((bit_mask & *(uint *)(PTR_DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(PTR_DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_num - 32);\n      if ((bit_mask & *(uint *)(PTR_DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(PTR_DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00081210",
                "FUN_00081508",
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "check_and_set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "returnZero_00081184"
            },
            "code": "int returnZero_00081184() {\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": true,
            "current_name": "returnZero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_first_element_00084298",
                "*DAT_000842a0": "PTR_000842a0"
            },
            "code": "int get_first_element_00084298(void)\n{\n  int* first_element = *DAT_000842a0;\n  return *first_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "get_first_element_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_param_to_max_00081066",
                "param_1": "param_value"
            },
            "code": "void set_param_to_max_00081066(int param_value)\n{\n  *(undefined4 *)(param_value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "set_param_to_max_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "uVar1": "shift_amount",
                "FUN_00081cd0": "decode_signed_magnitude_00081cd0",
                "param_1": "input",
                "uVar2": "inverted_shift_amount",
                "shifted_input": "shifted_input"
            },
            "code": "int32_t decode_signed_magnitude_00081cd0(int32_t input) {\n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  int32_t shift_amount = (input << 1) >> 0x18;\n  int32_t inverted_shift_amount = 0x9e - shift_amount;\n  if (shift_amount < 0x9f && inverted_shift_amount != 0) {\n    int32_t shifted_input = (input << 8 | 0x80000000) >> (inverted_shift_amount & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shifted_input = -shifted_input;\n    }\n    return shifted_input;\n  }\n  if ((inverted_shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "decode_signed_magnitude_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_data_pointer_00081df4",
                "param_1": "param_1",
                "FUNC_00081e14": "call_function",
                "DAT_00081e00": "data_pointer"
            },
            "code": "void call_function_with_data_pointer_00081df4(void* DAT_00081e00, undefined4 param_1)\n{\n  FUNC_00081e14(*DAT_00081e00, param_1);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": true,
            "current_name": "call_function_with_data_pointer_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "bVar3": "current_index",
                "iVar2": "current_data_address",
                "uVar1": "processed_data",
                "iVar5": "destination_address",
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_start_address",
                "param_2": "data_length",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2",
                "uVar4": "current_index_uint"
            },
            "code": "void process_data_00080410(int data_start_address, uint8_t data_length, uint32_t unknown_param_1, uint32_t unknown_param_2)\n{\n  uint8_t current_index = 0;\n  while(current_index < (data_length >> 1)) {\n    uint32_t current_data_address = (current_index * 2 + 3 & 0xFF) + data_start_address;\n    uint32_t destination_address = *(uint32_t *)(data_start_address + 0x4C);\n    uint16_t processed_data = process_single_data(*(uint8_t *)(current_data_address + 9), *(uint8_t *)(current_data_address + 10), current_data_address, data_length, unknown_param_2);\n    *(uint16_t *)(destination_address + current_index * 2) = processed_data;\n    current_index++;\n  }\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "bVar1": "is_negative_flag",
                "FUN_00080da0": "update_data_00080da0",
                "param_1": "data_address",
                "DAT_00080df8": "PTR_update_data_func",
                "param_2": "data_type",
                "param_3": "new_data",
                "param_4": "update_flag",
                "DAT_00080dfc": "PTR_update_data_func_2",
                "DAT_00080e00": "PTR_update_data_func_3"
            },
            "code": "int update_data_00080da0(int data_address, int data_type, int new_data, unsigned int update_flag) {\n  bool is_negative_flag = (int)(update_flag << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*DAT_00080df8)(data_address, data_type, new_data);\n      *(int *)(data_address + 0x44) = new_data;\n      if (is_negative_flag) {\n        *(int *)(data_address + 100) = new_data;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_address + 0x60) = new_data;\n      }\n      break;\n    case 3:\n      (*DAT_00080dfc)(data_address, new_data, update_flag, DAT_00080dfc, data_address);\n      break;\n    case 4:\n    case 5:\n      bool is_data_type_5 = data_type == 5;\n      bool is_bit_set = (update_flag << 0x1d) >> 0x1f;\n      bool is_last_bit_set = update_flag & 1;\n      (*DAT_00080e00)(data_address, new_data, is_data_type_5, is_bit_set, is_last_bit_set, data_type, new_data);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d54",
                "FUN_00080d2e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "bVar1": "current_byte_index",
                "iVar3": "result",
                "param_1": "data_ptr",
                "FUN_00080258": "process_data_00080258",
                "param_2": "num_bytes_received",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "processed_data"
            },
            "code": "void process_data_00080258(int **data_ptr, uint8_t num_bytes_received, uint32_t param_3, uint32_t param_4)\n{\n  uint8_t current_byte_index = *(uint8_t *)((int)data_ptr + 0x49);\n  uint32_t current_byte = (uint32_t)current_byte_index;\n  uint16_t processed_data = process_received_data(data_ptr, current_byte, param_3, param_4, param_4);\n  *(uint8_t *)((int)data_ptr + current_byte + 9) = (uint8_t)(processed_data >> 8);\n  *(uint8_t *)((int)data_ptr + ((current_byte + 1) & 0xff) + 9) = (uint8_t)processed_data;\n  *(uint8_t *)((int)data_ptr + 0x49) = current_byte_index + 2;\n  if (1 < *(uint8_t *)((int)data_ptr + 6)) {\n    process_data_00080258_type_1(*(uint8_t *)((int)data_ptr + 6),1);\n  }\n  if (*(uint8_t *)((int)data_ptr + 5) < 4) {\n    (**(function_pointer **)(**data_ptr + 4))(*data_ptr,(int)data_ptr + 9,*(undefined *)((int)data_ptr + 0x49));\n  }\n  if (1 < *(uint8_t *)((int)data_ptr + 6)) {\n    process_data_00080258_type_1(*(uint8_t *)((int)data_ptr + 6),0);\n  }\n  if (*(uint8_t *)((int)data_ptr + 5) < 4) {\n    do {\n      int32_t result = (**(function_pointer **)(**data_ptr + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  int32_t new_data_location = get_new_data_location();\n  data_ptr[0x17] = (int *)(new_data_location + (uint16_t)*(uint16_t *)((int)data_ptr + 0x56));\n  *(uint16_t *)((int)data_ptr + 0x52) = *(uint16_t *)((int)data_ptr + 0x52) + 1;\n  return;\n}",
            "called": [
                "thunk_FUN_00081714",
                "FUN_00081318",
                "FUN_0008021c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": true,
            "current_name": "process_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "iVar1": "updated_value",
                "param_1": "array",
                "FUN_00081622": "check_and_update_array_00081622",
                "param_2": "array_length",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "int check_and_update_array_00081622(int *array, int array_length, undefined4 param_3, undefined4 param_4)\n{\n  int updated_value;\n  updated_value = call_array_check_function(*array, array_length + 1, param_3, param_4, param_4);\n  if (updated_value != 0) {\n    *array = updated_value;\n    array[1] = array_length;\n    updated_value = 1;\n  }\n  return updated_value;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": true,
            "current_name": "check_and_update_array_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "iVar1": "loop_counter",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "param_1": "destination",
                "puVar6": "temp_ptr_2",
                "FUN_00082438": "copy_memory_00082438",
                "param_2": "source",
                "param_3": "num_bytes",
                "uVar5": "remaining_bytes",
                "uVar7": "num_remaining_bytes"
            },
            "code": "void copy_memory_00082438(void* destination, const void* source, size_t num_bytes)\n{\n    if (destination < source && (void*)((uintptr_t)destination + num_bytes) > source)\n    {\n        // If the memory regions overlap, copy backwards to avoid data corruption\n        uint8_t* dest_ptr = (uint8_t*)destination + num_bytes;\n        uint8_t* src_ptr = (uint8_t*)source + num_bytes;\n        for (size_t i = 0; i < num_bytes; i++)\n        {\n            *(--dest_ptr) = *(--src_ptr);\n        }\n    }\n    else if (num_bytes >= 16 && ((uintptr_t)destination | (uintptr_t)source) % sizeof(uint32_t) == 0)\n    {\n        // If the memory regions don't overlap and are aligned to 4 bytes, copy 4 bytes at a time\n        uint32_t* dest_ptr = (uint32_t*)destination;\n        uint32_t* src_ptr = (uint32_t*)source;\n        size_t num_words = (num_bytes - 16) / sizeof(uint32_t) + 1;\n        for (size_t i = 0; i < num_words; i++)\n        {\n            dest_ptr[0] = src_ptr[0];\n            dest_ptr[1] = src_ptr[1];\n            dest_ptr[2] = src_ptr[2];\n            dest_ptr[3] = src_ptr[3];\n            dest_ptr += 4;\n            src_ptr += 4;\n        }\n        size_t num_remaining_bytes = num_bytes % sizeof(uint32_t);\n        if (num_remaining_bytes == 0)\n        {\n            return;\n        }\n        destination = (void*)((uintptr_t)destination + num_words * sizeof(uint32_t));\n        source = (void*)((uintptr_t)source + num_words * sizeof(uint32_t));\n        num_bytes = num_remaining_bytes;\n    }\n    // If the memory regions don't overlap or aren't aligned to 4 bytes, copy 1 byte at a time\n    uint8_t* dest_ptr = (uint8_t*)destination;\n    uint8_t* src_ptr = (uint8_t*)source;\n    for (size_t i = 0; i < num_bytes; i++)\n    {\n        *(dest_ptr++) = *(src_ptr++);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": true,
            "current_name": "copy_memory_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "iVar2": "device_info_ptr",
                "DAT_00081574": "device_info_table",
                "puVar3": "device_config_ptr",
                "param_1": "device_id",
                "FUN_00081508": "initialize_device_00081508",
                "param_2": "device_speed",
                "param_3": "device_config",
                "puVar1": "device_speed_ptr",
                "DAT_00081570": "device_speed_table"
            },
            "code": "void initialize_device_00081508(int device_id, uint32_t device_speed, uint32_t device_config)\n{\n  uint32_t *device_config_ptr;\n  int device_info_ptr;\n  uint32_t *device_speed_ptr;\n  \n  setup_device(*(uint32_t *)(device_id + 0x20));\n  device_config_ptr = *(uint32_t **)(device_id + 0x18);\n  device_config_ptr[0x48] = 0x202;\n  *device_config_ptr = 0xac;\n  device_speed_ptr = DAT_00081570;\n  device_config_ptr[1] = device_config;\n  device_config_ptr[8] = *device_speed_ptr / device_speed >> 4;\n  device_config_ptr[3] = 0xffffffff;\n  device_config_ptr[2] = 0x61;\n  *(int *)(DAT_00081574 + ((uint32_t)(int32_t)(char)*(uint8_t *)(device_id + 0x1c) >> 5) * 4) =\n       1 << (uint32_t)(*(uint8_t *)(device_id + 0x1c) & 0x1f);\n  device_info_ptr = *(int *)(device_id + 0x10);\n  *(uint32_t *)(device_info_ptr + 0x84) = 0;\n  *(uint32_t *)(device_info_ptr + 0x80) = 0;\n  device_info_ptr = *(int *)(device_id + 0x14);\n  *(uint32_t *)(device_info_ptr + 0x84) = 0;\n  *(uint32_t *)(device_info_ptr + 0x80) = 0;\n  *device_config_ptr = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": true,
            "current_name": "initialize_device_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "iVar2": "result",
                "uVar1": "flag_bit",
                "param_1": "data",
                "FUN_00083808": "parse_data_00083808",
                "param_2": "status",
                "uVar3": "flags_as_uint",
                "uVar4": "flags"
            },
            "code": "int parse_data_00083808(uint16_t *data, int *status)\n{\n  uint16_t flags = *(data + 3);\n  uint32_t flags_as_uint = (uint32_t)flags;\n  int result = 0;\n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    reset();\n  }\n  if ((int)(flags_as_uint << 0x1c) < 0) {\n    result = *(data + 4);\n  }\n  else {\n    if (-1 < (int)(flags_as_uint << 0x1b)) {\n      *status = 9;\n      *(data + 3) = flags | 0x40;\n      return -1;\n    }\n    if ((int)(flags_as_uint << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          handle_error(status);\n          flags = *(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      result = data[4];\n      flags = flags & 0xffdb;\n      *data = result;\n      data[1] = 0;\n    }\n    else {\n      result = data[4];\n    }\n    *(data + 3) = flags | 8;\n    flags_as_uint = (uint32_t)(flags | 8);\n  }\n  if ((result == 0) && ((flags_as_uint & 0x280) != 0x200)) {\n    handle_error(status, data);\n    flags_as_uint = (uint32_t)*(data + 3);\n    result = data[4];\n  }\n  uint32_t flag_bit = flags_as_uint & 1;\n  if (flag_bit == 0) {\n    if (-1 < (int)(flags_as_uint << 0x1e)) {\n      flag_bit = data[5];\n    }\n    data[2] = flag_bit;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((result == 0) && ((int)(flags_as_uint << 0x18) < 0)) {\n    *(data + 3) = *(data + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083d9c",
                "FUN_000842a4",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "imported": true,
            "current_name": "parse_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "param_1": "base_address",
                "param_2": "position",
                "FUN_0008105c": "set_bit_at_position_0008105c"
            },
            "code": "void set_bit_at_position_0008105c(int base_address, uint8_t position) {\n    uint8_t bit_mask = 1 << (position & 0xff);\n    *(int *)(base_address + 0x14) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": true,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "iVar2": "responseSize",
                "pcVar3": "requestHandler",
                "uVar1": "responseCode",
                "param_1": "requestBuffer",
                "param_2": "requestSize",
                "param_3": "requestType",
                "param_4": "responseBuffer",
                "FUN_0008456c": "processRequest_0008456c",
                "auStack_24": "requestPayload"
            },
            "code": "void processRequest_0008456c(undefined4 *requestBuffer, int requestSize, undefined4 requestType, undefined4 *responseBuffer)\n{\n  undefined4 responseCode;\n  int responseSize;\n  code *requestHandler;\n  undefined requestPayload [12];\n  \n  if (requestSize == 0) {\n    requestHandler = *(code **)PTR_DAT_000845b8;\n    responseCode = generateRequestId();\n    responseSize = (*requestHandler)(requestBuffer, requestPayload, 0, responseCode, responseBuffer);\n  }\n  else {\n    requestHandler = *(code **)PTR_DAT_000845b8;\n    responseCode = generateRequestId();\n    responseSize = (*requestHandler)(requestBuffer, requestSize, requestType, responseCode, responseBuffer);\n  }\n  if (responseSize == -1) {\n    *responseBuffer = 0;\n    *requestBuffer = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "processRequest_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "param_1": "baseAddress",
                "param_2": "offset",
                "FUN_000811b4": "setMemoryPermissionToReadAndWrite_000811b4"
            },
            "code": "undefined4 setMemoryPermissionToReadAndWrite_000811b4(undefined4 baseAddress, int offset) {\n  *(undefined4 *)(offset + 4 + baseAddress) = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": true,
            "current_name": "setMemoryPermissionToReadAndWrite_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "DAT_000816dc": "data_pointer",
                "FUN_000816d4": "set_default_value_000816d4"
            },
            "code": "void set_default_value_000816d4(void)\n{\n    int* value_pointer = (int*)(DAT_000816dc + 4);\n    int default_value = 0x8000;\n    *value_pointer = default_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "set_default_value_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = FUN_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083d9c",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14",
                "FUN_0008234c",
                "FUN_000825b0",
                "FUN_00084384"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "param_1[0x14]": "param_array[20]",
                "param_1[0x15]": "param_array[21]",
                "param_1[0x18]": "param_array[18]",
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1[0x19]": "param_array[19]",
                "param_1": "param_array",
                "param_1[0x11]": "param_array[17]",
                "param_2": "new_param",
                "param_1[0xc]": "param_array[12]",
                "param_3": "param_1_flag",
                "param_4": "param_2_flag",
                "param_5": "param_3_flag",
                "param_1[0xd]": "param_array[13]"
            },
            "code": "void update_parameters_00080d7a(undefined4 *param_array, undefined4 new_param, int param_1_flag, int param_2_flag, int param_3_flag) {\n  param_array[17] = new_param;\n  if (param_3_flag == 0) {\n    param_array[13] = new_param;\n  }\n  else {\n    param_array[12] = new_param;\n  }\n  if (param_2_flag == 0) {\n    param_array[21] = new_param;\n  }\n  else {\n    param_array[20] = new_param;\n  }\n  if (param_1_flag == 0) {\n    param_array[19] = new_param;\n  }\n  else {\n    param_array[18] = new_param;\n  }\n  param_array[4] = new_param;\n  *param_array = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "update_parameters_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "DAT_00080f0c": "data_2nd",
                "iVar2": "iVar",
                "FUN_00080e9c": "initialize_data_00080e9c",
                "DAT_00080f14": "data_1",
                "DAT_00080f18": "data_3",
                "DAT_00080f08": "data_1st",
                "puVar1": "data_ptr",
                "DAT_00080f20": "data_4th",
                "DAT_00080f10": "data_2"
            },
            "code": "void initialize_data_00080e9c(void)\n{\n    uint32_t *data_ptr = DAT_00080f08;\n    *DAT_00080f08 = 0x400;\n    DAT_00080f08[0x80] = 0x400;\n    int32_t *iVar = DAT_00080f0c;\n    if (-1 < (int32_t)(iVar[8] << 7)) {\n        iVar[5] = DAT_00080f14;\n        while (-1 < (int32_t)(iVar[0x1A] << 0x1F));\n    }\n    iVar[5] = DAT_00080f10;\n    while (-1 < (int32_t)(iVar[0x1A] << 0xF));\n    *(uint32_t *)(DAT_00080f0c + 0xC) = *(uint32_t *)(DAT_00080f0c + 0xC) & 0xFFFFFFFC | 1;\n    while (-1 < (int32_t)(iVar[0x1A] << 0x1C));\n    iVar[7] = DAT_00080f18;\n    while (-1 < (int32_t)(iVar[0x1A] << 0x1E));\n    *(uint32_t *)(DAT_00080f0c + 0xC) = 0x11;\n    while (-1 < (int32_t)(iVar[0x1A] << 0x1C));\n    *(uint32_t *)(DAT_00080f0c + 0xC) = 0x12;\n    while (-1 < (int32_t)(iVar[0x1A] << 0x1C));\n    *DAT_00080f20 = data_4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "initialize_data_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "sVar1": "data",
                "iVar3": "result",
                "FUN_00084464": "process_data_00084464",
                "puVar2": "ptr",
                "param_1": "output",
                "unaff_r5": "unaff_r5",
                "unaff_r6": "unaff_r6",
                "unaff_r4": "unaff_r4",
                "param_2": "input",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar4": "flag",
                "in_lr": "in_lr"
            },
            "code": "void process_data_00084464(int *output, int input, int unused_param1, int unused_param2)\n{\n  short data;\n  ushort flag;\n  undefined *ptr;\n  int result;\n  \n  flag = *(ushort *)(input + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    send_error(output, (int)*(short *)(input + 0xe), 0, 2);\n    flag = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = flag & 0xefff;\n  ptr = PTR_DAT_000845fc;\n  data = *(short *)(input + 0xe);\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  result = process_data_00084464_helper((int)data, unused_param1, unused_param2, unused_param2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": true,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_code_000811ae"
            },
            "code": "int32_t return_error_code_000811ae(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": true,
            "current_name": "return_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "iVar2": "current_value",
                "param_1": "value_to_add",
                "FUN_0008118c": "add_to_current_value_0008118c",
                "puVar1": "current_value_ptr"
            },
            "code": "int add_to_current_value_0008118c(int value_to_add)\n{\n  int *current_value_ptr = PTR_DAT_000811a0;\n  int current_value = *current_value_ptr;\n  if (current_value == 0) {\n    *current_value_ptr = DAT_000811a4;\n  }\n  *current_value_ptr = current_value + value_to_add;\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": true,
            "current_name": "add_to_current_value_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "bVar4": "is_null_byte_found",
                "iVar1": "byte_count",
                "puVar2": "address_ptr",
                "param_1": "input_address",
                "FUN_00082a50": "count_bytes_until_null_00082a50",
                "uVar3": "current_word"
            },
            "code": "int count_bytes_until_null_00082a50(uint input_address)\n{\n  int byte_count = 0;\n  uint *address_ptr;\n  uint current_word;\n  bool is_null_byte_found;\n  \n  address_ptr = (uint *)(input_address & 0xfffffffc);\n  byte_count = -(input_address & 3);\n  current_word = *address_ptr;\n  if ((input_address & 3) != 0) {\n    current_word = current_word | 0xffffffffU >> ((byte_count + 4U & 0x1f) << 3);\n  }\n  while (address_ptr = address_ptr + 1, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n    byte_count = byte_count + 4;\n    current_word = *address_ptr;\n  }\n  is_null_byte_found = (current_word & 0xff) == 0;\n  if (!is_null_byte_found) {\n    byte_count = byte_count + 1;\n    is_null_byte_found = (current_word & 0xff00) == 0;\n  }\n  if (!is_null_byte_found) {\n    byte_count = byte_count + 1;\n    is_null_byte_found = (current_word & 0xff0000) == 0;\n  }\n  if (!is_null_byte_found) {\n    byte_count = byte_count + 1;\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": true,
            "current_name": "count_bytes_until_null_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "param_1": "base_address",
                "param_2": "value",
                "FUN_0008106e": "set_value_at_offset_0008106e"
            },
            "code": "void set_value_at_offset_0008106e(int base_address, int offset, int value) {\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "set_value_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2"
            },
            "code": "int32_t return_zero_000811c2(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": true,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "return_zero_000811c6"
            },
            "code": "int return_zero_000811c6() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": true,
            "current_name": "return_zero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "iVar1": "base_address",
                "iVar3": "old_address",
                "iVar5": "aligned_address",
                "puVar2": "ptr",
                "param_1": "memory",
                "param_2": "size",
                "FUN_00083d00": "allocate_memory_00083d00",
                "uVar4": "aligned_size"
            },
            "code": "int allocate_memory_00083d00(void* memory, int size)\n{\n  int base_address = DAT_00083d90;\n  do_nothing_00082598();\n  uint aligned_size = *(uint *)(*(int *)(base_address + 8) + 4) & 0xfffffffc;\n  int aligned_address = ((aligned_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_address) {\n    int new_address = FUN_00082970(memory,0);\n    if (new_address == *(int *)(base_address + 8) + aligned_size) {\n      new_address = FUN_00082970(memory,-aligned_address);\n      undefined *ptr = PTR_DAT_00083d94;\n      if (new_address != -1) {\n        int old_address = *(int *)PTR_DAT_00083d94;\n        *(uint *)(*(int *)(base_address + 8) + 4) = aligned_size - aligned_address | 1;\n        *(int *)ptr = old_address - aligned_address;\n        do_nothing_0008259c(memory);\n        return 1;\n      }\n      aligned_address = FUN_00082970(memory,0);\n      ptr = PTR_DAT_00083d94;\n      aligned_size = aligned_address - *(int *)(base_address + 8);\n      if (0xf < (int)aligned_size) {\n        int old_address = *DAT_00083d98;\n        *(uint *)(*(int *)(base_address + 8) + 4) = aligned_size | 1;\n        *(int *)ptr = aligned_address - old_address;\n      }\n    }\n  }\n  do_nothing_0008259c(memory);\n  return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": true,
            "current_name": "allocate_memory_00083d00"
        }
    },
    "used_tokens": 91818,
    "layers": [
        [
            "FUN_00082438",
            "FUN_00080d7a"
        ]
    ],
    "locked_functions": []
}