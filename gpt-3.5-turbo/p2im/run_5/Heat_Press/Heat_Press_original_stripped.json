{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "mainLoop_000816a8",
                "in_r0": "keyContext",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "delay": "delaySeconds",
                "setup": "setup",
                "DAT_000816d0": "dataFlag",
                "serialEventRun": "runSerialEvent"
            },
            "code": "int mainLoop_000816a8(void)\n{\n  EVP_PKEY_CTX *keyContext;\n  _watchdogDefaultSetup();\n  initialize(keyContext);\n  initializeVariant();\n  delaySeconds(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_000816d0 == 0);\n    runSerialEvent();\n  } while(true);\n}",
            "called": [
                "serialEventRun",
                "loop",
                "setup",
                "_watchdogDefaultSetup",
                "init",
                "initVariant",
                "delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "mainLoop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_register_00081042",
                "param_1": "register_address",
                "param_2": "value_to_set",
                "param_3": "bit_mask",
                "param_4": "shift_amount",
                "*(uint *)(param_1 + 4)": "current_value",
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": "new_value"
            },
            "code": "void set_bits_in_register_00081042(int* register_address, uint32_t value_to_set, uint32_t bit_mask, uint32_t shift_amount) {\n  uint32_t current_value = *register_address;\n  uint32_t masked_value = value_to_set & bit_mask;\n  uint32_t shifted_value = masked_value << shift_amount;\n  uint32_t new_value = current_value | shifted_value;\n  *register_address = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "FUN_write_to_stream",
                "param_1": "file_descriptor",
                "param_2": "buffer_pointer",
                "param_3": "stream_buffer",
                "piVar1": "current_buffer_pointer",
                "iVar2": "write_result",
                "piVar3": "current_block_pointer",
                "uVar4": "current_wchar_index",
                "puVar5": "current_wchar_pointer",
                "uVar6": "current_buffer_size",
                "uVar7": "current_wchar_count",
                "FUN_00082ac0": "__sprint_r_part_0_00082ac0"
            },
            "code": "int __sprint_r_part_0_00082ac0(undefined4 file_descriptor, int buffer_pointer, int **stream_buffer){\n    int *current_block_pointer;\n    int write_result;\n    int *current_buffer_pointer;\n    uint32_t current_buffer_size;\n    undefined4 *current_wchar_pointer;\n    uint32_t current_wchar_count;\n    uint32_t current_wchar_index;\n    \n    if (-1 < *(int *)(buffer_pointer + 100) << 0x12) {\n        write_result = __sfvwrite_r();\n        stream_buffer[2] = (int *)0x0;\n        stream_buffer[1] = (int *)0x0;\n        return write_result;\n    }\n    current_block_pointer = stream_buffer[2];\n    current_buffer_pointer = *stream_buffer;\n    while (current_block_pointer != (int *)0x0) {\n        current_buffer_size = current_buffer_pointer[1];\n        current_wchar_count = current_buffer_size >> 2;\n        if (current_wchar_count != 0) {\n            current_wchar_pointer = (undefined4 *)(*current_buffer_pointer + -4);\n            current_wchar_index = 0;\n            do {\n                current_wchar_pointer = current_wchar_pointer + 1;\n                write_result = _fputwc_r(file_descriptor, *current_wchar_pointer, buffer_pointer);\n                current_wchar_index = current_wchar_index + 1;\n                if (write_result == -1) goto LAB_00082b00;\n            } while (current_wchar_count != current_wchar_index);\n            current_block_pointer = stream_buffer[2];\n        }\n        current_block_pointer = (int *)((int)current_block_pointer - (current_buffer_size & 0xfffffffc));\n        stream_buffer[2] = current_block_pointer;\n        current_buffer_pointer = current_buffer_pointer + 2;\n    }\n    write_result = 0;\nLAB_00082b00:\n    stream_buffer[2] = (int *)0x0;\n    stream_buffer[1] = (int *)0x0;\n    return write_result;\n}",
            "called": [
                "_fputwc_r",
                "__sfvwrite_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__sprint_r_part_0_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "checkSerialPortsForData_00080ce0",
                "iVar1": "availableBytes"
            },
            "code": "void checkSerialPortsForData_00080ce0(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n  if (availableBytes != 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n  if (availableBytes != 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n  if (availableBytes != 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n  if (availableBytes != 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent3",
                "available",
                "serialEvent1",
                "serialEvent2",
                "serialEvent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialPortsForData_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "run_infinite_loop_00081164"
            },
            "code": "void run_infinite_loop_00081164(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682::FUN_00081682": "InitializeBuffer",
                "cstr": "inputString",
                "length": "inputLength",
                "this->buffer": "this->buffer",
                "this->capacity": "this->capacity",
                "this->len": "this->len",
                "copy": "CopyString",
                "FUN_00081682": "InitializeBuffer_00081682"
            },
            "code": "InitializeBuffer_00081682* __thiscall InitializeBuffer_00081682(InitializeBuffer_00081682 *this, char *inputString)\n{\n  size_t inputLength;\n  this->buffer = nullptr;\n  this->capacity = 0;\n  this->len = 0;\n  if (inputString != nullptr) {\n    inputLength = strlen(inputString);\n    CopyString(this, inputString, inputLength);\n  }\n  return this;\n}",
            "called": [
                "copy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "InitializeBuffer_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "wait_for_event_00081166"
            },
            "code": "void wait_for_event_00081166(void)\n{\n  while(true)\n  {\n    // Do nothing, just wait for event\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_event_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "get_process_id_00081202"
            },
            "code": "__pid_t get_process_id_00081202(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "get_process_id_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "_String": "freeStringBuffer",
                "this": "str",
                "__in_chrg": "isOwner",
                "FUN_000815fe": "freeStringBuffer_000815fe"
            },
            "code": "void* freeStringBuffer_000815fe(String* str, int isOwner)\n{\n\tfree(str->buffer);\n\treturn str;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "freeStringBuffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "set_flag_00081720",
                "param_1": "flag_address"
            },
            "code": "void set_flag_00081720(int flag_address)\n{\n    *(int*)(flag_address + 4) = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "decode_float_00081d1c",
                "param_1": "encoded_float",
                "uVar1": "exponent"
            },
            "code": "uint decode_float_00081d1c(uint encoded_float) {\n  uint exponent;\n  if (((encoded_float & 0x80000000) != 0) || (encoded_float << 1 < 0x7f000000)) {\n    return 0;\n  }\n  exponent = 0x9e - ((encoded_float << 1) >> 0x18);\n  if (-1 < (int)exponent) {\n    return (encoded_float << 8 | 0x80000000) >> (exponent & 0xff);\n  }\n  if ((exponent == 0xffffff9f) && ((encoded_float & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "decode_float_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_process_00083988",
                "__func": "function",
                "iVar1": "exit_proc_id"
            },
            "code": "int register_exit_process_00083988(__func* function)\n{\n  int exit_proc_id = __register_exitproc(0, function, 0, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_process_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "minuend",
                "param_2": "subtrahend",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference",
                "uVar1": "product_low",
                "lVar2": "product"
            },
            "code": "void calculate_difference_000847ac(uint minuend, int subtrahend, uint multiplicand_low, uint multiplicand_high, int *difference) {\n  uint product_low = minuend * multiplicand_low;\n  uint product_high = minuend * multiplicand_high;\n  uint64_t product = ((uint64_t)product_high << 32) | product_low;\n  difference[0] = minuend - (uint)product;\n  difference[1] = subtrahend - ((int)(product >> 32)) - (uint)(minuend < (uint)product);\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_initialized_00080118",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "DAT_00080134": "is_initialized",
                "PTR_object_7862_0008013c": "object_pointer",
                "PTR__etext_00080140": "end_of_text",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_initialized_00080118(int parameter_1, void* parameter_2, int parameter_3, int parameter_4) {\n  if (DAT_00080134) {\n    parameter_2 = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, parameter_2, parameter_3, DAT_00080144, parameter_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_initialized_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "getTickCount_00081208",
                "PTR__dwTickCount_0008171c": "PTR_TickCount"
            },
            "code": "uint32_t getTickCount_00081208(void)\n{\n  return *(uint32_t *)PTR__dwTickCount_0008171c;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "loop",
                "setup",
                "poll",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "getTickCount_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "FUNC_00081728"
            },
            "code": "\nuint FUNC_00081728(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_0008186a:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_NaN_or_infinity_00081c94",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry",
                "__aeabi_cfcmpeq": "is_NaN"
            },
            "code": "bool is_NaN_or_infinity_00081c94(float num) {\n  bool is_NaN = __aeabi_cfcmpeq(num, num);\n  bool is_infinity = num == 1.0f / 0.0f;\n  return is_NaN || is_infinity;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_NaN_or_infinity_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "execute_callbacks_on_pio_pins_with_lowest_bit_set_000810f4",
                "uVar1": "lowest_set_bit_index",
                "uVar2": "pio_pin_mask",
                "PTR_callbacksPioC_00081128": "PTR_callbacksPioC_00081128",
                "DAT_00081124": "DAT_00081124"
            },
            "code": "void execute_callbacks_on_pio_pins_with_lowest_bit_set_000810f4() {\n  uint pio_pin_mask = *(uint *)(DAT_00081124 + 0x4c);\n  while(true) {\n    uint lowest_set_bit_index = count_leading_zeroes(pio_pin_mask);\n    if(lowest_set_bit_index > 0x1f) break;\n    lowest_set_bit_index = 0x1f - lowest_set_bit_index;\n    code* callback_function = *(code **)(PTR_callbacksPioC_00081128 + lowest_set_bit_index * 4);\n    if(callback_function != (code *)0x0) {\n      (*callback_function)();\n    }\n    pio_pin_mask &= ~(1 << lowest_set_bit_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_pio_pins_with_lowest_bit_set_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_00083b14",
                "param_1": "obj_ptr",
                "ptr1": "array1",
                "ptr2": "array2",
                "ptr3": "array3"
            },
            "code": "void initialize_00083b14(int param_1)\\\n{\\\n  if (*(int *)(param_1 + 0x38) == 0) {\\\n    undefined4 *ptr1 = *(undefined4 **)(param_1 + 4);\\\n    undefined4 *ptr2 = *(undefined4 **)(param_1 + 8);\\\n    undefined4 *ptr3 = *(undefined4 **)(param_1 + 0xc);\\\n    \\\n    ptr1[0] = 0;\\\n    ptr1[1] = 0;\\\n    ptr1[2] = 0;\\\n    ptr1[3] = 4;\\\n    ptr1[4] = 0;\\\n    ptr1[5] = 0;\\\n    ptr1[6] = 0;\\\n    ptr1[7] = ptr1;\\\n    ptr1[8] = DAT_00083bf8;\\\n    ptr1[9] = DAT_00083bfc;\\\n    ptr1[10] = DAT_00083c00;\\\n    ptr1[11] = DAT_00083c04;\\\n    ptr1[24] = 0;\\\n    ptr1[25] = 0;\\\n    ptr2[0] = 0;\\\n    ptr2[1] = 0;\\\n    ptr2[2] = 0;\\\n    ptr2[3] = 9;\\\n    ptr2[4] = 0;\\\n    ptr2[5] = 0;\\\n    ptr2[6] = 0;\\\n    ptr2[7] = ptr2;\\\n    ptr2[8] = DAT_00083bf8;\\\n    ptr2[9] = DAT_00083bfc;\\\n    ptr2[10] = DAT_00083c00;\\\n    ptr2[11] = DAT_00083c04;\\\n    ptr2[24] = 0;\\\n    ptr2[25] = 0;\\\n    ptr3[0] = 0;\\\n    ptr3[1] = 0;\\\n    ptr3[2] = 0;\\\n    ptr3[3] = 18;\\\n    ptr3[4] = 0;\\\n    ptr3[5] = 0;\\\n    ptr3[6] = 0;\\\n    ptr3[7] = ptr3;\\\n    ptr3[8] = DAT_00083bf8;\\\n    ptr3[9] = DAT_00083bfc;\\\n    ptr3[10] = DAT_00083c00;\\\n    ptr3[11] = DAT_00083c04;\\\n    ptr3[24] = 0;\\\n    ptr3[25] = 0;\\\n    *(undefined4 *)(param_1 + 0x3c) = DAT_00083bf4;\\\n    *(int *)(param_1 + 0x2e4) = 3;\\\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\\\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\\\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\\\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\\\n    *(undefined2 *)((int)ptr3 + 0xe) = 2;\\\n    *(int *)(param_1 + 0x38) = 1;\\\n  }\\\n  return;\\\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_fclose_r",
                "_fflush_r",
                "__swsetup_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "initialize_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "allocate_memory_000842a4",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "permission_bits",
                "iVar2": "file_status",
                "iVar3": "memory_size",
                "uVar4": "permission_mask",
                "bVar5": "is_terminal",
                "auStack_54": "temp_stack",
                "local_50": "local_permission_mask"
            },
            "code": "void allocate_memory_000842a4(int file_descriptor, int *memory_block) {\n  ushort permission_bits;\n  int file_status;\n  int memory_size;\n  uint permission_mask;\n  bool is_terminal;\n  undefined temp_stack[4];\n  uint local_permission_mask;\n  permission_bits = *(ushort *)(memory_block + 3);\n  permission_mask = (uint)permission_bits;\n  if ((int)(permission_mask << 0x1e) < 0) {\n    *memory_block = (int)memory_block + 0x43;\n    memory_block[4] = (int)memory_block + 0x43;\n    memory_block[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory_block + 0xe)) {\n    file_status = _fstat_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe),temp_stack);\n    if (-1 < file_status) {\n      is_terminal = (local_permission_mask & 0xf000) == 0x2000;\n      if (((local_permission_mask & 0xf000) == 0x8000) && (memory_block[10] == PTR_DAT_00084380)) {\n        memory_size = 0x400;\n        *(ushort *)(memory_block + 3) = permission_bits | 0x400;\n        memory_block[0x13] = 0x400;\n      }\n      else {\n        memory_size = 0x400;\n        *(ushort *)(memory_block + 3) = permission_bits | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    permission_bits = *(ushort *)(memory_block + 3);\n    permission_mask = (uint)permission_bits;\n  }\n  *(ushort *)(memory_block + 3) = permission_bits | 0x800;\n  if ((permission_mask & 0x80) == 0) {\n    memory_size = 0x400;\n  }\n  else {\n    memory_size = 0x40;\n  }\n  is_terminal = false;\nLAB_00084300:\n  memory_status = _malloc_r(file_descriptor,memory_size);\n  permission_bits = *(ushort *)(memory_block + 3);\n  if (memory_status == 0) {\n    if (-1 < (int)((uint)permission_mask << 0x16)) {\n      *(ushort *)(memory_block + 3) = permission_bits | 2;\n      *memory_block = (int)memory_block + 0x43;\n      memory_block[4] = (int)memory_block + 0x43;\n      memory_block[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(file_descriptor + 0x3c) = PTR_DAT_0008437c;\n    *(ushort *)(memory_block + 3) = permission_bits | 0x80;\n    *memory_block = memory_status;\n    memory_block[4] = memory_status;\n    memory_block[5] = memory_size;\n    if ((is_terminal) && (memory_size = _isatty_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe)), memory_size != 0)) {\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "_malloc_r",
                "_fstat_r",
                "_isatty_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "FUN_00081dcc": "process_data_00081dcc",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "uStack_c": "value1",
                "uStack_8": "value2",
                "uStack_4": "value3"
            },
            "code": "void process_data_00081dcc(int data, int* ptr1, int* ptr2, int* ptr3) {\n  int value1 = *ptr1;\n  int value2 = *ptr2;\n  int value3 = *ptr3;\n  call_helper_function(*(int*)PTR__impure_ptr_00081df0, *(int*)(*(int*)PTR__impure_ptr_00081df0 + 8), data, &value1);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "waitForTransmitBufferEmpty_0008143c",
                "this": "uart",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "transmitBufferHead",
                "_iTail": "transmitBufferTail",
                "_pUart": "UART_SR"
            },
            "code": "void __thiscall waitForTransmitBufferEmpty_0008143c(UARTClass *uart){\n  while (uart->transmitBufferHead != uart->transmitBufferTail);\n  while (-1 < (int)(uart->UART_SR << 0x16));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmitBufferEmpty_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "getFileStream_000846a4",
                "__stream": "__fileStream",
                "iVar1": "result",
                "_FUN_000846a4_r": "_getFileStream_r"
            },
            "code": "int getFileStream_000846a4(FILE *__stream)\n{\n  int result = _getFileStream_000846a4_r(*(undefined4 *)PTR__impure_ptr_000846b0,__stream);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "getFileStream_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_00080f24",
                "puVar1": "start_bss",
                "puVar2": "start_data",
                "iVar3": "i",
                "puVar4": "end_bss",
                "PTR_banzai_00080f80": "start_bss",
                "PTR__etext_00080f7c": "start_data",
                "PTR_completed_7857_00080f84": "end_bss",
                "PTR_completed_7857_00080f88": "end_of_bss",
                "PTR__ebss_00080f8c": "end_of_bss",
                "DAT_00080f94": "exception_table_offset",
                "PTR_exception_table_00080f90": "exception_table",
                "DAT_00080f98": "main_function"
            },
            "code": "void initialize_memory_00080f24(void)\n{\n  undefined *PTR_banzai_00080f80 = PTR_banzai_00080f80;\n  undefined *PTR__etext_00080f7c = PTR__etext_00080f7c;\n  undefined4 *PTR_completed_7857_00080f84 = (undefined4 *)PTR_completed_7857_00080f84;\n  if (PTR__etext_00080f7c != PTR_banzai_00080f80) {\n    for (int i = 0; PTR_banzai_00080f80 + i < PTR_completed_7857_00080f88; i += 4) {\n      *(undefined4 *)(PTR_banzai_00080f80 + i) = *(undefined4 *)(PTR__etext_00080f7c + i);\n    }\n  }\n  for (undefined4 *p = PTR_completed_7857_00080f84; p < PTR__ebss_00080f8c; p++) {\n    *p = 0;\n  }\n  undefined *PTR_exception_table_00080f90 = PTR_PTR_exception_table_00080f90_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_PTR_exception_table_00080f90_00080f90 & 0x1fffff80;\n  if (PTR_exception_table_00080f90 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while (true) {\n    // Infinite loop\n  }\n}",
            "called": [
                "main",
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint ptr_param_1, uint param_2)\n{\n  uint result = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (result != 0) {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "setupModbusRegisters_000804a8",
                "puVar1": "telegram",
                "puVar2": "data",
                "puVar3": "data8024",
                "this": "PTR_master_000805b4",
                "uVar4": "currentTime"
            },
            "code": "void setupModbusRegisters_000804a8(void)\n{\n  uint32_t currentTime = millis();\n  pinMode(1, OUTPUT);\n  pinMode(6, INPUT_PULLUP);\n  pinMode(0, INPUT_PULLUP);\n  pinMode(1, OUTPUT);\n  digitalWrite(0, LOW);\n  digitalWrite(1, LOW);\n  uint16_t* data = PTR_au16data_000805ac;\n  uint8_t* telegram = PTR_telegram_000805a8;\n  *(uint16_t *)(telegram + 0xe) = 0x13;\n  *(uint16_t *)(telegram + 0x10) = 10;\n  *(uint8_t **)(telegram + 0x14) = data + 0x26;\n  telegram[1] = 3;\n  telegram[0x19] = 3;\n  *(uint16_t *)(telegram + 0x1a) = 0x14;\n  *(uint16_t *)(telegram + 0x28) = 3;\n  *(uint16_t *)(telegram + 4) = 0x10;\n  *(uint16_t **)(telegram + 8) = data;\n  telegram[0xd] = 0x10;\n  *(uint16_t *)(telegram + 0x1c) = 0xc;\n  telegram[0x25] = 0x10;\n  *(uint16_t *)(telegram + 0x34) = 8;\n  uint8_t* data8024 = PTR_data8024_000805b0;\n  *(uint16_t *)(telegram + 0x26) = 0x1c;\n  *(uint8_t **)(telegram + 0x2c) = data + 0x38;\n  telegram[0x30] = 2;\n  telegram[0x31] = 2;\n  *(uint8_t **)(telegram + 0x38) = data8024;\n  telegram[0x3c] = 2;\n  *telegram = 1;\n  telegram[0xc] = 1;\n  telegram[0x18] = 1;\n  telegram[0x24] = 1;\n  *(uint16_t *)(telegram + 0x3e) = 1;\n  *(uint16_t *)(telegram + 0x40) = 1;\n  *(uint16_t *)(telegram + 2) = 0;\n  *(uint8_t **)(telegram + 0x20) = data + 0x28;\n  *(uint16_t *)(telegram + 0x32) = 0;\n  telegram[0x3d] = 5;\n  *(uint8_t **)(telegram + 0x44) = data8024 + 2;\n  Modbus::begin((Modbus *)PTR_master_000805b4,0x4b00);\n  *(uint16_t *)(PTR_master_000805b4 + 0x56) = 2000;\n  *(uint32_t *)PTR_u32wait_000805b8 = currentTime;\n  *(uint32_t *)PTR_tiempopid1_000805bc = currentTime + 1000;\n  *(uint32_t *)PTR_dutyalto1_000805c0 = currentTime + 1000;\n  *(uint32_t *)PTR_dutybajo1_000805c4 = currentTime + 1000;\n  *(uint32_t *)PTR_reloj_000805c8 = currentTime + 1000;\n  *PTR_u8state_000805cc = 0;\n  startForkserver(0);\n}",
            "called": [
                "startForkserver",
                "begin",
                "pinMode",
                "digitalWrite",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "setupModbusRegisters_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "read_and_update_00084440",
                "param_1": "buffer_start",
                "param_2": "buffer_offset",
                "iVar1": "bytes_read",
                "*(int *)(param_2 + 0x50)": "total_bytes_read",
                "*(ushort *)(param_2 + 0xc)": "status"
            },
            "code": "void read_and_update_00084440(int buffer_start, int buffer_offset)\n{\n  int bytes_read = _read_r(buffer_start, (int)*(short *)(buffer_offset + 0xe));\n  if (bytes_read >= 0) {\n    int *total_bytes_read = (int *)(buffer_offset + 0x50);\n    *total_bytes_read += bytes_read;\n    return;\n  }\n  ushort *status = (ushort *)(buffer_offset + 0xc);\n  *status &= 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "process_modbus_request_000802da",
                "this": "modbus",
                "telegram": "telegram",
                "uVar1": "transaction_id_uchar",
                "in_r1": "transaction_id",
                "bVar3": "byte_count",
                "in_r2": "register_address",
                "puVar4": "register_value",
                "uVar5": "response_size",
                "uVar6": "response_value",
                "uVar7": "response_length",
                "puVar8": "register_value_end",
                "local_1c": "function_code",
                "local_1b": "byte_count",
                "local_1a": "response_value"
            },
            "code": "int8_t __thiscall process_modbus_request_000802da(Modbus *modbus, modbus_t telegram) {\\n  uchar function_code;\\n  ushort transaction_id;\\n  byte byte_count;\\n  ushort *register_address;\\n  ushort *register_value;\\n  uint8_t response_size;\\n  ushort response_value;\\n  uint response_length;\\n\\n  uint transaction_id_uint = (uint)transaction_id;\\n  if (modbus->device_id != \"\\0\") {\\n    return -2;\\n  }\\n  if (modbus->state != \"\\0\") {\\n    return -1;\\n  }\\n  if (0xf6 < (byte)(function_code - 1)) {\\n    return -3;\\n  }\\n  modbus->buffer[0] = function_code;\\n  modbus->buffer[1] = byte_count;\\n  modbus->registers = register_address;\\n  modbus->buffer[2] = (uchar)((uint)response_value >> 8);\\n  modbus->buffer[3] = (uchar)response_value;\\n  uchar transaction_id_uchar = (uchar)transaction_id;\\n  uchar transaction_id_high_byte = (uchar)(transaction_id_uint >> 8);\\n  switch(byte_count) {\\n    case \"\\x01\":\\n    case \"\\x02\":\\n    case \"\\x03\":\\n    case \"\\x04\":\\n      modbus->buffer[4] = transaction_id_high_byte;\\n      break;\\n    case \"\\x05\":\\n      response_value = *register_address;\\n      if (response_value != 0) {\\n        response_value = 1;\\n      }\\n      modbus->buffer[4] = -(char)response_value;\\n      response_length = 0;\\n      break;\\n    case \"\\x06\":\\n      modbus->buffer[4] = (uchar)((uint)*register_address >> 8);\\n      response_length = (uint)*register_address;\\n      break;\\n    default:\\n      goto switchD_0008031e_caseD_7;\\n    case \"\\x0f\":\\n      byte_count = (byte)(transaction_id >> 3) & 0xfe;\\n      if ((transaction_id & 0xf) != 0) {\\n        byte_count = byte_count + 1;\\n      }\\n      modbus->buffer[5] = transaction_id_uchar;\\n      modbus->buffer[4] = transaction_id_high_byte;\\n      modbus->buffer[6] = byte_count;\\n      response_size = \"\\a\";\\n      goto LAB_0008034a;\\n    case \"\\x10\":\\n      modbus->buffer[4] = transaction_id_high_byte;\\n      modbus->buffer[5] = transaction_id_uchar;\\n      register_value = register_address - 1;\\n      modbus->buffer[6] = transaction_id_uchar * \"\\x02\";\\n      modbus->buffer_size = \"\\a\";\\n      ushort *register_value_end = register_value + response_length;\\n      while (register_value != register_value_end) {\\n        byte_count = modbus->buffer_size;\\n        modbus->buffer[byte_count] = (uchar)((uint)register_value[1] >> 8);\\n        response_length = byte_count + 1 & 0xff;\\n        modbus->buffer_size = (uint8_t)response_length;\\n        register_value = register_value + 1;\\n        modbus->buffer[response_length] = (uchar)*register_value;\\n        modbus->buffer_size = byte_count + 2;\\n      }\\n      goto switchD_0008031e_caseD_7;\\n  }\\n  modbus->buffer[5] = (uchar)transaction_id_uint;\\n  response_size = \"\\x06\";\\nLAB_0008034a:\\n  modbus->buffer_size = response_size;\\nswitchD_0008031e_caseD_7:\\n  send_tx_buffer(modbus);\\n  modbus->state = \"\\x01\";\\n  return \"\\0\";\\n}",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "process_modbus_request_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "calculate_position_00080f9c",
                "param_1": "position_data",
                "param_2": "position_data_size",
                "param_3": "frequency",
                "param_4": "sample_rate",
                "local_58": "position_data_copy",
                "uVar1": "unknown3",
                "uVar2": "i",
                "PTR_DAT_0008102c": "0x0008102c",
                "DAT_00081030": "0x00081030"
            },
            "code": "uint calculate_position_00080f9c(uint *position_data, uint position_data_size, uint frequency, uint sample_rate) {\n  uint position_data_copy[16];\n  for (int i = 0; i < 16; i++) {\n    position_data_copy[i] = position_data[i];\n  }\n  uint position_index = 0x202;\n  uint unknown1 = 0;\n  uint unknown2 = 0;\n  uint unknown3 = position_data_size / (frequency * 2);\n  if (position_data_size == frequency * 2 * unknown3) {\n    unknown3--;\n  }\n  for (int i = 0; i < 16; i++) {\n    if ((sample_rate * (position_data_size / ((unknown3 + 1) * 2))) / DAT_00081030 <= position_data_copy[i]) {\n      position_index = ((i & 0xf) << 0x10) | ((unknown3 & 0xff) << 8) | position_index;\n      return position_index;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "calculate_position_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configurePin_00081210",
                "ulPin": "pinNumber",
                "ulMode": "mode",
                "puVar1": "pinDesc",
                "puVar2": "pinStatus",
                "uVar3": "pioMode",
                "bVar4": "pinStatusMode",
                "bVar5": "pinStatusValue",
                "iVar6": "pinDescIndex",
                "iVar7": "pinDescIndex"
            },
            "code": "void configurePin_00081210(uint32_t pinNumber, uint32_t mode)\n{\n  uint8_t* pinStatus = g_pinStatus;\n  PinDescription* pinDesc = g_APinDescription;\n  if (pinDesc[pinNumber].ulPinAttribute != 0)\n  {\n    if ((pinStatus[pinNumber] & 0xf) == PIN_STATUS_ANALOG)\n    {\n      adc_disable_channel(ADC, pinDesc[pinNumber].ulADCChannelNumber);\n    }\n    uint8_t pinStatusValue = pinStatus[pinNumber];\n    uint8_t pinStatusMode = pinStatusValue & 0xf;\n    if ((pinStatusMode < PIN_STATUS_PWM) && (pinStatusValue != 0))\n    {\n      if (pinStatusMode == PIN_STATUS_OUTPUT)\n      {\n        if (mode == PIN_MODE_OUTPUT_OPEN_DRAIN)\n        {\n          return;\n        }\n      }\n      else if (pinStatusMode == PIN_STATUS_INPUT)\n      {\n        if (mode == PIN_MODE_INPUT_PULLUP)\n        {\n          return;\n        }\n      }\n      else if (pinStatusMode == PIN_STATUS_INPUT_PULLUP)\n      {\n        if (mode == PIN_MODE_INPUT)\n        {\n          return;\n        }\n        goto CONFIGURE_PIN;\n      }\n    }\n    if (mode != PIN_MODE_INPUT)\n    {\n      goto CONFIGURE_PIN;\n    }\nCONFIGURE_PIN:\n    if (mode == PIN_MODE_OUTPUT_OPEN_DRAIN)\n    {\n      int pinDescIndex = pinNumber * sizeof(PinDescription);\n      pmc_enable_periph_clk(pinDesc[pinNumber].ulPeripheralId);\n      PIO_Configure(pinDesc[pinNumber].pPort, PIO_OUTPUT_0, pinDesc[pinNumber].ulPin, PIO_OPENDRAIN);\n      pinStatusValue = pinStatusValue & 0xf0 | PIN_STATUS_OUTPUT;\n    }\n    else\n    {\n      if (mode != PIN_MODE_INPUT_PULLUP)\n      {\n        return;\n      }\n      int pinDescIndex = pinNumber * sizeof(PinDescription);\n      pmc_enable_periph_clk(pinDesc[pinNumber].ulPeripheralId);\n      PIO_Configure(pinDesc[pinNumber].pPort, PIO_INPUT, pinDesc[pinNumber].ulPin, PIO_PULLUP);\n      pinStatusValue = pinStatusValue & 0xf0 | PIN_STATUS_INPUT_PULLUP;\n    }\n    pinStatus[pinNumber] = pinStatusValue;\n    return;\n  }\n  return;\n}",
            "called": [
                "adc_disable_channel",
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "begin",
                "digitalWrite",
                "setup"
            ],
            "imported": false,
            "current_name": "configurePin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "decompress_00083994",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "current_output_ptr",
                "iVar2": "current_output_size",
                "uVar3": "flags",
                "uVar4": "remaining_input_size",
                "iVar5": "decompressed_size",
                "pcVar6": "decompress_function",
                "iVar7": "remaining_output_size"
            },
            "code": "int decompress_00083994(int *input_buffer, int *output_buffer)\n{\n  int *current_output_ptr;\n  int current_output_size;\n  ushort flags;\n  int current_input_size;\n  int decompress_00083994ed_size;\n  code *decompress_00083994_function;\n  int remaining_input_size;\n  int decompress_00083994ed_chunk_size;\n  int remaining_output_size;\n  int result;\n  \n  flags = *(ushort *)(output_buffer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    remaining_output_size = output_buffer[4];\n    if (remaining_output_size == 0) {\n      return 0;\n    }\n    current_input_size = *output_buffer;\n    if ((flags & 3) == 0) {\n      decompress_00083994ed_chunk_size = output_buffer[5];\n    }\n    else {\n      decompress_00083994ed_chunk_size = 0;\n    }\n    *output_buffer = remaining_output_size;\n    current_input_size = current_input_size - remaining_output_size;\n    output_buffer[2] = decompress_00083994ed_chunk_size;\n    do {\n      if (current_input_size < 1) {\n        return 0;\n      }\n      decompress_00083994ed_size = (*(code *)output_buffer[9])(input_buffer,output_buffer[7],remaining_output_size,current_input_size);\n      current_input_size = current_input_size - decompress_00083994ed_size;\n      remaining_output_size = remaining_output_size + decompress_00083994ed_size;\n    } while (0 < decompress_00083994ed_size);\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_buffer + 3) = flags | 0x800;\n  if ((output_buffer[1] < 1) && (output_buffer[0xf] < 1)) {\n    return 0;\n  }\n  decompress_00083994_function = (code *)output_buffer[10];\n  if (decompress_00083994_function == (code *)0x0) {\n    return 0;\n  }\n  remaining_input_size = (uint)(flags | 0x800);\n  current_output_ptr = input_buffer;\n  input_buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    decompress_00083994ed_chunk_size = (*decompress_00083994_function)(current_output_ptr,output_buffer[7],remaining_input_size,1);\n    if ((decompress_00083994ed_chunk_size == -1) && (remaining_input_size = *current_output_ptr, remaining_input_size != 0)) {\n      if ((remaining_input_size == 0x1d) || (remaining_input_size == 0x16)) {\n        input_buffer = current_output_ptr;\n        return 0;\n      }\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(output_buffer + 3);\n    decompress_00083994_function = (code *)output_buffer[10];\n  }\n  else {\n    decompress_00083994ed_chunk_size = output_buffer[0x14];\n  }\n  if (((int)(flags << 0x1d) < 0) && (decompress_00083994ed_chunk_size = decompress_00083994ed_chunk_size - output_buffer[1], output_buffer[0xc] != 0)) {\n    decompress_00083994ed_chunk_size = decompress_00083994ed_chunk_size - output_buffer[0xf];\n  }\n  decompress_00083994ed_chunk_size = (*decompress_00083994_function)(current_output_ptr,output_buffer[7],decompress_00083994ed_chunk_size,0);\n  if (decompress_00083994ed_chunk_size == -1) {\n    remaining_input_size = *current_output_ptr;\n    if (remaining_input_size != 0) {\n      if ((remaining_input_size != 0x1d) && (remaining_input_size != 0x16)) {\n        *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) & 0xf7ff;\n      *output_buffer = output_buffer[4];\n      output_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n    output_buffer[1] = 0;\n    *(ushort *)(output_buffer + 3) = flags;\n    *output_buffer = output_buffer[4];\n  }\n  else {\n    flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n    *output_buffer = output_buffer[4];\n    *(ushort *)(output_buffer + 3) = flags;\n    output_buffer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_buffer[0x14] = decompress_00083994ed_chunk_size;\n  }\nLAB_00083a00:\n  current_output_ptr = (int *)output_buffer[0xc];\n  input_buffer = current_output_ptr;\n  if (current_output_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (current_output_ptr != output_buffer + 0x10) {\n    _free_r(input_buffer);\n  }\n  output_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decompress_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "sendData_00081454",
                "this": "self",
                "uc_data": "data",
                "pRVar1": "tx_buffer",
                "uVar2": "next_head",
                "DAT_000814a4": "BUFFER_MASK"
            },
            "code": "size_t __thiscall sendData_00081454(UARTClass *this,uint8_t data)\n{\n  RingBuffer *tx_buffer;\n  uint status;\n\n  tx_buffer = this->txBuffer;\n  status = this->uart->UART_SR << 0x1e;\n  if ((int)status < 0 && tx_buffer->tail == tx_buffer->head)\n  {\n    this->uart->UART_THR = (uint)data;\n  }\n  else\n  {\n    uint next_head = DAT_000814a4 & tx_buffer->head + 1U;\n    if ((int)next_head < 0)\n    {\n      next_head = (next_head - 1 | 0xffffff80) + 1;\n    }\n    while (tx_buffer->tail == next_head)\n    {\n    }\n    tx_buffer->buffer[tx_buffer->head] = data;\n    this->txBuffer->head = next_head;\n    this->uart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "sendData_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_file_and_set_error_if_failed_00084600",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_if_failed_00084600(int *error_code_ptr, int file_descriptor) {\n  undefined *error_ptr = PTR_errno_00084620;\n  *(undefined4 *)PTR_errno_00084620 = 0;\n  int close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code_ptr = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_if_failed_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "FUN_00081578": "initializeUART_00081578",
                "this": "uart",
                "dwBaudRate": "baudRate"
            },
            "code": "void __thiscall initializeUART_00081578(UARTClass *uart,uint32_t baudRate)\n{\n  init(uart,baudRate,0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initializeUART_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "__aeabi_frsub",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_file_00084728",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_00084728(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  int read_result;\n  int *errno_ptr;\n  errno_ptr = PTR_errno_0008474c;\n  *(int *)PTR_errno_0008474c = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "waitForInput_0008116a"
            },
            "code": "void waitForInput_0008116a(void)\n{\n  while(true)\n  {\n    // Do nothing until input is received\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "waitForInput_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "FUN_000813e0": "isConnected_000813e0",
                "*this": "*uartClassInstance"
            },
            "code": "bool __thiscall isConnected_000813e0(UARTClass *this)\n{\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "isConnected_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "encode_string_00083c40",
                "param_1": "locale_param",
                "param_2": "input_length",
                "param_3": "output_buffer",
                "uVar1": "max_bytes",
                "iVar2": "result",
                "uVar3": "encoded_length",
                "pbVar4": "output_end",
                "uVar5": "counter",
                "local_1c": "encoded_byte",
                "abStack_1b": "stack_array"
            },
            "code": "uint encode_string_00083c40(undefined4 locale_param, uint input_length, byte **output_buffer){\n  uint max_bytes = __locale_mb_cur_max();\n  byte encoded_byte;\n  uint encoded_length;\n  byte *output_ptr;\n  byte *output_end;\n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12)) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  if ((max_bytes == 1) && (input_length - 1 < 0xff)) {\n    encoded_length = input_length & 0xff;\n    encoded_byte = (byte)encoded_length;\n  }\n  else {\n    encoded_length = _wcrtomb_r(locale_param, &encoded_byte, input_length, output_buffer + 0x17);\n    if (encoded_length == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (encoded_length == 0) {\n      return input_length;\n    }\n  }\n  output_ptr = **output_buffer;\n  output_end = output_buffer[2];\n  while (true) {\n    output_end--;\n    if ((int)output_end < 0) {\n      if ((int)output_buffer[6] <= (int)output_end) {\n        *output_ptr = (byte)encoded_length;\n        output_end = *output_buffer;\n        encoded_length = (uint)*output_end;\n        if (encoded_length != 10) goto LAB_00083c90;\n      }\n      int result = __swbuf_r(locale_param, encoded_length, output_buffer);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      *output_ptr = (byte)encoded_length;\n      output_end = *output_buffer;\nLAB_00083c90:\n      output_buffer = output_end + 1;\n    }\n    if (max_bytes <= encoded_length + 1) {\n      return input_length;\n    }\n    encoded_length = (uint)abStack_1b[encoded_length];\n  }\n}",
            "called": [
                "__swbuf_r",
                "__locale_mb_cur_max",
                "_wcrtomb_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "encode_string_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "resetTickAndIncrementTime_0008116e",
                "iVar1": "isFalse"
            },
            "code": "void resetTickAndIncrementTime_0008116e() {\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "TimeTick_Increment",
                "__false",
                "tickReset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "resetTickAndIncrementTime_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  uint32_t uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  int iVar16;\n  int iVar17;\n  int *piVar18;\n  undefined4 uVar19;\n  int iVar20;\n  \n  puVar7 = PTR_estado_0008089c;\n  puVar9 = PTR_segundos_00080898;\n  puVar8 = PTR_minutos_00080894;\n  puVar3 = PTR_mmt_0008087c;\n  puVar5 = PTR_ssres_00080878;\n  puVar4 = PTR_mmres_00080874;\n  puVar2 = PTR_duty1_00080834;\n  puVar1 = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  iVar17 = *(int *)PTR_minutos_00080894;\n  iVar16 = iVar17 - *(int *)PTR_mmres_00080874;\n  if (iVar16 < 0) {\n    iVar16 = iVar16 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = iVar16;\n  puVar6 = PTR_sst_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar16 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_sst_00080880 = iVar16;\n  if (iVar16 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar16 + 0x3c;\n  }\n  iVar16 = *(int *)puVar3;\n  iVar20 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar16;\n  *(short *)(puVar1 + 0x38) = (short)iVar20;\n  if ((iVar16 == 0) && (iVar20 == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_segundosp_00080888;\n  puVar3 = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == iVar17) {\n    iVar16 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar16 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = iVar16;\n    if (iVar16 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar17;\n    puVar3 = PTR_espera_plancha_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_espera_plancha_0008088c;\n  puVar3 = PTR_tiempo_espera_00080860;\n  iVar16 = *(int *)puVar7;\n  if (iVar16 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar18 = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *piVar18 = iVar16;\n  }\n  else {\n    if (iVar16 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      uVar12 = millis();\n      puVar7 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar7 = uVar12 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)puVar3 + 1;\n    piVar18 = (int *)PTR_mmres_00080a20;\n    puVar3 = PTR_ssres_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar12 = millis();\n      puVar3 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar3 = uVar12 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar16 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar12 = millis();\n      puVar8 = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < uVar12) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar8 = uVar12 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar12 = millis();\n  puVar8 = PTR_kia1_00080a60;\n  puVar3 = PTR_incre_00080a5c;\n  puVar5 = PTR_tiempopid1_00080a58;\n  puVar4 = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < uVar12) {\n    uVar13 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    uVar13 = __aeabi_fsub(uVar13,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = uVar13;\n    puVar9 = PTR_ep1_00080a34;\n    uVar19 = *(undefined4 *)PTR_ep1_00080a34;\n    uVar14 = __addsf3(uVar13,uVar19);\n    uVar14 = __aeabi_fmul(uVar14,*(undefined4 *)puVar8);\n    puVar7 = PTR_kip1_00080a64;\n    uVar14 = __addsf3(uVar14,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)puVar8 = uVar14;\n    uVar19 = __aeabi_fsub(uVar13,uVar19);\n    uVar19 = __aeabi_fmul(uVar19,*(undefined4 *)PTR_kda1_00080a38);\n    puVar8 = PTR_kdp1_00080a3c;\n    uVar19 = __aeabi_fsub(uVar19,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = uVar19;\n    uVar15 = __aeabi_fmul(uVar13,*(undefined4 *)PTR_kpa1_00080a40);\n    uVar15 = __addsf3(uVar15,uVar14);\n    __addsf3(uVar15,uVar19);\n    uVar15 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = uVar15;\n    uVar15 = __floatsisf();\n    *(undefined4 *)puVar9 = uVar13;\n    *(undefined4 *)puVar4 = uVar15;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar14;\n    *(undefined4 *)puVar8 = uVar19;\n    uVar12 = millis();\n    *(uint32_t *)puVar5 = uVar12 + *(int *)puVar2;\n  }\n  uVar13 = __floatsisf(*(undefined4 *)puVar2);\n  iVar16 = __aeabi_fcmpge(*(undefined4 *)puVar4,uVar13);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = uVar13;\n  }\n  iVar16 = __aeabi_fcmple(*(undefined4 *)puVar4,0);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  uVar10 = __fixunssfsi(*(undefined4 *)puVar4);\n  iVar16 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar16 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "__aeabi_fcmpge",
                "__aeabi_fmul",
                "__aeabi_fcmple",
                "millis",
                "query",
                "__floatunsisf",
                "poll",
                "__floatsisf",
                "__aeabi_fsub",
                "__fixunssfsi",
                "__addsf3",
                "__aeabi_f2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "getReceivedDataCount_000813e4",
                "this": "self",
                "_rx_buffer": "rx_buffer",
                "_iHead": "head",
                "_iTail": "tail"
            },
            "code": "int __thiscall getReceivedDataCount_000813e4(UARTClass *this) {\n    int head = this->_rx_buffer->_iHead;\n    int tail = this->_rx_buffer->_iTail;\n    int count = (head - tail) & 0x7f;\n    return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "getReceivedDataCount_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "is_end_of_string_00081cbc",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_00081cbc(char current_char)\n{\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "is_end_of_string_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_UART_irq_00080aac",
                "PTR_Serial_00080ab4": "serial_ptr"
            },
            "code": "void handle_UART_irq_00080aac(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial_00080ab4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_irq_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "PTR_lc_ctype_charset_00084294": "lc_ctype_charset"
            },
            "code": "const char* get_charset_00084290()\n{\n  return PTR_lc_ctype_charset_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "get_file_status_000846b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "errno_ptr",
                "iVar2": "stat_result"
            },
            "code": "void get_file_status_000846b4(int *error_code, int file_descriptor, struct stat *file_status)\n{\n  int *errno_ptr;\n  int stat_result;\n  errno_ptr = PTR_errno_000846d8;\n  *(int *)PTR_errno_000846d8 = 0;\n  stat_result = _fstat(file_descriptor, file_status);\n  if ((stat_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "check_file_existence_000811a8",
                "cOld_UNUSED": "old_filename",
                "cNew_UNUSED": "new_filename"
            },
            "code": "int check_file_existence_000811a8(char *old_filename, char *new_filename)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "check_file_existence_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8::FUN_000813a8": "initialize_queue",
                "this": "queue_instance",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "FUN_000813a8": "initialize_queue_000813a8"
            },
            "code": "initialize_queue_000813a8 * __thiscall initialize_queue_000813a8(initialize_queue_000813a8 *queue_instance)\n{\n  memset(queue_instance, 0, 128);\n  queue_instance->head_index = 0;\n  queue_instance->tail_index = 0;\n  return queue_instance;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initialize_queue_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "FUNC_00083d9c"
            },
            "code": "\nvoid FUNC_00083d9c(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083f24;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083e30;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083d9c",
            "calling": [
                "_fclose_r",
                "_malloc_r",
                "__swsetup_r",
                "_realloc_r",
                "__sfvwrite_r",
                "free",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "FUNC_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_quotient_000818c8",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "uVar5": "sign_extended_divisor",
                "iVar6": "divisor_shifted_right",
                "uVar7": "dividend_shifted_left",
                "bVar8": "dividend_is_nonzero"
            },
            "code": "uint calculate_quotient_000818c8(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint sign_mask = divisor & 0x80000000;\n  if ((int)sign_mask < 0) {\n    bool dividend_is_nonzero = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)dividend_is_nonzero;\n  }\n  uint remainder = dividend;\n  if (divisor == 0) {\n    remainder = 0;\n  } else {\n    uint sign_extended_divisor = sign_mask | 0x5b000000;\n    if (divisor == 0) {\n      sign_extended_divisor += 0xf0000000;\n    }\n    int shift_amount = count_leading_zeroes(divisor) - 8;\n    int divisor_shifted_right = (int)(sign_extended_divisor - 0x800000) + shift_amount * -0x800000;\n    if (shift_amount < 0) {\n      uint divisor_shifted_left = divisor << (shift_amount + 0x18U & 0xff);\n      uint dividend_shifted_left = remainder << (shift_amount & 0xff);\n      uint dividend_shifted_right = remainder >> (0x20 - (shift_amount + 0x18U) & 0xff);\n      uint quotient_candidate = (dividend_shifted_left | divisor_shifted_left << 1);\n      quotient = divisor_shifted_right + ((dividend_shifted_right - ((int)divisor_shifted_left >> 0x1f)) & ~(quotient_candidate >> 0x1f));\n    } else {\n      uint dividend_shifted_left = remainder << shift_amount;\n      uint dividend_shifted_right = remainder >> (0x20 - shift_amount);\n      uint divisor_shifted_left = divisor << shift_amount;\n      uint divisor_shifted_right = divisor >> (0x20 - shift_amount);\n      uint quotient_candidate = (remainder << shift_amount) / divisor_shifted_left;\n      quotient = divisor_shifted_right + quotient_candidate + (uint)(0x7fffffff < (remainder >> (32 - shift_amount)) * (divisor << shift_amount));\n    }\n    if ((remainder << shift_amount) == 0x80000000) {\n      quotient = quotient & 0xfffffffe;\n    }\n  }\n  return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "num1_doubled",
                "uVar3": "num2_doubled",
                "uVar4": "num1_signed_bit",
                "bVar5": "is_num1_zero",
                "bVar1": "is_negative",
                "xor_result": "xor_result"
            },
            "code": "uint check_overflow_00081bf4(uint num1, uint num2)\n{\n  bool is_negative;\n  uint num1_doubled = num1 * 2;\n  uint num2_doubled = num2 * 2;\n  \n  if(((int)num1_doubled >> 0x18 == -1 || (int)num2_doubled >> 0x18 == -1) && (((int)num1_doubled >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) || (((int)num2_doubled >> 0x18 == -1 && ((num2 & 0x7fffff) != 0))))){\n    return 1;\n  }\n  \n  uint num1_signed_bit = num1 | 0x80000000;\n  bool is_num1_zero = num1_signed_bit == 0;\n  if(!is_num1_zero){\n    uint xor_result = num1 ^ num2;\n    is_num1_zero = xor_result == 0;\n  }\n  \n  is_negative = -1 < (int)xor_result;\n  if(is_negative){\n    num1 = num1_doubled + num2 * -2;\n    is_num1_zero = num1 == 0;\n  }\n  \n  if(is_negative && num2_doubled <= num1_doubled && !is_num1_zero){\n    num1 = (int)num2 >> 0x1f;\n  }\n  \n  if(!is_negative || num2_doubled > num1_doubled){\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  \n  if(!is_num1_zero){\n    num1 = num1 | 1;\n  }\n  \n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "check_overflow_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_preinit_array_and_fini_00081d7c",
                "puVar1": "fini_array_start",
                "puVar2": "fini_array_end",
                "iVar3": "i",
                "ppcVar4": "preinit_array_ptr",
                "iVar5": "preinit_array_size"
            },
            "code": "void execute_preinit_array_and_fini_00081d7c() {\n  int preinit_array_size = (int)PTR___preinit_array_end_00081dbc - (int)PTR___preinit_array_end_00081dc0 >> 2;\n  if (preinit_array_size != 0) {\n    code **preinit_array_ptr = (code **)(PTR___preinit_array_end_00081dc0 + -4);\n    int i = 0;\n    do {\n      i++;\n      preinit_array_ptr++;\n      (**preinit_array_ptr)();\n    } while (preinit_array_size != i);\n  }\n  undefined *fini_array_start = PTR___preinit_array_end_00081dc8;\n  undefined *fini_array_end = PTR__fini_00081dc4;\n  _init();\n  int fini_array_size = (int)fini_array_end - (int)fini_array_start >> 2;\n  if (fini_array_size != 0) {\n    code **fini_array_ptr = (code **)(fini_array_start + -4);\n    int i = 0;\n    do {\n      i++;\n      fini_array_ptr++;\n      (**fini_array_ptr)();\n    } while (fini_array_size != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "frame_dummy",
                "register_fini",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_and_fini_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "execute_callbacks_on_pioB_pins_with_no_interrupts_000810bc",
                "uVar1": "leading_zeroes_count",
                "uVar2": "active_pins",
                "PTR_callbacksPioB_000810f0": "PTR_callbacksPioB",
                "DAT_000810ec": "DAT_offset",
                "pin_index": "pin_index",
                "callback": "callback"
            },
            "code": "void execute_callbacks_on_pioB_pins_with_no_interrupts_000810bc(void)\n{\n  uint32_t active_pins = *(uint32_t *)(DAT_000810ec + 0x4c);\n  while(active_pins) {\n    uint32_t leading_zeroes_count = count_leading_zeroes(active_pins);\n    if (leading_zeroes_count > 0x1f) break;\n    uint32_t pin_index = 0x1f - leading_zeroes_count;\n    code *callback = *(code **)(PTR_callbacksPioB_000810f0_000810f0 + pin_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    active_pins &= ~(1 << pin_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_pioB_pins_with_no_interrupts_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "compare_and_concat_00081c5c",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "undefined8 compare_and_concat_00081c5c(float a, float b)\n{\n  __cmpsf2();\n  return CONCAT44(b,a);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple"
            ],
            "imported": false,
            "current_name": "compare_and_concat_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "check_ticks_and_call_callback_00081388",
                "iVar1": "ticks",
                "PTR_ticks_000813a0": "PTR_ticks",
                "DAT_000813a4": "callback"
            },
            "code": "void check_ticks_and_call_callback_00081388(void)\n{\n  int ticks = *(int *)PTR_ticks_000813a0_000813a0;\n  if (ticks != -1 && --ticks == 0) {\n    (*DAT_000813a4)();\n  }\n  *(int *)PTR_ticks_000813a0_000813a0 = ticks;\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_call_callback_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_free_r",
                "_malloc_r",
                "_realloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr_2",
                "puVar4": "source_ptr",
                "uVar5": "current_int",
                "uVar6": "next_int",
                "puVar7": "destination_ptr_2",
                "puVar8": "destination_ptr",
                "pcVar9": "destination_ptr",
                "bVar10": "has_zero_byte"
            },
            "code": "char* copy_string_00082994(char* destination, char* source) {\n  char current_char;\n  unsigned short current_short;\n  unsigned int* source_ptr = (unsigned int*)source;\n  unsigned int* destination_ptr = (unsigned int*)destination;\n  bool has_zero_byte;\n  \n  if ((((unsigned int)destination ^ (unsigned int)source) & 3) != 0) {\n    do {\n      current_char = *source;\n      *destination = current_char;\n      source++;\n      destination++;\n    } while (current_char != '\\0');\n    return destination;\n  }\n  \n  if (((unsigned int)source & 3) != 0) {\n    unsigned int* source_ptr_2 = (unsigned int*)(source + 1);\n    unsigned int* destination_ptr_2 = (unsigned int*)(destination + 1);\n    current_char = *source;\n    *destination = current_char;\n    if (current_char == '\\0') {\n      return destination;\n    }\n    source_ptr = source_ptr_2;\n    destination_ptr = destination_ptr_2;\n  }\n  \n  if (((unsigned int)source_ptr & 2) != 0) {\n    current_short = *(unsigned short*)source_ptr;\n    has_zero_byte = (current_short & 0xff) == 0;\n    if (has_zero_byte) {\n      *(char*)destination_ptr = (char)current_short;\n    } else {\n      *(unsigned short*)destination_ptr = current_short;\n      has_zero_byte = (current_short & 0xff00) == 0;\n      destination_ptr++;\n    }\n    if (has_zero_byte) {\n      return destination;\n    }\n    source_ptr = (unsigned int*)((int)source_ptr + 2);\n    destination_ptr = (unsigned int*)((int)destination_ptr + 2);\n  }\n  \n  while (true) {\n    unsigned int current_int = *source_ptr;\n    has_zero_byte = (current_int + 0xfefefeff & ~current_int & 0x80808080) != 0;\n    *destination_ptr = current_int;\n    source_ptr++;\n    destination_ptr++;\n    if (has_zero_byte) {\n      break;\n    }\n    current_int = *source_ptr;\n    has_zero_byte = (current_int + 0xfefefeff & ~current_int & 0x80808080) != 0;\n    *destination_ptr = current_int;\n    source_ptr++;\n    destination_ptr++;\n    if (has_zero_byte) {\n      break;\n    }\n  }\n  \n  do {\n    *(char*)destination_ptr = (char)current_int;\n    current_int = current_int >> 8 | current_int << 0x18;\n    destination_ptr = (unsigned int*)((int)destination_ptr + 1);\n  } while ((char)current_int != '\\0');\n  \n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initializeUARTBuffers_00080c0c",
                "puVar1": "rxBuffer1",
                "puVar2": "txBuffer1",
                "this": "rxBuffer3",
                "this_00": "txBuffer4",
                "this_01": "rxBuffer2",
                "this_02": "txBuffer2",
                "PTR_rx_buffer1_00080ca0": "rx_buffer1",
                "PTR_tx_buffer1_00080ca4": "tx_buffer1",
                "PTR_rx_buffer2_00080cd8": "rx_buffer2",
                "PTR_rx_buffer3_00080cac": "rx_buffer3",
                "PTR_rx_buffer4_00080cb4": "rx_buffer4",
                "PTR_tx_buffer2_00080cdc": "tx_buffer2",
                "PTR_tx_buffer3_00080cb8": "tx_buffer3",
                "PTR_tx_buffer4_00080cbc": "tx_buffer4",
                "PTR_Serial_00080cb0": "serial",
                "PTR_Serial1_00080cc4": "serial1",
                "PTR_Serial2_00080ccc": "serial2",
                "PTR_Serial3_00080cd4": "serial3",
                "DAT_00080ca8": "baud_rate1",
                "DAT_00080cc0": "baud_rate2",
                "DAT_00080cc8": "baud_rate3",
                "DAT_00080cd0": "baud_rate4"
            },
            "code": "void initializeUARTBuffers_00080c0c(void)\n{\n  RingBuffer rxBuffer1(PTR_PTR_rx_buffer1_00080ca0_00080ca0);\n  RingBuffer txBuffer1(PTR_PTR_tx_buffer1_00080ca4_00080ca4);\n  RingBuffer rxBuffer2(PTR_PTR_rx_buffer2_00080cd8_00080cd8);\n  RingBuffer rxBuffer3(PTR_PTR_rx_buffer3_00080cac_00080cac);\n  RingBuffer rxBuffer4(PTR_PTR_rx_buffer4_00080cb4_00080cb4);\n  RingBuffer txBuffer2(PTR_PTR_tx_buffer2_00080cdc_00080cdc);\n  RingBuffer txBuffer3(PTR_PTR_tx_buffer3_00080cb8_00080cb8);\n  RingBuffer txBuffer4(PTR_PTR_tx_buffer4_00080cbc_00080cbc);\n  UARTClass PTR_Serial_00080cb0(PTR_Serial_00080cb0, DAT_00080ca8, UART_IRQn, 8, &rxBuffer1, &txBuffer1);\n  USARTClass PTR_Serial1_00080cc4(PTR_Serial1_00080cc4, DAT_00080cc0, USART0_IRQn, 0x11, &rxBuffer2, &txBuffer2);\n  USARTClass PTR_Serial2_00080ccc(PTR_Serial2_00080ccc, DAT_00080cc8, USART1_IRQn, 0x12, &rxBuffer3, &txBuffer3);\n  USARTClass PTR_Serial3_00080cd4(PTR_Serial3_00080cd4, DAT_00080cd0, USART3_IRQn, 0x14, &rxBuffer4, &txBuffer4);\n  return;\n}",
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initializeUARTBuffers_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "kill_process_and_get_error_code_00084418",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr"
            },
            "code": "void kill_process_and_get_error_code_00084418(int *error_code, int process_id, int signal) {\n  int *errno_ptr = PTR_errno_0008443c;\n  *(int *)PTR_errno_0008443c = 0;\n  _kill(process_id, signal);\n  if ((process_id == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_and_get_error_code_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_control_flags_00080d2e",
                "param_1": "device_control_block",
                "param_2": "control_flag",
                "param_3": "value",
                "uVar1": "new_control_flags"
            },
            "code": "void set_control_flags_00080d2e(int device_control_block, uint32_t control_flag, uint32_t value)\n{\n  uint32_t new_control_flags;\n  *(uint32_t *)(device_control_block + 0x44) = value;\n  switch(control_flag) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    new_control_flags = *(uint32_t *)(device_control_block + 0x70) & *(uint32_t *)(device_control_block + 0x70) & ~value;\n    break;\n  case 2:\n    new_control_flags = *(uint32_t *)(device_control_block + 0x70) | value;\n    break;\n  default:\n    goto unknown_control_flag;\n  }\n  *(uint32_t *)(device_control_block + 0x70) = new_control_flags;\nunknown_control_flag:\n  *(uint32_t *)(device_control_block + 4) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_control_flags_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_2007001c": "g_flag_ptr",
                "DAT_20070020": "g_flag_value",
                "DAT_20070028": "g_output_ptr",
                "DAT_20070024": "g_output_value"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disableIRQinterrupts();\n  while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(int *)(DAT_2007001c + 4) = DAT_20070020;\n  while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  while(true) {}\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "exit_program_with_status_000811f0",
                "status": "status",
                "PTR_s_Exiting_with_status__d__000811fc": "Exiting_with_status_message"
            },
            "code": "void exit_program_with_status_000811f0(int status)\n{\n  iprintf(\"Exiting with status: %d\", status);\n  while(true) {\n    // Do nothing, just loop infinitely\n  }\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "exit_program_with_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "incrementTickCount_00081704",
                "PTR__dwTickCount_00081710": "tickCountPtr"
            },
            "code": "void incrementTickCount_00081704(void)\n{\n  int* PTR__dwTickCount_00081710 = (int*)PTR__dwTickCount_00081710;\n  int currentTickCount = *PTR__dwTickCount_00081710;\n  *PTR__dwTickCount_00081710 = currentTickCount + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "call_global_destructors_00083c10",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor"
            },
            "code": "void call_global_destructors_00083c10(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_00083c3c - (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor--;\n      (**destructor)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n}",
            "called": [
                "__do_global_dtors_aux",
                "_fini"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "call_global_destructors_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "calculate_result_00081bec",
                "param_1": "first_number",
                "param_2": "second_number",
                "uVar2": "doubled_first_number",
                "uVar3": "doubled_second_number",
                "uVar4": "combined_numbers",
                "bVar5": "is_combined_numbers_zero",
                "bVar1": "is_combined_numbers_negative"
            },
            "code": "uint calculate_result_00081bec(uint first_number, uint second_number)\n{\n  bool is_overflowed;\n  uint doubled_first_number = first_number * 2;\n  uint doubled_second_number = second_number * 2;\n  \n  if (((int)doubled_first_number >> 0x18 == -1 || (int)doubled_second_number >> 0x18 == -1) &&\n     ((((int)doubled_first_number >> 0x18 == -1 && ((first_number & 0x7fffff) != 0)) ||\n      (((int)doubled_second_number >> 0x18 == -1 && ((second_number & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint combined_numbers = doubled_first_number | second_number & 0x7fffffff;\n  bool is_combined_numbers_zero = combined_numbers == 0;\n  if (!is_combined_numbers_zero) {\n    combined_numbers = first_number ^ second_number;\n    is_combined_numbers_zero = combined_numbers == 0;\n  }\n  bool is_combined_numbers_negative = -1 < (int)combined_numbers;\n  if (is_combined_numbers_negative) {\n    first_number = doubled_first_number + second_number * -2;\n    is_combined_numbers_zero = first_number == 0;\n  }\n  if ((is_combined_numbers_negative && doubled_second_number <= doubled_first_number) && !is_combined_numbers_zero) {\n    first_number = (int)second_number >> 0x1f;\n  }\n  if (!is_combined_numbers_negative || doubled_second_number > doubled_first_number) {\n    first_number = ~((int)second_number >> 0x1f);\n  }\n  if (!is_combined_numbers_zero) {\n    first_number = first_number | 1;\n  }\n  return first_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "write_to_stream_000844c4",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "buffer_size",
                "uVar1": "converted_character",
                "uVar2": "uint_character",
                "puVar3": "buffer_pointer",
                "iVar4": "flush_result"
            },
            "code": "uint write_to_stream_000844c4(int stream, uint character, undefined4 *stream_buffer, undefined4 buffer_size)\n{\n  ushort converted_character;\n  uint uint_character;\n  undefined *buffer_pointer;\n  int flush_result;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n    __sinit();\n  }\n  converted_character = *(ushort *)(stream_buffer + 3);\n  uint_character = (uint)converted_character;\n  stream_buffer[2] = stream_buffer[6];\n  if ((-1 < (int)(uint_character << 0x1c)) || (flush_result = stream_buffer[4], flush_result == 0)) {\n    flush_result = __swsetup_r(stream, stream_buffer, converted_character, uint_character, buffer_size);\n    if (flush_result != 0) {\n      return 0xffffffff;\n    }\n    converted_character = *(ushort *)(stream_buffer + 3);\n    flush_result = stream_buffer[4];\n    uint_character = (uint)converted_character;\n  }\n  character = character & 0xff;\n  if ((int)(uint_character << 0x12) < 0) {\n    buffer_pointer = (undefined *)*stream_buffer;\n    flush_result = (int)buffer_pointer - flush_result;\n    if (flush_result < (int)stream_buffer[5]) {\nLAB_000844f6:\n      flush_result = flush_result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    stream_buffer[0x19] = stream_buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*stream_buffer;\n    *(ushort *)(stream_buffer + 3) = converted_character | 0x2000;\n    flush_result = (int)buffer_pointer - flush_result;\n    if (flush_result < (int)stream_buffer[5]) goto LAB_000844f6;\n  }\n  flush_result = _fflush_r(stream, stream_buffer);\n  if (flush_result != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*stream_buffer;\n  flush_result = 1;\nLAB_000844f8:\n  stream_buffer[2] = stream_buffer[2] + -1;\n  *stream_buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((stream_buffer[5] == flush_result) || (((int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f) < 0 && (character == 10)))) && (flush_result = _fflush_r(stream, stream_buffer), flush_result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "__sinit",
                "_fflush_r",
                "__swsetup_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "offset",
                "uVar5": "carry"
            },
            "code": "uint calculate_hash_0008189c(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes_count - 8;\n  uint sign_bit = input & 0x80000000;\n  if (sign_bit != 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  int offset = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint shift = shift_amount & 0xff;\n    uint carry = 0;\n    uint result = offset + (input << shift) + (carry >> (0x20 - shift)) + (uint)(0x7fffffff < carry);\n    if ((input & (1 << shift)) != 0) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift = (leading_zeroes_count + 0x18) & 0xff;\n  uint carry = (input >> (0x20 - shift)) - ((int)(input << (shift - 0x20)) >> 0x1f);\n  uint result = offset + carry;\n  if ((input & (1 << (shift - 1))) == 0) {\n    result = result & ~(1 << 31);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_hash_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest8",
                "puVar2": "src32",
                "puVar3": "dest32",
                "puVar4": "dest8",
                "puVar5": "src32",
                "puVar6": "src8",
                "uVar7": "count",
                "uVar8": "remaining",
                "bVar9": "loop_condition"
            },
            "code": "void * copy_memory_0008234c(void * destination, const void * source, size_t size)\n{\n  uint32_t *dest = (uint32_t *)destination;\n  const uint32_t *src = (const uint32_t *)source;\n  size_t count = size / sizeof(uint32_t);\n  size_t remaining = size % sizeof(uint32_t);\n  for (size_t i = 0; i < count; i++)\n  {\n    dest[i] = src[i];\n  }\n  uint8_t *dest8 = (uint8_t *)&dest[count];\n  const uint8_t *src8 = (const uint8_t *)&src[count];\n  for (size_t i = 0; i < remaining; i++)\n  {\n    dest8[i] = src8[i];\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_master_data_00080a68",
                "puVar1": "rx_string_ptr",
                "PTR_RxString_00080a94": "rx_string_ptr",
                "PTR_s__00080a98": "rx_string_literal_ptr",
                "DAT_00080aa0": "exit_function_ptr",
                "PTR___dso_handle_00080a9c": "dso_handle_ptr",
                "PTR_master_00080aa4": "master_data_ptr"
            },
            "code": "void initialize_master_data_00080a68(void)\n{\n  String rx_string = String(PTR_RxString_00080a94);\n  __aeabi_atexit(PTR_RxString_00080a94, DAT_00080aa0, PTR___dso_handle_00080a9c);\n  int *master_data = PTR_master_00080aa4;\n  master_data[4] = 0;\n  master_data[5] = 0;\n  master_data[6] = 6;\n  *(int *)(master_data + 0x56) = 1000;\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_master_data_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "setString_0008165c",
                "this": "thisPtr",
                "cstr": "newString",
                "length": "length",
                "uVar1": "successFlag",
                "invalidate": "invalidateBuffer",
                "len": "length",
                "buffer": "buffer"
            },
            "code": "String* __thiscall setString_0008165c(String* thisPtr, char* newString, uint length)\\n{\\n  uchar successFlag;\\n  successFlag = reserveBuffer(thisPtr, length);\\n  if (successFlag == \"\\0\") {\\n    invalidateBuffer(thisPtr);\\n  }\\n  else {\\n    thisPtr->length = length;\\n    strcpy(thisPtr->buffer, newString);\\n  }\\n  return thisPtr;\\n}",
            "called": [
                "invalidate",
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "setString_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_000815f8(uint8_t high_byte, uint8_t low_byte) {\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_first_occurrence_of_char_in_memory_00084384",
                "__s": "memory",
                "__c": "character",
                "__n": "size",
                "puVar1": "last_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "current_word_xor",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "non_matching_bits_mask",
                "bVar8": "non_matching_bits_exist"
            },
            "code": "void * find_first_occurrence_of_char_in_memory_00084384(void *memory, int character, size_t size)\n{\n  uint *current_word;\n  uint *last_word;\n  uint character_mask;\n  uint non_matching_bits_mask;\n  byte *current_byte;\n  byte *last_byte;\n  uint current_word_xor;\n  bool non_matching_bits_exist;\n  \n  character_mask = character & 0xff;\n  if (((uint)memory & 3) == 0) {\nLAB_000843b4:\n    current_word = (uint *)memory;\n    last_word = (uint *)size;\n    if ((uint *)0x3 < size) {\n      character_mask = character_mask | character_mask << 8;\n      do {\n        current_word_xor = *current_word ^ (character_mask | character_mask << 0x10);\n        current_word = (uint *)memory;\n        last_word = (uint *)size;\n        non_matching_bits_mask = current_word_xor + 0xfefefeff & ~current_word_xor & 0x80808080;\n        non_matching_bits_exist = non_matching_bits_mask != 0;\n        if (non_matching_bits_exist) {\n          break;\n        }\n        size = size + -4;\n        current_word = (uint *)((int)memory + 4);\n        memory = (uint *)((int)memory + 4);\n        last_word = (uint *)size;\n      } while ((uint *)0x3 < size);\n    }\n    memory = last_word;\n    last_byte = (byte *)((int)memory + -1);\n    if (((uint *)memory != (uint *)0x0) && (memory = current_word, *(byte *)current_word != character_mask)) {\n      current_byte = (byte *)0x0;\n      do {\n        memory = (void *)((int)memory + 1);\n        non_matching_bits_exist = current_byte == last_byte;\n        current_byte = current_byte + 1;\n        if (non_matching_bits_exist) {\n          goto LAB_000843dc;\n        }\n      } while (*memory != character_mask);\n    }\n  }\n  else if (size == 0) {\nLAB_000843dc:\n    memory = (uint *)0x0;\n  }\n  else {\n    if (*memory != character_mask) {\n      current_word = (uint *)((int)memory + 1);\n      size = (size_t)(size - 1);\n      do {\n        memory = current_word;\n        if (((uint)memory & 3) == 0) {\n          goto LAB_000843b4;\n        }\n        if ((uint *)size == (uint *)0x0) {\n          goto LAB_000843dc;\n        }\n        current_word = (uint *)((int)memory + 1);\n        size = (size_t)(size + -1);\n      } while (*memory != character_mask);\n    }\n  }\n  return memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_char_in_memory_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "get_signal_status_00082ab0",
                "__pid": "process_id",
                "__sig": "signal_number",
                "iVar1": "status"
            },
            "code": "int get_signal_status_00082ab0(__pid_t process_id, int signal_number)\n{\n  int status;\n  status = _get_signal_status_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc, process_id, signal_number);\n  return status;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_status_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "is_not_null_00081c6c",
                "in_ZR": "input"
            },
            "code": "bool is_not_null_00081c6c(char input) {\\n  __aeabi_cfcmpeq();\\n  return input != \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_param_00081034",
                "param_1": "param_ptr",
                "param_2": "new_value",
                "param_3": "bit_flag",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_1 + 4)": "*current_value_ptr",
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": "new_value | current_value | (bit_flag & 1) << 7"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_param_00081034(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_param_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_socket_000844bc",
                "param_1": "socket_file_descriptor",
                "param_2": "socket_flags"
            },
            "code": "void close_socket_000844bc(int socket_file_descriptor, int socket_flags)\n{\n  _close_r(socket_file_descriptor, (int)*(short *)(socket_flags + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_socket_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "check_exit_function_00083974",
                "DAT_00083980": "exit_function_flag",
                "DAT_00083984": "exit_function_pointer"
            },
            "code": "void check_exit_function_00083974(void)\n{\n  if (DAT_00083980 != 0) {\n    atexit(DAT_00083984);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_exit_function_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_file_00084700",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_00084700(int *result, int file_descriptor, int offset, int whence) {\n  int *errno_ptr = PTR_errno_00084724;\n  *errno_ptr = 0;\n  int seek_result = _lseek(file_descriptor, offset, whence);\n  if (seek_result == -1 && *errno_ptr != 0) {\n    *result = *errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_input_00080e5c",
                "param_1": "input",
                "uVar1": "mask",
                "uVar2": "value"
            },
            "code": "int check_input_00080e5c(uint input) {\n  uint mask;\n  uint value;\n  if (input < 45) {\n    if (input < 32) {\n      mask = 1 << (input & 0xff);\n      value = *(uint *)(DAT_00080e98 + 0x18) & mask;\n      if (value == mask) {\n        *(uint *)(DAT_00080e98 + 0x14) = value;\n      }\n    }\n    else {\n      mask = 1 << (input - 0x20 & 0xff);\n      value = *(uint *)(DAT_00080e98 + 0x108) & mask;\n      if (value == mask) {\n        *(uint *)(DAT_00080e98 + 0x104) = value;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_input_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "isFloatNotGreaterThanOrEqualZero_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isLessThanZero"
            },
            "code": "bool isFloatNotGreaterThanOrEqualZero_00081ca8(void)\n{\n  bool isLessThanZero = __aeabi_cfrcmple();\n  return !isLessThanZero || (isLessThanZero == 0);\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "isFloatNotGreaterThanOrEqualZero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "set_pin_status_00081318",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "puVar1": "g_APinDescription",
                "puVar2": "g_pinStatus",
                "uVar4": "port",
                "uVar5": "pin",
                "uVar6": "pin_value",
                "iVar3": "is_output_data_status_zero"
            },
            "code": "void set_pin_status_00081318(uint32_t pin_number, uint32_t pin_value)\\n{\\n  bool is_pin_output = g_APinDescription[pin_number * 0x1c + 0xc] != \"\\0\";\\n  if (is_pin_output) {\\n    uint32_t current_pin_status = g_pinStatus[pin_number];\\n    if ((current_pin_status & 0xf) == 5) {\\n      pinMode(pin_number, OUTPUT);\\n    }\\n    g_pinStatus[pin_number] = (current_pin_status & 0xf) | (pin_value << 4);\\n    uint32_t port = *(uint32_t *)(g_APinDescription + pin_number * 0x1c);\\n    uint32_t pin = *(uint32_t *)(g_APinDescription + pin_number * 0x1c + 4);\\n    bool is_output_data_status_zero = PIO_GetOutputDataStatus(port, pin) == 0;\\n    if (is_output_data_status_zero) {\\n      PIO_PullUp(port, pin, pin_value);\\n      return;\\n    }\\n    PIO_SetOutput(port, pin, pin_value, 0, 1, pin_value);\\n  }\\n  return;\\n}",
            "called": [
                "PIO_GetOutputDataStatus",
                "pinMode",
                "PIO_SetOutput",
                "PIO_PullUp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "begin",
                "setup",
                "init",
                "getRxBuffer",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "set_pin_status_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "getTickCount_00081714",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081714(void)\n{\n  return *(uint32_t*)PTR__dwTickCount_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "isEndOfInput_00081c80",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfInput_00081c80(void)\n{\n  char currentChar;\n  __aeabi_cfcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfInput_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "seek_and_update_0008449c",
                "param_1": "file_descriptor",
                "param_2": "data_buffer",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "seek_offset": "seek_offset"
            },
            "code": "void seek_and_update_0008449c(int file_descriptor, int* data_buffer) {\n  int seek_result;\n  ushort flag;\n  int seek_offset = (int)*(short *)(data_buffer + 0xe);\n  seek_result = _lseek_r(file_descriptor, seek_offset);\n  if (seek_result == -1) {\n    flag = *(ushort *)(data_buffer + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_buffer + 0xc) | 0x1000;\n    *(int *)(data_buffer + 0x50) = seek_result;\n  }\n  *(ushort *)(data_buffer + 0xc) = flag;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_free_r",
                "_malloc_r",
                "_realloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product",
                "*param_5": "difference[0]",
                "param_5[1]": "difference[1]"
            },
            "code": "void calculate_difference_0008477c(uint dividend, int divisor, uint32_t multiplicand_low, uint32_t multiplicand_high, int *difference) {\n  uint32_t product_low = dividend * multiplicand_low;\n  uint32_t product_high = dividend * multiplicand_high;\n  uint64_t product = ((uint64_t)product_high << 32) | product_low;\n  uint32_t quotient = (uint32_t)(product / divisor);\n  difference[0] = dividend - quotient;\n  difference[1] = (int)((product - ((uint64_t)quotient * divisor)) >> 32) - (quotient > dividend);\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "readModbusData_000801b0",
                "this": "modbusInstance",
                "bVar1": "isBufferOverflow",
                "uVar2": "receivedByte",
                "uVar3": "bufferSize",
                "iVar4": "errorCode",
                "bVar5": "bufferIndex",
                "u8txenpin": "u8TransmitEnablePin",
                "u8BufferSize": "u8BufferLength",
                "u8serno": "u8SerialNumber",
                "port": "serialPort",
                "u16InCnt": "u16InputCount",
                "au8Buffer": "receiveBuffer",
                "u16errCnt": "u16ErrorCount"
            },
            "code": "int8_t __thiscall readModbusData_000801b0(Modbus *modbusInstance)\n{\n  bool isBufferOverflow = false;\n  uchar receivedByte;\n  uint8_t bufferSize;\n  int errorCode;\n  byte bufferIndex;\n  \n  if (modbusInstance->u8txenpin > 1) {\n    digitalWrite((uint)modbusInstance->u8txenpin, LOW);\n  }\n  \n  bufferSize = 0;\n  \n  if (modbusInstance->u8serno < 4) {\n    do {\n      errorCode = (**(code **)(*(int *)modbusInstance->port + 8))();\n      if (errorCode != 0) {\n        receivedByte = (**(code **)(*(int *)modbusInstance->port + 0xc))();\n        modbusInstance->au8Buffer[bufferIndex] = receivedByte;\n        bufferIndex++;\n        bufferSize = bufferIndex;\n        if (bufferSize > 63) {\n          isBufferOverflow = true;\n        }\n      }\n    } while (errorCode != 0);\n  }\n  \n  modbusInstance->u16InCnt++;\n  \n  if (isBufferOverflow) {\n    modbusInstance->u16errCnt++;\n    return 0xfd;\n  }\n  else {\n    return bufferSize;\n  }\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readModbusData_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "add_to_ring_buffer_000813c2",
                "this": "buffer",
                "c": "character",
                "uVar1": "next_head_index",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer_array"
            },
            "code": "void __thiscall add_to_ring_buffer_000813c2(RingBuffer *buffer, uint8_t character)\n{\n  uint next_head_index = (buffer->head_index + 1) & 0x7f;\n  if (next_head_index != buffer->tail_index) {\n    buffer->buffer_array[buffer->head_index] = character;\n    buffer->head_index = next_head_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "add_to_ring_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "UartController_000814e4",
                "this": "_this",
                "pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "_pUart": "uart",
                "_dwIrq": "irq",
                "_dwId": "id",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "field_0x4": "_field_0x4",
                "field_0x8": "_field_0x8"
            },
            "code": "class UartController_000814e4 {\npublic:\n    UartController_000814e4(Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n        _pUart = uart;\n        _dwIrq = irq;\n        _dwId = id;\n        _rx_buffer = rx_buffer;\n        _tx_buffer = tx_buffer;\n        _field_0x4 = 0;\n        _field_0x8 = 1000;\n    }\n\nprivate:\n    Uart *_pUart;\n    IRQn_Type _dwIrq;\n    uint32_t _dwId;\n    RingBuffer *_rx_buffer;\n    RingBuffer *_tx_buffer;\n    int _field_0x4;\n    int _field_0x8;\n};",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "imported": false,
            "current_name": "UartController_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "set_values_00080d54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "PTR_00000014": "data[17]",
                "PTR_0000004c": "data[25]",
                "PTR_00000048": "data[24]",
                "PTR_00000020": "data[32]",
                "PTR_00000004": "data[5]"
            },
            "code": "void set_values_00080d54(uint32_t* data, uint32_t value, uint32_t flags) {\n  bool is_negative = (int)(flags << 31) < 0;\n  PTR_00000014 = value;\n  if (is_negative) {\n    PTR_0000004c = value;\n  }\n  if (!is_negative) {\n    PTR_00000048 = value;\n  }\n  bool is_bit_set = (flags & 0xA) != 0;\n  if (is_bit_set) {\n    data[8] = value;\n  }\n  if (!is_bit_set) {\n    data[9] = value;\n  }\n  if (((int)(flags << 30) < 0) || ((int)(flags << 28) < 0)) {\n    PTR_00000020 = value;\n  }\n  PTR_00000004 = value;\n  *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_values_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculateModbusCRC_0008021c",
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "pMVar1": "currentModbusInstance",
                "uVar2": "crc",
                "cVar3": "bitIndex",
                "uVar4": "lsb"
            },
            "code": "uint16_t __thiscall calculateModbusCRC_0008021c(Modbus *modbusInstance, uint8_t bufferLength)\n{\n  Modbus *currentModbusInstance;\n  uint16_t crc = 0xffff;\n  for (currentModbusInstance = modbusInstance; ((int)currentModbusInstance - (int)modbusInstance & 0xffU) < (uint)bufferLength;\n      currentModbusInstance = (Modbus *)((int)&currentModbusInstance->port + 1)) {\n    crc = crc ^ currentModbusInstance->au8Buffer[0];\n    char bitIndex = 8;\n    do {\n      uint16_t lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bitIndex = bitIndex - 1;\n    } while (bitIndex != 0);\n  }\n  return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateModbusCRC_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sinit",
                "__swsetup_r",
                "__aeabi_uldivmod",
                "strlen",
                "__sprint_r.part.0",
                "memchr",
                "__sbprintf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "iprintf",
                "__sbprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "walk_function_00083b08",
                "param_1": "ptr",
                "DAT_00083b10": "action"
            },
            "code": "void walk_function_00083b08(void* ptr, void (*DAT_00083b10)(void*)) {\n  _fwalk(ptr, DAT_00083b10);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "walk_function_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_function_with_pointer_00081e04",
                "__ptr": "data_ptr",
                "_FUN_00081e04_r": "function_ptr"
            },
            "code": "void call_function_with_pointer_00081e04(void* function_ptr, void* data_ptr)\n{\n  function_ptr(*(int*)PTR__impure_ptr_00081e10, data_ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "invalidate",
                "~String"
            ],
            "imported": false,
            "current_name": "call_function_with_pointer_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "update_UART_rx_buffer_000814a8",
                "this": "uart",
                "_rx_buffer": "rx_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_dwIrq": "irq_pin",
                "_dwId": "id"
            },
            "code": "void __thiscall update_UART_rx_buffer_000814a8(UARTClass *uart)\n{\n  uart->rx_buffer->head_index = uart->rx_buffer->tail_index;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)(DAT_000814e0 + (((uint)(int)uart->irq_pin >> 5) + 0x20) * 4) = 1 << (uint)(byte)(uart->irq_pin & 0x1f);\n  pmc_disable_periph_clk(uart->id);\n  return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "update_UART_rx_buffer_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "executeCallbacksOnSetBits_00081084",
                "uVar1": "leadingZeroes",
                "uVar2": "bitsToCheck",
                "PTR_callbacksPioA_000810b8": "PTR_callbacksPioA",
                "DAT_000810b4": "DAT",
                "callback": "callback",
                "bitToCheck": "bitToCheck"
            },
            "code": "void executeCallbacksOnSetBits_00081084(void)\n{\n  uint bitsToCheck = *(uint *)(DAT_000810b4_000810b4 + 0x4c);\n  while( true ) {\n    uint leadingZeroes = count_leading_zeroes(bitsToCheck);\n    if (leadingZeroes > 0x1f) break;\n    uint bitToCheck = 0x1f - leadingZeroes;\n    code *callback = *(code **)(PTR_callbacksPioA_000810b8_000810b8 + bitToCheck * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bitsToCheck &= ~(1 << bitToCheck);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "executeCallbacksOnSetBits_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "divide_or_error_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_or_error_00084750(int dividend, int divisor, int quotient, int remainder)\n{\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_error_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_adc_00080ae4",
                "ctx": "context",
                "puVar1": "system_clock_ptr",
                "puVar2": "data_ptr",
                "iVar3": "var3",
                "iVar4": "var2",
                "iVar5": "var1",
                "iVar6": "counter",
                "ulPin": "pin_number",
                "uVar7": "temp_counter",
                "DAT_00080bec": "data_array",
                "DAT_00080bf0": "register_address",
                "DAT_00080bf4": "var4",
                "DAT_00080bf8": "var3",
                "DAT_00080bfc": "var2",
                "DAT_00080c00": "var1",
                "DAT_00080c04": "channel_mask",
                "DAT_00080c08": "adc_base_address"
            },
            "code": "int initialize_adc_00080ae4(EVP_PKEY_CTX *context)\n{\n  uint32_t pin_number;\n  uint32_t counter;\n  uint32_t system_clock_speed = *(uint *)PTR_SystemCoreClock_00080be8;\n  SystemInit();\n  uint32_t prescaler = system_clock_speed / 1000 - 1;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  uint32_t *data_ptr = DAT_00080bec;\n  data_ptr[2] = 0;\n  *data_ptr = 7;\n  __libc_initialize_adc_00080ae4_array();\n  pin_number = 0;\n  do {\n    counter = pin_number + 1;\n    digitalWrite(pin_number,0);\n    uint32_t DAT_00080c00 = DAT_00080c00;\n    uint32_t DAT_00080bfc = DAT_00080bfc;\n    uint32_t DAT_00080bf8 = DAT_00080bf8;\n    uint32_t DAT_00080bf4 = DAT_00080bf4;\n    pin_number = counter;\n  } while (counter != 0x4f);\n  *(uint32_t *)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(DAT_00080bf8 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(DAT_00080c00 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(DAT_00080bfc + 0xa0) = 0xffffffff;\n  PIO_Configure(DAT_00080bf4,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(DAT_00080bf4,1,0xc00,0);\n  PIO_Configure(DAT_00080bf4,1,0x3000,0);\n  PIO_Configure(DAT_00080bfc,2,0x30,0);\n  PIO_Configure(DAT_00080bf8,1,0xc00,0);\n  PIO_Configure(DAT_00080bf4,1,3,0);\n  PIO_Configure(DAT_00080bf8,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_initialize_adc_00080ae4(DAT_00080c08,system_clock_speed,DAT_00080c04,0xc);\n  adc_configure_timing(DAT_00080c08,0,0x300000,1);\n  adc_configure_trigger(DAT_00080c08,0,0);\n  adc_disable_interrupt(DAT_00080c08,0xffffffff);\n  uint32_t result = adc_disable_all_channel(DAT_00080c08);\n  analogOutputInit();\n  return result;\n}",
            "called": [
                "__libc_init_array",
                "adc_configure_timing",
                "SystemInit",
                "PIO_Configure",
                "adc_configure_trigger",
                "adc_disable_all_channel",
                "digitalWrite",
                "pmc_enable_periph_clk",
                "adc_init",
                "adc_disable_interrupt",
                "analogOutputInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_exit_function_00081d5c",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_exit_function_00081d5c(void (*func)(void), void *arg)\n{\n  __cxa_atexit(func, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_exit_function_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "allocated_memory"
            },
            "code": "void allocate_memory_00082970(int *error_code, int size) {\n  undefined *error_ptr = PTR_errno_00082990;\n  *(undefined4 *)PTR_errno_00082990 = 0;\n  caddr_t allocated_memory = _sbrk(size);\n  if ((allocated_memory == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "returnOne_000811be"
            },
            "code": "int returnOne_000811be() {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "returnOne_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "checkAndCallAfl_0008014c",
                "ticks": "ticks",
                "uVar1": "aflReturnValue",
                "PTR_noHyperCall_00080160": "PTR_noHyperCall_00080160",
                "aflCall": "callAflFunction"
            },
            "code": "int checkAndCallAfl_0008014c(int ticks)\n{\n  uint32_t aflReturnValue;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    aflReturnValue = callAflFunction(1, ticks, 0);\n    return aflReturnValue;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "checkAndCallAfl_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compareFloats_00081c54",
                "param_1": "firstFloat",
                "param_2": "secondFloat"
            },
            "code": "void compareFloats_00081c54(float firstFloat, float secondFloat)\n{\n  __aeabi_cfcmpeq(secondFloat, firstFloat);\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compareFloats_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "String::FUN_0008163a": "resizeStringBuffer",
                "this": "string",
                "size": "newSize",
                "uVar1": "success",
                "buffer": "string->buffer",
                "capacity": "string->capacity",
                "changeBuffer": "changeStringBuffer",
                "len": "string->length",
                "FUN_0008163a": "resizeStringBuffer_0008163a"
            },
            "code": "uchar __thiscall resizeStringBuffer_0008163a(String *string, uint newSize)\n{\n  uchar success = 0;\n  if ((string->buffer == NULL) || (string->capacity < newSize)) {\n    success = changeStringBuffer(string, newSize);\n    if (success == 0) {\n      return 0;\n    }\n    if (string->length == 0) {\n      *string->buffer = '\\0';\n    }\n  }\n  return 1;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "resizeStringBuffer_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "FUNC_00081aac"
            },
            "code": "\nuint FUNC_00081aac(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_00081aa2:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_00081ac4;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_00081ac4:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "allocate_memory_000825a0",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "allocated_memory",
                "_FUN_000825a0_r": "allocate_memory_helper"
            },
            "code": "void * allocate_memory_000825a0(void *ptr, size_t size) {\n  void *allocated_memory;\n  allocated_memory = (void *)allocate_memory_000825a0_helper(*(undefined4 *)PTR__impure_ptr_000825ac, ptr, size);\n  return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "Initialize_000815d4",
                "this": "instance",
                "Usart": "Uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_000815f4": "PTR_PTR_write_1_000815f4"
            },
            "code": "Initialize_000815d4(UARTClass *uart_class, Uart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n  uart_class->super_UARTClass = (Uart *)usart;\n  uart_class->dwIrq = irq;\n  uart_class->dwId = id;\n  uart_class->pRx_buffer = rx_buffer;\n  uart_class->pTx_buffer = tx_buffer;\n}\n\nInitialize_000815d4 * __thiscall Initialize_000815d4::Initialize_000815d4(Initialize_000815d4 *this, Uart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  Initialize_000815d4(&this->uart_class, usart, irq, id, rx_buffer, tx_buffer);\n  this->_pUsart = usart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "Initialize_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "set_data_at_offset_00080d24",
                "param_1": "base_address",
                "param_2": "data",
                "param_3": "offset",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(base_address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(base_address + 0x60)"
            },
            "code": "void set_data_at_offset_00080d24(int base_address, int data, int offset) {\n  if (offset != 0) {\n    *(int *)(base_address + 100) = data;\n    return;\n  }\n  *(int *)(base_address + 0x60) = data;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_data_at_offset_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00082140;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00082140 + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00082140 + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00082140 + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00082140 + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  puVar12 = PTR___malloc_av__00082140 + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00082262;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00082262:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00082148;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_0008211e;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00082154;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00082154 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00082154;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00082108;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "__smakebuf_r",
                "malloc",
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_000818b8",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "dividend",
                "uVar2": "divisor",
                "iVar3": "leadingZeroes",
                "uVar4": "factor",
                "iVar5": "factorStart",
                "uVar6": "shiftedDividend"
            },
            "code": "uint calculate_000818b8(uint num1, uint num2)\n{\n  uint result = 0;\n  uint leadingZeroes = 0;\n  uint factor = 0;\n\n  if ((num1 | num2) == 0) {\n    return num1;\n  }\n\n  uint dividend = num1;\n  uint divisor = num2;\n\n  if (num2 == 0) {\n    dividend = 0;\n    divisor = num1;\n  }\n\n  int factorStart = 0x5b000000;\n  if (num2 == 0) {\n    factorStart = 0x4b000000;\n  }\n\n  leadingZeroes = count_leading_zeroes(divisor);\n  factor = leadingZeroes - 8;\n  factorStart = factorStart + -0x800000 + factor * -0x800000;\n\n  if (leadingZeroes < 8) {\n    uint shiftedDivisor = divisor << (leadingZeroes + 0x18U & 0xff);\n    result = factorStart + ((divisor >> (0x20 - (leadingZeroes + 0x18U) & 0xff)) - ((int)shiftedDivisor >> 0x1f));\n    if ((dividend | shiftedDivisor << 1) == 0) {\n      result = result & ~(shiftedDivisor >> 0x1f);\n    }\n    return result;\n  }\n\n  uint shiftedDividend = dividend << (factor & 0xff);\n  result = factorStart + (divisor << (factor & 0xff)) + (dividend >> (0x20 - factor & 0xff)) + (uint)(0x7fffffff < shiftedDividend);\n  if (shiftedDividend == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initializeModbus_00080164",
                "u32speed": "speed",
                "puVar1": "serialPointer",
                "iVar2": "readStatus",
                "PTR_Serial_000801ac": "serialPointer",
                "this->port": "this->port",
                "this->u8txenpin": "this->u8txenpin",
                "pinMode": "pinMode",
                "digitalWrite": "digitalWrite",
                "this->u8BufferSize": "this->u8BufferSize",
                "this->u8lastRec": "this->u8lastReceived",
                "this->u16errCnt": "this->u16errorCount",
                "this->u16OutCnt": "this->u16outputCount",
                "this->u16InCnt": "this->u16inputCount",
                "**code": "**code",
                "*(int *)": "*(int *)",
                "OUTPUT": "OUTPUT",
                "LOW": "LOW"
            },
            "code": "void __thiscall initializeModbus_00080164(Modbus *this,long speed){\\n  undefined *PTR_Serial_000801ac;\\n  int readStatus;\\n  PTR_Serial_000801ac = PTR_Serial_000801ac;\\n  this->port = (HardwareSerial *)PTR_Serial_000801ac;\\n  (**(code **)(*(int *)PTR_Serial_000801ac + 0x18))(PTR_Serial_000801ac);\\n  if (1 < this->u8txenpin) {\\n    pinMode((uint)this->u8txenpin,OUTPUT);\\n    digitalWrite((uint)this->u8txenpin,LOW);\\n  }\\n  do {\\n    readStatus = (**(code **)(*(int *)this->port + 0xc))();\\n  } while (-1 < readStatus);\\n  this->u8BufferSize = \"\\0\";\\n  this->u8lastReceived = \"\\0\";\\n  this->u16errorCount = 0;\\n  this->u16outputCount = 0;\\n  this->u16inputCount = 0;\\n  return;\\n}",
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeModbus_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_data_section_000811cc",
                "file_UNUSED": "file_descriptor",
                "ptr": "source_buffer",
                "len": "buffer_length",
                "iVar1": "byte_index"
            },
            "code": "int copy_bytes_to_data_section_000811cc(int file_descriptor,char *source_buffer,int buffer_length)\n{\n  int byte_index;\n  for (byte_index = 0; byte_index < buffer_length; byte_index = byte_index + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)source_buffer[byte_index];\n  }\n  return buffer_length & ~(buffer_length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_data_section_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_terminal_000846dc",
                "param_1": "error_code",
                "param_2": "terminal_id",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_terminal_000846dc(int *error_code, int terminal_id)\n{\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_000846fc;\n  *(undefined4 *)PTR_errno_000846fc = 0;\n  is_terminal = _isatty(terminal_id);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_terminal_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_input",
                "bVar1": "is_positive_result",
                "bVar5": "is_zero_input"
            },
            "code": "uint calculate_result_00081be4(uint input_1, uint input_2)\n{\n  bool is_negative_result;\n  uint doubled_input_1 = input_1 * 2;\n  uint doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) && ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  uint combined_input = doubled_input_1 | input_2 & 0x7fffffff;\n  bool is_zero_input = combined_input == 0;\n  if (!is_zero_input) {\n    combined_input = input_1 ^ input_2;\n    is_zero_input = combined_input == 0;\n  }\n  bool is_positive_result = -1 < (int)combined_input;\n  if (is_positive_result) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero_input = input_1 == 0;\n  }\n  if ((is_positive_result && doubled_input_2 <= doubled_input_1) && !is_zero_input) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_positive_result || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero_input) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "initialize_000815ca",
                "this": "instance",
                "dwBaudRate": "baud_rate"
            },
            "code": "void __thiscall initialize_000815ca(USARTClass *instance, uint32_t baud_rate)\n{\n  UARTClass::initialize_000815ca(&instance->super_UARTClass, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "initialize_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "convert_to_fixed_point_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "shifted_zero": "shifted_zero",
                "result": "result"
            },
            "code": "uint convert_to_fixed_point_00081894(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = multiplier + shifted_input + shifted_zero + carry;\n    if (shifted_zero == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_zero = (uint)(shifted_input >> 0x1f);\n  uint result = multiplier + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - shifted_zero);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_fixed_point_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "data_count",
                "param_2": "data_processor",
                "uVar1": "processed_data",
                "iVar2": "item_ptr",
                "iVar3": "item_count",
                "uVar4": "result",
                "piVar5": "data_ptr"
            },
            "code": "uint process_data_00084248(int data_count, code *data_processor)\n{\n  uint result = 0;\n  int *data_ptr = (int *)(data_count + 0x2e0);\n  if (data_ptr != (int *)0x0) {\n    do {\n      int item_count = data_ptr[1] + -1;\n      int item_ptr = data_ptr[2];\n      if (-1 < item_count) {\n        do {\n          item_count = item_count + -1;\n          if ((1 < *(ushort *)(item_ptr + 0xc)) && (*(short *)(item_ptr + 0xe) != -1)) {\n            uint processed_data = (*data_processor)(item_ptr);\n            result |= processed_data;\n          }\n          item_ptr += 0x68;\n        } while (item_count != -1);\n      }\n      data_ptr = (int *)*data_ptr;\n    } while (data_ptr != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_error_000845bc",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "data_size",
                "*param_1": "*buffer",
                "*param_2": "*data"
            },
            "code": "int write_byte_or_error_000845bc(int *buffer, char *data, uint data_size) {\n  if (data == NULL) {\n    return 0;\n  }\n  if (data_size < 256) {\n    *data = (char)data_size;\n    return 1;\n  }\n  *buffer = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_or_error_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "read_00081412",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numberOfBytes",
                "bVar1": "byteValue",
                "pRVar2": "ringBuffer",
                "_rx_buffer": "ringBuffer",
                "_iHead": "_iHead",
                "_iTail": "_iTail",
                "_aucBuffer": "_aucBuffer"
            },
            "code": "ssize_t __thiscall read_00081412(UARTClass *this, int fileDescriptor, void *buffer, size_t numberOfBytes) {\n  byte byteValue;\n  RingBuffer *ringBuffer;\n  \n  ringBuffer = this->_rx_buffer;\n  if (ringBuffer->_iHead != ringBuffer->_iTail) {\n    byteValue = ringBuffer->_aucBuffer[ringBuffer->_iTail];\n    ringBuffer->_iTail = (ringBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteValue;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "read_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "add_to_list_000838cc",
                "param_1": "type",
                "param_2": "value",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "puVar1": "list_ptr",
                "uVar2": "list_length",
                "uVar4": "bit_mask",
                "iVar3": "list_size"
            },
            "code": "uint32_t add_to_list_000838cc(int type, uint32_t value, uint32_t ptr1, uint32_t ptr2)\n{\n    uint32_t* list_ptr;\n    uint32_t list_size;\n    uint32_t bit_mask;\n\n    list_size = *(int*)PTR__global_impure_ptr_0008396c;\n    list_ptr = *(uint32_t**)(list_size + 0x148);\n\n    if (list_ptr == (uint32_t*)0x0) {\n        list_ptr = (uint32_t*)(list_size + 0x14c);\n        *(uint32_t**)(list_size + 0x148) = list_ptr;\n    }\n\n    uint32_t list_length = list_ptr[1];\n\n    if (list_length > 0x1f) {\n        if (DAT_00083970 != 0) {\n            uint32_t* new_list = (uint32_t*)malloc(400);\n            if (new_list != (uint32_t*)0x0) {\n                *new_list = *(uint32_t*)(list_size + 0x148);\n                new_list[1] = 0;\n                list_length = 0;\n                *(uint32_t**)(list_size + 0x148) = new_list;\n                new_list[0x62] = 0;\n                new_list[99] = 0;\n                goto LAB_00083922;\n            }\n        }\n        return 0xffffffff;\n    }\n\nLAB_00083922:\n    if (type != 0) {\n        bit_mask = 1 << (list_length & 0xff);\n        list_ptr[list_length + 0x22] = ptr1;\n        list_ptr[0x62] = list_ptr[0x62] | bit_mask;\n        list_ptr[list_length + 0x42] = ptr2;\n        if (type == 2) {\n            list_ptr[99] = bit_mask | list_ptr[99];\n        }\n    }\n    list_ptr[1] = list_length + 1;\n    list_ptr[list_length + 2] = value;\n    return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_list_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_memory_with_value_00082504",
                "__s": "mem",
                "__c": "value",
                "__n": "size",
                "puVar1": "start_word",
                "puVar2": "current_word",
                "puVar3": "end_word",
                "uVar4": "value_16",
                "uVar5": "remaining_size",
                "bVar6": "is_aligned"
            },
            "code": "void * fill_memory_with_value_00082504(void *mem, int value, size_t size) {\n  uint *current_word;\n  uint *start_word;\n  uint *end_word;\n  uint value_32 = (value & 0xffU) | ((value & 0xffU) << 8) | ((value & 0xffU) << 16) | ((value & 0xffU) << 24);\n  bool is_aligned = ((uint)mem & 3) == 0;\n  if (!is_aligned) {\n    if (size == 0) {\n      return mem;\n    }\n    start_word = (uint *)mem;\n    size--;\n    current_word = start_word;\n    *(char *)current_word = (char)value;\n    current_word++;\n  }\n  else {\n    start_word = (uint *)mem;\n    current_word = start_word;\n  }\n  end_word = (uint *)((int)start_word + (size & 0xfffffff0));\n  while (current_word < end_word) {\n    *current_word = value_32;\n    current_word++;\n    *current_word = value_32;\n    current_word++;\n    *current_word = value_32;\n    current_word++;\n    *current_word = value_32;\n    current_word++;\n  }\n  size &= 0xf;\n  end_word = (uint *)((int)start_word + (size & 0xfffffffc));\n  if (size >= 4) {\n    *current_word = value_32;\n    current_word++;\n    *current_word = value_32;\n    current_word++;\n    *current_word = value_32;\n    current_word++;\n  }\n  if (size & 2) {\n    *current_word = value_32;\n    current_word++;\n    *current_word = value_32;\n    current_word++;\n  }\n  if (size & 1) {\n    *current_word = value_32;\n  }\n  return mem;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_program_completed_000800f4",
                "param_1": "text_end_pointer",
                "PTR_completed_7857_0008010c": "completed_flag",
                "DAT_00080110": "program_data",
                "PTR__etext_00080114": "end_of_text_segment"
            },
            "code": "char* check_if_program_completed_000800f4(char* text_end_pointer) {\\n  if (*PTR_completed_7857_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      text_end_pointer = PTR__etext_00080114;\\n    }\\n    *PTR_completed_7857_0008010c = 1;\\n  }\\n  return text_end_pointer;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_program_completed_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_formatted_string_0008378c",
                "param_1": "file",
                "param_2": "buffer",
                "iVar1": "num_chars_written",
                "iVar2": "flush_result",
                "local_488": "buffer_array",
                "local_480": "buffer_size_1",
                "local_47c": "ushort_var",
                "local_47a": "ushort_var_2",
                "local_478": "buffer_pointer",
                "local_474": "buffer_size_2",
                "local_470": "int_var",
                "local_46c": "int_var_2",
                "local_464": "int_var_3",
                "local_424": "undefined_var",
                "auStack_420": "large_buffer"
            },
            "code": "int print_formatted_string_0008378c(FILE* file, int buffer_size, void* buffer, const char* format, ...) {\n  int num_chars_written;\n  int flush_result;\n  va_list args;\n  va_start(args, format);\n  num_chars_written = vfprintf(file, format, args);\n  va_end(args);\n  if (num_chars_written < 0 || fflush(file) != 0) {\n    num_chars_written = -1;\n  }\n  if ((*(unsigned short*)(buffer + 0xC) & 0xFFFDu) << 0x19 < 0) {\n    *(unsigned short*)(buffer + 0xC) |= 0x40u;\n  }\n  return num_chars_written;\n}",
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "initialize_if_not_initialized_00083adc",
                "param_1": "data_address",
                "param_2": "flag_address",
                "__sinit": "initialize_stream",
                "__sflush_r": "flush_stream"
            },
            "code": "void initialize_if_not_initialized_00083adc(int data_address,int flag_address)\n{\n  if ((data_address != 0) && (*(int *)(data_address + 0x38) == 0)) {\n    initialize_stream();\n  }\n  if (*(short *)(flag_address + 0xc) == 0) {\n    return;\n  }\n  flush_stream(data_address);\n  return;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "_fclose_r",
                "__swbuf_r",
                "__sbprintf",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "initialize_if_not_initialized_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__0008296c;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_0008267c;\n  }\n  if (uVar9 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000826a4;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "_malloc_r",
                "__malloc_unlock",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "realloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "execute_callbacks_on_active_bits_0008112c",
                "uVar1": "leading_zeroes",
                "uVar2": "active_bits",
                "PTR_callbacksPioD_00081160": "PTR_callbacksPioD_00081160",
                "DAT_0008115c": "DAT_0008115c"
            },
            "code": "void execute_callbacks_on_active_bits_0008112c(void)\n{\n  uint active_bits = *(uint *)(DAT_0008115c + 0x4c);\n  while (true)\n  {\n    uint leading_zeroes = count_leading_zeroes(active_bits);\n    if (leading_zeroes > 0x1f) break;\n    uint active_bit_index = 0x1f - leading_zeroes;\n    if (*(code **)(PTR_callbacksPioD_00081160 + active_bit_index * 4) != (code *)0x0)\n    {\n      (**(code **)(PTR_callbacksPioD_00081160 + active_bit_index * 4))();\n    }\n    active_bits &= ~(1 << active_bit_index);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_active_bits_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "checkModbusRequest_000803d4",
                "this": "modbusInstance",
                "iVar1": "bufferIndex",
                "au8Buffer": "buffer",
                "u16errCnt": "u16ErrorCount"
            },
            "code": "uint8_t __thiscall checkModbusRequest_000803d4(Modbus *modbusInstance) {\\n  int bufferIndex;\\n  uint8_t bufferValue = modbusInstance->au8Buffer[1];\\n  if ((int)(bufferValue << 0x18) < 0) {\\n    modbusInstance->u16ErrorCount++;\\n    return 0xfb;\\n  }\\n  for (bufferIndex = 0; bufferIndex < 8; bufferIndex++) {\\n    if (PTR_fctsupported_0008040c[bufferIndex] == bufferValue) {\\n      return \"\\0\";\\n    }\\n  }\\n  modbusInstance->u16ErrorCount++;\\n  return \"\\x01\";\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkModbusRequest_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "data",
                "param_4": "data_length",
                "puVar1": "errno_pointer",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000845d8(int *error_code, int file_descriptor, char *data, int data_length)\n{\n  int *errno_pointer;\n  int write_result;\n  errno_pointer = PTR_errno_000845fc;\n  *(int *)PTR_errno_000845fc = 0;\n  write_result = _write(file_descriptor, data, data_length);\n  if ((write_result == -1) && (*(int *)errno_pointer != 0)) {\n    *error_code = *(int *)errno_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "modbus_receive_0008043e",
                "__fds": "file_descriptor_set",
                "__nfds": "number_of_file_descriptors",
                "__timeout": "timeout",
                "bVar1": "received_byte",
                "uVar2": "byte_value",
                "uVar3": "current_time_in_milliseconds",
                "unaff_r6": "buffer_index",
                "u8serno": "serial_number",
                "this": "modbus",
                "port": "port",
                "u32timeOut": "time_out",
                "u8lastError": "last_error",
                "u8state": "state",
                "u16errCnt": "error_count",
                "getRxBuffer": "get_rx_buffer",
                "validateAnswer": "validate_answer",
                "au8Buffer": "buffer",
                "get_FC3": "get_function_code_3"
            },
            "code": "int __thiscall modbus_receive_0008043e(Modbus *modbus, fd_set *file_descriptor_set, int number_of_file_descriptors, int timeout)\\n{\\n  byte received_byte;\\n  uint8_t byte_value;\\n  uint32_t current_time_in_milliseconds;\\n  uint buffer_index;\\n  \\n  if (modbus->serial_number < 4) {\\n    received_byte = (**(code **)(*(int *)modbus->port + 8))();\\n    buffer_index = (uint)received_byte;\\n  }\\n  current_time_in_milliseconds = millis();\\n  if (modbus->time_out < current_time_in_milliseconds) {\\n    modbus->last_error = 0xff;\\n    modbus->state = \"\\0\";\\n    modbus->error_count = modbus->error_count + 1;\\n  }\\n  else if (7 < buffer_index) {\\n    get_rx_buffer(modbus);\\n    byte_value = validate_answer(modbus);\\n    if (byte_value == \"\\0\") {\\n      if (modbus->buffer[1] - 3 < 2) {\\n        get_function_code_3(modbus);\\n      }\\n      modbus->state = \"\\0\";\\n      byte_value = modbus->buffer_size;\\n    }\\n    else {\\n      modbus->state = \"\\0\";\\n    }\\n    goto LAB_000804a2;\\n  }\\n  byte_value = \"\\0\";\\nLAB_000804a2:\\n  return (int)(char)byte_value;\\n}",
            "called": [
                "validateAnswer",
                "millis",
                "get_FC3",
                "getRxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "modbus_receive_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "clearString_0008160c",
                "this": "self",
                "buffer": "str_buffer",
                "len": "length",
                "capacity": "capacity"
            },
            "code": "void __thiscall clearString_0008160c(String *this)\n{\n  if (this->buffer != nullptr)\n  {\n    free(this->buffer);\n  }\n  this->buffer = nullptr;\n  this->length = 0;\n  this->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clearString_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "code": "int set_bit_00080e18(uint bit_position)\n{\n  uint bit_mask;\n  if (bit_position < 45) {\n    if (bit_position < 32) {\n      bit_mask = 1 << bit_position;\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 32);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "init",
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "count_items_in_list_00081184"
            },
            "code": "int count_items_in_list_00081184(void)\n{\n  int item_count = 0;\n  // code to count items in list\n  return item_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "count_items_in_list_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "receive_and_transmit_data_00081580",
                "this": "self",
                "pRVar1": "tx_buffer",
                "RVar2": "uart_sr",
                "_pUart": "uart",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "_iTail": "tail_index",
                "_iHead": "head_index",
                "_aucBuffer": "buffer"
            },
            "code": "void __thiscall receive_and_transmit_data_00081580(UARTClass *this)\n{\n  RingBuffer *rx_buffer = this->_rx_buffer;\n  RingBuffer *tx_buffer = this->_tx_buffer;\n  RoReg uart_sr = this->_pUart->UART_SR;\n  \n  if ((int)(uart_sr << 0x1f) < 0) {\n    RingBuffer::store_char(rx_buffer, (uint8_t)this->_pUart->UART_RHR);\n  }\n  \n  if ((int)(uart_sr << 0x1e) < 0) {\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      this->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7F;\n      return;\n    }\n    this->_pUart->UART_IDR = 2;\n  }\n  return;\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "USART0_Handler",
                "USART1_Handler",
                "USART3_Handler",
                "UART_Handler"
            ],
            "imported": false,
            "current_name": "receive_and_transmit_data_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_mb_cur_max_00084298",
                "PTR___mb_cur_max_000842a0": "mb_cur_max_ptr"
            },
            "code": "int get_mb_cur_max_00084298() {\n    int* PTR___mb_cur_max_000842a0 = PTR___mb_cur_max_000842a0;\n    int mb_cur_max = *PTR___mb_cur_max_000842a0;\n    return mb_cur_max;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_mb_cur_max_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "handleSerial1Interrupt_00080ac0",
                "PTR_Serial1_00080ac8": "serial1"
            },
            "code": "void handleSerial1Interrupt_00080ac0(void)\n{\n  UARTClass::IrqHandler(PTR_Serial1_00080ac8);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial1Interrupt_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "setParamToMaxValue_00081066",
                "param_1": "paramValue",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(paramValue + 0x14)"
            },
            "code": "void setParamToMaxValue_00081066(int paramValue)\n{\n  *(int *)(paramValue + 0x14) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "setParamToMaxValue_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_to_int_00081cd0",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "shift_result",
                "param_1 << 1": "input_shifted_left_once",
                "0x7f000000": "max_input_value",
                "0x9e": "shift_result_constant",
                "0x9f": "shift_amount_threshold",
                "0x80000000": "sign_bit",
                "(param_1 & 0x80000000) != 0": "is_input_negative",
                "param_1 << 8 | 0x80000000": "input_with_sign_bit_shifted_left_8_times",
                "(shift_result & 0xff)": "shift_amount_modulo_256",
                "(input & 0x7fffff) != 0": "input_has_nonzero_fractional_bits",
                "(input & 0x80000000) == 0": "is_input_positive",
                "0x7fffffff": "max_int_value"
            },
            "code": "uint convert_to_int_00081cd0(uint input) {\n  uint shift_amount = (input << 1) >> 0x18;\n  if (shift_amount < 0x9f) {\n    uint shift_result = 0x9e - shift_amount;\n    if (shift_result != 0) {\n      uint shifted_input = (input << 8 | 0x80000000) >> (shift_result & 0xff);\n      if ((input & 0x80000000) != 0) {\n        return -shifted_input;\n      }\n      return shifted_input;\n    }\n  }\n  else if (shift_amount == 0xffffff9f && (input & 0x7fffff) != 0) {\n    return 0;\n  }\n  if ((input & 0x80000000) == 0) {\n    return 0x7fffffff;\n  }\n  return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_int_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "wait_forever_00081188"
            },
            "code": "void wait_forever_00081188(void)\n{\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "memory_pointer",
                "_FUN_00081df4_r": "allocate_memory_helper"
            },
            "code": "void * allocate_memory_00081df4(size_t size)\n{\n  void *memory_pointer;\n  memory_pointer = (void *) allocate_memory_00081df4_helper(*(undefined4 *)PTR__impure_ptr_00081e00, size);\n  return memory_pointer;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "ReadModbusRegisters_00080410",
                "this": "modbus",
                "uVar1": "value",
                "uVar2": "byteIndex",
                "bVar3": "bufferIndex",
                "uVar4": "bufferLength",
                "puVar5": "registers"
            },
            "code": "void __thiscall ReadModbusRegisters_00080410(Modbus *modbus)\n{\n  uint16_t index;\n  uint byteIndex;\n  byte bufferIndex;\n  uint bufferLength;\n  uint16_t *registers;\n  bufferIndex = 0;\n  while(true)\n  {\n    bufferLength = (uint)bufferIndex;\n    bufferIndex = bufferIndex + 1;\n    index = bufferLength * 2 + 3 & 0xff;\n    if(modbus->au8Buffer[2] >> 1 <= bufferLength)\n      break;\n    registers = modbus->au16regs;\n    uint16_t value = makeWord(modbus->au8Buffer[index],modbus->au8Buffer[index + 1]);\n    registers[bufferLength] = value;\n  }\n  return;\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "ReadModbusRegisters_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flag",
                "DAT_00080df8": "PTR_DATA_HANDLER",
                "DAT_00080dfc": "PTR_DATA_HANDLER_2",
                "DAT_00080e00": "PTR_DATA_HANDLER_3",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080da0(int data_ptr, int data_type, int data_value, uint32_t data_flag)\n{\n  bool is_negative_flag;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*DAT_00080df8)(data_ptr, data_type, data_value);\n      is_negative_flag = (int)(data_flag << 0x1f) < 0;\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative_flag) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*DAT_00080dfc)(data_ptr, data_value, data_flag, DAT_00080dfc, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080e00)(data_ptr, data_value, data_type == 5, (data_flag << 0x1d) >> 0x1f, data_flag & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "sendPacket_00080258",
                "u8length": "bufferLength",
                "uVar1": "crc",
                "uVar2": "currentTime",
                "u8txenpin": "txEnablePin",
                "u8serno": "serialNumber",
                "iVar3": "receiveState",
                "this->u8BufferSize": "this->bufferSize",
                "this->au8Buffer": "this->buffer",
                "this->u32timeOut": "this->timeOut",
                "this->u16timeOut": "this->timeOutDuration",
                "this->u16OutCnt": "this->outgoingPacketCount"
            },
            "code": "void sendPacket_00080258() {\n  byte bufferLength = this->bufferSize;\n  uint16_t crc = calculateCRC(this,bufferLength);\n  this->buffer[bufferLength] = (uchar)((uint)crc >> 8);\n  this->buffer[(bufferLength + 1) & 0xff] = (uchar)crc;\n  this->bufferSize = bufferLength + 2;\n  if (this->txEnablePin > 1) {\n    digitalWrite((uint)this->txEnablePin, HIGH);\n  }\n  if (this->serialNumber < 4) {\n    (**(code **)(*(int *)this->port + 4))(this->port,this->buffer,this->bufferSize);\n  }\n  if (this->txEnablePin > 1) {\n    digitalWrite((uint)this->txEnablePin, LOW);\n  }\n  if (this->serialNumber < 4) {\n    do {\n      int receiveState = (**(code **)(*(int *)this->port + 0xc))();\n    } while (receiveState >= -1);\n  }\n  this->bufferSize = 0;\n  uint32_t currentTime = millis();\n  this->timeOut = currentTime + this->timeOutDuration;\n  this->outgoingPacketCount = this->outgoingPacketCount + 1;\n  return;\n}",
            "called": [
                "digitalWrite",
                "calcCRC",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "sendPacket_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "String::FUN_00081622": "allocateStringBuffer",
                "this": "str",
                "maxStrLen": "max_length",
                "pcVar1": "new_buffer",
                "FUN_00081622": "allocateStringBuffer_00081622"
            },
            "code": "uchar allocateStringBuffer_00081622(String *str, uint max_length) {\n  char *new_buffer = (char *)realloc(str->buffer, max_length + 1);\n  if (new_buffer != (char *)0x0) {\n    str->buffer = new_buffer;\n    str->capacity = max_length;\n    new_buffer = (char *)0x1;\n  }\n  return (uchar)new_buffer;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "allocateStringBuffer_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "i",
                "puVar2": "dest_word_ptr",
                "puVar3": "src_word_ptr",
                "puVar4": "dest_word_ptr",
                "puVar5": "dest_byte_ptr",
                "puVar6": "remaining_bytes",
                "puVar7": "dest_byte_ptr",
                "uVar8": "remaining_bytes",
                "uVar9": "copy_length",
                "puVar10": "dest_word_ptr",
                "puVar11": "src_word_ptr",
                "puVar12": "remaining_bytes",
                "puVar13": "src_byte_ptr",
                "puVar14": "dest_byte_ptr"
            },
            "code": "void * reverse_copy_00082438(void *dest, void *src, size_t n)\n{\n  int i;\n  uint remaining_bytes;\n  uint copy_length;\n  uint *dest_word_ptr;\n  uint *src_word_ptr;\n  uchar *dest_byte_ptr;\n  uchar *src_byte_ptr;\n  \n  if ((src < dest) && ((uchar *)src + n > (uchar *)dest)) {\n    dest_byte_ptr = (uchar *)dest + n;\n    remaining_bytes = n;\n    if (n != 0) {\n      do {\n        src_byte_ptr = (uchar *)src + --remaining_bytes;\n        dest_byte_ptr--;\n        *dest_byte_ptr = *src_byte_ptr;\n      } while (remaining_bytes != 0);\n    }\n    return dest;\n  }\n  \n  dest_word_ptr = (uint *)dest;\n  if (n >= 16 && ((uint)dest | (uint)src) % 4 == 0) {\n    src_word_ptr = (uint *)src;\n    copy_length = (n - 16) / 16 + 1;\n    do {\n      dest_word_ptr[0] = src_word_ptr[0];\n      dest_word_ptr[1] = src_word_ptr[1];\n      dest_word_ptr[2] = src_word_ptr[2];\n      dest_word_ptr[3] = src_word_ptr[3];\n      src_word_ptr += 4;\n      dest_word_ptr += 4;\n    } while (--copy_length != 0);\n    remaining_bytes = n % 16;\n    n -= remaining_bytes;\n    src_byte_ptr = (uchar *)src + n;\n    dest_byte_ptr = (uchar *)dest + n;\n    if (remaining_bytes > 3) {\n      dest_word_ptr = (uint *)dest_byte_ptr;\n      src_word_ptr = (uint *)src_byte_ptr;\n      copy_length = remaining_bytes / 4;\n      do {\n        *dest_word_ptr++ = *src_word_ptr++;\n      } while (--copy_length != 0);\n      remaining_bytes %= 4;\n    }\n    if (remaining_bytes != 0) {\n      dest_byte_ptr = (uchar *)dest_word_ptr;\n      src_byte_ptr = (uchar *)src_word_ptr;\n      do {\n        *dest_byte_ptr++ = *src_byte_ptr++;\n      } while (--remaining_bytes != 0);\n    }\n    return dest;\n  }\n  \n  dest_byte_ptr = (uchar *)dest;\n  src_byte_ptr = (uchar *)src;\n  remaining_bytes = n;\n  while (remaining_bytes-- != 0) {\n    *dest_byte_ptr++ = *src_byte_ptr++;\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initializeUART_00081508",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "modeReg": "modeReg",
                "puVar1": "coreClockPtr",
                "pRVar2": "rxBuffer",
                "pUVar3": "uartPeripheral"
            },
            "code": "void __thiscall initializeUART_00081508(UARTClass *uart, uint32_t baudRate, uint32_t modeReg)\n{\n  undefined *coreClockPtr;\n  RingBuffer *rxBuffer;\n  RingBuffer *txBuffer;\n  Uart *uartPeripheral;\n  \n  pmc_enable_periph_clk(uart->_dwId);\n  uartPeripheral = uart->_pUart;\n  uartPeripheral->UART_PTCR = 0x202;\n  uartPeripheral->UART_CR = 0xac;\n  coreClockPtr = PTR_SystemCoreClock_00081570;\n  uartPeripheral->UART_MR = modeReg;\n  uartPeripheral->UART_BRGR = *(uint *)coreClockPtr / baudRate >> 4;\n  uartPeripheral->UART_IDR = 0xffffffff;\n  uartPeripheral->UART_IER = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)uart->_dwIrq >> 5) * 4) =\n       1 << (uint)(byte)(uart->_dwIrq & 0x1f);\n  rxBuffer = uart->_rx_buffer;\n  rxBuffer->_iTail = 0;\n  rxBuffer->_iHead = 0;\n  txBuffer = uart->_tx_buffer;\n  txBuffer->_iTail = 0;\n  txBuffer->_iHead = 0;\n  uartPeripheral->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initializeUART_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_input_00083808",
                "param_1": "input_buffer",
                "param_2": "status_buffer",
                "uVar1": "input_value_shifted_least_significant_bit",
                "iVar2": "status_value",
                "uVar3": "input_value",
                "uVar4": "status_value_pointer_value",
                "PTR__impure_ptr_000838c8": "PTR_impure_ptr",
                "__sinit": "initialize_stream",
                "_free_r": "free_buffer",
                "__smakebuf_r": "create_buffer"
            },
            "code": "int process_input_00083808(uint16_t *input_buffer, int *status_buffer) {\n  uint16_t input_value = input_buffer[3];\n  uint32_t input_value_shifted = input_value << 0x1c;\n  int status_value = status_buffer[4];\n  uint16_t status_value_shifted = input_value | 8;\n  uint32_t status_value_shifted_int = status_value_shifted;\n  uint32_t status_value_shifted_int_shifted = status_value_shifted_int << 0x18;\n  uint16_t *status_value_pointer = (uint16_t *)(status_buffer + 3);\n  uint16_t status_value_pointer_value = *status_value_pointer;\n  uint32_t status_value_pointer_value_int = status_value_pointer_value;\n  uint32_t status_value_pointer_value_int_shifted = status_value_pointer_value_int << 0x18;\n  uint32_t status_value_pointer_value_int_shifted_signed = (int)status_value_pointer_value_int_shifted;\n  if ((*(int *)PTR__impure_ptr_000838c8 != 0) && (*(int *)(*(int *)PTR__impure_ptr_000838c8 + 0x38) == 0)) {\n    __sinit();\n  }\n  if ((int)input_value_shifted < 0) {\n    status_value = status_buffer[4];\n  } else {\n    if (-1 < (int)(input_value << 0x1b)) {\n      *status_buffer = 9;\n      *status_value_pointer = input_value | 0x40;\n      return -1;\n    }\n    if ((int)(input_value_shifted << 0x1d) < 0) {\n      if ((int *)status_buffer[0xc] != (int *)0x0) {\n        if ((int *)status_buffer[0xc] != status_buffer + 0x10) {\n          free(status_buffer);\n          status_value_pointer_value = *status_value_pointer;\n        }\n        status_buffer[0xc] = 0;\n      }\n      status_value = status_buffer[4];\n      status_value_pointer_value &= 0xffdb;\n      *status_buffer = status_value;\n      status_buffer[1] = 0;\n    } else {\n      status_value = status_buffer[4];\n    }\n    *status_value_pointer = status_value_shifted;\n  }\n  if ((status_value == 0) && ((status_value_pointer_value_int & 0x280) != 0x200)) {\n    __smakebuf_r(status_buffer, status_buffer);\n    status_value_pointer_value = *status_value_pointer;\n    status_value = status_buffer[4];\n  }\n  uint32_t status_value_pointer_value_shifted = status_value_pointer_value_int << 0x1e;\n  if ((status_value_pointer_value & 1) == 0) {\n    if (-1 < status_value_pointer_value_shifted) {\n      status_buffer[2] = status_buffer[5];\n    }\n  } else {\n    status_buffer[6] = -status_buffer[5];\n    status_buffer[2] = 0;\n  }\n  if ((status_value == 0) && (status_value_pointer_value_int_shifted_signed < 0)) {\n    *status_value_pointer = status_value_pointer_value | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "__swbuf_r",
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "process_input_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "address",
                "param_2": "position"
            },
            "code": "void set_bit_at_position_0008105c(int address, uint8_t position) {\n    int* address_ptr = (int*)(address + 0x14);\n    int bit_mask = 1 << (position & 0xff);\n    *address_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_wchar_to_char_0008456c",
                "param_1": "wstr",
                "param_2": "wlen",
                "param_3": "sizeof(wchar_t)",
                "param_4": "cstr",
                "uVar1": "locale",
                "iVar2": "result",
                "pcVar3": "converter",
                "auStack_24": "stack_buffer"
            },
            "code": "void convert_wchar_to_char_0008456c(const wchar_t *wstr, int wlen, char *cstr, int clen) {\n  int result;\n  code *converter;\n  undefined auStack_24 [12];\n  if (wlen == 0) {\n    converter = *(code **)PTR___wctomb_000845b8;\n    undefined4 locale = __locale_charset();\n    result = (*converter)(wstr, auStack_24, 0, locale, cstr);\n  }\n  else {\n    converter = *(code **)PTR___wctomb_000845b8;\n    undefined4 locale = __locale_charset();\n    result = (*converter)(wstr, wlen, sizeof(wchar_t), locale, cstr);\n  }\n  if (result == -1) {\n    *cstr = 0;\n    *wstr = L'\\0';\n  }\n  return;\n}",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wchar_to_char_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_to_directory_000811b4",
                "file_UNUSED": "file_stat",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_directory_000811b4(stat *file_stat){\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "FUN_000813f6": "get_next_byte_000813f6",
                "this": "uart_class_instance",
                "_rx_buffer": "rx_buffer",
                "pRVar2": "rx_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "uVar1": "next_byte",
                "_aucBuffer": "buffer"
            },
            "code": "unsigned int __thiscall get_next_byte_000813f6(UARTClass *this)\n{\n  unsigned int next_byte;\n  RingBuffer *rx_buffer;\n  rx_buffer = this->_rx_buffer;\n  if (rx_buffer->_iHead == rx_buffer->_iTail) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (unsigned int)rx_buffer->_aucBuffer[rx_buffer->_iTail];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_watchdog_timer_000816d4",
                "DAT_000816dc": "watchdog_timer_address"
            },
            "code": "void disable_watchdog_timer_000816d4(void)\n{\n  WDT_Disable(DAT_000816dc);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    DAT_00084244 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_0008402e;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_0008402e;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_0008402e;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_0008402e;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_0008402e;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_0008402e:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_free_r",
                "_fflush_r",
                "__swsetup_r",
                "memcpy",
                "_malloc_r",
                "_realloc_r",
                "memmove",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "execute_isr_if_present_00081074",
                "PTR_gpf_isr_00081080": "isr_ptr",
                "code": "func_ptr",
                "isr_func": "isr_function"
            },
            "code": "void execute_isr_if_present_00081074(void)\n{\n  code** PTR_gpf_isr_00081080 = *(code**)(PTR_gpf_isr_00081080);\n  if (PTR_gpf_isr_00081080 != (code*)0x0) {\n    code* isr_func = *PTR_gpf_isr_00081080;\n    (*isr_func)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_if_present_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_parameters_by_condition_00080d7a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "is_zero_1",
                "param_4": "is_zero_2",
                "param_5": "is_zero_3"
            },
            "code": "void set_parameters_by_condition_00080d7a(int* parameters, int value, int is_zero_1, int is_zero_2, int is_zero_3, int is_zero_4)\n{\n  parameters[17] = value;\n  if (is_zero_4 == 0) {\n    parameters[20] = value;\n  }\n  else {\n    parameters[25] = value;\n  }\n  if (is_zero_3 == 0) {\n    parameters[13] = value;\n  }\n  else {\n    parameters[12] = value;\n  }\n  if (is_zero_2 == 0) {\n    parameters[21] = value;\n  }\n  else {\n    parameters[20] = value;\n  }\n  if (is_zero_1 == 0) {\n    parameters[15] = value;\n  }\n  else {\n    parameters[14] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_parameters_by_condition_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_clock_00080e9c",
                "puVar1": "system_clock",
                "iVar2": "clock_control"
            },
            "code": "void initialize_system_clock_00080e9c(void)\n{\n  uint32_t *system_clock = DAT_00080f08;\n  *system_clock = 0x400;\n  system_clock[0x80] = 0x400;\n  int32_t *clock_control = DAT_00080f0c;\n  if (-1 < *(int32_t *)(clock_control + 0x20) << 7) {\n    *(uint32_t *)(clock_control + 0x20) = DAT_00080f14;\n    while (-1 < *(int32_t *)(clock_control + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(clock_control + 0x20) = DAT_00080f10;\n  while (-1 < *(int32_t *)(clock_control + 0x68) << 0xf);\n  *(uint32_t *)(clock_control + 0x30) = *(uint32_t *)(clock_control + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int32_t *)(clock_control + 0x68) << 0x1c);\n  *(uint32_t *)(clock_control + 0x28) = DAT_00080f18;\n  while (-1 < *(int32_t *)(clock_control + 0x68) << 0x1e);\n  *(uint32_t *)(clock_control + 0x30) = 0x11;\n  while (-1 < *(int32_t *)(clock_control + 0x68) << 0x1c);\n  *(uint32_t *)(clock_control + 0x30) = 0x12;\n  while (-1 < *(int32_t *)(clock_control + 0x68) << 0x1c);\n  *(uint32_t *)PTR_SystemCoreClock_00080f20 = DAT_00080f1c;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "update_file_position_00084464",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "buffer_size",
                "param_4": "position",
                "uVar1": "current_position"
            },
            "code": "void update_file_position_00084464(int file_descriptor, int buffer_address, int buffer_size, int position) {\n  ushort current_position = *(ushort *)(buffer_address + 0xc);\n  if ((int)((uint)current_position << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n    current_position = *(ushort *)(buffer_address + 0xc);\n  }\n  *(ushort *)(buffer_address + 0xc) = current_position & 0xefff;\n  _write_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),buffer_size,position);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "update_file_position_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "get_file_error_000811ae"
            },
            "code": "int get_file_error_000811ae() {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "get_file_error_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "execute_system_call_00080148",
                "a0": "syscall_number",
                "a1": "arg1",
                "a2": "arg2"
            },
            "code": "uint32_t execute_system_call_00080148(uint32_t syscall_number, uint32_t arg1, int32_t arg2)\n{\n  software_interrupt(0x3f);\n  return syscall_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "execute_system_call_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handleUARTInterrupt_00080ad8",
                "PTR_Serial3_00080ae0": "uartInstance"
            },
            "code": "void handleUARTInterrupt_00080ad8(void)\n{\n  UARTClass* PTR_Serial3_00080ae0 = (UARTClass*)PTR_Serial3_00080ae0;\n  PTR_Serial3_00080ae0->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handleUARTInterrupt_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "flush_and_free_resources_00084624",
                "param_1": "file_descriptor",
                "param_2": "stream_pointer",
                "uVar1": "result",
                "iVar2": "file_status"
            },
            "code": "int flush_and_free_resources_00084624(int file_descriptor, int stream_pointer)\n{\n  int result;\n  int file_status;\n  \n  if (stream_pointer != 0) {\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream_pointer + 0xc) != 0) {\n      result = _fflush_r(file_descriptor,stream_pointer);\n      if ((*(code **)(stream_pointer + 0x2c) != (code *)0x0) &&\n         (file_status = (**(code **)(stream_pointer + 0x2c))(file_descriptor,*(undefined4 *)(stream_pointer + 0x1c)), file_status < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream_pointer + 0xc) << 0x18) < 0) {\n        _free_r(file_descriptor,*(undefined4 *)(stream_pointer + 0x10));\n      }\n      if (*(int *)(stream_pointer + 0x30) != 0) {\n        if (*(int *)(stream_pointer + 0x30) != stream_pointer + 0x40) {\n          _free_r(file_descriptor);\n        }\n        *(undefined4 *)(stream_pointer + 0x30) = 0;\n      }\n      if (*(int *)(stream_pointer + 0x44) != 0) {\n        _free_r(file_descriptor);\n        *(undefined4 *)(stream_pointer + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream_pointer + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__sinit",
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sfp_lock_release"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_resources_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_0008118c",
                "incr": "size",
                "puVar1": "heap_ptr",
                "pcVar2": "allocated_mem_ptr"
            },
            "code": "caddr_t allocate_memory_0008118c(int size)\n{\n  undefined *heap_ptr = PTR_heap_000811a0;\n  if (*(int *)heap_ptr == 0) {\n    *(undefined **)heap_ptr = PTR__ebss_000811a4;\n  }\n  caddr_t allocated_mem_ptr = *(caddr_t *)heap_ptr;\n  *(caddr_t *)heap_ptr = allocated_mem_ptr + size;\n  return allocated_mem_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_null_terminated_string_length_00082a50",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "byte_is_null"
            },
            "code": "size_t count_null_terminated_string_length_00082a50(char* string) {\n  size_t length = 0;\n  uint* word_ptr = (uint*)((uint)string & 0xfffffffc);\n  size_t offset = -((uint)string & 3);\n  uint word = *word_ptr;\n  if (((uint)string & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset += 4;\n    word = *(++word_ptr);\n  }\n  bool byte_is_null = (word & 0xff) == 0;\n  if (!byte_is_null) {\n    offset += 1;\n    byte_is_null = (word & 0xff00) == 0;\n  }\n  if (!byte_is_null) {\n    offset += 1;\n    byte_is_null = (word & 0xff0000) == 0;\n  }\n  if (!byte_is_null) {\n    offset += 1;\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "count_null_terminated_string_length_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_at_offset_0008106e",
                "param_1": "base_address",
                "param_2": "value"
            },
            "code": "void set_parameter_at_offset_0008106e(int base_address, int offset, int value)\n{\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "calculate_file_size_000811c2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer",
                "dir_UNUSED": "directory"
            },
            "code": "int calculate_file_size_000811c2(int file_descriptor, int pointer, int directory) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "calculate_file_size_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "FUN_000816e0": "printBuffer_000816e0",
                "this": "printObject",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentPrintObject",
                "sVar2": "currentIndex"
            },
            "code": "size_t __thiscall printBuffer_000816e0(Print *printObject, uint8_t *buffer, size_t bufferSize)\n{\n  Print *currentPrintObject;\n  size_t currentIndex = 0;\n  currentPrintObject = printObject;\n  while ((currentIndex != bufferSize && (currentPrintObject = (Print *)(**printObject->_vptr_Print)(currentPrintObject, (uint)buffer[currentIndex]), currentPrintObject != (Print *)0x0))) {\n    currentIndex++;\n  }\n  return currentIndex;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handleSerial2Interrupt_00080acc",
                "PTR_Serial2_00080ad4": "serial2"
            },
            "code": "void handleSerial2Interrupt_00080acc(void)\n{\n  UARTClass::IrqHandler(PTR_Serial2_00080ad4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial2Interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "countCharactersInFile_000811c6",
                "file_UNUSED": "fileDescriptor",
                "ptr_UNUSED": "fileBuffer",
                "len_UNUSED": "bufferSize"
            },
            "code": "int countCharactersInFile_000811c6(int fileDescriptor, char *fileBuffer, int bufferSize) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "countCharactersInFile_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_block_00083d00",
                "param_1": "heap",
                "param_2": "block_size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_info",
                "iVar3": "sbrk_result",
                "iVar5": "padding",
                "uVar4": "av_size",
                "_sbrk_r": "sbrk",
                "PTR___malloc_av__00083d90": "malloc_av",
                "__malloc_lock": "lock_heap",
                "PTR___malloc_current_mallinfo_00083d94": "malloc_info",
                "__malloc_unlock": "unlock_heap",
                "PTR___malloc_sbrk_base_00083d98": "sbrk_base"
            },
            "code": "int allocate_memory_block_00083d00(void *heap, int block_size) {\n  void *PTR___malloc_av__00083d90 = PTR___PTR___malloc_av__00083d90__00083d90;\n  __malloc_lock();\n  uint32_t av_size = *(uint32_t *)(*(int *)(PTR___malloc_av__00083d90 + 8) + 4) & 0xfffffffc;\n  int32_t padding = ((av_size - block_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < padding) {\n    int32_t sbrk_result = _sbrk_r(heap, 0);\n    if (sbrk_result == *(int *)(PTR___malloc_av__00083d90 + 8) + av_size) {\n      sbrk_result = _sbrk_r(heap, -padding);\n      void *PTR___malloc_current_mallinfo_00083d94 = PTR___malloc_current_mallinfo_00083d94;\n      if (sbrk_result != -1) {\n        int32_t info_result = *(int *)PTR___malloc_current_mallinfo_00083d94;\n        *(uint32_t *)(*(int *)(PTR___malloc_av__00083d90 + 8) + 4) = av_size - padding | 1;\n        *(int *)PTR___malloc_current_mallinfo_00083d94 = info_result - padding;\n        __malloc_unlock(heap);\n        return 1;\n      }\n      int32_t sbrk_result2 = _sbrk_r(heap, 0);\n      void *PTR___malloc_sbrk_base_00083d98 = PTR___malloc_PTR___malloc_sbrk_base_00083d98_00083d98;\n      uint32_t new_av_size = sbrk_result2 - *(int *)(PTR___malloc_av__00083d90 + 8);\n      if (0xf < (int)new_av_size) {\n        int32_t base_result = *(int *)PTR___malloc_sbrk_base_00083d98;\n        *(uint32_t *)(*(int *)(PTR___malloc_av__00083d90 + 8) + 4) = new_av_size | 1;\n        *(int *)PTR___malloc_current_mallinfo_00083d94 = sbrk_result2 - base_result;\n      }\n    }\n  }\n  __malloc_unlock(heap);\n  return 0;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_process_00081d68",
                "param_1": "exit_code",
                "param_2": "function_pointer",
                "param_3": "arg_pointer",
                "__register_exitproc": "__register_exitproc"
            },
            "code": "void register_exit_process_00081d68(int exit_code, void* function_pointer, void* arg_pointer, void* cleanup_pointer)\n{\n  __register_exitproc(exit_code, function_pointer, arg_pointer, cleanup_pointer);\n  return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_process_00081d68"
        }
    },
    "used_tokens": 116349,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00080ce0",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_00081202",
            "FUN_00081720",
            "FUN_00081d1c",
            "FUN_00083988",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081208",
            "FUN_00081c94",
            "FUN_000810f4",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_0008143c",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_00084440",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00083994",
            "FUN_00081454",
            "FUN_00084600",
            "FUN_00081578",
            "FUN_00084728",
            "FUN_0008116a",
            "FUN_000813e0",
            "FUN_00083c40",
            "FUN_0008116e",
            "FUN_000813e4",
            "FUN_00081cbc",
            "FUN_00080aac",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000811a8",
            "FUN_000818c8",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_000810bc",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00084418",
            "FUN_00080d2e",
            "FUN_20070000",
            "FUN_000811f0",
            "FUN_00081704",
            "FUN_00083c10",
            "FUN_00081bec",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081c6c",
            "FUN_00081034",
            "FUN_000844bc",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00080e5c",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_00081c80",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00083b08",
            "FUN_000814a8",
            "FUN_00081084",
            "FUN_00084750",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_0008014c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00080d24",
            "FUN_000818b8",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081be4",
            "FUN_000815ca",
            "FUN_00081894",
            "FUN_00084248",
            "FUN_000845bc",
            "FUN_00081412",
            "FUN_000838cc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_0008112c",
            "FUN_000803d4",
            "FUN_000845d8",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00081580",
            "FUN_00084298",
            "FUN_00080ac0",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081188",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000813f6",
            "FUN_000816d4",
            "FUN_00081074",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_00080148",
            "FUN_00080ad8",
            "FUN_00084624",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000816e0",
            "FUN_00080acc",
            "FUN_000811c6",
            "FUN_00083d00",
            "FUN_00081d68"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ]
    ],
    "locked_functions": []
}