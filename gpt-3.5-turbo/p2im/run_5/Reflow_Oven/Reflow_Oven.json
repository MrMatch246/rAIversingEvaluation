{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char cVar1;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    cVar1 = *current_char;\n    current_char = next_char;\n  } while (cVar1 != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "pcVar3": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_08000190",
            "code": "\nulonglong calculate_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result1 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = temp4;\n      temp6 = input3;\n      if (shift2 == -1) {\n        result1 = input2;\n        temp6 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = temp6;\n        temp4 = result1;\n      }\n      flag2 = (temp6 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == temp4;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,temp6);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp6 = input4 - result1;\n  flag2 = temp6 != 0;\n  if (input4 < result1) {\n    temp6 = -temp6;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (flag2 && result1 <= input4) {\n    result1 = result1 + temp6;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp6) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (result1 == temp6) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      temp6 = temp6 - 1;\n    }\n  }\n  temp4 = -temp6 + 0x20;\n  if ((int)temp6 < 0x21) {\n    temp7 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp6 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (temp6 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp7 = temp5 << (-temp6 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp7 = temp7 | 2;\n    }\n    temp5 = (int)temp5 >> (temp6 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp6 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp7 == 0;\n    temp7 = -temp7;\n    temp6 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp6 = -(uint)(flag2 <= temp6) - temp2;\n  }\n  if (0xfffff < temp6) {\n    result2 = result1 - 1;\n    if (0x1fffff < temp6) {\n      result2 = temp6 & 1;\n      temp6 = temp6 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      temp7 = (uint)(carry & 1) << 0x1f | temp7 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    flag2 = 0x7fffffff < temp7;\n    if (temp7 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp6 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (temp7 & 0x80000000) != 0;\n  temp7 = temp7 << 1;\n  result2 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  temp6 = temp6 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = result1 - 2;\n  if ((temp6 & 0x100000) != 0) goto LAB_080002a0;\n  temp5 = temp4;\n  result1 = temp6;\n  if (temp6 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  shift2 = LZCOUNT(result1);\n  if (temp6 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp6 = shift2 - 0xb;\n  flag3 = SBORROW4(temp6,0x20);\n  temp4 = shift2 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)temp6 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp4 = temp6;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = result1 << (temp6 & 0xff);\n      result1 = result1 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp7 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result1 = result1 | temp5 >> (temp7 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp6 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - temp6) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - temp6);\n  if ((int)temp4 < 0x1f) {\n    shift2 = temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift2) & 0xff) | result1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_08000190",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_result_08000194",
            "code": "\nulonglong calculate_result_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int step;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift;\n  uint temp4;\n  uint temp5;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp4 = input2 << 1;\n  result1 = input4 << 1;\n  condition1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (temp4 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (result1 | input3) == 0;\n  }\n  shift = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift == -1;\n  }\n  step = (int)result1 >> 0x15;\n  if (!condition2) {\n    condition2 = step == -1;\n  }\n  if (condition2) {\n    if (shift == -1 || step == -1) {\n      result1 = input4;\n      temp4 = input3;\n      if (shift == -1) {\n        result1 = input2;\n        temp4 = input1;\n      }\n      if (shift != -1 || step != -1) {\n        input3 = temp4;\n        input4 = result1;\n      }\n      condition2 = (temp4 | result1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = result1 == input4;\n      }\n      if (!condition2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,temp4);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp4 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      result1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,input1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  result1 = result1 >> 0x15;\n  result2 = result1 - temp4;\n  condition2 = result2 != 0;\n  if (result1 < temp4) {\n    result2 = -result2;\n  }\n  temp5 = input1;\n  temp3 = input2;\n  if (condition2 && temp4 <= result1) {\n    temp4 = temp4 + result2;\n    temp5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < result2) {\n    return CONCAT44(temp3,temp5);\n  }\n  result1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition2 = temp5 != 0;\n    temp5 = -temp5;\n    result1 = -result1 - (uint)condition2;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)condition2;\n  }\n  if (temp4 == result2) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      result1 = result1 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      result2 = result2 - 1;\n    }\n  }\n  result4 = -result2 + 0x20;\n  if ((int)result2 < 0x21) {\n    result3 = input3 << (result4 & 0xff);\n    input3 = input3 >> (result2 & 0xff);\n    temp1 = temp5 + input3;\n    temp2 = temp3 << (result4 & 0xff);\n    result4 = temp1 + temp2;\n    result1 = result1 + CARRY4(temp5,input3) + ((int)temp3 >> (result2 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    result3 = temp3 << (-result2 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result3 = result3 | 2;\n    }\n    temp3 = (int)temp3 >> (result2 - 0x20 & 0xff);\n    result4 = temp5 + temp3;\n    result1 = result1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  input2 = result1 & 0x80000000;\n  result2 = result1;\n  if ((int)result1 < 0) {\n    condition2 = result3 == 0;\n    result3 = -result3;\n    result2 = -result4;\n    result4 = -(uint)!condition2 - result4;\n    result2 = -(uint)(condition2 <= result2) - result1;\n  }\n  if (0xfffff < result2) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < result2) {\n      result1 = result2 & 1;\n      result2 = result2 >> 1;\n      carry = (byte)result4;\n      result4 = (uint)(result1 != 0) << 0x1f | result4 >> 1;\n      result3 = (uint)(carry & 1) << 0x1f | result3 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition2 = 0x7fffffff < result3;\n    if (result3 == 0x80000000) {\n      condition2 = (result4 & 1) != 0;\n    }\n    return CONCAT44(result2 + temp5 * 0x100000 + (uint)CARRY4(result4,(uint)condition2) | input2,\n                    result4 + condition2);\n  }\n  condition1 = (result3 & 0x80000000) != 0;\n  result3 = result3 << 1;\n  temp5 = result4 * 2;\n  condition2 = CARRY4(result4,result4);\n  result4 = result4 * 2 + (uint)condition1;\n  result2 = result2 * 2 + (uint)(condition2 || CARRY4(temp5,(uint)condition1));\n  temp5 = temp4 - 2;\n  if ((result2 & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = result4;\n  temp4 = result2;\n  if (result2 == 0) {\n    temp3 = 0;\n    temp4 = result4;\n  }\n  shift = LZCOUNT(temp4);\n  if (result2 == 0) {\n    shift = shift + 0x20;\n  }\n  result4 = shift - 0xb;\n  condition3 = SBORROW4(result4,0x20);\n  result2 = shift - 0x2b;\n  condition2 = (int)result2 < 0;\n  condition1 = result2 == 0;\n  if ((int)result4 < 0x20) {\n    condition3 = SCARRY4(result2,0xc);\n    shift = shift + -0x1f;\n    condition2 = shift < 0;\n    condition1 = shift == 0;\n    result2 = result4;\n    if (!condition1 && condition2 == condition3) {\n      temp3 = temp4 << (result4 & 0xff);\n      temp4 = temp4 >> (0xcU - shift & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    result3 = 0x20 - result2;\n  }\n  temp4 = temp4 << (result2 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp4 = temp4 | temp3 >> (result3 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 << (result2 & 0xff);\n  }\nLAB_08000318:\n  if ((int)result4 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - result4) * 0x100000 | input2,temp3);\n  }\n  result2 = ~(temp5 - result4);\n  if ((int)result2 < 0x1f) {\n    shift = result2 - 0x13;\n    if (shift != 0 && shift < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,temp3 >> (0x20 - (0xcU - shift) & 0xff) | temp4 << (0xcU - shift & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(input2 | temp4 >> (result2 & 0xff),\n                    temp3 >> (result2 & 0xff) | temp4 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,temp4 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_result_08000194",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "step",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "shift_and_concat_0800040c",
            "code": "\nulonglong shiftAndConcat_0800040c(uint input)\n\n{\n  uint upperBits;\n  uint lowerBits;\n  int bitCount;\n  uint shiftAmount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  upperBits = 0;\n  bitCount = LZCOUNT(input);\n  shiftAmount = bitCount + 0x15;\n  isCarry = SBORROW4(shiftAmount,0x20);\n  lowerBits = bitCount - 0xb;\n  isNegative = (int)lowerBits < 0;\n  isZero = lowerBits == 0;\n  if (shiftAmount < 0x20) {\n    isCarry = SCARRY4(lowerBits,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    lowerBits = shiftAmount;\n    if (!isZero && isCarry == false) {\n      upperBits = input << shiftAmount;\n      input = input >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingBits = 0x20 - lowerBits;\n  }\n  input = input << (lowerBits & 0xff);\n  if (isZero || isNegative != isCarry) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    upperBits = 0 << (lowerBits & 0xff);\n  }\nLAB_08000318:\n  if (shiftAmount < 0x433) {\n    return CONCAT44(input + (0x432 - shiftAmount) * 0x100000,upperBits);\n  }\n  lowerBits = ~(0x432 - shiftAmount);\n  if (0x1e < (int)lowerBits) {\n    return (ulonglong)(input >> (lowerBits - 0x1f & 0xff));\n  }\n  bitCount = lowerBits - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(lowerBits - 0x1f,0xc)) {\n    lowerBits = lowerBits + 1;\n    return CONCAT44(input >> (lowerBits & 0xff),\n                    upperBits >> (lowerBits & 0xff) | input << (0x20 - lowerBits & 0xff));\n  }\n  return (ulonglong)(upperBits >> (0x20 - (0xcU - bitCount) & 0xff) | input << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "shift_and_concat_0800040c",
                "param_1": "input",
                "uVar1": "upperBits",
                "uVar2": "lowerBits",
                "iVar3": "bitCount",
                "uVar4": "shiftAmount",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isCarry"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "bitwise_shift_0800042c",
            "code": "\nulonglong bitwiseShift_0800042c(uint input)\n\n{\n  uint output1;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint adjustedShift;\n  uint signBit;\n  uint remainingBits;\n  bool negativeShift;\n  bool zeroShift;\n  bool carryFlag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  output1 = 0;\n  leadingZeros = LZCOUNT(absInput);\n  adjustedShift = leadingZeros + 0x15;\n  carryFlag = SBORROW4(adjustedShift,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  negativeShift = (int)shiftAmount < 0;\n  zeroShift = shiftAmount == 0;\n  if (adjustedShift < 0x20) {\n    carryFlag = SCARRY4(shiftAmount,0xc);\n    negativeShift = false;\n    zeroShift = leadingZeros + 1 == 0;\n    shiftAmount = adjustedShift;\n    if (!zeroShift && carryFlag == false) {\n      output1 = absInput << adjustedShift;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (zeroShift || negativeShift != carryFlag) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (zeroShift || negativeShift != carryFlag) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (zeroShift || negativeShift != carryFlag) {\n    output1 = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (adjustedShift < 0x433) {\n    return CONCAT44(absInput + (0x432 - adjustedShift) * 0x100000 | signBit,output1);\n  }\n  shiftAmount = ~(0x432 - adjustedShift);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    output1 >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,output1 >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "bitwise_shift_0800042c",
                "param_1": "input",
                "uVar1": "output1",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "adjustedShift",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "negativeShift",
                "bVar8": "zeroShift",
                "bVar9": "carryFlag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_unsigned_division_080004f8",
            "code": "\nulonglong calculateUnsignedDivision_080004f8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong multiplicationResult;\n  uint shiftedParam3;\n  uint shiftedParam4;\n  int sum;\n  uint temp1;\n  uint shiftedParam4_2;\n  uint temp2;\n  uint result2;\n  bool isZero;\n  bool condition1;\n  bool condition2;\n  ulonglong concatenatedParams;\n  \n  concatenatedParams = CONCAT44(input2,input1);\n  temp2 = 0x7ff;\n  shiftedParam4 = input2 >> 0x14 & 0x7ff;\n  isZero = shiftedParam4 == 0;\n  if (!isZero) {\n    shiftedParam4_2 = input4 >> 0x14 & 0x7ff;\n    isZero = shiftedParam4_2 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedParam4 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = shiftedParam4_2 == 0x7ff;\n  }\n  if (isZero) {\n    concatenatedParams = calculate_bitwise_operations_080006d4();\n  }\n  shiftedParam3 = (uint)(concatenatedParams >> 0x20);\n  sum = shiftedParam4 + shiftedParam4_2;\n  shiftedParam4 = shiftedParam3 ^ input4;\n  shiftedParam3 = shiftedParam3 & ~(temp2 << 0x15);\n  input4 = input4 & ~(temp2 << 0x15);\n  isZero = ((uint)concatenatedParams | shiftedParam3 << 0xc) == 0;\n  if (!isZero) {\n    isZero = (input3 | input4 << 0xc) == 0;\n  }\n  shiftedParam3 = shiftedParam3 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (isZero) {\n    input3 = (uint)concatenatedParams | input3;\n    input4 = (shiftedParam4 & 0x80000000 | shiftedParam3) ^ input4;\n    shiftedParam4 = temp2 >> 1;\n    condition2 = SBORROW4(sum,shiftedParam4);\n    temp1 = sum - shiftedParam4;\n    isZero = temp1 == 0;\n    shiftedParam3 = temp1;\n    if (!isZero && (int)shiftedParam4 <= sum) {\n      condition2 = SBORROW4(temp2,temp1);\n      shiftedParam3 = temp2 - temp1;\n      isZero = temp2 == temp1;\n    }\n    if (!isZero && (int)shiftedParam3 < 0 == condition2) {\n      input4 = input4 | temp1 * 0x100000;\n    }\n    if (!isZero && (int)shiftedParam3 < 0 == condition2) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp2 = 0;\n    condition2 = SBORROW4(temp1,1);\n    temp1 = temp1 - 1;\n    isZero = temp1 == 0;\n    shiftedParam4 = temp1;\n  }\n  else {\n    result1 = (concatenatedParams & 0xffffffff) * (ulonglong)input3;\n    concatenatedParams = (concatenatedParams & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)shiftedParam3 * (ulonglong)input3 + (result1 >> 0x20);\n    result2 = (uint)concatenatedParams;\n    multiplicationResult = (ulonglong)shiftedParam3 * (ulonglong)input4 + (concatenatedParams >> 0x20);\n    temp2 = (uint)multiplicationResult;\n    shiftedParam3 = (uint)((ulonglong)multiplicationResult >> 0x20);\n    if ((int)result1 != 0) {\n      result2 = result2 | 1;\n    }\n    temp1 = (sum + -0x3ff) - (uint)(shiftedParam3 < 0x200);\n    if (shiftedParam3 < 0x200) {\n      isZero = (result2 & 0x80000000) != 0;\n      result2 = result2 << 1;\n      multiplicationResult = CONCAT44(shiftedParam3 * 2 + (uint)(CARRY4(temp2,temp2) || CARRY4(temp2 * 2,(uint)isZero)),\n                       temp2 * 2 + (uint)isZero);\n    }\n    input4 = shiftedParam4 & 0x80000000 | (int)((ulonglong)multiplicationResult >> 0x20) << 0xb | (uint)multiplicationResult >> 0x15;\n    input3 = (uint)multiplicationResult << 0xb | result2 >> 0x15;\n    temp2 = result2 * 0x800;\n    condition1 = 0xfc < temp1;\n    condition2 = SBORROW4(temp1,0xfd);\n    shiftedParam3 = temp1 - 0xfd;\n    isZero = shiftedParam3 == 0;\n    shiftedParam4 = shiftedParam3;\n    if (condition1 && !isZero) {\n      condition1 = 0x6ff < shiftedParam3;\n      condition2 = SBORROW4(shiftedParam3,0x700);\n      shiftedParam4 = temp1 - 0x7fd;\n      isZero = shiftedParam3 == 0x700;\n    }\n    if (!condition1 || isZero) {\n      isZero = 0x7fffffff < temp2;\n      if (temp2 == 0x80000000) {\n        isZero = (result2 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp1 * 0x100000 + (uint)CARRY4(input3,(uint)isZero),input3 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)shiftedParam4 < 0 == condition2) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition1 = SCARRY4(temp1,0x36);\n  isZero = (int)(temp1 + 0x36) < 0;\n  condition2 = temp1 == 0xffffffca;\n  if (condition2 || isZero != condition1) {\n    input3 = 0;\n  }\n  if (condition2 || isZero != condition1) {\n    input4 = input4 & 0x80000000;\n  }\n  if (condition2 || isZero != condition1) {\n    return CONCAT44(input4,input3);\n  }\n  shiftedParam4 = -temp1;\n  shiftedParam3 = shiftedParam4 - 0x20;\n  if (0x1f < (int)shiftedParam4) {\n    temp1 = input3 >> (shiftedParam3 & 0xff) | input4 << (0x20 - shiftedParam3 & 0xff);\n    shiftedParam4 = (input4 >> (shiftedParam3 & 0xff) & ~((input4 & 0x80000000) >> (shiftedParam3 & 0xff))) -\n            ((int)temp1 >> 0x1f);\n    if ((temp2 | input3 << (0x20 - shiftedParam3 & 0xff) | temp1 << 1) == 0) {\n      shiftedParam4 = shiftedParam4 & ~(temp1 >> 0x1f);\n    }\n    return CONCAT44(input4,shiftedParam4) & 0x80000000ffffffff;\n  }\n  sum = shiftedParam4 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(shiftedParam3,0xc)) {\n    result2 = input3 << (temp1 + 0x20 & 0xff);\n    shiftedParam3 = input3 >> (shiftedParam4 & 0xff) | input4 << (temp1 + 0x20 & 0xff);\n    temp1 = shiftedParam3 + -((int)result2 >> 0x1f);\n    if ((temp2 | result2 << 1) == 0) {\n      temp1 = temp1 & ~(result2 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (shiftedParam4 & 0xff)) +\n                    (uint)CARRY4(shiftedParam3,-((int)result2 >> 0x1f)),temp1);\n  }\n  shiftedParam4 = 0xc - sum;\n  temp1 = input3 << (shiftedParam4 & 0xff);\n  shiftedParam4 = input3 >> (0x20 - shiftedParam4 & 0xff) | input4 << (shiftedParam4 & 0xff);\n  shiftedParam3 = shiftedParam4 + -((int)temp1 >> 0x1f);\n  if ((temp2 | temp1 << 1) == 0) {\n    shiftedParam3 = shiftedParam3 & ~(temp1 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(shiftedParam4,-((int)temp1 >> 0x1f)),shiftedParam3);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_unsigned_division_080004f8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "multiplicationResult",
                "uVar3": "shiftedParam3",
                "uVar4": "shiftedParam4",
                "iVar5": "sum",
                "uVar6": "temp1",
                "unaff_r5": "shiftedParam4_2",
                "uVar7": "temp2",
                "uVar8": "result2",
                "bVar9": "isZero",
                "bVar10": "condition1",
                "bVar11": "condition2",
                "uVar12": "concatenatedParams"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_bitwise_operations_080006d4",
            "code": "\nulonglong calculate_bitwise_operations_080006d4(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint temp1;\n  uint input_param5;\n  uint temp2;\n  uint temp3;\n  uint masked_input;\n  bool is_zero;\n  \n  temp2 = masked_input & input_param4 >> 0x14;\n  if (input_param5 != masked_input && temp2 != masked_input) {\n    is_zero = (input_param1 | input_param2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_param3 | input_param4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_param2 ^ input_param4) & 0x80000000) << 0x20;\n    }\n    if (input_param5 == 0) {\n      temp3 = input_param2 & 0x80000000;\n      do {\n        temp1 = input_param1 & 0x80000000;\n        input_param1 = input_param1 << 1;\n        input_param2 = input_param2 * 2 + (uint)(temp1 != 0);\n      } while ((input_param2 & 0x100000) == 0);\n      input_param2 = input_param2 | temp3;\n      if (temp2 != 0) {\n        return CONCAT44(input_param2,input_param1);\n      }\n    }\n    do {\n      temp2 = input_param3 & 0x80000000;\n      input_param3 = input_param3 << 1;\n      input_param4 = input_param4 * 2 + (uint)(temp2 != 0);\n    } while ((input_param4 & 0x100000) == 0);\n    return CONCAT44(input_param2,input_param1);\n  }\n  is_zero = (input_param1 | input_param2 << 1) == 0;\n  if (is_zero) {\n    input_param2 = input_param4;\n    input_param1 = input_param3;\n  }\n  if (!is_zero) {\n    is_zero = (input_param3 | input_param4 << 1) == 0;\n  }\n  temp3 = input_param2;\n  if (((!is_zero) && ((input_param5 != masked_input || ((input_param1 | input_param2 << 0xc) == 0)))) &&\n     ((temp2 != masked_input || (input_param1 = input_param3, temp3 = input_param4, (input_param3 | input_param4 << 0xc) == 0)))) {\n    return (ulonglong)((input_param2 ^ input_param4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3,input_param1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_bitwise_operations_080006d4",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp1",
                "unaff_r4": "input_param5",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "in_r12": "masked_input",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "convert_floating_point_to_decimal_0800074c",
            "code": "\nulonglong convertFloatingPointToDecimal_0800074c(undefined4 flags,uint lowBits,uint highBits,uint sign)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint exponent1;\n  uint exponent2;\n  uint normalizedBits1;\n  uint normalizedBits2;\n  uint fractionalBitsDifference;\n  uint carry;\n  bool conditionFlag1;\n  bool conditionFlag2;\n  bool overflowFlag;\n  undefined8 temp17;\n  \n  temp17 = CONCAT44(lowBits,flags);\n  carry = 0x7ff;\n  temp7 = lowBits >> 0x14 & 0x7ff;\n  conditionFlag1 = temp7 == 0;\n  if (!conditionFlag1) {\n    exponent2 = sign >> 0x14 & 0x7ff;\n    conditionFlag1 = exponent2 == 0;\n  }\n  if (!conditionFlag1) {\n    conditionFlag1 = temp7 == 0x7ff;\n  }\n  if (!conditionFlag1) {\n    conditionFlag1 = exponent2 == 0x7ff;\n  }\n  if (conditionFlag1) {\n    temp17 = floating_point_conversion_080008ba();\n  }\n  exponent1 = (uint)((ulonglong)temp17 >> 0x20);\n  normalizedBits2 = (uint)temp17;\n  difference = temp7 - exponent2;\n  if ((highBits | sign << 0xc) == 0) {\n    temp7 = (exponent1 ^ sign) & 0x80000000 | exponent1 & 0xfffff;\n    overflowFlag = SCARRY4(difference,carry >> 1);\n    exponent1 = difference + (carry >> 1);\n    conditionFlag1 = (int)exponent1 < 0;\n    conditionFlag2 = exponent1 == 0;\n    if (!conditionFlag2 && conditionFlag1 == overflowFlag) {\n      overflowFlag = SBORROW4(carry,exponent1);\n      conditionFlag1 = (int)(carry - exponent1) < 0;\n      conditionFlag2 = carry == exponent1;\n    }\n    if (!conditionFlag2 && conditionFlag1 == overflowFlag) {\n      temp7 = temp7 | exponent1 * 0x100000;\n    }\n    if (!conditionFlag2 && conditionFlag1 == overflowFlag) {\n      return CONCAT44(temp7,normalizedBits2);\n    }\n    temp7 = temp7 | 0x100000;\n    carry = 0;\n    conditionFlag2 = SBORROW4(exponent1,1);\n    exponent1 = exponent1 - 1;\n    conditionFlag1 = exponent1 == 0;\n    temp3 = exponent1;\n  }\n  else {\n    temp3 = (sign << 0xc) >> 4 | 0x10000000 | highBits >> 0x18;\n    carry = highBits << 8;\n    normalizedBits1 = (exponent1 << 0xc) >> 4 | 0x10000000 | normalizedBits2 >> 0x18;\n    normalizedBits2 = normalizedBits2 * 0x100;\n    temp7 = (exponent1 ^ sign) & 0x80000000;\n    conditionFlag1 = temp3 <= normalizedBits1;\n    if (normalizedBits1 == temp3) {\n      conditionFlag1 = carry <= normalizedBits2;\n    }\n    difference = difference + (uint)conditionFlag1;\n    exponent1 = difference + 0x3fd;\n    if (conditionFlag1 == false) {\n      temp3 = temp3 >> 1;\n      carry = (uint)((highBits >> 0x18 & 1) != 0) << 0x1f | carry >> 1;\n    }\n    fractionalBitsDifference = normalizedBits2 - carry;\n    normalizedBits1 = (normalizedBits1 - temp3) - (uint)(normalizedBits2 < carry);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | carry >> 1;\n    normalizedBits2 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      conditionFlag1 = temp1 <= fractionalBitsDifference;\n      if (temp4 < normalizedBits1 || normalizedBits1 - temp4 < (uint)conditionFlag1) {\n        fractionalBitsDifference = fractionalBitsDifference - temp1;\n        normalizedBits2 = normalizedBits2 | temp3;\n        normalizedBits1 = (normalizedBits1 - temp4) - (uint)!conditionFlag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      conditionFlag2 = temp1 <= fractionalBitsDifference;\n      conditionFlag1 = normalizedBits1 - temp5 < (uint)conditionFlag2;\n      carry = normalizedBits1;\n      if (temp5 < normalizedBits1 || conditionFlag1) {\n        fractionalBitsDifference = fractionalBitsDifference - temp1;\n        carry = (normalizedBits1 - temp5) - (uint)!conditionFlag2;\n      }\n      if (temp5 < normalizedBits1 || conditionFlag1) {\n        normalizedBits2 = normalizedBits2 | temp3 >> 1;\n      }\n      normalizedBits1 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      conditionFlag2 = temp2 <= fractionalBitsDifference;\n      conditionFlag1 = carry - normalizedBits1 < (uint)conditionFlag2;\n      temp5 = carry;\n      if (normalizedBits1 < carry || conditionFlag1) {\n        fractionalBitsDifference = fractionalBitsDifference - temp2;\n        temp5 = (carry - normalizedBits1) - (uint)!conditionFlag2;\n      }\n      if (normalizedBits1 < carry || conditionFlag1) {\n        normalizedBits2 = normalizedBits2 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((normalizedBits1 & 1) != 0) << 0x1f | temp2 >> 1;\n      conditionFlag2 = temp1 <= fractionalBitsDifference;\n      conditionFlag1 = temp5 - temp6 < (uint)conditionFlag2;\n      normalizedBits1 = temp5;\n      if (temp6 < temp5 || conditionFlag1) {\n        fractionalBitsDifference = fractionalBitsDifference - temp1;\n        normalizedBits1 = (temp5 - temp6) - (uint)!conditionFlag2;\n      }\n      if (temp6 < temp5 || conditionFlag1) {\n        normalizedBits2 = normalizedBits2 | temp3 >> 3;\n      }\n      carry = normalizedBits1 | fractionalBitsDifference;\n      if (carry == 0) break;\n      normalizedBits1 = normalizedBits1 << 4 | fractionalBitsDifference >> 0x1c;\n      fractionalBitsDifference = fractionalBitsDifference << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | normalizedBits2;\n        normalizedBits2 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | normalizedBits2;\n      normalizedBits2 = 0;\n    }\nLAB_0800086a:\n    overflowFlag = 0xfc < exponent1;\n    conditionFlag2 = SBORROW4(exponent1,0xfd);\n    temp4 = difference + 0x300;\n    conditionFlag1 = temp4 == 0;\n    temp3 = temp4;\n    if (overflowFlag && !conditionFlag1) {\n      overflowFlag = 0x6ff < temp4;\n      conditionFlag2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      conditionFlag1 = temp4 == 0x700;\n    }\n    if (!overflowFlag || conditionFlag1) {\n      conditionFlag1 = temp6 <= normalizedBits1;\n      if (normalizedBits1 == temp6) {\n        conditionFlag1 = temp1 <= fractionalBitsDifference;\n      }\n      if (normalizedBits1 == temp6 && fractionalBitsDifference == temp1) {\n        conditionFlag1 = (normalizedBits2 & 1) != 0;\n      }\n      return CONCAT44(temp7 + exponent1 * 0x100000 + (uint)CARRY4(normalizedBits2,(uint)conditionFlag1),normalizedBits2 + conditionFlag1);\n    }\n  }\n  if (!conditionFlag1 && (int)temp3 < 0 == conditionFlag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflowFlag = SCARRY4(exponent1,0x36);\n  conditionFlag1 = (int)(exponent1 + 0x36) < 0;\n  conditionFlag2 = exponent1 == 0xffffffca;\n  if (conditionFlag2 || conditionFlag1 != overflowFlag) {\n    normalizedBits2 = 0;\n  }\n  if (conditionFlag2 || conditionFlag1 != overflowFlag) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (conditionFlag2 || conditionFlag1 != overflowFlag) {\n    return CONCAT44(temp7,normalizedBits2);\n  }\n  temp3 = -exponent1;\n  normalizedBits1 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = normalizedBits2 >> (normalizedBits1 & 0xff) | temp7 << (0x20 - normalizedBits1 & 0xff);\n    exponent1 = (temp7 >> (normalizedBits1 & 0xff) & ~((temp7 & 0x80000000) >> (normalizedBits1 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((carry | normalizedBits2 << (0x20 - normalizedBits1 & 0xff) | temp3 << 1) == 0) {\n      exponent1 = exponent1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,exponent1) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(normalizedBits1,0xc)) {\n    exponent1 = 0xc - difference;\n    temp3 = normalizedBits2 << (exponent1 & 0xff);\n    normalizedBits2 = normalizedBits2 >> (0x20 - exponent1 & 0xff) | temp7 << (exponent1 & 0xff);\n    exponent1 = normalizedBits2 + -((int)temp3 >> 0x1f);\n    if ((carry | temp3 << 1) == 0) {\n      exponent1 = exponent1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(normalizedBits2,-((int)temp3 >> 0x1f)),exponent1);\n  }\n  normalizedBits1 = normalizedBits2 << (exponent1 + 0x20 & 0xff);\n  normalizedBits2 = normalizedBits2 >> (temp3 & 0xff) | temp7 << (exponent1 + 0x20 & 0xff);\n  exponent1 = normalizedBits2 + -((int)normalizedBits1 >> 0x1f);\n  if ((carry | normalizedBits1 << 1) == 0) {\n    exponent1 = exponent1 & ~(normalizedBits1 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(normalizedBits2,-((int)normalizedBits1 >> 0x1f)),exponent1);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "convert_floating_point_to_decimal_0800074c",
                "param_1": "flags",
                "param_2": "lowBits",
                "param_3": "highBits",
                "param_4": "sign",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "difference",
                "uVar9": "exponent1",
                "unaff_r5": "exponent2",
                "uVar10": "normalizedBits1",
                "uVar11": "normalizedBits2",
                "uVar12": "fractionalBitsDifference",
                "uVar13": "carry",
                "bVar14": "conditionFlag1",
                "bVar15": "conditionFlag2",
                "bVar16": "overflowFlag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "floating_point_conversion_080008ba",
            "code": "\nulonglong floatingPointConversion_080008ba(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint bit1;\n  uint num5;\n  uint bit2;\n  uint bit3;\n  uint constant;\n  bool isZero;\n  \n  bit2 = constant & num4 >> 0x14;\n  bit3 = num2;\n  if (num5 != constant || bit2 != constant) {\n    if (num5 == constant) {\n      if (((num1 | num2 << 0xc) == 0) && (num1 = num3, bit3 = num4, bit2 != constant)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      num1 = num3;\n      bit3 = num4;\n      if ((num3 | num4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (num1 | num2 << 1) == 0;\n      if (!isZero) {\n        isZero = (num3 | num4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (num5 == 0) {\n          bit3 = num2 & 0x80000000;\n          do {\n            bit1 = num1 & 0x80000000;\n            num1 = num1 << 1;\n            num2 = num2 * 2 + (uint)(bit1 != 0);\n          } while ((num2 & 0x100000) == 0);\n          num2 = num2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(num2,num1);\n          }\n        }\n        do {\n          bit3 = num3 & 0x80000000;\n          num3 = num3 << 1;\n          num4 = num4 * 2 + (uint)(bit3 != 0);\n        } while ((num4 & 0x100000) == 0);\n        return CONCAT44(num2,num1);\n      }\n      if ((num1 | num2 << 1) != 0) goto LAB_0800072c;\n      if ((num3 | num4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(bit3,num1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "floating_point_conversion_080008ba",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "bit1",
                "unaff_r4": "num5",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "constant",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_parameters_0800092c",
            "code": "\nuint check_parameters_0800092c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (param_1 | param_2 << 1) == 0;\n  if (isZero) {\n    isZero = (param_3 | param_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = param_2 == param_4;\n  }\n  if (isZero) {\n    isZero = param_1 == param_3;\n  }\n  if (!isZero) {\n    result = param_2 ^ param_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = param_2 == param_4;\n    }\n    isNegative = -1 < (int)result && param_4 <= param_2;\n    if (isZero) {\n      isNegative = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!isNegative) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "validate_and_return_080009a8",
            "code": "\nvoid validate_and_return_080009a8(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  validate_and_return_080009a8_param_080009b8(param_3,param_4,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "validate_and_return_080009a8",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "validate_and_return_param_080009b8",
            "code": "\nundefined4 validate_and_return_param_080009b8(undefined4 input_param)\n\n{\n  validate_input_parameters();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "validate_and_return_param_080009b8",
                "param_1": "input_param",
                "check_parameters_0800092c": "validate_input_parameters"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_param_and_return_080009c8",
            "code": "\nbool check_param_and_return_080009c8(void)\n\n{\n  char input_char;\n  \n  validate_and_return_param_080009b8();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_param_and_return_080009c8",
                "in_ZR": "input_char"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_null_terminated_string_080009dc",
            "code": "\nbool is_null_terminated_string_080009dc(void)\n\n{\n  char input_char;\n  \n  validate_and_return_param_080009b8();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_null_terminated_string_080009dc",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "validate_and_return_param_080009f0",
            "code": "\nbool validate_and_return_param_080009f0(void)\n\n{\n  undefined is_zero_return;\n  undefined is_carry;\n  \n  validate_and_return_param_080009f0_080009b8();\n  return !(bool)is_carry || (bool)is_zero_return;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "validate_and_return_param_080009f0",
                "in_ZR": "is_zero_return",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "validate_and_return_08000a04",
            "code": "\nbool validate_and_return_08000a04(void)\n\n{\n  undefined zero_result_flag;\n  undefined carry_flag;\n  \n  validate_and_return_08000a04_080009a8();\n  return !(bool)carry_flag || (bool)zero_result_flag;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "validate_and_return_08000a04",
                "in_ZR": "zero_result_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "check_if_input_is_empty_08000a18",
            "code": "\nbool check_if_input_is_empty_08000a18(void)\n\n{\n  char input_character;\n  \n  validate_and_return_080009a8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "check_if_input_is_empty_08000a18",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_parameters_08000a2c",
            "code": "\nundefined4 check_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "convert_param_to_string_08000a58",
            "code": "\nuint convertParamToString_08000a58(uint inputParam1,uint inputParam2)\n\n{\n  uint updatedVar1;\n  int updatedVar2;\n  uint updatedVar3;\n  \n  updatedVar2 = inputParam2 * 2 + 0x200000;\n  if (inputParam2 * 2 < 0xffe00000) {\n    if (-1 < updatedVar2) {\n      return 0;\n    }\n    updatedVar1 = updatedVar2 >> 0x15;\n    updatedVar3 = -updatedVar1 - 0x3e1;\n    if (updatedVar1 < 0xfffffc20 && updatedVar3 != 0) {\n      updatedVar1 = (inputParam2 << 0xb | 0x80000000 | inputParam1 >> 0x15) >> (updatedVar3 & 0xff);\n      if ((inputParam2 & 0x80000000) != 0) {\n        updatedVar1 = -updatedVar1;\n      }\n      return updatedVar1;\n    }\n  }\n  else if ((inputParam1 | inputParam2 << 0xc) != 0) {\n    return 0;\n  }\n  inputParam2 = inputParam2 & 0x80000000;\n  if (inputParam2 == 0) {\n    inputParam2 = 0x7fffffff;\n  }\n  return inputParam2;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "convert_param_to_string_08000a58",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "updatedVar1",
                "iVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_shift_08000aa8",
            "code": "\nuint calculateShift_08000aa8(uint inputValue,uint shiftAmount)\n\n{\n  int shiftedValue;\n  uint bitsToShift;\n  \n  if ((shiftAmount & 0x80000000) != 0) {\n    return 0;\n  }\n  shiftedValue = shiftAmount * 2 + 0x200000;\n  if (shiftAmount * 2 < 0xffe00000) {\n    if (-1 < shiftedValue) {\n      return 0;\n    }\n    bitsToShift = -(shiftedValue >> 0x15) - 0x3e1;\n    if (-1 < (int)bitsToShift) {\n      return (shiftAmount << 0xb | 0x80000000 | inputValue >> 0x15) >> (bitsToShift & 0xff);\n    }\n  }\n  else if ((inputValue | shiftAmount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_shift_08000aa8",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "iVar1": "shiftedValue",
                "uVar2": "bitsToShift"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_system_call_08000ae8",
            "code": "\nvoid executeSystemCall_08000ae8(void)\n\n{\n  executeInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_system_call_08000ae8",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_system_call_08000aec",
            "code": "\nundefined4 execute_system_call_08000aec(undefined4 arg_1,undefined4 arg_2,undefined4 arg_3,undefined4 arg_4)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = execute_system_call_08000aec_08000ae8(1,arg_1,0,0,arg_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_system_call_08000aec",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "process_data_and_update_params_08000b08",
            "code": "\nvoid processDataAndUpdateParams_08000b08(int inputOne,int inputTwo)\n\n{\n  if ((inputOne == 1) && (inputTwo == 0xffff)) {\n    process_data_and_update_params_08001b18(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initializeDataProcessing(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    updateDataAndProcess(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "process_data_and_update_params_08000b08",
                "param_1": "inputOne",
                "param_2": "inputTwo",
                "initialize_data_processing_08001510": "initializeDataProcessing",
                "update_data_and_process_0800157c": "updateDataAndProcess"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_and_execute_08000bcc",
            "code": "\nvoid initialize_and_execute_08000bcc(void)\n\n{\n  processData(DAT_20000064,0);\n  processAndUpdateData(DAT_20000064,1);\n  processData(DAT_20000004,0);\n  processAndUpdateData(DAT_20000004,1);\n  processData(DAT_20000060,0);\n  processAndUpdateData(DAT_20000060,1);\n  processData(DAT_20000004,1);\n  processData(&DAT_20000194,8,2,0);\n  processData(&DAT_20000194,0,&DAT_20000008);\n  processAndLoopData(&DAT_20000194);\n  findEndOfStringAndInvoke(&DAT_20000194,\"Reflow\");\n  processData(&DAT_20000194,0,1);\n  findEndOfStringAndInvoke(&DAT_20000194,\"Oven 1.2\");\n  processData(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  processAndLoopData(&DAT_20000194);\n  configureSerialPort(&DAT_2000036c,0xe100,6);\n  processData(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initializeMemory();\n  DAT_200001b4 = initializeMemory();\n  executeSystemCall(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_and_execute_08000bcc",
                "process_data_08005848": "processData",
                "process_and_update_data_080057b4": "processAndUpdateData",
                "process_data_080013a4": "processData",
                "process_data_08001550": "processData",
                "process_and_loop_data_0800135a": "processAndLoopData",
                "find_end_of_string_and_invoke_08005c96": "findEndOfStringAndInvoke",
                "process_data_08001366": "processData",
                "configure_serial_port_08005a68": "configureSerialPort",
                "initialize_memory_080058e0": "initializeMemory",
                "execute_system_call_08000aec": "executeSystemCall"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid processData_08000cd0(void)\n\n{\n  uint initializedMemory;\n  undefined4 result1;\n  int returnValue;\n  undefined4 result2;\n  undefined4 extraOutput1;\n  undefined4 extraOutput2;\n  undefined4 extraOutput3;\n  undefined8 result3;\n  \n  initializedMemory = initialize_memory_080058e0();\n  if (DAT_200001b4 < initializedMemory) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    result3 = calculate_result_for_bitmask_080015f8(&DAT_2000024c,0);\n    result2 = (undefined4)((ulonglong)result3 >> 0x20);\n    result1 = (undefined4)result3;\n    DAT_20000188 = result1;\n    DAT_2000018c = result2;\n    returnValue = check_param_and_return_080009c8(result1,result2,0,0x40c38800);\n    if (((returnValue != 0) || (returnValue = check_param_and_return_080009c8(result1,result2,0,0x40c38880), returnValue != 0)) ||\n       (returnValue = check_param_and_return_080009c8(result1,result2,0,0x40c38900), returnValue != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  initializedMemory = initialize_memory_080058e0();\n  result1 = DAT_20000060;\n  if (DAT_200001b0 < initializedMemory) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      returnValue = check_bitmask_validity_08005890(DAT_20000060);\n      process_data_08005848(result1,returnValue == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      convert_to_base_08005d82(&DAT_2000036c,DAT_20000250,10);\n      find_end_of_string_and_invoke_08005c96(&DAT_2000036c,&DAT_08007368);\n      validate_input_and_calculation_08005f2c(&DAT_2000036c,extraOutput1,DAT_20000240,DAT_20000244,2);\n      find_end_of_string_and_invoke_08005c96(&DAT_2000036c,&DAT_08007368);\n      validate_input_and_calculation_08005f2c(&DAT_2000036c,extraOutput2,DAT_20000188,DAT_2000018c,2);\n      find_end_of_string_and_invoke_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_combined_result_08005f40(&DAT_2000036c,extraOutput3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      process_data_08005848(DAT_20000060,1);\n    }\n    process_and_loop_data_0800135a(&DAT_20000194);\n    find_end_of_string_and_invoke_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    process_data_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      find_end_of_string_and_invoke_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      validate_input_and_calculation_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      process_and_loop_data_0800134e(&DAT_20000194,0);\n      find_end_of_string_and_invoke_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  result2 = DAT_2000018c;\n  result1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    returnValue = validate_and_return_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (returnValue == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_total_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_memory_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        result3 = bitwise_shift_0800042c(DAT_20000258);\n        validate_and_set_params_08001960(&DAT_200001c0,(int)((ulonglong)result3 >> 0x20),0,0,result3);\n        update_parameters_08001918(&DAT_200001c0,1000);\n        process_and_update_flag_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    returnValue = validate_and_return_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (returnValue != 0) {\n      result3 = initialize_memory_080058e0();\n      DAT_20000254 = (int)result3 + 9000;\n      process_data_080018f8(&DAT_200001c0,(int)((ulonglong)result3 >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    initializedMemory = initialize_memory_080058e0();\n    if (DAT_20000254 < initializedMemory) {\n      returnValue = initialize_memory_080058e0();\n      DAT_20000254 = returnValue + 9000;\n      result3 = calculate_result_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)result3 >> 0x20);\n      DAT_20000240 = (undefined4)result3;\n      result3 = check_if_input_is_empty_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)result3 != 0) {\n        process_data_080018f8(&DAT_200001c0,(int)((ulonglong)result3 >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    result3 = validate_and_return_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)result3 != 0) {\n      process_data_080018f8(&DAT_200001c0,(int)((ulonglong)result3 >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    returnValue = validate_and_return_param_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (returnValue != 0) {\n      returnValue = initialize_memory_080058e0();\n      DAT_20000180 = returnValue + 1000;\n      process_data_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    initializedMemory = initialize_memory_080058e0();\n    if (DAT_20000180 < initializedMemory) {\n      process_data_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    returnValue = is_null_terminated_string_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (returnValue != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    returnValue = check_param_and_return_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((returnValue == 0) && (returnValue = check_param_and_return_080009c8(result1,result2,0,0x40c38880), returnValue == 0)) &&\n       (returnValue = check_param_and_return_080009c8(result1,result2,0,0x40c38900), returnValue == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    returnValue = process_data_08005754(DAT_20000068);\n    if (returnValue == 0) {\n      returnValue = initialize_memory_080058e0();\n      if (0x32 < (uint)(returnValue - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    returnValue = process_data_08005754(DAT_20000068);\n    if (returnValue == 0) {\n      DAT_20000190 = initialize_memory_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (returnValue = process_data_08005754(DAT_20000068), returnValue != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    returnValue = initialize_memory_080058e0();\n    process_data_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(returnValue - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    result3 = shift_and_concat_0800040c(returnValue - DAT_2000025c);\n    returnValue = is_null_terminated_string_080009dc((int)result3,(int)((ulonglong)result3 >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (returnValue == 0) {\n      process_data_08005848(DAT_20000064,0);\n    }\n    else {\n      process_data_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    process_data_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "initializedMemory",
                "uVar2": "result1",
                "iVar3": "returnValue",
                "uVar4": "result2",
                "extraout_r1": "extraOutput1",
                "extraout_r1_00": "extraOutput2",
                "extraout_r1_01": "extraOutput3",
                "uVar5": "result3"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_bytes_at_offset_08001294",
            "code": "\nvoid setBytesAtOffset_08001294(int data,undefined byte1,undefined byte2,undefined byte3,\n                 undefined byte4)\n\n{\n  *(undefined *)(data + 0x18) = byte1;\n  *(undefined *)(data + 0x19) = byte2;\n  *(undefined *)(data + 0x1a) = byte3;\n  *(undefined *)(data + 0x1b) = byte4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_bytes_at_offset_08001294",
                "param_1": "data",
                "param_2": "byte1",
                "param_3": "byte2",
                "param_4": "byte3",
                "param_5": "byte4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "process_data_multiple_times_080012a2",
            "code": "\nvoid process_data_multiple_times_080012a2(int data_address)\n\n{\n  process_data(*(undefined *)(data_address + 10),0);\n  process_data(*(undefined *)(data_address + 10),1);\n  process_data(*(undefined *)(data_address + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "process_data_multiple_times_080012a2",
                "param_1": "data_address",
                "process_data_08005848": "process_data"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "process_data_loop_080012c0",
            "code": "\nvoid process_data_loop_080012c0(int data_array,int control_byte)\n\n{\n  uint counter;\n  \n  for (counter = 0; (int)counter < 4; counter = counter + 1) {\n    process_data_08005848(*(undefined *)(data_array + counter + 0xb),control_byte >> (counter & 0xff) & 1);\n  }\n  process_data_multiple_times_080012a2(data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "process_data_loop_080012c0",
                "param_1": "data_array",
                "param_2": "control_byte",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "process_data_loop_080012e8",
            "code": "\nvoid process_data_loop_080012e8(int input_address,int bits_to_process)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < 8; iteration_count = iteration_count + 1) {\n    process_data_08005848(*(undefined *)(input_address + iteration_count + 0xb),bits_to_process >> (iteration_count & 0xff) & 1);\n  }\n  process_data_multiple_times_080012a2(input_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "process_data_loop_080012e8",
                "param_1": "input_address",
                "param_2": "bits_to_process",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "process_and_loop_data_08001310",
            "code": "\nvoid processAndLoopData_08001310(int dataPtr,uint dataSize,undefined4 param1,undefined4 param2)\n\n{\n  process_data_08005848(*(undefined *)(dataPtr + 8),param1,param1,param2,param2);\n  if (*(char *)(dataPtr + 9) != -1) {\n    process_data_08005848(*(char *)(dataPtr + 9),0);\n  }\n  if ((*(byte *)(dataPtr + 0x13) & 0x10) == 0) {\n    process_data_loop_080012c0(dataPtr,dataSize >> 4);\n    process_data_loop_080012c0(dataPtr,dataSize);\n    return;\n  }\n  process_data_loop_080012e8(dataPtr,dataSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "process_and_loop_data_08001310",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "param_3": "param1",
                "param_4": "param2"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "process_and_loop_data_0800134e",
            "code": "\nundefined4 process_and_loop_data_0800134e(undefined4 input_param,undefined4 output_param,undefined4 loop_param,undefined4 data_param)\n\n{\n  process_and_loop_data_0800134e_08001310(input_param,output_param,1,data_param,data_param);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "process_and_loop_data_0800134e",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "loop_param",
                "param_4": "data_param"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "process_and_loop_data_0800135a",
            "code": "\nvoid processAndLoopData_0800135a(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  process_and_loop_data_08001310(input1,1,0,input4,input4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "process_and_loop_data_0800135a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "process_data_08001366",
            "code": "\nvoid processData_08001366(int inputBuffer,char charToProcess,uint maxProcessCount,undefined4 additionalData)\n\n{\n  char processedChar;\n  \n  if (3 < maxProcessCount) {\n    maxProcessCount = 3;\n  }\n  if ((int)(uint)*(byte *)(inputBuffer + 0x17) <= (int)maxProcessCount) {\n    maxProcessCount = *(byte *)(inputBuffer + 0x17) - 1 & 0xff;\n  }\n  processedChar = *(char *)(maxProcessCount + inputBuffer + 0x18);\n  processAndLoopData(inputBuffer,charToProcess + processedChar | 0x80,0,processedChar,additionalData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "process_data_08001366",
                "param_1": "inputBuffer",
                "param_2": "charToProcess",
                "param_3": "maxProcessCount",
                "param_4": "additionalData",
                "cVar1": "processedChar",
                "process_and_loop_data_08001310": "processAndLoopData"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "update_data_and_process_0800138e",
            "code": "\nvoid updateDataAndProcess_0800138e(int dataAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte originalByte;\n  \n  originalByte = *(byte *)(dataAddress + 0x14);\n  *(byte *)(dataAddress + 0x14) = originalByte | 4;\n  processAndLoopData(dataAddress,originalByte | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "update_data_and_process_0800138e",
                "param_1": "dataAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "originalByte",
                "process_and_loop_data_08001310": "processAndLoopData"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "process_data_080013a4",
            "code": "\nvoid processData_080013a4(int dataPtr,int startOffset,int size,int flag)\n\n{\n  int loopCounter;\n  int index;\n  \n  if (1 < size) {\n    *(byte *)(dataPtr + 0x13) = *(byte *)(dataPtr + 0x13) | 8;\n  }\n  *(char *)(dataPtr + 0x17) = (char)size;\n  setBytesAtOffset(dataPtr,0,0x40,startOffset,startOffset + 0x40);\n  if ((flag != 0) && (size == 1)) {\n    *(byte *)(dataPtr + 0x13) = *(byte *)(dataPtr + 0x13) | 4;\n  }\n  processAndUpdateData(*(undefined *)(dataPtr + 8),1);\n  if (*(char *)(dataPtr + 9) != -1) {\n    processAndUpdateData(*(char *)(dataPtr + 9),1);\n  }\n  processAndUpdateData(*(undefined *)(dataPtr + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(dataPtr + 0x13) & 0x10) == 0) {\n      loopCounter = 4;\n    }\n    else {\n      loopCounter = 8;\n    }\n    if (loopCounter <= index) break;\n    processAndUpdateData(*(undefined *)(dataPtr + index + 0xb),1);\n    index = index + 1;\n  }\n  processData_080013a4(*(undefined *)(dataPtr + 8),0);\n  processData_080013a4(*(undefined *)(dataPtr + 10),0);\n  if (*(char *)(dataPtr + 9) != -1) {\n    processData_080013a4(*(char *)(dataPtr + 9),0);\n  }\n  if ((*(byte *)(dataPtr + 0x13) & 0x10) == 0) {\n    processData_080013a4Loop(dataPtr,3);\n    processData_080013a4Loop(dataPtr,3);\n    processData_080013a4Loop(dataPtr,3);\n    processData_080013a4Loop(dataPtr,2);\n  }\n  else {\n    processAndLoopData(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n    processAndLoopData(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n    processAndLoopData(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n  }\n  processAndLoopData(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n  *(undefined *)(dataPtr + 0x14) = 4;\n  updateDataAndProcess(dataPtr);\n  processAndLoopData(dataPtr);\n  *(undefined *)(dataPtr + 0x15) = 2;\n  processAndLoopData(dataPtr,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "process_data_080013a4",
                "param_1": "dataPtr",
                "param_2": "startOffset",
                "param_3": "size",
                "param_4": "flag",
                "iVar1": "loopCounter",
                "iVar2": "index",
                "set_bytes_at_offset_08001294": "setBytesAtOffset",
                "process_and_update_data_080057b4": "processAndUpdateData",
                "process_data_08005848": "processData",
                "process_data_loop_080012c0": "processDataLoop",
                "process_and_loop_data_08001310": "processAndLoopData",
                "update_data_and_process_0800138e": "updateDataAndProcess",
                "process_and_loop_data_0800135a": "processAndLoopData"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "set_parameters_and_process_data_080014ba",
            "code": "\nvoid setParametersAndProcessData_080014ba(int dataAddress,int flag,undefined parameter3,undefined4 parameter4,undefined parameter5,\n                 undefined parameter6,undefined parameter7,undefined parameter8,undefined parameter9,\n                 undefined parameter10,undefined parameter11,undefined parameter12,undefined parameter13)\n\n{\n  *(undefined *)(dataAddress + 8) = parameter3;\n  *(char *)(dataAddress + 9) = (char)parameter4;\n  *(undefined *)(dataAddress + 10) = parameter5;\n  *(undefined *)(dataAddress + 0xb) = parameter6;\n  *(undefined *)(dataAddress + 0xc) = parameter7;\n  *(undefined *)(dataAddress + 0xd) = parameter8;\n  *(undefined *)(dataAddress + 0xe) = parameter9;\n  *(undefined *)(dataAddress + 0xf) = parameter10;\n  *(undefined *)(dataAddress + 0x10) = parameter11;\n  *(undefined *)(dataAddress + 0x11) = parameter12;\n  *(undefined *)(dataAddress + 0x12) = parameter13;\n  if (flag == 0) {\n    *(undefined *)(dataAddress + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(dataAddress + 0x13) = 0;\n  }\n  process_data_080013a4(dataAddress,0x10,1,0,parameter4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "set_parameters_and_process_data_080014ba",
                "param_1": "dataAddress",
                "param_2": "flag",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6",
                "param_7": "parameter7",
                "param_8": "parameter8",
                "param_9": "parameter9",
                "param_10": "parameter10",
                "param_11": "parameter11",
                "param_12": "parameter12",
                "param_13": "parameter13"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_data_processing_08001510",
            "code": "\nundefined4 *\ninitializeDataProcessing_08001510(undefined4 *data,undefined4 value1,undefined4 value2,undefined4 value3,\n            undefined flag1,undefined flag2,undefined flag3)\n\n{\n  data[1] = 0;\n  *data = &PTR_process_and_loop_data_0800134e_1_080073f8;\n  set_parameters_and_process_data_080014ba(data,1,value1,0xff,value2,value3,flag1,flag2,flag3,0,0,0,0);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_data_processing_08001510",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "flag1",
                "param_6": "flag2",
                "param_7": "flag3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "process_data_08001550",
            "code": "\nvoid processData_08001550(undefined4 *dataPointer,uint size,int bufferAddress)\n\n{\n  int i;\n  \n  process_and_loop_data_08001310(dataPointer,(size & 7) << 3 | 0x40,0);\n  for (i = 0; i < 8; i = i + 1) {\n    (**(code **)*dataPointer)(dataPointer,*(undefined *)(bufferAddress + i));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "process_data_08001550",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "bufferAddress",
                "iVar1": "i"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "update_data_and_process_0800157c",
            "code": "\nundefined * updateDataAndProcess_0800157c(undefined *data,undefined4 value1,undefined value2,undefined value3)\n\n{\n  *data = (char)value1;\n  data[1] = value2;\n  data[2] = value3;\n  processAndUpdateData(value1,0);\n  processAndUpdateData(data[1],1);\n  processAndUpdateData(data[2],1);\n  processData(data[1],1);\n  processData(data[2],0);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "update_data_and_process_0800157c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "process_and_update_data_080057b4": "processAndUpdateData",
                "process_data_08005848": "processData"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "process_and_check_bitmask_080015b2",
            "code": "\nuint process_and_check_bitmask_080015b2(undefined *input_array)\n\n{\n  int bitmask_validity;\n  uint bit_index;\n  uint result;\n  \n  process_data(input_array[1],0);\n  result = 0;\n  for (bit_index = 0x1f; -1 < (int)bit_index; bit_index = bit_index - 1) {\n    process_data(input_array[2],1);\n    bitmask_validity = check_bitmask_validity(*input_array);\n    if (bitmask_validity != 0) {\n      result = result | 1 << (bit_index & 0xff);\n    }\n    process_data(input_array[2],0);\n  }\n  process_data(input_array[1],1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "process_and_check_bitmask_080015b2",
                "param_1": "input_array",
                "iVar1": "bitmask_validity",
                "uVar2": "bit_index",
                "uVar3": "result",
                "process_data_08005848": "process_data",
                "check_bitmask_validity_08005890": "check_bitmask_validity"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_result_for_bitmask_080015f8",
            "code": "\nundefined8 calculate_result_for_bitmask_080015f8(undefined4 input_flag,int mode,undefined4 param_3,undefined4 param_4)\n\n{\n  uint bitmask;\n  undefined8 result;\n  \n  bitmask = process_and_check_bitmask_080015b2();\n  if ((bitmask & 0x10000) == 0) {\n    bitmask = bitmask >> 0x12;\n    result = shift_and_concat_0800040c(bitmask & 0x1fff);\n    if ((bitmask & 0x2000) != 0) {\n      result = shift_and_concat_0800040c(~bitmask & 0x1fff);\n      result = calculate_result_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param_4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculate_unsigned_division_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (mode == 1) {\n      result = calculate_unsigned_division_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = convert_floating_point_to_decimal_0800074c((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = calculate_result_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    bitmask = bitmask & 7;\n    if (bitmask == 2) {\n      return 0x40c3888000000000;\n    }\n    if (bitmask == 4) {\n      return 0x40c3890000000000;\n    }\n    if (bitmask != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_result_for_bitmask_080015f8",
                "param_1": "input_flag",
                "param_2": "mode",
                "uVar1": "bitmask",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "process_data_080016b4",
            "code": "\nchar processData_080016b4(int inputData)\n\n{\n  char isNonEmpty;\n  int memoryInitialized;\n  int isEmpty;\n  undefined4 result1;\n  undefined4 ptr;\n  undefined4 result2;\n  undefined4 updatedResult1;\n  undefined4 value;\n  undefined4 updatedResult2;\n  undefined4 updatedValue;\n  char isNonEmpty1;\n  undefined4 tempResult1;\n  undefined4 tempResult2;\n  undefined4 tempResult3;\n  undefined8 calculation1;\n  undefined8 calculation2;\n  undefined8 finalResult;\n  undefined8 calculation3;\n  undefined4 value1;\n  undefined4 value2;\n  \n  isNonEmpty1 = *(char *)(inputData + 0x70);\n  if (isNonEmpty1 != '\\0') {\n    memoryInitialized = initialize_memory_080058e0();\n    if ((uint)(memoryInitialized - *(int *)(inputData + 0x44)) < *(uint *)(inputData + 0x58)) {\n      isNonEmpty1 = '\\0';\n    }\n    else {\n      ptr = **(undefined4 **)(inputData + 0x38);\n      value = (*(undefined4 **)(inputData + 0x38))[1];\n      calculation1 = calculate_08000190(**(undefined4 **)(inputData + 0x40),(*(undefined4 **)(inputData + 0x40))[1])\n      ;\n      tempResult3 = (undefined4)((ulonglong)calculation1 >> 0x20);\n      calculation2 = calculate_08000190(ptr,value,*(undefined4 *)(inputData + 0x50),\n                            *(undefined4 *)(inputData + 0x54));\n      result1 = (undefined4)((ulonglong)calculation2 >> 0x20);\n      finalResult = calculate_unsigned_division_080004f8((int)calculation1,tempResult3,*(undefined4 *)(inputData + 0x20),\n                            *(undefined4 *)(inputData + 0x24));\n      finalResult = calculate_result_08000194((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                            *(undefined4 *)(inputData + 0x48),*(undefined4 *)(inputData + 0x4c));\n      *(undefined8 *)(inputData + 0x48) = finalResult;\n      isNonEmpty = *(char *)(inputData + 0x71);\n      if (isNonEmpty == '\\0') {\n        calculation3 = calculate_unsigned_division_080004f8((int)calculation2,result1,*(undefined4 *)(inputData + 0x18),\n                              *(undefined4 *)(inputData + 0x1c));\n        finalResult = calculate_08000190((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)calculation3,\n                              (int)((ulonglong)calculation3 >> 0x20));\n        *(undefined8 *)(inputData + 0x48) = finalResult;\n      }\n      result2 = *(undefined4 *)(inputData + 0x48);\n      updatedResult2 = *(undefined4 *)(inputData + 0x4c);\n      tempResult1 = *(undefined4 *)(undefined8 *)(inputData + 0x68);\n      tempResult2 = *(undefined4 *)(inputData + 0x6c);\n      finalResult = *(undefined8 *)(inputData + 0x68);\n      isEmpty = check_if_input_is_empty_08000a18(result2,updatedResult2,tempResult1,tempResult2);\n      if (isEmpty == 0) {\n        updatedResult1 = *(undefined4 *)(inputData + 0x60);\n        updatedValue = *(undefined4 *)(inputData + 100);\n        isEmpty = is_null_terminated_string_080009dc(result2,updatedResult2);\n        if (isEmpty != 0) {\n          *(undefined4 *)(inputData + 0x48) = updatedResult1;\n          *(undefined4 *)(inputData + 0x4c) = updatedValue;\n        }\n      }\n      else {\n        *(undefined4 *)(inputData + 0x48) = tempResult1;\n        *(undefined4 *)(inputData + 0x4c) = tempResult2;\n      }\n      if (isNonEmpty == '\\0') {\n        calculation1 = 0;\n      }\n      else {\n        calculation1 = calculate_unsigned_division_080004f8((int)calculation1,tempResult3,*(undefined4 *)(inputData + 0x18),\n                              *(undefined4 *)(inputData + 0x1c));\n      }\n      value2 = (undefined4)((ulonglong)calculation1 >> 0x20);\n      value1 = (undefined4)calculation1;\n      tempResult3 = *(undefined4 *)(inputData + 0x48);\n      result2 = *(undefined4 *)(inputData + 0x4c);\n      calculation1 = calculate_unsigned_division_080004f8((int)calculation2,result1,*(undefined4 *)(inputData + 0x28),\n                            *(undefined4 *)(inputData + 0x2c));\n      calculation1 = calculate_08000190(tempResult3,result2,(int)calculation1,(int)((ulonglong)calculation1 >> 0x20));\n      calculation1 = calculate_result_08000194(value1,value2,(int)calculation1,(int)((ulonglong)calculation1 >> 0x20));\n      tempResult3 = (undefined4)((ulonglong)calculation1 >> 0x20);\n      isEmpty = is_null_terminated_string_080009dc(tempResult1,tempResult2,(int)calculation1,tempResult3);\n      if (isEmpty == 0) {\n        finalResult = *(undefined8 *)(inputData + 0x60);\n        isEmpty = is_null_terminated_string_080009dc((int)calculation1,tempResult3,*(undefined4 *)(undefined8 *)(inputData + 0x60),\n                             *(undefined4 *)(inputData + 100));\n        if (isEmpty == 0) {\n          finalResult = calculation1;\n        }\n      }\n      **(undefined8 **)(inputData + 0x3c) = finalResult;\n      *(undefined4 *)(inputData + 0x50) = ptr;\n      *(undefined4 *)(inputData + 0x54) = value;\n      *(int *)(inputData + 0x44) = memoryInitialized;\n    }\n  }\n  return isNonEmpty1;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "param_1": "inputData",
                "cVar1": "isNonEmpty",
                "iVar2": "memoryInitialized",
                "iVar3": "isEmpty",
                "uVar4": "result1",
                "uVar5": "ptr",
                "uVar6": "result2",
                "uVar7": "updatedResult1",
                "uVar8": "value",
                "uVar9": "updatedResult2",
                "uVar10": "updatedValue",
                "uVar12": "tempResult1",
                "uVar13": "tempResult2",
                "uVar14": "tempResult3",
                "uVar15": "calculation1",
                "uVar16": "calculation2",
                "uVar17": "finalResult",
                "uVar18": "calculation3",
                "local_38": "value1",
                "uStack_34": "value2"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "process_data_08001814",
            "code": "\nvoid processData_08001814(undefined4 *output,undefined4 param_2,undefined4 input1,undefined4 input2,\n                 undefined4 input3,undefined4 input4,undefined4 input5,undefined4 input6,\n                 int flag)\n\n{\n  int isStringValid;\n  undefined4 tempVar;\n  undefined tempValue;\n  bool isFlagSet;\n  undefined8 convertedValue;\n  undefined8 divisionResult;\n  undefined8 calcResult;\n  \n  isStringValid = is_null_terminated_string_080009dc(input1,input2,0,0);\n  if (((isStringValid == 0) && (isStringValid = is_null_terminated_string_080009dc(input3,input4,0,0), isStringValid == 0)) &&\n     (isStringValid = is_null_terminated_string_080009dc(input5,input6,0,0), isStringValid == 0)) {\n    output[0xd] = flag;\n    isFlagSet = flag != 1;\n    if (isFlagSet) {\n      flag = 0;\n    }\n    tempValue = (undefined)flag;\n    if (!isFlagSet) {\n      tempValue = 1;\n    }\n    *(undefined *)((int)output + 0x71) = tempValue;\n    *output = input1;\n    output[1] = input2;\n    output[2] = input3;\n    output[3] = input4;\n    output[4] = input5;\n    output[5] = input6;\n    convertedValue = shift_and_concat_0800040c(output[0x16]);\n    convertedValue = convert_floating_point_to_decimal_0800074c((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20),0,0x408f4000);\n    tempVar = (undefined4)((ulonglong)convertedValue >> 0x20);\n    output[6] = input1;\n    output[7] = input2;\n    divisionResult = calculate_unsigned_division_080004f8(input3,input4,(int)convertedValue,tempVar);\n    *(undefined8 *)(output + 8) = divisionResult;\n    convertedValue = convert_floating_point_to_decimal_0800074c(input5,input6,(int)convertedValue,tempVar);\n    *(undefined8 *)(output + 10) = convertedValue;\n    if (output[0xc] == 1) {\n      calcResult = calculate_08000190(0,0,input1,input2);\n      *(undefined8 *)(output + 6) = calcResult;\n      divisionResult = calculate_08000190(0,0,(int)divisionResult,(int)((ulonglong)divisionResult >> 0x20));\n      *(undefined8 *)(output + 8) = divisionResult;\n      convertedValue = calculate_08000190(0,0,(int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n      *(undefined8 *)(output + 10) = convertedValue;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "process_data_08001814",
                "param_1": "output",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "input3",
                "param_6": "input4",
                "param_7": "input5",
                "param_8": "input6",
                "param_9": "flag",
                "iVar1": "isStringValid",
                "uVar2": "tempVar",
                "uVar3": "tempValue",
                "bVar4": "isFlagSet",
                "uVar5": "convertedValue",
                "uVar6": "divisionResult",
                "uVar7": "calcResult"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "process_data_080018f8",
            "code": "\nvoid process_data_080018f8(void)\n\n{\n  process_data_080018f8_08001814();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "process_data_080018f8"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_parameters_08001918",
            "code": "\nvoid updateParameters_08001918(int param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 shiftedValue;\n  undefined8 shiftedInput;\n  undefined8 concatenatedValue;\n  \n  if (0 < param2) {\n    shiftedInput = bitwise_shift_0800042c(param2);\n    concatenatedValue = shift_and_concat_0800040c(*(undefined4 *)(param1 + 0x58));\n    shiftedInput = convert_floating_point_to_decimal_0800074c((int)shiftedInput,(int)((ulonglong)shiftedInput >> 0x20),(int)concatenatedValue,\n                         (int)((ulonglong)concatenatedValue >> 0x20),param4);\n    shiftedValue = (undefined4)((ulonglong)shiftedInput >> 0x20);\n    concatenatedValue = calculate_unsigned_division_080004f8((int)shiftedInput,shiftedValue,*(undefined4 *)(param1 + 0x20),\n                         *(undefined4 *)(param1 + 0x24));\n    *(undefined8 *)(param1 + 0x20) = concatenatedValue;\n    shiftedInput = convert_floating_point_to_decimal_0800074c(*(undefined4 *)(param1 + 0x28),*(undefined4 *)(param1 + 0x2c),(int)shiftedInput,\n                         shiftedValue);\n    *(undefined8 *)(param1 + 0x28) = shiftedInput;\n    *(int *)(param1 + 0x58) = param2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_parameters_08001918",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "shiftedValue",
                "uVar2": "shiftedInput",
                "uVar3": "concatenatedValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "validate_and_set_params_08001960",
            "code": "\nvoid validateAndSetParams_08001960(int param1,undefined4 param2,undefined4 inputParam1,undefined4 inputParam2,\n                 undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int validationResult;\n  undefined4 *dataPtr;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  validationResult = validate_and_return_08000a04(inputParam1,inputParam2,inputParam3,inputParam4,inputParam2);\n  if (validationResult == 0) {\n    *(undefined4 *)(param1 + 0x60) = inputParam1;\n    *(undefined4 *)(param1 + 100) = inputParam2;\n    *(undefined4 *)(param1 + 0x68) = inputParam3;\n    *(undefined4 *)(param1 + 0x6c) = inputParam4;\n    if (*(char *)(param1 + 0x70) != '\\0') {\n      dataPtr = *(undefined4 **)(param1 + 0x3c);\n      tempVar1 = *dataPtr;\n      tempVar3 = dataPtr[1];\n      validationResult = is_null_terminated_string_080009dc(inputParam3,inputParam4,tempVar1,tempVar3);\n      if (validationResult == 0) {\n        validationResult = check_if_input_is_empty_08000a18(inputParam1,inputParam2,tempVar1,tempVar3);\n        if (validationResult != 0) {\n          *dataPtr = inputParam1;\n          dataPtr[1] = inputParam2;\n        }\n      }\n      else {\n        *dataPtr = inputParam3;\n        dataPtr[1] = inputParam4;\n      }\n      tempVar1 = *(undefined4 *)(param1 + 0x48);\n      tempVar3 = *(undefined4 *)(param1 + 0x4c);\n      tempVar2 = *(undefined4 *)(param1 + 0x68);\n      tempVar4 = *(undefined4 *)(param1 + 0x6c);\n      validationResult = check_if_input_is_empty_08000a18(tempVar1,tempVar3,tempVar2,tempVar4);\n      if (validationResult != 0) {\n        *(undefined4 *)(param1 + 0x48) = tempVar2;\n        *(undefined4 *)(param1 + 0x4c) = tempVar4;\n        return;\n      }\n      tempVar2 = *(undefined4 *)(param1 + 0x60);\n      tempVar4 = *(undefined4 *)(param1 + 100);\n      validationResult = is_null_terminated_string_080009dc(tempVar1,tempVar3,tempVar2,tempVar4);\n      if (validationResult != 0) {\n        *(undefined4 *)(param1 + 0x48) = tempVar2;\n        *(undefined4 *)(param1 + 0x4c) = tempVar4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "validate_and_set_params_08001960",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "inputParam1",
                "param_4": "inputParam2",
                "param_5": "inputParam3",
                "param_6": "inputParam4",
                "iVar1": "validationResult",
                "puVar2": "dataPtr",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "uVar6": "tempVar4"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "process_input_080019f6",
            "code": "\nvoid processInput_080019f6(int inputPtr)\n\n{\n  int isEmpty;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  undefined4 ptr4;\n  \n  ptr2 = **(undefined4 **)(inputPtr + 0x3c);\n  ptr3 = (*(undefined4 **)(inputPtr + 0x3c))[1];\n  *(undefined4 *)(inputPtr + 0x48) = ptr2;\n  *(undefined4 *)(inputPtr + 0x4c) = ptr3;\n  ptr1 = (*(undefined4 **)(inputPtr + 0x38))[1];\n  *(undefined4 *)(inputPtr + 0x50) = **(undefined4 **)(inputPtr + 0x38);\n  *(undefined4 *)(inputPtr + 0x54) = ptr1;\n  ptr1 = *(undefined4 *)(inputPtr + 0x68);\n  ptr4 = *(undefined4 *)(inputPtr + 0x6c);\n  isEmpty = check_if_input_is_empty_08000a18(ptr2,ptr3,ptr1,ptr4);\n  if (isEmpty == 0) {\n    ptr1 = *(undefined4 *)(inputPtr + 0x60);\n    ptr4 = *(undefined4 *)(inputPtr + 100);\n    isEmpty = is_null_terminated_string_080009dc(ptr2,ptr3,ptr1,ptr4);\n    if (isEmpty != 0) {\n      *(undefined4 *)(inputPtr + 0x48) = ptr1;\n      *(undefined4 *)(inputPtr + 0x4c) = ptr4;\n    }\n    return;\n  }\n  *(undefined4 *)(inputPtr + 0x48) = ptr1;\n  *(undefined4 *)(inputPtr + 0x4c) = ptr4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "process_input_080019f6",
                "param_1": "inputPtr",
                "iVar1": "isEmpty",
                "uVar2": "ptr1",
                "uVar3": "ptr2",
                "uVar4": "ptr3",
                "uVar5": "ptr4"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "process_and_update_flag_08001a44",
            "code": "\nvoid processAndUpdateFlag_08001a44(int baseAddress,int flagValue)\n\n{\n  undefined newFlagValue;\n  \n  if (flagValue == 1) {\n    newFlagValue = 1;\n    if (*(char *)(baseAddress + 0x70) == '\\0') {\n      process_input_080019f6();\n    }\n  }\n  else {\n    newFlagValue = 0;\n  }\n  *(undefined *)(baseAddress + 0x70) = newFlagValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "process_and_update_flag_08001a44",
                "param_1": "baseAddress",
                "param_2": "flagValue",
                "uVar1": "newFlagValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_parameters_08001a66",
            "code": "\nvoid updateParameters_08001a66(int baseAddress,int newParamValue,undefined4 unusedParam3,undefined4 unusedParam4)\n\n{\n  undefined8 calculatedValue;\n  \n  if ((*(char *)(baseAddress + 0x70) != '\\0') && (*(int *)(baseAddress + 0x30) != newParamValue)) {\n    calculatedValue = calculateValue(0,0,*(undefined4 *)(baseAddress + 0x18),*(undefined4 *)(baseAddress + 0x1c),unusedParam4\n                        );\n    *(undefined8 *)(baseAddress + 0x18) = calculatedValue;\n    calculatedValue = calculateValue(0,0,*(undefined4 *)(baseAddress + 0x20),*(undefined4 *)(baseAddress + 0x24));\n    *(undefined8 *)(baseAddress + 0x20) = calculatedValue;\n    calculatedValue = calculateValue(0,0,*(undefined4 *)(baseAddress + 0x28),*(undefined4 *)(baseAddress + 0x2c));\n    *(undefined8 *)(baseAddress + 0x28) = calculatedValue;\n  }\n  *(int *)(baseAddress + 0x30) = newParamValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_parameters_08001a66",
                "param_1": "baseAddress",
                "param_2": "newParamValue",
                "param_3": "unusedParam3",
                "param_4": "unusedParam4",
                "uVar1": "calculatedValue",
                "calculate_08000190": "calculateValue"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "update_params_and_process_data_08001ab0",
            "code": "\nint updateParamsAndProcessData_08001ab0(int baseAddress,undefined4 param2,undefined4 param3,undefined4 param4,\n                undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                undefined4 param9,undefined4 param10,undefined4 param11,undefined4 param12)\n\n{\n  int memoryInitResult;\n  undefined4 extraOutput;\n  \n  *(undefined4 *)(baseAddress + 0x3c) = param3;\n  *(undefined4 *)(baseAddress + 0x38) = param2;\n  *(undefined4 *)(baseAddress + 0x40) = param4;\n  *(undefined *)(baseAddress + 0x70) = 0;\n  validate_and_set_params_08001960(baseAddress,param2,0,0,0,0x406fe000);\n  *(undefined4 *)(baseAddress + 0x58) = 100;\n  updateParams(baseAddress,param12);\n  processData(baseAddress,extraOutput,param5,param6,param7,param8,param9,param10,param11);\n  memoryInitResult = initializeMemory();\n  *(int *)(baseAddress + 0x44) = memoryInitResult - *(int *)(baseAddress + 0x58);\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "update_params_and_process_data_08001ab0",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "iVar1": "memoryInitResult",
                "extraout_r1": "extraOutput",
                "update_parameters_08001a66": "updateParams",
                "process_data_08001814": "processData",
                "initialize_memory_080058e0": "initializeMemory"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "process_data_and_update_params_08001b18",
            "code": "\nundefined4 process_data_and_update_params_08001b18(undefined4 input_param)\n\n{\n  update_and_process_data();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "process_data_and_update_params_08001b18",
                "param_1": "input_param",
                "update_params_and_process_data_08001ab0": "update_and_process_data"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_and_configure_system_08001b48",
            "code": "\nvoid initializeAndConfigureSystem_08001b48(void)\n\n{\n  int statusCheckResult;\n  uint uVar2;\n  undefined4 configuration [2];\n  undefined4 configurationValue;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 inputParameters [4];\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 parameter5;\n  \n  inputParameters[0] = 2;\n  parameter1 = 1;\n  parameter2 = 0x10;\n  parameter3 = 2;\n  parameter4 = 0;\n  parameter5 = 0x380000;\n  statusCheckResult = check_status_08003688(inputParameters);\n  if (statusCheckResult != 0) {\n    endlessLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  value1 = 0xf;\n  value2 = 2;\n  value3 = 0;\n  value4 = 0x400;\n  value5 = 0;\n  statusCheckResult = initializeAndCalculateDelay(&value1);\n  if (statusCheckResult != 0) {\n    endlessLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  configuration[0] = 2;\n  configurationValue = 0x8000;\n  statusCheckResult = updateConfiguration(configuration);\n  if (statusCheckResult != 0) {\n    endlessLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  uVar2 = getDataFromMemory();\n  setParameters(uVar2 / 1000);\n  updateMemoryLocation(4);\n  updateMemory(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_and_configure_system_08001b48",
                "local_30": "inputParameters",
                "local_20": "parameter1",
                "local_1c": "parameter2",
                "local_14": "parameter3",
                "local_10": "parameter4",
                "local_c": "parameter5",
                "iVar1": "statusCheckResult",
                "run_infinite_loop_08004d40": "endlessLoop",
                "local_44": "value1",
                "local_40": "value2",
                "local_3c": "value3",
                "local_38": "value4",
                "local_34": "value5",
                "initialize_and_calculate_delay_08003ad4": "initializeAndCalculateDelay",
                "local_54": "configuration",
                "local_4c": "configurationValue",
                "update_configuration_08003c90": "updateConfiguration",
                "get_data_from_memory_08003c44": "getDataFromMemory",
                "set_parameters_08002514": "setParameters",
                "update_e000e010_08002560": "updateMemoryLocation",
                "update_memory_08002494": "updateMemory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_08004d44();\n  execute_callbacks_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  execute_process_loop_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_system_08001c32",
            "code": "\nvoid initialize_system_08001c32(void)\n\n{\n  initialize_system_08001c32_08004c52();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_system_08001c32"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "initialize_memory_08001c3c",
            "code": "\nundefined4 initializeMemory_08001c3c(uint memorySize)\n\n{\n  int result;\n  \n  result = setParameters(DAT_20000084 / (1000 / DAT_20000078));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < memorySize) {\n    return 1;\n  }\n  updateMemory(0xffffffff,memorySize,0);\n  DAT_2000007c = memorySize;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "initialize_memory_08001c3c",
                "param_1": "memorySize",
                "iVar1": "result",
                "set_parameters_08002514": "setParameters",
                "update_memory_08002494": "updateMemory"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_and_update_data_08001c88",
            "code": "\n\n\nundefined4 initialize_and_update_data_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_register_value(3);\n  initialize_memory(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_and_update_data_08001c88",
                "update_register_value_08002470": "update_register_value",
                "initialize_memory_08001c3c": "initialize_memory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "update_variable_addition_08001cac",
            "code": "\nvoid updateVariableAddition_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "update_variable_addition_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_from_memory_08001cc4",
            "code": "\nundefined4 get_data_from_memory_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_from_memory_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_execution_time_08001cd0",
            "code": "\nundefined4 calculateExecutionTime_08001cd0(uint **inputParams,uint maxExecutionTime)\n\n{\n  int initialTime;\n  uint delayFactor;\n  int increment;\n  undefined4 result;\n  uint *ptr1;\n  uint newExecutionTime;\n  uint counter;\n  \n  counter = 0;\n  initialTime = get_data_from_memory_08001cc4();\n  newExecutionTime = DAT_20000084;\n  ptr1 = *inputParams;\n  if ((ptr1[2] & 0x100) == 0) {\n    if (((ptr1[1] & 0x100) == 0) && ((ptr1[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**inputParams & 2) != 0) goto LAB_08001de2;\n      } while ((maxExecutionTime == 0xffffffff) ||\n              ((maxExecutionTime != 0 && (increment = get_data_from_memory_08001cc4(), (uint)(increment - initialTime) <= maxExecutionTime))));\n      inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n      *(undefined *)(inputParams + 9) = 0;\n      result = 3;\n    }\n    else {\n      delayFactor = calculate_delay_08003da4(2);\n      ptr1 = *inputParams;\n      if (((ptr1[4] & 0x24924924) == 0) && ((ptr1[3] & 0x924924) == 0)) {\n        if ((ptr1[4] & 0x12492492) == 0) {\n          if ((ptr1[3] & 0x492492) == 0) {\n            increment = 0x14;\n          }\n          else {\n            increment = 0x29;\n          }\n        }\n        else {\n          increment = 0x29;\n        }\n      }\n      else if (((ptr1[4] & 0x12492492) == 0) && ((ptr1[3] & 0x492492) == 0)) {\n        increment = 0x54;\n      }\n      else if ((ptr1[4] & 0x249249) == 0) {\n        if ((ptr1[3] & 0x249249) == 0) {\n          increment = 0x54;\n        }\n        else {\n          increment = 0xfc;\n        }\n      }\n      else {\n        increment = 0xfc;\n      }\n      newExecutionTime = (newExecutionTime / delayFactor) * increment;\n      for (; counter <= newExecutionTime && newExecutionTime - counter != 0; counter = counter + 1) {\n        if ((maxExecutionTime != 0xffffffff) &&\n           ((maxExecutionTime == 0 || (increment = get_data_from_memory_08001cc4(), maxExecutionTime < (uint)(increment - initialTime))))) {\n          inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n          *(undefined *)(inputParams + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **inputParams = 0xffffffed;\n      inputParams[10] = (uint *)((uint)inputParams[10] | 0x200);\n      if (((*inputParams)[2] & 0xe0000) == 0xe0000) {\n        if (inputParams[3] == (uint *)0x0) {\n          inputParams[10] = (uint *)((uint)inputParams[10] & 0xfffffeff);\n          if (((uint)inputParams[10] & 0x1000) == 0) {\n            inputParams[10] = (uint *)((uint)inputParams[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    inputParams[10] = (uint *)((uint)inputParams[10] | 0x20);\n    *(undefined *)(inputParams + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_execution_time_08001cd0",
                "param_1": "inputParams",
                "param_2": "maxExecutionTime",
                "iVar1": "initialTime",
                "uVar2": "delayFactor",
                "iVar3": "increment",
                "uVar4": "result",
                "puVar5": "ptr1",
                "uVar6": "newExecutionTime",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_from_pointer_08001e40",
            "code": "\nundefined4 getOffsetFromPointer_08001e40(int *pointer)\n\n{\n  return *(undefined4 *)(*pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_from_pointer_08001e40",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "apply_settings_08001e48",
            "code": "\nundefined4 applySettings_08001e48(int *settings,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(settings + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(settings + 9) = 1;\n    index = values[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*settings + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*settings + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*settings + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*settings + 0x10) =\n           values[2] << (index * 3 & 0xff) |\n           *(uint *)(*settings + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*settings + 0xc) =\n           values[2] << (index & 0xff) | *(uint *)(*settings + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*settings == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        settings[10] = settings[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(settings + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "apply_settings_08001e48",
                "param_1": "settings",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "index",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_data_at_offset_08001f80",
            "code": "\nundefined4 get_data_at_offset_08001f80(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_data_at_offset_08001f80",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_and_verify_data_08001f84",
            "code": "\nundefined4 initialize_and_verify_data_08001f84(int *data_array,undefined4 param)\n\n{\n  int data_from_memory;\n  undefined4 result;\n  int ptr_data;\n  uint loop_counter;\n  \n  ptr_data = *data_array;\n  if ((*(uint *)(ptr_data + 8) & 1) == 0) {\n    *(uint *)(ptr_data + 8) = *(uint *)(ptr_data + 8) | 1;\n    for (loop_counter = DAT_20000084 / 1000000; loop_counter != 0; loop_counter = loop_counter - 1) {\n    }\n    ptr_data = get_data_from_memory_08001cc4(data_array,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data_array + 8) & 1) != 0) {\n        return 0;\n      }\n      data_from_memory = get_data_from_memory_08001cc4();\n    } while ((uint)(data_from_memory - ptr_data) < 3);\n    data_array[10] = data_array[10] | 0x10;\n    data_array[0xb] = data_array[0xb] | 1;\n    *(undefined *)(data_array + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_and_verify_data_08001f84",
                "param_1": "data_array",
                "param_2": "param",
                "iVar1": "data_from_memory",
                "iVar3": "ptr_data",
                "uVar2": "result",
                "local_14": "loop_counter"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "initialize_verify_data_08002004",
            "code": "\n\n\nint initialize_verify_data_08002004(int *data)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int data_value;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = initialize_and_verify_data_08001f84();\n    if (result == 0) {\n      data[10] = data[10] & 0xfffffcfeU | 0x100;\n      data_ptr = (undefined4 *)*data;\n      if ((data_ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((data_ptr[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        data[0xb] = 0;\n      }\n      else {\n        data[0xb] = data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *data_ptr = 0xfffffffd;\n      data_value = *data;\n      if (((*(uint *)(data_value + 8) & 0xe0000) == 0xe0000) &&\n         ((data_value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(data_value + 8) = *(uint *)(data_value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(data_value + 8) = *(uint *)(data_value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "initialize_verify_data_08002004",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data_value"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_flags_080020f0",
            "code": "\nundefined4 updateFlags_080020f0(int *dataPointer)\n\n{\n  int currentValue;\n  int value;\n  \n  value = *dataPointer;\n  if ((*(uint *)(value + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value + 8) = *(uint *)(value + 8) & 0xfffffffe;\n  value = getDataFromMemory();\n  do {\n    if ((*(uint *)(*dataPointer + 8) & 1) == 0) {\n      return 0;\n    }\n    currentValue = getDataFromMemory();\n  } while ((uint)(currentValue - value) < 3);\n  dataPointer[10] = dataPointer[10] | 0x10;\n  dataPointer[0xb] = dataPointer[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_flags_080020f0",
                "param_1": "dataPointer",
                "iVar2": "value",
                "iVar1": "currentValue",
                "get_data_from_memory_08001cc4": "getDataFromMemory"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_permissions_0800213c",
            "code": "\nundefined4 update_permissions_0800213c(int *permissions)\n\n{\n  int flags;\n  uint combined_data_1;\n  uint combined_data_2;\n  \n  if (permissions == (int *)0x0) {\n    return 1;\n  }\n  if (permissions[10] == 0) {\n    permissions[0xb] = 0;\n    *(undefined *)(permissions + 9) = 0;\n    set_permissions_and_update_bits_08004974();\n  }\n  flags = update_flags_080020f0(permissions);\n  if (((permissions[10] & 0x10U) == 0) && (flags == 0)) {\n    permissions[10] = permissions[10] & 0xffffeefdU | 2;\n    combined_data_1 = permissions[1] | permissions[7] | permissions[3] << 1;\n    if (permissions[2] == 0x100) {\n      combined_data_2 = 0x100;\n    }\n    else {\n      combined_data_2 = 0;\n      if (permissions[2] == 1) {\n        combined_data_2 = 0x100;\n      }\n    }\n    if (permissions[5] == 1) {\n      if (permissions[3] == 0) {\n        combined_data_2 = combined_data_2 | (permissions[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        permissions[10] = permissions[10] | 0x20;\n        permissions[0xb] = permissions[0xb] | 1;\n      }\n    }\n    *(uint *)(*permissions + 4) = combined_data_2 | *(uint *)(*permissions + 4) & 0xffff16ff;\n    *(uint *)(*permissions + 8) = *(uint *)(*permissions + 8) & 0xffe1f7fd | combined_data_1;\n    if ((permissions[2] == 0x100) || (permissions[2] == 1)) {\n      combined_data_2 = (permissions[4] + -1) * 0x100000;\n    }\n    else {\n      combined_data_2 = 0;\n    }\n    *(uint *)(*permissions + 0x2c) = combined_data_2 | *(uint *)(*permissions + 0x2c) & 0xff0fffff;\n    if (combined_data_1 != (*(uint *)(*permissions + 8) & 0xff1f0efe)) {\n      permissions[10] = permissions[10] & 0xffffffedU | 0x10;\n      permissions[0xb] = permissions[0xb] | 1;\n      return 1;\n    }\n    permissions[0xb] = 0;\n    permissions[10] = permissions[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  permissions[10] = permissions[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_permissions_0800213c",
                "param_1": "permissions",
                "iVar1": "flags",
                "uVar2": "combined_data_1",
                "uVar3": "combined_data_2"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "update_peripheral_0800224c",
            "code": "\nint updatePeripheral_0800224c(int *device)\n\n{\n  int result;\n  \n  if (device == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    device[10] = device[10] | 2;\n    result = update_flags_080020f0();\n    if (result == 0) {\n      *(undefined4 *)*device = 0xffffffe0;\n      *(uint *)(*device + 4) = *(uint *)(*device + 4) & 0xff3f0000;\n      *(uint *)(*device + 8) = *(uint *)(*device + 8) & 0xff0106f0;\n      *(uint *)(*device + 0xc) = *(uint *)(*device + 0xc) & 0xff000000;\n      *(uint *)(*device + 0x10) = *(uint *)(*device + 0x10) & 0xc0000000;\n      *(uint *)(*device + 0x14) = *(uint *)(*device + 0x14) & 0xfffff000;\n      *(uint *)(*device + 0x18) = *(uint *)(*device + 0x18) & 0xfffff000;\n      *(uint *)(*device + 0x1c) = *(uint *)(*device + 0x1c) & 0xfffff000;\n      *(uint *)(*device + 0x20) = *(uint *)(*device + 0x20) & 0xfffff000;\n      *(uint *)(*device + 0x24) = *(uint *)(*device + 0x24) & 0xfffff000;\n      *(uint *)(*device + 0x28) = *(uint *)(*device + 0x28) & 0xfffff000;\n      *(uint *)(*device + 0x2c) = *(uint *)(*device + 0x2c) & 0xff000000;\n      *(uint *)(*device + 0x2c) = *(uint *)(*device + 0x2c) & 0xff000000;\n      *(uint *)(*device + 0x30) = *(uint *)(*device + 0x30) & 0xc0000000;\n      *(uint *)(*device + 0x34) = *(uint *)(*device + 0x34) & 0xc0000000;\n      *(uint *)(*device + 0x38) = *(uint *)(*device + 0x38) & 0xffc00000;\n      *(uint *)(*device + 0x38) = *(uint *)(*device + 0x38) & 0xffc00000;\n      update_peripheral_access_080049f0(device);\n      device[0xb] = 0;\n      device[10] = 0;\n    }\n    *(undefined *)(device + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "update_peripheral_0800224c",
                "param_1": "device",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "check_and_update_flags_08002348",
            "code": "\nint checkAndUpdateFlags_08002348(int inputParam)\n\n{\n  int result;\n  \n  if (*(char *)(inputParam + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(inputParam + 0x24) = 1;\n  result = updateFlags;\n  if (result == 0) {\n    *(uint *)(inputParam + 0x28) = *(uint *)(inputParam + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(inputParam + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "check_and_update_flags_08002348",
                "param_1": "inputParam",
                "iVar1": "result",
                "update_flags_080020f0()": "updateFlags"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "check_and_update_data_08002384",
            "code": "\nint checkAndUpdateData_08002384(int *data)\n\n{\n  uint value1;\n  int result;\n  uint value2;\n  int temp1;\n  int temp2;\n  int loopCount;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_flags_080020f0();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    value1 = DAT_20000084;\n    value2 = calculate_delay_08003da4(2);\n    for (loopCount = value1 / value2 << 1; loopCount != 0; loopCount = loopCount + -1) {\n    }\n    initialize_and_verify_data_08001f84(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    temp1 = get_data_from_memory_08001cc4();\n    while (temp2 = *data, (*(uint *)(temp2 + 8) & 8) != 0) {\n      temp2 = get_data_from_memory_08001cc4();\n      if (10 < (uint)(temp2 - temp1)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(temp2 + 8) = *(uint *)(temp2 + 8) | 4;\n    temp1 = get_data_from_memory_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      temp2 = get_data_from_memory_08001cc4();\n      if (10 < (uint)(temp2 - temp1)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "check_and_update_data_08002384",
                "param_1": "data",
                "uVar1": "value1",
                "iVar2": "result",
                "uVar3": "value2",
                "iVar4": "temp1",
                "iVar5": "temp2",
                "local_14": "loopCount"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_register_value_08002470",
            "code": "\n\n\nvoid updateRegisterValue_08002470(uint input)\n\n{\n  _DAT_e000ed0c = (input & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_register_value_08002470",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_memory_08002494",
            "code": "\n\n\nvoid updateMemory_08002494(uint address,uint value1,uint value2)\n\n{\n  uint value;\n  uint maskShift;\n  \n  value = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  maskShift = 7 - value;\n  if (3 < maskShift) {\n    maskShift = 4;\n  }\n  if (value + 4 < 7) {\n    value = 0;\n  }\n  else {\n    value = value - 3;\n  }\n  value = (value1 & (1 << (maskShift & 0xff)) - 1U) << (value & 0xff) |\n          (1 << (value & 0xff)) - 1U & value2;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(value << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(value << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "value",
                "uVar2": "maskShift"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_080024f8",
            "code": "\nvoid setBit_080024f8(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "set_parameters_08002514",
            "code": "\n\n\nundefined4 set_parameters_08002514(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "set_parameters_08002514",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_at_index_08002540",
            "code": "\nvoid setBitAtIndex_08002540(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_at_index_08002540",
                "param_1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_e000e010_08002560",
            "code": "\n\n\nvoid update_e000e010_08002560(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_e000e010_08002560",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "initialize_system_08002582",
            "code": "\nvoid initialize_system_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "initialize_system_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "configure_hardware_0800258c",
            "code": "\n\n\nundefined4 configureHardware_0800258c(uint **configParams)\n\n{\n  uint *configValue;\n  \n  if (*(char *)((int)configParams + 0x21) != '\\x02') {\n    errorFlag = (uint *)0x4;\n    return 1;\n  }\n  **configParams = **configParams & 0xfffffff1;\n  **configParams = **configParams & 0xfffffffe;\n  configValue = *configParams;\n  if (configValue == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (configValue == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (configValue == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (configValue == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (configValue == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (configValue == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)configParams + 0x21) = 1;\n  *(undefined *)(configParams + 8) = 0;\n  if (callbackFunc != (uint *)0x0) {\n    (*(code *)callbackFunc)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "configure_hardware_0800258c",
                "param_1": "configParams",
                "puVar1": "configValue",
                "param_1[0xe]": "errorFlag",
                "param_1[0xd]": "callbackFunc"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_bits_08002624",
            "code": "\n\n\nvoid updateBits_08002624(uint *bitArray1,uint *bitArray2)\n\n{\n  uint *ptBitArray;\n  uint bitMask;\n  uint andResult;\n  uint bitPos;\n  uint value;\n  uint newVal;\n  int bitGroup;\n  int bitIndex;\n  \n  newVal = 0;\n  bitPos = 0;\n  do {\n    if (0xf < bitPos) {\n      return;\n    }\n    bitMask = 1 << (bitPos & 0xff);\n    andResult = *bitArray2 & bitMask;\n    if (bitMask == andResult) {\n      value = bitArray2[1];\n      if (value == 0x12) {\n        newVal = bitArray2[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          newVal = bitArray2[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_08002776;\n          if (value == 1) {\n            newVal = bitArray2[3];\n          }\n        }\n        else if (value == 3) {\n          newVal = 0;\n        }\n        else if (value == 0x11) {\n          newVal = bitArray2[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_08002776:\n        if (bitArray2[2] == 0) {\n          newVal = 4;\n        }\n        else if (bitArray2[2] == 1) {\n          bitArray1[4] = bitMask;\n          newVal = 8;\n        }\n        else {\n          bitArray1[5] = bitMask;\n          newVal = 8;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((value == 0x10310000) || ((value == 0x10320000 || (value == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = bitPos;\n      ptBitArray = bitArray1;\n      if (0xff < andResult) {\n        bitMask = bitPos - 8;\n        ptBitArray = bitArray1 + 1;\n      }\n      *ptBitArray = *ptBitArray & ~(0xf << (bitMask << 2 & 0xff)) | newVal << (bitMask << 2 & 0xff);\n      if ((bitArray2[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitGroup = (bitPos & 3) << 2;\n        if (bitArray1 == (uint *)0x40010800) {\n          bitIndex = 0;\n        }\n        else if (bitArray1 == (uint *)0x40010c00) {\n          bitIndex = 1;\n        }\n        else if (bitArray1 == (uint *)0x40011000) {\n          bitIndex = 2;\n        }\n        else if (bitArray1 == (uint *)0x40011400) {\n          bitIndex = 3;\n        }\n        else {\n          bitIndex = 4;\n        }\n        *(uint *)(((bitPos >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitPos >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bitGroup) | bitIndex << bitGroup;\n        if ((bitArray2[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~andResult;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | andResult;\n        }\n        if ((bitArray2[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~andResult;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | andResult;\n        }\n        if ((bitArray2[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~andResult;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | andResult;\n        }\n        if ((bitArray2[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~andResult;\n        }\n        else {\n          _DAT_4001040c = andResult | _DAT_4001040c;\n        }\n      }\n    }\n    bitPos = bitPos + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bitArray1",
                "param_2": "bitArray2",
                "puVar1": "ptBitArray",
                "uVar2": "bitMask",
                "uVar3": "andResult",
                "uVar4": "bitPos",
                "uVar5": "value",
                "uVar6": "newVal",
                "iVar7": "bitGroup",
                "iVar8": "bitIndex"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bitmask_08002810",
            "code": "\nundefined4 check_bitmask_08002810(int input_value,uint bitmask)\n\n{\n  if ((bitmask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bitmask_08002810",
                "param_1": "input_value",
                "param_2": "bitmask"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_output_value_0800281e",
            "code": "\nvoid setOutputValue_0800281e(int inputPtr,int value,int shiftFlag)\n\n{\n  if (shiftFlag == 0) {\n    *(int *)(inputPtr + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(inputPtr + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_output_value_0800281e",
                "param_1": "inputPtr",
                "param_2": "value",
                "param_3": "shiftFlag"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_data_if_flag_set_0800282c",
            "code": "\n\n\nvoid update_data_if_flag_set_0800282c(uint flag)\n\n{\n  if ((_DAT_40010414 & flag) != 0) {\n    _DAT_40010414 = flag;\n    validate_and_process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_data_if_flag_set_0800282c",
                "param_1": "flag",
                "check_and_process_data_080060e4": "validate_and_process_data"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_status_08002848",
            "code": "\nundefined4 updateStatus_08002848(int *status)\n\n{\n  if (*(char *)((int)status + 0x3e) == '@') {\n    if (condition == 0) {\n      *(uint *)(*status + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*status + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (status[4] == 0x4000) {\n    if (*(char *)((int)status + 0x3d) == '!') {\n      *(uint *)(*status + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*status + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (condition == 0) {\n    *(uint *)(*status + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition == 1) {\n    *(uint *)(*status + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_status_08002848",
                "param_1": "status",
                "param_1[0x14]": "condition",
                "param_1[0x11]": "value"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "set_byte_value_080028d2",
            "code": "\nundefined4 setByteValue_080028d2(int *data)\n\n{\n  *(uint *)(*data + 0x10) = value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "set_byte_value_080028d2",
                "param_1": "data",
                "param_1[0x11]": "value"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "update_flags_080028de",
            "code": "\nundefined4 updateFlags_080028de(uint **input_params)\n\n{\n  uint *temp_var;\n  \n  temp_var = input_params[0xb];\n  if ((*(char *)((int)input_params + 0x3d) == '\\\"') &&\n     ((ptr_param_14 != (uint *)0x0 || (*(char *)((int)input_params + 0x3e) != '@')))) {\n    if ((ptr_param_14 == (uint *)0x0) && (ptr_param_4 == (uint *)0xc000)) {\n      **input_params = **input_params | 0x100;\n      ptr_param_14 = (uint *)((int)ptr_param_14 + 1);\n    }\n    else {\n      if (*(short *)((int)input_params + 0x2a) == 0) {\n        **input_params = **input_params | 0x200;\n      }\n      else if (*(short *)((int)input_params + 0x2a) == 1) {\n        if (temp_var == (uint *)0xffff0000) {\n          **input_params = **input_params & 0xfffffbff;\n          temp_var = *input_params;\n          if ((temp_var[1] & 0x800) == 0) {\n            *temp_var = *temp_var | 0x200;\n          }\n          else {\n            *temp_var = *temp_var & 0xfffffbff;\n          }\n        }\n        else if (((temp_var == (uint *)0x4) || (temp_var == (uint *)0x8)) ||\n                (input_params[0xc] == (uint *)0x12)) {\n          **input_params = **input_params & 0xfffffbff;\n          **input_params = **input_params | 0x200;\n        }\n        else if (input_params[0xb] == (uint *)0x2) {\n          **input_params = **input_params | 0x400;\n        }\n        else {\n          **input_params = **input_params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input_params + 0x2a) == 2) {\n        if (input_params[0xb] == (uint *)0x2) {\n          **input_params = **input_params | 0x400;\n        }\n        else {\n          **input_params = **input_params | 0x800;\n          **input_params = **input_params & 0xfffffbff;\n        }\n        temp_var = *input_params;\n        if ((temp_var[1] & 0x800) != 0) {\n          temp_var[1] = temp_var[1] | 0x1000;\n        }\n      }\n      else {\n        **input_params = **input_params | 0x400;\n        temp_var = *input_params;\n        if ((temp_var[1] & 0x800) != 0) {\n          temp_var[1] = temp_var[1] | 0x1000;\n        }\n      }\n      ptr_param_14 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "input_params",
                "puVar1": "temp_var",
                "param_1[0x14]": "ptr_param_14",
                "param_1[4]": "ptr_param_4"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_data_08002ab8",
            "code": "\nundefined4 updateData_08002ab8(int *data)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_data_08002ab8",
                "param_1": "data",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_array_and_decrement_08002ad8",
            "code": "\nundefined4 updateArrayAndDecrement_08002ad8(int *array)\n\n{\n  undefined *ptrToElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptrToElement = (undefined *)array[9];\n    array[9] = (int)(ptrToElement + 1);\n    *ptrToElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_array_and_decrement_08002ad8",
                "param_1": "array",
                "puVar1": "ptrToElement"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "check_and_update_param_08002af8",
            "code": "\nundefined4 check_and_update_param_08002af8(uint **parameter_list,uint *input_param,int param_length,uint *output_param)\n\n{\n  undefined4 result;\n  uint *ptr_to_param1;\n  \n  if (*(char *)((int)parameter_list + 0x3d) == '(') {\n    if (input_param == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameter_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameter_list + 0xf) = 1;\n      ptr_to_param1 = *parameter_list;\n      if ((*ptr_to_param1 & 1) == 0) {\n        *ptr_to_param1 = *ptr_to_param1 | 1;\n      }\n      **parameter_list = **parameter_list & 0xfffff7ff;\n      *(undefined *)((int)parameter_list + 0x3d) = 0x29;\n      *(undefined *)((int)parameter_list + 0x3e) = 0x20;\n      result = 0;\n      parameter_list[0x10] = (uint *)0x0;\n      parameter_list[9] = input_param;\n      *(short *)((int)parameter_list + 0x2a) = (short)param_length;\n      parameter_list[0xb] = output_param;\n      *(undefined2 *)(parameter_list + 10) = *(undefined2 *)((int)parameter_list + 0x2a);\n      *(undefined *)(parameter_list + 0xf) = 0;\n      (*parameter_list)[1] = (*parameter_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "check_and_update_param_08002af8",
                "param_1": "parameter_list",
                "param_2": "input_param",
                "param_3": "param_length",
                "param_4": "output_param",
                "uVar1": "result",
                "puVar2": "ptr_to_param1"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "process_param_08002b84",
            "code": "\nundefined4 processParam_08002b84(uint **paramPtr,uint *param2,int param3,uint *param4)\n\n{\n  undefined4 result;\n  uint *pointer;\n  \n  if (*(char *)((int)paramPtr + 0x3d) == '(') {\n    if (param2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(paramPtr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramPtr + 0xf) = 1;\n      pointer = *paramPtr;\n      if ((*pointer & 1) == 0) {\n        *pointer = *pointer | 1;\n      }\n      **paramPtr = **paramPtr & 0xfffff7ff;\n      *(undefined *)((int)paramPtr + 0x3d) = 0x2a;\n      *(undefined *)((int)paramPtr + 0x3e) = 0x20;\n      result = 0;\n      param110 = (uint *)0x0;\n      param19 = param2;\n      *(short *)((int)paramPtr + 0x2a) = (short)param3;\n      param1B = param4;\n      *(undefined2 *)(paramPtr + 10) = *(undefined2 *)((int)paramPtr + 0x2a);\n      *(undefined *)(paramPtr + 0xf) = 0;\n      (*paramPtr)[1] = (*paramPtr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "process_param_08002b84",
                "param_1": "paramPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "puVar2": "pointer",
                "param_1[0x10]": "param110",
                "param_1[9]": "param19",
                "param_1[0xb]": "param1B"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_data_08002c10",
            "code": "\nundefined4 initializeData_08002c10(uint **dataPointer)\n\n{\n  uint *currentDataPointer;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  currentDataPointer = *dataPointer;\n  if ((*currentDataPointer & 1) == 0) {\n    *currentDataPointer = *currentDataPointer | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "param_1": "dataPointer",
                "puVar1": "currentDataPointer"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "process_input_08002ca6",
            "code": "\nundefined4 processInput_08002ca6(int *inputArray)\n\n{\n  char charValue;\n  undefined *bytePointer;\n  \n  charValue = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePointer = (undefined *)inputArray[9];\n    inputArray[9] = (int)(bytePointer + 1);\n    *bytePointer = (char)*(undefined4 *)(*inputArray + 0x10);\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      inputArray[0xc] = 0x22;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "inputArray",
                "cVar1": "charValue",
                "puVar2": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "process_param_08002cf2",
            "code": "\nundefined4 process_param_08002cf2(int *arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined2 selected_value;\n  uint flag_value;\n  \n  flag_value = *(uint *)(*arg1 + 0x18);\n  if ((flag_value & 0x80) == 0) {\n    selected_value = *(undefined2 *)(arg1 + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(arg1 + 6);\n  }\n  process_param_08002cf2_08004e74(arg1,(*(uint *)(*arg1 + 0x18) & 4) == 0,selected_value,flag_value,arg4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "process_param_08002cf2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "selected_value",
                "uVar2": "flag_value"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "validate_and_execute_08002d1c",
            "code": "\nundefined4 validate_and_execute_08002d1c(unsigned_integer **parameter)\n\n{\n  if (((parameter[0xb] == (unsigned_integer *)0x4) || (parameter[0xb] == (unsigned_integer *)0x8)) &&\n     (*(char *)((int)parameter + 0x3d) == '(')) {\n    parameter[0xb] = (unsigned_integer *)0xffff0000;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    parameter[0xc] = (unsigned_integer *)0x0;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    initialize_and_execute_function();\n  }\n  else if (*(char *)((int)parameter + 0x3d) == 'exclamation_point') {\n    parameter[0xb] = (unsigned_integer *)0xffff0000;\n    parameter[0xc] = (unsigned_integer *)0x21;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*parameter)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "validate_and_execute_08002d1c",
                "param_1": "parameter",
                "uint": "unsigned_integer",
                "initialize_and_execute_08004ec4": "initialize_and_execute_function",
                "!": "exclamation_point"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_input_08002db2",
            "code": "\nundefined4 processInput_08002db2(uint **inputParam)\n\n{\n  char charValue;\n  uint *ptrValue;\n  \n  charValue = *(char *)((int)inputParam + 0x3d);\n  ptrValue = ptrToArray;\n  if ((*(short *)(inputParam + 10) == 0) && (charValue == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*inputParam)[1] = (*inputParam)[1] & 0xfffff8ff;\n      **inputParam = **inputParam | 0x200;\n      inputParam[0xc] = (uint *)0x0;\n      *(undefined *)((int)inputParam + 0x3d) = 0x20;\n      if (*(char *)((int)inputParam + 0x3e) == '@') {\n        *(undefined *)((int)inputParam + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)inputParam + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*inputParam)[1] = (*inputParam)[1] & 0xfffff8ff;\n      inputParam[0xc] = (uint *)0x11;\n      *(undefined *)((int)inputParam + 0x3e) = 0;\n      *(undefined *)((int)inputParam + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((charValue == '!') || ((*(char *)((int)inputParam + 0x3e) == '@' && (charValue == '\\\"')))) {\n    if (*(short *)((int)inputParam + 0x2a) == 0) {\n      (*inputParam)[1] = (*inputParam)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)inputParam + 0x3e) == '@') {\n      if (inputParam[0x14] == (uint *)0x0) {\n        if (inputParam[0x13] == (uint *)0x1) {\n          (*inputParam)[4] = (uint)inputParam[0x12] & 0xff;\n          inputParam[0x14] = (uint *)((int)inputParam[0x14] + 2);\n        }\n        else {\n          (*inputParam)[4] = (uint)((int)inputParam[0x12] << 0x10) >> 0x18;\n          inputParam[0x14] = (uint *)((int)inputParam[0x14] + 1);\n        }\n      }\n      else if (inputParam[0x14] == (uint *)0x1) {\n        (*inputParam)[4] = (uint)inputParam[0x12] & 0xff;\n        inputParam[0x14] = (uint *)((int)inputParam[0x14] + 1);\n      }\n      else if (inputParam[0x14] == (uint *)0x2) {\n        if (*(char *)((int)inputParam + 0x3d) == '\\\"') {\n          **inputParam = **inputParam | 0x100;\n        }\n        else if (*(char *)((int)inputParam + 0x3d) == '!') {\n          ptrValue = inputParam[9];\n          inputParam[9] = (uint *)((int)ptrValue + 1);\n          (*inputParam)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)inputParam + 0x2a) = *(short *)((int)inputParam + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = inputParam[9];\n      inputParam[9] = (uint *)((int)ptrValue + 1);\n      (*inputParam)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)inputParam + 0x2a) = *(short *)((int)inputParam + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "inputParam",
                "cVar1": "charValue",
                "puVar2": "ptrValue",
                "param_1[0xb]": "ptrToArray"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "check_and_process_data_08002efc",
            "code": "\nundefined4 check_and_process_data_08002efc(uint **data)\n\n{\n  uint *ptr1;\n  \n  ptr1 = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) || (ptr1 == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        ptr5 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        ptr5 = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      (*data)[4] = (uint)*(byte *)ptr1;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "check_and_process_data_08002efc",
                "param_1": "data",
                "puVar1": "ptr1",
                "param_1[0xc]": "ptr5"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "handle_param_08002f9c",
            "code": "\nundefined4 handleParam_08002f9c(uint **param)\n\n{\n  uint *ptrVar1;\n  \n  if (*(char *)((int)param + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)param + 0x2a) < 4) {\n      if (*(ushort *)((int)param + 0x2a) - 2 < 2) {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x800;\n        }\n        (*param)[1] = (*param)[1] & 0xfffffbff;\n      }\n      else {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        ptrVar1 = param[9];\n        param[9] = (uint *)((int)ptrVar1 + 1);\n        *(char *)ptrVar1 = (char)(*param)[4];\n        *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        param[0xc] = (uint *)0x0;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      ptrVar1 = param[9];\n      param[9] = (uint *)((int)ptrVar1 + 1);\n      *(char *)ptrVar1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "handle_param_08002f9c",
                "param_1": "param",
                "puVar1": "ptrVar1"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "update_param_0800306c",
            "code": "\nundefined4 updateParam_0800306c(uint **paramArray)\n\n{\n  uint *currentValue;\n  \n  currentValue = paramArray[0xb];\n  if (*(short *)((int)paramArray + 0x2a) == 3) {\n    if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n      **paramArray = **paramArray & 0xfffffbff;\n    }\n    currentValue = counterPtr;\n    counterPtr = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramArray + 0x2a) == 2) {\n    if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n      (*paramArray)[1] = (*paramArray)[1] & 0xfffffcff;\n      **paramArray = **paramArray | 0x200;\n    }\n    else {\n      if (currentValue == (uint *)0x2) {\n        **paramArray = **paramArray | 0x400;\n      }\n      else {\n        **paramArray = **paramArray & 0xfffffbff;\n      }\n      (*paramArray)[1] = (*paramArray)[1] & 0xfffffcff;\n    }\n    currentValue = counterPtr;\n    counterPtr = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    currentValue = counterPtr;\n    counterPtr = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    *(undefined *)((int)paramArray + 0x3d) = 0x20;\n    paramArray[0xc] = (uint *)0x0;\n    if (*(char *)((int)paramArray + 0x3e) == '@') {\n      *(undefined *)((int)paramArray + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)paramArray + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    currentValue = counterPtr;\n    counterPtr = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "update_param_0800306c",
                "param_1": "paramArray",
                "puVar1": "currentValue",
                "param_1[9]": "counterPtr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "initialize_and_execute_0800316c",
            "code": "\nvoid initialize_and_execute_0800316c(uint **parameters)\n\n{\n  int index;\n  uint *pointer_2;\n  uint *pointer_3;\n  \n  if (*(byte *)((int)parameters + 0x3d) - 0x29 < 2) {\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameters + 0x3d) != '`') && (((*parameters)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n    }\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n  }\n  **parameters = **parameters & 0xfffff7ff;\n  pointer_3 = *parameters;\n  if ((pointer_3[1] & 0x800) == 0) {\n    if (*(char *)((int)parameters + 0x3d) == '`') {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0x10] = (uint *)0x0;\n      if ((pointer_3[5] & 0x40) != 0) {\n        pointer_2 = parameters[9];\n        parameters[9] = (uint *)((int)pointer_2 + 1);\n        *(char *)pointer_2 = (char)pointer_3[4];\n      }\n      **parameters = **parameters & 0xfffffffe;\n      FUNC_0800316a(parameters);\n    }\n    else {\n      if ((pointer_3[5] & 0x40) != 0) {\n        pointer_2 = parameters[9];\n        parameters[9] = (uint *)((int)pointer_2 + 1);\n        *(char *)pointer_2 = (char)pointer_3[4];\n      }\n      FUNC_08004ef4(parameters);\n    }\n  }\n  else {\n    pointer_3[1] = pointer_3[1] & 0xfffff7ff;\n    if (*(char *)((int)parameters[0xd] + 0x21) == '\\x01') {\n      parameters[0xe][0xd] = (uint)&LAB_080035fc_1;\n      index = configure_hardware_0800258c(parameters[0xe]);\n      if (index != 0) {\n        if (((*parameters)[5] & 0x40) != 0) {\n          pointer_3 = parameters[9];\n          parameters[9] = (uint *)((int)pointer_3 + 1);\n          *(char *)pointer_3 = (char)(*parameters)[4];\n        }\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xe][0xd])();\n      }\n    }\n    else {\n      parameters[0xd][0xd] = (uint)&LAB_080035fc_1;\n      index = configure_hardware_0800258c(parameters[0xd]);\n      if (index != 0) {\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameters + 0x3d) == '(') && (((uint)parameters[0x10] & 4) != 0)) {\n    parameters[0xb] = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initialize_and_execute_0800316c_08004ec4(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "initialize_and_execute_0800316c",
                "param_1": "parameters",
                "iVar1": "index",
                "puVar2": "pointer_2",
                "puVar3": "pointer_3"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_parameter_080032b4",
            "code": "\nundefined4 processParameter_080032b4(uint **param)\n\n{\n  char charVar;\n  uint *ptrVar1;\n  uint *ptrVar2;\n  \n  charVar = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptrVar1 = *param;\n  if ((ptrVar1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptrVar1[5] & 4) != 0) {\n      ptrVar2 = param[9];\n      param[9] = (uint *)((int)ptrVar2 + 1);\n      *(char *)ptrVar2 = (char)ptrVar1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptrVar1 = param[9];\n      param[9] = (uint *)((int)ptrVar1 + 1);\n      *(char *)ptrVar1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((charVar == '(') || (charVar == '*')) || (charVar == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      initialize_and_execute_08004ec4();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (charVar == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    initialize_and_execute_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_parameter_080032b4",
                "param_1": "param",
                "cVar1": "charVar",
                "puVar2": "ptrVar1",
                "puVar3": "ptrVar2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_input_080033b8",
            "code": "\nvoid process_input_080033b8(int *input_data)\n\n{\n  int data_pointer;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  data_pointer = *input_data;\n  flag3 = *(uint *)(data_pointer + 0x18);\n  flag1 = *(uint *)(data_pointer + 0x14);\n  flag2 = *(uint *)(data_pointer + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          update_flags_080028de(input_data);\n        }\n      }\n      else {\n        set_byte_value_080028d2(input_data);\n      }\n    }\n    else {\n      update_status_08002848(input_data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        handle_param_08002f9c(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_param_0800306c(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_input_080033b8_08002db2(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        check_and_process_data_08002efc(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      process_param_08002cf2();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      process_parameter_080032b4(input_data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_input_080033b8_08002ca6(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_array_and_decrement_08002ad8(input_data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_data_08002c54(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_data_08002ab8(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_input_080033b8",
                "param_1": "input_data",
                "iVar1": "data_pointer",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "update_flags_08003520",
            "code": "\nvoid updateFlags_08003520(uint **pParams)\n\n{\n  char charVal;\n  uint *pVar;\n  uint flags_1;\n  uint flags_2;\n  \n  pVar = *pParams;\n  flags_1 = pVar[5];\n  flags_2 = pVar[1];\n  if (((flags_1 & 0x10100) != 0) && ((flags_2 & 0x100) != 0)) {\n    pParams[0x10] = (uint *)((uint)pParams[0x10] | 1);\n    pVar[5] = 0xfffffeff;\n    **pParams = **pParams | 0x8000;\n  }\n  if (((flags_1 & 0x10200) != 0) && ((flags_2 & 0x100) != 0)) {\n    pParams[0x10] = (uint *)((uint)pParams[0x10] | 2);\n    (*pParams)[5] = 0xfffffdff;\n  }\n  if (((flags_1 & 0x10400) != 0) && ((flags_2 & 0x100) != 0)) {\n    charVal = *(char *)((int)pParams + 0x3d);\n    if (((*(char *)((int)pParams + 0x3e) == ' ') && (*(short *)((int)pParams + 0x2a) == 0)) &&\n       (((charVal == '!' || (charVal == ')')) || ((charVal == '(' && (pParams[0xc] == (uint *)0x21)))))) {\n      validate_and_execute_08002d1c(pParams);\n    }\n    else {\n      pParams[0x10] = (uint *)((uint)pParams[0x10] | 4);\n      if (*(char *)((int)pParams + 0x3e) == '\\x10') {\n        **pParams = **pParams | 0x200;\n      }\n      (*pParams)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags_1 & 0x10800) != 0) && ((flags_2 & 0x100) != 0)) {\n    pParams[0x10] = (uint *)((uint)pParams[0x10] | 8);\n    (*pParams)[5] = 0xfffff7ff;\n  }\n  if (pParams[0x10] != (uint *)0x0) {\n    initialize_and_execute_0800316c(pParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "update_flags_08003520",
                "param_1": "pParams",
                "cVar1": "charVal",
                "puVar2": "pVar",
                "uVar3": "flags_1",
                "uVar4": "flags_2"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "delay_function_0800365c",
            "code": "\nvoid delayFunction_0800365c(int inputValue)\n\n{\n  bool isDelayOngoing;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000084 / 8000);\n  do {\n    isDelayOngoing = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (isDelayOngoing);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "delay_function_0800365c",
                "param_1": "inputValue",
                "local_4": "delayCounter",
                "bVar1": "isDelayOngoing"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_status_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkStatus_08003688(uint *status)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  if ((*status & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (status[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = status[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (status[1] == 0) {\n        start_time = get_data_from_memory_08001cc4();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_data_from_memory_08001cc4();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_data_from_memory_08001cc4();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_data_from_memory_08001cc4();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*status & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (status[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | status[5] << 3;\n    }\n    else if (status[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | status[5] << 3;\n    }\n  }\n  if ((*status & 8) != 0) {\n    if (status[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      delay_function_0800365c(1);\n    }\n  }\n  if ((*status & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    value = status[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (status[3] == 0) {\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_data_from_memory_08001cc4();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (status[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (status[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_data_from_memory_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (status[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | status[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | status[8] | status[9];\n        _DAT_42420060 = 1;\n        start_time = get_data_from_memory_08001cc4();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_data_from_memory_08001cc4();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_data_from_memory_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_data_from_memory_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_data_from_memory_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_status_08003688",
                "param_1": "status",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculateDelay_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 delayFactor;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  delayFactor = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&delayFactor - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "local_1c": "delayFactor",
                "uStack_18": "value1",
                "uStack_14": "value2",
                "uStack_10": "value3",
                "uStack_c": "value4"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_and_calculate_delay_08003ad4",
            "code": "\n\n\nundefined4 initialize_and_calculate_delay_08003ad4(uint *config_array,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint delay_value;\n  \n  if ((_DAT_40022000 & 7) < config_size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_array & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_array[2];\n  }\n  if ((*config_array & 1) != 0) {\n    delay_value = config_array[1];\n    if (delay_value == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay_value != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay_value | _DAT_40021004 & 0xfffffffc;\n    start_time = get_data_from_memory_08001cc4();\n    if (config_array[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_data_from_memory_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (config_array[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_data_from_memory_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_data_from_memory_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (config_size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_array & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config_array[3];\n  }\n  if ((*config_array & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config_array[4] << 3;\n  }\n  delay_value = calculate_delay_08003a68();\n  DAT_20000084 = delay_value >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_memory_08001c3c(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_and_calculate_delay_08003ad4",
                "param_1": "config_array",
                "param_2": "config_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "delay_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_and_configure_08003afa",
            "code": "\n\n\nundefined4 initialize_and_configure_08003afa(uint *config_flags,uint memory_limit)\n\n{\n  int initial_time;\n  int current_time;\n  uint delay;\n  \n  if ((*config_flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_flags[2];\n  }\n  if ((*config_flags & 1) != 0) {\n    delay = config_flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    initial_time = get_memory_data();\n    if (config_flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_memory_data();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (config_flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_memory_data();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_memory_data();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (memory_limit < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | memory_limit;\n    if (memory_limit != (memory_limit & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config_flags[3];\n  }\n  if ((*config_flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config_flags[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_memory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_and_configure_08003afa",
                "param_1": "config_flags",
                "param_2": "memory_limit",
                "iVar1": "initial_time",
                "iVar2": "current_time",
                "uVar3": "delay",
                "get_data_from_memory_08001cc4": "get_memory_data",
                "calculate_delay_08003a68": "calculate_delay",
                "initialize_memory_08001c3c": "initialize_memory"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_from_memory_08003c44",
            "code": "\nundefined4 get_data_from_memory_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_from_memory_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "shifted_data_value_08003c50",
            "code": "\n\n\nuint shiftedDataValue_08003c50(void)\n\n{\n  uint dataFromMemory;\n  \n  dataFromMemory = get_data_from_memory_08003c44();\n  return dataFromMemory >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "shifted_data_value_08003c50",
                "uVar1": "dataFromMemory"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_shifted_data_08003c70",
            "code": "\n\n\nuint get_shifted_data_08003c70(void)\n\n{\n  uint data;\n  \n  data = read_data_from_memory();\n  return data >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_shifted_data_08003c70",
                "uVar1": "data",
                "get_data_from_memory_08003c44": "read_data_from_memory"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "update_configuration_08003c90",
            "code": "\n\n\nundefined4 updateConfiguration_08003c90(uint *configuration)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int counter1;\n  int counter2;\n  bool isFlagSet;\n  \n  if ((*configuration & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      counter1 = get_data_from_memory_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        counter2 = get_data_from_memory_08001cc4();\n        if (100 < (uint)(counter2 - counter1)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (configuration[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        counter1 = get_data_from_memory_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          counter2 = get_data_from_memory_08001cc4();\n          if (5000 < (uint)(counter2 - counter1)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | configuration[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*configuration & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | configuration[2];\n  }\n  if ((*configuration & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | configuration[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "update_configuration_08003c90",
                "param_1": "configuration",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "counter1",
                "iVar4": "counter2",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_delay_08003da4",
            "code": "\n\n\nuint calculate_delay_08003da4(int input_value)\n\n{\n  uint delay_result;\n  undefined2 shifted_value;\n  undefined4 multiplier_1;\n  undefined4 multiplier_2;\n  undefined4 multiplier_3;\n  undefined4 multiplier_4;\n  \n  multiplier_4 = 0x10100f0e;\n  multiplier_3 = 0xd0c0b0a;\n  multiplier_2 = 0x9080706;\n  multiplier_1 = 0x5040302;\n  shifted_value = 0x201;\n  if (input_value == 2) {\n    delay_result = get_shifted_data_08003c70();\n    delay_result = delay_result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      delay_result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        delay_result = 4000000;\n      }\n      else {\n        delay_result = 8000000 / *(byte *)((int)&shifted_value - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      delay_result = delay_result * *(byte *)((int)&multiplier_1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        delay_result = (delay_result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      delay_result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      delay_result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        delay_result = 0;\n      }\n      else {\n        delay_result = 0xf424;\n      }\n    }\n    else {\n      delay_result = 0;\n    }\n  }\n  else {\n    delay_result = 0;\n  }\n  return delay_result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_delay_08003da4",
                "param_1": "input_value",
                "uVar1": "delay_result",
                "local_24": "shifted_value",
                "uStack_20": "multiplier_1",
                "uStack_1c": "multiplier_2",
                "uStack_18": "multiplier_3",
                "uStack_14": "multiplier_4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "check_and_execute_callback_08003ea0",
            "code": "\n\n\nvoid checkAndExecuteCallback_08003ea0(uint **data)\n\n{\n  if (((**data & 2) != 0) && (((*data)[1] & 2) != 0)) {\n    executeValidCallback();\n    (*data)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)data + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "check_and_execute_callback_08003ea0",
                "param_1": "data",
                "execute_callback_if_valid_08004d18": "executeValidCallback"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "update_flags_08003ed8",
            "code": "\nvoid updateFlags_08003ed8(uint **param)\n\n{\n  uint *ptr;\n  \n  *(undefined *)((int)param + 0x3d) = 2;\n  ptr = *param;\n  if ((ptr[8] & 0x1111) == 0) {\n    if ((ptr[8] & 0x444) == 0) {\n      *ptr = *ptr & 0xfffffffe;\n    }\n  }\n  updateFlags_08003ed808004b34(param);\n  *(undefined *)((int)param + 0x3d) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "update_flags_08003ed8",
                "param_1": "param",
                "puVar1": "ptr",
                "update_flags_08004b34": "updateFlags08004b34"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "execute_operations_08003f18",
            "code": "\nvoid execute_operations_08003f18(int *arguments)\n\n{\n  int value;\n  \n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(arguments + 7) = 1;\n    if ((*(uint *)(*arguments + 0x18) & 3) == 0) {\n      execute_condition_function();\n      FUNC_08003f14(arguments);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(arguments + 7) = 0;\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(arguments + 7) = 2;\n    if ((*(uint *)(*arguments + 0x18) & 0x300) == 0) {\n      execute_condition_function(arguments);\n      FUNC_08003f14(arguments);\n    }\n    else {\n      FUNC_08003f12(arguments);\n    }\n    *(undefined *)(arguments + 7) = 0;\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(arguments + 7) = 4;\n    if ((*(uint *)(*arguments + 0x1c) & 3) == 0) {\n      execute_condition_function(arguments);\n      FUNC_08003f14(arguments);\n    }\n    else {\n      FUNC_08003f12(arguments);\n    }\n    *(undefined *)(arguments + 7) = 0;\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(arguments + 7) = 8;\n    if ((*(uint *)(*arguments + 0x1c) & 0x300) == 0) {\n      execute_condition_function(arguments);\n      FUNC_08003f14(arguments);\n    }\n    else {\n      FUNC_08003f12(arguments);\n    }\n    *(undefined *)(arguments + 7) = 0;\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    subtract_four(arguments);\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(arguments);\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(arguments);\n  }\n  value = *arguments;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_08004178(arguments);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "execute_operations_08003f18",
                "param_1": "arguments",
                "iVar1": "value",
                "execute_function_if_condition_met_08004df8": "execute_condition_function",
                "execute_subtract_four_function_08004e12": "subtract_four"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bitwise_operation_08004092",
            "code": "\nvoid updateBitwiseOperation_08004092(int dataPtr,uint bitPosition,int newValue)\n\n{\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bitwise_operation_08004092",
                "param_1": "dataPtr",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_and_clear_flags_080040b0",
            "code": "\nundefined4 update_and_clear_flags_080040b0(uint **data_ptr,undefined4 value)\n\n{\n  uint *temp_ptr;\n  \n  update_bitwise_operation_08004092(*data_ptr,value,0);\n  if (((*data_ptr == (uint *)0x40012c00) && ((constant_2 & 0x1111) == 0)) &&\n     ((constant_2 & 0x444) == 0)) {\n    flag = flag & 0xffff7fff;\n  }\n  temp_ptr = *data_ptr;\n  if (((temp_ptr[8] & 0x1111) == 0) && ((temp_ptr[8] & 0x444) == 0)) {\n    *temp_ptr = *temp_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)data_ptr + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_and_clear_flags_080040b0",
                "param_1": "data_ptr",
                "param_2": "value",
                "puVar1": "temp_ptr",
                "uRam40012c20": "constant_2",
                "uRam40012c44": "flag"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bitwise_value_08004110",
            "code": "\nvoid updateBitwiseValue_08004110(int targetAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(targetAddress + 0x20) = *(uint *)(targetAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(targetAddress + 0x20) = *(uint *)(targetAddress + 0x20) | newValue << (bitPosition & 0xff);\n  void;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bitwise_value_08004110",
                "param_1": "targetAddress",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "return": "void"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "update_and_check_bitwise_values_0800412c",
            "code": "\nundefined4 updateAndCheckBitwiseValues_0800412c(uint **inputPtr,undefined4 paramVal)\n\n{\n  uint *ptr;\n  \n  update_bitwise_value_08004110(*inputPtr,paramVal,0);\n  ptr = *inputPtr;\n  if (((valuePtr[8] & 0x1111) == 0) && ((valuePtr[8] & 0x444) == 0)) {\n    valuePtr[0x11] = valuePtr[0x11] & 0xffff7fff;\n  }\n  ptr = *inputPtr;\n  if (((valuePtr[8] & 0x1111) == 0) && ((valuePtr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "update_and_check_bitwise_values_0800412c",
                "param_1": "inputPtr",
                "param_2": "paramVal",
                "puVar1": "ptr",
                "puVar1[8]": "valuePtr[8]",
                "puVar1[0x11]": "valuePtr[0x11]"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "update_memory_values_0800417c",
            "code": "\nvoid updateMemoryValues_0800417c(int *memoryAddress)\n\n{\n  *(uint *)(*memoryAddress + 0xc) = *(uint *)(*memoryAddress + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryAddress + 0x14) = *(uint *)(*memoryAddress + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryAddress + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "update_memory_values_0800417c",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "process_data_08004198",
            "code": "\nundefined4 processData_08004198(int *data)\n\n{\n  short iterationCount;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  iterationCount = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = iterationCount;\n  if (iterationCount == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "sVar1": "iterationCount",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_shifted_data_08004204",
            "code": "\nvoid calculateShiftedData_08004204(int *inputArray)\n\n{\n  int shiftedData1;\n  int shiftedData2;\n  int shiftedData3;\n  int shiftedData4;\n  int shiftedData5;\n  int shiftedData6;\n  int shiftedData7;\n  int shiftedData8;\n  int shiftedData9;\n  int baseAddress;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  baseAddress = *inputArray;\n  if (baseAddress != 0x40013800) {\n    shiftedData1 = shifted_data_value_08003c50();\n    shiftedData6 = inputArray[1];\n    shiftedData2 = shifted_data_value_08003c50();\n    shiftedData7 = inputArray[1];\n    shiftedData3 = shifted_data_value_08003c50();\n    shiftedData8 = inputArray[1];\n    shiftedData4 = shifted_data_value_08003c50();\n    shiftedData9 = inputArray[1];\n    shiftedData5 = shifted_data_value_08003c50();\n    *(uint *)(baseAddress + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedData4 * 0x19) / (uint)(shiftedData9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedData5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedData2 * 0x19) / (uint)(shiftedData7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedData3 * 0x19) / (ulonglong)(uint)(shiftedData8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedData1 * 0x19) / (ulonglong)(uint)(shiftedData6 << 2)) / 100) * 0x10;\n    return;\n  }\n  baseAddress = get_shifted_data_08003c70();\n  shiftedData5 = inputArray[1];\n  shiftedData1 = get_shifted_data_08003c70();\n  shiftedData6 = inputArray[1];\n  shiftedData2 = get_shifted_data_08003c70();\n  shiftedData7 = inputArray[1];\n  shiftedData3 = get_shifted_data_08003c70();\n  shiftedData8 = inputArray[1];\n  shiftedData4 = get_shifted_data_08003c70();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedData3 * 0x19) / (uint)(shiftedData8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedData4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedData1 * 0x19) / (uint)(shiftedData6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedData2 * 0x19) / (ulonglong)(uint)(shiftedData7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(baseAddress * 0x19) / (ulonglong)(uint)(shiftedData5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_shifted_data_08004204",
                "param_1": "inputArray",
                "iVar1": "shiftedData1",
                "iVar2": "shiftedData2",
                "iVar3": "shiftedData3",
                "iVar4": "shiftedData4",
                "iVar5": "shiftedData5",
                "iVar6": "shiftedData6",
                "iVar7": "shiftedData7",
                "iVar8": "shiftedData8",
                "iVar9": "shiftedData9",
                "iVar10": "baseAddress"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_condition_and_modify_data_080043b4",
            "code": "\nundefined4 checkConditionAndModifyData_080043b4(uint **dataPtr,uint flag,uint expectedCondition,int valueToCompare,uint maxDifference)\n\n{\n  int dataValue;\n  \n  do {\n    if (((flag & ~**dataPtr) == 0) != expectedCondition) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (dataValue = getDataFromMemory(), (uint)(dataValue - valueToCompare) <= maxDifference))));\n  (*dataPtr)[3] = (*dataPtr)[3] & 0xfffffe5f;\n  (*dataPtr)[5] = (*dataPtr)[5] & 0xfffffffe;\n  *(undefined *)((int)dataPtr + 0x39) = 0x20;\n  *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n  *(undefined *)(dataPtr + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_condition_and_modify_data_080043b4",
                "param_1": "dataPtr",
                "param_2": "flag",
                "param_3": "expectedCondition",
                "param_4": "valueToCompare",
                "param_5": "maxDifference",
                "iVar1": "dataValue",
                "get_data_from_memory_08001cc4": "getDataFromMemory"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_data_0800441a",
            "code": "\nundefined4 initializeData_0800441a(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculate_shifted_data_08004204(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_data_0800441a",
                "param_1": "data"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 process_data_08004478(int *data_array,ushort *data_buffer,int buffer_length,undefined4 extra_param)\n\n{\n  int condition_result;\n  undefined4 result;\n  \n  if (*(char *)((int)data_array + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (buffer_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_array + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_array + 0xe) = 1;\n      data_array[0xf] = 0;\n      *(undefined *)((int)data_array + 0x39) = 0x21;\n      result = get_data_from_memory();\n      *(short *)(data_array + 9) = (short)buffer_length;\n      *(short *)((int)data_array + 0x26) = (short)buffer_length;\n      while (*(short *)((int)data_array + 0x26) != 0) {\n        *(short *)((int)data_array + 0x26) = *(short *)((int)data_array + 0x26) + -1;\n        if (data_array[2] == 0x1000) {\n          condition_result = check_and_modify_data(data_array,0x80,0,result,extra_param);\n          if (condition_result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = *data_buffer & 0x1ff;\n          if (data_array[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          condition_result = check_and_modify_data(data_array,0x80,0,result,extra_param);\n          if (condition_result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      condition_result = check_and_modify_data(data_array,0x40,0,result,extra_param);\n      if (condition_result == 0) {\n        *(undefined *)((int)data_array + 0x39) = 0x20;\n        *(undefined *)(data_array + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_array",
                "param_2": "data_buffer",
                "param_3": "buffer_length",
                "param_4": "extra_param",
                "iVar1": "condition_result",
                "uVar2": "result",
                "get_data_from_memory_08001cc4": "get_data_from_memory",
                "check_condition_and_modify_data_080043b4": "check_and_modify_data"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "modify_buffer_0800455a",
            "code": "\nundefined4 modify_buffer_0800455a(int *buffer,int value_1,int value_2)\n\n{\n  if (*(char *)((int)buffer + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(buffer + 0xe) != '\\x01') {\n    buffer_element_8 = value_1;\n    *(short *)(buffer + 9) = (short)value_2;\n    *(short *)((int)buffer + 0x26) = (short)value_2;\n    buffer_element_0xf = 0;\n    *(undefined *)((int)buffer + 0x39) = 0x21;\n    *(undefined *)(buffer + 0xe) = 0;\n    *(uint *)(*buffer + 0xc) = *(uint *)(*buffer + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "modify_buffer_0800455a",
                "param_1": "buffer",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "buffer_element_8",
                "param_1[0xf]": "buffer_element_0xf"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "validate_params_080045a2",
            "code": "\nundefined4 validate_params_080045a2(int *array,int size,int value)\n\n{\n  if (*(char *)((int)array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array[10] = size;\n    *(short *)(array + 0xb) = (short)value;\n    *(short *)((int)array + 0x2e) = (short)value;\n    array[15] = 0;\n    *(undefined *)((int)array + 0x3a) = 0x22;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x100;\n    *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) | 1;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "validate_params_080045a2",
                "param_1": "array",
                "param_2": "size",
                "param_3": "value",
                "param_1[10]": "array[10]",
                "param_1[0xf]": "array[15]"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "clear_bit_and_set_flag_080045fe",
            "code": "\nundefined4 clearBitAndSetFlag_080045fe(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputArray + 0x39) = 0x20;\n  executeProcessValue();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "clear_bit_and_set_flag_080045fe",
                "param_1": "inputArray",
                "process_value_08005604": "executeProcessValue"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "decode_data_08004618",
            "code": "\nundefined4 decode_data_08004618(int *data)\n\n{\n  byte *bytePointer;\n  short shortValue;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  shortValue = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = shortValue;\n  if (shortValue != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_selected_function_080055e0();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "decode_data_08004618",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "shortValue",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_data_080046b8",
            "code": "\nvoid process_data_080046b8(uint **input_data)\n\n{\n  int result;\n  uint flag_value;\n  uint *data_ptr;\n  uint bit_flag;\n  uint data_value;\n  \n  data_ptr = *input_data;\n  data_value = *data_ptr;\n  flag_value = data_ptr[3];\n  if ((((data_value & 0xf) == 0) && ((data_value & 0x20) != 0)) && ((flag_value & 0x20) != 0)) {\n    decode_data_08004618(input_data);\n    return;\n  }\n  if (((data_value & 0xf) == 0) || ((bit_flag = data_ptr[5] & 1, bit_flag == 0 && ((flag_value & 0x120) == 0)))) {\n    if (((data_value & 0x80) != 0) && ((flag_value & 0x80) != 0)) {\n      process_data_080046b8_08004198(input_data);\n      return;\n    }\n    if (((data_value & 0x40) != 0) && ((flag_value & 0x40) != 0)) {\n      clear_bit_and_set_flag_080045fe(input_data);\n    }\n  }\n  else {\n    if (((data_value & 1) != 0) && ((flag_value & 0x100) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((data_value & 4) != 0) && (bit_flag != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((data_value & 2) != 0) && (bit_flag != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((data_value & 8) != 0) && (bit_flag != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((data_value & 0x20) != 0) && ((flag_value & 0x20) != 0)) {\n        decode_data_08004618(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && (((*input_data)[5] & 0x40) == 0)) {\n        FUNC_08005650(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      update_memory_values_0800417c(input_data);\n      data_ptr = *input_data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        FUNC_08005650(input_data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        FUNC_08005650(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)&LAB_080047d8_1;\n      result = configure_hardware_0800258c(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "flag_value",
                "puVar3": "data_ptr",
                "uVar4": "bit_flag",
                "uVar5": "data_value"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "address"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "get_bit_value_080047f4",
            "code": "\nuint getBitValue_080047f4(uint bitIndex,int arrayAddress)\n\n{\n  return *(uint *)(arrayAddress + ((bitIndex << 0x18) >> 0x1c) * 4) >> (bitIndex & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "get_bit_value_080047f4",
                "param_1": "bitIndex",
                "param_2": "arrayAddress"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "update_array_value_0800480a",
            "code": "\nvoid updateArrayValue_0800480a(uint valueIndex,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (valueIndex << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (valueIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "update_array_value_0800480a",
                "param_1": "valueIndex",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_value_at_offset_08004828",
            "code": "\nvoid updateValueAtOffset_08004828(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_value_at_offset_08004828",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 getMemoryAddress_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_memory_permissions_08004884",
            "code": "\n\n\nundefined4 setMemoryPermissions_08004884(undefined4 permissionLevel)\n\n{\n  undefined4 baseAddress;\n  \n  switch(permissionLevel) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    baseAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    baseAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    baseAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    baseAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    baseAddress = 0x40011800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_memory_permissions_08004884",
                "param_1": "permissionLevel",
                "uVar1": "baseAddress"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "find_closest_value_0800492c",
            "code": "\nuint find_closest_value_0800492c(undefined4 input_value,undefined4 unused_param,undefined4 default_value,undefined4 unused_param_2)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = find_value_or_default_08004cce(input_value,&DAT_08007400,default_value,unused_param_2,unused_param_2);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_result - 1) {\n    shifted_result = 0;\n  }\n  return shifted_result;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "find_closest_value_0800492c",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "unused_param_2",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "find_value_and_convert_08004948",
            "code": "\nundefined4 find_value_and_convert_08004948(undefined4 value,undefined4 ptr1,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = find_value_or_default_08004cce(value,&DAT_080074b4,param1,param2,param2);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "find_value_and_convert_08004948",
                "param_1": "value",
                "param_2": "ptr1",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "set_permissions_and_update_bits_08004974",
            "code": "\n\n\nvoid set_permissions_and_update_bits_08004974(int *data_ptr,undefined4 permission)\n\n{\n  undefined4 return_value;\n  uint permissions;\n  int data_value;\n  uint bit_mask;\n  undefined4 bit_shift;\n  undefined4 bit_update;\n  \n  data_value = *data_ptr;\n  if (data_value == 0x40012400) {\n    permissions = _DAT_40021018 | 0x200;\n    data_value = 0x200;\n    _DAT_40021018 = permissions;\n  }\n  else {\n    permissions = 0x40012800;\n    if (data_value == 0x40012800) {\n      permissions = _DAT_40021018 | 0x400;\n      data_value = 0x400;\n      _DAT_40021018 = permissions;\n    }\n  }\n  return_value = set_memory_permissions_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,permission,permissions,data_value);\n  bit_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  bit_shift = 3;\n  bit_update = 0;\n  update_bits_08002624(return_value,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "set_permissions_and_update_bits_08004974",
                "param_1": "data_ptr",
                "param_2": "permission",
                "uVar1": "return_value",
                "uVar2": "permissions",
                "iVar3": "data_value",
                "local_18": "bit_mask",
                "local_14": "bit_shift",
                "local_10": "bit_update"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_peripheral_access_080049f0",
            "code": "\n\n\nvoid updatePeripheralAccess_080049f0(int *peripheralAddress)\n\n{\n  if (*peripheralAddress != 0x40012400) {\n    if (*peripheralAddress == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_peripheral_access_080049f0",
                "param_1": "peripheralAddress"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "validate_and_configure_08004a4c",
            "code": "\nundefined2 validate_and_configure_08004a4c(undefined4 input_value)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint closest_value;\n  undefined4 is_valid;\n  undefined4 setting;\n  int array_value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  undefined4 unused5;\n  undefined4 unused6;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  fill_memory_080061e0(&array_value,0,0x30);\n  closest_value = 0;\n  is_valid = 0;\n  setting = 0;\n  result = 0;\n  array_value = check_value_in_array_08004c78(input_value,&DAT_08007400);\n  if (array_value == 0) {\n    result = 0;\n  }\n  else {\n    unused1 = 0;\n    unused2 = 0;\n    unused3 = 0;\n    unused5 = 0;\n    constant1 = 0xe0000;\n    constant2 = 0;\n    unused4 = 1;\n    unused6 = 0;\n    DAT_20000080 = (undefined)input_value;\n    iVar1 = update_permissions_0800213c(&array_value);\n    if (iVar1 == 0) {\n      closest_value = find_closest_value_0800492c(input_value);\n      if (closest_value < 0x12) {\n        is_valid = 1;\n        setting = 2;\n        iVar1 = apply_settings_08001e48(&array_value,&closest_value);\n        if (iVar1 == 0) {\n          iVar1 = check_and_update_data_08002384(&array_value);\n          if (iVar1 == 0) {\n            iVar1 = initialize_verify_data_08002004(&array_value);\n            if (iVar1 == 0) {\n              iVar1 = calculate_execution_time_08001cd0(&array_value,10);\n              if (iVar1 == 0) {\n                uVar2 = get_data_at_offset_08001f80(&array_value);\n                if ((uVar2 & 0x200) != 0) {\n                  result = get_offset_from_pointer_08001e40(&array_value);\n                }\n                iVar1 = check_and_update_flags_08002348(&array_value);\n                if (iVar1 == 0) {\n                  iVar1 = update_peripheral_0800224c(&array_value);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "validate_and_configure_08004a4c",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "closest_value",
                "local_40": "is_valid",
                "local_3c": "setting",
                "local_38": "array_value",
                "local_34": "unused1",
                "local_30": "unused2",
                "local_2c": "unused3",
                "local_28": "unused4",
                "local_24": "unused5",
                "local_20": "unused6",
                "local_1c": "constant1",
                "local_10": "constant2"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "update_flags_08004b34",
            "code": "\nvoid update_flags_08004b34(void)\n\n{\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "update_flags_08004b34",
                "update_flags_based_on_param_08004d90": "set_flags"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "process_binary_data_08004b3c",
            "code": "\nvoid processBinaryData_08004b3c(undefined4 inputValue)\n\n{\n  int convertedValue;\n  uint flags;\n  int arrayValues [17];\n  \n  arrayValues[0] = check_value_in_array_08004c78(inputValue,&DAT_080074b4);\n  if ((arrayValues[0] != 0) &&\n     ((((convertedValue = find_value_and_convert_08004948(inputValue), convertedValue == 0 || (convertedValue == 4)) || (convertedValue == 8)) ||\n      ((convertedValue == 0xc || (convertedValue == 0x18)))))) {\n    flags = find_value_or_default_08004cce(inputValue,&DAT_080074b4);\n    if ((flags & 0x100000) == 0) {\n      update_and_clear_flags_080040b0(arrayValues,convertedValue);\n    }\n    else {\n      update_and_check_bitwise_values_0800412c(arrayValues,convertedValue);\n    }\n    update_flags_08003ed8(arrayValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "process_binary_data_08004b3c",
                "param_1": "inputValue",
                "iVar1": "convertedValue",
                "uVar2": "flags",
                "local_50": "arrayValues"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_memory_data_08004b94",
            "code": "\nvoid initializeMemoryData_08004b94(void)\n\n{\n  retrieveDataFromMemory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_memory_data_08004b94",
                "get_data_from_memory_08001cc4": "retrieveDataFromMemory"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "initialize_and_update_system_08004b9e",
            "code": "\nvoid initialize_and_update_system_08004b9e(void)\n\n{\n  update_variable_addition();\n  initialize_system();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "initialize_and_update_system_08004b9e",
                "update_variable_addition_08001cac": "update_variable_addition",
                "initialize_system_08002582": "initialize_system"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_memory_permissions_08004bb0",
            "code": "\n\n\nvoid initializeMemoryPermissions_08004bb0(uint inputValue,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 memoryPermissions;\n  uint bitMask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  memoryPermissions = set_memory_permissions_08004884((inputValue << 0x18) >> 0x1c);\n  bitMask = 1 << (inputValue & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((inputValue - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((inputValue == 0xf) || (inputValue == 0x13)) || (inputValue == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_bits_08002624(memoryPermissions,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_memory_permissions_08004bb0",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "memoryPermissions",
                "local_20": "bitMask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_output_based_on_condition_08004c30",
            "code": "\nvoid set_output_based_on_condition_08004c30(undefined4 output_param,undefined2 status_param,int condition,undefined4 data_param)\n\n{\n  if (condition == 0) {\n    set_output_value_0800281e(output_param,status_param,0,data_param,data_param);\n    return;\n  }\n  set_output_value_0800281e(output_param,status_param,1,data_param,data_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_output_based_on_condition_08004c30",
                "param_1": "output_param",
                "param_2": "status_param",
                "param_3": "condition",
                "param_4": "data_param"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "check_bitmask_08004c48",
            "code": "\nvoid check_bitmask_08004c48(undefined4 argument_1,undefined2 argument_2,undefined4 argument_3,undefined4 argument_4)\n\n{\n  check_bitmask_08004c48_08002810(argument_1,argument_2,argument_3,argument_4,argument_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "check_bitmask_08004c48",
                "param_1": "argument_1",
                "param_2": "argument_2",
                "param_3": "argument_3",
                "param_4": "argument_4"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_system_08004c52",
            "code": "\nvoid initialize_system_08004c52(void)\n\n{\n  initialize_and_update_data();\n  initialize_and_configure_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "initialize_and_update_data_08001c88": "initialize_and_update_data",
                "initialize_and_configure_system_08001b48": "initialize_and_configure_system"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_in_array_08004c5e",
            "code": "\nundefined4 find_value_in_array_08004c5e(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "check_value_in_array_08004c78",
            "code": "\nundefined4 check_value_in_array_08004c78(int value)\n\n{\n  undefined4 result;\n  \n  if (value != -1) {\n    result = find_value_in_array_08004c5e();\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "check_value_in_array_08004c78",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_character_index_08004c8a",
            "code": "\nint find_character_index_08004c8a(int character,char *string)\n\n{\n  while( true ) {\n    if (*(int *)(string + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(string + 4) == character) break;\n    string = string + 0xc;\n  }\n  return (int)*string;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_character_index_08004c8a",
                "param_1": "character",
                "param_2": "string"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_character_index_or_default_08004ca2",
            "code": "\nundefined4 findCharacterIndexOrDefault_08004ca2(int input)\n\n{\n  undefined4 characterIndex;\n  \n  if (input != 0) {\n    characterIndex = find_character_index_08004c8a();\n    return characterIndex;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_character_index_or_default_08004ca2",
                "param_1": "input",
                "uVar1": "characterIndex"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_in_array_08004cb2",
            "code": "\nuint32_t find_value_in_array_08004cb2(int value_to_find,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value_to_find) break;\n    array = array + 0xc;\n  }\n  return *(uint32_t *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "value_to_find",
                "param_2": "array",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_value_or_default_08004cce",
            "code": "\nundefined4 find_value_or_default_08004cce(int value)\n\n{\n  undefined4 result;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  result = find_value_in_array_08004cb2();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_value_or_default_08004cce",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_element_08004ce2",
            "code": "\nundefined4 find_element_08004ce2(int element,char *array)\n\n{\n  if (element == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (element == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_element_08004ce2",
                "param_1": "element",
                "param_2": "array"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_nonzero_08004d06",
            "code": "\nint compare_and_return_nonzero_08004d06(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_nonzero_08004d06",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_if_valid_08004d18",
            "code": "\nvoid executeCallbackIfValid_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_if_valid_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "run_infinite_loop_08004d40",
            "code": "\nvoid runInfiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "run_infinite_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_hardware_08004d44",
            "code": "\n\n\nvoid initializeHardware_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_hardware_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_flags_based_on_param_08004d90",
            "code": "\n\n\nvoid updateFlagsBasedOnParam_08004d90(int *param)\n\n{\n  if (*param == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*param == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*param == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*param == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_flags_based_on_param_08004d90",
                "param_1": "param"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtractFour_08004df4(int input_number)\n\n{\n  return input_number + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input_number"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_function_if_condition_met_08004df8",
            "code": "\nvoid execute_function_if_condition_met_08004df8(int input_parameter)\n\n{\n  int result;\n  \n  result = get_function_address();\n  if ((*(code **)(result + 0x4c) != (code *)0x0) && (*(char *)(input_parameter + 0x1c) == '\\x01')) {\n    (**(code **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_function_if_condition_met_08004df8",
                "param_1": "input_parameter",
                "iVar1": "result",
                "subtract_four_08004df4": "get_function_address"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_subtract_four_function_08004e12",
            "code": "\nvoid executeSubtractFourFunction_08004e12(void)\n\n{\n  int result;\n  \n  result = subtractFourFunction();\n  if (*(functionPointer **)(result + 0x48) != (functionPointer *)0x0) {\n    (**(functionPointer **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_subtract_four_function_08004e12",
                "iVar1": "result",
                "subtract_four_08004df4": "subtractFourFunction",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "execute_operations_if_data_present_08004e20",
            "code": "\nvoid execute_operations_if_data_present_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    execute_operations_08003f18();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "execute_operations_if_data_present_08004e20"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtract_four_08004e70(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "num"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "process_param_08004e74",
            "code": "\nvoid process_param_08004e74(int input_1,int input_2,int input_3,undefined4 input_4)\n\n{\n  int temp_value1;\n  \n  temp_value1 = subtract_four_08004e70();\n  if (input_3 == *(int *)(input_1 + 0xc)) {\n    if (input_2 == 0) {\n      *(undefined *)(temp_value1 + 0x88) = 0;\n      *(undefined *)(temp_value1 + 0x5c) = 0;\n      if (*(code **)(temp_value1 + 100) != (code *)0x0) {\n        (**(code **)(temp_value1 + 100))();\n      }\n      check_and_update_param_08002af8(input_1,temp_value1 + 0x68,*(undefined *)(temp_value1 + 0x88),8);\n      return;\n    }\n    *(undefined *)(temp_value1 + 0x5c) = 1;\n    process_param_08004e74_08002b84(input_1,temp_value1 + 0x68,0x20,8,input_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "process_param_08004e74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_value1"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "initialize_and_execute_08004ec4",
            "code": "\nvoid initialize_and_execute_08004ec4(undefined4 arg)\n\n{\n  int result;\n  \n  result = calculate_offset();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "initialize_and_execute_08004ec4",
                "param_1": "arg",
                "iVar1": "result",
                "subtract_four_08004e70": "calculate_offset",
                "initialize_data_08002c10": "initialize_data"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "FUNC_08004ef4",
            "code": "\nvoid FUNC_08004ef4(undefined4 param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = subtract_four_08004e70();\n  if (*(char *)(iVar1 + 0x5d) == '\\0') {\n    initialize_data_08002c10(param_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "FUNC_08004ef4"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "configure_uart_pins_08004f4c",
            "code": "\n\n\nvoid configureUARTPins_08004f4c(int *uartPinConfig)\n\n{\n  int uartPinConfigValue1;\n  int uartPinConfigValue2;\n  undefined4 memoryPermissions1;\n  uint pinConfigValue;\n  uint mask;\n  uint pinConfigValueShifted;\n  uint pinValue;\n  undefined4 constantValue;\n  \n  if (uartPinConfig != (int *)0x0) {\n    uartPinConfigValue1 = check_value_in_array_08004c78((int)*(char *)(uartPinConfig + 0x16),&DAT_0800764c);\n    uartPinConfigValue2 = check_value_in_array_08004c78((int)*(char *)((int)uartPinConfig + 0x59),&DAT_08007604);\n    if ((uartPinConfigValue2 == 0) || (uartPinConfigValue1 == 0)) {\n      process_data_080068f0(\"ERROR: at least one UART pin has no peripheral\\n\",uartPinConfigValue2);\n    }\n    else {\n      uartPinConfigValue1 = compare_and_return_nonzero_08004d06(uartPinConfigValue1);\n      *uartPinConfig = uartPinConfigValue1;\n      if (uartPinConfigValue1 == 0) {\n        process_data_080068f0(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinConfigValue1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartPinConfig + 0x11) = 0;\n          *(undefined *)((int)uartPinConfig + 0x5a) = 0x25;\n        }\n        else if (uartPinConfigValue1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartPinConfig + 0x11) = 1;\n          *(undefined *)((int)uartPinConfig + 0x5a) = 0x26;\n        }\n        else if (uartPinConfigValue1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartPinConfig + 0x11) = 2;\n          *(undefined *)((int)uartPinConfig + 0x5a) = 0x27;\n        }\n        memoryPermissions1 = set_memory_permissions_08004884((uint)((int)*(char *)((int)uartPinConfig + 0x59) << 0x18) >> 0x1c);\n        pinConfigValue = find_value_or_default_08004cce((int)*(char *)((int)uartPinConfig + 0x59),&DAT_08007604);\n        mask = 1 << (*(byte *)((int)uartPinConfig + 0x59) & 0xf) & 0xffff;\n        pinConfigValueShifted = (pinConfigValue >> 3 & 1) << 4 | pinConfigValue & 7;\n        pinValue = (pinConfigValue << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinConfigValue << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        constantValue = 3;\n        update_bits_08002624(memoryPermissions1,&mask);\n        memoryPermissions1 = set_memory_permissions_08004884((uint)((int)*(char *)(uartPinConfig + 0x16) << 0x18) >> 0x1c);\n        pinConfigValue = find_value_or_default_08004cce((int)*(char *)(uartPinConfig + 0x16),&DAT_0800764c);\n        mask = 1 << (*(byte *)(uartPinConfig + 0x16) & 0xf) & 0xffff;\n        pinConfigValueShifted = (pinConfigValue >> 3 & 1) << 4 | pinConfigValue & 7;\n        pinValue = (pinConfigValue << 0x1a) >> 0x1e;\n        update_bits_08002624(memoryPermissions1,&mask);\n        (&DAT_2000032c)[*(byte *)(uartPinConfig + 0x11)] = uartPinConfig + 1;\n        uartPinConfig[1] = *uartPinConfig;\n        uartPinConfig[2] = uartPinConfig[0x12];\n        uartPinConfig[3] = uartPinConfig[0x13];\n        uartPinConfig[4] = uartPinConfig[0x14];\n        uartPinConfig[5] = uartPinConfig[0x15];\n        uartPinConfig[6] = 0xc;\n        uartPinConfig[7] = 0;\n        uartPinConfig[8] = 0;\n        initialize_data_0800441a(uartPinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "uartPinConfig",
                "iVar1": "uartPinConfigValue1",
                "iVar2": "uartPinConfigValue2",
                "uVar3": "memoryPermissions1",
                "uVar4": "pinConfigValue",
                "local_20": "mask",
                "local_1c": "pinConfigValueShifted",
                "local_18": "pinValue",
                "local_14": "constantValue"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initialize_uart_08005384(void)\n\n{\n  int value_exists;\n  undefined4 value_to_check;\n  \n  value_exists = check_value_in_array_08004c78(2,&DAT_0800764c);\n  if (value_exists != 0) {\n    value_to_check = check_value_in_array_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = find_character_index_or_default_08004ca2(value_to_check,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    configure_uart_pins(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "value_exists",
                "uVar2": "value_to_check",
                "configure_uart_pins_08004f4c": "configure_uart_pins"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_data_080053d4",
            "code": "\nuint process_data_080053d4(undefined4 input_param,uint flag_param)\n\n{\n  int data_from_memory;\n  int array_check_result;\n  uint loop_counter;\n  \n  data_from_memory = get_data_from_memory_08001cc4();\n  array_check_result = check_value_in_array_08004c78(2,&DAT_0800764c);\n  if (array_check_result == 0) {\n    return 0;\n  }\n  for (loop_counter = 0;\n      (loop_counter < 5 &&\n      (((&DAT_2000032c)[loop_counter] == 0 ||\n       (array_check_result = check_value_in_array_08004c78(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[loop_counter] != array_check_result))));\n      loop_counter = loop_counter + 1 & 0xff) {\n  }\n  if (4 < loop_counter) {\n    if ((4 < DAT_200000cc) && (initialize_uart_08005384(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    loop_counter = (uint)DAT_200000cc;\n  }\n  do {\n    array_check_result = process_data_080053d4_08004478((&DAT_2000032c)[loop_counter],input_param,flag_param & 0xffff,1000);\n    if (array_check_result == 0) {\n      return flag_param;\n    }\n    array_check_result = get_data_from_memory_08001cc4();\n  } while ((uint)(array_check_result - data_from_memory) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_data_080053d4",
                "param_1": "input_param",
                "param_2": "flag_param",
                "iVar1": "data_from_memory",
                "iVar2": "array_check_result",
                "uVar3": "loop_counter"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "check_flag_condition_0800548c",
            "code": "\nbool checkFlagCondition_0800548c(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "check_flag_condition_0800548c",
                "param_1": "inputValue",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "check_combination_validity_080054b0",
            "code": "\nbool check_combination_validity_080054b0(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_2000032c)[*(byte *)(input_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "check_combination_validity_080054b0",
                "param_1": "input_value",
                "uVar1": "combined_bytes",
                "combine_bytes_080047e8": "combine_bytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "extract_flag_080054d4",
            "code": "\nundefined4 extractFlag_080054d4(int flagPointer,undefined *output,undefined4 condition1,undefined4 condition2)\n\n{\n  int flagCondition;\n  \n  if (flagPointer == 0) {\n    return 0xffffffff;\n  }\n  flagCondition = check_flag_condition_0800548c();\n  if (flagCondition == 0) {\n    *output = *(undefined *)(flagPointer + 0x45);\n    validate_params_080045a2((&DAT_2000032c)[*(byte *)(flagPointer + 0x44)],flagPointer + 0x45,1,&DAT_2000032c,condition2);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "extract_flag_080054d4",
                "param_1": "flagPointer",
                "param_2": "output",
                "param_3": "condition1",
                "param_4": "condition2",
                "iVar1": "flagCondition"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "store_param_08005510",
            "code": "\nvoid storeParam_08005510(int input,undefined4 data,undefined4 address,undefined4 flag)\n\n{\n  int conditionResult;\n  uint index;\n  \n  if (input != 0) {\n    conditionResult = check_flag_condition_0800548c();\n    if (conditionResult == 0) {\n      index = (uint)*(byte *)(input + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = data;\n      *(int *)(&DAT_200002f0 + index * 4) = input;\n      update_memory_08002494((int)*(char *)(input + 0x5a),0,1,index,flag);\n      set_bit_080024f8((int)*(char *)(input + 0x5a));\n      validate_params_080045a2((&DAT_2000032c)[*(byte *)(input + 0x44)],input + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "store_param_08005510",
                "param_1": "input",
                "param_2": "data",
                "param_3": "address",
                "param_4": "flag",
                "iVar1": "conditionResult",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_and_modify_08005568",
            "code": "\nvoid updateAndModify_08005568(int inputParam,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (inputParam != 0) {\n    byteValue = *(byte *)(inputParam + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = inputParam;\n    update_memory_08002494((int)*(char *)(inputParam + 0x5a),0,2);\n    set_bit_080024f8((int)*(char *)(inputParam + 0x5a));\n    modify_buffer_0800455a((&DAT_2000032c)[*(byte *)(inputParam + 0x44)],\n                 *(int *)(inputParam + 100) + (uint)*(ushort *)(inputParam + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_and_modify_08005568",
                "param_1": "inputParam",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_value_index_080055bc",
            "code": "\nuint find_value_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_selected_function_080055e0",
            "code": "\nvoid execute_selected_function_080055e0(void)\n\n{\n  uint value_index;\n  \n  value_index = find_value_index();\n  if (value_index < 5) {\n    (**(code **)(&DAT_200002dc + value_index * 4))(*(undefined4 *)(&DAT_200002f0 + value_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_selected_function_080055e0",
                "uVar1": "value_index",
                "find_value_index_080055bc": "find_value_index"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "process_value_08005604",
            "code": "\nvoid processValue_08005604(void)\n\n{\n  uint valueIndex;\n  int result;\n  int buffer;\n  \n  valueIndex = findValueIndex();\n  buffer = *(int *)(&DAT_20000318 + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000304 + valueIndex * 4))(buffer), result != -1)) {\n    modifyBuffer((&DAT_2000032c)[*(byte *)(buffer + 0x44)],\n                 *(int *)(buffer + 100) + (uint)*(ushort *)(buffer + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "process_value_08005604",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "buffer",
                "find_value_index_080055bc": "findValueIndex",
                "modify_buffer_0800455a": "modifyBuffer"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "reserve_stack_memory_080056d8",
            "code": "\nundefined * reserveStackMemory_080056d8(int size)\n\n{\n  undefined *reservedMemory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  reservedMemory = DAT_20000340;\n  if (DAT_20000340 + size <= maximumStackPointer) {\n    DAT_20000340 = DAT_20000340 + size;\n    return reservedMemory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "reserve_stack_memory_080056d8",
                "param_1": "size",
                "puVar1": "reservedMemory",
                "&stack0x00000000": "maximumStackPointer"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "get_default_value_08005714",
            "code": "\nundefined4 get_default_value_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "get_default_value_08005714"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "initialize_memory_0800571a",
            "code": "\nundefined4 initializeMemory_0800571a(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "check_success_08005724",
            "code": "\nundefined4 checkSuccess_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "check_success_08005724"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_08005728",
            "code": "\nundefined4 initialize_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_08005728"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_0800572c",
            "code": "\nvoid initialize_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_0800572c",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "process_data_wrapper_08005730",
            "code": "\nvoid process_data_wrapper_08005730(undefined4 param_1,undefined4 data_param1,undefined4 data_param2,undefined4 data_param3)\n\n{\n  process_data_080053d4(data_param1,data_param2,data_param2,data_param3,data_param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "process_data_wrapper_08005730",
                "param_2": "data_param1",
                "param_3": "data_param2",
                "param_4": "data_param3"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_variable_08005740",
            "code": "\nundefined4 initializeVariable_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_variable_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "initialize_08005750",
            "code": "\nundefined4 initialize_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "initialize_08005750"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "process_data_08005754",
            "code": "\nuint processData_08005754(uint inputValue)\n\n{\n  bool isLessThanThreshold;\n  char resultValue;\n  uint processedValue;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isLessThanThreshold = true;\n    }\n    else {\n      isLessThanThreshold = false;\n    }\n  }\n  else {\n    isLessThanThreshold = inputValue < 0x3c;\n  }\n  if (isLessThanThreshold) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    resultValue = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    resultValue = -1;\n  }\n  if (resultValue == -1) {\n    processedValue = 0;\n  }\n  else {\n    processedValue = validate_and_configure_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return processedValue >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return processedValue << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return processedValue;\n}\n\n",
            "renaming": {
                "FUN_08005754": "process_data_08005754",
                "param_1": "inputValue",
                "bVar1": "isLessThanThreshold",
                "cVar2": "resultValue",
                "uVar3": "processedValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "process_and_update_data_080057b4",
            "code": "\nvoid processAndUpdateData_080057b4(uint inputIndex,undefined4 mode,undefined4 unkParam,undefined *dataPtr)\n\n{\n  int bitValue;\n  undefined *arrayPtr;\n  int elementIndex;\n  \n  if (inputIndex < 0x3c) {\n    elementIndex = (int)(char)(&DAT_080076f0)[inputIndex];\n    arrayPtr = &DAT_080076f0;\n  }\n  else {\n    elementIndex = -1;\n    arrayPtr = dataPtr;\n  }\n  if (elementIndex != -1) {\n    bitValue = getBitValue(elementIndex,&DAT_20000344,unkParam,arrayPtr,dataPtr);\n    if (bitValue != 0) {\n      bitValue = findElement(elementIndex,&DAT_080074b4);\n      if (bitValue != 0) {\n        processBinaryData(elementIndex);\n      }\n      updateOffsetValue(elementIndex,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      initializeMemoryPermissions(elementIndex,0);\n      break;\n    case 1:\n      initializeMemoryPermissions(elementIndex,1,0);\n      break;\n    case 2:\n      initializeMemoryPermissions(elementIndex,0,1);\n      break;\n    case 3:\n      initializeMemoryPermissions(elementIndex,0,2);\n    }\n    updateArrayValue(elementIndex,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "process_and_update_data_080057b4",
                "param_1": "inputIndex",
                "param_2": "mode",
                "param_3": "unkParam",
                "param_4": "dataPtr",
                "iVar1": "bitValue",
                "iVar3": "elementIndex",
                "puVar2": "arrayPtr",
                "initialize_memory_permissions_08004bb0": "initializeMemoryPermissions",
                "update_value_at_offset_08004828": "updateOffsetValue",
                "get_bit_value_080047f4": "getBitValue",
                "find_element_08004ce2": "findElement",
                "process_binary_data_08004b3c": "processBinaryData",
                "update_array_value_0800480a": "updateArrayValue"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "process_data_08005848",
            "code": "\nvoid processData_08005848(uint inputIndex,undefined4 param2,undefined4 param3,undefined *dataPtr)\n\n{\n  int bitValue;\n  undefined4 memoryAddress;\n  undefined *ptr;\n  uint value;\n  \n  if (inputIndex < 0x3c) {\n    value = (uint)(char)(&DAT_080076f0)[inputIndex];\n    ptr = &DAT_080076f0;\n  }\n  else {\n    value = 0xffffffff;\n    ptr = dataPtr;\n  }\n  if ((value != 0xffffffff) &&\n     (bitValue = get_bit_value_080047f4(value,&DAT_20000358,param3,ptr,dataPtr), bitValue != 0)) {\n    memoryAddress = get_memory_address_08004848((value << 0x18) >> 0x1c);\n    set_output_based_on_condition_08004c30(memoryAddress,1 << (value & 0xf) & 0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "param_1": "inputIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "dataPtr",
                "iVar1": "bitValue",
                "uVar2": "memoryAddress",
                "puVar3": "ptr",
                "uVar4": "value"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_bitmask_validity_08005890",
            "code": "\nchar checkBitmaskValidity_08005890(uint inputIndex)\n\n{\n  char isValid;\n  int bitValue;\n  undefined4 memoryAddress;\n  uint dataValue;\n  \n  if (inputIndex < 0x3c) {\n    dataValue = (uint)(char)(&DAT_080076f0)[inputIndex];\n  }\n  else {\n    dataValue = 0xffffffff;\n  }\n  if (dataValue == 0xffffffff) {\n    isValid = '\\0';\n  }\n  else {\n    bitValue = get_bit_value_080047f4(dataValue,&DAT_20000358);\n    if (bitValue == 0) {\n      isValid = '\\0';\n    }\n    else {\n      memoryAddress = get_memory_address_08004848((dataValue << 0x18) >> 0x1c);\n      isValid = check_bitmask_08004c48(memoryAddress,1 << (dataValue & 0xf) & 0xffff);\n    }\n  }\n  if (isValid != '\\0') {\n    isValid = '\\x01';\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_bitmask_validity_08005890",
                "param_1": "inputIndex",
                "cVar1": "isValid",
                "iVar2": "bitValue",
                "uVar3": "memoryAddress",
                "uVar4": "dataValue"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_memory_080058e0",
            "code": "\nvoid initialize_memory_080058e0(void)\n\n{\n  initialize_memory_080058e0_data_08004b94();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_memory_080058e0"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_checksum_0800591e",
            "code": "\nushort calculateChecksum_0800591e(int dataAddress)\n\n{\n  return (*(short *)(dataAddress + 0x134) + 0x40) - *(short *)(dataAddress + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_checksum_0800591e",
                "param_1": "dataAddress"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "update_flag_value_0800598a",
            "code": "\nvoid update_flag_value_0800598a(int flag_address)\n\n{\n  int extraction_result;\n  ushort new_index;\n  undefined extracted_flag;\n  \n  extraction_result = extract_flag_080054d4(flag_address,&extracted_flag);\n  if ((extraction_result == 0) &&\n     (new_index = *(short *)(flag_address + 0x60) + 1U & 0x3f, new_index != *(ushort *)(flag_address + 0x62))) {\n    *(undefined *)(*(int *)(flag_address + 0x5c) + (uint)*(ushort *)(flag_address + 0x60)) = extracted_flag;\n    *(ushort *)(flag_address + 0x60) = new_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "update_flag_value_0800598a",
                "param_1": "flag_address",
                "iVar1": "extraction_result",
                "uVar2": "new_index",
                "local_9": "extracted_flag"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_parameters_08005a44",
            "code": "\nvoid initializeParameters_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_parameters_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "configure_serial_port_08005a68",
            "code": "\nvoid configureSerialPort_08005a68(int serialPortAddress,undefined4 config,byte options)\n\n{\n  uint returnValue;\n  char *errorString;\n  byte optionBits;\n  int numOptions;\n  byte *bytePointer;\n  char character;\n  int offset;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = config;\n  *(byte *)(serialPortAddress + 0x140) = options;\n  optionBits = options & 7;\n  if (optionBits == 4) {\n    numOptions = 7;\n  }\n  else if (optionBits == 6) {\n    numOptions = 8;\n  }\n  else if (optionBits == 2) {\n    numOptions = 6;\n  }\n  else {\n    numOptions = 0;\n  }\n  if ((options & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    numOptions = numOptions + 1;\n  }\n  else if ((options & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    numOptions = numOptions + 1;\n  }\n  if ((options & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (numOptions == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (numOptions == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    numOptions = 0;\n  }\n  if (numOptions != 0) {\n    configure_uart_pins_08004f4c(serialPortAddress + 0xd4);\n    store_param_08005510(serialPortAddress + 0xd4,0x800598b);\n    return;\n  }\n  errorString = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  handle_assertion_failure_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  bytePointer = *(byte **)(returnValue + offset);\n  errorString[0x1e] = character;\n  *(undefined *)(*bytePointer + 0x1e) = 0;\n  if (returnValue < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[returnValue];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "configure_serial_port_08005a68",
                "param_1": "serialPortAddress",
                "param_2": "config",
                "param_3": "options",
                "extraout_r1": "returnValue",
                "pcVar1": "errorString",
                "bVar2": "optionBits",
                "iVar3": "numOptions",
                "pbVar4": "bytePointer",
                "unaff_r4": "character",
                "unaff_r6": "offset",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_byte_based_on_threshold_08005b24",
            "code": "\nvoid setByteBasedOnThreshold_08005b24(int memoryAddress,uint value)\n\n{\n  undefined byteValue;\n  code *jumpTable;\n  \n  if (value < 0x3c) {\n    byteValue = (&DAT_080076f0)[value];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(memoryAddress + 0x12d) = byteValue;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_byte_based_on_threshold_08005b24",
                "param_1": "memoryAddress",
                "param_2": "value",
                "uVar1": "byteValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_byte_based_on_index_08005b3c",
            "code": "\nvoid setByteBasedOnIndex_08005b3c(int baseAddress,uint index)\n\n{\n  undefined byteValue;\n  \n  if (index < 0x3c) {\n    byteValue = (&DAT_080076f0)[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = byteValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_byte_based_on_index_08005b3c",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "byteValue"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_parameters_08005b54",
            "code": "\nundefined4 *\ninitialize_parameters_08005b54(undefined4 *output_array,undefined4 input_character,undefined4 threshold,undefined4 index)\n\n{\n  undefined character_index;\n  \n  output_array[1] = 0;\n  output_array[2] = 1000;\n  *output_array = &PTR_LAB_080059c8_1_08007804;\n  if (output_array == (undefined4 *)&DAT_2000036c) {\n    set_byte_based_on_threshold_08005b24(&DAT_2000036c,0,threshold,&DAT_2000036c,index);\n    set_byte_based_on_index_08005b3c(&DAT_2000036c,1);\n  }\n  else {\n    character_index = find_character_index_or_default_08004ca2(input_character,&DAT_08007604);\n    *(undefined *)((int)output_array + 0x12d) = character_index;\n    character_index = find_character_index_or_default_08004ca2(input_character,&DAT_0800764c);\n    *(undefined *)(output_array + 0x4b) = character_index;\n  }\n  initialize_parameters_08005b54_08005a44(output_array);\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_parameters_08005b54",
                "param_1": "output_array",
                "param_2": "input_character",
                "param_3": "threshold",
                "param_4": "index",
                "uVar1": "character_index"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_if_param1_equals_1_08005bb0",
            "code": "\nvoid initialize_if_param1_equals_1_08005bb0(int condition_1,int condition_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  if (condition_1 != 1) {\n    return;\n  }\n  if (condition_2 == 0xffff) {\n    initialize_parameters_08005b54(&DAT_2000036c,0x40004400,parameter_3,0xffff,parameter_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_if_param1_equals_1_08005bb0",
                "param_1": "condition_1",
                "param_2": "condition_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08007858;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_data_if_conditions_met_08005c38",
            "code": "\nvoid initialize_data_if_conditions_met_08005c38(int condition_1,int condition_2)\n\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_data(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_data_if_conditions_met_08005c38",
                "param_1": "condition_1",
                "param_2": "condition_2",
                "initialize_data_08005c1c": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "find_end_of_string_and_invoke_08005c96",
            "code": "\nundefined4 find_end_of_string_and_invoke_08005c96(int *array_ptr,int array_length,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 end_of_string;\n  \n  if (array_length != 0) {\n    end_of_string = find_end_of_string(array_length);\n    end_of_string = (**(code **)(*array_ptr + 4))(array_ptr,array_length,end_of_string,*(code **)(*array_ptr + 4),param_4);\n    return end_of_string;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "find_end_of_string_and_invoke_08005c96",
                "param_1": "array_ptr",
                "param_2": "array_length",
                "uVar1": "end_of_string",
                "find_end_of_string_08000178": "find_end_of_string"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_user_code_08005cb6",
            "code": "\nvoid executeUserCode_08005cb6(undefined4 *userCode)\n\n{\n  (**(code **)*userCode)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_user_code_08005cb6",
                "param_1": "userCode"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_with_params_08005cc0",
            "code": "\nvoid executeFunctionWithParams_08005cc0(int *functionPointerList,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  (**(code **)(*functionPointerList + 4))(functionPointerList,&DAT_0800786c,2,*(code **)(*functionPointerList + 4),param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_with_params_08005cc0",
                "param_1": "functionPointerList"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_total_08005cd4",
            "code": "\nint calculate_total_08005cd4(undefined4 input_param)\n\n{\n  int end_of_string_result;\n  int function_result;\n  \n  end_of_string_result = find_end_of_string_and_invoke_08005c96();\n  function_result = execute_function_with_params_08005cc0(input_param);\n  return function_result + end_of_string_result;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_total_08005cd4",
                "param_1": "input_param",
                "iVar1": "end_of_string_result",
                "iVar2": "function_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_base_08005ce8",
            "code": "\nundefined4 convertBase_08005ce8(int *input,uint number,uint base)\n\n{\n  char cVar1;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *output;\n  char buffer [9];\n  \n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  output = buffer + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    output = output + -1;\n    cVar1 = (char)remainder;\n    if (remainder < 10) {\n      cVar1 = cVar1 + '0';\n    }\n    else {\n      cVar1 = cVar1 + '7';\n    }\n    *output = cVar1;\n    number = quotient;\n  } while (quotient != 0);\n  if (output == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = find_end_of_string_08000178(output);\n    result = (**(code **)(*input + 4))(input,output,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "input",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "output",
                "local_15": "buffer"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_to_base_08005d42",
            "code": "\nint convertToBase_08005d42(undefined4 *pointer,uint number,uint base)\n\n{\n  int result;\n  int negationResult;\n  \n  if (base == 0) {\n    result = (**(code **)*pointer)(pointer,number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_base_08005ce8(pointer,number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)number) {\n    result = convert_base_08005ce8(pointer,number,10);\n    return result;\n  }\n  result = execute_user_code_08005cb6(pointer,0x2d);\n  negationResult = convert_base_08005ce8(pointer,-number,10);\n  return negationResult + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_to_base_08005d42",
                "param_1": "pointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negationResult"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "convert_to_base_08005d82",
            "code": "\nvoid convert_to_base_08005d82(void)\n\n{\n  convert_to_base_08005d82_08005d42();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "convert_to_base_08005d82"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_or_execute_08005d8a",
            "code": "\nvoid convertOrExecute_08005d8a(undefined4 *functionPointer,uint value1,uint value2,undefined4 value3)\n\n{\n  if (value2 != 0) {\n    convert_base_08005ce8(functionPointer,value1,value2 & 0xff);\n    return;\n  }\n  (**(code **)*functionPointer)(functionPointer,value1 & 0xff,0,*(code **)*functionPointer,value3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_or_execute_08005d8a",
                "param_1": "functionPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "validate_input_and_calculation_08005da8",
            "code": "\nint validate_input_and_calculation_08005da8(undefined4 input_1,undefined4 input_2,undefined4 input_3,uint input_4,byte input_5)\n\n{\n  int result;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  byte loop_counter;\n  undefined8 decimal_value;\n  undefined8 concatenated_value;\n  \n  result = check_parameters_08000a2c(input_3,input_4,input_3,input_4);\n  if (result == 0) {\n    result = check_parameters_08000a2c(input_3,input_4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = validate_and_return_param_080009f0(input_3,input_4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = find_end_of_string_and_invoke_08005c96(input_1,&DAT_08007860);\n    }\n    else {\n      result = check_if_input_is_empty_08000a18(input_3,input_4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = is_null_terminated_string_080009dc(input_3,input_4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = is_null_terminated_string_080009dc(input_3,input_4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_user_code_08005cb6(input_1,0x2d);\n            input_4 = input_4 + 0x80000000;\n          }\n          decimal_value = 0x3fe0000000000000;\n          for (loop_counter = 0; temp_var_1 = (undefined4)((ulonglong)decimal_value >> 0x20), loop_counter < input_5;\n              loop_counter = loop_counter + 1) {\n            decimal_value = convert_floating_point_to_decimal_0800074c((int)decimal_value,temp_var_1,0,0x40240000);\n          }\n          decimal_value = calculate_result_08000194(input_3,input_4,(int)decimal_value,temp_var_1);\n          temp_var_1 = calculate_shift_08000aa8();\n          concatenated_value = shift_and_concat_0800040c();\n          decimal_value = calculate_08000190((int)decimal_value,(int)((ulonglong)decimal_value >> 0x20),(int)concatenated_value,\n                               (int)((ulonglong)concatenated_value >> 0x20));\n          temp_var_2 = convert_or_execute_08005d8a(input_1,temp_var_1,10);\n          result = result + temp_var_2;\n          if (input_5 != 0) {\n            temp_var_2 = find_end_of_string_and_invoke_08005c96(input_1,&DAT_08007868);\n            result = result + temp_var_2;\n          }\n          while (input_5 != 0) {\n            decimal_value = calculate_unsigned_division_080004f8((int)decimal_value,(int)((ulonglong)decimal_value >> 0x20),0,0x40240000);\n            temp_var_1 = convert_param_to_string_08000a58();\n            temp_var_2 = convert_to_base_08005d82(input_1,temp_var_1,10);\n            result = result + temp_var_2;\n            concatenated_value = bitwise_shift_0800042c(temp_var_1);\n            decimal_value = calculate_08000190((int)decimal_value,(int)((ulonglong)decimal_value >> 0x20),(int)concatenated_value,\n                                 (int)((ulonglong)concatenated_value >> 0x20));\n            input_5 = input_5 - 1;\n          }\n        }\n        else {\n          result = find_end_of_string_and_invoke_08005c96(input_1,&DAT_08007864);\n        }\n      }\n      else {\n        result = find_end_of_string_and_invoke_08005c96(input_1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = find_end_of_string_and_invoke_08005c96(input_1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "validate_input_and_calculation_08005da8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "iVar1": "result",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "bVar4": "loop_counter",
                "uVar5": "decimal_value",
                "uVar6": "concatenated_value"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "validate_input_and_calculation_08005f2c",
            "code": "\nvoid validate_input_and_calculation_08005f2c(void)\n\n{\n  validate_input_and_calculation_08005f2c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "validate_input_and_calculation_08005f2c",
                "validate_input_and_calculation_08005da8": "validate_input_and_calculation"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_combined_result_08005f40",
            "code": "\nint calculate_combined_result_08005f40(undefined4 input_param)\n\n{\n  int input_validation_result;\n  int function_execution_result;\n  \n  input_validation_result = validate_input_and_calculation_08005f2c();\n  function_execution_result = execute_function_with_params_08005cc0(input_param);\n  return function_execution_result + input_validation_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_combined_result_08005f40",
                "param_1": "input_param",
                "iVar1": "input_validation_result",
                "iVar2": "function_execution_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_and_update_system_08005f5e",
            "code": "\nvoid initialize_and_update_system_08005f5e(void)\n\n{\n  update_register_value(3);\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_and_update_system_08005f5e",
                "update_register_value_08002470": "update_register_value",
                "initialize_system_08001c32": "initialize_system"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "execute_process_loop_08005f6c",
            "code": "\nvoid execute_process_loop_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initialize_and_execute();\n  do {\n    process_data();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "execute_process_loop_08005f6c",
                "initialize_and_execute_08000bcc": "initialize_and_execute",
                "process_data_08000cd0": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_bits_08005f8c",
            "code": "\nchar count_bits_08005f8c(uint input_num)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; input_num != 1; input_num = input_num >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_bits_08005f8c",
                "param_1": "input_num",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initializeData_08005fc8(int flag,int value,undefined4 unused1,undefined4 unused2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    convertToLong(0,label,&DAT_20000000,&DAT_200004b8,unused2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "convert_value_to_long_long_08006112": "convertToLong",
                "&LAB_08005fa0_1": "label"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "process_data_080060d4",
            "code": "\nvoid processData_080060d4(int data)\n\n{\n  int bitCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  performAction();\n  bitCount = countBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    processData_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "process_data_080060d4",
                "param_1": "data",
                "iVar1": "bitCount",
                "process_and_jump_08007090": "performAction",
                "count_bits_08005f8c": "countBits"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_process_data_080060e4",
            "code": "\nvoid checkAndProcessData_080060e4(void)\n\n{\n  int bitCount;\n  \n  bitCount = countBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_process_data_080060e4",
                "iVar1": "bitCount",
                "count_bits_08005f8c": "countBits",
                "process_data_080060d4": "processData"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "convert_value_to_long_long_08006112",
            "code": "\nvoid convertValueToLongLong_08006112(undefined4 targetAddress,undefined4 sourceData)\n\n{\n  convert_to_long_long_08006158(sourceData,targetAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "convert_value_to_long_long_08006112",
                "param_1": "targetAddress",
                "param_2": "sourceData"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "handle_assertion_failure_0800611c",
            "code": "\nvoid handleAssertionFailure_0800611c(undefined4 fileName,undefined4 lineNumber,char *errorMessage,undefined4 resourceName)\n\n{\n  undefined4 resourceOffset;\n  char *extraMessage;\n  undefined8 resourceResult;\n  undefined4 resourceParameter;\n  \n  resourceOffset = *(undefined4 *)(DAT_200000f8 + 0xc);\n  resourceParameter = resourceName;\n  if (errorMessage == (char *)0x0) goto LAB_08006140;\n  extraMessage = \", function: \";\n  do {\n    process_incoming_data_08006174(resourceOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",resourceName,fileName,lineNumber\n                 ,extraMessage,errorMessage,resourceParameter);\n    resourceResult = process_resource_08006ac0();\n    lineNumber = (undefined4)((ulonglong)resourceResult >> 0x20);\n    resourceOffset = (undefined4)resourceResult;\nLAB_08006140:\n    errorMessage = \"\";\n    extraMessage = errorMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "handle_assertion_failure_0800611c",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "errorMessage",
                "param_4": "resourceName",
                "uVar1": "resourceOffset",
                "pcVar2": "extraMessage",
                "uVar3": "resourceResult",
                "uVar4": "resourceParameter"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "convert_to_long_long_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong convertToLongLong_08006158(undefined4 input1,uint input2)\n\n{\n  return (ulonglong)input2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "convert_to_long_long_08006158",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_incoming_data_08006174",
            "code": "\nvoid processIncomingData_08006174(undefined4 inputParameter1,undefined4 inputParameter2,undefined4 localVariable1,undefined4 localVariable2)\n\n{\n  undefined4 tempVariable1;\n  undefined4 tempVariable2;\n  \n  tempVariable1 = localVariable1;\n  tempVariable2 = localVariable2;\n  process_incoming_data_08006394(DAT_200000f8,inputParameter1,inputParameter2,&tempVariable1,inputParameter1,&tempVariable1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_incoming_data_08006174",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "param_3": "localVariable1",
                "param_4": "localVariable2",
                "uStack_8": "tempVariable1",
                "uStack_4": "tempVariable2"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_callbacks_08006198",
            "code": "\nvoid executeCallbacks_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_callbacks_08006198",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *memory,undefined value,int size)\n\n{\n  undefined *endPointer;\n  \n  endPointer = memory + size;\n  for (; memory != endPointer; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "update_linked_list_080061f0",
            "code": "\nvoid updateLinkedList_080061f0(undefined4 *list,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **tempPtr1;\n  int **tempPtr2;\n  int **tempPtr3;\n  int *tempVar1;\n  int **tempPtr4;\n  int **tempPtr5;\n  \n  if (size == 0) {\n    return;\n  }\n  tempPtr5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tempPtr5 = (int **)((int)tempPtr5 + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  tempPtr3 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    tempPtr5[1] = (int *)0x0;\n    tempPtr2 = tempPtr1;\n    DAT_200005f8 = tempPtr5;\n  }\n  else {\n    tempPtr3 = DAT_200005f8;\n    if (tempPtr5 < DAT_200005f8) {\n      tempPtr2 = (int **)*tempPtr5;\n      tempPtr3 = (int **)((int)tempPtr5 + (int)tempPtr2);\n      if (DAT_200005f8 == tempPtr3) {\n        tempVar1 = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        tempPtr3 = (int **)((int)tempVar1 + (int)tempPtr2);\n        *tempPtr5 = (int *)tempPtr3;\n      }\n      tempPtr5[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = tempPtr5;\n    }\n    else {\n      do {\n        tempPtr4 = tempPtr3;\n        tempPtr3 = (int **)tempPtr4[1];\n        if (tempPtr3 == (int **)0x0) break;\n      } while (tempPtr3 <= tempPtr5);\n      tempPtr2 = (int **)*tempPtr4;\n      if ((int **)((int)tempPtr4 + (int)tempPtr2) == tempPtr5) {\n        tempPtr2 = (int **)((int)tempPtr2 + (int)*tempPtr5);\n        *tempPtr4 = (int *)tempPtr2;\n        if (tempPtr3 == (int **)((int)tempPtr4 + (int)tempPtr2)) {\n          tempVar1 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempPtr2 + (int)tempVar1);\n          *tempPtr4 = (int *)tempPtr2;\n          tempPtr4[1] = (int *)tempPtr3;\n        }\n      }\n      else if (tempPtr5 < (int **)((int)tempPtr4 + (int)tempPtr2)) {\n        *list = 0xc;\n      }\n      else {\n        tempPtr2 = (int **)((int)tempPtr5 + (int)*tempPtr5);\n        if (tempPtr3 == tempPtr2) {\n          tempVar1 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempVar1 + (int)*tempPtr5);\n          *tempPtr5 = (int *)tempPtr2;\n        }\n        tempPtr5[1] = (int *)tempPtr3;\n        tempPtr4[1] = (int *)tempPtr5;\n      }\n    }\n  }\n  FUNC_08006eae(list,tempPtr2,tempPtr3,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "update_linked_list_080061f0",
                "param_1": "list",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "tempPtr1",
                "ppiVar1": "tempPtr2",
                "ppiVar2": "tempPtr3",
                "piVar3": "tempVar1",
                "ppiVar4": "tempPtr4",
                "ppiVar5": "tempPtr5"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *result,uint size)\n\n{\n  uint *current_ptr;\n  int remaining_size;\n  uint *next_ptr;\n  uint difference;\n  uint *previous_ptr;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_ptr = DAT_200005f8;\n    previous_ptr = DAT_200005f8;\n    while (next_ptr = current_ptr, next_ptr != (uint *)0x0) {\n      difference = *next_ptr - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_ptr == next_ptr) {\n            current_ptr = (uint *)previous_ptr[1];\n            DAT_200005f8 = current_ptr;\n          }\n          else {\n            current_ptr = (uint *)next_ptr[1];\n          }\n          if (previous_ptr != next_ptr) {\n            previous_ptr[1] = (uint)current_ptr;\n            previous_ptr = next_ptr;\n          }\n        }\n        else {\n          *next_ptr = difference;\n          *(uint *)((int)next_ptr + difference) = allocated_size;\n          previous_ptr = (uint *)((int)next_ptr + difference);\n        }\n        goto LAB_080062ec;\n      }\n      previous_ptr = next_ptr;\n      current_ptr = (uint *)next_ptr[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = reserve_stack_memory_08006920(result);\n    }\n    current_ptr = (uint *)reserve_stack_memory_08006920(result,allocated_size);\n    if ((current_ptr != (uint *)0xffffffff) &&\n       ((previous_ptr = (uint *)((int)current_ptr + 3U & 0xfffffffc), current_ptr == previous_ptr ||\n        (remaining_size = reserve_stack_memory_08006920(result,(int)previous_ptr - (int)current_ptr), remaining_size != -1)))) {\n      *previous_ptr = allocated_size;\nLAB_080062ec:\n      FUNC_08006eae(result);\n      allocated_size = (int)previous_ptr + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(previous_ptr + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)previous_ptr + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08006eae(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_ptr",
                "iVar2": "remaining_size",
                "puVar3": "next_ptr",
                "uVar4": "difference",
                "puVar5": "previous_ptr",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_incoming_data_08006344",
            "code": "\nuint processIncomingData_08006344(int source,byte data,byte **buffer)\n\n{\n  int result;\n  byte *tempPtr;\n  byte *sizePtr;\n  uint returnValue;\n  \n  tempPtr = buffer[2] + -1;\n  buffer[2] = tempPtr;\n  if ((-1 < (int)tempPtr) ||\n     (((int)buffer[6] <= (int)tempPtr && (tempPtr = (byte *)(uint)data, tempPtr != (byte *)0xa))))\n  {\n    tempPtr = *buffer;\n    *buffer = tempPtr + 1;\n    *tempPtr = data;\n    return (uint)data;\n  }\n  if ((source != 0) && (*(int *)(source + 0x18) == 0)) {\n    initialize_data_structure_08006cb4();\n  }\n  if (buffer == (byte **)&DAT_08007904) {\n    buffer = *(byte ***)(source + 4);\n  }\n  else if (buffer == (byte **)&DAT_08007924) {\n    buffer = *(byte ***)(source + 8);\n  }\n  else if (buffer == (byte **)&DAT_080078e4) {\n    buffer = *(byte ***)(source + 0xc);\n  }\n  buffer[2] = buffer[6];\n  sizePtr = (byte *)(uint)*(ushort *)(buffer + 3);\n  result = (int)sizePtr << 0x1c;\n  if (((result < 0) && (sizePtr = buffer[4], sizePtr != (byte *)0x0)) ||\n     (result = process_data_080069e4(source,buffer,result,sizePtr,tempPtr), result == 0)) {\n    returnValue = (uint)data;\n    result = (int)*buffer - (int)buffer[4];\n    if ((result < (int)buffer[5]) || (result = extract_function_08006be0(source,buffer), result == 0)) {\n      buffer[2] = buffer[2] + -1;\n      tempPtr = *buffer;\n      *buffer = tempPtr + 1;\n      *tempPtr = data;\n      if ((byte *)(result + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return returnValue;\n        }\n        if (returnValue != 10) {\n          return returnValue;\n        }\n      }\n      result = extract_function_08006be0(source,buffer);\n      if (result == 0) {\n        return returnValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_incoming_data_08006344",
                "param_1": "source",
                "param_2": "data",
                "param_3": "buffer",
                "iVar1": "result",
                "pbVar2": "tempPtr",
                "pbVar3": "sizePtr",
                "uVar4": "returnValue"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_incoming_data_08006370",
            "code": "\nint processIncomingData_08006370(undefined4 arg1,undefined4 arg2,undefined *data,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentLength;\n  \n  endPtr = data + length;\n  currentLength = length;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    result = process_incoming_data_08006344(arg1,*data,arg2,length,currentLength);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_incoming_data_08006370",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_incoming_data_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint processIncomingData_08006394(int inputData,undefined4 *dataPtr,byte *inputString,int *outputSize)\n\n{\n  int result;\n  int *ptr;\n  bool found;\n  byte *currChar;\n  byte *nextChar;\n  int rowCount;\n  int index;\n  int *outputSizePtr;\n  uint flags;\n  int fieldSize;\n  undefined4 unused;\n  int fieldCount;\n  int totalSize;\n  byte fieldType;\n  undefined flag1;\n  undefined flag2;\n  undefined fieldSign;\n  undefined4 unused2;\n  \n  outputSizePtr = outputSize;\n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    initializeDataStructure();\n  }\n  if (dataPtr == &DAT_08007904) {\n    dataPtr = *(undefined4 **)(inputData + 4);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_08007924) {\n    dataPtr = *(undefined4 **)(inputData + 8);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_080078e4) {\n    dataPtr = *(undefined4 **)(inputData + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x1c)) || (dataPtr[4] == 0)) &&\n     (index = processData(inputData,dataPtr), index != 0)) {\n    return -1;\n  }\n  totalSize = 0;\n  flag1 = 0x20;\n  flag2 = 0x30;\n  currChar = inputString;\nLAB_080063d6:\n  nextChar = currChar;\n  if (*nextChar != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  currChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  index = (int)nextChar - (int)inputString;\n  if (index != 0) {\n    result = processIncomingData_08006394Chunk(inputData,dataPtr,inputString,index);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(dataPtr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalSize;\n    }\n    totalSize = totalSize + index;\n  }\n  if (*nextChar == 0) goto LAB_08006580;\n  flags = 0;\n  fieldCount = 0;\n  fieldSize = -1;\n  unused = 0;\n  fieldSign = 0;\n  unused2 = 0;\n  currChar = nextChar + 1;\n  while( true ) {\n    index = findCharacterIndex(\"#-0+ \",*currChar);\n    inputString = currChar + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ff8750U & 0xff) | flags;\n    currChar = inputString;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    fieldSign = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    fieldSign = 0x2b;\n  }\n  if (*currChar == 0x2a) {\n    ptr = outputSizePtr + 1;\n    index = *outputSizePtr;\n    outputSizePtr = ptr;\n    if (index < 0) {\n      fieldCount = -index;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    found = false;\n    index = fieldCount;\n    inputString = currChar;\n    while( true ) {\n      if (9 < *inputString - 0x30) break;\n      index = index * 10 + (*inputString - 0x30);\n      found = true;\n      inputString = inputString + 1;\n    }\n    if (!found) goto LAB_080064be;\n  }\n  fieldCount = index;\nLAB_080064be:\n  if (*inputString == 0x2e) {\n    if (inputString[1] == 0x2a) {\n      inputString = inputString + 2;\n      ptr = outputSizePtr + 1;\n      fieldSize = *outputSizePtr;\n      outputSizePtr = ptr;\n      if (fieldSize < 0) {\n        fieldSize = -1;\n      }\n    }\n    else {\n      found = false;\n      index = 0;\n      fieldSize = 0;\n      while( true ) {\n        inputString = inputString + 1;\n        if (9 < *inputString - 0x30) break;\n        index = index * 10 + (*inputString - 0x30);\n        found = true;\n      }\n      if (found) {\n        fieldSize = index;\n      }\n    }\n  }\n  index = findCharacterIndex(&DAT_080078b6,*inputString,3);\n  if (index != 0) {\n    inputString = inputString + 1;\n    flags = flags | 0x40 << (index + 0xf7ff874aU & 0xff);\n  }\n  fieldType = *inputString;\n  inputString = inputString + 1;\n  index = findCharacterIndex(\"efgEFG\",fieldType,6);\n  if (index == 0) {\n    rowCount = processAndExtractData(inputData,&flags,dataPtr,0x8006371,&outputSizePtr);\n    if (rowCount == -1) goto LAB_08006580;\n  }\n  else {\n    outputSizePtr = (int *)(((int)outputSizePtr + 7U & 0xfffffff8) + 8);\n  }\n  totalSize = totalSize + rowCount;\n  currChar = inputString;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_incoming_data_08006394",
                "param_1": "inputData",
                "param_2": "dataPtr",
                "param_3": "inputString",
                "param_4": "outputSize",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "found",
                "pbVar4": "currChar",
                "pbVar5": "nextChar",
                "unaff_r9": "rowCount",
                "iVar6": "index",
                "local_8c": "outputSizePtr",
                "local_88": "flags",
                "local_84": "fieldSize",
                "local_80": "unused",
                "local_7c": "fieldCount",
                "local_74": "totalSize",
                "local_70": "fieldType",
                "local_6f": "flag1",
                "local_6e": "flag2",
                "local_45": "fieldSign",
                "local_30": "unused2",
                "initialize_data_structure_08006cb4": "initializeDataStructure",
                "process_data_080069e4": "processData",
                "process_incoming_data_08006370": "processIncomingDataChunk",
                "find_char_index_08006e90": "findCharacterIndex",
                "process_and_extract_data_080066b0": "processAndExtractData"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocessData_080065c0(undefined4 input,uint *data1,uint *data2,undefined4 param,code *callback)\n\n{\n  int index1;\n  int index2;\n  uint maxValue;\n  uint newValue;\n  bool isTrue;\n  \n  maxValue = data1[4];\n  if ((int)data1[4] < (int)data1[2]) {\n    maxValue = data1[2];\n  }\n  *data2 = maxValue;\n  if (*(char *)((int)data1 + 0x43) != '\\0') {\n    *data2 = maxValue + 1;\n  }\n  if ((int)(*data1 << 0x1a) < 0) {\n    *data2 = *data2 + 2;\n  }\n  if ((*data1 & 6) == 0) {\n    for (index1 = 0; index1 < (int)(data1[3] - *data2); index1 = index1 + 1) {\n      index2 = (*callback)(input,param,(int)data1 + 0x19,1);\n      if (index2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data1 + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  newValue = maxValue;\n  if ((int)(*data1 << 0x1a) < 0) {\n    *(undefined *)((int)data1 + maxValue + 0x43) = 0x30;\n    newValue = maxValue + 2;\n    *(undefined *)((int)data1 + maxValue + 0x44) = *(undefined *)((int)data1 + 0x45);\n  }\n  index1 = (*callback)(input,param,(int)data1 + 0x43,newValue);\n  if (index1 != -1) {\n    maxValue = data1[3];\n    isTrue = (*data1 & 6) != 4;\n    if (isTrue) {\n      maxValue = 0;\n    }\n    newValue = 0;\n    if (!isTrue) {\n      maxValue = maxValue - *data2;\n    }\n    if (!isTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)data1[4] < (int)data1[2]) {\n      maxValue = maxValue + (data1[2] - data1[4]);\n    }\n    while( true ) {\n      if (maxValue == newValue) {\n        return 0;\n      }\n      index1 = (*callback)(input,param,(int)data1 + 0x1a,1);\n      if (index1 == -1) break;\n      newValue = newValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "maxValue",
                "uVar4": "newValue",
                "bVar5": "isTrue"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "process_and_extract_data_080066b0",
            "code": "\nuint process_and_extract_data_080066b0(undefined4 arg1,uint *arg2,undefined4 arg3,code *arg4,uint **arg5)\n\n{\n  byte byteVal;\n  int index;\n  uint *ptr;\n  int loopIndex;\n  char *charPtr;\n  uint val1;\n  uint **ptrPtr;\n  char **charPtrPtr;\n  uint val2;\n  uint val3;\n  char *charPtr2;\n  char *charPtr3;\n  uint localArray [2];\n  \n  byteVal = *(byte *)(arg2 + 6);\n  charPtr3 = (char *)((int)arg2 + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_0800686a;\n          if (byteVal != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)arg2 + 0x45) = 0x58;\n          charPtr = \"0123456789ABCDEF\";\nLAB_080067fa:\n          val1 = *arg2;\n          ptr = *arg5;\n          *arg5 = ptr + 1;\n          if (((val1 & 0x80) == 0) && ((int)(val1 << 0x19) < 0)) {\n            val2 = (uint)*(ushort *)ptr;\n          }\n          else {\n            val2 = *ptr;\n          }\n          if ((int)(val1 << 0x1f) < 0) {\n            *arg2 = val1 | 0x20;\n          }\n          if (val2 == 0) {\n            *arg2 = *arg2 & 0xffffffdf;\n          }\n          val1 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)arg2 + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_080066e0;\n          val2 = *arg2;\n          ptr = *arg5;\n          if ((val2 & 0x80) == 0) {\n            *arg5 = ptr + 1;\n            if ((val2 & 0x40) == 0) goto LAB_08006700;\n            val2 = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *arg5 = ptr + 1;\nLAB_08006700:\n            val2 = *ptr;\n          }\n          if ((int)val2 < 0) {\n            val2 = -val2;\n            *(undefined *)((int)arg2 + 0x43) = 0x2d;\n          }\n          charPtr = \"0123456789ABCDEF\";\n          val1 = 10;\n        }\n        val3 = arg2[1];\n        arg2[2] = val3;\n        charPtr2 = charPtr3;\n        if ((int)val3 < 0) {\n          if (val2 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)arg2 + 0x42) = *charPtr;\n          charPtr2 = (char *)((int)arg2 + 0x42);\n        }\n        else {\n          *arg2 = *arg2 & 0xfffffffb;\n          if (val2 == 0) {\n            if (val3 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              val3 = val2 / val1;\n              charPtr2 = charPtr2 + -1;\n              *charPtr2 = charPtr[val2 - val1 * val3];\n              val2 = val3;\n            } while (val3 != 0);\n          }\n        }\n        if (((val1 == 8) && ((int)(*arg2 << 0x1f) < 0)) && ((int)arg2[1] <= (int)arg2[4]))\n        {\n          charPtr2[-1] = '0';\n          charPtr2 = charPtr2 + -1;\n        }\n        arg2[4] = (int)charPtr3 - (int)charPtr2;\n        charPtr3 = charPtr2;\n        goto LAB_080067d6;\n      }\n      ptr = *arg5;\n      *arg5 = ptr + 1;\n      *(char *)((int)arg2 + 0x42) = (char)*ptr;\nLAB_08006740:\n      charPtr3 = (char *)((int)arg2 + 0x42);\n      val2 = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_08006766:\n            val2 = *arg2;\n            ptr = *arg5;\n            if ((val2 & 0x80) == 0) {\n              *arg5 = ptr + 1;\n              if ((val2 & 0x40) == 0) goto LAB_08006774;\n              val2 = (uint)*(ushort *)ptr;\n            }\n            else {\n              *arg5 = ptr + 1;\nLAB_08006774:\n              val2 = *ptr;\n            }\n            if (byteVal == 0x6f) {\n              val1 = 8;\n            }\n            else {\n              val1 = 10;\n            }\n            charPtr = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byteVal == 0x70) {\n            *arg2 = *arg2 | 0x20;\nLAB_08006726:\n            charPtr = \"0123456789abcdef\";\n            *(undefined *)((int)arg2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_08006766;\n          if (byteVal == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)arg2 + 0x42) = byteVal;\n        goto LAB_08006740;\n      }\n      charPtrPtr = (char **)*arg5;\n      *arg5 = (uint *)(charPtrPtr + 1);\n      charPtr3 = *charPtrPtr;\n      index = find_char_index_08006e90(charPtr3,0,arg2[1]);\n      if (index != 0) {\n        arg2[1] = index - (int)charPtr3;\n      }\n      val2 = arg2[1];\n    }\n    arg2[4] = val2;\n    *(undefined *)((int)arg2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  val2 = *arg2;\n  ptrPtr = (uint **)*arg5;\n  val1 = arg2[5];\n  if ((val2 & 0x80) == 0) {\n    *arg5 = (uint *)(ptrPtr + 1);\n    ptr = *ptrPtr;\n    if ((val2 & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr = (short)val1;\n  }\n  else {\n    *arg5 = (uint *)(ptrPtr + 1);\n    ptr = *ptrPtr;\nLAB_08006856:\n    *ptr = val1;\n  }\nLAB_0800686a:\n  arg2[4] = 0;\nLAB_080067d6:\n  index = process_data_080065c0(arg1,arg2,localArray,arg3,arg4);\n  if ((index == -1) || (index = (*arg4)(arg1,arg3,charPtr3,arg2[4]), index == -1)) {\nLAB_080067ea:\n    val2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*arg2 << 0x1e) < 0) {\n      for (index = 0; index < (int)(arg2[3] - localArray[0]); index = index + 1) {\n        loopIndex = (*arg4)(arg1,arg3,(int)arg2 + 0x19,1);\n        if (loopIndex == -1) goto LAB_080067ea;\n      }\n    }\n    val2 = arg2[3];\n    if ((int)arg2[3] < (int)localArray[0]) {\n      val2 = localArray[0];\n    }\n  }\n  return val2;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "process_and_extract_data_080066b0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "bVar1": "byteVal",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "loopIndex",
                "pcVar5": "charPtr",
                "uVar6": "val1",
                "ppuVar7": "ptrPtr",
                "ppcVar8": "charPtrPtr",
                "uVar9": "val2",
                "uVar10": "val3",
                "pcVar11": "charPtr2",
                "pcVar12": "charPtr3",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "process_data_080068f0",
            "code": "\nvoid process_data_080068f0(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int data_ptr;\n  undefined4 input_ptr;\n  undefined4 param2_stack;\n  undefined4 param3_stack;\n  undefined4 param4_stack;\n  \n  data_ptr = DAT_200000f8;\n  input_ptr = input_param1;\n  param2_stack = input_param2;\n  param3_stack = input_param3;\n  param4_stack = input_param4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_structure(DAT_200000f8);\n  }\n  process_incoming_data(data_ptr,*(undefined4 *)(data_ptr + 8),input_param1,&param2_stack,input_ptr,&param2_stack);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "data_ptr",
                "uVar2": "input_ptr",
                "uStack_c": "param2_stack",
                "uStack_8": "param3_stack",
                "uStack_4": "param4_stack",
                "initialize_data_structure_08006cb4": "initialize_data_structure",
                "process_incoming_data_08006394": "process_incoming_data"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "reserve_stack_memory_08006920",
            "code": "\nvoid reserveStackMemory_08006920(int *memoryAddress,undefined4 size)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = reserve_stack_memory_080056d8(size);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *memoryAddress = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "reserve_stack_memory_08006920",
                "param_1": "memoryAddress",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint process_data_080069e4(undefined4 *output,undefined4 *input)\n\n{\n  int data_start;\n  uint result;\n  ushort flags;\n  \n  data_start = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_structure_08006cb4(DAT_200000f8);\n  }\n  if (input == &DAT_08007904) {\n    input = *(undefined4 **)(data_start + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08007924) {\n    input = *(undefined4 **)(data_start + 8);\n  }\n  else if (input == (undefined4 *)&DAT_080078e4) {\n    input = *(undefined4 **)(data_start + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          update_linked_list_080061f0(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initialize_memory_08006e10(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "data_start",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "process_resource_08006ac0",
            "code": "\nvoid processResource_08006ac0(void)\n\n{\n  uint *resourcePointer;\n  int difference;\n  int *resourceData;\n  int *linkedData;\n  uint resourceSize;\n  ushort resourceFlag;\n  int offset;\n  code *loopFunction;\n  int totalSize;\n  uint savedValue;\n  code *jumpTable;\n  bool isZero;\n  undefined8 loopReturnValue;\n  \n  initialize_resource_08006f00(6);\n  jumpTable = (code *)0x8006acf;\n  loopReturnValue = infinite_loop_0800573c(1);\n  resourceData = (int *)((ulonglong)loopReturnValue >> 0x20);\n  resourcePointer = (uint *)loopReturnValue;\n  resourceFlag = *(ushort *)(resourceData + 3);\n  resourceSize = (uint)resourceFlag;\n  if ((int)(resourceSize << 0x1c) < 0) {\n    difference = resourceData[4];\n    if (difference != 0) {\n      offset = resourceSize << 0x1e;\n      isZero = offset != 0;\n      if (isZero) {\n        offset = 0;\n      }\n      totalSize = *resourceData;\n      if (!isZero) {\n        offset = resourceData[5];\n      }\n      *resourceData = difference;\n      resourceData[2] = offset;\n      for (totalSize = totalSize - difference; 0 < totalSize; totalSize = totalSize - offset) {\n        offset = (*(code *)resourceData[10])(resourcePointer,resourceData[8],difference,totalSize);\n        if (offset < 1) {\n          resourceFlag = *(ushort *)(resourceData + 3);\n          goto LAB_08006bc6;\n        }\n        difference = difference + offset;\n      }\n    }\n  }\n  else if (((0 < resourceData[1]) || (0 < resourceData[0x10])) &&\n          (loopFunction = (code *)resourceData[0xb], loopFunction != (code *)0x0)) {\n    savedValue = *resourcePointer;\n    *resourcePointer = 0;\n    if ((resourceFlag & 0x1000) == 0) {\n      difference = (*loopFunction)(resourcePointer,resourceData[8],resourceSize & 0x1000,1);\n      if ((difference == -1) && (resourceSize = *resourcePointer, resourceSize != 0)) {\n        if ((resourceSize != 0x1d) && (resourceSize != 0x16)) {\n          *(ushort *)(resourceData + 3) = *(ushort *)(resourceData + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *resourcePointer = savedValue;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      difference = resourceData[0x15];\n    }\n    if (((int)((uint)*(ushort *)(resourceData + 3) << 0x1d) < 0) &&\n       (difference = difference - resourceData[1], resourceData[0xd] != 0)) {\n      difference = difference - resourceData[0x10];\n    }\n    difference = (*(code *)resourceData[0xb])(resourcePointer,resourceData[8],difference,0);\n    resourceFlag = *(ushort *)(resourceData + 3);\n    if ((difference == -1) &&\n       ((0x1d < *resourcePointer || (-1 < (int)((0x20400001U >> (*resourcePointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(resourceData + 3) = resourceFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    resourceData[1] = 0;\n    *resourceData = resourceData[4];\n    if (((int)((uint)resourceFlag << 0x13) < 0) && ((difference != -1 || (*resourcePointer == 0)))) {\n      resourceData[0x15] = difference;\n    }\n    linkedData = (int *)resourceData[0xd];\n    *resourcePointer = savedValue;\n    if (linkedData != (int *)0x0) {\n      if (linkedData != resourceData + 0x11) {\n        update_linked_list_080061f0(resourcePointer);\n      }\n      resourceData[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "process_resource_08006ac0",
                "puVar1": "resourcePointer",
                "iVar2": "difference",
                "piVar3": "resourceData",
                "piVar4": "linkedData",
                "uVar5": "resourceSize",
                "uVar6": "resourceFlag",
                "iVar7": "offset",
                "pcVar8": "loopFunction",
                "iVar9": "totalSize",
                "uVar10": "savedValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isZero",
                "uVar12": "loopReturnValue"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "extract_function_08006be0",
            "code": "\nundefined4 extractFunction_08006be0(uint *inputArray,int *outputArray)\n\n{\n  undefined4 result;\n  int index1;\n  int *pointer1;\n  uint value1;\n  ushort value2;\n  int index2;\n  undefined4 unaffected_register4;\n  undefined4 unaffected_register5;\n  code *functionPointer;\n  int index3;\n  uint value3;\n  code *unrecovered_jump_table;\n  bool bVar10;\n  \n  if (outputArray[4] != 0) {\n    if ((inputArray != (uint *)0x0) && (inputArray[6] == 0)) {\n      initialize_data_structure_08006cb4();\n    }\n    if (outputArray == &DAT_08007904) {\n      outputArray = (int *)inputArray[1];\n    }\n    else if (outputArray == (int *)&DAT_08007924) {\n      outputArray = (int *)inputArray[2];\n    }\n    else if (outputArray == (int *)&DAT_080078e4) {\n      outputArray = (int *)inputArray[3];\n    }\n    if (*(short *)(outputArray + 3) != 0) {\n      value2 = *(ushort *)(outputArray + 3);\n      value1 = (uint)value2;\n      if ((int)(value1 << 0x1c) < 0) {\n        index1 = outputArray[4];\n        if (index1 != 0) {\n          index2 = value1 << 0x1e;\n          bVar10 = index2 != 0;\n          if (bVar10) {\n            index2 = 0;\n          }\n          index3 = *outputArray;\n          if (!bVar10) {\n            index2 = outputArray[5];\n          }\n          *outputArray = index1;\n          outputArray[2] = index2;\n          for (index3 = index3 - index1; 0 < index3; index3 = index3 - index2) {\n            index2 = (*(code *)outputArray[10])(inputArray,outputArray[8],index1,index3,unaffected_register4,unaffected_register5);\n            if (index2 < 1) {\n              value2 = *(ushort *)(outputArray + 3);\n              goto LAB_08006bc6;\n            }\n            index1 = index1 + index2;\n          }\n        }\n      }\n      else if (((0 < outputArray[1]) || (0 < outputArray[0x10])) &&\n              (functionPointer = (code *)outputArray[0xb], functionPointer != (code *)0x0)) {\n        value3 = *inputArray;\n        *inputArray = 0;\n        if ((value2 & 0x1000) == 0) {\n          index1 = (*functionPointer)(inputArray,outputArray[8],value1 & 0x1000,1);\n          if ((index1 == -1) && (value1 = *inputArray, value1 != 0)) {\n            if ((value1 != 0x1d) && (value1 != 0x16)) {\n              *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*unrecovered_jump_table)();\n              return result;\n            }\n            *inputArray = value3;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          index1 = outputArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(outputArray + 3) << 0x1d) < 0) &&\n           (index1 = index1 - outputArray[1], outputArray[0xd] != 0)) {\n          index1 = index1 - outputArray[0x10];\n        }\n        index1 = (*(code *)outputArray[0xb])(inputArray,outputArray[8],index1,0);\n        value2 = *(ushort *)(outputArray + 3);\n        if ((index1 == -1) &&\n           ((0x1d < *inputArray || (-1 < (int)((0x20400001U >> (*inputArray & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(outputArray + 3) = value2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecovered_jump_table)(0xffffffff);\n          return result;\n        }\n        outputArray[1] = 0;\n        *outputArray = outputArray[4];\n        if (((int)((uint)value2 << 0x13) < 0) && ((index1 != -1 || (*inputArray == 0)))) {\n          outputArray[0x15] = index1;\n        }\n        pointer1 = (int *)outputArray[0xd];\n        *inputArray = value3;\n        if (pointer1 != (int *)0x0) {\n          if (pointer1 != outputArray + 0x11) {\n            update_linked_list_080061f0(inputArray);\n          }\n          outputArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecovered_jump_table)();\n          return result;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*unrecovered_jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "extract_function_08006be0",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "uVar1": "result",
                "iVar2": "index1",
                "piVar3": "pointer1",
                "uVar4": "value1",
                "uVar5": "value2",
                "iVar6": "index2",
                "unaff_r4": "unaffected_register4",
                "unaff_r5": "unaffected_register5",
                "pcVar7": "functionPointer",
                "iVar8": "index3",
                "uVar9": "value3",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_data_08006c40",
            "code": "\nvoid initializeData_08006c40(undefined4 *dataBuffer,undefined2 value1,undefined2 value2)\n\n{\n  *dataBuffer = 0;\n  dataBuffer[1] = 0;\n  dataBuffer[2] = 0;\n  *(undefined2 *)(dataBuffer + 3) = value1;\n  dataBuffer[0x19] = 0;\n  *(undefined2 *)((int)dataBuffer + 0xe) = value2;\n  dataBuffer[4] = 0;\n  dataBuffer[5] = 0;\n  dataBuffer[6] = 0;\n  fill_memory_080061e0(dataBuffer + 0x17,0,8);\n  dataBuffer[8] = dataBuffer;\n  dataBuffer[9] = 0x8006f39;\n  dataBuffer[10] = 0x8006f5b;\n  dataBuffer[0xb] = 0x8006f93;\n  dataBuffer[0xc] = &LAB_08006fb6_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_data_08006c40",
                "param_1": "dataBuffer",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_and_initialize_memory_08006c88",
            "code": "\nundefined4 * allocate_and_initialize_memory_08006c88(undefined4 input_param,int count)\n\n{\n  undefined4 *allocated_memory;\n  int memory_size;\n  \n  memory_size = (count + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08006288(input_param,memory_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = count;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_080061e0(allocated_memory + 3,0,memory_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_08006c88",
                "param_1": "input_param",
                "param_2": "count",
                "puVar1": "allocated_memory",
                "iVar2": "memory_size"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_structure_08006cb4",
            "code": "\nvoid initialize_data_structure_08006cb4(undefined4 *data_structure)\n\n{\n  undefined4 address;\n  undefined4 *pointer;\n  \n  if (data_structure[6] == 0) {\n    data_structure[0x12] = 0;\n    data_structure[0x13] = 0;\n    data_structure[0x14] = 0;\n    pointer = &DAT_200000fc;\n    data_structure[10] = &LAB_08006c34_1;\n    if (data_structure == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data_structure == &DAT_200000fc) {\n      data_structure[6] = pointer;\n    }\n    address = initialize_memory();\n    data_structure[1] = address;\n    address = initialize_memory(data_structure);\n    data_structure[2] = address;\n    address = initialize_memory(data_structure);\n    data_structure[3] = address;\n    initialize_data(data_structure[1],4,0);\n    initialize_data(data_structure[2],9,1);\n    initialize_data(data_structure[3],0x12,2);\n    data_structure[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_structure_08006cb4",
                "param_1": "data_structure",
                "uVar1": "address",
                "puVar2": "pointer",
                "initialize_memory_08006d14": "initialize_memory",
                "initialize_data_08006c40": "initialize_data"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_memory_08006d14",
            "code": "\nint * initialize_memory_08006d14(undefined4 *output,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int *currentPtr;\n  int *innerPtr;\n  int **memoryBlock;\n  \n  if (DAT_20000114 == 0) {\n    initialize_data_structure_08006cb4(&DAT_200000fc);\n  }\n  memoryBlock = (int **)&DAT_20000144;\n  do {\n    innerPtr = memoryBlock[2];\n    currentPtr = memoryBlock[1];\n    while (currentPtr = (int *)((int)currentPtr + -1), -1 < (int)currentPtr) {\n      if (*(short *)(innerPtr + 3) == 0) {\n        *(undefined2 *)((int)innerPtr + 0xe) = 0xffff;\n        innerPtr[0x19] = 0;\n        *(undefined2 *)(innerPtr + 3) = 1;\n        *innerPtr = 0;\n        innerPtr[2] = 0;\n        innerPtr[1] = 0;\n        innerPtr[4] = 0;\n        innerPtr[5] = 0;\n        innerPtr[6] = 0;\n        fill_memory_080061e0(innerPtr + 0x17,0,8,1,arg3);\n        innerPtr[0xd] = 0;\n        innerPtr[0xe] = 0;\n        innerPtr[0x12] = 0;\n        innerPtr[0x13] = 0;\n        return innerPtr;\n      }\n      innerPtr = innerPtr + 0x1a;\n    }\n    if (*memoryBlock == (int *)0x0) {\n      currentPtr = (int *)allocate_and_initialize_memory_08006d14_08006c88(output,4);\n      *memoryBlock = currentPtr;\n      if (currentPtr == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    memoryBlock = (int **)*memoryBlock;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_memory_08006d14",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "piVar1": "currentPtr",
                "piVar2": "innerPtr",
                "ppiVar3": "memoryBlock"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "initialize_and_check_memory_08006dc8",
            "code": "\nundefined4 initialize_and_check_memory_08006dc8(undefined4 value,int input_data,undefined4 *output_value,uint *result)\n\n{\n  int initialize_result;\n  undefined4 return_value;\n  undefined stack_data [4];\n  uint local_value;\n  \n  if ((*(short *)(input_data + 0xe) < 0) ||\n     (initialize_result = initialize_memory_08007004(value,(int)*(short *)(input_data + 0xe),stack_data), initialize_result < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x18) < 0) {\n      return_value = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *result = (uint)((local_value & 0xf000) == 0x2000);\n  }\n  return_value = 0x400;\nLAB_08006e08:\n  *output_value = return_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "initialize_and_check_memory_08006dc8",
                "param_1": "value",
                "param_2": "input_data",
                "param_3": "output_value",
                "param_4": "result",
                "iVar1": "initialize_result",
                "uVar2": "return_value",
                "auStack_4c": "stack_data",
                "local_48": "local_value"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "initialize_memory_08006e10",
            "code": "\nvoid initializeMemory_08006e10(int ptr,int *data)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int size;\n  int *tempPtr;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    size = ptr;\n    tempPtr = data;\n    result = initialize_and_check_memory_08006dc8(ptr,data,&size,&tempPtr);\n    allocatedMemory = allocate_memory_08006288(ptr,size);\n    if (allocatedMemory != 0) {\n      *(undefined **)(ptr + 0x28) = &LAB_08006c34_1;\n      *data = allocatedMemory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[4] = allocatedMemory;\n      data[5] = size;\n      if ((tempPtr != (int *)0x0) &&\n         (allocatedMemory = update_result_depending_on_test_08007028(ptr,(int)*(short *)((int)data + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "initialize_memory_08006e10",
                "param_1": "ptr",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "size",
                "local_14": "tempPtr"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_char_index_08006e90",
            "code": "\nchar * find_char_index_08006e90(char *string,char target_char,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != target_char);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_char_index_08006e90",
                "param_1": "string",
                "param_2": "target_char",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "initialize_resource_08006f00",
            "code": "\nint initializeResource_08006f00(uint resourceId)\n\n{\n  int *resourcePointer;\n  undefined4 result;\n  int returnValue;\n  code *functionPointer;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 returnAddress;\n  undefined4 *resourcePointer2;\n  \n  resourcePointer = DAT_200000f8;\n  resourcePointer2 = &DAT_200000f8;\n  if (0x1f < resourceId) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  returnValue = DAT_200000f8[0x11];\n  if ((returnValue != 0) && (functionPointer = *(code **)(returnValue + resourceId * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(returnValue + resourceId * 4) = 0;\n      (*functionPointer)(resourceId);\n    }\n    return 0;\n  }\n  result = thunk_initialize_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  returnValue = initialize_variable_08005740(result,resourceId,resourceId,0,resourcePointer2,parameter1,parameter2,returnAddress);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *resourcePointer = DAT_200006a4;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "initialize_resource_08006f00",
                "param_1": "resourceId",
                "piVar1": "resourcePointer",
                "uVar2": "result",
                "iVar3": "returnValue",
                "pcVar4": "functionPointer",
                "unaff_r4": "parameter1",
                "unaff_r5": "parameter2",
                "in_lr": "returnAddress",
                "puVar5": "resourcePointer2"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "initialize_return_value_thunk_08005750",
            "code": "\nundefined4 initializeReturnValue_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "initialize_return_value_thunk_08005750"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_value_08006f38",
            "code": "\nvoid updateValue_08006f38(undefined4 inputParam,int inputVar)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = initialize_and_check_error_0800706c(inputParam,(int)*(short *)(inputVar + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(inputVar + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(inputVar + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(inputVar + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(inputVar + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_value_08006f38",
                "param_1": "inputParam",
                "param_2": "inputVar",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "process_data_08006f5a",
            "code": "\nvoid processData_08006f5a(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_and_check_result_08007048(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  result = process_data_wrapper_08005730((int)*(short *)(input + 0xe),paramA,paramB,paramB,paramB,register4,\n                       register5,linkRegister);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "initialize_result_08006f92",
            "code": "\nvoid initialize_result_08006f92(undefined4 param,int memory_location)\n\n{\n  int result;\n  ushort modified_value;\n  bool is_error;\n  \n  result = initialize_and_check_result_08007048(param,(int)*(short *)(memory_location + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    modified_value = *(ushort *)(memory_location + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(memory_location + 0x54) = result;\n    modified_value = *(ushort *)(memory_location + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(memory_location + 0xc) = modified_value;\n  }\n  if (!is_error) {\n    *(ushort *)(memory_location + 0xc) = modified_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "initialize_result_08006f92",
                "param_1": "param",
                "param_2": "memory_location",
                "iVar1": "result",
                "uVar2": "modified_value",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "initialize_memory_08007004",
            "code": "\nvoid initializeMemory_08007004(int *output,undefined4 size,undefined4 arg3,undefined4 arg4)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_memory_0800571a(size,arg3,arg3,0,arg4);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "initialize_memory_08007004",
                "param_1": "output",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "update_result_depending_on_test_08007028",
            "code": "\nvoid updateResultDependingOnTest_08007028(int *resultPointer,undefined4 testValue)\n\n{\n  int testResult;\n  \n  DAT_200006a4 = 0;\n  testResult = check_success_08005724(testValue);\n  if ((testResult == -1) && (DAT_200006a4 != 0)) {\n    *resultPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "update_result_depending_on_test_08007028",
                "param_1": "resultPointer",
                "param_2": "testValue",
                "iVar1": "testResult"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "initialize_and_check_result_08007048",
            "code": "\nvoid initialize_and_check_result_08007048(int *result_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int init_result;\n  \n  DAT_200006a4 = 0;\n  init_result = initialize_08005728(param_2,param_3,param_4,param_4,param_4);\n  if ((init_result == -1) && (DAT_200006a4 != 0)) {\n    *result_ptr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "initialize_and_check_result_08007048",
                "param_1": "result_ptr",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "initialize_and_check_error_0800706c",
            "code": "\nvoid initializeAndCheckError_0800706c(int *outputResult,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int initializationResult;\n  \n  DAT_200006a4 = 0;\n  initializationResult = initialize_0800572c(inputParam1,inputParam2,inputParam3,inputParam3,inputParam3);\n  if ((initializationResult == -1) && (DAT_200006a4 != 0)) {\n    *outputResult = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "initialize_and_check_error_0800706c",
                "param_1": "outputResult",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "initializationResult"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "process_and_jump_08007090",
            "code": "\nvoid process_and_jump_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = process_and_jump_08007090;\n  process_resource_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "process_and_jump_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 173359,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}