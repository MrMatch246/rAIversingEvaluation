{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "updateValue_08002470",
                "PTR_08002490": "ptr",
                "param_1": "value",
                "DAT_08002490": "ptr"
            },
            "code": "void updateValue_08002470(uint value) {\n  uint* PTR_08002490 = (uint*)(DAT_08002490 + 0xc);\n  uint mask = 0xf8ff;\n  uint newValue = (value & 7) << 8 | (*PTR_08002490 & mask) | 0x5fa0000;\n  *PTR_08002490 = newValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": true,
            "current_name": "updateValue_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "set_memory_permissions_08007004",
                "iVar2": "set_permission_result",
                "param_1": "permission_result",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "permission_ptr"
            },
            "code": "void set_memory_permissions_08007004(int *permission_result, void *address, unsigned int size, int permissions, unsigned int page_size) {\n  undefined *permission_ptr;\n  int set_permission_result;\n  permission_ptr = PTR_DAT_08007024;\n  *(unsigned int *)PTR_DAT_08007024 = 0;\n  set_permission_result = set_memory_permissions_08007004_0800571a(address, size, size, permissions, page_size);\n  if ((set_permission_result == -1) && (*(int *)permission_ptr != 0)) {\n    *permission_result = *(int *)permission_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": true,
            "current_name": "set_memory_permissions_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = allocate_and_set_permissions_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_data_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_character_in_string_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_character_in_string_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_character_in_string_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006cb4",
                "FUN_080066b0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": true,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "initialize_value_at_pointer_08005740",
                "PTR_DAT_0800574c": "pointer_to_initialize",
                "0x16": "value_to_initialize"
            },
            "code": "void initialize_value_at_pointer_08005740() {\n  int value_to_initialize = 22;\n  int* PTR_DAT_0800574c = PTR_DAT_0800574c;\n  *PTR_DAT_0800574c = value_to_initialize;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": true,
            "current_name": "initialize_value_at_pointer_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "get_value_08006158",
                "param_1": "value",
                "param_2": "shift_amount",
                "DAT_08006170": "is_initialized"
            },
            "code": "unsigned long long get_value_08006158(uint32_t value, uint32_t shift_amount) {\n  if (DAT_08006170 != 0) {\n    return (uint64_t)value << 0x20;\n  }\n  return (uint64_t)2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": true,
            "current_name": "get_value_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_data_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = get_data_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_data_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = get_data_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      count_down_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_data_from_pointer_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = get_data_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = get_data_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = get_data_from_pointer_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_data_from_pointer_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_data_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = get_data_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_data_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08001cc4",
                "FUN_0800365c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "iVar1": "subtracted_value",
                "FUN_08004ec4": "execute_function_if_conditions_met_08004ec4",
                "param_1": "input_value"
            },
            "code": "void execute_function_if_conditions_met_08004ec4(undefined4 input_value)\n{\n  int subtracted_value = subtract_four_from_input();\n  if (((*(code **)(subtracted_value + 0x60) != (code *)0x0) && (*(char *)(subtracted_value + 0x5c) == '\\x01')) &&\n     (*(char *)(subtracted_value + 0x2c) != ' ')) {\n    (**(code **)(subtracted_value + 0x60))(subtracted_value + 0x68);\n  }\n  set_bit_and_update_values(input_value);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_080032b4",
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "imported": true,
            "current_name": "execute_function_if_conditions_met_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "pcVar2": "current_pos",
                "pcVar3": "current_char_pos",
                "FUN_08000178": "get_end_of_string_08000178",
                "param_1": "str",
                "cVar1": "current_char"
            },
            "code": "char get_end_of_string_08000178(char *str) {\n  char current_char;\n  char *current_pos = str;\n  do {\n    current_pos++;\n    current_char = *current_pos;\n  } while (current_char != '\\0');\n  return current_pos + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "imported": true,
            "current_name": "get_end_of_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": true,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "puVar1[2]": "array_ptr[2]",
                "iVar2": "array_size_minus_one",
                "*puVar1": "*array_ptr",
                "fill_array_with_value_080061e0": "fill_array_with_value_080061e0",
                "total_array_size": "total_array_size",
                "param_1": "memory_block",
                "puVar1[1]": "array_ptr[1]",
                "FUN_08006c88": "allocate_and_initialize_array_08006c88",
                "param_2": "array_size",
                "puVar1": "array_ptr",
                "0x68": "array_element_size"
            },
            "code": "undefined4 * allocate_and_initialize_array_08006c88(undefined4 memory_block, int array_size)\n{\n  undefined4 *array_ptr;\n  int array_size_minus_one = array_size - 1;\n  int array_element_size = 0x68;\n  int total_array_size = (array_size_minus_one * array_element_size) + 0x74;\n  array_ptr = (undefined4 *)allocate_memory_block_08006288(memory_block, total_array_size);\n  if (array_ptr != (undefined4 *)0x0) {\n    *array_ptr = 0;\n    array_ptr[1] = array_size;\n    array_ptr[2] = array_ptr + 3;\n    fill_array_with_value_080061e0(array_ptr + 3, 0, array_size_minus_one * array_element_size);\n  }\n  return array_ptr;\n}",
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_array_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "iVar1": "bitCount",
                "PTR_DAT_08006100": "dataPtr",
                "count_bits_set_to_one_08005f8c": "countBitsSetToOne",
                "FUN_080060e4": "checkAndProcessData_080060e4",
                "process_data_080060d4": "processData"
            },
            "code": "void checkAndProcessData_080060e4(void)\n{\n  int bitCount = countBitsSetToOne();\n  int* PTR_DAT_08006100 = PTR_DAT_08006100 + bitCount * 0x14 + 0xc;\n  if (*PTR_DAT_08006100 != 0) {\n    processData();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": true,
            "current_name": "checkAndProcessData_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "uVar1": "value",
                "puVar2": "param_value",
                "param_1": "param_array",
                "FUN_0800258c": "get_value_from_param_0800258c"
            },
            "code": "uint get_value_from_param_0800258c(uint **param_array) {\n  uint value;\n  if (*(char *)((int)param_array + 0x21) != '\\x02') {\n    param_array[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **param_array = **param_array & 0xfffffff1;\n  **param_array = **param_array & 0xfffffffe;\n  uint *param_value = *param_array;\n  if (param_value == PTR_DAT_0800261c) {\n    value = 1;\n  }\n  else if (param_value == PTR_DAT_0800261c + 5) {\n    value = 0x10;\n  }\n  else if (param_value == PTR_DAT_0800261c + 10) {\n    value = 0x100;\n  }\n  else if (param_value == PTR_DAT_0800261c + 0xf) {\n    value = 0x1000;\n  }\n  else if (param_value == PTR_DAT_0800261c + 0x14) {\n    value = 0x10000;\n  }\n  else if (param_value == PTR_DAT_0800261c + 0x19) {\n    value = 0x100000;\n  }\n  else {\n    value = 0x1000000;\n  }\n  *(uint *)(PTR_DAT_08002620 + 4) = value;\n  *(char *)((int)param_array + 0x21) = 1;\n  *(uint *)(param_array + 8) = 0;\n  if (param_array[0xd] != (uint *)0x0) {\n    (*(code *)param_array[0xd])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "get_value_from_param_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "check_and_process_flags_08004e20",
                "PTR_DAT_08004e30": "flags_ptr",
                "process_flags_08003f18": "process_flags"
            },
            "code": "void check_and_process_flags_08004e20(void)\n{\n  int* PTR_DAT_08004e30 = (int*)PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    process_flags_08003f18();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": true,
            "current_name": "check_and_process_flags_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while(true)\n  {\n    // Do nothing, just wait\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": true,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "puVar2": "ptr_input_array",
                "puVar3": "ptr_input_array_9",
                "param_1": "input_array",
                "cVar1": "current_char",
                "FUN_080032b4": "process_input_080032b4"
            },
            "code": "uint process_input_080032b4(uint **input_array) {\n  char current_char = *(char *)((int)input_array + 0x3d);\n  (*input_array)[1] &= 0xfffff8ff;\n  **input_array |= 1;\n  **input_array &= 0xfffffbff;\n  uint *ptr_input_array = *input_array;\n  if ((ptr_input_array[1] & 0x800) != 0) {\n    if ((*(char *)((int)input_array + 0x3d) == '\"') || (*(char *)((int)input_array + 0x3d) == '*')) {\n      *(short *)((int)input_array + 0x2a) = (short)*(undefined4 *)(*input_array[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input_array + 0x2a) = (short)*(undefined4 *)(*input_array[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    if ((ptr_input_array[5] & 4) != 0) {\n      uint *ptr_input_array_9 = input_array[9];\n      input_array[9] = (uint *)((int)ptr_input_array_9 + 1);\n      *(char *)ptr_input_array_9 = (char)ptr_input_array[4];\n      *(short *)((int)input_array + 0x2a) -= 1;\n    }\n    if (((*input_array)[5] & 0x40) != 0) {\n      ptr_input_array = input_array[9];\n      input_array[9] = (uint *)((int)ptr_input_array + 1);\n      *(char *)ptr_input_array = (char)(*input_array)[4];\n      *(short *)((int)input_array + 0x2a) -= 1;\n    }\n    input_array[0x10] = (uint *)((uint)input_array[0x10] | 4);\n  }\n  if (input_array[0x10] == (uint *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input_array[0xb] = PTR_DAT_080033b4;\n      input_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      execute_function_if_conditions_met_08004ec4();\n    }\n    else if ((input_array[0xc] == (uint *)0x22) || (current_char == '\"')) {\n      input_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      do_nothing_08002ca4();\n    }\n  }\n  else {\n    process_input_080032b4_0800316c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08004ec4",
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "param_1": "num1",
                "param_2": "num2",
                "FUN_08004d06": "find_non_zero_08004d06"
            },
            "code": "int find_non_zero_08004d06(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "find_non_zero_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "iVar1": "currentOffset",
                "puVar2": "memoryAddress",
                "param_1": "offset",
                "FUN_080056d8": "calculateOffset_080056d8"
            },
            "code": "int calculateOffset_080056d8(int offset) {\n  int currentOffset = *(int *)PTR_DAT_08005708;\n  undefined *memoryAddress = (undefined *)(offset + currentOffset);\n  if (memoryAddress <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = memoryAddress;\n    return currentOffset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": true,
            "current_name": "calculateOffset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "is_input_valid_08000a18": "is_input_valid",
                "FUN_080019f6": "validate_input_080019f6",
                "iVar1": "is_valid",
                "is_input_validated_080009dc": "is_input_validated",
                "param_1": "input_data",
                "uVar3": "input_arg1",
                "uVar2": "input_arg3",
                "uVar5": "input_arg4",
                "uVar4": "input_arg2"
            },
            "code": "void validate_input_080019f6(int input_data){\n  int input_arg1 = **(undefined4 **)(input_data + 0x3c);\n  int input_arg2 = (*(undefined4 **)(input_data + 0x3c))[1];\n  *(undefined4 *)(input_data + 0x48) = input_arg1;\n  *(undefined4 *)(input_data + 0x4c) = input_arg2;\n  int input_arg3 = (*(undefined4 **)(input_data + 0x38))[1];\n  *(undefined4 *)(input_data + 0x50) = **(undefined4 **)(input_data + 0x38);\n  *(undefined4 *)(input_data + 0x54) = input_arg3;\n  int is_valid = is_input_valid_08000a18(input_arg1, input_arg2, *(undefined4 *)(input_data + 0x68), *(undefined4 *)(input_data + 0x6c));\n  if (is_valid == 0) {\n    int is_validated = is_input_validated_080009dc(input_arg1, input_arg2, *(undefined4 *)(input_data + 0x60), *(undefined4 *)(input_data + 100));\n    if (is_validated != 0) {\n      *(undefined4 *)(input_data + 0x48) = *(undefined4 *)(input_data + 0x60);\n      *(undefined4 *)(input_data + 0x4c) = *(undefined4 *)(input_data + 100);\n    }\n    return;\n  }\n  *(undefined4 *)(input_data + 0x48) = *(undefined4 *)(input_data + 0x68);\n  *(undefined4 *)(input_data + 0x4c) = *(undefined4 *)(input_data + 0x6c);\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": true,
            "current_name": "validate_input_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_input_08002f9c",
                "param_1": "input",
                "DAT_08002f28": "current_short",
                "DAT_08002f18": "current_char",
                "puVar1": "ptr1",
                "DAT_08002f30": "current_uint"
            },
            "code": "int process_input_08002f9c(uint **input) {\n  uint *ptr1 = input[9];\n  char DAT_08002f18 = *(char *)((int)input + 0x3d);\n  ushort DAT_08002f28 = *(ushort *)((int)input + 0x2a);\n  uint DAT_08002f30 = **input;\n\n  if (DAT_08002f18 == '\"') {\n    if (DAT_08002f28 < 4) {\n      if (DAT_08002f28 - 2 < 2) {\n        if (input[0xb] == (uint *)0x2) {\n          DAT_08002f30 |= 0x400;\n        }\n        else {\n          DAT_08002f30 &= 0xfffffbff;\n          DAT_08002f30 |= 0x800;\n        }\n        (*input)[1] &= 0xfffffbff;\n      }\n      else {\n        if (input[0xb] == (uint *)0x2) {\n          DAT_08002f30 |= 0x400;\n        }\n        else {\n          DAT_08002f30 &= 0xfffffbff;\n        }\n        (*input)[1] &= 0xfffff8ff;\n        *(char *)ptr1 = (char)(*input)[4];\n        DAT_08002f28--;\n        *(char *)((int)input + 0x3d) = 0x20;\n        input[0xc] = (uint *)0x0;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08002f9a();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08002c50();\n        }\n      }\n    }\n    else {\n      *(char *)ptr1 = (char)(*input)[4];\n      DAT_08002f28--;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "PTR_DAT_08005560": "PARAM_ADDRESSES_PTR",
                "iVar1": "is_flag_set",
                "FUN_08005510": "set_param_values_08005510",
                "PTR_DAT_08005564": "PARAM_SIZES_PTR",
                "param_1": "param_address",
                "write_bits_to_memory_08002494": "write_bits_to_memory",
                "param_2": "data_address",
                "param_3": "data_size",
                "param_4": "bit_offset",
                "PTR_DAT_0800555c": "PARAM_VALUES_PTR",
                "uVar2": "index",
                "set_bit_in_array_080024f8": "set_bit_in_array"
            },
            "code": "void set_param_values_08005510(uint32_t param_address, uint32_t data_address, uint32_t data_size, uint32_t bit_offset) {\n  if (param_address != 0) {\n    int is_flag_set = is_flag_set();\n    if (is_flag_set == 0) {\n      uint32_t index = *(uint8_t *)(param_address + 0x44);\n      *(uint32_t *)(PTR_DAT_0800555c + index * 4) = data_address;\n      *(uint32_t *)(PTR_DAT_08005560 + index * 4) = param_address;\n      write_bits_to_memory((int)*(char *)(param_address + 0x5a), 0, 1, index, bit_offset);\n      set_bit_in_array((int)*(char *)(param_address + 0x5a));\n      set_param_values_08005510(*(uint32_t *)(PTR_DAT_08005564 + index * 4), param_address + 0x45, 1, 0);\n    }\n  }\n}",
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_0800548c",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": true,
            "current_name": "set_param_values_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_0800306c",
                "FUN_08002f9c"
            ],
            "imported": true,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "always_returns_one_08005750"
            },
            "code": "int always_returns_one_08005750(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": true,
            "current_name": "always_returns_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "uVar1": "input_value",
                "FUN_08002cf2": "process_input_08002cf2",
                "param_1": "input_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "input_flags"
            },
            "code": "int process_input_08002cf2(int *input_ptr, int param_2, int param_3, int param_4)\n{\n  int input_flags = *(int *)(*input_ptr + 0x18);\n  int input_value;\n  if ((input_flags & 0x80) == 0) {\n    input_value = *(int *)(input_ptr + 3);\n  }\n  else {\n    input_value = *(int *)(input_ptr + 6);\n  }\n  process_input_08002cf2_08004e74(input_ptr, (input_flags & 4) == 0, input_value, input_flags, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "iVar4": "padding",
                "FUN_08006288": "allocate_memory_block_08006288",
                "puVar3": "current_block_address",
                "param_1": "block_start_address",
                "puVar5": "temp_pointer",
                "puVar7": "previous_block_address",
                "param_2": "block_size",
                "puVar1": "unused_pointer",
                "uVar2": "result",
                "uVar6": "block_padding",
                "uVar8": "new_block_size"
            },
            "code": "uint allocate_memory_block_08006288(uint *block_start_address, uint block_size)\n{\n  uint *current_block_address;\n  uint *previous_block_address;\n  uint block_padding;\n  uint new_block_size;\n  \n  new_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < block_size)) {\n    *block_start_address = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    current_block_address = *(uint **)PTR_DAT_0800633c;\n    previous_block_address = *(uint **)PTR_DAT_0800633c;\n    while (current_block_address != (uint *)0x0) {\n      block_padding = *current_block_address - new_block_size;\n      if (-1 < (int)block_padding) {\n        if (block_padding < 0xc) {\n          if (previous_block_address == current_block_address) {\n            new_block_size = previous_block_address[1];\n            *(uint *)PTR_DAT_0800633c = new_block_size;\n          }\n          else {\n            new_block_size = current_block_address[1];\n          }\n          if (previous_block_address != current_block_address) {\n            previous_block_address[1] = new_block_size;\n            previous_block_address = current_block_address;\n          }\n        }\n        else {\n          *current_block_address = block_padding;\n          *(uint *)((int)current_block_address + block_padding) = new_block_size;\n          previous_block_address = (uint *)((int)current_block_address + block_padding);\n        }\n        do_nothing_08006eae(block_start_address);\n        block_padding = (int)previous_block_address + 0xbU & 0xfffffff8;\n        new_block_size = block_padding - (int)(previous_block_address + 1);\n        if (new_block_size != 0) {\n          *(int *)((int)previous_block_address + new_block_size) = -new_block_size;\n          return block_padding;\n        }\n        return block_padding;\n      }\n      previous_block_address = current_block_address;\n      current_block_address = (uint *)current_block_address[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uint result = calculate_offset_and_set_param_08006920(block_start_address);\n      *(uint *)PTR_DAT_08006340 = result;\n    }\n    current_block_address = (uint *)calculate_offset_and_set_param_08006920(block_start_address,new_block_size);\n    if ((current_block_address != (uint *)0xffffffff) && ((previous_block_address = (uint *)((int)current_block_address + 3U & 0xfffffffc), current_block_address == previous_block_address || (new_block_size = calculate_offset_and_set_param_08006920(block_start_address,(int)previous_block_address - (int)current_block_address), new_block_size != -1)))) {\n      *previous_block_address = new_block_size;\n      do_nothing_08006eae(block_start_address);\n      block_padding = (int)previous_block_address + 0xbU & 0xfffffff8;\n      new_block_size = block_padding - (int)(previous_block_address + 1);\n      if (new_block_size != 0) {\n        *(int *)((int)previous_block_address + new_block_size) = -new_block_size;\n        return block_padding;\n      }\n      return block_padding;\n    }\n    *block_start_address = 0xc;\n    do_nothing_08006eae(block_start_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006e10",
                "FUN_08006c88"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "iVar1": "result",
                "flag": "flag",
                "FUN_08002004": "set_data_flags_08002004",
                "puVar2": "ptr_data",
                "param_1": "data",
                "data_flag": "data_flag",
                "DAT_080020ec": "DAT_080020ec",
                "DAT_080020e8": "DAT_080020e8",
                "mask": "mask"
            },
            "code": "int set_data_flags_08002004(uint32_t *data){\n  int result;\n  uint32_t *ptr_data;\n  uint32_t *DAT_080020e8;\n  uint32_t *DAT_080020ec;\n  uint32_t data_flag;\n  uint32_t mask;\n  uint32_t flag;\n  if (*(char *)(data + 9) != 1) {\n    *(undefined *)(data + 9) = 1;\n    result = set_data_ready_08001f84();\n    if (result == 0) {\n      data_flag = data[10];\n      mask = 0xfffffcfe;\n      flag = 0x100;\n      data[10] = (data_flag & mask) | flag;\n      ptr_data = (uint32_t *)*data;\n      DAT_080020e8 = (uint32_t *)0x080020e8;\n      if ((ptr_data == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        data[10] |= 0x100000;\n        DAT_080020ec = (uint32_t *)0x080020ec;\n        if ((*(uint *)(DAT_080020ec + 4) & 0x400) != 0) {\n          data[10] = (data_flag & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        data[10] &= 0xffefffff;\n        if ((ptr_data[1] & 0x400) != 0) {\n          data[10] = (data_flag & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000) == 0) {\n        data[11] = 0;\n      }\n      else {\n        data[11] &= 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr_data = 0xfffffffd;\n      ptr_data = (uint32_t *)*data;\n      if (((ptr_data[2] & 0xe0000) == 0xe0000) && ((ptr_data != DAT_080020e8) || ((DAT_080020e8[-0xff] & 0xf0000) == 0))) {\n        data[2] |= 0x500000;\n      }\n      else {\n        data[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "set_data_flags_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "bVar1": "is_valid_input",
                "FUN_08005754": "get_updated_value_08005754",
                "param_1": "input_value",
                "cVar2": "character_value",
                "uVar3": "updated_value",
                "uVar4": "shift_amount"
            },
            "code": "uint get_updated_value_08005754(uint input_value) {\n  bool is_valid_input;\n  char character_value;\n  uint updated_value;\n  uint shift_amount;\n  \n  if (input_value < 14) {\n    is_valid_input = (input_value + 46 < 60);\n  }\n  else {\n    is_valid_input = (input_value < 60);\n  }\n  \n  if (is_valid_input) {\n    if (input_value < 14) {\n      input_value += 46;\n    }\n    character_value = PTR_DAT_080057ac[input_value];\n  }\n  else {\n    character_value = -1;\n  }\n  \n  if (character_value == -1) {\n    updated_value = 0;\n  }\n  else {\n    updated_value = find_and_update_value_08004a4c();\n    shift_amount = *(uint *)PTR_DAT_080057b0;\n    if (shift_amount != 12) {\n      if (shift_amount < 12) {\n        updated_value >>= (12 - shift_amount);\n      }\n      else {\n        updated_value <<= (shift_amount - 12);\n      }\n    }\n  }\n  return updated_value;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "get_updated_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_08005fc8(int input_1, int input_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08006068;\n  if (input_1 != 1) {\n    return;\n  }\n  if (input_2 == 0xffff) {\n    *PTR_DAT_08006068 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    get_value_at_address_08006112(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, data_ptr, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "remaining_bytes_ptr": "remaining_bytes_ptr",
                "param_1": "buffer",
                "FUN_08002ab8": "read_byte_from_buffer_08002ab8",
                "pbVar1": "byte_ptr",
                "PTR_": "buffer_ptr",
                "DAT_": "destination_ptr"
            },
            "code": "int read_byte_from_buffer_08002ab8(int *buffer) {\n  int *PTR_ = (int *)buffer;\n  short *remaining_bytes_ptr = (short *)(PTR_ + 10);\n  if (*remaining_bytes_ptr != 0) {\n    byte *byte_ptr = (byte *)buffer[9];\n    buffer[9] = (int)(byte_ptr + 1);\n    uint *DAT_ = (uint *)(*PTR_ + 16);\n    *DAT_ = (uint)*byte_ptr;\n    *remaining_bytes_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "read_byte_from_buffer_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "iVar1": "function_pointer",
                "uStack_8": "parameter_3",
                "param_1": "input_1",
                "uStack_4": "parameter_4",
                "FUN_080068f0": "process_input_and_call_function_080068f0",
                "uStack_c": "parameter_2",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "parameter_1"
            },
            "code": "void process_input_and_call_function_080068f0(undefined4 input_1, undefined4 input_2, undefined4 input_3, undefined4 input_4)\n{\n  int function_pointer = *(int *)PTR_PTR_DAT_0800691c;\n  undefined4 parameter_1 = input_1;\n  undefined4 parameter_2 = input_2;\n  undefined4 parameter_3 = input_3;\n  undefined4 parameter_4 = input_4;\n\n  if ((function_pointer != 0) && (*(int *)(function_pointer + 0x18) == 0)) {\n    initialize_data_08006cb4(function_pointer);\n  }\n  FUNC_08006394(function_pointer, *(undefined4 *)(function_pointer + 8), input_1, &input_2, parameter_1, &parameter_2);\n  return;\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "process_input_and_call_function_080068f0",
            "code_backup": "\nvoid FUN_080068f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_0800691c;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar1);\n  }\n  FUNC_08006394(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_character_in_string_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = process_data_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "imported": true,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "bVar1": "current_bits",
                "param_1": "param_address",
                "param_2": "new_bits",
                "param_3": "param_3",
                "FUN_0800138e": "set_bits_and_check_0800138e",
                "param_4": "param_4"
            },
            "code": "void set_bits_and_check_0800138e(int param_address, uint8_t new_bits, uint32_t param_3, uint32_t param_4) {\n  uint8_t current_bits = *(uint8_t *)(param_address + 0x14);\n  *(uint8_t *)(param_address + 0x14) = current_bits | 0x04;\n  set_bits_and_check_0800138e_08001310(param_address, current_bits | 0x0c, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_0800306c",
                "FUN_08002f9c"
            ],
            "imported": true,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "iVar1": "get_flag_value_result",
                "param_1": "flag_index",
                "local_9": "flag_value",
                "FUN_0800598a": "update_flag_value_0800598a",
                "uVar2": "new_index"
            },
            "code": "void update_flag_value_0800598a(int flag_index) {\n  int get_flag_value_result;\n  ushort new_index;\n  undefined flag_value;\n  \n  get_flag_value_result = get_flag_value(flag_index,&flag_value);\n  if ((get_flag_value_result == 0) &&\n     (new_index = *(short *)(flag_index + 0x60) + 1U & 0x3f, new_index != *(ushort *)(flag_index + 0x62))) {\n    *(undefined *)(*(int *)(flag_index + 0x5c) + (uint)*(ushort *)(flag_index + 0x60)) = flag_value;\n    *(ushort *)(flag_index + 0x60) = new_index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": true,
            "current_name": "update_flag_value_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "updateValue_08002470": "update_value",
                "write_bits_to_memory_08001c3c": "write_bits_to_memory",
                "FUN_08001c88": "set_flag_update_value_write_bits_and_do_nothing_08001c88",
                "*DAT_08001ca8": "*flag_ptr",
                "do_nothing_08001c3a": "do_nothing"
            },
            "code": "int set_flag_update_value_write_bits_and_do_nothing_08001c88(void)\n{\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  update_value(3);\n  write_bits_to_memory(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08001c3c",
                "FUN_08001c3a",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": true,
            "current_name": "set_flag_update_value_write_bits_and_do_nothing_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "validate_input_080019f6": "validate_input",
                "uVar1": "is_valid_char",
                "param_1": "input_struct_ptr",
                "param_2": "is_valid",
                "FUN_08001a44": "set_input_validity_status_08001a44"
            },
            "code": "void set_input_validity_status_08001a44(int input_struct_ptr, int is_valid) {\n  if (is_valid == 1) {\n    char* input_data_ptr = (char*)(input_struct_ptr + 0x70);\n    if (*input_data_ptr == '\\0') {\n      validate_input();\n    }\n  }\n  *(char*)(input_struct_ptr + 0x70) = is_valid;\n  return;\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "set_input_validity_status_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "param_1": "data",
                "pbVar2": "byte_ptr",
                "cVar1": "current_char",
                "FUN_08002c54": "process_data_08002c54"
            },
            "code": "int process_data_08002c54(int *data)\n{\n  char current_char = *(char *)(data + 0x3d);\n  if (*(short *)(data + 0x2a) != 0)\n  {\n    byte *byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)(data + 0x2a) = *(short *)(data + 0x2a) - 1;\n    if ((*(short *)(data + 0x2a) == 0) && (current_char == ')'))\n    {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)(data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_data_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "**param_1": "current_param_value",
                "(*param_1)[5]": "params[5]",
                "iVar1": "data_value",
                "*(undefined *)((int)param_1 + 0x3a)": "*(undefined *)((int)params + 0x3a)",
                "param_1": "params",
                "(*param_1)[3]": "params[3]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)params + 0x39)",
                "param_2": "param_count",
                "param_3": "expected_result",
                "param_4": "data_offset",
                "param_5": "max_offset",
                "FUN_080043b4": "check_params_080043b4",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(params + 0xe)"
            },
            "code": "uint check_params_080043b4(uint **params, uint param_count, uint expected_result, int data_offset, uint max_offset) {\n  int data_value;\n  uint current_param_value;\n  while (1) {\n    current_param_value = **params;\n    if (((param_count & ~current_param_value) == 0) != expected_result) {\n      return 0;\n    }\n    if ((max_offset != 0xffffffff) && ((max_offset != 0) && ((data_value = get_data_from_pointer_08001cc4()) - data_offset <= max_offset))) {\n      break;\n    }\n    (*params)[3] &= 0xfffffe5f;\n    (*params)[5] &= 0xfffffffe;\n    *(undefined *)((int)params + 0x39) = 0x20;\n    *(undefined *)((int)params + 0x3a) = 0x20;\n    *(undefined *)(params + 0xe) = 0;\n    return 3;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": true,
            "current_name": "check_params_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "do_nothing_08004418": "do_nothing",
                "param_1": "device_ptr",
                "FUN_0800441a": "initialize_device_0800441a"
            },
            "code": "int initialize_device_0800441a(int *device_ptr) {\\n  if (device_ptr != NULL) {\\n    if (*(char *)((int)device_ptr + 0x39) == \"\\0\") {\\n      *(undefined *)(device_ptr + 0xe) = 0;\\n      do_nothing();\\n    }\\n    *(undefined *)((int)device_ptr + 0x39) = 0x24;\\n    *(uint *)(*device_ptr + 0xc) &= 0xffffdfff;\\n    calculate_values(device_ptr);\\n    *(uint *)(*device_ptr + 0x10) &= 0xffffb7ff;\\n    *(uint *)(*device_ptr + 0x14) &= 0xffffffd5;\\n    *(uint *)(*device_ptr + 0xc) |= 0x2000;\\n    device_ptr[0xf] = 0;\\n    *(undefined *)((int)device_ptr + 0x39) = 0x20;\\n    *(undefined *)((int)device_ptr + 0x3a) = 0x20;\\n    return 0;\\n  }\\n  return 1;\\n}",
            "called": [
                "FUN_08004418",
                "FUN_08004204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "initialize_device_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "PTR_DAT_08004d28": "function_pointer",
                "PTR_DAT_08004d2c": "argument",
                "FUN_08004d18": "execute_function_if_not_null_08004d18"
            },
            "code": "void execute_function_if_not_null_08004d18(void)\n{\n  code** PTR_DAT_08004d28 = *(code**)(PTR_DAT_08004d28);\n  if (PTR_DAT_08004d28 != NULL) {\n    code* function_to_execute = *PTR_DAT_08004d28;\n    int PTR_DAT_08004d2c = *(int*)(PTR_DAT_08004d2c);\n    function_to_execute(PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": true,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "bVar4": "is_zero",
                "uVar1": "temp1",
                "param_1": "first_param",
                "unaff_r4": "temp2",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar3": "temp3",
                "uVar2": "shift_amount",
                "in_r12": "temp4",
                "FUN_080006d4": "calculate_result_080006d4"
            },
            "code": "ulonglong calculate_result_080006d4(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n  uint shift_amount = fourth_param >> 0x14;\n  if (second_param != third_param && shift_amount != third_param) {\n    bool is_zero = (first_param | (second_param << 1)) == 0;\n    if (!is_zero) {\n      is_zero = (third_param | (fourth_param << 1)) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((second_param ^ fourth_param) & 0x80000000) << 0x20;\n    }\n    if (second_param == 0) {\n      uint temp = third_param & 0x80000000;\n      do {\n        uint temp2 = first_param & 0x80000000;\n        first_param = first_param << 1;\n        second_param = second_param * 2 + (uint)(temp2 != 0);\n      } while ((second_param & 0x100000) == 0);\n      second_param = second_param | temp;\n      if (shift_amount != 0) {\n        return CONCAT44(second_param,first_param);\n      }\n    }\n    do {\n      shift_amount = third_param & 0x80000000;\n      third_param = third_param << 1;\n      fourth_param = fourth_param * 2 + (uint)(shift_amount != 0);\n    } while ((fourth_param & 0x100000) == 0);\n    return CONCAT44(second_param,first_param);\n  }\n  bool is_zero = (first_param | (second_param << 1)) == 0;\n  if (is_zero) {\n    second_param = fourth_param;\n    first_param = third_param;\n  }\n  if (!is_zero) {\n    is_zero = (third_param | (fourth_param << 1)) == 0;\n  }\n  uint temp = second_param;\n  if (((!is_zero) && ((second_param != third_param || ((first_param | (second_param << 0xc)) == 0)))) && ((shift_amount != third_param || (first_param = third_param, temp = fourth_param, (third_param | (fourth_param << 0xc)) == 0)))) {\n    return (ulonglong)((second_param ^ fourth_param) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp,first_param) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": true,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_080016b4",
                "FUN_08001a66",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": true,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "process_data_and_call_func_08006174",
                "uStack_8": "processed_data1",
                "param_1": "data1",
                "uStack_4": "processed_data2",
                "param_2": "data2",
                "param_3": "ptr_data3",
                "param_4": "ptr_data4"
            },
            "code": "void process_data_and_call_func_08006174(int data1, int data2, int* ptr_data3, int* ptr_data4)\n{\n  int processed_data1 = data1;\n  int processed_data2 = data2;\n  int* ptr_processed_data3 = ptr_data3;\n  int* ptr_processed_data4 = ptr_data4;\n  call_func(*(int **)PTR_PTR_DATA_08006194, processed_data1, processed_data2, ptr_processed_data3, processed_data1, ptr_processed_data3);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": true,
            "current_name": "process_data_and_call_func_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "process_integer_08007028",
                "iVar2": "return_value",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_pointer"
            },
            "code": "void process_integer_08007028(int *result, undefined4 input) {\n  undefined *data_pointer;\n  int return_value;\n  data_pointer = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  return_value = get_one_08005724(input);\n  if ((return_value == -1) && (*(int *)data_pointer != 0)) {\n    *result = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": true,
            "current_name": "process_integer_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "DAT_080024f0": "data_1",
                "uVar1": "shift_amount",
                "FUN_08002494": "write_bits_to_memory_08002494",
                "param_1": "memory_address",
                "param_2": "bits_to_write",
                "param_3": "mask",
                "uVar2": "shift_distance",
                "DAT_080024f4": "data_2"
            },
            "code": "void write_bits_to_memory_08002494(uint memory_address, uint bits_to_write, uint mask) {\n  uint shift_amount = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint masked_bits = (bits_to_write & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & mask;\n  if ((int)memory_address < 0) {\n    *(char *)(DAT_080024f4 + (memory_address & 0xf)) = (char)(masked_bits << 4);\n  }\n  else {\n    *(char *)(memory_address + 0xe000e400) = (char)(masked_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005568",
                "FUN_08001c3c",
                "FUN_08001b48",
                "FUN_08005510"
            ],
            "imported": true,
            "current_name": "write_bits_to_memory_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": true,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_occurrence_if_not_negative_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = find_occurrence_if_not_negative_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_input_and_call_function_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = find_non_zero_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        process_input_and_call_function_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_value_or_return_minus_one_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        decode_params_08002624(uVar5,&local_20);\n        uVar5 = set_flag_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_value_or_return_minus_one_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        decode_params_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08004884",
                "FUN_0800441a",
                "FUN_08004c78",
                "FUN_080068f0",
                "FUN_08002624"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005384",
                "FUN_08005a68"
            ],
            "imported": true,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "uVar1": "index",
                "FUN_080055bc": "find_index_080055bc",
                "param_1": "value_to_find"
            },
            "code": "uint find_index_080055bc(int value_to_find)\n{\n  uint index = 0;\n  if (value_to_find == 0) {\n    index = 5;\n  }\n  else {\n    while (index < 5) {\n      if (value_to_find == *(int *)(PTR_DAT_080055dc + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "imported": true,
            "current_name": "find_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "is_input_valid_08000a18": "is_input_valid",
                "iVar1": "validation_result",
                "is_input_validated_080009dc": "is_input_validated",
                "puVar2": "input_5_6_ptr",
                "FUN_08001960": "validate_and_update_inputs_08001960",
                "param_1": "input_buffer",
                "param_6": "input_4",
                "param_2": "validation_flag",
                "param_3": "input_1",
                "param_4": "input_2",
                "param_5": "input_3",
                "uVar3": "input_5",
                "uVar5": "input_6",
                "uVar4": "input_7",
                "uVar6": "input_8"
            },
            "code": "void validate_and_update_inputs_08001960(int input_buffer, int validation_flag, int input_1, int input_2, int input_3, int input_4) {\\n  int validation_result = validate_inputs_and_return_result(input_2, input_3, input_4, input_3, input_4);\\n  if (validation_result != 0) {\\n    *(int *)(input_buffer + 0x60) = input_2;\\n    *(int *)(input_buffer + 100) = input_3;\\n    *(int *)(input_buffer + 0x68) = input_4;\\n    *(int *)(input_buffer + 0x6c) = input_3;\\n    if (*(char *)(input_buffer + 0x70) != \"\\0\") {\\n      int *input_5_6_ptr = *(int **)(input_buffer + 0x3c);\\n      int input_5 = *input_5_6_ptr;\\n      int input_6 = input_5_6_ptr[1];\\n      int is_input_5_6_validated = is_input_validated(input_4, input_3, input_5, input_6);\\n      if (is_input_5_6_validated == 0) {\\n        int is_input_1_2_valid = is_input_valid(input_2, input_3, input_5, input_6);\\n        if (is_input_1_2_valid != 0) {\\n          *input_5_6_ptr = input_2;\\n          input_5_6_ptr[1] = input_3;\\n        }\\n      }\\n      else {\\n        *input_5_6_ptr = input_4;\\n        input_5_6_ptr[1] = input_3;\\n      }\\n      int input_7 = *(int *)(input_buffer + 0x48);\\n      int input_8 = *(int *)(input_buffer + 0x4c);\\n      int input_9 = *(int *)(input_buffer + 0x68);\\n      int input_10 = *(int *)(input_buffer + 0x6c);\\n      int is_input_7_8_valid = is_input_valid(input_7, input_8, input_9, input_10);\\n      if (is_input_7_8_valid != 0) {\\n        *(int *)(input_buffer + 0x48) = input_9;\\n        *(int *)(input_buffer + 0x4c) = input_10;\\n        return;\\n      }\\n      int input_11 = *(int *)(input_buffer + 0x60);\\n      int input_12 = *(int *)(input_buffer + 100);\\n      int is_input_11_12_validated = is_input_validated(input_7, input_8, input_11, input_12);\\n      if (is_input_11_12_validated != 0) {\\n        *(int *)(input_buffer + 0x48) = input_11;\\n        *(int *)(input_buffer + 0x4c) = input_12;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_08000a04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "validate_and_update_inputs_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "uVar1": "value",
                "find_value_by_key_08004c8a": "find_value_by_key",
                "FUN_08004ca2": "get_value_08004ca2",
                "param_1": "key"
            },
            "code": "int get_value_08004ca2(int key) {\n  int value;\n  if (key != 0) {\n    value = find_value_by_key();\n    return value;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "get_value_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "param_1": "bitmask",
                "FUN_08002810": "check_bit_08002810",
                "param_2": "data"
            },
            "code": "int check_bit_08002810(uint bitmask, uint* data) {\n  if ((bitmask & *(data + 2)) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": true,
            "current_name": "check_bit_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "iVar1": "result",
                "param_1": "data",
                "FUN_0800224c": "update_data_if_possible_0800224c"
            },
            "code": "int update_data_if_possible_0800224c(int *data)\n{\n  int result;\n  if (data == NULL) {\n    result = 1;\n  }\n  else {\n    data[10] |= 2;\n    result = update_data_if_possible_0800224c_080020f0();\n    if (result == 0) {\n      *(int *)(*data) = -32;\n      *(unsigned int *)(*data + 4) &= DAT_08002340;\n      *(unsigned int *)(*data + 8) &= DAT_08002344;\n      *(unsigned int *)(*data + 12) &= 0xFF000000;\n      *(unsigned int *)(*data + 16) &= 0xC0000000;\n      *(unsigned int *)(*data + 20) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 24) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 28) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 32) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 36) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 40) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 44) &= 0xFF000000;\n      *(unsigned int *)(*data + 48) &= 0xFF000000;\n      *(unsigned int *)(*data + 52) &= 0xC0000000;\n      *(unsigned int *)(*data + 56) &= 0xC0000000;\n      *(unsigned int *)(*data + 60) &= 0xFFC00000;\n      *(unsigned int *)(*data + 64) &= 0xFFC00000;\n      update_data_080049f0(data);\n      data[11] = 0;\n      data[10] = 0;\n    }\n    *(char *)(data + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080049f0",
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "update_data_if_possible_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "uVar1": "combined_bytes",
                "byte": "index_byte",
                "param_1": "input_index",
                "PTR_DAT_080054d0": "ptr_dat_values",
                "FUN_080054b0": "is_valid_input_080054b0",
                "combine_bytes_080047e8": "combine_bytes"
            },
            "code": "bool is_valid_input_080054b0(int input_index) {\n  uint16_t combined_bytes = combine_bytes(get_ptr_dat_value(input_index));\n  return (combined_bytes & 0x0021) == 0x0021;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": true,
            "current_name": "is_valid_input_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "iVar4": "init_value",
                "param_1": "data",
                "piVar3": "function_table",
                "puVar6": "ptr2",
                "unaff_r5": "unaff_r5",
                "unaff_r4": "unaff_r4",
                "puVar1": "ptr",
                "uVar2": "always_returns_one",
                "pcVar5": "function_pointer",
                "in_lr": "in_lr",
                "FUN_08006f00": "process_data_08006f00"
            },
            "code": "int process_data_08006f00(uint data)\n{\n  int *function_table = *(int **)PTR_PTR_DAT_08006f0c;\n  if (data > 31) {\n    *function_table = 22;\n    return -1;\n  }\n  int function_pointer = function_table[17];\n  if ((function_pointer != 0) && (function_pointer = *(int *)(function_pointer + data * 4), function_pointer != (int)NULL)) {\n    if (function_pointer != 1) {\n      if (function_pointer == -1) {\n        *function_table = 22;\n        return 1;\n      }\n      *(int *)(function_table[17] + data * 4) = 0;\n      (*function_pointer)(data);\n    }\n    return 0;\n  }\n  undefined *ptr = PTR_PTR_DAT_08006f0c;\n  int always_returns_one = thunk_always_returns_one_08005750(function_table);\n  undefined *ptr2 = PTR_DAT_08006f30;\n  *(int *)PTR_DAT_08006f30 = 0;\n  int init_value = initialize_value_at_pointer_08005740(always_returns_one, data, data, 0, ptr, unaff_r4, unaff_r5, in_lr);\n  if ((init_value == -1) && (*(int *)ptr2 != 0)) {\n    *function_table = *(int *)ptr2;\n  }\n  return init_value;\n}",
            "called": [
                "thunk_FUN_08005750",
                "FUN_08005740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": true,
            "current_name": "process_data_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "uVar10": "val11",
                "uVar11": "low1",
                "uVar12": "val7",
                "iVar2": "data",
                "uVar13": "val8",
                "iVar3": "is_valid3",
                "uVar14": "high1",
                "uVar15": "val1",
                "uVar16": "val2",
                "uVar17": "val3",
                "uVar18": "val4",
                "param_1": "input_data",
                "cVar1": "is_valid",
                "uVar5": "ptr1",
                "uVar4": "high2",
                "uVar7": "val10",
                "uVar6": "val5",
                "FUN_080016b4": "validate_input_080016b4",
                "uVar9": "val6",
                "uVar8": "ptr2"
            },
            "code": "char validate_input_080016b4(int input_data)\\n{\\n  char is_valid = *(char *)(input_data + 0x70);\\n  if (is_valid != \"\\0\") {\\n    int data = get_data_and_return_080058e0();\\n    if ((uint)(data - *(int *)(input_data + 0x44)) < *(uint *)(input_data + 0x58)) {\\n      is_valid = \"\\0\";\\n    }\\n    else {\\n      undefined4 *ptr1 = *(undefined4 **)(input_data + 0x38);\\n      undefined4 *ptr2 = ptr1 + 1;\\n      undefined8 val1 = FUNC_08000190(*ptr1, *ptr2);\\n      undefined4 high1 = (undefined4)((ulonglong)val1 >> 0x20);\\n      undefined8 val2 = FUNC_08000190(*(undefined4 *)(input_data + 0x50), *(undefined4 *)(input_data + 0x54), *ptr1, *ptr2);\\n      undefined4 high2 = (undefined4)((ulonglong)val2 >> 0x20);\\n      undefined8 val3 = FUNC_080004f8((int)val1, high1, *(undefined4 *)(input_data + 0x20), *(undefined4 *)(input_data + 0x24));\\n      val3 = FUNC_08000194((int)val3, (int)((ulonglong)val3 >> 0x20), *(undefined4 *)(input_data + 0x48), *(undefined4 *)(input_data + 0x4c));\\n      *(undefined8 *)(input_data + 0x48) = val3;\\n      char is_valid2 = *(char *)(input_data + 0x71);\\n      if (is_valid2 == \"\\0\") {\\n        undefined8 val4 = FUNC_080004f8((int)val2, high2, *(undefined4 *)(input_data + 0x18), *(undefined4 *)(input_data + 0x1c));\\n        val3 = FUNC_08000190((int)val3, (int)((ulonglong)val3 >> 0x20), (int)val4, (int)((ulonglong)val4 >> 0x20));\\n        *(undefined8 *)(input_data + 0x48) = val3;\\n      }\\n      undefined4 val5 = *(undefined4 *)(input_data + 0x48);\\n      undefined4 val6 = *(undefined4 *)(input_data + 0x4c);\\n      undefined4 val7 = *(undefined4 *)(undefined8 *)(input_data + 0x68);\\n      undefined4 val8 = *(undefined4 *)(input_data + 0x6c);\\n      undefined8 val9 = *(undefined8 *)(input_data + 0x68);\\n      int is_valid3 = is_input_valid_08000a18(val5, val6, val7, val8);\\n      if (is_valid3 == 0) {\\n        undefined4 val10 = *(undefined4 *)(input_data + 0x60);\\n        undefined4 val11 = *(undefined4 *)(input_data + 100);\\n        is_valid3 = is_input_validated_080009dc(val5, val6);\\n        if (is_valid3 != 0) {\\n          *(undefined4 *)(input_data + 0x48) = val10;\\n          *(undefined4 *)(input_data + 0x4c) = val11;\\n        }\\n      }\\n      else {\\n        *(undefined4 *)(input_data + 0x48) = val7;\\n        *(undefined4 *)(input_data + 0x4c) = val8;\\n      }\\n      if (is_valid2 == \"\\0\") {\\n        val1 = 0;\\n      }\\n      else {\\n        val1 = FUNC_080004f8((int)val1, high1, *(undefined4 *)(input_data + 0x18), *(undefined4 *)(input_data + 0x1c));\\n      }\\n      undefined4 low1 = (undefined4)val1;\\n      undefined4 high3 = (undefined4)((ulonglong)val1 >> 0x20);\\n      undefined4 val12 = *(undefined4 *)(input_data + 0x48);\\n      undefined4 val13 = *(undefined4 *)(input_data + 0x4c);\\n      undefined8 val14 = FUNC_080004f8((int)val2, high2, *(undefined4 *)(input_data + 0x28), *(undefined4 *)(input_data + 0x2c));\\n      val14 = FUNC_08000190(val12, val13, (int)val14, (int)((ulonglong)val14 >> 0x20));\\n      val14 = FUNC_08000194(low1, high3, (int)val14, (int)((ulonglong)val14 >> 0x20));\\n      undefined4 high4 = (undefined4)((ulonglong)val14 >> 0x20);\\n      is_valid3 = is_input_validated_080009dc(val7, val8, (int)val14, high4);\\n      if (is_valid3 == 0) {\\n        val9 = *(undefined8 *)(input_data + 0x60);\\n        is_valid3 = is_input_validated_080009dc((int)val14, high4, *(undefined4 *)(undefined8 *)(input_data + 0x60), *(undefined4 *)(input_data + 100));\\n        if (is_valid3 == 0) {\\n          val9 = val14;\\n        }\\n      }\\n      **(undefined8 **)(input_data + 0x3c) = val9;\\n      *(undefined4 *)(input_data + 0x50) = *ptr1;\\n      *(undefined4 *)(input_data + 0x54) = *ptr2;\\n      *(int *)(input_data + 0x44) = data;\\n    }\\n  }\\n  return is_valid;\\n}",
            "called": [
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_08000194",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "validate_input_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = decode_float_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001918",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": true,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "validate_input_and_initialize_array_080018f8"
            },
            "code": "void validate_input_and_initialize_array_080018f8() {\n  validate_input();\n  initialize_array();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "validate_input_and_initialize_array_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "is_bit_set_in_data_08005890",
                "iVar2": "bit_is_set",
                "param_1": "index",
                "cVar1": "bit_set",
                "uVar3": "data_index",
                "uVar4": "data_value"
            },
            "code": "bool is_bit_set_in_data_08005890(uint index)\n{\n  bool bit_set = false;\n  uint data_value;\n  if (index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_080058d8[index];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value != 0xffffffff) {\n    bool bit_is_set = get_bit_value(data_value,PTR_DAT_080058dc);\n    if (bit_is_set) {\n      uint data_index = get_data_index((data_value << 0x18) >> 0x1c);\n      bit_set = check_bit(data_index,1 << (data_value & 0xf) & 0xffff);\n    }\n  }\n  return bit_set;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08004848",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "is_bit_set_in_data_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "convert_base_or_call_function_08005da0"
            },
            "code": "void convert_base_or_call_function_08005da0(void)\n{\n  convert_base_or_call_function_08005da0_08005d8a();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": true,
            "current_name": "convert_base_or_call_function_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_value_in_list_08004cb2",
                "undefined4": "unsigned int",
                "param_1": "value_to_find",
                "*param_2": "*list",
                "param_2": "list"
            },
            "code": "unsigned int find_value_in_list_08004cb2(int value_to_find, char* list) {\n    while(true) {\n        if (*list == -1) {\n            return 0xffffffff;\n        }\n        if (*list == value_to_find) {\n            break;\n        }\n        list += 0xc;\n    }\n    return *(unsigned int *)(list + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": true,
            "current_name": "find_value_in_list_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "set_bit_and_update_values_08002c10": "updateValuesAndSetBit",
                "iVar1": "subtractedValue",
                "FUN_08004ef4": "checkAndUpdateValuesForInput_08004ef4",
                "param_1": "input",
                "subtract_four_from_input_08004e70": "getSubtractedValue"
            },
            "code": "void checkAndUpdateValuesForInput_08004ef4(int input) {\\n  int subtractedValue = getSubtractedValue(input);\\n  if (*(char *)(subtractedValue + 0x5d) == \"\\0\") {\\n    updateValuesAndSetBit(input);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": true,
            "current_name": "checkAndUpdateValuesForInput_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "object_address",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3",
                "param_5": "parameter_4"
            },
            "code": "void set_parameters_08001294(int object_address, undefined parameter_1, undefined parameter_2, undefined parameter_3, undefined parameter_4){\n  *(undefined *)(object_address + 0x18) = parameter_1;\n  *(undefined *)(object_address + 0x19) = parameter_2;\n  *(undefined *)(object_address + 0x1a) = parameter_3;\n  *(undefined *)(object_address + 0x1b) = parameter_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "set_parameters_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "iVar1": "status",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "FUN_08002384": "process_data_08002384",
                "param_1": "data_ptr",
                "uVar2": "shifted_value",
                "uVar5": "divisor",
                "local_14": "iterations"
            },
            "code": "int process_data_08002384(int *data_ptr) {\n  int status = 0;\n  uint divisor;\n  int start_time;\n  int current_time;\n\n  if (*(char *)(data_ptr + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_ptr + 9) = 1;\n  if (update_data_if_possible() == 0) {\n    data_ptr[10] = (data_ptr[10] & 0xffffeefd) | 2;\n    uint divisor = *(uint *)PTR_DAT_0800246c;\n    uint shifted_value = get_shifted_value_08003da4(2);\n    int iterations = divisor / shifted_value << 1;\n    for (int i = iterations; i != 0; i--) {\n    }\n    set_data_ready_08001f84(data_ptr);\n    *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) | 8;\n    start_time = get_data_from_pointer_08001cc4();\n    while ((*(uint *)(*data_ptr + 8) & 8) != 0) {\n      current_time = get_data_from_pointer_08001cc4();\n      if (10 < (uint)(current_time - start_time)) {\n        data_ptr[10] = (data_ptr[10] & 0xffffffed) | 0x10;\n        *(undefined *)(data_ptr + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = get_data_from_pointer_08001cc4();\n    while ((*(uint *)(*data_ptr + 8) & 4) != 0) {\n      current_time = get_data_from_pointer_08001cc4();\n      if (10 < (uint)(current_time - start_time)) {\n        data_ptr[10] = (data_ptr[10] & 0xffffffed) | 0x10;\n        *(undefined *)(data_ptr + 9) = 0;\n        return 1;\n      }\n    }\n    data_ptr[10] = (data_ptr[10] & 0xfffffffc) | 1;\n  }\n  *(undefined *)(data_ptr + 9) = 0;\n  return status;\n}",
            "called": [
                "FUN_08001f84",
                "FUN_08001cc4",
                "FUN_080020f0",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "process_data_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "PTR_00101028": "short_ptr",
                "FUN_08002ad8": "increment_and_store_char_08002ad8",
                "param_1": "param_array",
                "puVar1": "char_ptr"
            },
            "code": "int increment_and_store_char_08002ad8(int *param_array)\n{\n  int *PTR_00101028 = (int *)((char *)param_array + 0x2a);\n  if (*PTR_00101028 != 0) {\n    char *char_ptr = (char *)param_array[9];\n    param_array[9] = (int)(char_ptr + 1);\n    *char_ptr = (char)*(int *)(*param_array + 0x10);\n    *PTR_00101028 -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "increment_and_store_char_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "iVar3": "var3",
                "uVar1": "var1",
                "iVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6",
                "iVar11": "var11",
                "FUN_08004204": "calculate_values_08004204",
                "iVar7": "var7",
                "iVar12": "var12",
                "iVar8": "var8",
                "param_1": "params",
                "iVar9": "var9",
                "iVar10": "var10",
                "PTR_DAT_080043b0": "constant1",
                "uVar2": "var2",
                "PTR_DAT_080043ac": "constant10",
                "get_shifted_value_from_pointer_08003c70": "get_shifted_value2",
                "get_shifted_value_from_pointer_08003c50": "get_shifted_value1"
            },
            "code": "void calculate_values_08004204(int *params)\n{\n  uint PTR_DAT_080043b0 = 0x19;\n  uint constant2 = 0x32;\n  uint constant3 = 0x100;\n  uint constant4 = 0xffffcfff;\n  uint constant5 = 0xffffe9f3;\n  uint constant6 = 0xfffffcff;\n  uint constant7 = 0xf0;\n  uint constant8 = 0x25;\n  uint constant9 = 0x17;\n  uint PTR_DAT_080043ac = 0xffffffff;\n  uint PTR_DAT_080043b01 = 0x25;\n  uint PTR_DAT_080043b02 = 0x10;\n  uint PTR_DAT_080043b03 = 0x20;\n\n  uint* ptr1 = (uint*)(*params + 0x10);\n  uint* ptr2 = (uint*)(*params + 0xc);\n  uint* ptr3 = (uint*)(*params + 0x14);\n  *ptr1 = (*ptr1 & constant4) | params[3];\n  *ptr2 = (params[2] | params[4] | params[5] | (*ptr2 & constant5));\n  *ptr3 = (*ptr3 & constant6) | params[6];\n\n  if (*params != PTR_DAT_080043ac) {\n    uint var1 = PTR_DAT_080043b0;\n    uint var2 = get_shifted_value_from_pointer_08003c50();\n    uint var3 = get_shifted_value_from_pointer_08003c50();\n    uint var4 = get_shifted_value_from_pointer_08003c50();\n    uint var5 = get_shifted_value_from_pointer_08003c50();\n    uint var6 = get_shifted_value_from_pointer_08003c50();\n    uint var7 = get_shifted_value_from_pointer_08003c50();\n    uint var8 = params[1];\n    *(uint*)(*params + 8) = (((var1 * ((var2 * PTR_DAT_080043b0) / (var8 << 2))) >> PTR_DAT_080043b01) * constant9 >> PTR_DAT_080043b03 << constant9 >> PTR_DAT_080043b01) + (((var1 * ((var3 * PTR_DAT_080043b0) / (var8 << 2))) >> PTR_DAT_080043b01) * constant9 >> PTR_DAT_080043b01 & constant7) + ((var1 * ((var4 * PTR_DAT_080043b0) / (var8 << 2))) >> PTR_DAT_080043b01) * PTR_DAT_080043b02;\n  }\n  else {\n    uint var1 = PTR_DAT_080043b0;\n    uint var2 = get_shifted_value_from_pointer_08003c70();\n    uint var3 = get_shifted_value_from_pointer_08003c70();\n    uint var4 = get_shifted_value_from_pointer_08003c70();\n    uint var5 = get_shifted_value_from_pointer_08003c70();\n    uint var6 = get_shifted_value_from_pointer_08003c70();\n    uint var7 = get_shifted_value_from_pointer_08003c70();\n    uint var8 = params[1];\n    *(uint*)(*params + 8) = (((var1 * ((var2 * PTR_DAT_080043b0) / (var8 << 2))) >> PTR_DAT_080043b01) * constant9 >> PTR_DAT_080043b03 << constant9 >> PTR_DAT_080043b01) + (((var1 * ((var3 * PTR_DAT_080043b0) / (var8 << 2))) >> PTR_DAT_080043b01) * constant9 >> PTR_DAT_080043b01 & constant7) + ((var1 * ((var4 * PTR_DAT_080043b0) / (var8 << 2))) >> PTR_DAT_080043b01) * PTR_DAT_080043b02;\n  }\n}",
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": true,
            "current_name": "calculate_values_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "PTR_DAT_08005f28": "pointer3",
                "iVar1": "isValidInput",
                "iVar3": "convertedInputToOutput",
                "convert_input_to_output_08005d82": "convertInputToOutput",
                "is_input_validated_080009dc": "isInputValidated",
                "PTR_DAT_08005f20": "pointer1",
                "param_1": "input1",
                "is_valid_input_08000a2c": "isInputValid",
                "FUNC_0800074c": "function4",
                "PTR_DAT_08005f24": "pointer2",
                "get_string_length_08005c96": "getStringLength",
                "DAT_08005f08": "data1",
                "uVar2": "unsignedIntVariable",
                "uVar7": "unsignedLongLongVariable2",
                "uVar6": "unsignedLongLongVariable1",
                "lVar5": "longLongVariable",
                "is_input_valid_08000a18": "isInputValid",
                "bVar4": "byteIndex",
                "calculate_shifted_value_0800042c": "calculateShiftedValue",
                "convert_base_or_call_function_08005d8a": "convertBaseOrCallFunction",
                "convert_to_int_08000a58": "convertToInt",
                "check_input_values_are_valid_080009f0": "checkInputValuesAreValid",
                "execute_function_pointer_08005cb6": "executeFunctionPointer",
                "FUN_08005da8": "validate_input_and_convert_to_output_08005da8",
                "FUNC_08000194": "function2",
                "FUNC_080004f8": "function3",
                "DAT_08005f0c": "data2",
                "FUNC_08000190": "function1",
                "calculate_08000aa8": "calculateUnsignedIntValue",
                "DAT_08005f18": "data5",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "DAT_08005f10": "data3",
                "count_leading_zero_bits_0800040c": "countLeadingZeroBits",
                "DAT_08005f14": "data4"
            },
            "code": "int validate_input_and_convert_to_output_08005da8(int input1, int input2, int input3, unsigned int input4, byte input5) {\n  int isValidInput = is_valid_input(input3, input4, input3, input4);\n  if (isValidInput == 0) {\n    isValidInput = is_valid_input(input3, input4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n    if ((isValidInput == 0) &&\n       (isValidInput = check_input_values_are_valid(input3, input4 & 0x7fffffff, 0xffffffff, DAT_08005f08), isValidInput == 0)) {\n      int stringLength = get_string_length(input1, PTR_DAT_08005f20);\n    }\n    else {\n      isValidInput = is_input_valid(input3, input4, 0xe0000000, DAT_08005f0c);\n      if (isValidInput == 0) {\n        isValidInput = is_input_validated(input3, input4, 0xe0000000, DAT_08005f10);\n        if (isValidInput == 0) {\n          isValidInput = is_input_validated(input3, input4, 0, 0);\n          if (isValidInput == 0) {\n            isValidInput = 0;\n          }\n          else {\n            isValidInput = execute_function_pointer(input1, 0x2d);\n            input4 += 0x80000000;\n          }\n          longlong lVar = (ulonglong)DAT_08005f14 << 0x20;\n          for (byteIndex = 0; uVar2 = (undefined4)((ulonglong)lVar >> 0x20), byteIndex < input5; byteIndex = byteIndex + 1) {\n            lVar = FUNC_0800074c((int)lVar, uVar2, 0, DAT_08005f18);\n          }\n          unsigned int uVar3 = calculate_08000aa8();\n          unsigned long long uVar4 = count_leading_zero_bits_0800040c();\n          uVar3 = FUNC_08000190((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), (int)uVar4, (int)((ulonglong)uVar4 >> 0x20));\n          int convertedInput = convert_input_to_output(input1, uVar3, 10);\n          isValidInput += convertedInput;\n          if (input5 != 0) {\n            int length = get_string_length(input1, PTR_DAT_08005f28);\n            isValidInput += length;\n          }\n          while (input5 != 0) {\n            uVar3 = FUNC_080004f8((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), 0, DAT_08005f18);\n            unsigned int convertedInput = convert_to_int(uVar3);\n            int convertedInputToOutput = convert_input_to_output(input1, convertedInput, 10);\n            isValidInput += convertedInputToOutput;\n            unsigned long long shiftedValue = calculate_shifted_value(convertedInput);\n            uVar3 = FUNC_08000190((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), (int)shiftedValue, (int)((ulonglong)shiftedValue >> 0x20));\n            input5 -= 1;\n          }\n        }\n        else {\n          int length = get_string_length(input1, PTR_DAT_08005f24);\n          isValidInput += length;\n        }\n      }\n      else {\n        int length = get_string_length(input1, PTR_DAT_08005f24);\n        isValidInput += length;\n      }\n    }\n  }\n  else {\n    int length = get_string_length(input1, PTR_DAT_08005f1c);\n    isValidInput += length;\n  }\n  return isValidInput;\n}",
            "called": [
                "FUN_08000a2c",
                "FUN_0800042c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_08000aa8",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_08005d82",
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_080009f0",
                "FUN_080009dc",
                "FUN_08000190",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": true,
            "current_name": "validate_input_and_convert_to_output_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "(int)param_1 + 0x39": "(char *)(param_array + 0x39)",
                "FUN_080045fe": "set_parameter_value_080045fe",
                "param_1": "param_array",
                "uint": "uint32_t",
                "undefined": "char",
                "*param_1": "*param_array",
                "run_param_value_setting_08005604": "run_param_value_setting",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ set_parameter_value_080045fe(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "set_parameter_value_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "validate_input_and_convert_to_output_08005f2c"
            },
            "code": "void validate_input_and_convert_to_output_08005f2c(void)\n{\n  validate_input();\n  convert_to_output();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005f40"
            ],
            "imported": true,
            "current_name": "validate_input_and_convert_to_output_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "uVar1": "index",
                "PTR_DAT_080055fc": "PTR_FUNCTION_TABLE",
                "**(code **)(PTR_DAT_080055fc + uVar1 * 4))": "*(void (**)(uint32_t))(PTR_FUNCTION_TABLE + index * 4)",
                "FUN_080055e0": "execute_function_if_index_less_than_five_080055e0",
                "PTR_DAT_08005600": "PTR_ARGUMENT_TABLE",
                "*(undefined4 *)(PTR_DAT_08005600 + uVar1 * 4)": "*(uint32_t *)(PTR_ARGUMENT_TABLE + index * 4)"
            },
            "code": "void execute_function_if_index_less_than_five_080055e0(void)\n{\n  uint32_t index = find_index();\n  if (index < 5) {\n    void (*function_pointer)(uint32_t) = **(code **)(PTR_DAT_080055fc + uVar1 * 4));\n    uint32_t arg = *(undefined4 *)(PTR_DAT_08005600 + uVar1 * 4);\n    function_pointer(arg);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": true,
            "current_name": "execute_function_if_index_less_than_five_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "iVar1": "input_validation_result",
                "execute_function_pointer_08005cc0": "execute_function_pointer",
                "iVar2": "function_execution_result",
                "param_1": "input",
                "FUN_08005f40": "calculate_output_08005f40",
                "validate_input_and_convert_to_output_08005f2c": "validate_input_and_convert_to_output"
            },
            "code": "int calculate_output_08005f40(int input) {\n  int input_validation_result = validate_input_and_convert_to_output();\n  int function_execution_result = execute_function_pointer(input);\n  return function_execution_result + input_validation_result;\n}",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "calculate_output_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "iVar1": "update_result",
                "param_1": "data",
                "FUN_0800213c": "update_data_and_check_flag_0800213c",
                "uVar3": "flag_check_2",
                "uVar2": "flag_check_1"
            },
            "code": "int update_data_and_check_flag_0800213c(int *data)\n{\n  int update_result;\n  uint flag_check_1;\n  uint flag_check_2;\n  if (data == NULL) {\n    return 1;\n  }\n  if (data[10] == 0) {\n    data[11] = 0;\n    *(undefined *)(data + 9) = 0;\n    decode_and_set_flag();\n  }\n  update_result = update_data_if_possible(data);\n  flag_check_2 = data[10] & 0x10;\n  if ((flag_check_2 == 0) && (update_result == 0)) {\n    data[10] = data[10] & 0xffffeefd | 2;\n    flag_check_1 = data[1] | data[7] | data[3] << 1;\n    if (data[2] == 0x100 || data[2] == 1) {\n      flag_check_2 = 0x100;\n    }\n    if (data[5] == 1) {\n      if (data[3] == 0) {\n        flag_check_2 = flag_check_2 | (data[6] - 1) * 0x2000 | 0x800;\n      }\n      else {\n        data[10] = data[10] | 0x20;\n        data[11] = data[11] | 1;\n      }\n    }\n    *(uint *)(*data + 4) = flag_check_2 | *(uint *)(*data + 4) & 0xffff16ff;\n    *(uint *)(*data + 8) = DAT_08002244 & *(uint *)(*data + 8) | flag_check_1;\n    if (data[2] == 0x100 || data[2] == 1) {\n      flag_check_2 = (data[4] - 1) * 0x100000;\n    }\n    else {\n      flag_check_2 = 0;\n    }\n    *(uint *)(*data + 0x2c) = flag_check_2 | *(uint *)(*data + 0x2c) & 0xff0fffff;\n    if (flag_check_1 != (DAT_08002248 & *(uint *)(*data + 8))) {\n      data[10] = data[10] & 0xffffffed | 0x10;\n      data[11] = data[11] | 1;\n      return 1;\n    }\n    data[11] = 0;\n    data[10] = data[10] & 0xfffffffc | 1;\n    return 0;\n  }\n  data[10] = data[10] | 0x10;\n  return 1;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "update_data_and_check_flag_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "*(short *)(param_1 + 9)": "*(short *)(params + 9)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*params + 0xc)",
                "param_1[8]": "params[8]",
                "param_1": "params",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)params + 0x39)",
                "param_1[0xf]": "params[0xf]",
                "param_2": "param1",
                "param_2 == 0": "param1 == 0",
                "param_3": "param2",
                "FUN_0800455a": "set_param_values_0800455a",
                "param_3 == 0": "param2 == 0",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)params + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(params + 0xe)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(params + 0xe)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)params + 0x26)"
            },
            "code": "int set_param_values_0800455a(int *params, int param1, int param2)\n{\n  if (*(char *)((int)params + 0x39) != ' ') {\n    return 2;\n  }\n  if (param1 == 0 || param2 == 0) {\n    return 1;\n  }\n  if (*(char *)(params + 0xe) != '\\x01') {\n    params[8] = param1;\n    *(short *)(params + 9) = (short)param2;\n    *(short *)((int)params + 0x26) = (short)param2;\n    params[0xf] = 0;\n    *(undefined *)((int)params + 0x39) = 0x21;\n    *(undefined *)(params + 0xe) = 0;\n    *(uint *)(*params + 0xc) |= 0x80;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "imported": true,
            "current_name": "set_param_values_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "*(int *)(param_1 + 0x30)": "*(int *)(object_address + 0x30)",
                "*(undefined8 *)(param_1 + 0x18)": "*(undefined8 *)(object_address + 0x18)",
                "uVar1": "new_value1",
                "*(undefined8 *)(param_1 + 0x28)": "*(undefined8 *)(object_address + 0x28)",
                "param_1": "object_address",
                "*(undefined8 *)(param_1 + 0x20)": "*(undefined8 *)(object_address + 0x20)",
                "param_2": "param_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08001a66": "update_param_08001a66"
            },
            "code": "void update_param_08001a66(int object_address, int param_value, undefined4 param_3, undefined4 param_4)\\n{\\n  if ((*(char *)(object_address + 0x70) != \"\\0\") && (*(int *)(object_address + 0x30) != param_value)) {\\n    undefined8 new_value1 = FUNC_08000190(0,0,*(undefined4 *)(object_address + 0x18),*(undefined4 *)(object_address + 0x1c),param_4);\\n    *(undefined8 *)(object_address + 0x18) = new_value1;\\n    undefined8 new_value2 = FUNC_08000190(0,0,*(undefined4 *)(object_address + 0x20),*(undefined4 *)(object_address + 0x24));\\n    *(undefined8 *)(object_address + 0x20) = new_value2;\\n    undefined8 new_value3 = FUNC_08000190(0,0,*(undefined4 *)(object_address + 0x28),*(undefined4 *)(object_address + 0x2c));\\n    *(undefined8 *)(object_address + 0x28) = new_value3;\\n  }\\n  *(int *)(object_address + 0x30) = param_value;\\n  return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "update_param_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "PTR_DAT_08003c4c": "PTR_VALUE",
                "FUN_08003c44": "get_value_from_pointer_08003c44"
            },
            "code": "get_value_from_pointer_08003c44() {\n  return *(undefined4 *)PTR_DAT_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "param_1": "param_array",
                "FUN_080028d2": "set_param_value_from_array_index_080028d2"
            },
            "code": "void set_param_value_from_array_index_080028d2(int *param_array){\n    int array_index = 0x11;\n    int *param_value_ptr = param_array + 0x10;\n    int param_value = param_array[array_index] & 0xFF;\n    *param_value_ptr = param_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "set_param_value_from_array_index_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_input_valid_08000a18",
                "in_CY": "input_char",
                "validate_and_return_inputs_080009a8": "validate_and_return_inputs"
            },
            "code": "bool is_input_valid_08000a18(void)\n{\n  char input_char;\n  validate_and_return_inputs();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080016b4",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "is_input_valid_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "process_character_08005384",
                "iVar4": "char_index",
                "puVar2": "array_ptr",
                "PTR_DAT_080053c4": "characters_array",
                "PTR_DAT_080053c8": "values_array",
                "cVar1": "current_char",
                "uVar3": "value",
                "uVar5": "value_index"
            },
            "code": "void process_character_08005384(void)\n{\n  char current_char = PTR_DAT_080053c4[1];\n  int char_index = find_char_index(current_char, PTR_DAT_080053c4);\n  if (char_index != 0) {\n    int value_index = find_value_index(current_char, PTR_DAT_080053c8);\n    int *array_ptr = PTR_DAT_080053c4;\n    array_ptr[0x59] = get_value(value_index, PTR_DAT_080053c8);\n    array_ptr[0x58] = current_char;\n    *(int *)(array_ptr + 0x48) = 0x2580;\n    *(int *)(array_ptr + 0x54) = 0;\n    *(int *)(array_ptr + 0x4c) = 0;\n    *(int *)(array_ptr + 0x50) = 0;\n    execute_function(array_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08004f4c",
                "FUN_08004ca2",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": true,
            "current_name": "process_character_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_color_08005b3c",
                "uVar1": "color",
                "param_1": "address",
                "PTR_DAT_08005b50": "PTR_COLOR_TABLE",
                "param_2": "index"
            },
            "code": "void set_color_08005b3c(int address, uint index)\n{\n  undefined color;\n  if (index < 0x3c) {\n    color = PTR_DAT_08005b50[index];\n  }\n  else {\n    color = 0xff;\n  }\n  *(undefined *)(address + 300) = color;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "set_color_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "iVar1": "value",
                "puVar3": "data_ptr",
                "param_1": "data",
                "uVar2": "flags2",
                "uVar5": "flags",
                "uVar4": "bit_flag"
            },
            "code": "void process_data_080046b8(uint **data){\n  uint *data_ptr = *data;\n  uint flags = *data_ptr;\n  uint flags2 = data_ptr[3];\n  if (((flags & 0xf) == 0) && ((flags & 0x20) != 0) && ((flags2 & 0x20) != 0)) {\n    process_data_080046b8_08004618(data);\n    return;\n  }\n  if (((flags & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((flags2 & 0x120) == 0))) {\n    if (((flags & 0x80) != 0) && ((flags2 & 0x80) != 0)) {\n      decode_data(data);\n      return;\n    }\n    if (((flags & 0x40) != 0) && ((flags2 & 0x40) != 0)) {\n      set_parameter_value(data);\n    }\n  }\n  else {\n    if (((flags & 1) != 0) && ((flags2 & 0x100) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((flags & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((flags & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((flags & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((flags & 0x20) != 0) && ((flags2 & 0x20) != 0)) {\n        process_data_080046b8_08004618(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && ((**data_ptr & 0x40) == 0)) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      clear_flags(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)FUN_080047d8_1_080047d4;\n      int value = get_value_from_param(data[13]);\n      if (value != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08005650",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c",
                "FUN_0800417c",
                "FUN_080045fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": true,
            "current_name": "process_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_value_by_key_08004c8a",
                "param_1": "key",
                "param_2": "data",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ find_value_by_key_08004c8a(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "imported": true,
            "current_name": "find_value_by_key_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "iVar1": "start_time",
                "FUN_08001cd0": "process_data_08001cd0",
                "iVar3": "temp",
                "param_1": "data",
                "puVar5": "data_ptr",
                "local_1c": "i",
                "param_2": "length",
                "uVar2": "shift_value",
                "uVar4": "result",
                "uVar6": "value"
            },
            "code": "uint32_t process_data_08001cd0(uint32_t **data, uint32_t length) {\n  int start_time = get_data_from_pointer();\n  uint32_t *data_ptr = *data;\n  if ((data_ptr[2] & 0x100) == 0) {\n    if (((data_ptr[1] & 0x100) == 0) && ((data_ptr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data & 2) != 0) goto END;\n      } while ((length == 0xffffffff) || ((length != 0 && (get_data_from_pointer() - start_time) <= length)));\n      (*data)[10] |= 4;\n      (*data)[9] = 0;\n      return 3;\n    }\n    else {\n      uint32_t shift_value = get_shifted_value(2);\n      uint32_t data4 = data_ptr[4];\n      uint32_t data3 = data_ptr[3];\n      uint32_t result;\n      if (((data4 & 0x1) == 0) && ((data3 & 0x1) == 0) && ((data4 & 0x4) == 0) && ((data3 & 0x29) == 0)) {\n        result = 0x14;\n      }\n      else if (((data4 & 0x4) == 0) && ((data3 & 0x29) == 0) && ((data4 & 0x100) == 0) && ((data3 & 0x54) == 0)) {\n        result = 0x29;\n      }\n      else if (((data4 & 0x100) == 0) && ((data3 & 0x54) == 0) && ((data4 & 0x1000) == 0) && ((data3 & 0xfc) == 0)) {\n        result = 0x54;\n      }\n      else {\n        result = 0xfc;\n      }\n      uint32_t iterations = (get_data_from_pointer() / shift_value) * result;\n      for (uint32_t i = 0; i <= iterations && iterations - i != 0; i++) {\n        if ((length != 0xffffffff) && ((length == 0 || (get_data_from_pointer() - start_time) > length)))) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n      }\n      **data = 0xffffffed;\n      (*data)[10] |= 0x200;\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if ((*data)[3] == NULL) {\n          (*data)[10] &= 0xfffffeff;\n          if (((*data)[10] & 0x1000) == 0) {\n            (*data)[10] |= 1;\n            return 0;\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        return 0;\n      }\n    }\n  }\n  else {\n    (*data)[10] |= 0x20;\n    (*data)[9] = 0;\n    return 1;\n  }\nEND:\n  (*data)[10] |= 0x200;\n  return 2;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "process_data_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "find_and_update_value_08004a4c",
                "param_1": "input_value",
                "local_1c": "unused_variable_7",
                "local_2c": "unused_variable_3",
                "local_3c": "flag_value",
                "local_28": "unused_variable_4",
                "local_38": "occurrence_index",
                "PTR_DAT_08004b30": "char_pointer",
                "local_10": "unused_variable_8",
                "local_20": "unused_variable_6",
                "PTR_DAT_08004b2c": "occurrence_array",
                "local_30": "unused_variable_2",
                "local_40": "success_flag",
                "local_46": "result",
                "local_24": "unused_variable_5",
                "local_34": "unused_variable_1",
                "local_44": "extracted_value"
            },
            "code": "int find_and_update_value_08004a4c(uint32_t input_value){\n  int occurrence_index;\n  uint32_t extracted_value;\n  int success_flag = 0;\n  uint32_t flag_value = 0x200;\n  uint32_t data_flags;\n  uint32_t value_at_offset;\n  uint32_t flag_check_result;\n  uint32_t array[0x30];\n  memset(array, 0, sizeof(array));\n  occurrence_index = find_occurrence_if_not_negative(input_value, PTR_DAT_08004b2c);\n  if (occurrence_index != 0){\n    *PTR_DAT_08004b30 = (char)input_value;\n    success_flag = update_data_and_check_flag(&occurrence_index);\n    if (success_flag == 0){\n      extracted_value = extract_value_from_array(input_value);\n      if (extracted_value < 0x12){\n        success_flag = decode_and_update(&occurrence_index, &extracted_value);\n        if (success_flag == 0){\n          success_flag = process_data(&occurrence_index);\n          if (success_flag == 0){\n            success_flag = set_data_flags(&occurrence_index);\n            if (success_flag == 0){\n              success_flag = process_data(&occurrence_index, 10);\n              if (success_flag == 0){\n                value_at_offset = get_value_at_offset(&occurrence_index);\n                flag_check_result = value_at_offset & flag_value;\n                if (flag_check_result != 0){\n                  input_value = get_value_at_offset_08001e40(&occurrence_index);\n                }\n                success_flag = check_update_status(&occurrence_index);\n                if (success_flag == 0){\n                  success_flag = update_data_if_possible(&occurrence_index);\n                  if (success_flag != 0){\n                    input_value = 0;\n                  }\n                }\n                else {\n                  input_value = 0;\n                }\n              }\n              else {\n                input_value = 0;\n              }\n            }\n            else {\n              input_value = 0;\n            }\n          }\n          else {\n            input_value = 0;\n          }\n        }\n        else {\n          input_value = 0;\n        }\n      }\n      else {\n        input_value = 0;\n      }\n    }\n    else {\n      input_value = 0;\n    }\n  }\n  return input_value;\n}",
            "called": [
                "FUN_08002348",
                "FUN_0800492c",
                "FUN_08002004",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08001cd0",
                "FUN_08004c78",
                "FUN_0800224c",
                "FUN_08001f80",
                "FUN_08002384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": true,
            "current_name": "find_and_update_value_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "get_value_at_address_08006112",
                "param_1": "value",
                "get_value_08006158": "get_value",
                "param_2": "address"
            },
            "code": "void get_value_at_address_08006112(void* address, int value){\n    get_value(address, value);\n    return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": true,
            "current_name": "get_value_at_address_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "iVar2": "flag_index",
                "FUN_08004974": "decode_and_set_flag_08004974",
                "param_1": "flag_value",
                "local_18": "local_flag_bit",
                "param_2": "input_value",
                "puVar1": "flag_pointer",
                "uVar3": "flag_state",
                "local_10": "unused",
                "uVar5": "local_flag_value",
                "uVar4": "flag_mask",
                "local_14": "unused"
            },
            "code": "void decode_and_set_flag_08004974(uint *flag_value, uint input_value)\n{\n  uint flag_mask;\n  int flag_index;\n  uint flag_state;\n  uint local_flag_value;\n  uint local_flag_mask;\n  uint local_flag_state;\n  flag_index = DAT_080049ec;\n  local_flag_value = *flag_value;\n  if (local_flag_value == DAT_080049e0) {\n    local_flag_mask = *(uint *)(DAT_080049ec + 0x18) | 0x200;\n    *(uint *)(DAT_080049ec + 0x18) = local_flag_mask;\n    local_flag_state = *(uint *)(flag_index + 0x18) & 0x200;\n  }\n  else {\n    flag_mask = DAT_080049e4;\n    if (local_flag_value == DAT_080049e4) {\n      local_flag_mask = *(uint *)(DAT_080049ec + 0x18) | 0x400;\n      *(uint *)(DAT_080049ec + 0x18) = local_flag_mask;\n      local_flag_state = *(uint *)(flag_index + 0x18) & 0x400;\n    }\n  }\n  flag_mask = *PTR_DAT_080049e8;\n  flag_state = set_flag_08004884((uint)((int)(char)*PTR_DAT_080049e8 << 0x18) >> 0x1c,input_value,local_flag_mask,local_flag_state);\n  flag_index = (byte)*PTR_DAT_080049e8 & 0xf;\n  local_flag_value = 1 << flag_index & 0xffff;\n  flag_index = 3;\n  decode_params_08002624(flag_state,&local_flag_value);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": true,
            "current_name": "decode_and_set_flag_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "INPUT_FLAG_1": "INPUT_FLAG_1",
                "puVar2": "data_pointer",
                "INPUT_FLAG_INDEX": "0x10",
                "FUN_08003520": "process_conditions_and_input_08003520",
                "param_1": "input_data",
                "execute_and_update_conditions_if_met_08002d1c": "execute_and_update_conditions_if_met_08002d1c",
                "uVar3": "condition_flags",
                "current_char": "current_char",
                "uVar4": "input_flags",
                "DAT_080035f8": "CONDITION_FLAG_1"
            },
            "code": "void process_conditions_and_input_08003520(uint **input_data)\n{\n  char current_char;\n  uint *data_pointer;\n  uint condition_flags;\n  uint input_flags;\n  \n  data_pointer = *input_data;\n  condition_flags = data_pointer[5];\n  input_flags = data_pointer[1];\n  \n  if (((condition_flags & DAT_080035f8) != 0) && ((input_flags & INPUT_FLAG_1) != 0)) {\n    input_data[INPUT_FLAG_INDEX] = (uint *)((uint)input_data[INPUT_FLAG_INDEX] | 1);\n    data_pointer[5] = 0xfffffeff;\n    **input_data = **input_data | 0x8000;\n  }\n  if (((condition_flags & CONDITION_FLAG_2) != 0) && ((input_flags & INPUT_FLAG_1) != 0)) {\n    input_data[INPUT_FLAG_INDEX] = (uint *)((uint)input_data[INPUT_FLAG_INDEX] | 2);\n    (*input_data)[5] = 0xfffffdff;\n  }\n  if (((condition_flags & CONDITION_FLAG_3) != 0) && ((input_flags & INPUT_FLAG_1) != 0)) {\n    current_char = *(char *)((int)input_data + 0x3d);\n    if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((current_char == '!' || (current_char == ')')) || ((current_char == '(' && (input_data[0xc] == (uint *)0x21)))))) {\n      execute_and_update_conditions_if_met_08002d1c(input_data);\n    }\n    else {\n      input_data[INPUT_FLAG_INDEX] = (uint *)((uint)input_data[INPUT_FLAG_INDEX] | 4);\n      if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n        **input_data = **input_data | 0x200;\n      }\n      (*input_data)[5] = 0xfffffbff;\n    }\n  }\n  if (((condition_flags & CONDITION_FLAG_4) != 0) && ((input_flags & INPUT_FLAG_1) != 0)) {\n    input_data[INPUT_FLAG_INDEX] = (uint *)((uint)input_data[INPUT_FLAG_INDEX] | 8);\n    (*input_data)[5] = 0xfffff7ff;\n  }\n  if (input_data[INPUT_FLAG_INDEX] != (uint *)0x0) {\n    process_input_0800316c(input_data);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": true,
            "current_name": "process_conditions_and_input_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "puVar2": "next_char_ptr",
                "param_1": "string_ptr",
                "FUN_08002ca6": "add_character_to_string_08002ca6",
                "cVar1": "current_char"
            },
            "code": "int add_character_to_string_08002ca6(int *string_ptr) {\n  char current_char;\n  undefined *next_char_ptr;\n  current_char = *(char *)((int)string_ptr + 0x3d);\n  if (*(short *)((int)string_ptr + 0x2a) != 0) {\n    next_char_ptr = (undefined *)string_ptr[9];\n    string_ptr[9] = (int)(next_char_ptr + 1);\n    *next_char_ptr = (char)*(undefined4 *)(*string_ptr + 0x10);\n    *(short *)((int)string_ptr + 0x2a) = *(short *)((int)string_ptr + 0x2a) - 1;\n    if ((*(short *)((int)string_ptr + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*string_ptr + 4) = *(uint *)(*string_ptr + 4) & 0xfffffbff;\n      string_ptr[0xc] = 0x22;\n      *(undefined *)((int)string_ptr + 0x3d) = 0x28;\n      do_nothing_08002ca4();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "add_character_to_string_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "imported": true,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": true,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "uVar1": "color_value",
                "param_1": "param_list",
                "FUN_08005b54": "initialize_param_08005b54_08005b54",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3"
            },
            "code": "undefined4* initialize_param_08005b54_08005b54(undefined4 *param_list, undefined4 value_1, undefined4 value_2, undefined4 value_3)\n{\n  undefined color_value;\n  \n  param_list[1] = 0;\n  param_list[2] = 1000;\n  *param_list = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (param_list == (undefined4 *)PTR_DAT_08005ba4) {\n    set_color_08005b24(param_list, 0, value_3, PTR_DAT_08005ba4, value_4);\n    set_color_08005b3c(param_list, 1);\n  }\n  else {\n    color_value = get_value_08004ca2(value_2, PTR_DAT_08005ba8);\n    *(undefined *)((int)param_list + 0x12d) = color_value;\n    color_value = get_value_08004ca2(value_2, PTR_DAT_08005bac);\n    *(undefined *)(param_list + 0x4b) = color_value;\n  }\n  initialize_data_structures_08005a44(param_list);\n  return param_list;\n}",
            "called": [
                "FUN_08005b3c",
                "FUN_08005b24",
                "FUN_08004ca2",
                "FUN_08005a44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": true,
            "current_name": "initialize_param_08005b54_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "sVar2": "counter_value",
                "puVar3": "ptr_undefined",
                "param_1": "data",
                "counter": "ptr_short",
                "type": "data_type",
                "ptr": "ptr_int",
                "pbVar1": "ptr_byte",
                "str": "ptr_char",
                "FUN_08004618": "process_data_08004618",
                "value": "data_value"
            },
            "code": "int process_data_08004618(int *data)\n{\n  char *str = (char *)(data + 0x3a);\n  if (*str != '\"') {\n    return 2;\n  }\n  int type = data[2];\n  int value = *(int *)(*data + 4);\n  int *ptr = (int *)(data + 10);\n  if (data[4] == 0) {\n    if (type == 0x1000) {\n      *(unsigned short *)ptr = (unsigned short)((value << 0x17) >> 0x17);\n      ptr += 2;\n    }\n    else {\n      *(unsigned short *)ptr = (unsigned short)value & 0xff;\n      ptr++;\n    }\n  }\n  else {\n    if (type == 0x1000) {\n      *(unsigned char *)ptr = (unsigned char)value;\n      ptr++;\n    }\n    else {\n      *(unsigned char *)ptr = (unsigned char)value & 0x7f;\n      ptr++;\n    }\n  }\n  short *counter = (short *)(data + 0x2e);\n  *counter -= 1;\n  if (*counter != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data + 0xc) &= 0xffffffdf;\n  *(unsigned int *)(*data + 0xc) &= 0xfffffeff;\n  *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n  *str = ' ';\n  execute_function_if_index_less_than_five_080055e0();\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "param_1": "data_structure",
                "param_2": "value1",
                "FUN_08006c40": "initialize_data_structure_08006c40",
                "param_3": "value2"
            },
            "code": "void initialize_data_structure_08006c40(undefined4 *data_structure, undefined2 value1, undefined2 value2) {\n    *data_structure = 0;\n    data_structure[1] = 0;\n    data_structure[2] = 0;\n    *(undefined2 *)(data_structure + 3) = value1;\n    data_structure[0x19] = 0;\n    *(undefined2 *)((int)data_structure + 0xe) = value2;\n    data_structure[4] = 0;\n    data_structure[5] = 0;\n    data_structure[6] = 0;\n    fill_array_with_value(data_structure + 0x17,0,8);\n    data_structure[8] = data_structure;\n    data_structure[9] = DAT_08006c78;\n    data_structure[10] = PTR_process_data_08006f5a_1_08006c7c;\n    data_structure[0xb] = PTR_processReturnValueAndUpdateFlags_08006f92_1_08006c80;\n    data_structure[0xc] = PTR_LAB_08006fb6_1_08006c84;\n    return;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": true,
            "current_name": "initialize_data_structure_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "decode_and_update_values_080057b4": "decode_and_update_values",
                "check_and_set_bit_08005848": "check_and_set_bit",
                "param_1": "data",
                "*param_1": "*data",
                "param_2": "value",
                "param_3": "bit1",
                "param_4": "bit2",
                "FUN_0800157c": "update_values_and_bits_0800157c"
            },
            "code": "char* update_values_and_bits_0800157c(char* data, int value, char bit1, char bit2){\n  *data = (char)value;\n  data[1] = bit1;\n  data[2] = bit2;\n  decode_and_update_values_080057b4(value, 0);\n  decode_and_update_values_080057b4(bit1, 1);\n  decode_and_update_values_080057b4(bit2, 1);\n  check_and_set_bit_08005848(bit1, 1);\n  check_and_set_bit_08005848(bit2, 0);\n  return data;\n}",
            "called": [
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": true,
            "current_name": "update_values_and_bits_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "*(char *)((int)param_1 + 0x3a)": "params[58]",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*params + 20)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*params + 12)",
                "*(undefined *)((int)param_1 + 0x3a)": "params[58]",
                "param_1": "params",
                "*(short *)((int)param_1 + 0x2e)": "params[15]",
                "param_1[10]": "params[10]",
                "param_2": "param1",
                "param_3": "param2",
                "FUN_080045a2": "set_param_values_080045a2",
                "*(short *)(param_1 + 0xb)": "params[11]",
                "*(char *)(param_1 + 0xe)": "params[14]",
                "*(undefined *)(param_1 + 0xe)": "params[14]"
            },
            "code": "int set_param_values_080045a2(int *params, int param1, int param2) {\n    if (params[58] != ' ') {\n        return 2;\n    }\n    if (param1 == 0 || param2 == 0) {\n        return 1;\n    }\n    if (params[14] != 1) {\n        params[10] = param1;\n        params[11] = (short)param2;\n        params[15] = 0;\n        params[58] = '\"';\n        params[14] = 0;\n        *(uint *)(*params + 12) |= 256;\n        *(uint *)(*params + 20) |= 1;\n        *(uint *)(*params + 12) |= 32;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": true,
            "current_name": "set_param_values_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_and_update_value_bits_08001c32"
            },
            "code": "void initialize_and_update_value_bits_08001c32(void)\n{\n  initialize_system_and_update_value_bits_08004c52();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": true,
            "current_name": "initialize_and_update_value_bits_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "*(byte *)(param_1 + 0x39)": "byte2",
                "param_1": "ptr_param",
                "FUN_080047e8": "combine_bytes_080047e8",
                "*(byte *)(param_1 + 0x3a)": "byte1"
            },
            "code": "byte combine_bytes_080047e8(int ptr_param){\n  byte byte1 = *(byte *)(ptr_param + 0x3a);\n  byte byte2 = *(byte *)(ptr_param + 0x39);\n  return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "imported": true,
            "current_name": "combine_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "get_bit_080047f4": "get_bit_value",
                "find_value_in_string_08004ce2": "find_value_in_string",
                "iVar1": "bit_value",
                "iVar3": "value_index",
                "set_bit_at_index_0800480a": "set_bit_at_index",
                "puVar2": "data_ptr",
                "param_1": "index",
                "PTR_DAT_0800583c": "data_ptr_2",
                "set_bit_to_zero_08004828": "set_bit_to_zero",
                "PTR_DAT_08005838": "data_ptr_1",
                "checkAndUpdateValues_08004b3c": "update_values",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_DAT_08005840": "data_ptr_3",
                "decode_params_and_set_flags_08004bb0": "decode_params_and_set_flags",
                "PTR_DAT_08005844": "data_ptr_4",
                "FUN_080057b4": "decode_and_update_values_080057b4"
            },
            "code": "void decode_and_update_values_080057b4(uint index, uint param_2, uint param_3, undefined *param_4)\n{\n  int value_index;\n  undefined *data_ptr;\n  \n  if (index < 0x3c) {\n    value_index = (int)(char)PTR_DAT_08005838[index];\n    data_ptr = PTR_DAT_08005838;\n  }\n  else {\n    value_index = -1;\n    data_ptr = param_4;\n  }\n  if (value_index != -1) {\n    int bit_value = get_bit_value(value_index, PTR_DAT_0800583c, param_3, data_ptr, param_4);\n    if (bit_value != 0) {\n      int value_found = find_value_in_string(value_index, PTR_DAT_08005840);\n      if (value_found != 0) {\n        update_values(value_index);\n      }\n      set_bit_to_zero(value_index, PTR_DAT_0800583c);\n    }\n    switch(param_2) {\n    case 0:\n      decode_params_and_set_flags(value_index, 0);\n      break;\n    case 1:\n      decode_params_and_set_flags(value_index, 1, 0);\n      break;\n    case 2:\n      decode_params_and_set_flags(value_index, 0, 1);\n      break;\n    case 3:\n      decode_params_and_set_flags(value_index, 0, 2);\n    }\n    set_bit_at_index(value_index, PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_0800480a",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_08004828",
                "FUN_08004b3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_080013a4",
                "FUN_0800157c",
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "decode_and_update_values_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "update_params_and_calculate_and_return_result_08001b18",
                "param_1": "input_param"
            },
            "code": "undefined4 update_params_and_calculate_and_return_result_08001b18(undefined4 input_param)\n{\n  update_params_and_calculate_08001ab0();\n  return input_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": true,
            "current_name": "update_params_and_calculate_and_return_result_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "get_one_thunk_08005750"
            },
            "code": "int get_one_thunk_08005750(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": true,
            "current_name": "get_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "bVar2": "inputs_are_zero",
                "FUN_0800092c": "check_inputs_0800092c",
                "bVar3": "inputs_are_ordered",
                "uVar1": "inputs_xor",
                "param_1": "input_1",
                "param_2": "input_2",
                "PTR_": "PTR_",
                "param_3": "input_3",
                "param_4": "input_4",
                "DAT_": "DAT_"
            },
            "code": "uint check_inputs_0800092c(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint result;\n  bool inputs_are_zero;\n  bool inputs_are_equal;\n  bool inputs_are_ordered;\n  \n  inputs_are_zero = (input_1 | (input_2 << 1)) == 0 && (input_3 | (input_4 << 1)) == 0;\n  inputs_are_equal = input_1 == input_3 && input_2 == input_4;\n  inputs_are_ordered = input_4 <= input_2 && input_1 <= input_3;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) && (((int)(input_2 << 1) >> 0x15 == -1 && !inputs_are_zero) || ((int)(input_4 << 1) >> 0x15 == -1 && !inputs_are_zero))) {\n    result = 1;\n  }\n  else {\n    if (inputs_are_equal || (input_2 ^ input_4) == 0) {\n      result = inputs_are_ordered ? 1 : 0;\n    }\n    else {\n      result = input_4 <= input_2 ? 0xFFFFFFFE : 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": true,
            "current_name": "check_inputs_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "convert_base_or_call_function_08005d8a",
                "param_1": "function_ptr",
                "param_2": "input",
                "param_3": "flag",
                "param_4": "param_4"
            },
            "code": "void convert_base_or_call_function_08005d8a(undefined4 *function_ptr, uint input, uint flag, undefined4 param_4) {\n  if (flag != 0) {\n    convert_base_08005ce8(function_ptr, input, flag & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr, input & 0xff, 0, *(code **)*function_ptr, param_4);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": true,
            "current_name": "convert_base_or_call_function_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "DAT_0800257c": "data_pointer",
                "FUN_08002560": "set_bit_08002560",
                "param_1": "bit_position"
            },
            "code": "void set_bit_08002560(int bit_position) {\n  if (bit_position != 4) {\n    *DAT_0800257c &= 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c |= 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "set_bit_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "pcVar2": "current_char_pointer",
                "pcVar1": "current_char",
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "string_length"
            },
            "code": "char* find_character_in_string_08006e90(char* string, char character, int string_length) {\n  char* current_char = string;\n  while (current_char != string + string_length) {\n    if (*current_char == character) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_08006394",
                "FUN_080066b0"
            ],
            "imported": true,
            "current_name": "find_character_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "iVar2": "offset",
                "param_1": "output_param",
                "FUN_08006920": "calculate_offset_and_set_param_08006920",
                "param_2": "input_param",
                "puVar1": "ptr"
            },
            "code": "void calculate_offset_and_set_param_08006920(int *output_param, undefined4 input_param)\n{\n  undefined *ptr = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  int offset = calculateOffset_080056d8(input_param);\n  if ((offset == -1) && (*(int *)ptr != 0)) {\n    *output_param = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": true,
            "current_name": "calculate_offset_and_set_param_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "bVar4": "is_zero",
                "uVar1": "msb",
                "LAB_0800072c": "return_nan",
                "param_1": "mantissa_1",
                "FUN_080008ba": "decode_float_080008ba",
                "LAB_080006f0": "return_zero",
                "unaff_r4": "unused_var",
                "param_2": "mantissa_2",
                "param_3": "exponent_1",
                "param_4": "exponent_2",
                "uVar3": "sign_bit",
                "uVar2": "exponent_mask",
                "in_r12": "unused_register"
            },
            "code": "ulonglong decode_float_080008ba(uint mantissa_1, uint mantissa_2, uint exponent_1, uint exponent_2)\n{\n  uint sign_bit = exponent_2 & 0x80000000;\n  uint exponent = exponent_1;\n  uint mantissa = mantissa_2;\n  if (exponent_2 != exponent_1 || (exponent_2 & (0x7ff << 20)) != (exponent_1 & (0x7ff << 20))) {\n    if (exponent_2 == exponent_1) {\n      if ((mantissa_1 | (mantissa_2 << 12)) == 0) {\n        mantissa = exponent_1;\n        exponent = exponent_2;\n        if ((exponent_2 & (0x7ff << 20)) != (exponent_1 & (0x7ff << 20))) {\n          return ((ulonglong)((mantissa_2 ^ exponent_2) & 0x80000000 | 0x7ff00000) << 0x20);\n        }\n        goto return_nan;\n      }\n    }\n    else if ((exponent_2 & (0x7ff << 20)) == (exponent_1 & (0x7ff << 20))) {\n      mantissa = exponent_1;\n      exponent = exponent_2;\n      if ((mantissa_1 | (mantissa_2 << 12)) == 0) {\n        goto return_zero;\n      }\n    }\n    else {\n      if ((mantissa_1 | (mantissa_2 << 1)) == 0 || (exponent_1 | (exponent_2 << 1)) == 0) {\n        goto return_nan;\n      }\n      if (exponent_2 == 0) {\n        do {\n          uint msb = mantissa_1 & 0x80000000;\n          mantissa_1 = mantissa_1 << 1;\n          mantissa_2 = mantissa_2 * 2 + (uint)(msb != 0);\n        } while ((mantissa_2 & 0x100000) == 0);\n        mantissa_2 |= sign_bit;\n        if ((exponent_1 & (0x7ff << 20)) != 0) {\n          goto return_nan;\n        }\n        mantissa = mantissa_2;\n        exponent = exponent_1;\n      }\n      do {\n        uint msb = exponent_1 & 0x80000000;\n        exponent_1 = exponent_1 << 1;\n        exponent_2 = exponent_2 * 2 + (uint)(msb != 0);\n      } while ((exponent_2 & 0x100000) == 0);\n      mantissa = mantissa_2;\n      exponent = exponent_1;\n    }\n  }\n  return ((ulonglong)mantissa << 0x20) | exponent;\n\n  return_nan:\n  return ((ulonglong)((mantissa_2 ^ exponent_2) & 0x80000000) << 0x20) | 0x7ff0000000000000;\n\n  return_zero:\n  return ((ulonglong)sign_bit << 0x20);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": true,
            "current_name": "decode_float_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "param_1": "params",
                "PTR_DAT_08002dac": "condition_met_ptr",
                "FUN_08002d1c": "execute_and_update_conditions_if_met_08002d1c",
                "condition": "params[0xb]",
                "condition_char": "(char *)((int)params + 0x3d)"
            },
            "code": "int execute_and_update_conditions_if_met_08002d1c(uint **params){\n    uint *condition = params[0xb];\n    char *condition_char = (char *)((int)params + 0x3d);\n    \n    if ((condition == (uint *)0x4 || condition == (uint *)0x8) && (*condition_char == '(')) {\n        condition = PTR_DAT_08002dac;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        params[0xc] = (uint *)0x0;\n        *condition_char = 0x20;\n        *(condition_char + 1) = 0;\n        execute_function_if_conditions_met_08004ec4();\n    }\n    else if (*condition_char == '!') {\n        condition = PTR_DAT_08002dac;\n        params[0xc] = (uint *)0x21;\n        *condition_char = 0x20;\n        *(condition_char + 1) = 0;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*params)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004ec4",
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": true,
            "current_name": "execute_and_update_conditions_if_met_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_08005714"
            },
            "code": "int32_t return_error_08005714(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": true,
            "current_name": "return_error_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "uVar1": "shifted_value",
                "uStack_14": "stack_variable_3",
                "param_1": "shift_type",
                "FUN_08003da4": "get_shifted_value_08003da4",
                "abStack_20": "stack_array",
                "uStack_18": "stack_variable_2",
                "uStack_1c": "stack_variable_1",
                "local_24": "local_variable_1"
            },
            "code": "uint get_shifted_value_08003da4(int shift_type){\n  uint shifted_value;\n  undefined2 local_variable_1;\n  byte stack_array[4];\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n  stack_variable_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  stack_variable_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  stack_variable_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (shift_type == 2) {\n    shifted_value = get_shifted_value_08003da4_from_pointer_08003c70();\n    shifted_value = shifted_value / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (shift_type == 16) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      shifted_value = 0;\n    }\n    else {\n      shifted_value = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        shifted_value = DAT_08003e94 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      shifted_value = shifted_value * stack_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        shifted_value = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(shifted_value * 2) >> 0x21);\n      }\n    }\n  }\n  else if (shift_type == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      shifted_value = 0x8000;\n    }\n    else {\n      shifted_value = DAT_08003e90[8] & 0x300;\n      if ((shifted_value == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        shifted_value = 32000;\n      }\n      else if (shifted_value == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          shifted_value = 0;\n        }\n        else {\n          shifted_value = 0xf424;\n        }\n      }\n      else {\n        shifted_value = 0;\n      }\n    }\n  }\n  else {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": true,
            "current_name": "get_shifted_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "*(int *)(param_1 + 0x138)": "*ptr_data_4",
                "param_1": "data_address",
                "*(undefined2 *)(param_1 + 0x134)": "*ptr_data_2",
                "*(undefined2 *)(param_1 + 0x136)": "*ptr_data_3",
                "FUN_08005a44": "initialize_data_structures_08005a44",
                "*(int *)(param_1 + 0x130)": "*ptr_data_1",
                "*(undefined2 *)(param_1 + 0x13c)": "*ptr_data_5",
                "*(undefined2 *)(param_1 + 0x13e)": "*ptr_data_6"
            },
            "code": "void initialize_data_structures_08005a44(int data_address)\n{\n  int* ptr_data_1 = (int *)(data_address + 0x130);\n  *ptr_data_1 = data_address + 0x11;\n  short* ptr_data_2 = (short *)(data_address + 0x134);\n  *ptr_data_2 = 0;\n  short* ptr_data_3 = (short *)(data_address + 0x136);\n  *ptr_data_3 = 0;\n  int* ptr_data_4 = (int *)(data_address + 0x138);\n  *ptr_data_4 = data_address + 0x51;\n  short* ptr_data_5 = (short *)(data_address + 0x13c);\n  *ptr_data_5 = 0;\n  short* ptr_data_6 = (short *)(data_address + 0x13e);\n  *ptr_data_6 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "in_CY": "input_char",
                "FUN_080009dc": "is_input_validated_080009dc"
            },
            "code": "bool is_input_validated_080009dc(void)\\n{\\n  char input_char;\\n  validate_inputs_and_return_value();\\n  return input_char == \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080016b4",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": true,
            "current_name": "is_input_validated_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "flag2",
                "*(uint *)(*param_1 + 0xc)": "flag1",
                "param_1": "flagPtr",
                "FUN_0800417c": "clearFlags_0800417c"
            },
            "code": "void clearFlags_0800417c(int *flagPtr)\n{\n  uint *flag1 = (uint *)(*flagPtr + 0xc);\n  uint *flag2 = (uint *)(*flagPtr + 0x14);\n  *flag1 = *flag1 & 0xfffffedf;\n  *flag2 = *flag2 & 0xfffffffe;\n  *(undefined *)((int)flagPtr + 0x3a) = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "clearFlags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_data_and_return_08004b94",
                "get_data_from_pointer_08001cc4": "get_data_from_pointer"
            },
            "code": "void get_data_and_return_08004b94(void)\n{\n  get_data_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": true,
            "current_name": "get_data_and_return_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_data_and_return_080058e0"
            },
            "code": "void get_data_and_return_080058e0(void)\n{\n  // Call a function to get data\n  get_data();\n  // Return to the caller\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_080016b4",
                "FUN_08000bcc",
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "get_data_and_return_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "calculate_shifted_value_0800042c": "calculate_shifted_value",
                "uVar1": "upper_half_shifted_and_counted_value",
                "param_1": "data_address",
                "FUNC_0800074c": "update_data",
                "FUNC_080004f8": "update_data_using_shifted_and_counted_value",
                "param_2": "shift_amount",
                "PTR_": "PTR_",
                "param_3": "param_3",
                "FUN_08001918": "shift_and_update_data_08001918",
                "param_4": "param_4",
                "DAT_": "DAT_",
                "uVar3": "leading_zero_bits_count",
                "uVar2": "shifted_and_counted_value",
                "count_leading_zero_bits_0800040c": "count_leading_zero_bits"
            },
            "code": "void shift_and_update_data_08001918(int data_address,int shift_amount,undefined4 param_3,undefined4 param_4)\n{\n  undefined4 shifted_value;\n  undefined8 leading_zero_bits_count;\n  undefined8 shifted_and_counted_value;\n  undefined4 upper_half_shifted_and_counted_value;\n  undefined8 updated_data;\n  undefined8 updated_second_data;\n  int data_length = *(int *)(data_address + 0x58);\n  if (data_length > 0) {\n    shifted_value = calculate_shifted_value(shift_amount);\n    leading_zero_bits_count = count_leading_zero_bits(*(undefined4 *)(data_address + 0x58));\n    shifted_and_counted_value = FUNC_0800074c((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)leading_zero_bits_count,(int)((ulonglong)leading_zero_bits_count >> 0x20),param_4);\n    upper_half_shifted_and_counted_value = (undefined4)((ulonglong)shifted_and_counted_value >> 0x20);\n    updated_data = FUNC_080004f8((int)shifted_and_counted_value,upper_half_shifted_and_counted_value,*(undefined4 *)(data_address + 0x20),*(undefined4 *)(data_address + 0x24));\n    *(undefined8 *)(data_address + 0x20) = updated_data;\n    updated_second_data = FUNC_0800074c(*(undefined4 *)(data_address + 0x28),*(undefined4 *)(data_address + 0x2c),(int)shifted_and_counted_value,upper_half_shifted_and_counted_value);\n    *(undefined8 *)(data_address + 0x28) = updated_second_data;\n    *(int *)(data_address + 0x58) = shift_amount;\n  }\n  return;\n}",
            "called": [
                "FUN_0800042c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_0800040c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "shift_and_update_data_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "uVar1": "function_ptr",
                "puVar2": "function_name",
                "param_1": "assertion_failed_file",
                "param_2": "assertion_failed_line",
                "param_3": "data",
                "FUN_0800611c": "process_data_and_call_func_with_assertion_check_0800611c",
                "param_4": "data_size",
                "uVar3": "wait_result",
                "uVar4": "data_size"
            },
            "code": "void process_data_and_call_func_with_assertion_check_0800611c(int assertion_failed_file, int assertion_failed_line, void *data, int data_size)\n{\n  int function_ptr = *(int *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  void *function_name = PTR_s___function__0800614c;\n  int wait_result;\n  if (data == NULL) {\n    return;\n  }\n  do {\n    process_data_and_call_func_08006174(function_ptr, function_name, data_size, assertion_failed_file, assertion_failed_line, function_name, data, data_size);\n    wait_result = process_data_and_wait_08006ac0();\n    assertion_failed_line = wait_result >> 0x20;\n    function_ptr = wait_result;\n  } while (1);\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": true,
            "current_name": "process_data_and_call_func_with_assertion_check_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "param_1": "value",
                "param_2": "bit_index",
                "PTR_": "ptr",
                "DAT_": "masked_value",
                "FUN_080047f4": "get_bit_080047f4"
            },
            "code": "uint get_bit_080047f4(uint value, int bit_index)\n{\n  uint* PTR_ = (uint*)(param_2 + ((value << 0x18) >> 0x1c) * 4);\n  uint DAT_ = *PTR_ >> (value & 0xf) & 1;\n  return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_080057b4",
                "FUN_08005848",
                "FUN_08005890"
            ],
            "imported": true,
            "current_name": "get_bit_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "in_ZR": "ZR_value",
                "in_CY": "CY_value",
                "FUN_080009f0": "check_input_values_are_valid_080009f0"
            },
            "code": "bool check_input_values_are_valid_080009f0(void)\n{\n  bool is_CY_zero = (bool)CY_value;\n  bool is_ZR_nonzero = (bool)ZR_value;\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "check_input_values_are_valid_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "param_1": "data",
                "param_2": "length",
                "param_3": "bit",
                "param_4": "mask",
                "FUN_0800134e": "set_bits_and_check_0800134e"
            },
            "code": "int set_bits_and_check_0800134e(int* data, int length, int bit, int mask){\n  set_bits_and_check_0800134e(data, length, bit, mask, mask);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "data[15]",
                "**param_1": "*data",
                "*puVar1": "data[0]",
                "param_1": "data_ptr",
                "*(char *)((int)param_1 + 0x3d)": "data[15]",
                "(*param_1)[1]": "data[1]",
                "puVar1": "data",
                "FUN_08002c10": "set_bit_and_update_values_08002c10"
            },
            "code": "int set_bit_and_update_values_08002c10(uint **data_ptr) {\n  uint *data = *data_ptr;\n  if (data[15] != ' ') {\n    return 2;\n  }\n  data[15] = '(';\n  if ((data[0] & 1) == 0) {\n    data[0] |= 1;\n  }\n  *data |= 0x400;\n  data[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "imported": true,
            "current_name": "set_bit_and_update_values_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "bVar10": "is_negative",
                "is_flag_set": "is_flag_set",
                "iVar2": "tmp1",
                "uVar1": "result",
                "iVar6": "tmp4",
                "iVar8": "tmp7",
                "param_1": "data",
                "piVar3": "tmp2",
                "is_jump_table_recovered": "is_jump_table_recovered",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "unaff_r5": "unused2",
                "unaff_r4": "unused1",
                "param_2": "params",
                "pcVar7": "func_ptr",
                "uVar5": "flags",
                "FUN_08006be0": "process_data_08006be0",
                "uVar4": "tmp3",
                "uVar9": "jump_table_result"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int32_t *params){\n    uint32_t result;\n    int32_t tmp1;\n    int32_t tmp2;\n    uint32_t tmp3;\n    uint16_t flags;\n    int32_t tmp4;\n    uint32_t tmp5;\n    uint32_t tmp6;\n    uint32_t (*func_ptr)(uint32_t *, uint32_t, int32_t, int32_t, uint32_t, uint32_t);\n    uint32_t tmp7;\n    bool is_negative;\n    bool is_flag_set;\n    bool is_jump_table_recovered;\n    uint32_t jump_table_result;\n\n    if (params[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            initialize_data();\n        }\n        if (params == (int32_t *)PTR_DAT_08006c28) {\n            params = (int32_t *)data[1];\n        }\n        else if (params == (int32_t *)PTR_DAT_08006c2c) {\n            params = (int32_t *)data[2];\n        }\n        else if (params == (int32_t *)PTR_DAT_08006c30) {\n            params = (int32_t *)data[3];\n        }\n        if (*(uint16_t *)(params + 3) != 0) {\n            flags = *(uint16_t *)(params + 3);\n            tmp3 = (uint32_t)flags;\n            if ((int32_t)(tmp3 << 0x1c) < 0) {\n                tmp1 = params[4];\n                if (tmp1 != 0) {\n                    tmp4 = tmp3 << 0x1e;\n                    is_negative = tmp4 == 0;\n                    if (is_negative) {\n                        tmp4 = 0;\n                    }\n                    tmp5 = *params;\n                    if (!is_negative) {\n                        tmp4 = params[5];\n                    }\n                    *params = tmp1;\n                    params[2] = tmp4;\n                    for (tmp5 = tmp5 - tmp1; 0 < tmp5; tmp5 = tmp5 - tmp4) {\n                        func_ptr = (uint32_t (*)(uint32_t *, uint32_t, int32_t, int32_t, uint32_t, uint32_t))params[10];\n                        tmp6 = func_ptr(data, params[8], tmp1, tmp5, 0, 0);\n                        if (tmp6 < 1) {\n                            flags = *(uint16_t *)(params + 3);\n                            goto LAB_08006bc6;\n                        }\n                        tmp1 = tmp1 + tmp6;\n                    }\n                }\n            }\n            else if (((0 < params[1]) || (0 < params[0x10])) && ((func_ptr = (uint32_t (*)(uint32_t *, uint32_t, int32_t, int32_t, uint32_t, uint32_t))params[0xb]) != NULL)) {\n                tmp7 = *data;\n                *data = 0;\n                if ((flags & 0x1000) == 0) {\n                    tmp1 = func_ptr(data, params[8], tmp3 & 0x1000, 1, 0, 0);\n                    if ((tmp1 == -1) && ((tmp3 = *data, tmp3 != 0))) {\n                        if ((tmp3 != 0x1d) && (tmp3 != 0x16)) {\n                            flags = *(uint16_t *)(params + 3);\n                            is_jump_table_recovered = false;\n                            switch(tmp3){\n                                case 0:\n                                    is_jump_table_recovered = true;\n                                    jump_table_result = FUN_08006b66();\n                                    break;\n                                case 1:\n                                    is_jump_table_recovered = true;\n                                    jump_table_result = FUN_08006aec(0);\n                                    break;\n                                case 2:\n                                    is_jump_table_recovered = true;\n                                    jump_table_result = FUN_08006aec(0xffffffff);\n                                    break;\n                                case 3:\n                                    is_jump_table_recovered = true;\n                                    jump_table_result = FUN_08006bd0(0xffffffff);\n                                    break;\n                                default:\n                                    break;\n                            }\n                            if (is_jump_table_recovered) {\n                                return jump_table_result;\n                            }\n                        }\n                        *data = tmp7;\n                        goto LAB_08006aea;\n                    }\n                }\n                else {\n                    tmp1 = params[0x15];\n                }\n                if (((int32_t)((uint32_t)flags << 0x1d) < 0) && ((tmp1 = tmp1 - params[1]), params[0xd] != 0)) {\n                    tmp1 = tmp1 - params[0x10];\n                }\n                tmp1 = func_ptr(data, params[8], tmp1, 0, 0, 0);\n                flags = *(uint16_t *)(params + 3);\n                if ((tmp1 == -1) && ((0x1d < *data) || ((int32_t)((DAT_08006bdc >> (*data & 0xff)) << 0x1f) < 0))) {\n                    flags = flags | 0x40;\n                    goto LAB_08006bc6;\n                }\n                params[1] = 0;\n                *params = params[4];\n                if (((int32_t)((uint32_t)flags << 0x13) < 0) && ((tmp1 != -1) || (*data == 0))) {\n                    params[0x15] = tmp1;\n                }\n                tmp2 = params[0xd];\n                *data = tmp7;\n                if (tmp2 != 0) {\n                    if (tmp2 != params + 0x11) {\n                        add_to_linked_list(data);\n                    }\n                    params[0xd] = 0;\n                    flags = FUN_08006b90();\n                    is_flag_set = false;\n                    switch(flags){\n                        case 0:\n                            is_flag_set = true;\n                            result = FUN_08006aec(0);\n                            break;\n                        case 1:\n                            is_flag_set = true;\n                            result = FUN_08006aec(0xffffffff);\n                            break;\n                        default:\n                            break;\n                    }\n                    if (is_flag_set) {\n                        return result;\n                    }\n                }\n            }\nLAB_08006aea:\n            flags = FUN_08006aec(0);\n            return flags;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": true,
            "current_name": "process_data_08006be0",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == (int *)PTR_DAT_08006c28) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c2c) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c30) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08006bdc >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_to_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_080012e8": {
            "renaming": {
                "uVar1": "bit_position",
                "param_1": "data",
                "param_2": "bit_mask",
                "FUN_080012e8": "set_bits_and_check_080012e8"
            },
            "code": "void set_bits_and_check_080012e8(uint8_t *data, uint8_t bit_mask) {\n  uint8_t bit_position;\n  for (bit_position = 0; bit_position < 8; bit_position++) {\n    check_and_set_bit(data[bit_position + 0xb], bit_mask >> (bit_position & 0xff) & 1);\n  }\n  set_bits_in_byte(data);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "iVar1": "result",
                "iVar3": "index",
                "puVar2": "end_of_data",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "process_byte_data_08006344": "process_byte_data",
                "param_4": "data_length",
                "FUN_08006370": "process_data_08006370"
            },
            "code": "int process_data_08006370(byte* data, int data_length, int param1, int param2) {\n  int index = 0;\n  do {\n    if (index == data_length) {\n      return 0;\n    }\n    int result = process_byte_data(param1, data[index], param2, data_length, index);\n    index++;\n  } while (index != 0);\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "process_data_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "param_1": "bit_index",
                "DAT_08002510": "array_start_ptr",
                "FUN_080024f8": "set_bit_in_array_080024f8"
            },
            "code": "void set_bit_in_array_080024f8(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = bit_index >> 5;\n    uint bit_offset = bit_index & 0x1f;\n    uint* array_ptr = (uint*)(DAT_08002510 + array_index * 4);\n    uint bit_mask = 1 << bit_offset;\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005568",
                "FUN_08005510"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "param_11": "param11",
                "param_12": "param12",
                "param_10": "param10",
                "iVar1": "data",
                "FUN_08001ab0": "update_params_and_calculate_08001ab0",
                "offset": "offset",
                "param_1": "input_array",
                "validate_and_update_inputs_08001960": "validate_and_update_inputs",
                "param_6": "param6",
                "param_7": "param7",
                "update_param_08001a66": "update_param",
                "param_8": "param8",
                "param_9": "param9",
                "param_2": "param1",
                "get_data_and_return_080058e0": "get_data_and_return",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "validate_input_and_initialize_array_08001814": "validate_input_and_initialize_array",
                "extraout_r1": "data"
            },
            "code": "int update_params_and_calculate_08001ab0(int input_array, int param1, int param2, int param3, int param4, int param5, int param6, int param7, int param8, int param9, int param10, int param11)\n{\n  int data;\n  int offset = 100;\n  *(int *)(input_array + 0x3c) = param3;\n  *(int *)(input_array + 0x38) = param1;\n  *(int *)(input_array + 0x40) = param4;\n  *(char *)(input_array + 0x70) = 0;\n  validate_and_update_inputs(input_array, param1, 0, 0, ptr_DAT_08001b10, ptr_DAT_08001b14);\n  update_param(input_array, param12);\n  validate_input_and_initialize_array(input_array, data, param5, param6, param7, param8, param9, param10, param11);\n  data = get_data_and_return() - offset;\n  *(int *)(input_array + 0x44) = data;\n  return input_array;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_080058e0",
                "FUN_08001960",
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": true,
            "current_name": "update_params_and_calculate_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "uVar10": "temp_data",
                "bVar11": "flag1",
                "uVar12": "wait_result",
                "FUN_08006ac0": "process_data_and_wait_08006ac0",
                "iVar2": "return_value",
                "piVar4": "ptr2",
                "iVar7": "offset1",
                "piVar3": "ptr1",
                "iVar9": "offset2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table1",
                "puVar1": "data_ptr",
                "uVar5": "data_len",
                "uVar6": "data_flags",
                "pcVar8": "function_ptr1"
            },
            "code": "void process_data_and_wait_08006ac0(void)\n{\n  uint *data_ptr;\n  int return_value;\n  int *ptr1;\n  int *ptr2;\n  uint data_len;\n  ushort data_flags;\n  int offset1;\n  code *function_ptr1;\n  int offset2;\n  uint temp_data;\n  code *jump_table1;\n  bool flag1;\n  undefined8 wait_result;\n  process_data_08006f00(6);\n  jump_table1 = (code *)0x8006acf;\n  wait_result = wait_forever_0800573c(1);\n  ptr1 = (int *)((ulonglong)wait_result >> 0x20);\n  data_ptr = (uint *)wait_result;\n  data_flags = *(ushort *)(ptr1 + 3);\n  data_len = (uint)data_flags;\n  if ((int)(data_len << 0x1c) < 0) {\n    offset1 = ptr1[4];\n    if (offset1 != 0) {\n      offset2 = data_len << 0x1e;\n      flag1 = offset2 == 0;\n      if (flag1) {\n        offset2 = 0;\n      }\n      return_value = *ptr1;\n      if (!flag1) {\n        offset2 = ptr1[5];\n      }\n      *ptr1 = offset1;\n      ptr1[2] = offset2;\n      for (return_value = return_value - offset1; 0 < return_value; return_value = return_value - offset2) {\n        offset2 = (*(code *)ptr1[10])(data_ptr,ptr1[8],offset1,return_value);\n        if (offset2 < 1) {\n          data_flags = *(ushort *)(ptr1 + 3);\n          goto LAB_08006bc6;\n        }\n        offset1 = offset1 + offset2;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (function_ptr1 = (code *)ptr1[0xb], function_ptr1 != (code *)0x0)) {\n    temp_data = *data_ptr;\n    *data_ptr = 0;\n    if ((data_flags & 0x1000) == 0) {\n      offset1 = (*function_ptr1)(data_ptr,ptr1[8],data_len & 0x1000,1);\n      if ((offset1 == -1) && (*data_ptr != 0)) {\n        if ((*data_ptr != 0x1d) && (*data_ptr != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*jump_table1)();\n          return;\n        }\n        *data_ptr = temp_data;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      offset1 = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (offset1 = offset1 - ptr1[1], ptr1[0xd] != 0)) {\n      offset1 = offset1 - ptr1[0x10];\n    }\n    offset1 = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],offset1,0);\n    data_flags = *(ushort *)(ptr1 + 3);\n    if ((offset1 == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08006bdc >> (*data_ptr & 0xff)) << 0x1f)))) {\nLAB_08006bc6:\n      *(ushort *)(ptr1 + 3) = data_flags | 0x40;\n      (*jump_table1)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)data_flags << 0x13) < 0) && ((offset1 != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = offset1;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = temp_data;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        add_to_linked_list_080061f0(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*jump_table1)();\n      return;\n    }\n  }\nLAB_08006aea:\n  (*jump_table1)(0);\n  return;\n}",
            "called": [
                "FUN_08006f00",
                "FUN_0800573c",
                "FUN_080061f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": true,
            "current_name": "process_data_and_wait_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "sVar1": "counter",
                "FUN_08004198": "decode_data_08004198",
                "param_1": "data",
                "ptr2": "counter_ptr",
                "pbVar2": "byte_ptr",
                "ptr3": "value_ptr",
                "ptr4": "byte_data_ptr",
                "ptr5": "byte_value_ptr",
                "ptr1": "header_ptr",
                "ptr6": "flag_ptr"
            },
            "code": "int decode_data_08004198(int *data)\n{\n  char first_char = *(char *)((int)data + 0x39);\n  if (first_char != '!')\n  {\n    return 2;\n  }\n  \n  int *ptr1 = (int *)data[0];\n  short *ptr2 = (short *)((int)data + 0x26);\n  \n  if (data[2] == 0x1000)\n  {\n    uint *ptr3 = (uint *)(ptr1 + 1);\n    *ptr3 = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0)\n    {\n      data[8] = data[8] + 2;\n    }\n    else\n    {\n      data[8] = data[8] + 1;\n    }\n  }\n  else\n  {\n    byte *ptr4 = (byte *)data[8];\n    data[8] = (int)(ptr4 + 1);\n    uint *ptr5 = (uint *)(ptr1 + 1);\n    *ptr5 = (uint)*ptr4;\n  }\n  \n  *ptr2 = *ptr2 - 1;\n  if (*ptr2 == 0)\n  {\n    uint *ptr6 = (uint *)(ptr1 + 3);\n    *ptr6 = *ptr6 & 0xffffff7f;\n    *ptr6 = *ptr6 | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "decode_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "iVar1": "input_validated",
                "FUN_08001c3c": "write_bits_to_memory_08001c3c",
                "PTR_DAT_08001c7c": "input_divisor_dividend_ptr",
                "param_1": "bits_to_write",
                "write_bits_to_memory_08002494": "write_bits_to_memory_helper",
                "PTR_DAT_08001c84": "bits_to_write_ptr",
                "PTR_DAT_08001c80": "input_divisor_ptr",
                "0xf": "MAX_BITS_TO_WRITE"
            },
            "code": "uint32_t write_bits_to_memory_08001c3c(uint32_t mask, uint32_t bits_to_write, uint32_t start_bit) {\n  uint32_t input_divisor = *(uint32_t*)PTR_DAT_08001c80 / (1000 / (uint32_t)*PTR_DAT_08001c7c);\n  uint32_t input_validated = validate_input(input_divisor);\n  if (input_validated != 0) {\n    return 1;\n  }\n  if (bits_to_write > 0xf) {\n    return 1;\n  }\n  write_bits_to_memory_08001c3c_08002494(mask, bits_to_write, start_bit);\n  *(uint32_t*)PTR_DAT_08001c84 = bits_to_write;\n  return 0;\n}",
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": true,
            "current_name": "write_bits_to_memory_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": true,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "bool is_valid_input_08000a2c(uint input1, int input2, uint input3, int input4)\n{\n  bool is_input1_valid = (input2 << 1) >> 0x15 != -1 || (input1 | input2 << 0xc) == 0;\n  bool is_input2_valid = (input4 << 1) >> 0x15 != -1 || (input3 | input4 << 0xc) == 0;\n  return is_input1_valid && is_input2_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "set_bits_and_check_08001366",
                "param_1": "data",
                "param_2": "bit_mask",
                "param_3": "bit_pos",
                "param_4": "param_4",
                "cVar1": "data_val"
            },
            "code": "void set_bits_and_check_08001366(uint8_t *data, uint8_t bit_mask, uint8_t bit_pos, uint8_t value, uint32_t param_4) {\n  uint8_t max_bits = 3;\n  uint8_t data_len = *(uint8_t *)(data + 0x17);\n  if (max_bits < data_len) {\n    data_len = max_bits;\n  }\n  if (data_len <= bit_pos) {\n    bit_pos = data_len - 1;\n  }\n  uint8_t data_val = *(uint8_t *)(data + bit_pos + 0x18);\n  set_bits_and_check_08001366_08001310(data, bit_mask | 0x80, bit_pos, data_val, param_4);\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "get_bit_080047f4": "get_bit",
                "iVar1": "bit_set",
                "puVar3": "data_ptr",
                "param_1": "index",
                "FUN_08005848": "check_and_set_bit_08005848",
                "set_value_at_address_if_param_not_zero_08004c30": "set_value_at_address_if_param_not_zero",
                "get_data_by_index_08004848": "get_data_by_index",
                "param_2": "value",
                "param_3": "mask",
                "param_4": "data",
                "PTR_DAT_0800588c": "bit_table",
                "uVar2": "data_value",
                "uVar4": "bit_mask",
                "PTR_DAT_08005888": "bit_mask_table"
            },
            "code": "void check_and_set_bit_08005848(uint index, uint value, uint mask, void *data)\n{\n  uint bit_mask;\n  uint data_index;\n  void *data_ptr;\n  if (index < 60) {\n    bit_mask = (uint)(char)PTR_DAT_08005888[index];\n    data_ptr = PTR_DAT_08005888;\n  }\n  else {\n    bit_mask = 0xffffffff;\n    data_ptr = data;\n  }\n  if ((bit_mask != 0xffffffff) && (get_bit(bit_mask, PTR_DAT_0800588c, mask, data_ptr, data) != 0)) {\n    data_index = (bit_mask << 0x18) >> 0x1c;\n    uint data_value = get_data_by_index(data_index);\n    uint bit_position = bit_mask & 0xf;\n    set_value_at_address_if_param_not_zero(data_value, 1 << bit_position & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4",
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080015b2",
                "FUN_08000cd0",
                "FUN_080012a2"
            ],
            "imported": true,
            "current_name": "check_and_set_bit_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "send_interrupt_signal_08000ae8",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_interrupt_signal_08000ae8(void)\n{\n  software_interrupt(SYSTEM_CALL_INTERRUPT);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": true,
            "current_name": "send_interrupt_signal_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "flag",
                "*puVar1": "*param_ptr",
                "*(undefined *)(param_1 + 0xf) = 0": "param_list[0][15] = 0",
                "param_1": "param_list",
                "FUN_08003ed8": "update_flags_and_return_08004b34_08003ed8",
                "*puVar1 = *puVar1 & 0xfffffffe": "*param_ptr = *param_ptr & 0xfffffffe",
                "*(undefined *)((int)param_1 + 0x3d) = 2": "param_list[0][61] = flag",
                "puVar1": "param_ptr",
                "*(undefined *)((int)param_1 + 0x3d) = 0": "param_list[0][61] = 0",
                "*(undefined *)(param_1 + 0xf)": "param_list[0][15]"
            },
            "code": "void update_flags_and_return_08004b34_08003ed8(uint **param_list)\n{\n  uint *param_ptr;\n  int flag = 2;\n  param_list[0][61] = flag;\n  param_ptr = *param_list;\n  if ((param_ptr[8] & 0x1111) == 0) {\n    if ((param_ptr[8] & 0x444) == 0) {\n      *param_ptr = *param_ptr & 0xfffffffe;\n    }\n  }\n  param_list[0][61] = 0;\n  param_list[0][15] = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "update_flags_and_return_08004b34_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "param_1": "array",
                "FUN_080061e0": "fill_array_with_value_080061e0",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080061e0(char* array, char value, int size)\n{\n  char* end_of_array = array + size;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006d14",
                "FUN_08006c88",
                "FUN_08006c40"
            ],
            "imported": true,
            "current_name": "fill_array_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "iVar2": "value",
                "iVar3": "param_address",
                "uVar1": "index",
                "PTR_DAT_0800564c": "param_value_table",
                "FUN_08005604": "run_param_value_setting_08005604",
                "PTR_DAT_08005644": "param_address_table",
                "set_param_values_0800455a": "set_param_values",
                "PTR_DAT_08005648": "param_function_table"
            },
            "code": "void run_param_value_setting_08005604()\n{\n  uint index = find_index();\n  int param_address = *(int *)(PTR_DAT_08005644 + index * 4);\n  if ((index < 5) && (param_address != -1)) {\n    int value = (**(code **)(PTR_DAT_08005648 + index * 4))(param_address);\n    if (value != -1) {\n      int param_value = *(int *)(param_address + 100) + (uint)*(ushort *)(param_address + 0x6a);\n      uint param_id = *(byte *)(param_address + 0x44);\n      set_param_values_0800455a(*(undefined4 *)(PTR_DAT_0800564c + param_id * 4), param_value, 1);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": true,
            "current_name": "run_param_value_setting_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "return_one_08005724"
            },
            "code": "int return_one_08005724(void) {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": true,
            "current_name": "return_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": true,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "param_1": "data_ptr",
                "set_bits_and_check_08001310": "set_bits_and_check",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "param_4": "status_ptr",
                "FUN_0800135a": "set_bit_and_check_status_0800135a"
            },
            "code": "void set_bit_and_check_status_0800135a(uint32_t* data_ptr, uint32_t bit_position, uint32_t bit_value, uint32_t* status_ptr)\n{\n  set_bits_and_check(data_ptr, bit_position, bit_value, status_ptr, status_ptr);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_080013a4",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "set_bit_and_check_status_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "uVar1": "result",
                "param_1": "string_ptr",
                "param_2": "string_max_length",
                "param_3": "end_of_string",
                "param_4": "function_ptr",
                "FUN_08005c96": "get_string_length_08005c96"
            },
            "code": "int get_string_length_08005c96(int *string_ptr, int string_max_length, int end_of_string, int function_ptr) {\n  if (string_max_length != 0) {\n    end_of_string = get_end_of_string_08000178(string_max_length);\n    int result = (**(code **)(*string_ptr + 4))(string_ptr,string_max_length,end_of_string,*(code **)(*string_ptr + 4),function_ptr);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "get_string_length_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "*(undefined4 *)(param_2 + 4)": "*(int *)(address + 4)",
                "undefined4": "void",
                "param_1": "process_id",
                "param_2": "address",
                "FUN_0800571a": "set_memory_permissions_0800571a",
                "0x2000": "permissions"
            },
            "code": "void set_memory_permissions_0800571a(int process_id, int *address) {\n    int permissions = 0x2000;\n    *(int *)(address + 4) = permissions;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": true,
            "current_name": "set_memory_permissions_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "**param_1": "**input_array",
                "*(undefined *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)input_array + 0x3d)",
                "do_nothing_08002c4e": "do_nothing_08002c4e",
                "*(undefined *)((int)param_1 + 0x3e)": "*(uint8_t *)((int)input_array + 0x3e)",
                "uint *": "uint32_t *",
                "(int)param_1 + 0x2a": "curr_short",
                "param_1": "input_array",
                "*(char *)((int)param_1 + 0x3e)": "*(uint8_t *)((int)input_array + 0x3e)",
                "*(char *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)input_array + 0x3d)",
                "(*param_1)[1]": "(*input_array)[1]",
                "*(byte *)puVar1": "*(uint8_t *)flag_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*(uint16_t *)((int)input_array + 0x2a)",
                "uint *)0x4": "uint32_t *)0x4",
                "param_1[0xc]": "input_array[0xc]",
                "param_1[0xb]": "input_array[0xb]",
                "puVar1": "flag_ptr",
                "(int)param_1 + 0x3d": "curr_char",
                "FUN_08002efc": "handle_input_08002efc",
                "*(uint8_t *)((int)input_array + 0x3e)": "*(uint8_t *)((int)input_array + 0x3e)",
                "*(uint8_t *)((int)input_array + 0x3d)": "*(uint8_t *)((int)input_array + 0x3d)",
                "uint *)0xffff0000": "uint32_t *)0xffff0000",
                "uint *)0x8": "uint32_t *)0x8",
                "do_nothing_08002db0": "do_nothing_08002db0"
            },
            "code": "uint32_t handle_input_08002efc(uint32_t **input_array)\n{\n  uint32_t *flag_ptr;\n  uint8_t curr_char;\n  uint16_t curr_short;\n  uint32_t *ptr_b;\n  uint32_t *ptr_c;\n\n  curr_char = *(uint8_t *)((int)input_array + 0x3d);\n  if (curr_char == '!') {\n    curr_short = *(uint16_t *)((int)input_array + 0x2a);\n    if (curr_short == 0) {\n      flag_ptr = input_array[0xb];\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        **input_array = **input_array | 0x200;\n        input_array[0xc] = (uint32_t *)0x0;\n        *(uint8_t *)((int)input_array + 0x3d) = 0x20;\n        curr_char = *(uint8_t *)((int)input_array + 0x3e);\n        if (curr_char == '@') {\n          *(uint8_t *)((int)input_array + 0x3e) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(uint8_t *)((int)input_array + 0x3e) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        input_array[0xc] = (uint32_t *)0x11;\n        *(uint8_t *)((int)input_array + 0x3e) = 0;\n        *(uint8_t *)((int)input_array + 0x3d) = 0x20;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      ptr_b = input_array[9];\n      input_array[9] = (uint32_t *)((int)ptr_b + 1);\n      (*input_array)[4] = (uint32_t)*(uint8_t *)ptr_b;\n      curr_short = curr_short - 1;\n      *(uint16_t *)((int)input_array + 0x2a) = curr_short;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "handle_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "PTR_DAT_08003680": "data_ptr",
                "param_1": "num",
                "local_4": "count",
                "DAT_08003684": "multiplier",
                "FUN_0800365c": "count_down_0800365c"
            },
            "code": "void count_down_0800365c(int num)\n{\n  int count = num * (uint64_t)DAT_08003684 * (*(uint32_t *)PTR_DAT_08003680 >> 0x29);\n  do {\n    count--;\n  } while (count != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": true,
            "current_name": "count_down_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "process_input_08002cf2": "process_input_data_5",
                "increment_and_store_char_08002ad8": "increment_and_store_char",
                "process_input_08002f9c": "process_input_data_2",
                "iVar1": "input_value",
                "process_input_08002db2": "process_input_data_4",
                "add_character_to_string_08002ca6": "add_character_to_string",
                "param_1": "input",
                "DAT_08003504": "global_flags",
                "get_device_status_08002848": "get_device_status",
                "process_input_080028de": "process_input_data",
                "uVar3": "input_flags",
                "uVar2": "device_flags",
                "uVar4": "status_flags",
                "read_byte_from_buffer_08002ab8": "read_byte_from_buffer",
                "FUN_080033b8": "process_input_080033b8",
                "DAT_0800350c": "global_flags",
                "process_input_0800306c": "process_input_data_3",
                "DAT_08003518": "global_flags",
                "DAT_08003514": "global_flags",
                "handle_input_08002efc": "handle_input",
                "process_input_080032b4": "process_input_data_6",
                "set_param_value_from_array_index_080028d2": "set_param_value_from_array_index",
                "process_data_08002c54": "process_data",
                "DAT_0800351c": "global_flags"
            },
            "code": "void process_input_080033b8(int *input)\n{\n  int input_value = *input;\n  uint status_flags = *(uint *)(input_value + 0x18);\n  uint device_flags = *(uint *)(input_value + 0x14);\n  uint input_flags = *(uint *)(input_value + 4);\n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((device_flags & 0x10001) == 0) || ((input_flags & 0x200) == 0)) {\n      if (((DAT_08003518 & device_flags) == 0) || ((input_flags & 0x200) == 0)) {\n        if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n          process_input_080033b8_data(input);\n        }\n      }\n      else {\n        set_param_value_from_array_index(input);\n      }\n    }\n    else {\n      get_device_status(input);\n    }\n    if ((DAT_08003518 & status_flags) == 0) {\n      if ((((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_08003518 & device_flags) == 0)) {\n        process_input_080033b8_data_2(input);\n        return;\n      }\n      if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n        process_input_080033b8_data_3(input);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_08003518 & device_flags) == 0)) {\n        process_input_080033b8_data_4(input);\n        return;\n      }\n      if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n        handle_input(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n      process_input_080033b8_data_5();\n      return;\n    }\n    if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n      process_input_080033b8_data_6(input);\n      return;\n    }\n    if ((DAT_08003518 & status_flags) == 0) {\n      if ((((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_08003518 & device_flags) == 0)) {\n        add_character_to_string(input);\n        return;\n      }\n      if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n        increment_and_store_char(input);\n      }\n    }\n    else {\n      if ((((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_08003518 & device_flags) == 0)) {\n        process_data(input);\n        return;\n      }\n      if (((DAT_08003518 & device_flags) != 0) && ((input_flags & 0x200) != 0)) {\n        read_byte_from_buffer(input);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002cf2",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ca6",
                "FUN_08002c54",
                "FUN_08002f9c",
                "FUN_080028de",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": true,
            "current_name": "process_input_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "iVar3": "ptr",
                "uVar1": "permission",
                "param_1": "out",
                "param_2": "in",
                "uVar2": "flags",
                "FUN_080069e4": "allocate_and_set_permissions_080069e4"
            },
            "code": "uint allocate_and_set_permissions_080069e4(undefined4 *out, undefined4 *in)\n{\n  uint permission;\n  ushort flags;\n  int ptr;\n  ptr = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    initialize_data_08006cb4(ptr);\n  }\n  if (in == (undefined4 *)PTR_DAT_08006ab4) {\n    in = *(undefined4 **)(ptr + 4);\n  }\n  else if (in == (undefined4 *)PTR_DAT_08006ab8) {\n    in = *(undefined4 **)(ptr + 8);\n  }\n  else if (in == (undefined4 *)PTR_DAT_08006abc) {\n    in = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(in + 3);\n  permission = (uint)flags;\n  if (-1 < (int)(permission << 0x1c)) {\n    if (-1 < (int)(permission << 0x1b)) {\n      *out = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(permission << 0x1d) < 0) {\n      if ((undefined4 *)in[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)in[0xd] != in + 0x11) {\n          add_to_linked_list_080061f0(out);\n        }\n        in[0xd] = 0;\n      }\n      *(ushort *)(in + 3) = *(ushort *)(in + 3) & 0xffdb;\n      in[1] = 0;\n      *in = in[4];\n    }\n    *(ushort *)(in + 3) = *(ushort *)(in + 3) | 8;\n  }\n  if ((in[4] == 0) && ((*(ushort *)(in + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_08006e10(out,in);\n  }\n  flags = *(ushort *)(in + 3);\n  permission = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      permission = in[5];\n    }\n    in[2] = permission;\n  }\n  else {\n    in[2] = 0;\n    in[6] = -in[5];\n  }\n  if (in[4] == 0) {\n    flags = *(ushort *)(in + 3);\n    permission = (int)(short)flags & 0x80;\n    if (permission != 0) {\n      *(ushort *)(in + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    permission = 0;\n  }\n  return permission;\n}",
            "called": [
                "FUN_08006e10",
                "FUN_08006cb4",
                "FUN_080061f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "allocate_and_set_permissions_080069e4",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08006ab4) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006ab8) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006abc) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_to_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_08006e10(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": true,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "calculateAndUpdateSum_08004b9e",
                "do_nothing_and_return_08002582": "doNothingAndReturn",
                "calculateSumAndUpdatePointer_08001cac": "calculateSumAndUpdatePointer",
                "do_nothing_08004b9c": "doNothing"
            },
            "code": "void calculateAndUpdateSum_08004b9e(void)\n{\n  calculateSumAndUpdatePointer_08001cac();\n  doNothingAndReturn_08002582();\n  doNothing_08004b9c();\n  return;\n}",
            "called": [
                "FUN_08002582",
                "FUN_08004b9c",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": true,
            "current_name": "calculateAndUpdateSum_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": true,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "parse_data_and_get_param_08005730",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param1",
                "param_4": "param2"
            },
            "code": "void parse_data_and_get_param_08005730(void* data, int data_size, int* param1, int* param2)\n{\n  parse_data_and_get_param_08005730_080053d4(data, data_size, param1, param2);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": true,
            "current_name": "parse_data_and_get_param_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582",
                "do_nothing_08002580": "do_nothing"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "DAT_08004928": "flag_data_4",
                "DAT_08004914": "flag_data",
                "uVar1": "result",
                "DAT_08004918": "flag_data_0",
                "DAT_08004920": "flag_data_2",
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "DAT_08004924": "flag_data_3",
                "DAT_0800491c": "flag_data_1"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag)\n{\n  uint32_t* flag_ptr = (uint32_t*)(DAT_08004914 + 0x18);\n  switch(flag) {\n    case 0:\n      *flag_ptr |= 0x04;\n      return DAT_08004918;\n    case 1:\n      *flag_ptr |= 0x08;\n      return DAT_0800491c;\n    case 2:\n      *flag_ptr |= 0x10;\n      return DAT_08004920;\n    case 3:\n      *flag_ptr |= 0x20;\n      return DAT_08004924;\n    case 4:\n      *flag_ptr |= 0x40;\n      return DAT_08004928;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004f4c",
                "FUN_08004bb0",
                "FUN_08004974"
            ],
            "imported": true,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "data_pointer",
                "FUN_08001be8": "copy_and_clear_memory_08001be8",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_memory_08001be8(void)\n{\n  int index;\n  undefined4 *data_pointer;\n  code *jump_table;\n  \n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (data_pointer = (undefined4 *)PTR_DAT_08001c28; data_pointer < PTR_DAT_08001c2c; data_pointer++) {\n    *data_pointer = 0;\n  }\n  set_flags_and_values_08004d44();\n  run_all_functions_08006198();\n  jump_table = (code *)0x8001c1a;\n  update_and_send_interrupt_08005f6c();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08006198",
                "FUN_08005f6c",
                "FUN_08004d44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": true,
            "current_name": "copy_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "piVar4": "node_data",
                "param_1": "head",
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "ppiVar6": "current",
                "ppiVar7": "new_node",
                "param_2": "data",
                "param_3": "size",
                "param_4": "return_code",
                "puVar1": "pointer",
                "ppiVar2": "node",
                "extraout_r1": "next_node",
                "ppiVar3": "node_end",
                "ppiVar5": "first_node"
            },
            "code": "void add_to_linked_list_080061f0(int **head, int *data, int size, int return_code)\n{\n  int **current = head;\n  if (size == 0) {\n    return;\n  }\n  int **new_node = (int **)(data - 1);\n  if (*new_node < 0) {\n    new_node = (int **)((int)new_node + **new_node);\n  }\n  do_nothing_08006eac();\n  int **first_node = *(int ***)PTR_DAT_08006284;\n  if (first_node == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08006284 = new_node;\n    *head = new_node;\n    int **next_node = NULL;\n  }\n  else if (new_node < first_node) {\n    *head = new_node;\n    new_node[1] = (int *)first_node;\n    int **next_node = first_node;\n  }\n  else {\n    int **next_node = first_node;\n    while (next_node != NULL && next_node < new_node) {\n      current = next_node;\n      next_node = (int **)current[1];\n    }\n    if (next_node == new_node) {\n      int *node_data = *next_node;\n      int **next_next_node = (int **)next_node[1];\n      int **new_next_node = (int **)((int)node_data + (int)*current);\n      *current = (int *)new_next_node;\n      if (next_next_node == (int **)((int)current + (int)new_next_node)) {\n        int *next_data = *next_next_node;\n        int **next_next_next_node = (int **)next_next_node[1];\n        int **new_next_next_node = (int **)((int)new_next_node + (int)next_data);\n        *current = (int *)new_next_next_node;\n        current[1] = (int *)next_next_next_node;\n      }\n    }\n    else if (new_node < (int **)((int)current + (int)current[0])) {\n      *head = NULL;\n      *return_code = 0xc;\n      return;\n    }\n    else {\n      new_node[1] = (int *)next_node;\n      current[1] = (int *)new_node;\n    }\n  }\n  do_nothing_08006eae(return_code, current, next_node, return_code);\n  return;\n}",
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": true,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "0xffffeefe": "0xffffeefe",
                "iVar1": "update_result",
                "*(undefined *)(param_1 + 0x24)": "*update_status",
                "param_1": "update_status_ptr",
                "update_data_if_possible_080020f0()": "update_data_if_possible()",
                "*(char *)(param_1 + 0x24)": "*update_status",
                "FUN_08002348": "check_update_status_08002348",
                "*(uint *)(param_1 + 0x28)": "*update_flag",
                "1": "0x01"
            },
            "code": "int check_update_status_08002348(int update_status_ptr)\n{\n  int update_result;\n  char* update_status = (char*)(update_status_ptr + 0x24);\n  uint* update_flag = (uint*)(update_status_ptr + 0x28);\n\n  if (*update_status == 0x01) {\n    return 2;\n  }\n\n  *update_status = 0x01;\n  update_result = update_data_if_possible();\n\n  if (update_result == 0) {\n    *update_flag = (*update_flag & 0xffffeefe) | 0x01;\n  }\n\n  *update_status = 0x00;\n  return update_result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "check_update_status_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "iVar1": "bit_count",
                "param_1": "data_size",
                "FUN_080060d4": "process_data_080060d4"
            },
            "code": "void process_data_080060d4(int data_size) {\n  int bit_count;\n  if (*(int *)(data_size + 8) != 0) {\n    (**(code **)(data_size + 0xc))();\n    return;\n  }\n  process_and_wait_for_data();\n  bit_count = count_bits_set_to_one();\n  if (*(int *)(PTR_DAT_08006100 + bit_count * 0x14 + 0xc) != 0) {\n    process_data_080060d4();\n  }\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": true,
            "current_name": "process_data_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "bVar1": "param_bits",
                "uRam08005b18": "uRam08005b18",
                "iVar2": "param_count",
                "uRam08005b14": "uRam08005b14",
                "PTR_DAT_08005b38": "PTR_DAT_08005b38",
                "param_1": "param_index",
                "uRam0000012d": "uRam0000012d",
                "iRam08005b1c": "data_process_result",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "unaff_r6": "unaff_r6",
                "FUN_08005a68": "set_param_values_08005a68",
                "pbVar3": "data_pointer",
                "unaff_r4": "unaff_r4",
                "param_2": "param_value",
                "param_3": "param_type",
                "uRam08005b20": "uRam08005b20",
                "extraout_r1": "extra_out_r1"
            },
            "code": "void set_param_values_08005a68(int param_index, int param_value, byte param_type) {\n  uint extra_out_r1;\n  byte param_bits = param_type & 7;\n  int param_count = 0;\n  int jump_table_index;\n  int data_process_result;\n  byte *data_pointer;\n  undefined unaff_r4;\n  int unaff_r6;\n  code *jump_table;\n  *(int *)(param_index + 0x11c) = param_value;\n  *(byte *)(param_index + 0x140) = param_type;\n  if (param_bits == 4) {\n    param_count = 7;\n  }\n  else if (param_bits == 6) {\n    param_count = 8;\n  }\n  else if (param_bits == 2) {\n    param_count = 6;\n  }\n  if ((param_type & 0x30) == 0x30) {\n    *(int *)(param_index + 0x128) = 0x600;\n    param_count++;\n  }\n  else if ((param_type & 0x20) == 0) {\n    *(int *)(param_index + 0x128) = 0;\n  }\n  else {\n    *(int *)(param_index + 0x128) = 0x400;\n    param_count++;\n  }\n  if ((param_type & 8) == 0) {\n    *(int *)(param_index + 0x124) = 0;\n  }\n  else {\n    *(int *)(param_index + 0x124) = 0x2000;\n  }\n  if (param_count == 8) {\n    *(int *)(param_index + 0x120) = 0;\n  }\n  else if (param_count == 9) {\n    *(int *)(param_index + 0x120) = 0x1000;\n  }\n  else {\n    param_count = 0;\n  }\n  if (param_count != 0) {\n    FUNC_08004f4c(param_index + 0xd4);\n    set_param_values_08005a68_08005510(param_index + 0xd4,uRam08005b14);\n    return;\n  }\n  jump_table = (code *)0x8005b12;\n  data_process_result = iRam08005b1c;\n  process_data_and_call_func_with_assertion_check_0800611c(uRam08005b20,299,iRam08005b1c,uRam08005b18);\n  data_pointer = *(byte **)(extra_out_r1 + unaff_r6);\n  *(undefined *)(data_process_result + 0x1e) = unaff_r4;\n  *(undefined *)(*data_pointer + 0x1e) = 0;\n  if (extra_out_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[extra_out_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  jump_table_index = 0x08005b30;\n  jump_table = (code *)jump_table_index;\n  jump_table();\n  return;\n}",
            "called": [
                "FUN_08004f4c",
                "FUN_0800611c",
                "FUN_08005510"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "set_param_values_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "bVar4": "isNotEqualOne",
                "iVar1": "isValidInput1",
                "param_1": "array",
                "param_6": "input5",
                "param_7": "input6",
                "param_8": "input7",
                "FUN_08001814": "validate_input_and_initialize_array_08001814",
                "param_9": "input8",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "input4",
                "uVar3": "uVar3",
                "uVar2": "uVar2",
                "uVar5": "leadingZeroBits",
                "uVar7": "uVar7",
                "uVar6": "uVar6"
            },
            "code": "void validate_input_and_initialize_array_08001814(undefined4 *array, undefined4 input1, undefined4 input2, undefined4 input3, undefined4 input4, undefined4 input5, undefined4 input6, undefined4 input7, int input8)\n{\n  int isValidInput1 = is_input_validated_080009dc(input2, input3, 0, 0);\n  int isValidInput2 = is_input_validated_080009dc(input4, input5, 0, 0);\n  int isValidInput3 = is_input_validated_080009dc(input6, input7, 0, 0);\n  if (isValidInput1 == 0 && isValidInput2 == 0 && isValidInput3 == 0) {\n    array[13] = input8;\n    bool isNotEqualOne = input8 != 1;\n    if (isNotEqualOne) {\n      input8 = 0;\n    }\n    unsigned char uVar3 = (unsigned char)input8;\n    if (!isNotEqualOne) {\n      uVar3 = 1;\n    }\n    *(unsigned char *)((int)array + 0x71) = uVar3;\n    array[0] = input2;\n    array[1] = input3;\n    array[2] = input4;\n    array[3] = input5;\n    array[4] = input6;\n    array[5] = input7;\n    unsigned long long leadingZeroBits = count_leading_zero_bits_0800040c(array[22]);\n    unsigned long long uVar5 = FUNC_0800074c((int)leadingZeroBits, (int)(leadingZeroBits >> 0x20), 0, DAT_080018f4);\n    unsigned int uVar2 = (unsigned int)(uVar5 >> 0x20);\n    array[6] = input2;\n    array[7] = input3;\n    unsigned long long uVar6 = FUNC_080004f8(input4, input5, (int)leadingZeroBits, uVar2);\n    *(unsigned long long *)(array + 2) = uVar6;\n    unsigned long long uVar7 = FUNC_0800074c(input6, input7, (int)leadingZeroBits, uVar2);\n    *(unsigned long long *)(array + 4) = uVar7;\n    if (array[12] == 1) {\n      unsigned long long uVar8 = FUNC_08000190(0, 0, input2, input3);\n      *(unsigned long long *)(array + 1) = uVar8;\n      uVar6 = FUNC_08000190(0, 0, (int)uVar6, (int)(uVar6 >> 0x20));\n      *(unsigned long long *)(array + 2) = uVar6;\n      uVar7 = FUNC_08000190(0, 0, (int)uVar7, (int)(uVar7 >> 0x20));\n      *(unsigned long long *)(array + 4) = uVar7;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_0800040c",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "validate_input_and_initialize_array_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "uVar1": "status",
                "param_1": "signal_parameter_1",
                "param_2": "signal_parameter_2",
                "param_3": "signal_parameter_3",
                "FUN_08000aec": "send_interrupt_08000aec",
                "param_4": "signal_parameter_4"
            },
            "code": "int send_interrupt_08000aec(int signal_type, int signal_parameter_1, int signal_parameter_2, int signal_parameter_3, int signal_parameter_4){\n    int status;\n    if (*(int *)PTR_DAT_08000b04 != 0) {\n        status = 0;\n    }\n    else {\n        status = send_interrupt_08000aec_signal_08000ae8(1, signal_parameter_1, 0, 0, signal_parameter_4);\n    }\n    return status;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "send_interrupt_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c"
            },
            "code": "int32_t return_zero_0800572c(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": true,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "iVar1": "subtracted_value",
                "subtract_four_08004df4": "get_subtracted_value()",
                "(**(code**)(iVar1 + 0x48))()": "(*callback_function)()",
                "*(code**)(iVar1 + 0x48)": "callback_function",
                "FUN_08004e12": "execute_callback_if_exists_08004e12",
                "code*": "callback_function"
            },
            "code": "void execute_callback_if_exists_08004e12(void)\n{\n  int subtracted_value = get_subtracted_value();\n  code* callback_function = *(code**)(subtracted_value + 0x48);\n  if (callback_function != (code*)0x0) {\n    (*callback_function)();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "execute_callback_if_exists_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "iVar2": "temp_var_1",
                "uVar1": "result_1",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar3": "temp_var_2",
                "FUN_08000a58": "convert_to_int_08000a58"
            },
            "code": "uint convert_to_int_08000a58(uint input_1, uint input_2) {\n  uint result_1;\n  int temp_var_1;\n  uint temp_var_2;\n  \n  temp_var_1 = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < temp_var_1) {\n      return 0;\n    }\n    result_1 = temp_var_1 >> 0x15;\n    temp_var_2 = -result_1 - 0x3e1;\n    if (result_1 < 0xfffffc20 && temp_var_2 != 0) {\n      result_1 = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (temp_var_2 & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        result_1 = -result_1;\n      }\n      return result_1;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "convert_to_int_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "iVar1": "result",
                "local_c": "constant_5",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "local_4c": "parameter_2",
                "set_params_08003c90": "set_parameters",
                "calculate_result_and_write_bits_08003ad4": "calculate_and_write_bits",
                "validate_input_08002514": "validate_input",
                "write_bits_to_memory_08002494": "write_bits_to_memory",
                "local_1c": "constant_2",
                "local_3c": "bitmask_3",
                "local_38": "bitmask_4",
                "local_10": "constant_4",
                "local_54": "parameter_1",
                "local_20": "constant_1",
                "local_30": "multiplier",
                "local_40": "bitmask_2",
                "local_14": "constant_3",
                "local_34": "bitmask_5",
                "FUN_08001b48": "initialize_system_08001b48",
                "local_44": "bitmask_1",
                "set_bit_08002560": "set_bit"
            },
            "code": "void initialize_system_08001b48(void)\n{\n  int result;\n  uint value_from_pointer;\n  uint multiplier = 2;\n  uint constant_1 = 1;\n  uint constant_2 = 0x10;\n  uint constant_3 = 2;\n  uint constant_4 = 0;\n  uint constant_5 = 0x380000;\n  \n  result = calculate(multiplier);\n  if (result != 0) {\n    wait_forever(PTR_s__home_bo__arduino15_packages_STM_08001be4, 0x88);\n  }\n  \n  uint bitmask_1 = 0xf;\n  uint bitmask_2 = 2;\n  uint bitmask_3 = 0;\n  uint bitmask_4 = 0x400;\n  uint bitmask_5 = 0;\n  result = calculate_and_write_bits(bitmask_1, bitmask_2, bitmask_3, bitmask_4);\n  if (result != 0) {\n    wait_forever(PTR_s__home_bo__arduino15_packages_STM_08001be4, 0x95);\n  }\n  \n  uint parameter_1 = 2;\n  uint parameter_2 = 0x8000;\n  result = set_parameters(parameter_1, parameter_2);\n  if (result != 0) {\n    wait_forever(PTR_s__home_bo__arduino15_packages_STM_08001be4, 0x9c);\n  }\n  \n  value_from_pointer = get_value_from_pointer();\n  validate_input((uint)((ulonglong)DAT_08001be0 * (ulonglong)value_from_pointer >> 0x26));\n  set_bit(4);\n  write_bits_to_memory(0xffffffff, 0);\n}\n",
            "called": [
                "FUN_08004d40",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560",
                "FUN_08002514",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": true,
            "current_name": "initialize_system_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "*(uint *)(param_1 + 0x20)": "*data",
                "param_1": "data",
                "~(1 << (param_2 & 0xff))": "mask",
                "param_2": "bit_position",
                "param_3": "value",
                "param_3 << (param_2 & 0xff)": "value << (bit_position & 0xff)",
                "FUN_08004092": "set_bit_08004092"
            },
            "code": "void set_bit_08004092(uint32_t *data, uint8_t bit_position, uint8_t value) {\n  uint32_t mask = ~(1 << (bit_position & 0xff));\n  *data = (*data & mask) | (value << (bit_position & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": true,
            "current_name": "set_bit_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculateStringLengthAndExecuteFunction_08005cd4",
                "iVar1": "stringLength",
                "execute_function_pointer_08005cc0": "executeFunctionPointer",
                "iVar2": "functionResult",
                "param_1": "functionParam",
                "get_string_length_08005c96": "getStringLength"
            },
            "code": "int calculateStringLengthAndExecuteFunction_08005cd4(int functionParam) {\n  int stringLength = getStringLength();\n  int functionResult = executeFunctionPointer(functionParam);\n  return functionResult + stringLength;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "calculateStringLengthAndExecuteFunction_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_if_param_is_one_08005bb0",
                "param_1": "is_param_one",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value"
            },
            "code": "void initialize_if_param_is_one_08005bb0(int param_1, int param_2, undefined4 param_3, undefined4 param_4) {\n  if (param_1 == 1) {\n    if (param_2 == 0xffff) {\n      initialize_param_08005b54_08005b54(PTR_DAT_08005bd0, DAT_08005bcc, param_3, 0xffff, param_4);\n    }\n  }\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": true,
            "current_name": "initialize_if_param_is_one_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "param_11": "value_9",
                "param_12": "value_10",
                "param_10": "value_8",
                "param_13": "value_11",
                "FUN_080014ba": "set_values_at_address_080014ba",
                "param_1": "address",
                "param_6": "value_4",
                "param_7": "value_5",
                "param_8": "value_6",
                "param_9": "value_7",
                "param_2": "is_zero",
                "param_3": "value_1",
                "param_4": "value_2",
                "param_5": "value_3"
            },
            "code": "void set_values_at_address_080014ba(int address, int is_zero, undefined value_1, undefined4 value_2, undefined value_3, undefined value_4, undefined value_5, undefined value_6, undefined value_7, undefined value_8, undefined value_9, undefined value_10, undefined value_11)\n{\n  *(undefined *)(address + 8) = value_1;\n  *(char *)(address + 9) = (char)value_2;\n  *(undefined *)(address + 10) = value_3;\n  *(undefined *)(address + 0xb) = value_4;\n  *(undefined *)(address + 0xc) = value_5;\n  *(undefined *)(address + 0xd) = value_6;\n  *(undefined *)(address + 0xe) = value_7;\n  *(undefined *)(address + 0xf) = value_8;\n  *(undefined *)(address + 0x10) = value_9;\n  *(undefined *)(address + 0x11) = value_10;\n  *(undefined *)(address + 0x12) = value_11;\n  if (is_zero == 0) {\n    *(undefined *)(address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(address + 0x13) = 0;\n  }\n  decode_and_update_values_080013a4(address, 0x10, 1, 0, value_2);\n  return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": true,
            "current_name": "set_values_at_address_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "iVar2": "var_1",
                "iVar3": "var_2",
                "param_1": "params",
                "FUN_08003c90": "set_params_08003c90",
                "puVar1": "ptr_1",
                "uVar4": "var_3",
                "bVar5": "flag_4"
            },
            "code": "uint32_t set_params_08003c90(uint32_t *params)\n{\n  bool flag_1 = (*params & 1) != 0;\n  bool flag_2 = (*params & 2) != 0;\n  bool flag_3 = (*params & 0x10) != 0;\n  uint32_t *ptr_1 = (uint32_t *)DAT_08003da0;\n  uint32_t *ptr_2 = (uint32_t *)DAT_08003d98;\n  uint32_t *ptr_3 = (uint32_t *)DAT_08003d9c;\n  uint32_t var_1 = *(ptr_2 + 8) & 0x300;\n  uint32_t var_2 = *(params + 1) & 0x300;\n  if (flag_1)\n  {\n    bool flag_4 = (*(uint32_t *)(ptr_2 + 7) & 0x10000000) == 0;\n    if (flag_4)\n    {\n      *(uint32_t *)(ptr_2 + 7) = *(uint32_t *)(ptr_2 + 7) | 0x10000000;\n    }\n    if ((*ptr_3 & 0x100) == 0)\n    {\n      *ptr_3 = *ptr_3 | 0x100;\n      uint32_t var_3 = get_data_from_pointer_08001cc4();\n      while ((*ptr_3 & 0x100) == 0)\n      {\n        uint32_t var_4 = get_data_from_pointer_08001cc4();\n        if (100 < var_4 - var_3)\n        {\n          return 3;\n        }\n      }\n    }\n    if ((var_1 != 0) && (var_1 != var_2))\n    {\n      *ptr_1 = 1;\n      *ptr_1 = 0;\n      *(ptr_2 + 8) = *(ptr_2 + 8) & 0xFFFFFCFF | var_2;\n      if ((*(ptr_2 + 8) & 1) != 0)\n      {\n        uint32_t var_5 = get_data_from_pointer_08001cc4();\n        while ((*(ptr_2 + 8) & 2) == 0)\n        {\n          uint32_t var_6 = get_data_from_pointer_08001cc4();\n          if (5000 < var_6 - var_5)\n          {\n            return 3;\n          }\n        }\n      }\n    }\n    *(ptr_2 + 8) = *(ptr_2 + 8) & 0xFFFFFCFF | *(params + 1);\n    if (flag_4)\n    {\n      *(uint32_t *)(ptr_2 + 7) = *(uint32_t *)(ptr_2 + 7) & 0xEFFFFFFF;\n    }\n  }\n  if (flag_2)\n  {\n    *(ptr_2 + 1) = *(ptr_2 + 1) & 0xFFFF3FFF | *(params + 2);\n  }\n  if (flag_3)\n  {\n    *(ptr_2 + 1) = *(ptr_2 + 1) & 0xFFBFFFFF | *(params + 3);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "set_params_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "param_1": "input",
                "FUN_08002514": "validate_input_08002514",
                "puVar1": "data_ptr"
            },
            "code": "int validate_input_08002514(unsigned int input) {\n  unsigned int* data_ptr = PTR_DAT_08002538;\n  if (input < 0x1000000) {\n    data_ptr[1] = input - 1;\n    *(unsigned char*)(PTR_DAT_0800253c + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001c3c",
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "validate_input_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "param_1": "pointer_array",
                "FUN_08005c1c": "initialize_pointers_08005c1c",
                "param_2": "first_param",
                "param_3": "second_param",
                "param_4": "third_param",
                "param_5": "fourth_param"
            },
            "code": "void initialize_pointers_08005c1c(undefined4 *pointer_array, undefined first_param, undefined second_param, undefined third_param, undefined fourth_param)\n{\n  *pointer_array = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(undefined *)(pointer_array + 1) = first_param;\n  *(undefined *)((int)pointer_array + 5) = second_param;\n  *(undefined *)((int)pointer_array + 6) = third_param;\n  *(undefined *)((int)pointer_array + 7) = fourth_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": true,
            "current_name": "initialize_pointers_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "auStack_4c": "temp_flag",
                "iVar1": "status",
                "param_1": "base_address",
                "FUN_08006dc8": "check_permissions_and_set_08006dc8",
                "local_48": "temp_permission",
                "param_2": "permissions",
                "param_3": "result",
                "param_4": "flag",
                "uVar2": "temp_result"
            },
            "code": "int check_permissions_and_set_08006dc8(uint32_t base_address, int16_t permissions, uint32_t* result, uint32_t* flag) {\n  int status;\n  uint32_t temp_flag;\n  if (permissions < 0 || (status = set_memory_permissions_08007004(base_address, permissions, &temp_flag)) < 0) {\n    *flag = 0;\n    if ((int32_t)((uint32_t)*(uint16_t*)(permissions + 0xc) << 0x18) < 0) {\n      *result = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *flag = (temp_flag & 0xf000) == 0x2000;\n  }\n  *result = 0x400;\nLAB_08006e08:\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": true,
            "current_name": "check_permissions_and_set_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "DAT_080482e4": "0x1111",
                "param_1": "pointer_to_pointer_to_uint",
                "param_2": "new_value",
                "FUN_0800412c": "update_and_check_value_0800412c",
                "DAT_080482e8": "0x444",
                "puVar1": "pointer_to_uint"
            },
            "code": "uint update_and_check_value_0800412c(uint **pointer_to_pointer_to_uint, uint new_value)\n{\n  uint *pointer_to_uint = *pointer_to_pointer_to_uint;\n  update_value_at_offset_08004110(pointer_to_uint, new_value, 0);\n  uint value_at_index_8 = pointer_to_uint[8];\n  if (((value_at_index_8 & DAT_080482e4) == 0) && ((value_at_index_8 & DAT_080482e8) == 0)) {\n    pointer_to_uint[0x11] &= 0xffff7fff;\n  }\n  value_at_index_8 = pointer_to_uint[8];\n  if (((value_at_index_8 & DAT_080482e4) == 0) && ((value_at_index_8 & DAT_080482e8) == 0)) {\n    *pointer_to_uint &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "update_and_check_value_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_08007090": "process_and_wait_for_data_08007090"
            },
            "code": "void process_and_wait_for_data_08007090(void)\n{\n  code *jump_table;\n  jump_table = process_and_wait_for_data_08007090;\n  set_data_flag(PTR_DAT_0800712c);\n  set_data_flag(PTR_DAT_08007130);\n  set_data_flag(PTR_DAT_08007134);\n  set_data_flag(PTR_DAT_08007138);\n  set_data_flag(PTR_DAT_0800713c);\n  set_data_flag(PTR_DAT_08007140);\n  set_data_flag(PTR_DAT_08007144);\n  set_data_flag(PTR_DAT_08007148);\n  set_data_flag(PTR_DAT_0800714c);\n  set_data_flag(PTR_DAT_08007150);\n  set_data_flag(PTR_DAT_08007154);\n  set_data_flag(PTR_DAT_08007158);\n  (*jump_table)();\n  return;\n}\n",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": true,
            "current_name": "process_and_wait_for_data_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "iVar1": "value_index",
                "param_1": "value",
                "param_2": "array",
                "param_3": "array_length",
                "param_4": "index1",
                "uVar2": "extracted_value",
                "FUN_0800492c": "extract_value_from_array_0800492c"
            },
            "code": "uint extract_value_from_array_0800492c(uint value, uint *array, uint array_length, uint index1, uint index2) {\n  int value_index = find_value_or_return_minus_one(value, array, array_length, index1, index2);\n  uint extracted_value = (uint)(value_index << 12) >> 27;\n  if (extracted_value > 15) {\n    extracted_value = 0;\n  }\n  return extracted_value;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "extract_value_from_array_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "uVar1": "shifted_index",
                "1 << (param_1 & 0xf)": "bit_mask",
                "param_1": "index",
                "param_2": "array",
                "*(uint *)(param_2 + uVar1 * 4)": "array_ptr",
                "FUN_0800480a": "set_bit_at_index_0800480a"
            },
            "code": "void set_bit_at_index_0800480a(uint index, int* array){\n  uint shifted_index = (index << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(array + shifted_index * 4);\n  *array_ptr = *array_ptr | 1 << (index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "uVar1": "extracted_bits",
                "param_1": "input_data",
                "param_2": "flag",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "result",
                "uVar2": "count_leading_zeros",
                "FUN_080015f8": "calculate_result_080015f8"
            },
            "code": "undefined8 calculate_result_080015f8(undefined4 input_data, int flag, undefined4 param_3, undefined4 param_4)\n{\n  uint extracted_bits = extract_bits_from_data();\n  ulonglong result = CONCAT44(DAT_0800169c, DAT_08001698);\n  \n  if ((extracted_bits & 0x10000) == 0) {\n    extracted_bits = extracted_bits >> 0x12;\n    ulonglong count_leading_zeros = count_leading_zero_bits(extracted_bits & 0x1fff);\n    if ((extracted_bits & 0x2000) != 0) {\n      ulonglong inverted_bits = count_leading_zero_bits(~extracted_bits & 0x1fff);\n      count_leading_zeros = calculate_leading_zeros((int)inverted_bits, (int)(inverted_bits >> 0x20), 0, DAT_080016a0, param_4);\n      count_leading_zeros = count_leading_zeros & 0xffffffff | (ulonglong)((int)(count_leading_zeros >> 0x20) + 0x80000000) << 0x20;\n    }\n    result = calculate_leading_zeros((int)count_leading_zeros, (int)(count_leading_zeros >> 0x20), 0, DAT_080016a4);\n    if (flag == 1) {\n      result = calculate_leading_zeros((int)result, (int)((ulonglong)result >> 0x20), 0, DAT_080016a8);\n      result = calculate_leading_zeros((int)result, (int)((ulonglong)result >> 0x20), 0, DAT_080016ac);\n      result = calculate_leading_zeros((int)result, (int)((ulonglong)result >> 0x20), 0, DAT_080016b0);\n      return result;\n    }\n  }\n  else {\n    extracted_bits = extracted_bits & 7;\n    if (extracted_bits == 2) {\n      return CONCAT44(DAT_0800168c, DAT_08001688);\n    }\n    if (extracted_bits == 4) {\n      return CONCAT44(DAT_08001694, DAT_08001690);\n    }\n    if (extracted_bits != 1) {\n      return 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_0800040c",
                "FUN_08000194",
                "FUN_080015b2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "calculate_result_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "param_1": "param1",
                "PTR_DAT_08005c60": "PTR_DAT_08005c60",
                "initialize_pointers_08005c1c": "initialize_pointers",
                "param_2": "param2",
                "FUN_08005c38": "initialize_pointers_if_param1_is_1_and_param2_is_0xffff_08005c38"
            },
            "code": "void initialize_pointers_if_param1_is_1_and_param2_is_0xffff_08005c38(int param1, int param2) {\n  if ((param1 == 1) && (param2 == 0xffff)) {\n    initialize_pointers(PTR_DAT_08005c60,0,0,0,0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": true,
            "current_name": "initialize_pointers_if_param1_is_1_and_param2_is_0xffff_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_to_one_08005f8c",
                "param_1": "input",
                "cVar1": "count"
            },
            "code": "int count_bits_set_to_one_08005f8c(uint input){\n  int count = 0;\n  while (input != 1){\n    count++;\n    input = input >> 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": true,
            "current_name": "count_bits_set_to_one_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "sVar1": "data_value",
                "iVar3": "parse_result",
                "puVar2": "data_ptr",
                "param_1": "return_value",
                "unaff_r5": "unaff_r5",
                "unaff_r4": "unaff_r4",
                "param_2": "data_index",
                "param_3": "param_3",
                "param_4": "param_4",
                "in_lr": "in_lr"
            },
            "code": "void process_data_08006f5a(int *return_value, int data_index, undefined4 param_3, undefined4 param_4)\n{\n  short data_value = *(short *)(data_index + 0xe);\n  if ((int)((uint)*(ushort *)(data_index + 0xc) << 0x17) < 0) {\n    processReturnValue(return_value, data_value, 0, 2);\n  }\n  *(ushort *)(data_index + 0xc) &= 0xefff;\n  undefined *data_ptr = PTR_DAT_08006fe0;\n  *(undefined4 *)data_ptr = 0;\n  int parse_result = parse_data_and_get_param(data_value, param_3, param_4, param_4, param_4, unaff_r4, unaff_r5, in_lr);\n  if ((parse_result == -1) && (*(int *)data_ptr != 0)) {\n    *return_value = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "PTR_DAT_08000b98": "config2",
                "*PTR_DAT_08000bac": "bitConfig5",
                "param_1": "input1",
                "*(undefined4 *)(PTR_DAT_08000b84 + 4)": "value6",
                "*(undefined4 *)(PTR_DAT_08000b8c + 4)": "value2",
                "PTR_DAT_08000b94": "config3",
                "*PTR_DAT_08000bb4": "bitConfig7",
                "PTR_DAT_08000b90": "config4",
                "PTR_DAT_08000bb8": "bitConfig1",
                "*PTR_DAT_08000bb0": "bitConfig6",
                "*(undefined4 *)PTR_DAT_08000b8c": "value1",
                "*PTR_DAT_08000ba8": "bitConfig4",
                "FUN_08000b08": "update_params_and_bits_08000b08",
                "*(undefined4 *)(PTR_DAT_08000b88 + 4)": "value4",
                "*PTR_DAT_08000ba4": "bitConfig3",
                "*(undefined4 *)PTR_DAT_08000b84": "value5",
                "PTR_DAT_08000b9c": "config1",
                "*PTR_DAT_08000bbc": "valueConfig4",
                "param_2": "input2",
                "*(undefined4 *)PTR_DAT_08000b88": "value3",
                "*PTR_DAT_08000ba0": "bitConfig2",
                "*PTR_DAT_08000bc4": "valueConfig2",
                "PTR_DAT_08000bc8": "valueConfig1",
                "*PTR_DAT_08000bc0": "valueConfig3"
            },
            "code": "void update_params_and_bits_08000b08(int param_1, int param_2)\n{\n  if ((param_1 == 1) && (param_2 == 0xffff)) {\n    update_params_and_calculate_and_return_result_08001b18(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90, *(undefined4 *)PTR_DAT_08000b8c, *(undefined4 *)(PTR_DAT_08000b8c + 4), *(undefined4 *)PTR_DAT_08000b88, *(undefined4 *)(PTR_DAT_08000b88 + 4), *(undefined4 *)PTR_DAT_08000b84, *(undefined4 *)(PTR_DAT_08000b84 + 4), 0);\n    set_bits_and_check_08001510(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8, *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n    update_values_and_bits_0800157c(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08001b18",
                "FUN_0800157c",
                "FUN_08001510"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": true,
            "current_name": "update_params_and_bits_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "bVar3": "is_param_equal",
                "iVar2": "index",
                "uVar1": "reset_val",
                "param_1": "param"
            },
            "code": "void initialize_data_08006cb4(int param){\n  undefined4 reset_val;\n  int index;\n  bool is_param_equal;\n  \n  if (*(int *)(param + 0x18) == 0) {\n    *(undefined4 *)(param + 0x48) = 0;\n    *(undefined4 *)(param + 0x4c) = 0;\n    *(undefined4 *)(param + 0x50) = 0;\n    index = *(int *)PTR_PTR_DAT_08006d0c;\n    *(undefined **)(param + 0x28) = PTR_LAB_08006c34_1_08006d10;\n    is_param_equal = param == index;\n    if (is_param_equal) {\n      index = 1;\n    }\n    if (is_param_equal) {\n      *(int *)(param + 0x18) = index;\n    }\n    reset_val = reset_array_08006d14();\n    *(undefined4 *)(param + 4) = reset_val;\n    reset_val = reset_array_08006d14(param);\n    *(undefined4 *)(param + 8) = reset_val;\n    reset_val = reset_array_08006d14(param);\n    *(undefined4 *)(param + 0xc) = reset_val;\n    initialize_data_08006cb4_structure_08006c40(*(undefined4 *)(param + 4),4,0);\n    initialize_data_08006cb4_structure_08006c40(*(undefined4 *)(param + 8),9,1);\n    initialize_data_08006cb4_structure_08006c40(*(undefined4 *)(param + 0xc),0x12,2);\n    *(undefined4 *)(param + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006394",
                "FUN_08006d14",
                "FUN_080068f0"
            ],
            "imported": true,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_first_occurrence_08004c5e",
                "undefined4": "int",
                "param_1": "target",
                "*param_2": "*data",
                "param_2": "data",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_first_occurrence_08004c5e(int target, char *data)\n{\n  while( true ) {\n    if (*data == -1) {\n      return 0;\n    }\n    if (*data == target) break;\n    data = data + 0xc;\n  }\n  return *(int *)(data + 4);\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": true,
            "current_name": "find_first_occurrence_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "find_occurrence_if_not_negative_08004c78": "findOccurrenceIfNotNegative",
                "find_value_or_return_minus_one_08004cce": "findValueOrReturnMinusOne",
                "local_50": "values",
                "FUN_08004b3c": "checkAndUpdateValues_08004b3c",
                "get_value_from_array_08004948": "getValueFromArray",
                "update_flags_and_return_08004b34_08003ed8": "updateFlagsAndReturn",
                "param_1": "inputValue",
                "set_and_clear_bits_080040b0": "setAndClearBits",
                "PTR_DAT_08004b90": "PTR_DAT_08004b90",
                "update_and_check_value_0800412c": "updateAndCheckValue"
            },
            "code": "void checkAndUpdateValues_08004b3c(int inputValue)\n{\n  int occurrenceIndex;\n  uint valueIndex;\n  int values[17];\n  occurrenceIndex = findOccurrenceIfNotNegative(inputValue, PTR_DAT_08004b90);\n  if ((occurrenceIndex != 0) && ((((valueIndex = getValueFromArray(inputValue), valueIndex == 0 || (valueIndex == 4)) || (valueIndex == 8)) || ((valueIndex == 0xc || (valueIndex == 0x18)))))) {\n    uint valueOrMinusOne = findValueOrReturnMinusOne(inputValue, PTR_DAT_08004b90);\n    if ((valueOrMinusOne & 0x100000) == 0) {\n      setAndClearBits(values,valueIndex);\n    }\n    else {\n      updateAndCheckValue(values,valueIndex);\n    }\n    updateFlagsAndReturn(values);\n  }\n  return;\n}",
            "called": [
                "FUN_080040b0",
                "FUN_08004cce",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004c78",
                "FUN_08004948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "checkAndUpdateValues_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "iVar1": "i",
                "FUN_08001550": "set_bits_and_check_08001550",
                "param_1": "data",
                "param_2": "bits",
                "param_3": "value"
            },
            "code": "void set_bits_and_check_08001550(uint8_t *data, uint8_t bits, uint8_t value) {\n  set_bits_and_check_08001550_08001310(data, (bits & 7) << 3 | 0x40, 0);\n  for (int i = 0; i < 8; i++) {\n    (**(code **)*data)(data,*(uint8_t *)(value + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = get_data_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = calculate_result_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = is_input_valid_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = is_input_valid_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = is_input_valid_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = get_data_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = is_bit_set_in_data_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      check_and_set_bit_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      convert_input_to_output_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      get_string_length_08005c96(puVar2,PTR_DAT_08000f80);\n      validate_input_and_convert_to_output_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      get_string_length_08005c96(puVar2,puVar3);\n      validate_input_and_convert_to_output_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      get_string_length_08005c96(puVar2,puVar3);\n      calculate_output_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      check_and_set_bit_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    set_bit_and_check_status_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    get_string_length_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    set_bits_and_check_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      get_string_length_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      validate_input_and_convert_to_output_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      set_bits_and_check_0800134e(puVar3,0);\n      get_string_length_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = get_updated_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = get_data_and_return_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = get_updated_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = get_data_and_return_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = get_updated_value_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = get_data_and_return_080058e0();\n    validate_input_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = count_leading_zero_bits_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = is_input_validated_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      check_and_set_bit_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      check_and_set_bit_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    check_and_set_bit_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08005cd4",
                "FUN_080009f0",
                "FUN_080009c8",
                "FUN_08001960",
                "FUN_080009dc",
                "FUN_08005c96",
                "FUN_0800134e",
                "FUN_0800042c",
                "FUN_080015f8",
                "FUN_0800135a",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_08000194",
                "FUN_08005848",
                "FUN_08005890",
                "FUN_08005d82",
                "FUN_08005f40",
                "FUN_08005754",
                "FUN_08005f2c",
                "FUN_080018f8",
                "FUN_080016b4",
                "FUN_08001918",
                "FUN_08001a44",
                "FUN_08001366",
                "FUN_08000a04"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "set_bits_and_check_080012e8": "set_bits_and_check",
                "set_bits_and_check_080012c0": "set_bits_and_check",
                "check_and_set_bit_08005848": "check_and_set_bit",
                "FUN_08001310": "set_bits_and_check_08001310",
                "*(byte *)(param_1 + 0x13)": "*(data + 0x13)",
                "param_1": "data",
                "*(char *)(param_1 + 9)": "*(data + 1)",
                "param_2": "bit_mask",
                "param_3": "bit_array",
                "param_4": "bit_array_end",
                "*(undefined *)(param_1 + 8)": "*data"
            },
            "code": "void set_bits_and_check_08001310(uint8_t* data, uint32_t bit_mask, uint8_t* bit_array, uint8_t* bit_array_end) {\n  check_and_set_bit(*data, bit_mask, bit_array, bit_array_end);\n  if (*(uint8_t*)(data + 1) != 0xFF) {\n    check_and_set_bit(*(data + 1), 0, bit_array, bit_array_end);\n  }\n  if ((*(uint8_t*)(data + 0x13) & 0x10) == 0) {\n    set_bits_and_check_08001310(data, bit_mask >> 4, bit_array, bit_array_end);\n    set_bits_and_check_08001310(data, bit_mask, bit_array, bit_array_end);\n    return;\n  }\n  set_bits_and_check_08001310(data, bit_mask, bit_array, bit_array_end);\n  return;\n}",
            "called": [
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_0800134e",
                "FUN_080013a4",
                "FUN_0800138e",
                "FUN_08001550",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "validate_inputs_and_return_value_080009b8": "validate_inputs_and_return_value",
                "FUN_080009a8": "validate_and_return_inputs_080009a8",
                "param_1": "first_input",
                "param_2": "second_input",
                "param_3": "third_input",
                "param_4": "fourth_input"
            },
            "code": "void validate_and_return_inputs_080009a8(undefined4 first_input, undefined4 second_input, undefined4 third_input, undefined4 fourth_input) {\n  validate_inputs_and_return_value(third_input, fourth_input, first_input, second_input);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": true,
            "current_name": "validate_and_return_inputs_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "DAT_08004dec": "flag_D",
                "DAT_08004de8": "flag_C",
                "param_1": "flag_value",
                "FUN_08004d90": "update_flags_08004d90",
                "DAT_08004df0": "flag_pointer",
                "DAT_08004de4": "flag_A"
            },
            "code": "void update_flags_08004d90(int *flag_value)\n{\n    uint *DAT_08004df0 = (uint *)DAT_08004df0;\n    if (*flag_value == DAT_08004de4)\n    {\n        DAT_08004df0[0x18/4] &= 0xfffff7ff;\n    }\n    if (*flag_value == flag_B)\n    {\n        DAT_08004df0[0x1c/4] &= 0xfffffffe;\n    }\n    if (*flag_value == DAT_08004de8)\n    {\n        DAT_08004df0[0x1c/4] &= 0xfffffffd;\n    }\n    if (*flag_value == DAT_08004dec)\n    {\n        DAT_08004df0[0x1c/4] &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": true,
            "current_name": "update_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "param_1": "base_ptr",
                "FUN_08005ce8": "convert_base_08005ce8",
                "local_15": "N/A",
                "param_2": "number",
                "param_3": "base",
                "cVar1": "digit",
                "uVar3": "remainder",
                "uVar2": "result",
                "uVar4": "quotient",
                "pcVar5": "digits"
            },
            "code": "undefined4 convert_base_08005ce8(int *base_ptr, uint number, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  char *digits = (char*) malloc(9 * sizeof(char));\n  digits[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *current_digit = digits + 1;\n  do {\n    quotient = number / base;\n    uint remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *current_digit = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint num_digits = get_end_of_string_08000178(current_digit);\n    result = (**(code **)(*base_ptr + 4))(base_ptr, current_digit, num_digits);\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": true,
            "current_name": "convert_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "execute_function_if_conditions_met_08004ec4": "execute_function_if_conditions_met",
                "iVar1": "val3/val4",
                "val2": "input_array[0][5]",
                "do_nothing_0800316a": "do_nothing",
                "val1": "input_array[0][1]",
                "puVar2": "ptr3",
                "puVar3": "ptr4",
                "param_1": "input_array",
                "PTR_LAB_080035fc_1_080032ac": "PTR_LAB",
                "ptr2": "input_array[0xc]",
                "FUN_0800316c": "process_input_0800316c",
                "ptr3": "input_array[9]",
                "ptr4": "input_array[0xe]",
                "ptr5": "input_array[0xd]",
                "ptr1": "input_array[0]",
                "char1": "*(char *)((int)input_array + 0x3d)",
                "checkAndUpdateValuesForInput_08004ef4": "check_and_update_values"
            },
            "code": "void process_input_0800316c(uint **input_array)\n{\n  int condition1 = *(byte *)((int)input_array + 0x3d) - 0x29;\n  uint *ptr1 = *input_array;\n  uint *ptr2 = input_array[0xc];\n  uint *ptr3 = input_array[9];\n  uint *ptr4 = input_array[0xe];\n  uint *ptr5 = input_array[0xd];\n  uint val1 = ptr1[1];\n  uint val2 = ptr1[5];\n  char char1 = *(char *)((int)input_array + 0x3d);\n  \n  if (condition1 < 2) {\n    ptr2 = (uint *)0x0;\n    *(undefined *)((int)input_array + 0x3d) = 0x28;\n  }\n  else {\n    if ((char1 != '`') && ((val1 & 0x800) == 0)) {\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n    }\n    ptr2 = (uint *)0x0;\n    *(undefined *)((int)input_array + 0x3e) = 0;\n  }\n  *ptr1 &= 0xfffff7ff;\n  if ((val1 & 0x800) == 0) {\n    if (char1 == '`') {\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      input_array[0x10] = (uint *)0x0;\n      if ((val2 & 0x40) != 0) {\n        ptr3 = (uint *)((int)ptr3 + 1);\n        *(char *)ptr3 = (char)ptr1[4];\n      }\n      *ptr1 &= 0xfffffffe;\n      do_nothing(input_array);\n    }\n    else {\n      if ((val2 & 0x40) != 0) {\n        ptr3 = (uint *)((int)ptr3 + 1);\n        *(char *)ptr3 = (char)ptr1[4];\n      }\n      check_and_update_values(input_array);\n    }\n  }\n  else {\n    ptr1[1] &= 0xfffff7ff;\n    if (*(char *)((int)input_array[0xd] + 0x21) == '\\x01') {\n      ptr4[0xd] = (uint)PTR_LAB_080035fc_1_080032ac_080035fc_1_080032ac;\n      int val3 = get_value_from_param(ptr4);\n      if (val3 != 0) {\n        if ((val1 & 0x40) != 0) {\n          ptr3 = (uint *)((int)ptr3 + 1);\n          *(char *)ptr3 = (char)ptr1[4];\n        }\n        *ptr1 &= 0xfffffffe;\n        *(undefined *)((int)input_array + 0x3d) = 0x20;\n        (*(code *)ptr4[0xd])();\n      }\n    }\n    else {\n      ptr5[0xd] = (uint)PTR_LAB_080035fc_1_080032ac_080035fc_1_080032ac;\n      int val4 = get_value_from_param(ptr5);\n      if (val4 != 0) {\n        *ptr1 &= 0xfffffffe;\n        *(undefined *)((int)input_array + 0x3d) = 0x20;\n        (*(code *)ptr5[0xd])();\n      }\n    }\n  }\n  if ((char1 == '(') && ((uint)input_array[0x10] & 4) != 0) {\n    input_array[0xb] = DAT_080032b0;\n    ptr2 = (uint *)0x0;\n    *(undefined *)((int)input_array + 0x3d) = 0x20;\n    *(undefined *)((int)input_array + 0x3e) = 0;\n    execute_function_if_conditions_met(input_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316a",
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_080032b4",
                "FUN_08003520"
            ],
            "imported": true,
            "current_name": "process_input_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "uVar1": "array_index",
                "param_1": "bit_index",
                "FUN_08004828": "set_bit_to_zero_08004828",
                "param_2": "array",
                "*(uint *)(param_2 + uVar1 * 4)": "*ptr_array_index",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_to_zero_08004828(uint bit_index, int* array){\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* ptr_array_index = (uint*)(array + array_index * 4);\n  uint bit_mask = 1 << (bit_index & 0xf);\n  *ptr_array_index &= ~bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "set_bit_to_zero_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "flag_value": "flag_value",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "param_1": "flags",
                "FUN_08003afa": "process_data_08003afa",
                "param_2": "length",
                "puVar1": "data_pointer",
                "uVar4": "result"
            },
            "code": "uint32_t process_data_08003afa(uint32_t *flags, uint32_t length)\n{\n  uint32_t *data_pointer;\n  int32_t start_time;\n  int32_t current_time;\n  uint32_t result;\n  \n  if ((*flags & 0x02) != 0) {\n    DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffff0f) | flags[2];\n  }\n  if ((*flags & 0x01) != 0) {\n    uint32_t flag_value = flags[1];\n    if (flag_value == 1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((flag_value != 2) && ((*DAT_08003c38 & 0x02) == 0)) {\n      return 1;\n    }\n    DAT_08003c38[1] = flag_value | (DAT_08003c38[1] & 0xfffffffc);\n    start_time = get_data_from_pointer_08001cc4();\n    if (flag_value == 1) {\n      while ((DAT_08003c38[1] & 0x0c) != 0x04) {\n        current_time = get_data_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flag_value == 2) {\n      while ((DAT_08003c38[1] & 0x0c) != 0x08) {\n        current_time = get_data_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & 0x0c) != 0) {\n        current_time = get_data_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  data_pointer = DAT_08003c34;\n  if ((length < (*DAT_08003c34 & 0x07)) && (*DAT_08003c34 = (*DAT_08003c34 & 0xfffffff8) | length, length != (*data_pointer & 0x07))) {\n    return 1;\n  }\n  if ((*flags & 0x04) != 0) {\n    DAT_08003c38[1] = (DAT_08003c38[1] & 0xfffff8ff) | flags[3];\n  }\n  if ((*flags & 0x08) != 0) {\n    DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffc7ff) | (flags[4] << 3);\n  }\n  result = calculate_result_08003a68();\n  *(uint32_t *)PTR_DAT_08003c40 = result >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  write_bits_to_memory_08001c3c(0x0f);\n  return 0;\n}",
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": true,
            "current_name": "process_data_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "iVar1": "index",
                "param_1": "key",
                "FUN_08004948": "get_value_from_array_08004948",
                "param_2": "array",
                "param_3": "array_len",
                "param_4": "value1",
                "uVar2": "shifted_index"
            },
            "code": "int get_value_from_array_08004948(uint32_t key, const uint32_t* array, size_t array_len, uint32_t value1, uint32_t value2) {\n  int index = find_value_or_return_minus_one(key, array, array_len, value1, value2);\n  uint32_t shifted_index = (uint32_t)(index << 12) >> 27;\n  if (shifted_index == 3) {\n    return 8;\n  }\n  if (shifted_index == 4) {\n    return 12;\n  }\n  if (shifted_index == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "get_value_from_array_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "uVar1": "color_value",
                "param_1": "address",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_08005b24": "set_color_08005b24",
                "param_2": "color_index"
            },
            "code": "void set_color_08005b24(int address, uint color_index)\n{\n  undefined color_value;\n  code *jump_table;\n  if (color_index < 0x3c) {\n    color_value = color_palette[color_index];\n  }\n  else {\n    color_value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = color_value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "set_color_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "DAT_08004a40": "first_const",
                "iVar1": "data_address",
                "DAT_08004a44": "second_const",
                "param_1": "data_ptr",
                "FUN_080049f0": "update_data_080049f0",
                "DAT_08004a48": "data_address"
            },
            "code": "void update_data_080049f0(int *data_ptr) {\n  int DAT_08004a48 = DAT_08004a48;\n  int DAT_08004a40 = DAT_08004a40;\n  int DAT_08004a44 = DAT_08004a44;\n  \n  if (*data_ptr != DAT_08004a40) {\n    if (*data_ptr == DAT_08004a44) {\n      uint* DAT_08004a48_c = (uint*)(DAT_08004a48 + 0xc);\n      *DAT_08004a48_c |= 0x400;\n      uint* DAT_08004a48_18 = (uint*)(DAT_08004a48 + 0x18);\n      *DAT_08004a48_18 &= 0xfffffbff;\n    }\n    return;\n  }\n  uint* DAT_08004a48_c = (uint*)(DAT_08004a48 + 0xc);\n  *DAT_08004a48_c |= 0x200;\n  uint* DAT_08004a48_18 = (uint*)(DAT_08004a48 + 0x18);\n  *DAT_08004a48_18 &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": true,
            "current_name": "update_data_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "param_1": "ptr_param1",
                "FUN_08001e40": "get_value_at_offset_08001e40"
            },
            "code": "int get_value_at_offset_08001e40(int *ptr_param1)\n{\n    int offset = 0x4c;\n    int *ptr_value = (int *)(*ptr_param1 + offset);\n    return *ptr_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "uVar1": "result",
                "uStack_14": "stack_value_3",
                "local_1c": "stack_value_4",
                "uStack_10": "stack_value_2",
                "uStack_c": "stack_value_1",
                "uVar2": "data_value_1",
                "abStack_18": "ab_stack",
                "FUN_08003a68": "calculate_result_08003a68"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result = 0;\n  uint stack_value_1 = *(uint *)(PTR_DAT_08003ac4 + 8);\n  uint stack_value_2 = *(uint *)(PTR_DAT_08003ac4 + 4);\n  uint stack_value_3 = *(uint *)PTR_DAT_08003ac4;\n  uint stack_value_4 = *(uint *)(PTR_DAT_08003ac4 + 0x10);\n  uint data_value_1 = *(uint *)(DAT_08003ac8 + 4);\n  uint data_value_2 = DAT_08003ad0;\n  if ((data_value_1 & 0xc) == 8) {\n    if ((data_value_1 & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)abStack_18[(data_value_1 << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_08003ad0 * abStack_18[(data_value_1 << 10) >> 0x1c]) / (uint)*(byte *)((int)&stack_value_4 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": true,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "param_1": "byte",
                "*(undefined *)(param_1 + 10)": "*byte",
                "FUN_080012a2": "set_bits_in_byte_080012a2"
            },
            "code": "void set_bits_in_byte_080012a2(unsigned char *byte, int bit1, int bit2) {\n  const int BIT_1 = 0;\n  const int BIT_2 = 1;\n\n  check_and_set_bit_08005848(*byte, BIT_1);\n  check_and_set_bit_08005848(*byte, BIT_2);\n  check_and_set_bit_08005848(*byte, BIT_1);\n  return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": true,
            "current_name": "set_bits_in_byte_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "uVar1": "first_occurrence",
                "param_1": "input_param",
                "find_first_occurrence_08004c5e": "find_first_occurrence",
                "FUN_08004c78": "find_occurrence_if_not_negative_08004c78"
            },
            "code": "int find_occurrence_if_not_negative_08004c78(int input_param) {\n  int first_occurrence = 0;\n  if (input_param != -1) {\n    first_occurrence = find_first_occurrence();\n  }\n  return first_occurrence;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004a4c",
                "FUN_08004f4c",
                "FUN_08005384",
                "FUN_080053d4",
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "find_occurrence_if_not_negative_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "decode_and_update_08001e48",
                "local_c": "result",
                "iVar3": "temp_var",
                "uVar1": "result",
                "param_1": "params",
                "param_2": "data",
                "uVar2": "shift_value"
            },
            "code": "int decode_and_update_08001e48(int *params, uint *data){\n  int result;\n  uint shift_value;\n  int temp_var;\n  \n  if (*(char *)(params + 9) == 1) {\n    result = 2;\n  }\n  else {\n    *(undefined *)(params + 9) = 1;\n    shift_value = data[1];\n    if (shift_value < 7) {\n      shift_value = shift_value * 5 - 5;\n      *(uint *)(*params + 52) = *data << (shift_value & 0xff) | *(uint *)(*params + 52) & ~(0x1f << (shift_value & 0xff));\n    }\n    else if (shift_value < 13) {\n      shift_value = shift_value * 5 - 35;\n      *(uint *)(*params + 48) = *data << (shift_value & 0xff) | *(uint *)(*params + 48) & ~(0x1f << (shift_value & 0xff));\n    }\n    else {\n      shift_value = shift_value * 5 - 65;\n      *(uint *)(*params + 44) = *data << (shift_value & 0xff) | *(uint *)(*params + 44) & ~(0x1f << (shift_value & 0xff));\n    }\n    shift_value = *data;\n    if (shift_value < 10) {\n      *(uint *)(*params + 16) = data[2] << (shift_value * 3 & 0xff) | *(uint *)(*params + 16) & ~(7 << (shift_value * 3 & 0xff));\n    }\n    else {\n      shift_value = shift_value * 3 - 30;\n      *(uint *)(*params + 12) = data[2] << (shift_value & 0xff) | *(uint *)(*params + 12) & ~(7 << (shift_value & 0xff));\n    }\n    if (*data - 16 < 2) {\n      temp_var = *params;\n      if (temp_var == 134520244) {\n        if ((*(uint *)(temp_var + 8) & 0x800000) == 0) {\n          *(uint *)(temp_var + 8) = *(uint *)(temp_var + 8) | 0x800000;\n          if (*data == 16) {\n            for (result = (uint)((ulonglong)0x3b9aca00 * (ulonglong)*(uint *)134520252 >> 0x32) * 10; result != 0; result = result + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        params[10] = params[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(params + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "decode_and_update_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "validate_inputs_and_return_value_080009b8",
                "param_1": "input_value",
                "check_inputs_0800092c": "check_inputs"
            },
            "code": "undefined4 validate_inputs_and_return_value_080009b8(undefined4 input_value)\n{\n  check_inputs();\n  return input_value;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009f0",
                "FUN_080009a8",
                "FUN_080009c8",
                "FUN_080009dc"
            ],
            "imported": true,
            "current_name": "validate_inputs_and_return_value_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "iVar1": "intermediate_value",
                "param_1": "dividend",
                "FUN_08000aa8": "calculate_08000aa8",
                "param_2": "divisor",
                "uVar2": "result"
            },
            "code": "uint calculate_08000aa8(uint dividend, uint divisor)\n{\n  int intermediate_value;\n  uint result;\n  \n  if ((divisor & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    result = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)result) {\n      return (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (result & 0xff);\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "calculate_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "in_ZR": "is_zero",
                "in_CY": "carry",
                "validate_and_return_inputs_080009a8": "validate_inputs",
                "FUN_08000a04": "validate_inputs_and_return_result_08000a04"
            },
            "code": "bool validate_inputs_and_return_result_08000a04(void)\n{\n  undefined is_zero = false;\n  undefined carry = false;\n  \n  validate_inputs();\n  return !carry || is_zero;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "validate_inputs_and_return_result_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "param_1": "data_ptr",
                "DAT_08000128": "is_data_initialized",
                "PTR_DAT_08000124": "is_initialized",
                "PTR_FUN_0800012c": "init_function_ptr",
                "FUN_0800010c": "check_if_initialized_0800010c"
            },
            "code": "int* check_if_initialized_0800010c(int* data_ptr) {\n\tif (*PTR_DAT_08000124 == 0) {\n\t\tif (DAT_08000128 != 0) {\n\t\t\tdata_ptr = PTR_FUN_0800012c;\n\t\t}\n\t\t*PTR_DAT_08000124 = 1;\n\t}\n\treturn data_ptr;\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": true,
            "current_name": "check_if_initialized_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "PTR_DAT_08001cbc": "dataPointerTo08001cbc",
                "PTR_DAT_08001cc0": "dataPointerTo08001cc0",
                "FUN_08001cac": "calculateSumAndUpdatePointer_08001cac"
            },
            "code": "void calculateSumAndUpdatePointer_08001cac(void)\n{\n  uint8_t byteValue = *PTR_DAT_08001cc0;\n  uint32_t *pointerTo08001cbc = (uint32_t *)PTR_DAT_08001cbc;\n  uint32_t currentValue = *pointerTo08001cbc;\n  uint32_t sum = (uint32_t)byteValue + currentValue;\n  *pointerTo08001cbc = sum;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": true,
            "current_name": "calculateSumAndUpdatePointer_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "PTR_DAT_08005a40": "memory_address_pointer",
                "DAT_08005a3c": "memory_address_exists",
                "calculate_offset_from_memory_address_0800591e": "calculate_offset_from_memory_address",
                "FUN_08005a18": "check_memory_address_and_calculate_offset_08005a18"
            },
            "code": "void check_memory_address_and_calculate_offset_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    calculate_offset_from_memory_address(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "check_memory_address_and_calculate_offset_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "iVar1": "flag_value",
                "param_1": "flags"
            },
            "code": "void process_flags_08003f18(int *flags)\n{\n  int flag_value;\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 2) != 0) && ((*(uint *)(flag_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set_08004df8();\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 4) != 0) && ((*(uint *)(flag_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set_08004df8(flags);\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 8) != 0) && ((*(uint *)(flag_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set_08004df8(flags);\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 0x10) != 0) && ((*(uint *)(flag_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set_08004df8(flags);\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 1) != 0) && ((*(uint *)(flag_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xfffffffe;\n    execute_callback_if_exists_08004e12(flags);\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 0x80) != 0) && ((*(uint *)(flag_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xffffff7f;\n    do_nothing_0800417a(flags);\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 0x40) != 0) && ((*(uint *)(flag_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xffffffbf;\n    do_nothing_08003f16(flags);\n  }\n  flag_value = *flags;\n  if (((*(uint *)(flag_value + 0x10) & 0x20) != 0) && ((*(uint *)(flag_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(flag_value + 0x10) = 0xffffffdf;\n    do_nothing_08004178(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f12",
                "FUN_08004178",
                "FUN_08003f14",
                "FUN_08004e12",
                "FUN_08004df8",
                "FUN_08003f16",
                "FUN_0800417a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": true,
            "current_name": "process_flags_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_offset_from_memory_address_0800591e",
                "value_at_address_plus_0x134": "value_at_address_plus_offset_0x134",
                "param_1": "address",
                "result": "offset",
                "PTR_": "",
                "DAT_": "",
                "value_at_address_plus_0x136": "value_at_address_plus_offset_0x136"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ calculate_offset_from_memory_address_0800591e(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": true,
            "current_name": "calculate_offset_from_memory_address_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "bit_index",
                "DAT_0800255c": "array_ptr"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint* DAT_0800255c = (uint*)DAT_0800255c;\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    DAT_0800255c[array_index] = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "iVar1": "array_index",
                "FUN_08006344": "process_byte_data_08006344",
                "param_1": "data_ptr",
                "pbVar2": "array_ptr_1",
                "pbVar3": "array_ptr_2",
                "param_2": "byte_data",
                "param_3": "data_array_ptr",
                "uVar4": "byte_data_uint"
            },
            "code": "uint process_byte_data_08006344(int data_ptr, byte byte_data, byte **data_array_ptr)\n{\n  int array_index;\n  byte *array_ptr_1;\n  byte *array_ptr_2;\n  uint byte_data_uint;\n  \n  array_ptr_1 = data_array_ptr[2] + -1;\n  data_array_ptr[2] = array_ptr_1;\n  if ((-1 < (int)array_ptr_1) || (((int)data_array_ptr[6] <= (int)array_ptr_1 && (array_ptr_1 = (byte *)(uint)byte_data, array_ptr_1 != (byte *)0xa))))\n  {\n    array_ptr_1 = *data_array_ptr;\n    *data_array_ptr = array_ptr_1 + 1;\n    *array_ptr_1 = byte_data;\n    return (uint)byte_data;\n  }\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (data_array_ptr == (byte **)PTR_DAT_080069d8) {\n    data_array_ptr = *(byte ***)(data_ptr + 4);\n  }\n  else if (data_array_ptr == (byte **)PTR_DAT_080069dc) {\n    data_array_ptr = *(byte ***)(data_ptr + 8);\n  }\n  else if (data_array_ptr == (byte **)PTR_DAT_080069e0) {\n    data_array_ptr = *(byte ***)(data_ptr + 0xc);\n  }\n  data_array_ptr[2] = data_array_ptr[6];\n  array_ptr_2 = (byte *)(uint)*(ushort *)(data_array_ptr + 3);\n  array_index = (int)array_ptr_2 << 0x1c;\n  if (((array_index < 0) && (array_ptr_2 = data_array_ptr[4], array_ptr_2 != (byte *)0x0)) || (array_index = allocate_and_set_permissions_080069e4(data_ptr,data_array_ptr,array_index,array_ptr_2,array_ptr_1), array_index == 0)) {\n    byte_data_uint = (uint)byte_data;\n    array_index = (int)*data_array_ptr - (int)data_array_ptr[4];\n    if ((array_index < (int)data_array_ptr[5]) || (array_index = process_data_08006be0(data_ptr,data_array_ptr), array_index == 0)) {\n      data_array_ptr[2] = data_array_ptr[2] + -1;\n      array_ptr_1 = *data_array_ptr;\n      *data_array_ptr = array_ptr_1 + 1;\n      *array_ptr_1 = byte_data;\n      if ((byte *)(array_index + 1) != data_array_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array_ptr + 3) << 0x1f)) {\n          return byte_data_uint;\n        }\n        if (byte_data_uint != 10) {\n          return byte_data_uint;\n        }\n      }\n      array_index = process_data_08006be0(data_ptr,data_array_ptr);\n      if (array_index == 0) {\n        return byte_data_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": true,
            "current_name": "process_byte_data_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "validate_inputs_and_return_value_080009b8": "validate_inputs_and_return_value",
                "FUN_080009c8": "is_input_valid_080009c8",
                "in_ZR": "input"
            },
            "code": "bool is_input_valid_080009c8(void)\\n{\\n  char input;\\n  input = validate_inputs_and_return_value();\\n  return input != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "is_input_valid_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "puVar2": "pointer",
                "param_1": "input",
                "cVar1": "character"
            },
            "code": "uint32_t process_input_08002db2(uint32_t **input)\n{\n  char character = *(char *)((int)input + 0x3d);\n  uint32_t *pointer = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint32_t *)0x4) || ((pointer == (uint32_t *)0x8 || (pointer == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08002c4e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)input + 0x3e) == '@' && (character == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          pointer = input[9];\n          input[9] = (uint32_t *)((int)pointer + 1);\n          (*input)[4] = (uint32_t)*(byte *)pointer;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = input[9];\n      input[9] = (uint32_t *)((int)pointer + 1);\n      (*input)[4] = (uint32_t)*(byte *)pointer;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "PTR_DAT_08001ccc": "pointer_data",
                "FUN_08001cc4": "get_data_from_pointer_08001cc4"
            },
            "code": "get_data_from_pointer_08001cc4() {\n    return *(undefined4 *)PTR_DAT_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08004b94",
                "FUN_08001f84",
                "FUN_08003688",
                "FUN_080020f0",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001cd0",
                "FUN_080053d4",
                "FUN_08003c90",
                "FUN_08002384",
                "FUN_080043b4"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": true,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "DAT_08003ed4": "DAT_memory_address",
                "FUN_08003ea0": "check_and_execute_function_08003ea0",
                "param_1": "ptr_param",
                "execute_function_if_not_null_08004d18": "execute_function_if_not_null"
            },
            "code": "void check_and_execute_function_08003ea0(uint **ptr_param){\n    if (((**ptr_param & 2) != 0) && (((*ptr_param)[1] & 2) != 0)) {\n        execute_function_if_not_null();\n        (*ptr_param)[1] = 0xfffffffd;\n    }\n    *(undefined4 *)(DAT_08003ed4 + 0x14) = 0x20000;\n    *(undefined *)((int)ptr_param + 0x11) = 1;\n    return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": true,
            "current_name": "check_and_execute_function_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "param_1": "input_array",
                "FUN_0800306c": "process_input_0800306c",
                "puVar1": "temp_ptr"
            },
            "code": "uint32_t process_input_0800306c(uint32_t **input_array) {\n  uint32_t *temp_ptr;\n  temp_ptr = input_array[11];\n  if (*(int16_t *)((int)input_array + 42) == 3) {\n    if (((temp_ptr == (uint32_t *)0x4) || (temp_ptr == (uint32_t *)0x8)) || (temp_ptr == (uint32_t *)0xffff0000)) {\n      **input_array = **input_array & 0xfffffbff;\n    }\n    temp_ptr = input_array[9];\n    input_array[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*input_array)[4];\n    *(int16_t *)((int)input_array + 42) = *(int16_t *)((int)input_array + 42) - 1;\n  }\n  else if (*(int16_t *)((int)input_array + 42) == 2) {\n    if (((temp_ptr == (uint32_t *)0x4) || (temp_ptr == (uint32_t *)0x8)) || (temp_ptr == (uint32_t *)0xffff0000)) {\n      (*input_array)[1] = (*input_array)[1] & 0xfffffcff;\n      **input_array = **input_array | 0x200;\n    }\n    else {\n      if (temp_ptr == (uint32_t *)0x2) {\n        **input_array = **input_array | 0x400;\n      }\n      else {\n        **input_array = **input_array & 0xfffffbff;\n      }\n      (*input_array)[1] = (*input_array)[1] & 0xfffffcff;\n    }\n    temp_ptr = input_array[9];\n    input_array[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*input_array)[4];\n    *(int16_t *)((int)input_array + 42) = *(int16_t *)((int)input_array + 42) - 1;\n    temp_ptr = input_array[9];\n    input_array[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*input_array)[4];\n    *(undefined *)((int)input_array + 61) = 0x20;\n    input_array[12] = (uint32_t *)0x0;\n    if (*(char *)((int)input_array + 62) == '@') {\n      *(undefined *)((int)input_array + 62) = 0;\n      do_nothing_08002f9a();\n    }\n    else {\n      *(undefined *)((int)input_array + 62) = 0;\n      do_nothing_08002c50();\n    }\n  }\n  else {\n    temp_ptr = input_array[9];\n    input_array[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*input_array)[4];\n    *(int16_t *)((int)input_array + 42) = *(int16_t *)((int)input_array + 42) - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "uVar1": "combined_bytes",
                "byte": "index",
                "param_1": "data_buffer",
                "FUN_0800548c": "is_flag_set_0800548c",
                "get_value_from_data_buffer": "get_value_from_data_buffer",
                "combine_bytes": "combine_bytes",
                "PTR_DAT_080054ac": "data_buffer_pointer"
            },
            "code": "bool is_flag_set_0800548c(uint8_t* data_buffer)\n{\n  uint16_t combined_bytes = combine_bytes(get_value_from_data_buffer(data_buffer));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": true,
            "current_name": "is_flag_set_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "param_1": "index",
                "DAT_08004874": "data_3",
                "DAT_08004878": "data_4",
                "FUN_08004848": "get_data_by_index_08004848",
                "DAT_08004880": "data_2",
                "DAT_08004870": "data_1",
                "DAT_0800487c": "data_5"
            },
            "code": "undefined4 get_data_by_index_08004848(int index)\n{\n  switch(index) {\n  case 0:\n    return DAT_08004870;\n  case 1:\n    return DAT_08004880;\n  case 2:\n    return DAT_08004874;\n  case 3:\n    return DAT_08004878;\n  case 4:\n    return DAT_0800487c;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "imported": true,
            "current_name": "get_data_by_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "convert_input_to_output_08005d82",
                "convert_input_to_output_08005d42": "convert_input_to_output_helper"
            },
            "code": "void convert_input_to_output_08005d82() {\n  convert_input_to_output_08005d82_helper();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "convert_input_to_output_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "iVar1": "result",
                "bVar3": "isResultMinusOne",
                "param_1": "data",
                "param_2": "flags",
                "FUN_08006f92": "processReturnValueAndUpdateFlags_08006f92",
                "uVar2": "updatedFlags"
            },
            "code": "void processReturnValueAndUpdateFlags_08006f92(undefined4 data, int flags)\n{\n  int result = processReturnValue(data, *(short *)(flags + 0xe));\n  bool isResultMinusOne = result == -1;\n  ushort updatedFlags;\n  if (isResultMinusOne) {\n    updatedFlags = *(ushort *)(flags + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(flags + 0x54) = result;\n    updatedFlags = *(ushort *)(flags + 0xc) | 0x1000;\n  }\n  if (isResultMinusOne) {\n    *(ushort *)(flags + 0xc) = updatedFlags;\n  }\n  else {\n    *(ushort *)(flags + 0xc) = updatedFlags;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": true,
            "current_name": "processReturnValueAndUpdateFlags_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "check_and_set_bit_08005848": "check_and_set_bit",
                "uVar1": "i",
                "param_1": "data",
                "set_bits_in_byte_080012a2": "set_bits_in_byte",
                "param_2": "bit_index",
                "FUN_080012c0": "set_bits_and_check_080012c0"
            },
            "code": "void set_bits_and_check_080012c0(uint8_t* data, int bit_index) {\n  uint8_t* byte_address;\n  uint8_t bit_value;\n  for (uint8_t i = 0; i < 4; i++) {\n    byte_address = data + i + 0xb;\n    bit_value = (uint8_t)(bit_index >> i) & 1;\n    check_and_set_bit(byte_address, bit_value);\n  }\n  set_bits_in_byte(data);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)",
                "FUN_08001f80": "get_value_at_offset_08001f80"
            },
            "code": "int get_value_at_offset_08001f80(int base_address, int offset){\n  return *(int *)(base_address + offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "iVar1": "current_data",
                "iVar3": "current_ptr",
                "param_1": "data_ptr",
                "PTR_DAT_08001ffc": "DATA_PTR_CONSTANT",
                "param_2": "data_size",
                "DAT_08002000": "DATA_CONSTANT",
                "FUN_08001f84": "set_data_ready_08001f84",
                "local_14": "i"
            },
            "code": "int set_data_ready_08001f84(int *data_ptr, uint data_size)\n{\n  int current_ptr = *data_ptr;\n  if ((*(uint *)(current_ptr + 8) & 1) == 0) {\n    *(uint *)(current_ptr + 8) |= 1;\n    for (uint i = 0; i < ((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc >> 0x32); i++) {\n    }\n    int initial_data = get_data_from_pointer(PTR_DAT_08001ffc, data_ptr, data_size);\n    do {\n      if ((*(uint *)(*data_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      int current_data = get_data_from_pointer(PTR_DAT_08001ffc, data_ptr, data_size);\n    } while ((uint)(current_data - initial_data) < 3);\n    data_ptr[10] |= 0x10;\n    data_ptr[0xb] |= 1;\n    *(undefined *)(data_ptr + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": true,
            "current_name": "set_data_ready_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "PTR_DAT_08000cac": "interrupt_params",
                "PTR_DAT_08000c98": "temperature_sensor_3",
                "PTR_s_Reflow_08000ca4": "Reflow_Status",
                "puVar2": "oven_ptr",
                "puVar3": "interrupt_ptr",
                "PTR_DAT_08000c9c": "interrupt_status",
                "PTR_s_Oven_1_2_08000ca8": "Oven_Status",
                "PTR_DAT_08000cb4": "interrupt_control_register_1",
                "PTR_DAT_08000ca0": "interrupt_mask",
                "PTR_DAT_08000cb0": "oven_timer",
                "puVar1": "reflow_ptr",
                "PTR_DAT_08000c94": "temperature_sensor_2",
                "FUN_08000bcc": "update_values_and_send_interrupt_08000bcc",
                "uVar4": "interrupt_data",
                "PTR_DAT_08000c90": "temperature_sensor_1",
                "PTR_DAT_08000cb8": "interrupt_control_register_2"
            },
            "code": "void update_values_and_send_interrupt_08000bcc(void)\n{\n  undefined *reflow_ptr;\n  undefined *oven_ptr;\n  undefined *interrupt_ptr;\n  undefined4 interrupt_data;\n\n  reflow_ptr = PTR_DAT_08000c90;\n  check_and_set_bit(PTR_DAT_08000c90_value,0);\n  decode_and_update_values(reflow_ptr,1);\n  reflow_ptr = PTR_DAT_08000c94;\n  check_and_set_bit(PTR_DAT_08000c94_value,0);\n  decode_and_update_values(reflow_ptr,1);\n  oven_ptr = PTR_DAT_08000c98;\n  check_and_set_bit(PTR_DAT_08000c98_value,0);\n  decode_and_update_values(oven_ptr,1);\n  check_and_set_bit(PTR_DAT_08000c94_value,1);\n  interrupt_ptr = PTR_DAT_08000c9c;\n  decode_and_update_values(interrupt_ptr,8,2,0);\n  set_bits_and_check(interrupt_ptr,0,PTR_DAT_08000ca0);\n  set_bit_and_check_status(interrupt_ptr);\n  get_string_length(interrupt_ptr,PTR_s_Reflow_08000ca4);\n  set_bits_and_check(interrupt_ptr,0,1);\n  get_string_length(interrupt_ptr,PTR_s_Oven_1_2_08000ca8);\n  check_and_set_bit(PTR_DAT_08000c94_value,0);\n  do_nothing(0x9c4);\n  set_bit_and_check_status(interrupt_ptr);\n  set_param_values(PTR_DAT_08000cac,0xe100,6);\n  check_and_set_bit(oven_value,1);\n  *PTR_DAT_08000cb0 = 2000;\n  interrupt_data = get_data_and_return();\n  *PTR_DAT_08000cb4 = interrupt_data;\n  interrupt_data = get_data_and_return();\n  *PTR_DAT_08000cb8 = interrupt_data;\n  send_interrupt(0);\n}\n",
            "called": [
                "FUN_080013a4",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_080058e0",
                "FUN_08005a68",
                "FUN_08000aec",
                "FUN_08005848",
                "FUN_08001366",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "update_values_and_send_interrupt_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_value_at_address_0800281e",
                "*(int *)(param_1 + 0x10)": "*(int *)(address + 0x10)",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shift"
            },
            "code": "void set_value_at_address_0800281e(int address, int value, int shift) {\n  if (shift == 0) {\n    *(int *)(address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": true,
            "current_name": "set_value_at_address_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "run_all_functions_08006198",
                "cleanup_array_size": "cleanup_array_size",
                "iVar2": "function_array_size",
                "iVar3": "i",
                "puVar1": "function_array_start",
                "cleanup_array_start": "cleanup_array_start"
            },
            "code": "void run_all_functions_08006198(void)\n{\n  undefined *function_array_start = PTR_DAT_080061d0;\n  int function_array_size = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (int i = 0; i < function_array_size / 4; i++) {\n    (**(code **)(function_array_start + i * 4))();\n  }\n  do_nothing_08007328();\n  undefined *cleanup_array_start = PTR_DAT_080061d8;\n  int cleanup_array_size = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (int i = 0; i < cleanup_array_size / 4; i++) {\n    (**(code **)(cleanup_array_start + i * 4))();\n  }\n  return;\n}\n",
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": true,
            "current_name": "run_all_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "processReturnValue_08007048",
                "iVar2": "returnVal",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr"
            },
            "code": "void processReturnValue_08007048(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *ptr = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  int returnVal = returnZero(arg1, arg2, arg3, arg3, arg3);\n  if (returnVal == -1 && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": true,
            "current_name": "processReturnValue_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "uVar1": "shifted_value",
                "PTR_DAT_08003c6c": "index_array",
                "FUN_08003c50": "get_shifted_value_from_pointer_08003c50",
                "DAT_08003c68": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_08003c50() {\n  uint shifted_value = get_value_from_pointer();\n  uint index = (*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint shifted_index = PTR_DAT_08003c6c[ index ];\n  uint result = shifted_value >> shifted_index;\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": true,
            "current_name": "get_shifted_value_from_pointer_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "param_2[3]": "output_buffer[3]",
                "param_2[4]": "output_buffer[4]",
                "bVar4": "is_last_block",
                "iVar1": "result",
                "param_2[2]": "output_buffer[2]",
                "has_extra_data": "has_extra_data",
                "param_1": "input",
                "extra_data_length": "extra_data_length",
                "FUN_080065c0": "process_data_080065c0",
                "*param_3": "*output_length",
                "*param_2": "*output_buffer",
                "param_2": "output_buffer",
                "param_3": "output_length",
                "*(char *)((int)param_2 + 0x43)": "*(char *)((int)output_buffer + 0x43)",
                "param_4": "unused",
                "*(undefined *)((int)param_2 + uVar2 + 0x43)": "*(undefined *)((int)output_buffer + has_extra_data + 0x43)",
                "param_5": "callback_function",
                "*(undefined *)((int)param_2 + uVar2 + 0x44)": "*(undefined *)((int)output_buffer + has_extra_data + 0x44)",
                "uVar3": "current_output_length",
                "uVar2": "max_output_length"
            },
            "code": "int process_data_080065c0(uint32_t input, uint32_t *output_length, uint32_t *output_buffer, uint32_t unused, code *callback_function) {\\n  int status = 0;\\n  uint32_t max_output_length = output_buffer[4];\\n  if ((int)output_buffer[4] < (int)output_buffer[2]) {\\n    max_output_length = output_buffer[2];\\n  }\\n  *output_length = max_output_length;\\n  if (*(char *)((int)output_buffer + 0x43) != \"\\0\") {\\n    *output_length = max_output_length + 1;\\n  }\\n  if ((int)(*output_buffer << 0x1a) < 0) {\\n    *output_length = *output_length + 2;\\n  }\\n  uint32_t current_output_length = *output_buffer & 6;\\n  if (current_output_length == 0) {\\n    for (; (int)current_output_length < (int)(output_buffer[3] - *output_length); current_output_length++) {\\n      int result = (*callback_function)(input, unused, (int)output_buffer + 0x19, 1);\\n      if (result == -1) {\\n        return -1;\\n      }\\n    }\\n  }\\n  uint32_t has_extra_data = (uint32_t)*(byte *)((int)output_buffer + 0x43);\\n  if (has_extra_data != 0) {\\n    has_extra_data = 1;\\n  }\\n  uint32_t extra_data_length = has_extra_data;\\n  if ((int)(*output_buffer << 0x1a) < 0) {\\n    *(undefined *)((int)output_buffer + has_extra_data + 0x43) = 0x30;\\n    extra_data_length = has_extra_data + 2;\\n    *(undefined *)((int)output_buffer + has_extra_data + 0x44) = *(undefined *)((int)output_buffer + 0x45);\\n  }\\n  int result = (*callback_function)(input, unused, (int)output_buffer + 0x43, extra_data_length);\\n  if (result != -1) {\\n    uint32_t remaining_length = output_buffer[3];\\n    bool is_last_block = (*output_buffer & 6) != 4;\\n    if (is_last_block) {\\n      remaining_length = 0;\\n    }\\n    uint32_t processed_length = 0;\\n    if (!is_last_block) {\\n      remaining_length = remaining_length - *output_length;\\n    }\\n    if (!is_last_block) {\\n      remaining_length = remaining_length & ~((int)remaining_length >> 0x1f);\\n    }\\n    if ((int)output_buffer[4] < (int)output_buffer[2]) {\\n      remaining_length = remaining_length + (output_buffer[2] - output_buffer[4]);\\n    }\\n    while(processed_length != remaining_length) {\\n      int result = (*callback_function)(input, unused, (int)output_buffer + 0x1a, 1);\\n      if (result == -1) {\\n        return -1;\\n      }\\n      processed_length++;\\n    }\\n  }\\n  return status;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": true,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "iVar1": "is_flag_set",
                "param_1": "flag_value",
                "FUN_080054d4": "get_flag_value_080054d4",
                "param_2": "param_buffer",
                "param_3": "param_value_1",
                "param_4": "param_value_2"
            },
            "code": "int get_flag_value_080054d4(int flag_value, char* param_buffer, int param_value_1, int param_value_2) {\n  int is_flag_set = is_flag_set_0800548c();\n  if (flag_value == 0) {\n    return -1;\n  }\n  if (is_flag_set == 0) {\n    *param_buffer = *(char *)(flag_value + 0x45);\n    set_param_values_080045a2(*(int *)(PTR_DAT_0800550c + (uint)*(byte *)(flag_value + 0x44) * 4), flag_value + 0x45, 1, PTR_DAT_0800550c, param_value_2);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": true,
            "current_name": "get_flag_value_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n  while( true )\n  {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "puVar1[2]": "flags[2]",
                "*puVar1": "*flags",
                "DAT_08004d84": "flags",
                "puVar1[1]": "flags[1]",
                "DAT_08004d8c": "data",
                "puVar1": "flags",
                "FUN_08004d44": "set_flags_and_values_08004d44",
                "DAT_08004d88": "value"
            },
            "code": "void set_flags_and_values_08004d44(void)\n{\n  uint *DAT_08004d84 = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  DAT_08004d84[1] = DAT_08004d88 & DAT_08004d84[1];\n  *DAT_08004d84 &= 0xfef6ffff;\n  *DAT_08004d84 &= 0xfffbffff;\n  DAT_08004d84[1] &= 0xff80ffff;\n  DAT_08004d84[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": true,
            "current_name": "set_flags_and_values_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "dataPointer": "dataPointer",
                "param_1": "newData",
                "DAT_08002844": "dataAddress",
                "FUN_0800282c": "updateData_0800282c",
                "checkAndProcessData_080060e4": "checkAndProcessData"
            },
            "code": "void updateData_0800282c(uint newData) {\n  uint* dataPointer = (uint*)(DAT_08002844 + 0x14);\n  if ((*dataPointer & newData) != 0) {\n    *dataPointer = newData;\n    checkAndProcessData();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": true,
            "current_name": "updateData_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "iVar1": "is_bit_set",
                "check_and_set_bit_08005848": "set_bit",
                "param_1": "data",
                "DAT_08005890": "is_bit_set_in_data",
                "uVar3": "extracted_bits",
                "uVar2": "bit_index",
                "FUN_080015b2": "extract_bits_from_data_080015b2"
            },
            "code": "uint extract_bits_from_data_080015b2(uint8_t* data) {\n  int bit_index;\n  uint extracted_bits = 0;\n  set_bit(data[1], 0);\n  for (bit_index = 31; bit_index >= 0; bit_index--) {\n    set_bit(data[2], 1);\n    int is_bit_set = DAT_08005890(*data);\n    if (is_bit_set) {\n      extracted_bits |= 1 << (bit_index & 0xff);\n    }\n    set_bit(data[2], 0);\n  }\n  set_bit(data[1], 1);\n  return extracted_bits;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": true,
            "current_name": "extract_bits_from_data_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "iVar3": "leading_zero_bits",
                "uVar1": "left_shifted_input",
                "param_1": "input",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount_plus_0x15",
                "bVar6": "leading_zero_bits_equal_to_0",
                "bVar5": "leading_zero_bits_less_than_0",
                "FUN_0800040c": "count_leading_zero_bits_0800040c",
                "in_r12": "right_shift_amount",
                "bVar7": "shift_amount_plus_0x15_greater_than_or_equal_to_0"
            },
            "code": "ulonglong count_leading_zero_bits_0800040c(uint input) {\n  if (input == 0) {\n    return 0;\n  }\n  uint leading_zero_bits = count_leading_zeroes(input);\n  uint shift_amount = leading_zero_bits + 0x15;\n  uint right_shift_amount = 0x20 - shift_amount;\n  uint left_shift_amount = shift_amount - 0x20;\n  if ((int)shift_amount < 0x20) {\n    shift_amount = 0xc - leading_zero_bits;\n    return (ulonglong)(input << shift_amount) | (0U >> right_shift_amount) << right_shift_amount;\n  }\n  if (shift_amount < 0x433) {\n    return CONCAT44(input + (0x432 - shift_amount) * 0x100000, 0U << left_shift_amount);\n  }\n  uint shift_amount_complement = ~(0x432 - shift_amount);\n  if (shift_amount_complement > 0x1e) {\n    return (ulonglong)(input >> (shift_amount_complement - 0x1f));\n  }\n  int shift_amount_difference = shift_amount_complement - 0x13;\n  if (shift_amount_difference == 0 || shift_amount_difference < 0 != (shift_amount_complement - 0x1f < 0xc)) {\n    shift_amount_complement++;\n    return CONCAT44(input >> shift_amount_complement | 0U << left_shift_amount, 0U >> right_shift_amount | input << (0x20 - shift_amount_complement));\n  }\n  return (ulonglong)(0U >> (0x20 - (0xc - shift_amount_difference)) | input << (0xc - shift_amount_difference));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001918",
                "FUN_08000cd0",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": true,
            "current_name": "count_leading_zero_bits_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "value",
                "return": "result"
            },
            "code": "int subtract_four_08004df4(int value)\n{\n\tint result = value - 4;\n\treturn result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "imported": true,
            "current_name": "subtract_four_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "uVar1": "flag_value",
                "FUN_08004bb0": "decode_params_and_set_flags_08004bb0",
                "param_1": "bit_position",
                "DAT_08004c2c": "PTR_DAT_08004c2c",
                "local_1c": "param_2",
                "local_18": "param_3",
                "param_2": "param_3",
                "local_20": "bit_mask",
                "local_14": "param_1_subtracted",
                "DAT_08004c28": "PTR_DAT_08004c28"
            },
            "code": "void decode_params_and_set_flags_08004bb0(uint flag, uint bit_position, uint param_3)\n{\n  uint flag_value;\n  uint bit_mask;\n  uint param_1_mod;\n  uint param_1_subtracted;\n  uint param_1 = bit_position;\n  uint param_2 = param_3;\n  flag_value = set_flag_value(flag);\n  bit_mask = 1 << (param_1 & 0xf) & 0xffff;\n  param_1_mod = (param_1 << 0x18) >> 0x1c;\n  param_1_subtracted = param_1 - 0xd & 0xff;\n  *(uint *)(DAT_08004c28 + 0x18) |= 1;\n  if (param_1_subtracted < 2) {\n    *(uint *)(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(uint *)(DAT_08004c2c + 4) |= 0x4000000;\n  }\n  if ((param_1 == 0xf) || (param_1 == 0x13) || (param_1 == 0x14)) {\n    *(uint *)(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(uint *)(DAT_08004c2c + 4) |= 0x2000000;\n  }\n  decode_params(flag_value, bit_mask);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "decode_params_and_set_flags_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "iVar1": "callback_address",
                "subtract_four_08004df4": "subtract_four",
                "*(code **)(iVar1 + 0x4c)": "callback_function",
                "FUN_08004df8": "execute_callback_if_flag_set_08004df8",
                "param_1": "flag",
                "*(char *)(param_1 + 0x1c)": "flag_value"
            },
            "code": "void execute_callback_if_flag_set_08004df8(int flag){\n  int callback_address = subtract_four();\n  code* callback_function = *(code**)(callback_address + 0x4c);\n  char flag_value = *(char*)(flag + 0x1c);\n  if (callback_function != nullptr && flag_value == 0x01){\n    (*callback_function)(callback_address, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "execute_callback_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "set_bits_and_check_08001510",
                "param_1": "address",
                "param_6": "mask2",
                "param_7": "mask3",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "mask1"
            },
            "code": "undefined4* set_bits_and_check_08001510(undefined4 *address, undefined4 value1, undefined4 value2, undefined4 value3, undefined mask1, undefined mask2, undefined mask3) {\n  address[1] = 0;\n  *address = PTR_PTR_set_bits_and_check_08001510_0800134e_1_0800154c;\n  set_values_at_address_080014ba(address, 1, value1, 0xff, value2, value3, mask1, mask2, mask3, 0, 0, 0, 0);\n  return address;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": true,
            "current_name": "set_bits_and_check_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "input_ptr",
                "FUN_08002af8": "process_input_08002af8",
                "param_1": "input_data",
                "param_2": "data_size",
                "param_3": "num_elements",
                "param_4": "output_data"
            },
            "code": "int process_input_08002af8(uint **input_data, uint *data_size, int num_elements, uint *output_data)\n{\n  int result;\n  uint *input_ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (data_size == NULL) {\n      result = 1;\n    }\n    else if (num_elements == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      input_ptr = *input_data;\n      if ((*input_ptr & 1) == 0) {\n        *input_ptr = *input_ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x29;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      input_data[0x10] = NULL;\n      input_data[9] = data_size;\n      *(short *)((int)input_data + 0x2a) = (short)num_elements;\n      input_data[0xb] = output_data;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "process_input_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "param_1[0x14]": "param_14",
                "param_1": "input",
                "*(char *)((int)param_1 + 0x3e)": "at_sign",
                "FUN_080028de": "process_input_080028de",
                "*(char *)((int)param_1 + 0x3d)": "quote",
                "*(short *)((int)param_1 + 0x2a)": "short_val",
                "puVar1": "flag"
            },
            "code": "uint32_t process_input_080028de(uint32_t **input)\n{\n  uint32_t *flag = input[11];\n  uint8_t quote = *(uint8_t *)((int)input + 0x3d);\n  uint8_t at_sign = *(uint8_t *)((int)input + 0x3e);\n  uint32_t *param_14 = input[20];\n  uint16_t short_val = *(uint16_t *)((int)input + 0x2a);\n\n  if (quote == '\"' && (param_14 != NULL || at_sign != '@')) {\n    if (param_14 == NULL && input[4] == (uint32_t *)0xc000) {\n      **input |= 0x100;\n      input[20] = (uint32_t *)((int)param_14 + 1);\n    }\n    else {\n      if (short_val == 0) {\n        **input |= 0x200;\n      }\n      else if (short_val == 1) {\n        if (flag == (uint32_t *)0xffff0000) {\n          **input &= 0xfffffbff;\n          flag = *input;\n          if ((flag[1] & 0x800) == 0) {\n            *flag |= 0x200;\n          }\n          else {\n            *flag &= 0xfffffbff;\n          }\n        }\n        else if ((flag == (uint32_t *)0x4 || flag == (uint32_t *)0x8) || input[12] == (uint32_t *)0x12) {\n          **input &= 0xfffffbff;\n          **input |= 0x200;\n        }\n        else if (input[11] == (uint32_t *)0x2) {\n          **input |= 0x400;\n        }\n        else {\n          **input &= 0xfffffbff;\n        }\n      }\n      else if (short_val == 2) {\n        if (input[11] == (uint32_t *)0x2) {\n          **input |= 0x400;\n        }\n        else {\n          **input |= 0x800;\n          **input &= 0xfffffbff;\n        }\n        flag = *input;\n        if ((flag[1] & 0x800) != 0) {\n          flag[1] |= 0x1000;\n        }\n      }\n      else {\n        **input |= 0x400;\n        flag = *input;\n        if ((flag[1] & 0x800) != 0) {\n          flag[1] |= 0x1000;\n        }\n      }\n      input[20] = NULL;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "param_1[0x14]": "device_mode",
                "param_1": "device_info",
                "*(char *)((int)param_1 + 0x3e)": "device_type",
                "*(char *)((int)param_1 + 0x3d)": "device_status",
                "param_1[0x11]": "device_flags",
                "FUN_08002848": "get_device_status_08002848",
                "*(uint *)(*param_1 + 0x10)": "status"
            },
            "code": "uint8_t get_device_status_08002848(int* device_info) {\n    uint8_t status = 0;\n    char device_type = *(char*)(device_info + 0x3e);\n    uint16_t device_flags = device_info[0x11];\n    if (device_type == '@') {\n        if (device_info[0x14] == 0) {\n            status = device_flags & 0xfe;\n        }\n        else {\n            status = device_flags & 0xffU | 1;\n        }\n    }\n    else if (device_info[4] == 0x4000) {\n        char device_status = *(char*)(device_info + 0x3d);\n        if (device_status == '!') {\n            status = device_flags & 0xfe;\n        }\n        else {\n            status = device_flags & 0xffU | 1;\n        }\n    }\n    else if (device_info[0x14] == 0) {\n        status = (device_flags << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (device_info[0x14] == 1) {\n        status = (device_flags << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "get_device_status_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "param_1": "input_num",
                "FUN_08004e70": "subtract_four_from_input_08004e70",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08004e70(int input_num) {\n  int result = input_num - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "subtract_four_from_input_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "DATA_FLAG_OFFSET": "8",
                "iVar1": "current_data",
                "iVar2": "data_ptr_value",
                "param_1": "data_ptr",
                "*(uint *)(*param_1 + 8)": "*(uint *)(*data_ptr + DATA_FLAG_OFFSET)",
                "param_1[10]": "data_ptr[DATA_OFFSET_10]",
                "FUN_080020f0": "update_data_if_possible_080020f0",
                "DATA_OFFSET_11": "0xb",
                "DATA_OFFSET_10": "10",
                "param_1[0xb]": "data_ptr[DATA_OFFSET_11]",
                "*(uint *)(iVar2 + 8)": "*(uint *)(data_ptr_value + DATA_FLAG_OFFSET)",
                "DATA_FLAG_10": "0x10",
                "get_data_from_pointer_08001cc4": "get_data_from_pointer",
                "DATA_FLAG_11": "1"
            },
            "code": "int update_data_if_possible_080020f0(int *data_ptr)\n{\n  int data_ptr_value = *data_ptr;\n  if ((*(uint *)(data_ptr_value + DATA_FLAG_OFFSET) & DATA_FLAG_11) == 0) {\n    return 0;\n  }\n  *(uint *)(data_ptr_value + DATA_FLAG_OFFSET) = *(uint *)(data_ptr_value + DATA_FLAG_OFFSET) & 0xfffffffe;\n  int initial_data = get_data_from_pointer();\n  do {\n    if ((*(uint *)(*data_ptr + DATA_FLAG_OFFSET) & DATA_FLAG_11) == 0) {\n      return 0;\n    }\n    int current_data = get_data_from_pointer();\n  } while ((uint)(current_data - initial_data) < 3);\n  data_ptr[DATA_OFFSET_DATA_OFFSET_DATA_FLAG_110] = data_ptr[DATA_OFFSET_DATA_OFFSET_DATA_FLAG_110] | DATA_FLAG_DATA_OFFSET_DATA_FLAG_110;\n  data_ptr[DATA_OFFSET_DATA_FLAG_11DATA_FLAG_11] = data_ptr[DATA_OFFSET_DATA_FLAG_11DATA_FLAG_11] | DATA_FLAG_DATA_FLAG_11DATA_FLAG_11;\n  return DATA_FLAG_11;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "imported": true,
            "current_name": "update_data_if_possible_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "iVar2": "allocated_size",
                "uVar1": "permissions",
                "param_1": "process_id",
                "local_18": "original_size",
                "FUN_08006e10": "allocate_memory_and_set_permissions_08006e10",
                "param_2": "memory_block",
                "local_14": "original_memory_block"
            },
            "code": "void allocate_memory_and_set_permissions_08006e10(int process_id, int *memory_block)\n{\n  ushort permissions;\n  int allocated_size;\n  int original_size;\n  int *original_memory_block;\n\n  if ((uint)*(ushort *)(memory_block + 3) << 0x1e > 0xffffffff80000000) {\n    permissions = check_permissions_and_set_08006dc8(process_id, memory_block, &allocated_size, &original_memory_block);\n    allocated_size = allocate_memory_block_08006288(process_id, allocated_size);\n    if (allocated_size != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *memory_block = allocated_size;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_size;\n      memory_block[5] = original_size;\n      if ((original_memory_block != (int *)0x0) && (process_integer_08007028(process_id, *(short *)((int)memory_block + 0xe)) != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = permissions | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08007028",
                "FUN_08006dc8",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": true,
            "current_name": "allocate_memory_and_set_permissions_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "iVar1": "result",
                "param_1": "input_address",
                "param_2": "input_flag",
                "FUN_08004e74": "process_input_08004e74",
                "param_3": "input_value",
                "param_4": "input_param"
            },
            "code": "void process_input_08004e74(int input_address, int input_flag, int input_value, undefined4 input_param)\n{\n  int result = subtract_four_from_input();\n  if (input_value == *(int *)(input_address + 0xc)) {\n    if (input_flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      process_input_08004e74_08002af8(input_address,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    process_input_08004e74_08002b84(input_address,result + 0x68,0x20,8,input_param);\n  }\n  return;\n}",
            "called": [
                "FUN_08002af8",
                "FUN_08002b84",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": true,
            "current_name": "process_input_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "param_1": "address",
                "param_2": "value",
                "param_3": "param",
                "param_4": "param_4",
                "FUN_08004c30": "set_value_at_address_if_param_not_zero_08004c30"
            },
            "code": "void set_value_at_address_if_param_not_zero_08004c30(int* address, short* value, int param, int* param_4) {\n  if (param == 0) {\n    set_value_at_address_0800281e(address, value, 0, param_4, param_4);\n    return;\n  }\n  set_value_at_address_0800281e(address, value, 1, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": true,
            "current_name": "set_value_at_address_if_param_not_zero_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "iVar1": "data_processed",
                "bVar3": "is_data_processed_successfully",
                "param_1": "data",
                "param_2": "counter_data",
                "FUN_08006f38": "process_data_and_update_counters_08006f38",
                "uVar2": "updated_counter_value"
            },
            "code": "void process_data_and_update_counters_08006f38(int data, int counter_data) {\n  int data_processed = process_data(data, (int)*(short *)(counter_data + 0xe));\n  bool is_data_processed_successfully = data_processed >= 0;\n  uint updated_counter_value;\n  if (is_data_processed_successfully) {\n    updated_counter_value = *(int *)(counter_data + 0x54) + data_processed;\n  }\n  else {\n    updated_counter_value = *(ushort *)(counter_data + 0xc) & 0xffffefff;\n  }\n  if (is_data_processed_successfully) {\n    *(uint *)(counter_data + 0x54) = updated_counter_value;\n  }\n  if (!is_data_processed_successfully) {\n    *(short *)(counter_data + 0xc) = (short)updated_counter_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": true,
            "current_name": "process_data_and_update_counters_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "uVar1": "value",
                "param_1": "input",
                "find_value_in_list_08004cb2": "find_value_in_list",
                "FUN_08004cce": "find_value_or_return_minus_one_08004cce"
            },
            "code": "int find_value_or_return_minus_one_08004cce(int input) {\n  if (input == -1) {\n    return -1;\n  }\n  int value = find_value_in_list();\n  return value;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_0800492c",
                "FUN_08004f4c",
                "FUN_08004b3c",
                "FUN_08004948"
            ],
            "imported": true,
            "current_name": "find_value_or_return_minus_one_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": true,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": true,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "iVar2": "start_time",
                "FUN_08003ad4": "calculate_result_and_write_bits_08003ad4",
                "iVar3": "current_time",
                "param_1": "params",
                "calculate_result_08003a68": "calculate_result",
                "param_2": "num_params",
                "PTR_DAT_08003c40": "PTR_output_data",
                "puVar1": "param_ptr",
                "PTR_DAT_08003c3c": "PTR_output_data_shift",
                "get_data_from_pointer_08001cc4": "get_current_time",
                "uVar4": "uVar",
                "DAT_08003c34": "DAT_input_params",
                "DAT_08003c38": "DAT_output_params"
            },
            "code": "uint calculate_result_and_write_bits_08003ad4(uint *params, uint num_params)\n{\n  uint *param_ptr = DAT_08003c34;\n  uint num_bits = *DAT_08003c34 & 7;\n  if(num_bits < num_params && num_params != (*param_ptr & 7))\n  {\n    return 1;\n  }\n  if((*params & 2) != 0)\n  {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | params[2];\n  }\n  if((*params & 1) != 0)\n  {\n    uint uVar = params[1];\n    if(uVar == 1)\n    {\n      if((*DAT_08003c38 & 0x20000) == 0)\n      {\n        return 1;\n      }\n    }\n    else if(uVar != 2 && (*DAT_08003c38 & 2) == 0)\n    {\n      return 1;\n    }\n    DAT_08003c38[1] = uVar | DAT_08003c38[1] & 0xfffffffc;\n    int start_time = get_current_time();\n    while(uVar != 1 ? (uVar != 2 ? (DAT_08003c38[1] & 0xc) != 0 : (DAT_08003c38[1] & 0xc) != 8) : (DAT_08003c38[1] & 0xc) != 4)\n    {\n      int current_time = get_current_time();\n      if(current_time - start_time > 5000)\n      {\n        return 3;\n      }\n    }\n  }\n  param_ptr = DAT_08003c34;\n  num_bits = *DAT_08003c34 & 7;\n  if(num_params < num_bits && num_params != (*param_ptr & 7))\n  {\n    return 1;\n  }\n  if((*params & 4) != 0)\n  {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | params[3];\n  }\n  if((*params & 8) != 0)\n  {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | params[4] << 3;\n  }\n  uint result = calculate_result();\n  *(uint *)PTR_DAT_08003c40 = result >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  write_bits_to_memory(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "calculate_result_and_write_bits_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_value_at_offset_08004110",
                "param_1": "base_address",
                "uint": "uint32_t",
                "&~(4 << (param_2 & 0xff))": "~(4 << (offset & 0xff))",
                "| param_3 << (param_2 & 0xff)": "| (value << (offset & 0xff))",
                "param_2": "offset",
                "param_3": "value",
                "*(uint *)": "*(uint32_t *)",
                "&(param_1 + 0x20)": "(base_address + 0x20)"
            },
            "code": "void update_value_at_offset_08004110(uint8_t* base_address, uint8_t offset, uint32_t value) {\n  uint32_t* target_address = (uint32_t*)(base_address + 0x20);\n  uint32_t mask = ~(4 << (offset & 0xff));\n  *target_address = (*target_address & mask) | (value << (offset & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": true,
            "current_name": "update_value_at_offset_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "find_value_in_string_08004ce2",
                "param_1": "value",
                "param_2": "string"
            },
            "code": "int find_value_in_string_08004ce2(int value, char *string)\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*string == -1) {\n      return 0;\n    }\n    if (value == *string) break;\n    string = string + 0xc;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "find_value_in_string_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "bVar1": "index",
                "*(char *)(param_1 + 0x5a)": "*(char *)(data_ptr + 0x5a)",
                "*(undefined4 *)(PTR_DAT_080055b0 + (uint)bVar1 * 4)": "*(undefined4 *)(param_array_ptr + (uint)index * 4)",
                "FUN_08005568": "process_data_08005568",
                "PTR_DAT_080055b4": "data_ptr_array_ptr",
                "param_1": "data_ptr",
                "write_bits_to_memory_08002494": "write_bits_to_memory",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(data_ptr + 0x44)",
                "*(int *)(param_1 + 100)": "*(int *)(data_ptr + 100)",
                "param_2": "data_value",
                "PTR_DAT_080055b0": "param_array_ptr",
                "*(ushort *)(param_1 + 0x6a)": "*(ushort *)(data_ptr + 0x6a)",
                "*(int *)(PTR_DAT_080055b4 + (uint)bVar1 * 4)": "*(int *)(data_ptr_array_ptr + (uint)index * 4)",
                "set_bit_in_array_080024f8": "set_bit_in_array",
                "set_param_values_0800455a": "set_param_values",
                "*(undefined4 *)(PTR_DAT_080055b8 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(undefined4 *)(param_value_array_ptr + (uint)*(byte *)(data_ptr + 0x44) * 4)"
            },
            "code": "void process_data_08005568(int data_ptr, int data_value) {\n  if (data_ptr != 0) {\n    int index = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_080055b0 + (uint)bVar1 * 4) = data_value;\n    *(int *)(PTR_DAT_080055b4 + (uint)bVar1 * 4) = data_ptr;\n    write_bits_to_memory((int)*(char *)(data_ptr + 0x5a), 0, 2);\n    set_bit_in_array((int)*(char *)(data_ptr + 0x5a));\n    set_param_values(*(undefined4 *)(PTR_DAT_080055b8 + (uint)*(byte *)(param_1 + 0x44) * 4), *(int *)(data_ptr + 100) + (uint)*(ushort *)(data_ptr + 0x6a), 1);\n  }\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "iVar2": "status",
                "uVar1": "data_from_pointer",
                "FUN_08004478": "parse_data_08004478",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_len"
            },
            "code": "int parse_data_08004478(int *data_ptr, ushort *data, int data_len, undefined4 param_4) {\n  undefined4 uVar1;\n  int status;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data == (ushort *)0x0 || data_len == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data_from_pointer_08001cc4();\n      *(short *)(data_ptr + 9) = (short)data_len;\n      *(short *)((int)data_ptr + 0x26) = (short)data_len;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          status = check_params(data_ptr,0x80,0,uVar1,param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          status = check_params(data_ptr,0x80,0,uVar1,param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      status = check_params(data_ptr,0x40,0,uVar1,param_4);\n      if (status == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": true,
            "current_name": "parse_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "updateValue_08002470": "update_value",
                "FUN_08005f5e": "update_value_and_bits_08005f5e",
                "initialize_and_update_value_bits_08001c32": "initialize_and_update_bits"
            },
            "code": "void update_value_and_bits_08005f5e(void)\n{\n  update_value(3);\n  initialize_and_update_bits();\n  return;\n}",
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": true,
            "current_name": "update_value_and_bits_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "param_1": "function_pointer",
                "FUN_08005cb6": "execute_function_pointer_08005cb6"
            },
            "code": "void execute_function_pointer_08005cb6(void *function_pointer) {\n  (*(void (*)())function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005d42",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "PTR_DAT_08003c8c": "pointer_array",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "uVar1": "shifted_value",
                "FUN_08003c70": "get_shifted_value_from_pointer_08003c70",
                "DAT_08003c88": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_08003c70(void)\n{\n  uint shifted_value = get_value_from_pointer();\n  uint index = (*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  uint shifted_value_with_index = shifted_value >> PTR_DAT_08003c8c[index];\n  return shifted_value_with_index;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08003da4",
                "FUN_08004204"
            ],
            "imported": true,
            "current_name": "get_shifted_value_from_pointer_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "iVar2": "data_start",
                "iVar3": "occurrence",
                "param_1": "data_pointer",
                "param_2": "param_2",
                "FUN_080053d4": "parse_data_and_get_param_080053d4",
                "cVar1": "character",
                "uVar4": "i"
            },
            "code": "uint parse_data_and_get_param_080053d4(undefined4 data_pointer, uint param_2)\n{\n  int data_start = get_data_from_pointer();\n  char character = second_char_of_PTR_0800547c;\n  int occurrence = find_occurrence_if_not_negative((int)character, PTR_DAT_08005480);\n  if (occurrence == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_08005484 + i * 4) == 0 || (occurrence = find_occurrence_if_not_negative((int)character, PTR_DAT_08005480), **(int **)(PTR_DAT_08005484 + i * 4) != occurrence))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_08005488[0x44]) && (process_character_08005384(), 4 < (byte)PTR_DAT_08005488[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_08005488[0x44];\n  }\n  do {\n    occurrence = parse_data_08004478(*(undefined4 *)(PTR_DAT_08005484 + i * 4), data_pointer, param_2 & 0xffff, 1000);\n    if (occurrence == 0) {\n      return param_2;\n    }\n    occurrence = get_data_from_pointer();\n  } while ((uint)(occurrence - data_start) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08001cc4",
                "FUN_08004478",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": true,
            "current_name": "parse_data_and_get_param_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "data_ptr",
                "param_1": "input_ptr",
                "param_2": "size_ptr",
                "param_3": "size",
                "FUN_08002b84": "process_input_08002b84",
                "param_4": "output_ptr"
            },
            "code": "int process_input_08002b84(uint **input_ptr, uint *size_ptr, int size, uint *output_ptr) {\n  int result;\n  uint *data_ptr;\n  if (*((*input_ptr) + 0x3d) == '(') {\n    if (size_ptr == NULL) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*((*input_ptr) + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *((undefined *)(*input_ptr + 0xf)) = 1;\n      data_ptr = *input_ptr;\n      if ((*data_ptr & 1) == 0) {\n        *data_ptr |= 1;\n      }\n      **input_ptr &= 0xfffff7ff;\n      *((undefined *)(*input_ptr + 0x3d)) = 0x2a;\n      *((undefined *)(*input_ptr + 0x3e)) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = size_ptr;\n      *((short *)(*input_ptr + 0x2a)) = (short)size;\n      input_ptr[0xb] = output_ptr;\n      *((undefined2 *)(input_ptr + 10)) = *((undefined2 *)(*input_ptr + 0x2a));\n      *((undefined *)(*input_ptr + 0xf)) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "process_input_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "param_1": "bit_array_start",
                "check_bit_08002810": "check_bit",
                "param_2": "bit_index",
                "param_3": "bit_array_size",
                "param_4": "bit_array_end",
                "FUN_08004c48": "check_bit_wrapper_08004c48"
            },
            "code": "void check_bit_wrapper_08004c48(undefined4 bit_array_start, undefined2 bit_index, undefined4 bit_array_size, undefined4 bit_array_end)\n{\n  check_bit(bit_array_start, bit_index, bit_array_size, bit_array_end, bit_array_end);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": true,
            "current_name": "check_bit_wrapper_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "uVar1": "high_bits",
                "iVar4": "leading_zeroes",
                "param_1": "value",
                "uVar3": "shift_amount",
                "uVar2": "abs_value",
                "bVar9": "is_overflow",
                "uVar5": "shift_amount2",
                "FUN_0800042c": "calculate_shifted_value_0800042c",
                "uVar6": "sign_bit",
                "in_r12": "unused",
                "bVar8": "is_zero",
                "bVar7": "is_negative"
            },
            "code": "ulonglong calculate_shifted_value_0800042c(uint value) {\n  int count = 0;\n  while (value >>= 1) {\n    ++count;\n  }\n  return 31 - count;\n}\n\nulonglong calculate_shifted_value_0800042c(uint value) {\n  uint sign_bit = value & 0x80000000;\n  uint abs_value = value;\n  if ((int)sign_bit < 0) {\n    abs_value = -value;\n  }\n  if (abs_value == 0) {\n    return 0;\n  }\n  int leading_zeroes = calculate_shifted_value_0800042c(abs_value);\n  uint shift_amount = leading_zeroes + 0x15;\n  if (shift_amount < 0x20) {\n    uint high_bits = abs_value << (shift_amount & 0xff);\n    uint low_bits = abs_value >> (0xcU - leading_zeroes & 0xff);\n    return CONCAT44(high_bits | sign_bit, low_bits);\n  }\n  uint shift_amount2 = shift_amount - 0x20;\n  if (shift_amount2 > 0x1e) {\n    return CONCAT44(sign_bit | value, abs_value >> (shift_amount2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount3 = shift_amount2 - 0x13;\n  if (shift_amount3 != 0 && (shift_amount3 < 0 || shift_amount3 - 0x1f > 0xb)) {\n    return CONCAT44(sign_bit | abs_value >> (shift_amount2 & 0xff), abs_value << (0x20 - shift_amount2 & 0xff)) & 0x80000000ffffffff;\n  }\n  shift_amount2 = shift_amount2 + 1;\n  return CONCAT44(sign_bit | abs_value >> (shift_amount2 & 0xff), abs_value << (0x20 - shift_amount2 & 0xff) | 0 << (shift_amount2 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08001918",
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "update_and_send_interrupt_08005f6c",
                "update_values_and_send_interrupt_08000bcc": "update_values",
                "FUNC_08000cd0": "do_nothing",
                "PTR_08005a18": "calculate_offset",
                "DAT_08005f88": "memory_address_check",
                "do_nothing_08005f5c": "do_nothing"
            },
            "code": "void update_and_send_interrupt_08005f6c(void)\n{\n  do_nothing();\n  update_values();\n  while(true)\n  {\n    while(DAT_08005f88() == 0);\n    PTR_08005a18();\n  }\n}",
            "called": [
                "FUN_08005f5c",
                "FUN_08005a18",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": true,
            "current_name": "update_and_send_interrupt_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_pointer_08005cc0",
                "param_1": "function_pointer",
                "param_2": "data_pointer",
                "param_3": "data",
                "param_4": "code_pointer"
            },
            "code": "void execute_function_pointer_08005cc0(int *function_pointer, int *data_pointer, int data, int *code_pointer, int param_4) {\n  (**(code **)(*function_pointer + 4))(function_pointer, data_pointer, data, *(code **)(*function_pointer + 4), param_4);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "imported": true,
            "current_name": "execute_function_pointer_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "iVar2": "result",
                "FUN_0800706c": "process_data_0800706c",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_ptr"
            },
            "code": "void process_data_0800706c(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *data_ptr = PTR_DAT_0800708c;\n  *(undefined4 *)data_ptr = 0;\n  int result = calculate_data_0800572c(input1, input2, input3, input3, input3);\n  if ((result == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": true,
            "current_name": "process_data_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "iVar8": "var8",
                "param_1": "params",
                "iVar10": "var10",
                "FUN_08002624": "decode_params_08002624",
                "param_2": "flags",
                "puVar1": "param_ptr",
                "uVar3": "var3",
                "uVar2": "var2",
                "uVar5": "var5",
                "uVar4": "var4",
                "uVar7": "var7",
                "uVar6": "var6",
                "uVar9": "var9"
            },
            "code": "void decode_params_08002624(uint *params, uint *flags) {\n  uint *param_ptr;\n  uint flag_bit;\n  uint flag_value;\n  uint output_value;\n  uint i;\n  uint flag_index;\n  int var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  int var8;\n  uint var9;\n  int var10;\n\n  output_value = 0;\n  i = 0;\n  do {\n    if (i > 0xf) {\n      return;\n    }\n    flag_bit = 1 << (i & 0xff);\n    flag_value = *flags & flag_bit;\n    if (flag_bit == flag_value) {\n      flag_index = flags[1];\n      if (flag_index == 0x12) {\n        output_value = flags[3] + 0xc;\n      }\n      else if (flag_index < 0x13) {\n        if (flag_index == 2) {\n          output_value = flags[3] + 8;\n        }\n        else if (flag_index < 3) {\n          if (flag_index == 0) goto LAB_08002776;\n          if (flag_index == 1) {\n            output_value = flags[3];\n          }\n        }\n        else if (flag_index == 3) {\n          output_value = 0;\n        }\n        else if (flag_index == 0x11) {\n          output_value = flags[3] + 4;\n        }\n      }\n      else {\n        if (flag_index != PTR_DAT_08002804) {\n          if (PTR_DAT_08002804 < flag_index) {\n            if (flag_index == PTR_DAT_08002808) goto LAB_08002776;\n            var9 = PTR_DAT_08002808 + 0x10000;\n            var2 = PTR_DAT_08002808;\n          }\n          else {\n            var9 = PTR_DAT_08002804 - 0x100000;\n            var2 = PTR_DAT_08002804;\n          }\n          if ((flag_index != var9) && (flag_index != var2 - 0xf0000)) goto LAB_0800263a;\n        }\n      }\nLAB_08002776:\n      if (flags[2] == 0) {\n        output_value = 4;\n      }\n      else if (flags[2] == 1) {\n        params[4] = flag_bit;\n        output_value = 8;\n      }\n      else {\n        params[5] = flag_bit;\n        output_value = 8;\n      }\n    }\n    flag_bit = i;\n    param_ptr = params;\n    if (0xff < flag_value) {\n      flag_bit = i - 8;\n      param_ptr = params + 1;\n    }\n    *param_ptr = *param_ptr & ~(0xf << (flag_bit << 2 & 0xff)) | output_value << (flag_bit << 2 & 0xff);\n    if ((flags[1] & 0x10000000) != 0) {\n      *(uint *)(PTR_DAT_080027f8 + 0x18) = *(uint *)(PTR_DAT_080027f8 + 0x18) | 1;\n      var8 = (i & 3) << 2;\n      if (param_ptr == PTR_DAT_0800280c) {\n        var10 = 0;\n      }\n      else if (param_ptr == PTR_DAT_0800280c + 0x100) {\n        var10 = 1;\n      }\n      else if (param_ptr == PTR_DAT_0800280c + 0x200) {\n        var10 = 2;\n      }\n      else if (param_ptr == PTR_DAT_0800280c + 0x300) {\n        var10 = 3;\n      }\n      else {\n        var10 = 4;\n      }\n      *(uint *)(PTR_DAT_080027fc + ((i >> 2) + 2) * 4) =\n           *(uint *)(PTR_DAT_080027fc + ((i >> 2) + 2) * 4) & ~(0xf << var8) | var10 << var8;\n      if ((flags[1] & 0x10000) == 0) {\n        *PTR_DAT_08002800 = *PTR_DAT_08002800 & ~flag_value;\n      }\n      else {\n        *PTR_DAT_08002800 = *PTR_DAT_08002800 | flag_value;\n      }\n      if ((flags[1] & 0x20000) == 0) {\n        PTR_DAT_08002800[1] = PTR_DAT_08002800[1] & ~flag_value;\n      }\n      else {\n        PTR_DAT_08002800[1] = PTR_DAT_08002800[1] | flag_value;\n      }\n      if ((flags[1] & 0x100000) == 0) {\n        PTR_DAT_08002800[2] = PTR_DAT_08002800[2] & ~flag_value;\n      }\n      else {\n        PTR_DAT_08002800[2] = PTR_DAT_08002800[2] | flag_value;\n      }\n      if ((flags[1] & 0x200000) == 0) {\n        PTR_DAT_08002800[3] = PTR_DAT_08002800[3] & ~flag_value;\n      }\n      else {\n        PTR_DAT_08002800[3] = flag_value | PTR_DAT_08002800[3];\n      }\n    }\n    i = i + 1;\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004f4c",
                "FUN_08004bb0",
                "FUN_08004974"
            ],
            "imported": true,
            "current_name": "decode_params_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "param_1": "bits_array",
                "FUN_080040b0": "set_and_clear_bits_080040b0",
                "param_2": "bit_position",
                "puVar1": "bits_ptr"
            },
            "code": "int set_and_clear_bits_080040b0(uint **bits_array, uint bit_position)\n{\n  uint *bits_ptr = *bits_array;\n  set_bit(bits_ptr, bit_position, 0);\n  if (((bits_ptr == bits_array[0x10]) && ((bits_ptr[0x8] & 0x1111) == 0)) && ((bits_ptr[0x8] & 0x444) == 0)) {\n    bits_ptr[0x11] &= 0xffff7fff;\n  }\n  if (((bits_ptr[0x8] & 0x1111) == 0) && ((bits_ptr[0x8] & 0x444) == 0)) {\n    *bits_ptr &= 0xfffffffe;\n  }\n  *(char *)((int)bits_array + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "set_and_clear_bits_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "convert_base_08005ce8": "convert_base",
                "iVar1": "result",
                "iVar2": "negative_sign",
                "execute_function_pointer_08005cb6": "execute_function_pointer",
                "param_1": "function_pointer",
                "FUN_08005d42": "convert_input_to_output_08005d42",
                "param_2": "input_value",
                "param_3": "output_base"
            },
            "code": "int convert_input_to_output_08005d42(undefined4 *function_pointer, uint input_value, uint output_base) {\n  int result;\n  int negative_sign;\n  \n  if (output_base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer, input_value & 0xff);\n    return result;\n  }\n  if (output_base != 10) {\n    result = convert_base(function_pointer, input_value, output_base & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_value) {\n    result = convert_base(function_pointer, input_value, 10);\n    return result;\n  }\n  negative_sign = execute_function_pointer(function_pointer, 0x2d);\n  result = convert_base(function_pointer, -input_value, 10);\n  return result + negative_sign;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": true,
            "current_name": "convert_input_to_output_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "update_flags_08004d90": "update_flags",
                "FUN_08004b34": "update_flags_and_return_08004b34"
            },
            "code": "void update_flags_and_return_08004b34(void)\n{\n  update_flags();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": true,
            "current_name": "update_flags_and_return_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "set_flag_update_value_write_bits_and_do_nothing_08001c88": "set_flag_update_value_write_bits_and_do_nothing",
                "FUN_08004c52": "initialize_system_and_update_value_bits_08004c52",
                "initialize_system_08001b48": "initialize_system"
            },
            "code": "void initialize_system_and_update_value_bits_08004c52(void)\n{\n  set_flag_update_value_write_bits_and_do_nothing();\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": true,
            "current_name": "initialize_system_and_update_value_bits_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "iVar1": "bit_mask",
                "decode_and_update_values_080057b4": "decode_and_update_values",
                "iVar2": "data_index",
                "set_bits_and_check_080012c0": "set_bits_and_check",
                "set_parameters_08001294": "set_parameters",
                "check_and_set_bit_08005848": "check_and_set_bit",
                "set_bits_and_check_0800138e": "set_bits_and_check",
                "param_1": "data_start",
                "set_bits_and_check_08001310": "set_bits_and_check",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_end",
                "set_bit_and_check_status_0800135a": "set_bit_and_check_status",
                "FUN_080013a4": "decode_and_update_values_080013a4"
            },
            "code": "void decode_and_update_values_080013a4(int data_start, int param_2, int param_3, int data_end) {\n  int bit_mask;\n  int data_index;\n  int data_value;\n  if (param_3 > 1) {\n    *(byte *)(data_start + 0x13) = *(byte *)(data_start + 0x13) | 8;\n  }\n  *(char *)(data_start + 0x17) = (char)param_3;\n  set_parameters(data_start, 0, 0x40, param_2, param_2 + 0x40);\n  if ((data_end != 0) && (param_3 == 1)) {\n    *(byte *)(data_start + 0x13) = *(byte *)(data_start + 0x13) | 4;\n  }\n  decode_and_update_values_080013a4_080057b4(*(undefined *)(data_start + 8), 1);\n  if (*(char *)(data_start + 9) != -1) {\n    decode_and_update_values_080013a4_080057b4(*(char *)(data_start + 9), 1);\n  }\n  decode_and_update_values_080013a4_080057b4(*(undefined *)(data_start + 10), 1);\n  data_index = 0xb;\n  while (true) {\n    if ((*(byte *)(data_start + 0x13) & 0x10) == 0) {\n      bit_mask = 4;\n    }\n    else {\n      bit_mask = 8;\n    }\n    if (bit_mask <= data_index) break;\n    decode_and_update_values_080013a4_080057b4(*(undefined *)(data_start + data_index), 1);\n    data_index++;\n  }\n  check_and_set_bit(*(undefined *)(data_start + 8), 0);\n  check_and_set_bit(*(undefined *)(data_start + 10), 0);\n  if (*(char *)(data_start + 9) != -1) {\n    check_and_set_bit(*(char *)(data_start + 9), 0);\n  }\n  if ((*(byte *)(data_start + 0x13) & 0x10) == 0) {\n    set_bits_and_check(data_start, 3);\n    set_bits_and_check(data_start, 3);\n    set_bits_and_check(data_start, 3);\n    set_bits_and_check(data_start, 2);\n  }\n  else {\n    set_bits_and_check(data_start, *(byte *)(data_start + 0x13) | 0x20, 0);\n    set_bits_and_check(data_start, *(byte *)(data_start + 0x13) | 0x20, 0);\n    set_bits_and_check(data_start, *(byte *)(data_start + 0x13) | 0x20, 0);\n  }\n  set_bits_and_check(data_start, *(byte *)(data_start + 0x13) | 0x20, 0);\n  *(undefined *)(data_start + 0x14) = 4;\n  set_bits_and_check(data_start);\n  set_bit_and_check_status(data_start);\n  *(undefined *)(data_start + 0x15) = 2;\n  set_bits_and_check(data_start, 6, 0);\n  return;\n}",
            "called": [
                "FUN_08001310",
                "FUN_0800138e",
                "FUN_080012c0",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_08001294",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "decode_and_update_values_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "iVar3": "array_header_ptr",
                "piVar2": "next_array",
                "param_1": "array_ptr",
                "piVar1": "current_array",
                "param_2": "N/A",
                "param_3": "N/A",
                "param_4": "fill_value",
                "FUN_08006d14": "reset_array_08006d14",
                "ppiVar4": "next_array_ptr"
            },
            "code": "int* reset_array_08006d14(int* array_ptr, int fill_value) {\n  int* current_array;\n  int* next_array;\n  int array_header_ptr = *(int*)PTR_PTR_DAT_08006d88;\n  if (*(int*)(array_header_ptr + 0x18) == 0) {\n    initialize_data_08006cb4(array_header_ptr);\n  }\n  next_array = (int*)(array_header_ptr + 0x48);\n  do {\n    current_array = next_array[2];\n    next_array = next_array[1];\n    while (current_array = (int*)((int)current_array - 1), -1 < (int)current_array) {\n      if (*(short*)(current_array + 3) == 0) {\n        *(undefined2*)((int)current_array + 0xe) = 0xffff;\n        current_array[0x19] = 0;\n        *(undefined2*)(current_array + 3) = 1;\n        *current_array = 0;\n        current_array[2] = 0;\n        current_array[1] = 0;\n        current_array[4] = 0;\n        current_array[5] = 0;\n        current_array[6] = 0;\n        fill_array_with_value_080061e0(current_array + 0x17, 0, 8, 1, fill_value);\n        current_array[0xd] = 0;\n        current_array[0xe] = 0;\n        current_array[0x12] = 0;\n        current_array[0x13] = 0;\n        return current_array;\n      }\n      current_array += 0x1a;\n    }\n    if (next_array == (int*)0x0) {\n      current_array = (int*)allocate_and_initialize_array_08006c88(array_ptr, 4);\n      next_array = (int**)array_ptr;\n      *next_array = current_array;\n      if (current_array == (int*)0x0) {\n        *array_ptr = 0xc;\n        return (int*)0x0;\n      }\n    }\n  } while (true);\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_080061e0",
                "FUN_08006c88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": true,
            "current_name": "reset_array_08006d14",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_array_08006c88(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08001918",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": true,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 210801,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08000178",
            "FUN_0800258c",
            "FUN_0800573c",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_08002f9c",
            "FUN_08005750",
            "FUN_08002ab8",
            "FUN_08002c54",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08002810",
            "FUN_08004cb2",
            "FUN_08001294",
            "FUN_08002ad8",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08005b3c",
            "FUN_08004c8a",
            "FUN_08002ca6",
            "FUN_080045a2",
            "FUN_080047e8",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_080008ba",
            "FUN_08005714",
            "FUN_08005a44",
            "FUN_0800417c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080024f8",
            "FUN_08004198",
            "FUN_08000a2c",
            "FUN_08000ae8",
            "FUN_080061e0",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_080061f0",
            "FUN_0800572c",
            "FUN_08000a58",
            "FUN_08004092",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_0800480a",
            "FUN_08005f8c",
            "FUN_08004c5e",
            "FUN_08004d90",
            "FUN_08004828",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08000aa8",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_0800306c",
            "FUN_08004848",
            "FUN_08001f80",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_080065c0",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005cb6",
            "FUN_08002b84",
            "FUN_0800042c",
            "FUN_08005cc0",
            "FUN_08002624"
        ],
        [
            "FUN_08007004",
            "FUN_08004ec4",
            "FUN_080043b4",
            "FUN_08007028",
            "FUN_08004ca2",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_08004ef4",
            "FUN_080055e0",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08006c40",
            "FUN_08006920",
            "FUN_08004b94",
            "FUN_08001918",
            "FUN_08001c3c",
            "FUN_08005604",
            "FUN_08005c96",
            "FUN_08004b9e",
            "FUN_08000aec",
            "FUN_08004e12",
            "FUN_08003c90",
            "FUN_0800412c",
            "FUN_08005c38",
            "FUN_08005ce8",
            "FUN_08004c78",
            "FUN_080009b8",
            "FUN_08005a18",
            "FUN_08003ea0",
            "FUN_0800548c",
            "FUN_08001f84",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_080020f0",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08004cce",
            "FUN_08005568",
            "FUN_08003c70",
            "FUN_08004c48",
            "FUN_0800706c",
            "FUN_080040b0",
            "FUN_08004b34"
        ],
        [
            "FUN_08005510",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005fc8",
            "FUN_08001c88",
            "FUN_0800224c",
            "FUN_08005890",
            "FUN_08004204",
            "FUN_080045fe",
            "FUN_0800213c",
            "FUN_08005384",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08005d8a",
            "FUN_08002d1c",
            "FUN_08003da4",
            "FUN_080009dc",
            "FUN_080058e0",
            "FUN_080009f0",
            "FUN_08006ac0",
            "FUN_08005848",
            "FUN_08003ed8",
            "FUN_08002348",
            "FUN_08005cd4",
            "FUN_08006dc8",
            "FUN_0800492c",
            "FUN_080009a8",
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08003f18",
            "FUN_080009c8",
            "FUN_08006f92",
            "FUN_080054d4",
            "FUN_08006f38",
            "FUN_08003ad4",
            "FUN_08004478",
            "FUN_08005d42"
        ],
        [
            "FUN_08006c88",
            "FUN_08004e20",
            "FUN_080032b4",
            "FUN_0800598a",
            "FUN_0800441a",
            "FUN_08005da0",
            "FUN_08002384",
            "FUN_08000a18",
            "FUN_080046b8",
            "FUN_08001cd0",
            "FUN_08003520",
            "FUN_0800611c",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08005bb0",
            "FUN_08004b3c",
            "FUN_080012a2",
            "FUN_08000a04",
            "FUN_08005d82",
            "FUN_080015b2",
            "FUN_08006e10",
            "FUN_080053d4"
        ],
        [
            "FUN_080019f6",
            "FUN_08001960",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005da8",
            "FUN_08004a4c",
            "FUN_080057b4",
            "FUN_080012e8",
            "FUN_080033b8",
            "FUN_08005730",
            "FUN_08005a68",
            "FUN_080015f8",
            "FUN_080012c0",
            "FUN_08004c52"
        ],
        [
            "FUN_08005754",
            "FUN_08001a44",
            "FUN_08005f2c",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001ab0",
            "FUN_08006f5a",
            "FUN_08001310"
        ],
        [
            "FUN_0800138e",
            "FUN_08005f40",
            "FUN_08001b18",
            "FUN_0800134e",
            "FUN_08001366",
            "FUN_0800135a",
            "FUN_08001550",
            "FUN_08005f5e"
        ],
        [
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba",
            "FUN_08000bcc"
        ],
        [
            "FUN_08001510",
            "FUN_08005f6c"
        ],
        [
            "FUN_08001be8",
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080068f0",
            "FUN_08006be0",
            "FUN_080069e4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ]
    ],
    "locked_functions": []
}